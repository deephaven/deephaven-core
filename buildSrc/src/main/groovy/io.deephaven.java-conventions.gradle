plugins {
  id 'java'
}

def archivesBaseNamePrefix = 'deephaven-'

def compilerVersion = Integer.parseInt((String)project.findProperty('compilerVersion') ?: '17')
def languageLevel = Integer.parseInt((String)project.findProperty('languageLevel') ?: '8')

if (languageLevel > compilerVersion) {
  throw new IllegalArgumentException("languageLevel must be less than or equal to compileVersion")
}
if (languageLevel < 8) {
  throw new IllegalArgumentException("languageLevel must be greater than or equal to 8")
}

archivesBaseName = "${archivesBaseNamePrefix}${project.name}"

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(compilerVersion)
  }
}

tasks.withType(JavaCompile).configureEach {
  JavaCompile javac ->
    javac.options.fork = true
    javac.options.encoding = 'UTF-8'
    //javac.options.incremental = true
    //javac.options.compilerArgs << '-parameters'
    if (compilerVersion >= 9) {
      javac.options.release = languageLevel
      javac.options.forkOptions.jvmArgs << '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'
    }
}

tasks.withType(Jar).configureEach {
  Jar jar ->
    jar.preserveFileTimestamps = false
    jar.reproducibleFileOrder = true
}

tasks.named(LifecycleBasePlugin.CLEAN_TASK_NAME) {
  Delete d ->
    d.delete('out')
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Deephaven Database',
        'Implementation-Version': project.version,
        'Provider': 'gradle'
  }
}

configurations {
  testOutput.extendsFrom testRuntime
}
