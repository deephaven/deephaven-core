plugins {
  id 'java'
}

def archivesBaseNamePrefix = 'deephaven-'

def compilerVersion = Integer.parseInt((String)project.findProperty('compilerVersion') ?: '17')
def languageLevel = Integer.parseInt((String)project.findProperty('languageLevel') ?: '8')
def runtimeVersion = Integer.parseInt((String)project.findProperty('runtimeVersion') ?: '8')

if (languageLevel > compilerVersion) {
  throw new IllegalArgumentException("languageLevel must be less than or equal to compileVersion")
}
if (languageLevel < 8) {
  throw new IllegalArgumentException("languageLevel must be greater than or equal to 8")
}
if (runtimeVersion < languageLevel) {
  throw new IllegalArgumentException("runtimeVersion must be greater than or equal to languageLevel")
}

archivesBaseName = "${archivesBaseNamePrefix}${project.name}"

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(compilerVersion)
  }
}

tasks.withType(JavaCompile).configureEach {
  JavaCompile javac ->
    javac.options.fork = true
    javac.options.encoding = 'UTF-8'
    //javac.options.incremental = true
    javac.options.compilerArgs << '-parameters'


    if (compilerVersion >= 9) {
      javac.options.release = languageLevel

      // This is for annotation processing
      javac.options.forkOptions.jvmArgs << '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'
      //javac.options.forkOptions.jvmArgs << '--add-opens=java.base/java.nio=ALL-UNNAMED'

      if (languageLevel >= 9) {
        // This is for runtime
        //javac.options.compilerArgs << '--add-opens=java.base/java.nio=ALL-UNNAMED'
      }
    }
}

tasks.withType(GroovyCompile).configureEach {
  // Note: the groovy compiler doesn't seem to like 17, or actually take into account the release option.
  javaLauncher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(languageLevel)
  }
  //options.release = languageLevel
}

tasks.withType(JavaExec).configureEach {
  JavaExec exec ->
    exec.javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(runtimeVersion)
    }
}

tasks.withType(Test).configureEach {
  Test test ->
    test.javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(runtimeVersion)
    }
}

tasks.withType(Jar).configureEach {
  Jar jar ->
    jar.preserveFileTimestamps = false
    jar.reproducibleFileOrder = true
}

tasks.named(LifecycleBasePlugin.CLEAN_TASK_NAME) {
  Delete d ->
    d.delete('out')
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Deephaven Database',
        'Implementation-Version': project.version,
        'Provider': 'gradle'
  }
}

configurations {
  testOutput.extendsFrom testRuntime
}
