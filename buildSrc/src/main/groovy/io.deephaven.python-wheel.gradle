plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'license'
}

import io.deephaven.python.PythonWheelExtension

project.extensions.create('wheel', PythonWheelExtension, project.objects)

license {
    header rootProject.file('license-header')
    include '**/*.py'
    strictCheck true
    useDefaultMappings true
    ignoreFailures true
}

def licensePy = project.tasks.register('licensePy', com.hierynomus.gradle.license.tasks.LicenseCheck)
tasks.named('license').configure {
    dependsOn licensePy
}

def licenseFormatPy = project.tasks.register('licenseFormatPy', com.hierynomus.gradle.license.tasks.LicenseFormat)
tasks.named('licenseFormat').configure {
    dependsOn licenseFormatPy
}

afterEvaluate {
    licensePy.configure { task ->
        task.source = wheel.src()
    }
    licenseFormatPy.configure { task ->
        task.source = wheel.src()
    }
}
project.tasks.named('quick').configure {
    dependsOn project.tasks.named('license')
}

configurations {
    pythonWheel
    getByName(Dependency.DEFAULT_CONFIGURATION).extendsFrom(pythonWheel)
}

project.evaluationDependsOn(Docker.registryProject('python'))
def buildWheel = Docker.registerDockerTask(project, 'buildWheel') { config ->
    config.copyIn { Sync sync ->
        // apply the extension spec, copying into src
        sync.from(project.projectDir) { CopySpec copy ->
            wheel.contents().execute(copy)
            copy.into 'src'
        }
    }
    config.imageName = "deephaven/${project.name}:local-build"
    config.dockerfile { action ->
        // set up the container, env vars - things that aren't likely to change
        action.from 'deephaven/python:local-build as sources'
        action.arg 'DEEPHAVEN_VERSION'
        action.environmentVariable 'DEEPHAVEN_VERSION', project.version.toString()
        action.workingDir '/usr/src/app'
        action.copyFile '/src', '.'
        action.from 'sources as build'
        action.runCommand '''set -eux; \\
                      test -n "${DEEPHAVEN_VERSION}";\\
                      python setup.py bdist_wheel'''
    }
    config.parentContainers = [ Docker.registryTask(project, 'python') ]
    config.containerOutPath='/usr/src/app/dist'
    config.copyOut { Sync sync ->
        sync.into "build/wheel"
    }
}

artifacts {
    pythonWheel buildWheel
}
