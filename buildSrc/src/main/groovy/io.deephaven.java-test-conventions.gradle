plugins {
    id 'java'
}

if (project.findProperty('jacoco.enabled') == 'true') {
    // Only load if jacoco enabled; otherwise
    // instrumentation of the code is still done.
    project.apply plugin: 'io.deephaven.java-jacoco-conventions'
}

def testJar = project.tasks.register 'testJar', Jar, { Jar jar ->
    jar.from project.sourceSets.test.output
    jar.archiveClassifier = 'test'
}

configurations {
    testOutput.extendsFrom testRuntimeClasspath
}

artifacts {
    testOutput jar
    testOutput testJar
    archives testJar
}

// This only applies to the standard "test" task
project.tasks.named('test', Test, { test ->
    // We essentially want to set maxParallelForks for all "normal" tests. It will be capped by the number
    // of gradle workers, org.gradle.workers.max. We aren't able to set set this property for all Test types,
    // because testSerial needs special handling.
    test.maxParallelForks = Runtime.runtime.availableProcessors()
})

// This applies to all test types, including the testOutOfBand, testSerial, and testParallel
project.tasks.withType(Test).configureEach { Test t ->
    t.with {
        t.defaultCharacterEncoding = 'UTF-8'

        onlyIf { TestTools.shouldRunTests(project) }

        useJUnit()

        new File("$rootDir/tmp/workspace".toString()).mkdirs()
        new File("$rootDir/tmp/logs".toString()).mkdirs()

        // pass -PforceTest=true to run test again after they've passed once,
        // and input source has not changed (i.e. invalidate caching)
        if (findProperty('forceTest') == 'true') {
            outputs.upToDateWhen { false }
        }

        enableAssertions = true
        if (!maxHeapSize) {
            maxHeapSize = '3g'
        }

        if (findProperty('shortTests') == 'true') {
            systemProperty 'TstUtils.shortTests', 'true'
        }

        if (findProperty('showStandardStreams') == 'true') {
            testLogging.showStandardStreams = true
        }

        systemProperty 'Configuration.rootFile', 'dh-tests.prop'
        systemProperty 'GroovyDeephavenSession.defaultScriptPath', "$rootDir"
        systemProperty 'PythonDeephavenSession.defaultScriptPath', "$rootDir"
        systemProperty 'WorkerPythonEnvironment.defaultScriptPath', "$rootDir"
        systemProperty 'workspace', "$rootDir/tmp/workspace"
        systemProperty 'configuration.quiet', 'true'

        if (findProperty('debugCITests') == 'true') {
            Map<CharSequence, Long> times = [:]
            // TODO IDO-605: consider discovering the pid of the test executor, so we can also monitor / print RAM usage,
            //   in order to detect which tests are leaking RAM
            t.beforeTest {
                TestDescriptor d ->
                    String key = "$t.path:$d.className.$d.name".toString()
                    times[key] = System.currentTimeMillis()
                    println "Starting $key"
            }
            t.afterTest {
                TestDescriptor d ->
                    String key = "$t.path:$d.className.$d.name".toString()
                    long diff = System.currentTimeMillis() - times[key]
                    println "$diff ms spent on $key"
            }
        }

        exclude 'io/deephaven/**/NoTest*'
    }
}
