import io.deephaven.project.util.PublishingTools

plugins {
  id 'java'
  id 'signing'
  // Note: applying `com.vanniktech.maven.publish.base` instead of `com.vanniktech.maven.publish` which gives us more
  // control over (otherwise `com.vanniktech.maven.publish.JavaLibrary` would be applied by default).
  id 'com.vanniktech.maven.publish.base'
  id 'io.deephaven.javadoc-conventions'
}

java {
  withJavadocJar()
  withSourcesJar()
}

// Any published source jar should contain apt-generated sources
// See https://github.com/gradle/gradle/issues/33287
sourceSets.configureEach { sourceSet ->
  if (tasks.names.contains(sourceSet.getSourcesJarTaskName())) {
    tasks.named(sourceSet.getSourcesJarTaskName(), Jar) {
      from sourceSet.output.generatedSourcesDirs
    }
  }
}

tasks.withType(Javadoc).configureEach {
  // https://github.com/gradle/gradle/issues/19869
  options.addStringOption('sourcepath', sourceSets.main.allJava.getSourceDirectories().getAsPath())
}

project
    .extensions
    .getByType(PublishingExtension)
    .publications
    .create('mavenJava', MavenPublication) {
      // "java" is the component name created by the java plugin (does not provide a constant)
      from(project.components.named('java').get())
    }

PublishingTools.setupPublishing(project)
