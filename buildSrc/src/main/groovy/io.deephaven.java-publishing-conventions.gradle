plugins {
  id 'java'
  id 'signing'
  id 'maven-publish'
}

java {
  withJavadocJar()
  withSourcesJar()
}

// TODO: parameterize, or choose deephaven group email
def developerId = 'devinrsmith'
def developerName = 'Devin Smith'
def developerEmail = 'devinsmith@deephaven.io'

def projectUrl = 'https://github.com/deephaven/deephaven-core'
def orgName = 'Deephaven Data Labs'
def orgUrl = 'https://deephaven.io/'

def licenseName = ext.license.name
def licenseUrl = ext.license.url

def issuesSystem = 'GitHub Issues'
def issuesUrl = 'https://github.com/deephaven/deephaven-core/issues'

def scmUrl = 'https://github.com/deephaven/deephaven-core'
def scmConnection = 'scm:git:git://github.com/deephaven/deephaven-core.git'
def scmDevConnection = 'scm:git:ssh://github.com/deephaven/deephaven-core.git'

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifactId = archivesBaseName
      pom {
        description = project.description
        url = projectUrl
        organization {
          name = orgName
          url = orgUrl
        }
        licenses {
          license {
            name = licenseName
            url = licenseUrl
          }
        }
        scm {
          url = scmUrl
          connection = scmConnection
          developerConnection = scmDevConnection
        }
        issueManagement {
          system = issuesSystem
          url = issuesUrl
        }
        developers {
          developer {
            id = developerId
            name = developerName
            email = developerEmail
            organization = orgName
            organizationUrl = orgUrl
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = 'ossrh'
      // ossrhUsername, ossrhPassword
      credentials(PasswordCredentials)
      def releasesRepoUrl = "fake" //https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}

signing {
  sign publishing.publications.mavenJava
  String signingKey = findProperty("signingKey")
  String signingPassword = findProperty("signingPassword")
  if (signingKey != null && signingPassword != null) {
    // In CI, it's harder to pass a file; so if specified, we use the in-memory version.
    useInMemoryPgpKeys(signingKey, signingPassword)
  }
}