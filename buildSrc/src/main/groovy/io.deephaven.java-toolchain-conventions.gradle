import groovy.json.JsonBuilder

plugins {
  id 'java'
}

def compilerVersion = Integer.parseInt((String)project.findProperty('compilerVersion') ?: '11')
def compilerVendor = project.hasProperty('compilerVendor') ?  JvmVendorSpec.matching((String)project.property('compilerVendor')): null

def languageLevel = Integer.parseInt((String)project.findProperty('languageLevel') ?: '11')
def runtimeVersion = Integer.parseInt((String)project.findProperty('runtimeVersion') ?: '11')
def runtimeVendor = project.hasProperty('runtimeVendor') ?  JvmVendorSpec.matching((String)project.property('runtimeVendor')): null

def testLanguageLevel = Integer.parseInt((String)project.findProperty('testLanguageLevel') ?: '11')
def testRuntimeVersion = Integer.parseInt((String)project.findProperty('testRuntimeVersion') ?: '11')
def testRuntimeVendor = project.hasProperty('testRuntimeVendor') ?  JvmVendorSpec.matching((String)project.property('testRuntimeVendor')): null

if (languageLevel > compilerVersion) {
  throw new IllegalArgumentException("languageLevel must be less than or equal to compileVersion")
}
if (languageLevel < 8) {
  throw new IllegalArgumentException("languageLevel must be greater than or equal to 8")
}
if (testLanguageLevel < 8) {
  throw new IllegalArgumentException("testLanguageLevel must be greater than or equal to 8")
}
if (runtimeVersion < languageLevel) {
  throw new IllegalArgumentException("runtimeVersion must be greater than or equal to languageLevel")
}
if (testRuntimeVersion < testLanguageLevel) {
  throw new IllegalArgumentException("testRuntimeVersion must be greater than or equal to testLanguageLevel")
}

java {
  toolchain {
    // Note: even though we are being explicit with our compilers / launchers via task type, we want to set up the
    // plugin with our compiler version.
    languageVersion = JavaLanguageVersion.of(compilerVersion)
    if (compilerVendor != null) {
      vendor = compilerVendor
    }
  }
}

def compiler = javaToolchains.compilerFor {
  languageVersion = JavaLanguageVersion.of(compilerVersion)
  if (compilerVendor != null) {
    vendor = compilerVendor
  }
} as Provider<JavaCompiler>

def runtimeLauncher = javaToolchains.launcherFor {
  languageVersion = JavaLanguageVersion.of(runtimeVersion)
  if (runtimeVendor != null) {
    vendor = runtimeVendor
  }
} as Provider<JavaLauncher>

def testRuntimeLauncher = javaToolchains.launcherFor {
  languageVersion = JavaLanguageVersion.of(testRuntimeVersion)
  if (testRuntimeVendor != null) {
    vendor = testRuntimeVendor
  }
} as Provider<JavaLauncher>

def groovyCompilerLauncher = javaToolchains.launcherFor {
  languageVersion = JavaLanguageVersion.of(compilerVersion)
  if (compilerVendor != null) {
    vendor = compilerVendor
  }
} as Provider<JavaLauncher>

tasks.withType(JavaCompile).configureEach {
  javaCompiler.set compiler

  options.fork = true
  options.forkOptions.memoryMaximumSize = '2G'
  options.encoding = 'UTF-8'
  options.incremental = true
  options.compilerArgs << '-parameters'

  if (name == 'compileTestJava') {
    if (compilerVersion != testLanguageLevel) {
      options.release.set testLanguageLevel
    }
  } else {
    if (compilerVersion != languageLevel) {
      options.release.set languageLevel
    }
  }
}

def createCompilerDirectives = tasks.register('createCompilerDirectives') {
  def compilerDirectivesFile = project.layout.buildDirectory.file('dh-compiler-directives.txt')
  it.outputs.file(compilerDirectivesFile)

  doFirst {
    def builder = new JsonBuilder([{
      match (['*.*'] as List)
      // Note: there seems to be a bug where this option doesn't actually get picked up
      // So using '-XX:DisableIntrinsic=_currentThread' explicitly
      // DisableIntrinsic('_currentThread')
    }])
    compilerDirectivesFile.get().asFile.text = builder.toPrettyString()
  }
}

def compilerArgs = { String compilerDirectivesFile ->
  return [
          '-XX:+UnlockDiagnosticVMOptions',
          "-XX:CompilerDirectivesFile=${compilerDirectivesFile}",
          // (deephaven-core#2500): Remove DisableIntrinsic for currentThread
          '-XX:DisableIntrinsic=_currentThread',
          // '-XX:+CompilerDirectivesPrint',
          // '-XX:+LogCompilation',
  ]
}

// Utility to add jvm args to all executions, whether intellij or from a application script or gradle javaexec
def devJvmArgs = [
//  '-XX:Tier4CompileThreshold=1000', // this optional line makes it easier to trigger the c2 error on the above methods
//  '-XX:+PrintFlagsFinal',           // this optional line makes it easier to explore the final values for compiler args
//  '-XX:+PrintCompilation',          // this optional line shows jit operations as they happen
]

tasks.withType(JavaExec).configureEach {
  def compilerDirectivesFile = createCompilerDirectives.get().outputs.files
  inputs.files compilerDirectivesFile
  javaLauncher.set runtimeLauncher
  jvmArgs += compilerArgs(compilerDirectivesFile.singleFile.path) + devJvmArgs
}

tasks.withType(Test).configureEach {
  def compilerDirectivesFile = createCompilerDirectives.get().outputs.files
  inputs.files compilerDirectivesFile

  javaLauncher.set testRuntimeLauncher
  jvmArgs += compilerArgs(compilerDirectivesFile.singleFile.path) + devJvmArgs
}

tasks.withType(GroovyCompile).configureEach {
  javaLauncher.set groovyCompilerLauncher
}

plugins.withType(ApplicationPlugin) {
  applicationDistribution.into('lib') {
    from(createCompilerDirectives.get().outputs.files)
  }
}
tasks.withType(CreateStartScripts).configureEach {
  def unixStartScript = resources.text.fromUri(getClass().classLoader.getResource('unixStartScript.txt'))
  inputs.files unixStartScript
  unixStartScriptGenerator.template = unixStartScript
  // For now we only modify the *nix script, as the windows .bat file doesn't seem to work properly anyway,
  // and we don't yet have a requirement for it.
  windowsStartScriptGenerator.template = resources.text.fromString("echo Sorry, Windows .bat is not currently supported, please use WSL2\nexit 1")

//  def windowsStartScript = resources.text.fromUri(getClass().classLoader.getResource('windowsStartScript.txt'))
//  inputs.files windowsStartScript
//  windowsStartScriptGenerator.template = windowsStartScript

  // Note that we don't call compilerArgs() at this time, there is no way to template those strings.
  // Instead, we hard code the expected paths in the above templates to match the path lib/dh-compiler-directives.txt
//  defaultJvmOpts += compilerArgs(compilerDirectivesFile.singleFile.path)

  defaultJvmOpts += devJvmArgs
}
