plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
}

description = 'The Deephaven flight SQL library'

sourceSets {
    jdbcTest {
        compileClasspath += sourceSets.test.output
        runtimeClasspath += sourceSets.test.output
    }
}

configurations {
    jdbcTestImplementation.extendsFrom testImplementation
    jdbcTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation project(':server')
    implementation project(':proto:proto-backplane-grpc-flight')

    implementation libs.arrow.flight.sql
    implementation project(':engine-sql')
    implementation project(':extensions-barrage')

    testImplementation project(':server')
    testImplementation project(':extensions-csv')

    implementation libs.dagger
    annotationProcessor libs.dagger.compiler

    testImplementation project(':server-jetty')
    testImplementation project(':server-test-utils')

    testImplementation libs.dagger
    testAnnotationProcessor libs.dagger.compiler

    testImplementation libs.assertj
    testImplementation platform(libs.junit.bom)
    testImplementation libs.junit.jupiter
    testRuntimeOnly libs.junit.platform.launcher

    testRuntimeOnly project(':log-to-slf4j')
    testRuntimeOnly libs.slf4j.simple

    // Isolating to its own sourceSet / classpath because it breaks logging until we can upgrade to a newer version
    // See https://github.com/apache/arrow/pull/40908
    // See https://github.com/deephaven/deephaven-core/issues/5947
    jdbcTestRuntimeOnly libs.arrow.flight.sql.jdbc
}

test {
    useJUnitPlatform()
}

tasks.register('jdbcTest', Test) {
    description = 'Runs JDBC tests.'
    group = 'verification'

    testClassesDirs = sourceSets.jdbcTest.output.classesDirs
    classpath = sourceSets.jdbcTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
}
