# We do not want gradle to auto-download a JDK - we are assuming that developers should be setting
# up their JDK environments as a prerequisite.
# See https://docs.gradle.org/6.8.3/userguide/toolchains.html#sec:provisioning
org.gradle.java.installations.auto-download=false

#org.gradle.debug
## Enable to attach debugger to port 5005 when running gradle
## Note, you can use -Dorg.gradle.debug=true as well.
## Be sure to set remote debugger configuration to use the deephaven buildSrc project for classpath.

# Which named DH release codename you wish to use with respect to artifact resolution and publishing.
# Will look in $rootDir/gradle/versions|snapshotSources|changelogs/$versionSource for versioned properties.
versionSource=mp

## Pick a log level
#org.gradle.logging.level=warn
#org.gradle.logging.level=quiet
#org.gradle.logging.level=lifecycle
#org.gradle.logging.level=info
#org.gradle.logging.level=debug

# The version of shadowJar dependencies to use.  If you bump this value, make sure to also bump it in shadowed/gradle.properties
# You must redeploy the new versions using https://jenkins.lab.deephaven.io/job/shadow-publish
shadowVersion=1.1.14
shadowDevelopVersion=1.0.17-SNAPSHOT

# see gradle/deephaven-jpy.gradle for context
deephavenJpyGoldenSha=a76cc933a2113c8b3c866c0625dc04e32e8fde25

# Set withPy=true to enable building (and publishing) python during this gradle build.
# This is off by default until we can remove the need for python dependencies to be installed on host system (IDO-436)
# You can turn this on universally for your machine by adding to ~/.gradle/gradle.properties,
# or via intellij by adding system property -Dorg.gradle.project.withPy=true in your gradle VM options (wrench icon in gradle menu).
# withPy=true


# py.install.root is used to point to a directory containing python installations.
# the default value is $rootDir/py/installs
# We expect to find directories py36 and py37 in the installation root.
# If these python installs do not exist, we will create them, on demand.
# (note that we do not yet support providing these installations to gradle,
# however, it should be safe to change this location to somewhere outside of the build
# so that we can avoid re-installing the same python version over and over.
#py.install.root=/location/to/find/python/installs


# Where to create a shared cache for pip operations.  This will reduce network timeout errors,
# and increase overall (re)build times.  In CI, we will mount a pre-primed cache directory,
# so that individual builds will use ~0 network resources during pip installs
pipCacheDir=build/pipcache


# use this to control the jvm arguments of gradle daemons.
org.gradle.jvmargs=-Xms1g -Xmx3g -XX:+CMSClassUnloadingEnabled

# Setting debugCI to true will cause failed builds to keepalive for three hours so we can do post-mortem inspection of jenkins workspace
debugCI=false
# Setting debugCITests to true will cause all tests to spam before/after messages describing the test being run.
debugCITests=false

# The versions of node/npm to use in all (node)js projects
nodeVersion=12.6.0
npmVersion=6.13.6

# The following properties control the directories where node/npm will be extracted.
# We set these in jenkins to an external cache directory,
# so that we can prevent redownloading 2*125MB of archives on every build.
nodeWorkDir=web/.cache/nodejs
npmWorkDir=web/.cache/npm
yarnWorkDir=web/.cache/yarn
nodeModulesIde=web/client-ui/
nodeModulesJupyter=web/jupyter-grid/js/
nodeModulesProto=proto/
