# This structure gives DHC and re-builders control over the version. When deephavenBaseQualifier is non-empty, the
# project version will be "${deephavenBaseVersion}-${deephavenBaseQualifier}". When deephavenBaseQualifier is empty, the
# project version will be deephavenBaseVersion.
#
# The default values will represent the in-development version for the next release: "X.Y.Z-SNAPSHOT".
#
# During the normal DHC release process, the publishing code will set -PdeephavenBaseQualifier="": "X.Y.Z".
#
# Re-builders who want to inherit the base version, but have their own qualifier can set -PdeephavenBaseQualifier="customQualifier": "X.Y.Z-customQualifier".
#
# Re-builders who want a fully custom version can set -PdeephavenBaseVersion="customVersion" -PdeephavenBaseQualifier="": "customVersion".
deephavenBaseVersion=0.31.0
deephavenBaseQualifier=SNAPSHOT

#org.gradle.debug
## Enable to attach debugger to port 5005 when running gradle
## Note, you can use -Dorg.gradle.debug=true as well.
## Be sure to set remote debugger configuration to use the deephaven buildSrc project for classpath.

# The `org.gradle.jvmargs` property controls the memory settings for the gradle _daemon_.
# The majority of "real" work is done by gradle _workers_.
# The gradle daemon needs enough memory to handle the configuration and coordination for the build process.
# By default, the gradle daemon sets 512m for max memory, but our project (currently) needs a little bit more.
# The amount of memory a daemon uses is a function of how complex the project is, as well as the gradle implementation
# details which may vary from release to release.
# The gradle build scans provide a nice "Peak heap memory usage" value under the "Performance" tab which may help guide
# setting this value.
#
# The gradle workers often have their own methods to control additional heap.
# For example, compilation and java tests are able to set their own memory usage needs through their own configurations.
org.gradle.jvmargs=-Xmx1g
org.gradle.parallel=true

# If you are running the full test suite locally, or running gradle builds on infrastructure that has a lot of CPUs but
# is memory-limited, you may need to explicitly tune your max workers.
# See .github/scripts/gradle-properties.sh for the logic we use there.
# See https://github.com/gradle/gradle/issues/14431#issuecomment-1601724453.
#org.gradle.workers.max=...

# Setting debugCI to true will cause failed builds to keepalive for three hours so we can do post-mortem inspection of jenkins workspace
debugCI=false
# Setting debugCITests to true will cause all tests to spam before/after messages describing the test being run.
debugCITests=false

io.deephaven.project.ProjectType=ROOT
