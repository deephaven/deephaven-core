% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operation_control.R
\name{op_control}
\alias{op_control}
\title{Handling special values in some UpdateBy operations}
\usage{
op_control(on_null = "skip", on_nan = "skip", big_value_context = "decimal128")
}
\arguments{
\item{on_null}{Defines how a \code{uby} function handles null values it encounters. \code{'skip'} is the default.}

\item{on_nan}{Defines how a \code{uby} function handles NaN values it encounters. \code{'skip'} is the default.}

\item{big_value_context}{Defines how a \code{uby} function handles exceptionally large values it encounters.
\code{'decimal128'} is the default.}
}
\value{
\code{OperationControl} to be used in a \code{uby} function.
}
\description{
Creates an \code{OperationControl} that controls behavior on special values in some UpdateBy operations. This function is
the only way to properly create an \code{OperationControl} object.
}
\details{
An \code{\link{OperationControl}} defines the control parameters of some \code{uby} functions used in an \code{update_by()} call.
The \code{uby} functions that can use an \code{OperationControl} to handle erroneous data are:
\itemize{
\item \code{\link[=uby_ema_tick]{uby_ema_tick()}}
\item \code{\link[=uby_ema_time]{uby_ema_time()}}
\item \code{\link[=uby_ems_tick]{uby_ems_tick()}}
\item \code{\link[=uby_ems_time]{uby_ems_time()}}
\item \code{\link[=uby_emmin_tick]{uby_emmin_tick()}}
\item \code{\link[=uby_emmin_time]{uby_emmin_time()}}
\item \code{\link[=uby_emmax_tick]{uby_emmax_tick()}}
\item \code{\link[=uby_emmax_time]{uby_emmax_time()}}
\item \code{\link[=uby_emstd_tick]{uby_emstd_tick()}}
\item \code{\link[=uby_emstd_time]{uby_emstd_time()}}
}

The arguments \code{on_null} and \code{on_nan} can take the following values:
\itemize{
\item \code{'poison'}: Allow bad data to poison the result, meaning that any calculation involving at least one NaN will yield
NaN. This is only valid for use with NaN.
\item \code{'reset'}: Reset the state for the bucket to NULL when invalid data is encountered.
\item \code{'skip'}: Skip and do not process the invalid data without changing state.
\item \code{'throw'}: Throw an exception and abort processing when bad data is encountered.
}

The argument \code{big_value_context} can take the following values:
\itemize{
\item \code{'decimal128'}: IEEE 754R Decimal128 format. 34 digits and rounding is half-even.
\item \code{'decimal32'}: IEEE 754R Decimal32 format. 7 digits and rounding is half-even.
\item \code{'decimal64'}: IEEE 754R Decimal64 format. 16 digits and rounding is half-even.
\item \code{'unlimited'}: Unlimited precision arithmetic. Rounding is half-up.
}

This function is a generator function. That is, its output is another function called an \code{\link{OperationControl}} intended
to be used in a call to one of the above \code{uby} functions. This detail is typically hidden from the user. However,
it is important to understand this detail for debugging purposes, as the output of a call to \code{op_control()} can otherwise seem unexpected.
}
\examples{
print("hello!")

}
