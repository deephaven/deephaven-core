% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_by_ops_wrapper.R
\name{uby_rolling_avg_tick}
\alias{uby_rolling_avg_tick}
\title{Rolling average with ticks as the windowing unit}
\arguments{
\item{cols}{String or list of strings denoting the column(s) to operate on. Can be renaming expressions, i.e. “new_col = col”.
Default is to compute the rolling average for all non-grouping columns.}

\item{rev_ticks}{Integer scalar denoting the look-behind window size in number of rows.}

\item{fwd_ticks}{Integer scalar denoting the look-ahead window size in number of rows. Default is 0.}
}
\value{
\code{UpdateByOp} to be used in a call to \code{update_by()}.
}
\description{
Creates a simple moving average (SMA) UpdateByOp for each column in \code{cols}, using ticks as the windowing unit.
}
\details{
Ticks are row counts, and you may specify the reverse and forward window in number of rows to include.
The current row is considered to belong to the reverse window but not the forward window.
Also, negative values are allowed and can be used to generate completely forward or completely reverse windows.
Here are some examples of window values:
\itemize{
\item \verb{rev_ticks = 1, fwd_ticks = 0} - contains only the current row
\item \verb{rev_ticks = 10, fwd_ticks = 0} - contains 9 previous rows and the current row
\item \verb{rev_ticks = 0, fwd_ticks = 10} - contains the following 10 rows, excludes the current row
\item \verb{rev_ticks = 10, fwd_ticks = 10} - contains the previous 9 rows, the current row and the 10 rows following
\item \verb{rev_ticks = 10, fwd_ticks = -5} - contains 5 rows, beginning at 9 rows before, ending at 5 rows before
the current row (inclusive)
\item \verb{rev_ticks = 11, fwd_ticks = -1} - contains 10 rows, beginning at 10 rows before, ending at 1 row before
the current row (inclusive)
\item \verb{rev_ticks = -5, fwd_ticks = 10} - contains 5 rows, beginning 5 rows following, ending at 10 rows following
the current row (inclusive)
}

This function acts on aggregation groups specified with the \code{by} parameter of the \code{update_by()} caller function.
The aggregation groups are defined by the unique combinations of values in the \code{by} columns. For example,
if \code{by = c("A", "B")}, then the aggregation groups are defined by the unique combinations of values in the
\code{A} and \code{B} columns.

This function, like other Deephaven \code{uby} functions, is a generator function. That is, its output is another
function called an \code{\link{UpdateByOp}} intended to be used in a call to \code{update_by()}. This detail is typically
hidden from the user. However, it is important to understand this detail for debugging purposes, as the output of
a \code{uby} function can otherwise seem unexpected.

For more information, see the vignette on \code{uby} functions by running
\code{vignette("update_by")}.
}
\examples{
\dontrun{
library(rdeephaven)

# connecting to Deephaven server
client <- Client$new("localhost:10000", auth_type = "psk", auth_token = "my_secret_token")

# create data frame, push to server, retrieve TableHandle
df <- data.frame(
  timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = "1 sec")[1:500],
  boolCol = sample(c(TRUE, FALSE), 500, TRUE),
  col1 = sample(10000, size = 500, replace = TRUE),
  col2 = sample(10000, size = 500, replace = TRUE),
  col3 = 1:500
)
th <- client$import_table(df)

# compute rolling average of col1 and col2, using the previous 5 rows and current row
th1 <- th$
  update_by(uby_rolling_avg_tick(cols = c("col1RollAvg = col1", "col2RollAvg = col2"), rev_ticks = 6))

# compute rolling average of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows
th2 <- th$
  update_by(uby_rolling_avg_tick(cols = c("col1RollAvg = col1", "col2RollAvg = col2"), rev_ticks = 6, fwd_ticks = 5), by = "boolCol")

# compute rolling average of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows
th3 <- th$
  update("col3Parity = col3 \% 2")$
  update_by(uby_rolling_avg_tick(cols = c("col1RollAvg = col1", "col2RollAvg = col2"), rev_ticks = 1, fwd_ticks = 10), by = c("boolCol", "col3Parity"))

client$close()
}

}
