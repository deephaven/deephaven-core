% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_by_ops_wrapper.R
\name{uby_forward_fill}
\alias{uby_forward_fill}
\title{Replace null values with the last known non-null value}
\arguments{
\item{cols}{String or list of strings denoting the column(s) to operate on. Can be renaming expressions, i.e. “new_col = col”.
Default is to perform a forward fill on all non-grouping columns.}
}
\value{
\code{UpdateByOp} to be used in a call to \code{update_by()}.
}
\description{
Creates a forward fill UpdateByOp that replaces null values in \code{cols} with the last known non-null values.
This operation is forward only.
}
\details{
This function acts on aggregation groups specified with the \code{by} parameter of the \code{update_by()} caller function.
The aggregation groups are defined by the unique combinations of values in the \code{by} columns. For example,
if \code{by = c("A", "B")}, then the aggregation groups are defined by the unique combinations of values in the
\code{A} and \code{B} columns.

This function, like other Deephaven \code{uby} functions, is a generator function. That is, its output is another
function called an \code{\link{UpdateByOp}} intended to be used in a call to \code{update_by()}. This detail is typically
hidden from the user. However, it is important to understand this detail for debugging purposes, as the output of
a \code{uby} function can otherwise seem unexpected.

For more information, see the vignette on \code{uby} functions by running
\code{vignette("update_by")}.
}
\examples{
\dontrun{
library(rdeephaven)

# connecting to Deephaven server
client <- Client$new("localhost:10000", auth_type = "psk", auth_token = "my_secret_token")

# create data frame, push to server, retrieve TableHandle
df <- data.frame(
  timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = "1 sec")[1:500],
  boolCol = sample(c(TRUE, FALSE), 500, TRUE),
  col1 = replace(sample(10000, size = 500, replace = TRUE), sample(500, 100), NA),
  col2 = replace(sample(10000, size = 500, replace = TRUE), sample(500, 100), NA),
  col3 = replace(1:500, sample(500, 100), NA)
)
th <- client$import_table(df)

# forward fill col1 and col2
th1 <- th$
  update_by(uby_forward_fill(c("col1", "col2")))

# forward fill col1 and col2, grouped by boolCol
th2 <- th$
  update_by(uby_forward_fill(c("col1", "col2")), by = "boolCol")

# forward fill col3, compute parity of col3, and forward fill col1 and col2, grouped by boolCol and parity of col3
th3 <- th$
  update_by(uby_forward_fill("col3"))$
  update("col3Parity = col3 \% 2")$
  update_by(uby_forward_fill(c("col1", "col2")), by = c("boolCol", "col3Parity"))

client$close()
}

}
