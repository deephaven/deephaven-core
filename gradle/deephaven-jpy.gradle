project(':deephaven-jpy') {

  apply plugin: 'com.bmuschko.docker-remote-api'

  test {
    onlyIf { false } // don't run tests, it depends on python assets, which we aren't building ATM
    exclude "**/*" // make sure intellij doesn't try to use this disabled test class7
  }

  dependencies {
    testCompile 'junit:junit:4.12' // but we still want tests to compile
  }

  /**
   * This is a warning against accidentally modifying the py/jpy subtree.
   * If you know what you are doing, it should be done as a git subtree pull.
   * After an update to the py/jpy subtree, you should update the deephavenJpyGoldenSha property
   */
  task checkSubtree(type: Exec) {
    workingDir = rootDir
    commandLine 'git', 'diff', '--quiet', '--exit-code', deephavenJpyGoldenSha, 'py/jpy'
  }

  // For OSS, we need to currently move fast, and will prefer to make edits directly in py/jpy.
  // These can be backported to jpy proper in the future if necessary.
  //check.dependsOn checkSubtree

  // TODO: it would be nice to have something like this to update the subtree
  /*
  task updateSubtree(branch) {
    git diff --quiet --exit-code HEAD # make sure there aren't any changes
    git remote add --fetch illumon-jpy https://github.com/illumon-public/illumon-jpy.git
    git subtree pull --prefix py/jpy illumon-jpy branch --squash
    git remote remove illumon-jpy
    NEW_GOLDEN_COMMIT = FishDev.branchName
    ... update gradle.properties file w/ NEW_GOLDEN_COMMIT
    git add gradle.properties
    git commit -m "updated deephavenJpyGoldenSha to ${NEW_GOLDEN_COMMIT}"
  }
  */

  /**
   * We don't want to enable the jpy building on all environments yet
   * because it requires the ability of the running machine to build/install python.
   *
   * https://github.com/JetBrains/gradle-python-envs
   * https://github.com/pyenv/pyenv/wiki/common-build-problems
   * https://github.com/pyenv/pyenv/wiki
   */
  if (PyEnv.pythonEnabled(project)) {
    PyEnv.getEnv(project)
    gradle.buildFinished {
      // the double-compilation of jpy by gradle and maven can confuse jenkins jacoco plugin.
      // rather than require all configurations of jacoco to filter out the maven results,
      // we'll just delete them here.  We can remove this once we remove dependency on mvn.
      // maven is junky and rebuilds on every invocation anyway, so deleting this won't be "expensive" anyway.
      // Remove this once IDO-438 merges
      new File(rootDir, 'py/jpy/target').deleteDir()
      
    }
  }

  task prepareDocker(type: Sync) {
    from(project.projectDir) {
      exclude 'build'
    }
    into 'build/docker'
  }
  Docker.registerDockerImage(project, 'buildDockerForRuntime') {
    dependsOn prepareDocker
    buildArgs.put('DEEPHAVEN_VERSION', "${project.version}")
    images.add('deephaven/java-and-python')
    target.set('runtime_reqs')
  }

  Docker.registerDockerImage(project, 'buildDockerForWheel') {
    dependsOn prepareDocker
    buildArgs.put('DEEPHAVEN_VERSION', "${project.version}")
    images.add('deephaven/deephaven-jpy-wheel')

    target.set('build')
  }
}
// temporary cleanup of old python installation directory.
// we'll leave this in for the sultan release to help automatically reclaim disk space
// for the few developers / machines which have been building python using the prototype.
// It can be safely removed when we also remove maven.
new File(rootDir, 'py/bootstrap').deleteDir()
