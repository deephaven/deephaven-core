plugins {
    id 'application'
    id 'io.deephaven.project.register'
}

configurations {
    applicationDist
}

dependencies {
    implementation project(':server-jetty')

    runtimeOnly project(':log-to-slf4j')
    runtimeOnly project(':logback-print-stream-globals')
    runtimeOnly project(':logback-logbuffer')
    Classpaths.inheritLogbackClassic(project)
}

distributions {
    main {
        distributionBaseName = 'server-jetty'
    }
}

def extraJvmArgs = [
        '-server',
        '-XshowSettings:vm',
]

if (hasProperty('groovy')) {
    extraJvmArgs += ['-Ddeephaven.console.type=groovy']
}

if (!hasProperty('excludeHotspotImpl')) {
    dependencies {
        runtimeOnly project(':hotspot-impl')
    }
    extraJvmArgs += ['--add-exports', 'java.management/sun.management=ALL-UNNAMED']
}

if (!hasProperty('excludeClockImpl')) {
    dependencies {
        runtimeOnly project(':clock-impl')
    }
    extraJvmArgs += ['--add-exports', 'java.base/jdk.internal.misc=ALL-UNNAMED']
}

if (hasProperty('devCerts') || hasProperty('devMTLS')) {
    extraJvmArgs += [
            '-Dhttp.port=8443',
            '-Dssl.identity.type=privatekey',
            '-Dssl.identity.certChainPath=../dev-certs/server.chain.crt',
            '-Dssl.identity.privateKeyPath=../dev-certs/server.key',
    ]
    if (hasProperty('devMTLS')) {
        extraJvmArgs += [
                '-Dssl.trust.type=certs',
                '-Dssl.trust.path=../dev-certs/ca.crt',
                '-Dssl.clientAuthentication=NEEDED',
        ]
    }
}

if (hasProperty('debug')) {
    extraJvmArgs += ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005']
}

if (hasProperty('gcApplication')) {
    extraJvmArgs += ['-Dio.deephaven.app.GcApplication.enabled=true']
}

tasks.withType(JavaExec).configureEach {
    // This appends to the existing jvm args, so that java-open-nio still takes effect
    jvmArgs extraJvmArgs

    jvmArgs '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication',
            // For development in this repository via Gradle, use the top-level data directory
            "-Dstorage.path=${rootDir}/data"
}

tasks.withType(CreateStartScripts).configureEach {
    defaultJvmOpts += extraJvmArgs
}

applicationName = 'start'
mainClassName = 'io.deephaven.server.jetty.JettyMain'

artifacts {
    applicationDist project.tasks.findByName('distTar')
}

apply plugin: 'io.deephaven.java-open-nio'
