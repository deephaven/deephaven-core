plugins {
    id 'application'
    id 'io.deephaven.project.register'
}

configurations {
    applicationDist
}

dependencies {
    implementation project(':server-jetty')

    runtimeOnly project(':log-to-slf4j')
    runtimeOnly project(':logback-print-stream-globals')
    runtimeOnly project(':logback-logbuffer')
    Classpaths.inheritLogbackClassic(project)
}

distributions {
    main {
        distributionBaseName = 'server-jetty'
    }
}

def extraJvmArgs = [
        '-server',
        '-XshowSettings:vm',
]

if (hasProperty('groovy')) {
    extraJvmArgs += ['-Ddeephaven.console.type=groovy']
}

if (!hasProperty('excludeHotspotImpl')) {
    dependencies {
        runtimeOnly project(':hotspot-impl')
    }
    extraJvmArgs += ['--add-exports', 'java.management/sun.management=ALL-UNNAMED']
}

if (!hasProperty('excludeClockImpl')) {
    dependencies {
        runtimeOnly project(':clock-impl')
    }
    extraJvmArgs += ['--add-exports', 'java.base/jdk.internal.misc=ALL-UNNAMED']
}

if (!hasProperty('excludeSql')) {
    dependencies {
        runtimeOnly project(':engine-sql')
    }
}

def authHandlers = []
def authConfigs = ['AuthHandlers']
if (hasProperty('anonymous')) {
    authHandlers += ['io.deephaven.auth.AnonymousAuthenticationHandler']
}

if (hasProperty('devCerts') || hasProperty('devMTLS')) {
    extraJvmArgs += [
            '-Dhttp.port=8443',
            '-Dssl.identity.type=privatekey',
            '-Dssl.identity.certChainPath=../dev-certs/server.chain.crt',
            '-Dssl.identity.privateKeyPath=../dev-certs/server.key',
    ]
    if (hasProperty('devMTLS')) {
        extraJvmArgs += [
                '-Dssl.trust.type=certs',
                '-Dssl.trust.path=../dev-certs/ca.crt',
                '-Dssl.clientAuthentication=NEEDED',
        ]
        authHandlers += ['io.deephaven.authentication.mtls.MTlsAuthenticationHandler']
        dependencies.implementation(dependencies.project(path: ':authentication:example-providers:mtls', configuration:'shadow'))
    }
}

if (hasProperty('debug')) {
    extraJvmArgs += ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005']
}

if (hasProperty('debugAutocomplete')) {
    extraJvmArgs += ['-Ddeephaven.console.autocomplete.quiet=false']
}

if (hasProperty('gcApplication')) {
    extraJvmArgs += ['-Dio.deephaven.app.GcApplication.enabled=true']
}

if (hasProperty('quiet')) {
    extraJvmArgs += ['-Ddeephaven.quiet=true']
}

if (hasProperty('psk')) {
    authHandlers += ['io.deephaven.authentication.psk.PskAuthenticationHandler']
    if (project.getProperty('psk')) {
        // if there is a non-empty value assigned, use that for the key
        extraJvmArgs += ["-Dauthentication.psk=${getProperty('psk')}"]
    }
}
if (hasProperty('sql-username-password')) {
    authHandlers += ['io.deephaven.authentication.sql.BasicSqlAuthenticationHandler']
    extraJvmArgs += [
            '-Dauthentication.basic.sql.jdbc.connection=jdbc:postgresql://localhost:5432/postgres',
            '-Dauthentication.basic.sql.jdbc.user=postgres',
            '-Dauthentication.basic.sql.jdbc.password=password',
    ]
    dependencies.implementation(dependencies.project(path: ':authentication:example-providers:sql-username-password', configuration:'shadow'))
}
if (hasProperty('oidc')) {
    authHandlers += ['io.deephaven.authentication.oidc.OidcAuthenticationHandler']
    extraJvmArgs += [
            '-Dauthentication.oidc.keycloak.url=http://localhost:6060',
            '-Dauthentication.oidc.keycloak.realm=deephaven_core',
            '-Dauthentication.oidc.keycloak.clientId=deephaven',
    ]
    authConfigs += [
            'authentication.oidc.keycloak.url',
            'authentication.oidc.keycloak.realm',
            'authentication.oidc.keycloak.clientId',
    ]
    extraJvmArgs += ['-Dauthentication.client.configuration.list=AuthHandlers,authentication.oidc.keycloak.url,authentication.oidc.keycloak.realm,authentication.oidc.keycloak.clientId']
    dependencies.implementation(dependencies.project(path: ':authentication:example-providers:oidc', configuration:'shadow'))
}

if (!authHandlers.isEmpty()) {
    extraJvmArgs += ["-DAuthHandlers=${authHandlers.join(',')}"]
}
extraJvmArgs += ["-Dauthentication.client.configuration.list=${authConfigs.join(',')}"]

tasks.withType(JavaExec).configureEach {
    // This appends to the existing jvm args, so that java-open-nio still takes effect
    jvmArgs extraJvmArgs
}

tasks.withType(CreateStartScripts).configureEach {
    defaultJvmOpts += extraJvmArgs
}

applicationName = 'start'
mainClassName = 'io.deephaven.server.jetty.JettyMain'

artifacts {
    applicationDist project.tasks.findByName('distTar')
}

apply plugin: 'io.deephaven.java-open-nio'
