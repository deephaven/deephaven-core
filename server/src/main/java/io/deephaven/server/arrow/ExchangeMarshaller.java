//
// Copyright (c) 2016-2025 Deephaven Data Labs and Patent Pending
//
package io.deephaven.server.arrow;

import io.deephaven.barrage.flatbuf.BarrageSnapshotRequest;
import io.deephaven.barrage.flatbuf.BarrageSubscriptionRequest;
import io.deephaven.engine.liveness.LivenessReferent;
import io.deephaven.extensions.barrage.BarrageMessageWriter;
import io.deephaven.extensions.barrage.BarragePerformanceLog;
import io.deephaven.extensions.barrage.BarrageSnapshotOptions;
import io.deephaven.extensions.barrage.BarrageSubscriptionOptions;
import io.grpc.stub.StreamObserver;
import org.jetbrains.annotations.Nullable;

import java.util.Collection;

/**
 * The ExchangeMarshaller is a pluggable component within {@link ArrowFlightUtil} that translated exported objects into
 * suitable Barrage messages. Only one marshaller may be responsible for each object. Each marshaller provides support
 * for snapshots and/or subscriptions.
 *
 * <p>
 * Note: this interface is not yet stable.
 * </p>
 */
public interface ExchangeMarshaller {
    /**
     * Given the ordered Collection of {@link ExchangeMarshaller}s return the first marshaller that will accept the
     * exported object. If no marshaller accepts the object, then null is returned.
     *
     * @param export the object to be exported
     * @param marshallers the ordered collection of marshallers
     * @return the first matching marshaller, or null if none exists
     */
    @Nullable
    static ExchangeMarshaller getMarshaller(final Object export, final Collection<ExchangeMarshaller> marshallers) {
        for (final ExchangeMarshaller marshaller : marshallers) {
            if (marshaller.accept(export)) {
                return marshaller;
            }
        }
        return null;
    }

    /**
     * The priority of this marshaller.
     *
     * <p>
     * All available marshallers are consulted in sequence, in ascending numerical priority. The first (lowest numerical
     * priority) marshaller to accept an object is used.
     * </p>
     * 
     * @return the priority of this marshaller
     */
    int priority();

    /**
     * Does this marshaller accept the given export?
     * 
     * @param export the object to test
     * @return true if this marshaller should be used, false to use the remainder of the marshaller chain
     */
    boolean accept(Object export);

    /**
     * Processes a snapshot request using the provided parameters.
     *
     * @param snapshotRequest the request specifying details for the snapshot operation
     * @param options the configuration options for the snapshot, such as batch size or message size limits
     * @param export the object to be exported as part of the snapshot
     * @param metrics helper for recording and reporting snapshot performance metrics
     * @param listener the observer to handle messages generated during the snapshot process
     * @param ticketLogName the name of the ticket log associated with the snapshot request
     * @param streamGeneratorFactory the factory to generate message streams for the snapshot operation
     */
    void snapshot(BarrageSnapshotRequest snapshotRequest,
            BarrageSnapshotOptions options,
            Object export,
            BarragePerformanceLog.SnapshotMetricsHelper metrics,
            StreamObserver<BarrageMessageWriter.MessageView> listener, String ticketLogName,
            BarrageMessageWriter.Factory streamGeneratorFactory);

    /**
     * Subscribes to a Barrage stream using the provided subscription request and options.
     *
     * @param subscriptionRequest the request specifying the details of the subscription
     * @param options the options to configure the subscription
     * @param export the exported object to be subscribed
     * @param listener the listener to handle messages generated by the subscription
     * @return a Subscription object to manage the lifecycle of the Barrage subscription
     */
    Subscription subscribe(BarrageSubscriptionRequest subscriptionRequest,
            BarrageSubscriptionOptions options,
            Object export,
            StreamObserver<BarrageMessageWriter.MessageView> listener);

    /**
     * The return value from a
     * {@link #subscribe(BarrageSubscriptionRequest, BarrageSubscriptionOptions, Object, StreamObserver)} call.
     */
    interface Subscription {
        /**
         * @return an object that should be managed for this subscription, or null
         */
        @Nullable
        LivenessReferent toManage();

        /**
         * Release the resources associated with this subscription.
         */
        void close();

        /**
         * Update the subscription with the new request.
         * 
         * @param subscriptionRequest the request to update the subscription
         * @return true if the subscription was found and updated, false otherwise
         */
        boolean update(BarrageSubscriptionRequest subscriptionRequest);
    }
}
