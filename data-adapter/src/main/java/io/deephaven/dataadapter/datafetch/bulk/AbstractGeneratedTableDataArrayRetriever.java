//
// Copyright (c) 2016-2024 Deephaven Data Labs and Patent Pending
//
package io.deephaven.dataadapter.datafetch.bulk;

import io.deephaven.engine.rowset.RowSequence;
import io.deephaven.engine.table.ColumnSource;
import io.deephaven.dataadapter.ContextHolder;

/**
 * Superclass of generated {@link TableDataArrayRetriever TableDataRetrievers}.
 * <p>
 * Subclasses are generated by {@link TableDataRetrieverGenerator}.
 */
public abstract class AbstractGeneratedTableDataArrayRetriever extends AbstractTableDataArrayRetriever {

    protected AbstractGeneratedTableDataArrayRetriever(final ColumnSource<?>[] columnSources) {
        super(columnSources);
    }

    /**
     * Populates the data arrays with data for the given index keys ({@code OrderedRowKeys}). Data is retrieved in
     * {@link io.deephaven.chunk.Chunk chunks}. One chunk of data (of length {@code OrderedRowKeysSize}) is read and
     * copied into the {@code dataArrs} for each column before proceeding to the next column.
     *
     * @param usePrev Whether to use prev values ({@code true} while LTM is updating)
     * @param dataArrs The arrays to populate with data
     * @param arrIdx The starting array index to populate {@code dataArrs}
     * @param contextHolder The context holder for managing {@link io.deephaven.engine.table.ChunkSource.GetContext
     *        GetContexts}
     * @param rowSequence The index keys for which to retrieve data
     * @param rowSequenceSize The number of rows for which to retrieve data
     */
    @Override
    protected abstract void populateArrsForRowSequence(boolean usePrev, Object[] dataArrs, int arrIdx,
            ContextHolder contextHolder, RowSequence rowSequence, int rowSequenceSize);
}
