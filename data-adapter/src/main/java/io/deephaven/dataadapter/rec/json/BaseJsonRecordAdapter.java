//
// Copyright (c) 2016-2024 Deephaven Data Labs and Patent Pending
//
package io.deephaven.dataadapter.rec.json;

import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import io.deephaven.engine.table.Table;
import io.deephaven.dataadapter.datafetch.bulk.BaseMultiRowRecordAdapter;
import io.deephaven.dataadapter.rec.desc.RecordAdapterDescriptor;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * Superclass of generated JSON {@link io.deephaven.dataadapter.rec.MultiRowRecordAdapter MultiRowRecordAdapters}.
 * <p>
 * Subclasses are generated by {@link JsonRecordAdapterGenerator}.
 */
public abstract class BaseJsonRecordAdapter extends BaseMultiRowRecordAdapter<ObjectNode> {

    private final List<String> colNames;

    public BaseJsonRecordAdapter(Table sourceTable, RecordAdapterDescriptor<ObjectNode> descriptor,
            String... colNames) {
        super(sourceTable, descriptor);
        this.colNames = Collections.unmodifiableList(Arrays.asList(colNames));
    }

    /**
     * Get the column names supported by this BaseJsonRecordAdapter. These will be the field names in the created
     * ObjectNodes.
     *
     * @return An unmodifiable list containing the column names.
     */
    public final List<String> getColNames() {
        return colNames;
    }

    @Override
    public ObjectNode createEmptyRecord() {
        return JsonNodeFactory.instance.objectNode();
    }

    @Override
    public ObjectNode[] createEmptyRecordsArr(int nRecords) {
        return new ObjectNode[nRecords];
    }
}
