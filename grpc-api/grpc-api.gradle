plugins {
    id 'java-library'
}

configurations {
    // custom configuration, sourceset, test task to keep flight-core off the main/test classpath
    flightTestCompile.extendsFrom(testImplementation)
}

sourceSets {

    flightTest {
        java {
            srcDir 'src/flightTest/java'
        }
        annotationProcessorPath = sourceSets.test.annotationProcessorPath
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.flightTestCompile
        runtimeClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath + configurations.flightTestCompile + sourceSets.flightTest.output
    }
}

dependencies {
    implementation project(':engine-table')
    implementation project(':extensions-csv')
    implementation project(':extensions-parquet-table')
    implementation project(':Util')
    api project(':java-client-barrage-dagger')
    implementation project(':proto:proto-backplane-grpc-flight')
    implementation project(':open-api-lang-tools')
    implementation project(':log-factory')
    implementation project(':application-mode')
    implementation 'com.github.f4b6a3:uuid-creator:3.6.0'

    Classpaths.inheritFlatbuffer(project, 'implementation')

    Classpaths.inheritDagger(project)
    Classpaths.inheritDagger(project, /* test */ true)

    implementation project(':Plot')

    implementation project(':ClientSupport')

    if ('true' == project.findProperty('extensions.classgraph.enabled')) {
        runtimeOnly project(':extensions-classgraph')
    }
    if ('true' == project.findProperty('extensions.suanshu.enabled')) {
        runtimeOnly project(':extensions-suanshu')
    }

    testImplementation TestTools.projectDependency(project, 'engine-table'),
                TestTools.projectDependency(project, 'Util')

    runtimeOnly project(':Numerics'),
            project(':Integrations'),
            project(':extensions-kafka')
    Classpaths.inheritAssertJ(project)

    testRuntimeOnly project(':log-to-slf4j')
    Classpaths.inheritSlf4j(project, 'slf4j-simple', 'testRuntimeOnly')

    // it is essential that this is only added to the classpath for flightTestCompile
    Classpaths.inheritArrow(project, 'flight-core', 'flightTestCompile')
}

// testOutOfBand: non-parallel, not a engine test, not isolated
TestTools.addEngineTest(project, 'OutOfBand', false, false, false)

check.dependsOn(tasks.register('flightTest', Test) {
    classpath = sourceSets.flightTest.runtimeClasspath
    testClassesDirs = sourceSets.flightTest.output.classesDirs
    systemProperty "UpdateGraphProcessor.allowUnitTestMode", false
})

apply plugin: 'io.deephaven.java-open-nio'
