plugins {
    id 'java'
}

configurations {
    compile.extendsFrom dhDb
    testCompile.extendsFrom dhDbTest

    // custom configuration, sourceset, test task to keep flight-core off the main/test classpath
    flightTestCompile.extendsFrom(testCompile)
}

sourceSets {

    flightTest {
        java {
            srcDir 'src/flightTest/java'
        }
        annotationProcessorPath = sourceSets.test.annotationProcessorPath
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.flightTestCompile
        runtimeClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath + configurations.flightTestCompile + sourceSets.flightTest.output
    }
}

dependencies {
    compile project(':DB'),
            project(':Util'),
            project(':grpc-api-client'),
            project(':proto:proto-backplane-grpc-util'),
            project(':open-api-lang-tools'),
            project(':log-factory'),
            project(':application-mode'),
            "com.google.flatbuffers:flatbuffers-java:1.12.0"

    compile 'com.google.dagger:dagger:2.31.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.31.1'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.31.1'

    compile project(':Plot')

    compile project(':ClientSupport')

    if ('true' == project.findProperty('extensions.classgraph.enabled')) {
        runtimeOnly project(':classgraph-extension')
    }
    if ('true' == project.findProperty('extensions.suanshu.enabled')) {
        runtimeOnly project(':suanshu-extension')
    }

    testCompile TestTools.projectDependency(project, 'DB'),
                TestTools.projectDependency(project, 'Util')

    runtimeOnly project(':Numerics'), project(':Integrations'), project(':Kafka')

    testRuntimeOnly project(':log-to-slf4j')
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.30'

    // it is essential that this is only added to the classpath for flightTestCompile
    flightTestCompile 'org.apache.arrow:flight-grpc:4.0.0'
}

// testOutOfBand: non-parallel, not a db test, not isolated
TestTools.addDbTest(project, 'OutOfBand', false, false, false)

check.dependsOn(tasks.register('flightTest', Test) {
    classpath = sourceSets.flightTest.runtimeClasspath
    testClassesDirs = sourceSets.flightTest.output.classesDirs
    systemProperty "LiveTableMonitor.allowUnitTestMode", false
})
