name: Nightly Publish CI

on:
  schedule:
    # 1AM EST == 5AM UTC
    - cron:  '0 5 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  nightly-publish:
    runs-on: ubuntu-24.04
    if: ${{ github.repository_owner == 'deephaven' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 11
        id: setup-java-11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup JDK 17
        id: setup-java-17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=${{ steps.setup-java-11.outputs.path }}" >> $GITHUB_ENV

      - name: Setup gradle properties
        run: |
          .github/scripts/gradle-properties.sh >> gradle.properties
          cat gradle.properties

      - name: Publish to OSSRH snapshots repository
        # We are not worried here about using --no-parallel (as we are with release publishing), since publishing
        # snapshots does not even create staging repositories.
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.CI_AT_DEEPHAVEN_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.CI_AT_DEEPHAVEN_PASSWORD }}
          ORG_GRADLE_PROJECT_signingRequired: true

      - name: Slack Nightly Failure
        uses: slackapi/slack-github-action@v1.26.0
        id: slack-nightly-failure
        if: failure()
        with:
          payload: |
            {
              "slack_message": "Nightly publish failure @ ${{ github.head_ref }} ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NIGHTLY_FAILURE }}
