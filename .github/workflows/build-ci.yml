name: Build CI

on:
  pull_request:
    branches: [ workflow ]
  push:
    branches: [ 'main', 'build/**' ]
    tags: [ 'v*' ]

jobs:
  grpc-api:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # note: this uses Zulu and not AdoptOpenJDK or other. should make sure we build and test on the same one...
      - name: Setup JDK
        id: setup-java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.292'

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/deephaven/grpc-api
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
          label-custom: |
            org.opencontainers.image.title=deephaven/grpc-api
            org.opencontainers.image.description=Deephaven grpc-api

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

          # By default, the driver is "docker-container".
          # We want to use the "docker" driver, so that the tagged images from one step can be used
          # by subsequent steps.
          driver: docker

      - name: Login to ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

# Docker cache doesn't seem to be working. Not sure why.
# During the export cache step for Docker build, we are getting
# level=error msg="(*service).Write failed" error="rpc error: code = Canceled desc = context canceled" expected="sha256:e1cf0ed900810d12941c8478ee6c6f8d159db5bb6c3afeeb7863c798f29cc37a" ref="sha256:e1cf0ed900810d12941c8478ee6c6f8d159db5bb6c3afeeb7863c798f29cc37a" total=2214
# And during the start for next Docker build, we are getting
# level=warning msg="local cache import at /tmp/.buildx-cache not found due to err: could not read /tmp/.buildx-cache/index.json: open /tmp/.buildx-cache/index.json: no such file or directory"
#      - name: Cache Docker layers
#        uses: actions/cache@v2
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-grpc-api-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-grpc-api-
#            ${{ runner.os }}-buildx-

      - name: Setup gradle properties
        run: |
          cat .github/env/${{ runner.os }}/gradle.properties >> gradle.properties
          echo "org.gradle.java.installations.paths=${{ steps.setup-java.outputs.path }}" >> gradle.properties

      - name: Create Dockerfile and context
        uses: burrunan/gradle-cache-action@v1
        with:
          job-id: build-grpc-api
          arguments: --scan grpc-api-server-docker:dockerCreateDockerfile
          gradle-version: wrapper

      # TODO: switch to new GitHub cache backend when available
      # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache
      # https://github.com/docker/buildx/pull/535
      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          context: ./grpc-api/server/docker/build/docker/
          push: ${{ github.event_name != 'pull_request' }}

      # Workaround for https://github.com/docker/build-push-action/issues/252
#      - name: Move cache
#        run:
#          rm -rf /tmp/.buildx-cache
#          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  grpc-proxy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JDK
        id: setup-java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.292'

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/deephaven/grpc-proxy
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Setup gradle properties
        run: |
          cat .github/env/${{ runner.os }}/gradle.properties >> gradle.properties
          echo "org.gradle.java.installations.paths=${{ steps.setup-java.outputs.path }}" >> gradle.properties

      - name: Create Dockerfile and context
        uses: burrunan/gradle-cache-action@v1
        with:
          job-id: build-grpc-proxy
          arguments: --scan grpc-proxy:prepareDocker
          gradle-version: wrapper

      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          context: ./grpc-proxy/build/docker/
          push: ${{ github.event_name != 'pull_request' }}

  envoy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JDK
        id: setup-java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.292'

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/deephaven/envoy
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
          label-custom: |
            org.opencontainers.image.title=deephaven/envoy
            org.opencontainers.image.description=Deephaven Envoy

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Setup gradle properties
        run: |
          cat .github/env/${{ runner.os }}/gradle.properties >> gradle.properties
          echo "org.gradle.java.installations.paths=${{ steps.setup-java.outputs.path }}" >> gradle.properties

      - name: Create Dockerfile and context
        uses: burrunan/gradle-cache-action@v1
        with:
          job-id: build-envoy
          arguments: --scan envoy:prepareDocker
          gradle-version: wrapper

      - name: Build
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          context: ./envoy/build/docker/
          push: ${{ github.event_name != 'pull_request' }}

  web:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/deephaven/web
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
          label-custom: |
            org.opencontainers.image.title=deephaven/web
            org.opencontainers.image.description=Deephaven web
 
      # note: this uses Zulu and not AdoptOpenJDK or other. should make sure we build and test on the same one...
      - name: Setup JDK
        id: setup-java
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.292'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

          # By default, the driver is "docker-container".
          # We want to use the "docker" driver, so that the tagged images from one step can be used
          # by subsequent steps.
          driver: docker

      - name: Login to ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Setup gradle properties
        run: |
          cat .github/env/${{ runner.os }}/gradle.properties >> gradle.properties
          echo "org.gradle.java.installations.paths=${{ steps.setup-java.outputs.path }}" >> gradle.properties

      - name: Create Dockerfile and context
        uses: burrunan/gradle-cache-action@v1
        with:
          job-id: build-web
          arguments: --scan web-client-ide:prepareDocker
          gradle-version: wrapper

      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          context: ./web/client-ide/build/docker/
          push: ${{ github.event_name != 'pull_request' }}

  deephaven-jpy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/deephaven/jpy
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
          label-custom: |
            org.opencontainers.image.title=deephaven/jpy
            org.opencontainers.image.description=Deephaven jpy

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          context: ./py/jpy
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            DEEPHAVEN_VERSION=${{ steps.docker_meta.outputs.version }}