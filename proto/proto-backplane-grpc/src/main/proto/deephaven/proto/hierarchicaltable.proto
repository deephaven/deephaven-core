/*
 * Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
 */

syntax = "proto3";

package io.deephaven.proto.backplane.grpc;

option java_multiple_files = true;
option optimize_for = SPEED;
option go_package = "github.com/deephaven/deephaven-core/go/internal/proto/hierarchicaltable";

import "deephaven/proto/table.proto";
import "deephaven/proto/ticket.proto";

/*
 * This service provides tools to create and view hierarchical tables (rollups and trees).
 */
service HierarchicalTableService {
  /*
   * Performs a rollup operation on a table and exports a default hierarchical table view of the result.
   */
  rpc Rollup(RollupRequest) returns (RollupResponse);
  /*
   * Performs a tree operation on a table and exports a default hierarchical table view of the result.
   */
  rpc Tree(TreeRequest) returns (TreeResponse);
  /*
   * Exports the source table for a hierarchical table view.
   */
  rpc ExportSource(HierarchicalTableSourceExportRequest) returns (HierarchicalTableSourceExportResponse);
  /*
   * Derives a new hierarchical table view from an existing hierarchical table view.
   */
  rpc View(HierarchicalTableViewRequest) returns (HierarchicalTableViewResponse);
}

message RollupRequest {
  // Ticket to use to hold a default view of the results of the rollup operation
  Ticket result_view_id = 1;
  // Ticket for the source Table object to rollup
  Ticket source_id = 2;
  // The aggregations that should be applied at each level of the rollup
  repeated ComboAggregateRequest.Aggregate aggregations = 3;
  // Whether to include the leaf-level constituents in the result
  bool include_constituents = 4;
  // The names of the columns to rollup by
  repeated string group_by_columns = 5;
}

message RollupResponse {
  // Deliberately empty response, use /ObjectService/FetchObject to access the result_view_id ticket.
}

message TreeRequest {
  // Ticket to use to hold a default view of the results of the tree operation
  Ticket result_view_id = 1;
  // Ticket for the source Table object to tree
  Ticket source_id = 2;
  // The name of the column containing the unique identifier for each row in the source table
  string identifier_column = 3;
  // The name of the column containing the parent row's unique identifier for each row in the source table
  string parent_identifier_column = 4;
}

message TreeResponse {
  // Deliberately empty response, use /ObjectService/FetchObject to access the result_view_id ticket.
}

message HierarchicalTableSourceExportRequest {
  // Ticket to use to hold an export of the hierarchical table view's source table
  Ticket result_id = 1;
  // Ticket for the (existing) hierarchical table view
  Ticket view_id = 2;
}

message HierarchicalTableSourceExportResponse {
  // Deliberately empty response, use /ObjectService/FetchObject to access the result_id ticket.
}

enum RollupNodeType {
  UNDEFINED = 0;
  AGGREGATED = 1;
  CONSTITUENT = 2;
}

message HierarchicalTableViewDescriptor {
  // The column names to expand by
  // Implementation notes:
  //   - Rollups: The group-by columns
  //   - Trees: The single identifier column
  repeated string expand_by_columns = 1;
  // The name of a column that signifies the "width" (in defined columns) for a rollup key. Must be included along
  // with expanded columns in a rollup key table.
  optional string rollup_key_width_column = 2;
  // Whether this rollup's leaf nodes are first level aggregations or constituents
  optional RollupNodeType rollup_leaf_type = 3;
  // '='-delimited pairs from output (aggregation) column name to input (constituent) column name
  repeated string rollup_output_input_column_pairs = 4;

  // Schema as described in Arrow Message.fbs::Message.
  bytes schema_header = 5;
}

message HierarchicalTableViewRequest {
  // Ticket for the resulting hierarchical table view
  Ticket result_view_id = 1;
  // Ticket for the existing view to inherit the hierarchical table (TODO-RWC: and other fields?) from
  Ticket existing_view_id = 2;
  // Ticket that represents expanded or contracted keys from a hierarchical (rollup or tree) table.
  // If empty or not present, the result will have all nodes collapsed.
  Ticket key_table = 3;
  // Filters to apply to the hierarchical table nodes
  repeated Condition filters = 4;
  // Sorts to apply to the hierarchical table nodes
  repeated SortDescriptor sorts = 5;
}

message HierarchicalTableViewResponse {
  // Deliberately empty response, use /ObjectService/FetchObject to access the result_view_id ticket.
}
