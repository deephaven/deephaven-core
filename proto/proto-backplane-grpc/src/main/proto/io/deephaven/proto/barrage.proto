
syntax = "proto3";

package io.deephaven.proto.backplane.grpc;

option java_multiple_files = true;
option optimize_for = SPEED;

import "io/deephaven/proto/session.proto";

/*
 * A barrage service is an endpoint for retrieving or storing ticking Arrow data.
 * Implementations should also implement FlightService.
 */
service BarrageService {

  /*
   * Create a table subscription. You can send a new request to update the subscription.
   */
  rpc DoSubscribe(stream SubscriptionRequest) returns (stream BarrageData) {}

  /*
   * Create a table subscription. This variant is server-side streaming only. This is to better serve javascript clients
   * which have poor bidirectional streaming support.
   */
  rpc DoSubscribeNoClientStream(SubscriptionRequest) returns (stream BarrageData) {}


  /*
   * Update a subscription out-of-band. The provided sequence is used as a high water mark; the server ignores
   * requests that do not increase the sequence. It assumes it was a request received out of order.
   */
  rpc DoUpdateSubscription(SubscriptionRequest) returns (OutOfBandSubscriptionResponse) {}
}

/*
 * A batch of Arrow data as part of a stream of batches.
 */
message BarrageData {

  /*
   * Header for message data as described in Message.fbs::Message.
   */
  bytes data_header = 2;

  /*
   * Application-defined metadata.
   */
  bytes app_metadata = 3;

  /*
   * The actual batch of Arrow data. Preferably handled with minimal-copies
   * coming last in the definition to help with sidecar patterns (it is
   * expected that some implementations will fetch this field off the wire
   * with specialized code to avoid extra memory copies).
   */
  bytes data_body = 1000;
}

/*
 * Subscribe to a table.
 */
message SubscriptionRequest {
  /*
   * The ticket identifying this data set.
   */
  Ticket ticket = 1;

  /*
   * A bitset of columns to subscribe to. An empty bitset unsubscribes from everything.
   */
  bytes columns = 2;

  /*
   * The viewport in position-space of rows to subscribe to. An empty viewport empties the viewport. You will only
   * receive index updates.
   */
  bytes viewport = 3;

  // Use field ID >= 20 for any custom subscription parameters.

  /*
   * Explicitly set the update interval for this subscription. Note that subscriptions with different update intervals
   * cannot share intermediary state with other subscriptions and greatly increases the footprint of this subscription.
   * The default is 1000ms.
   */
  sint64 update_interval_ms = 20 [jstype=JS_STRING];

  /*
   * Export this subscription so that it can be referenced for out of band updates.
   */
  Ticket export_id = 21;

  /*
   * Subscription request processing may incur some for of coalescing. Additionally, out of band updates may
   * be re-ordered depending on the way they are delivered to the server. This sequence is used as a high
   * watermark. If multiple subscription requests are received the server assumes the highest sequenced
   * request is the one that the client really wants and that the old ones are officially stale (and maybe
   * outside of the user's view).
   */
  sint64 sequence = 22 [jstype=JS_STRING];

  /*
   * We typically reserve a value in the range of primitives to use as a null value. This allows faster processing
   * most of the time as we don't have to look into an additional parallel data structure to compare against null.
   * See engine documentation on "Deephaven Nulls" for more information.
   */
  bool use_deephaven_nulls = 23;
}

/*
 * A response to an out of band subscription update.
 */
message OutOfBandSubscriptionResponse {
  /*
   * Returns true if the subscription was found.
   */
  bool subscription_found = 1;
}
