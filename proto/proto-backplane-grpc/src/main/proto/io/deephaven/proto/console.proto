/*
 * Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
 */

syntax = "proto3";

package io.deephaven.proto.backplane.script.grpc;

option java_multiple_files = true;
option optimize_for = SPEED;

import "io/deephaven/proto/table.proto";
import "arrow/flight/protocol/flight.proto";

/*
 * Console interaction service
*/
service ConsoleService {
    rpc GetConsoleTypes(GetConsoleTypesRequest) returns (GetConsoleTypesResponse) {}
    rpc StartConsole(StartConsoleRequest) returns (StartConsoleResponse) {}

    rpc SubscribeToLogs(LogSubscriptionRequest) returns (stream LogSubscriptionData) {}

    rpc ExecuteCommand(ExecuteCommandRequest) returns (ExecuteCommandResponse) {}
    rpc CancelCommand(CancelCommandRequest) returns (CancelCommandResponse) {}

    rpc BindTableToVariable(BindTableToVariableRequest) returns (BindTableToVariableResponse) {}

    rpc OpenDocument(OpenDocumentRequest) returns (OpenDocumentResponse) {}
    rpc ChangeDocument(ChangeDocumentRequest) returns (ChangeDocumentResponse) {}
    rpc GetCompletionItems(GetCompletionItemsRequest) returns (GetCompletionItemsResponse) {}
    rpc CloseDocument(CloseDocumentRequest) returns (CloseDocumentResponse) {}

    rpc FetchTable(FetchTableRequest) returns (io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse) {}
    rpc FetchPandasTable(FetchPandasTableRequest) returns (io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse) {}
    rpc FetchFigure(FetchFigureRequest) returns (FetchFigureResponse) {}
    rpc FetchTableMap(FetchTableMapRequest) returns (FetchTableMapResponse) {}
}


message GetConsoleTypesRequest {
    // left empty for future compatibility
}
message GetConsoleTypesResponse {
    repeated string console_types = 1;
}

message StartConsoleRequest {
    arrow.flight.protocol.Ticket result_id = 1;
    string session_type = 2;
}
message StartConsoleResponse {
    arrow.flight.protocol.Ticket result_id = 1;

    // TOOD i think these are unused without an init script thingie
    repeated string table_names = 2;
    repeated string widget_names = 3;
}

message LogSubscriptionRequest {
    // presently you get _all_ logs, not just your console
//    arrow.flight.protocol.Ticket console_id = 1;
    int64 last_seen_log_timestamp = 1;
    repeated string levels = 2;
}
message LogSubscriptionData {
//    arrow.flight.protocol.Ticket console_id = 1;
    int64 micros = 1;
    string log_level = 2;
    string message = 3;
}
message ExecuteCommandRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    reserved 2;
    string code = 3;
}
message ExecuteCommandResponse {
    string error_message = 1;
    repeated VariableDefinition created = 2;
    repeated VariableDefinition updated = 3;
    repeated VariableDefinition removed = 4;
}
message VariableDefinition {
    string name = 1;
    string type = 2;
}
message BindTableToVariableRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    reserved 2;
    string variable_name = 3;
    arrow.flight.protocol.Ticket table_id = 4;
}
message BindTableToVariableResponse {
}

message CancelCommandRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    arrow.flight.protocol.Ticket command_id = 2;
}
message CancelCommandResponse {

}

message OpenDocumentRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    TextDocumentItem text_document = 2;
}
message TextDocumentItem {
    string uri = 1;
    string language_id = 2;
    int32 version = 3;
    string text = 4;
}
message OpenDocumentResponse {

}

message CloseDocumentRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    VersionedTextDocumentIdentifier text_document = 2;//TODO actually just uri?
}
message CloseDocumentResponse {

}

message ChangeDocumentRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    VersionedTextDocumentIdentifier text_document = 2;//TODO actually just uri?
    repeated TextDocumentContentChangeEvent content_changes = 3;

    message TextDocumentContentChangeEvent {
        DocumentRange range = 1;
        int32 range_length = 2;
        string text = 3;
    }
}
message DocumentRange {
    Position start = 1;
    Position end = 2;
}
message VersionedTextDocumentIdentifier {
    string uri = 1;
    int32 version = 2;
}
message Position {
    int32 line = 1;
    int32 character = 2;
}
message ChangeDocumentResponse {

}
message GetCompletionItemsRequest {
    arrow.flight.protocol.Ticket console_id = 1;

    CompletionContext context = 2;
    VersionedTextDocumentIdentifier text_document = 3;
    Position position = 4;
}
message CompletionContext {
    int32 trigger_kind = 1;
    string trigger_character = 2;
}
message GetCompletionItemsResponse {
    repeated CompletionItem items = 1;
}
message CompletionItem {
    int32 start = 1;
    int32 length = 2;
    string label = 3;
    int32 kind = 4;
    string detail = 5;
    string documentation = 6;
    bool deprecated = 7;
    bool preselect = 8;
    TextEdit text_edit = 9;
    string sort_text = 10;
    string filter_text = 11;
    int32 insert_text_format = 12;
    repeated TextEdit additional_text_edits = 13;
    repeated string commit_characters = 14;
}
message TextEdit {
    DocumentRange range = 1;
    string text = 2;
}

message FetchTableRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    arrow.flight.protocol.Ticket table_id = 2;

    string table_name = 3;
}

message FetchPandasTableRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    arrow.flight.protocol.Ticket table_id = 2;
}

message FetchFigureRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    reserved 2;
}
message FetchFigureResponse {

}

message FetchTableMapRequest {
    arrow.flight.protocol.Ticket console_id = 1;
    reserved 2;
}
message FetchTableMapResponse {

}
