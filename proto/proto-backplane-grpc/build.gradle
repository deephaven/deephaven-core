plugins {
  id 'com.bmuschko.docker-remote-api'
  id 'java-library'
  id 'io.deephaven.project.register'
}

evaluationDependsOn Docker.registryProject('protoc-base')
evaluationDependsOn Docker.registryProject('go')

description = 'The Deephaven proto-backplane-grpc'

configurations {
  download {
    transitive = false
  }

  js {}
  python {}
  go {}
  protoDocs {}
}

dependencies {
  // This should be implementation, if listed at all, at least once we have own own version management
  api libs.protobuf.java

  api platform(libs.grpc.bom)
  api libs.grpc.protobuf
  api libs.grpc.api
  api libs.grpc.stub

  runtimeOnly libs.boringssl

  // This is excessive, and brings in every grpc jar, making it compile-only limits what it pulls in to
  // downstream classpaths
  compileOnly libs.arrow.flight.core

  compileOnly libs.javax.inject
  compileOnly libs.javax.annotation.api

  // technically we should have a runtime dependency on barrage-core, but instead we are regenerating
  // the same output that it contains, and we have declared the correct dependencies as necessary
  //  compile 'io.deephaven.barrage:barrage-core:0.5.0'
  download libs.deephaven.barrage.core
  download libs.arrow.flight.core

  testImplementation libs.junit4
}

def protoOutputDir = layout.buildDirectory.dir('protoc-output');
TaskProvider<Task> generateProtobuf = Docker.registerDockerTask(project, 'generateProtobuf') {
  copyIn {
    from(project.projectDir) {
      exclude 'build'
      exclude 'build.gradle'
    }
    configurations.download.each {
      from(zipTree(it)) {
        include('BrowserFlight.proto').into('dependencies')
        include('Flight.proto').into('dependencies')
      }
    }
  }

  // protoc-base is only provided via linux/amd64
  parentContainers = [ Docker.registryTask(project, 'protoc-base'), Docker.registryTask(project, 'go') ]
  platform = 'linux/amd64'

  containerOutPath = '/generated'
  imageName = Docker.localImageName('proto-backplane-grpc')
  copyOut {
    into(protoOutputDir)
  }
}

def syncProtocJava = tasks.register('syncProtocJava', Sync) {
  dependsOn(generateProtobuf)
  from(protoOutputDir.get().dir('java'))
  into layout.buildDirectory.dir('generated/sources/protoc/java/main')
}

// Provide js, go, python output as distinct artifacts - the java output will be consumed in this project by
// declaring it as a new sourceset, see below. This could definitely be more precisely stated, but given that
// all are generated in the same docker image creation step, we don't need to get too clever here.
artifacts {
  js(protoOutputDir.get().dir('js')) {
    builtBy generateProtobuf
  }
  python(protoOutputDir.get().dir('python')) {
    builtBy generateProtobuf
  }
  go(protoOutputDir.get().dir('go')) {
    builtBy generateProtobuf
  }
  protoDocs(protoOutputDir.get().dir('proto-doc')) {
    builtBy generateProtobuf
  }
}

sourceSets {
  main {
    java {
        srcDir(syncProtocJava)
    }
    resources {
      srcDir 'src/main/proto'
    }
  }
}

spotless {
  java {
    targetExclude(
            'build/generated/**'
    )
  }
}
