plugins {
  id 'com.bmuschko.docker-remote-api'
}

evaluationDependsOn Docker.registryProject('protoc-base')

description = 'The Deephaven proto-backplane-grpc'

configurations.create('download')
configurations.download.transitive=false

dependencies {
  // technically we should have a runtime dependency on barrage-core, but instead we are regenerating
  // the same output that it contains, and we have declared the correct dependencies as necessary
  //  compile 'io.deephaven.barrage:barrage-core:0.2.0'
  download 'io.deephaven.barrage:barrage-core:0.2.0'
  Classpaths.inheritArrow(project, 'flight-core', 'download')
  Classpaths.inheritArrow(project, 'flight-core', 'compileOnly')

  compileOnly 'javax.inject:javax.inject:1'
}

TaskProvider<Task> generateProtobuf = Docker.registerDockerTask(project, 'generateProtobuf') {
  copyIn {
    from(project.projectDir) {
      exclude 'build'
      exclude 'build.gradle'
    }
    configurations.download.each {
      from(zipTree(it)) {
        include('BrowserFlight.proto').into('dependencies')
        include('Flight.proto').into('dependencies')
      }
    }
  }
  parentContainers = [ Docker.registryTask(project, 'protoc-base') ]
  containerOutPath = '/generated'
  imageName = 'deephaven/proto-backplane-grpc:local-build'
  copyOut {
    into('build/generated/source/proto/main')
  }
}


compileJava.dependsOn generateProtobuf

sourceSets {
  main {
    java {
      srcDir 'build/generated/source/proto/main/grpc'
      srcDir 'build/generated/source/proto/main/java'
    }
  }
}

spotless {
  java {
    targetExclude(
            'build/generated/**'
    )
  }
}

apply plugin: 'io.deephaven.java-publishing-conventions'
