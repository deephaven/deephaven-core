/* ChunkerTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ChunkerTokenManager.java */
package io.deephaven.lang.generated;
import static io.deephaven.lang.shared.lsp.DiagnosticCode.*;
import static java.util.Collections.singletonList;
import io.deephaven.lang.api.ChunkerInvokable;
import io.deephaven.lang.api.IsScope;
import io.deephaven.lang.api.ParseState;
import io.deephaven.lang.api.ParseCancelled;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.IdentityHashMap;
import java.io.IOException;

/** Token Manager. */
public class ChunkerTokenManager implements ChunkerConstants {
    Stack stateStack = new Stack();
    boolean first;

  void backup(int n) { input_stream.backup(n); }

  void putBack(Token token, StringBuilder image, int amt) {
      input_stream.backup(amt);
      assert image.length() - amt >= 0;
      image.setLength(image.length()-amt);
      token.image = image.toString();
      token.endColumn -= amt;
  }

  public void CommonTokenAction(Token t) {
       // hm... perhaps we should also -- the specialToken length from startIndex here?
       // we handle it manually already, but will need to do more testing on comments
       // (i.e. our only SpecialTokens) later...
       t.startIndex =  getCurrentTokenAbsolutePosition();
       t.endIndex = t.startIndex + t.image.length();
       t.tokenBegin = input_stream.tokenBegin;
  }

  public int getCurrentTokenAbsolutePosition() {
      final SimpleCharStream in = input_stream;
      return jjmatchedKind == EOF && in.getTotalCharsRead() + 1 == in.getMaxNextCharInd()
          ? in.getMaxNextCharInd()
          : in.getAbsoluteTokenBegin();
  }

  public SimpleCharStream stream() {
      return input_stream;
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 28;
            return 27;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 160;
         if ((active0 & 0x100000L) != 0L)
            return 104;
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 46;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 74;
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 48;
            return 141;
         }
         if ((active0 & 0x200000L) != 0L)
            return 114;
         if ((active0 & 0x8000000000L) != 0L)
            return 40;
         if ((active0 & 0x400000000000L) != 0L)
            return 88;
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 28;
            return 31;
         }
         if ((active0 & 0x8800000L) != 0L)
         {
            jjmatchedKind = 28;
            return 162;
         }
         if ((active0 & 0x100000000000L) != 0L)
            return 65;
         return -1;
      case 1:
         if ((active0 & 0x10000L) != 0L)
            return 142;
         if ((active0 & 0xb800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 1;
            }
            return 162;
         }
         return -1;
      case 2:
         if ((active0 & 0x800000L) != 0L)
            return 162;
         if ((active0 & 0xb000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
            return 162;
         }
         return -1;
      case 3:
         if ((active0 & 0xb000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
            return 162;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000000L) != 0L)
            return 162;
         if ((active0 & 0x3000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
            return 162;
         }
         return -1;
      case 5:
         if ((active0 & 0x3000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
            return 162;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000000L) != 0L)
            return 162;
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 6;
            return 162;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
            return 162;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 8;
            return 162;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 20, 104);
      case 38:
         return jjStartNfaWithStates_0(0, 46, 88);
      case 39:
         return jjStartNfaWithStates_0(0, 21, 114);
      case 41:
         return jjStopAtPos(0, 54);
      case 44:
         return jjStopAtPos(0, 52);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 58:
         return jjStopAtPos(0, 37);
      case 59:
         return jjStopAtPos(0, 53);
      case 60:
         return jjStartNfaWithStates_0(0, 43, 160);
      case 62:
         return jjStartNfaWithStates_0(0, 44, 65);
      case 63:
         return jjStartNfaWithStates_0(0, 45, 74);
      case 64:
         return jjStartNfaWithStates_0(0, 39, 40);
      case 91:
         return jjStopAtPos(0, 40);
      case 92:
         return jjMoveStringLiteralDfa1_0(0xeL);
      case 93:
         return jjStopAtPos(0, 41);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 123:
         return jjStopAtPos(0, 36);
      case 125:
         return jjStopAtPos(0, 38);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      case 13:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 42:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 142);
         break;
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(2, 3);
         break;
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 119:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x9000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 162;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 160:
                  if ((0x3000000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 61)
                     { jjCheckNAdd(80); }
                  else if (curChar == 60)
                     { jjCheckNAdd(63); }
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  else if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  else if (curChar == 40)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(146); }
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 46:
                  if (curChar == 45)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(64); }
                  }
                  else if (curChar == 48)
                     { jjCheckNAdd(43); }
                  break;
               case 162:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  else if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  else if (curChar == 40)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(146); }
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  else if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  else if (curChar == 40)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(146); }
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 74:
                  if (curChar == 46)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  break;
               case 40:
               case 63:
                  if (curChar != 61)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(64); }
                  break;
               case 65:
                  if ((0x6000000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 62)
                     { jjCheckNAdd(80); }
                  if (curChar == 62)
                     { jjCheckNAdd(63); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(9, 12); }
                  }
                  else if ((0xac6000000000L & l) != 0L)
                     { jjCheckNAdd(63); }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAddStates(13, 19); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(0, 2); }
                  }
                  else if (curChar == 60)
                     { jjAddStates(20, 21); }
                  else if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAddStates(22, 24); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddStates(25, 30); }
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 114;
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 104;
                  else if (curChar == 46)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjstateSet[jjnewStateCnt++] = 95;
                  }
                  else if (curChar == 62)
                     { jjAddStates(31, 32); }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 40)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 14)
                        kind = 14;
                     { jjCheckNAddStates(33, 35); }
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if ((0x802200000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 42)
                     { jjAddStates(36, 37); }
                  else if (curChar == 48)
                     { jjCheckNAddTwoStates(43, 117); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 83;
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 75;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 47)
                     { jjAddStates(38, 39); }
                  else if ((0x8000040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  else if (curChar == 45)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjstateSet[jjnewStateCnt++] = 87;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjstateSet[jjnewStateCnt++] = 85;
                  }
                  if (curChar == 42)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjstateSet[jjnewStateCnt++] = 69;
                  }
                  break;
               case 88:
                  if (curChar == 38)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(64); }
                  }
                  break;
               case 141:
                  if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(64); }
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 142;
                  else if (curChar == 47)
                  {
                     if (kind > 14)
                        kind = 14;
                     { jjCheckNAddStates(33, 35); }
                  }
                  break;
               case 0:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(0, 2); }
                  break;
               case 1:
                  if (curChar != 10)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(0, 2); }
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAddStates(33, 35); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 6:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar != 46)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(11); }
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 44:
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(45); }
                  break;
               case 47:
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(9, 12); }
                  break;
               case 50:
                  if (curChar != 46)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 51:
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(43, 45); }
                  break;
               case 55:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(57); }
                  break;
               case 59:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(61); }
                  break;
               case 62:
                  if ((0xac6000000000L & l) != 0L)
                     { jjCheckNAdd(63); }
                  break;
               case 64:
                  if ((0xdfffffffffffffffL & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 66:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 40 && kind > 35)
                     kind = 35;
                  break;
               case 68:
                  if (curChar != 42)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if (curChar == 42 && kind > 47)
                     kind = 47;
                  break;
               case 70:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 71:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x802200000000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 73:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 75:
                  if (curChar != 46)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if (curChar == 60 && kind > 48)
                     kind = 48;
                  break;
               case 77:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 78:
                  if (curChar == 62)
                     { jjAddStates(31, 32); }
                  break;
               case 79:
                  if ((0x6000000000000000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 80:
                  if (curChar == 62 && kind > 48)
                     kind = 48;
                  break;
               case 81:
                  if (curChar == 62)
                     { jjCheckNAdd(80); }
                  break;
               case 82:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3000000000000000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 84:
                  if (curChar != 43)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if (curChar == 43 && kind > 48)
                     kind = 48;
                  break;
               case 86:
                  if (curChar != 45)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if (curChar == 45 && kind > 48)
                     kind = 48;
                  break;
               case 89:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 92:
                  if ((0x8000040000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if (curChar == 46 && kind > 49)
                     kind = 49;
                  break;
               case 94:
                  if (curChar != 46)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if (curChar == 38 && kind > 49)
                     kind = 49;
                  break;
               case 96:
                  if (curChar != 34)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddStates(46, 49); }
                  break;
               case 98:
               case 101:
                  if (curChar == 34)
                     { jjCheckNAdd(99); }
                  break;
               case 99:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddStates(46, 49); }
                  break;
               case 100:
                  if (curChar == 34)
                     { jjAddStates(50, 51); }
                  break;
               case 102:
                  if (curChar == 34 && kind > 50)
                     kind = 50;
                  break;
               case 103:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 105:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar != 39)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(52, 55); }
                  break;
               case 108:
               case 111:
                  if (curChar == 39)
                     { jjCheckNAdd(109); }
                  break;
               case 109:
                  if ((0xffffff7fffffffffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(52, 55); }
                  break;
               case 110:
                  if (curChar == 39)
                     { jjAddStates(56, 57); }
                  break;
               case 112:
                  if (curChar == 39 && kind > 51)
                     kind = 51;
                  break;
               case 113:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 115:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 48)
                     { jjCheckNAddTwoStates(43, 117); }
                  break;
               case 118:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 119:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(13, 19); }
                  break;
               case 120:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(120); }
                  break;
               case 121:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  break;
               case 122:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(61, 63); }
                  break;
               case 124:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 125:
                  if (curChar == 10 && kind > 48)
                     kind = 48;
                  break;
               case 126:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x2400L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 140:
                  if (curChar == 47)
                     { jjAddStates(38, 39); }
                  break;
               case 142:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 143:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 144:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if (curChar != 36)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(25, 30); }
                  break;
               case 146:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(146); }
                  break;
               case 147:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  break;
               case 148:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 149:
                  if (curChar == 10)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 150:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 152:
                  if (curChar != 61)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAddStates(22, 24); }
                  break;
               case 153:
                  if (curChar == 61 && kind > 33)
                     kind = 33;
                  break;
               case 155:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 42)
                     { jjAddStates(36, 37); }
                  break;
               case 157:
                  if (curChar == 42)
                     { jjCheckNAdd(63); }
                  break;
               case 158:
                  if (curChar == 58 && kind > 48)
                     kind = 48;
                  break;
               case 159:
                  if (curChar == 60)
                     { jjAddStates(20, 21); }
                  break;
               case 161:
                  if (curChar == 61)
                     { jjCheckNAdd(80); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(146); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 162:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(146); }
                  }
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAdd(146); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 40:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddStates(25, 30); }
                  }
                  else if ((0x1000000040000001L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if ((0x4000000040000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjstateSet[jjnewStateCnt++] = 91;
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 4:
                  if (kind > 14)
                     kind = 14;
                  { jjAddStates(33, 35); }
                  break;
               case 8:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 13:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115 && kind > 26)
                     kind = 26;
                  break;
               case 16:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101 && kind > 26)
                     kind = 26;
                  break;
               case 21:
               case 33:
                  if (curChar == 99)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 109 && kind > 26)
                     kind = 26;
                  break;
               case 30:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(45); }
                  break;
               case 48:
                  if (curChar != 95)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjAddStates(9, 12); }
                  break;
               case 49:
                  if ((0x100000001000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 52:
                  if (curChar != 95)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjAddStates(43, 45); }
                  break;
               case 53:
                  if ((0x5000000050L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(64, 65); }
                  break;
               case 57:
                  if (curChar != 95)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               case 61:
                  if (curChar != 95)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 62:
                  if ((0x1000000040000001L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 64:
                  if ((0xbfffffffffffffffL & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 72:
                  if ((0x4000000040000000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 90:
                  if (curChar != 124)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if (curChar == 124 && kind > 48)
                     kind = 48;
                  break;
               case 95:
                  if (curChar == 64 && kind > 49)
                     kind = 49;
                  break;
               case 97:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 99:
                  if (kind > 50)
                     kind = 50;
                  { jjAddStates(46, 49); }
                  break;
               case 107:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 109:
                  if (kind > 51)
                     kind = 51;
                  { jjAddStates(52, 55); }
                  break;
               case 117:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 123:
                  if (curChar == 115)
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 128:
                  if (curChar == 97)
                     { jjCheckNAdd(123); }
                  break;
               case 129:
                  if (curChar == 105)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 130:
                  if (curChar == 110)
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 131:
                  if (curChar == 102)
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 132:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 143:
                  if (kind > 15)
                     kind = 15;
                  break;
               case 145:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(25, 30); }
                  break;
               case 146:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(146); }
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 4); }
                  break;
               case 153:
               case 154:
                  if (curChar == 126 && kind > 33)
                     kind = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjAddStates(33, 35); }
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 99:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjAddStates(46, 49); }
                  break;
               case 109:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjAddStates(52, 55); }
                  break;
               case 143:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 15)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 162 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x80000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffbffffffffffL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if (kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(5, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAddStates(74, 76); }
                  }
                  else if ((0x8000002400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(7, 9); }
                  }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(11, 8); }
                  break;
               case 0:
                  if (curChar != 39)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 3:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 4:
                  if ((0xffffff7fffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 6:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 7:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 8:
                  if (curChar != 10)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 9:
                  if (curChar == 13)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(11, 8); }
                  break;
               case 11:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(74, 76); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(74, 76); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(74, 76); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(5, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     { jjCheckNAddStates(74, 76); }
                  }
                  else if ((0x400002400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(7, 9); }
                  }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(11, 8); }
                  break;
               case 0:
                  if (curChar != 34)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 3:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 4:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 6:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 7:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 8:
                  if (curChar != 10)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 9:
                  if (curChar == 13)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(11, 8); }
                  break;
               case 11:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(74, 76); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(74, 76); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(74, 76); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x40000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffbffffffffffL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if (kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\42", "\47", null, "\156\145\167", 
"\145\170\164\145\156\144\163", "\151\155\160\154\145\155\145\156\164\163", null, "\163\165\160\145\162", null, 
null, null, null, null, null, null, null, "\173", "\72", "\175", "\100", "\133", 
"\135", "\55\76", "\74", "\76", "\77", "\46", null, null, null, null, null, "\54", 
"\73", "\51", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   147, 148, 150, 151, 67, 148, 150, 151, 67, 48, 49, 50, 58, 120, 121, 0, 
   2, 122, 128, 129, 160, 161, 153, 155, 64, 146, 147, 148, 150, 151, 67, 79, 
   81, 4, 5, 7, 157, 158, 141, 144, 51, 53, 54, 52, 53, 54, 97, 98, 
   99, 100, 101, 103, 107, 108, 109, 110, 111, 113, 121, 0, 2, 122, 128, 129, 
   55, 56, 59, 60, 124, 126, 127, 130, 123, 139, 1, 2, 4, 6, 7, 9, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 15 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     input_stream.backup(1);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          // We gobble up an (optional) "extra char" to check for and avoid == and =~.
          // Here, we will put that extra char back, since we don't want it in our token
          if (image.charAt(image.length()-1) != '=') {
            putBack(matchedToken, image, 1);
          }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ChunkerTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ChunkerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 162; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 5 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "STR_APOS",
   "STR_QUOTE",
   "IN_JAVA_DOC_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, 3, 4, -1, 0, 0, 2, 1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffe9ff03d81L, 
};
static final long[] jjtoSkip = {
   0xdc00eL, 
};
static final long[] jjtoSpecial = {
   0xdc000L, 
};
static final long[] jjtoMore = {
   0x20000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[162];
    private final int[] jjstateSet = new int[2 * 162];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
