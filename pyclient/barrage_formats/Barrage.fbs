// Copyright 2020 Deephaven Data Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "Schema.fbs";

namespace io.deephaven.barrage.flatbuf;

/// ----------------------------------------------------------------------
/// Data structures for describing a barrage row batch (an update to a ticking table).

/// Metadata about a field at some level of a nested type tree (but not
/// its children).
///
/// This is similar to arrow's FieldNode, with additional fields to support modified rows.
table BarrageFieldNode {
  /// The number of value slots in the Arrow array at this level of a nested
  /// tree.
  length: long;

  /// The number of observed nulls. Fields with null_count == 0 may choose not
  /// to write their physical validity bitmap out as a materialized buffer,
  /// instead setting the length of the bitmap buffer to 0.
  null_count: long;

  /// If this field node is for an outer-most modified column then these fields may be included:

  /// This is an encoded Index of rows for this column that were modified:
  modifiedRows: [byte];

  /// If this is a viewport, this is an encoded Index of rows for this column that were included in the buffer.
  includedRows: [byte];
}

/// A data header describing the shared memory layout of a "record" or "row"
/// batch for a ticking barrage table.
table BarrageRecordBatch {

  /// This batch is generated from an upstream table that ticks independently of the stream. If
  /// multiple events are coalesced into one update, the server may communicate that here for
  /// informational purposes.
  firstSeq: long;
  lastSeq: long;

  /// indicates if this message was sent due to upstream ticks or due to a subscription change
  isSnapshot: bool;

  /// If this is a snapshot and the subscription is a viewport, then the effectively subscribed viewport
  /// will be included in the payload. It is an encoded Index.
  effectiveViewport: [byte];

  /// If this is a snapshot, then the effectively subscribed column set will be included in the payload.
  effectiveColumnSet: [byte];

  /// This is an encoded Index of rows that were added in this update.
  addedRows: [byte];

  /// This is an encoded Index of rows that were removed in this update.
  removedRows: [byte];

  /// This is an encoded IndexShiftData describing how the keyspace of unmodified rows changed.
  shiftData: [byte];

  /// This is an encoded bitset of added columns that are included in this update; it will match the most
  /// recently received effectiveColumnSet.
  addedColumnSet: [byte];

  /// This is an encoded bitset of modified columns that are included in this update. If this is a
  /// snapshot, then this bitset will be empty.
  modifiedColumnSet: [byte];

  /// This is an encoded Index of rows that were included with this update
  /// (the server may include rows not in addedRows if this is a viewport subscription to refresh
  ///  unmodified rows that were scoped into view)
  addedRowsIncluded: [byte];

  /// The list of nodes are first any added columns (if addedRows is nonempty), followed by any modified
  /// columns as indicated by modifiedColumnSet.
  nodes: [BarrageFieldNode];

  /// Buffers correspond to the pre-ordered flattened buffer tree
  ///
  /// The number of buffers appended to this list depends on the schema and which nodes were included in the update.
  /// Refer to Arrow Flight's specification for buffer schema.
  buffers: [io.deephaven.barrage.flatbuf.Buffer];

//  /// Optional compression of the message body
//  compression: io.deephaven.barrage.flatbuf.BodyCompression;
}

/// App Metadata for a Flight DoPut
table BarragePutMetadata {
  /// the ticket to reference an out-of-band DoPut (for JS clients that cannot support client-streams)
  rpcTicket: [byte];

  /// the sequence of this piece of the DoPut; to support out-of-order RPCs for an out-of-band DoPut
  sequence: long;
}
