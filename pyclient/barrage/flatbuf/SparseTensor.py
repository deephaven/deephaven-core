# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SparseTensor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SparseTensor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSparseTensor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SparseTensor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SparseTensor
    def TypeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # The type of data contained in a value cell.
    # Currently only fixed-width value types are supported,
    # no strings or nested types.
    # SparseTensor
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # The dimensions of the tensor, optionally named.
    # SparseTensor
    def Shape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from barrage.flatbuf.TensorDim import TensorDim
            obj = TensorDim()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SparseTensor
    def ShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SparseTensor
    def ShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # The number of non-zero values in a sparse tensor.
    # SparseTensor
    def NonZeroLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SparseTensor
    def SparseIndexType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Sparse tensor index
    # SparseTensor
    def SparseIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # The location and size of the tensor's data
    # SparseTensor
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from barrage.flatbuf.Buffer import Buffer
            obj = Buffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(7)
def SparseTensorStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTypeType(builder, typeType): builder.PrependUint8Slot(0, typeType, 0)
def SparseTensorAddTypeType(builder, typeType):
    """This method is deprecated. Please switch to AddTypeType."""
    return AddTypeType(builder, typeType)
def AddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def SparseTensorAddType(builder, type):
    """This method is deprecated. Please switch to AddType."""
    return AddType(builder, type)
def AddShape(builder, shape): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)
def SparseTensorAddShape(builder, shape):
    """This method is deprecated. Please switch to AddShape."""
    return AddShape(builder, shape)
def StartShapeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SparseTensorStartShapeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartShapeVector(builder, numElems)
def AddNonZeroLength(builder, nonZeroLength): builder.PrependInt64Slot(3, nonZeroLength, 0)
def SparseTensorAddNonZeroLength(builder, nonZeroLength):
    """This method is deprecated. Please switch to AddNonZeroLength."""
    return AddNonZeroLength(builder, nonZeroLength)
def AddSparseIndexType(builder, sparseIndexType): builder.PrependUint8Slot(4, sparseIndexType, 0)
def SparseTensorAddSparseIndexType(builder, sparseIndexType):
    """This method is deprecated. Please switch to AddSparseIndexType."""
    return AddSparseIndexType(builder, sparseIndexType)
def AddSparseIndex(builder, sparseIndex): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sparseIndex), 0)
def SparseTensorAddSparseIndex(builder, sparseIndex):
    """This method is deprecated. Please switch to AddSparseIndex."""
    return AddSparseIndex(builder, sparseIndex)
def AddData(builder, data): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def SparseTensorAddData(builder, data):
    """This method is deprecated. Please switch to AddData."""
    return AddData(builder, data)
def End(builder): return builder.EndObject()
def SparseTensorEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)