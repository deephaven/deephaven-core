# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# App Metadata for a Flight DoPut
class BarragePutMetadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BarragePutMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBarragePutMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BarragePutMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the ticket to reference an out-of-band DoPut (for JS clients that cannot support client-streams)
    # BarragePutMetadata
    def RpcTicket(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarragePutMetadata
    def RpcTicketAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarragePutMetadata
    def RpcTicketLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarragePutMetadata
    def RpcTicketIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # the sequence of this piece of the DoPut; to support out-of-order RPCs for an out-of-band DoPut
    # BarragePutMetadata
    def Sequence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def BarragePutMetadataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRpcTicket(builder, rpcTicket): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rpcTicket), 0)
def BarragePutMetadataAddRpcTicket(builder, rpcTicket):
    """This method is deprecated. Please switch to AddRpcTicket."""
    return AddRpcTicket(builder, rpcTicket)
def StartRpcTicketVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarragePutMetadataStartRpcTicketVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRpcTicketVector(builder, numElems)
def AddSequence(builder, sequence): builder.PrependInt64Slot(1, sequence, 0)
def BarragePutMetadataAddSequence(builder, sequence):
    """This method is deprecated. Please switch to AddSequence."""
    return AddSequence(builder, sequence)
def End(builder): return builder.EndObject()
def BarragePutMetadataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)