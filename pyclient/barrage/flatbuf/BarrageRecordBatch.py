# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A data header describing the shared memory layout of a "record" or "row"
# batch for a ticking barrage table.
class BarrageRecordBatch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BarrageRecordBatch()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBarrageRecordBatch(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BarrageRecordBatch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # This batch is generated from an upstream table that ticks independently of the stream. If
    # multiple events are coalesced into one update, the server may communicate that here for
    # informational purposes.
    # BarrageRecordBatch
    def FirstSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BarrageRecordBatch
    def LastSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # indicates if this message was sent due to upstream ticks or due to a subscription change
    # BarrageRecordBatch
    def IsSnapshot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # If this is a snapshot and the subscription is a viewport, then the effectively subscribed viewport
    # will be included in the payload. It is an encoded Index.
    # BarrageRecordBatch
    def EffectiveViewport(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def EffectiveViewportAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def EffectiveViewportLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def EffectiveViewportIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # If this is a snapshot, then the effectively subscribed column set will be included in the payload.
    # BarrageRecordBatch
    def EffectiveColumnSet(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def EffectiveColumnSetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def EffectiveColumnSetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def EffectiveColumnSetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # This is an encoded Index of rows that were added in this update.
    # BarrageRecordBatch
    def AddedRows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def AddedRowsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def AddedRowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def AddedRowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # This is an encoded Index of rows that were removed in this update.
    # BarrageRecordBatch
    def RemovedRows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def RemovedRowsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def RemovedRowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def RemovedRowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # This is an encoded IndexShiftData describing how the keyspace of unmodified rows changed.
    # BarrageRecordBatch
    def ShiftData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def ShiftDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def ShiftDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def ShiftDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # This is an encoded bitset of added columns that are included in this update; it will match the most
    # recently received effectiveColumnSet.
    # BarrageRecordBatch
    def AddedColumnSet(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def AddedColumnSetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def AddedColumnSetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def AddedColumnSetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # This is an encoded bitset of modified columns that are included in this update. If this is a
    # snapshot, then this bitset will be empty.
    # BarrageRecordBatch
    def ModifiedColumnSet(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def ModifiedColumnSetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def ModifiedColumnSetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def ModifiedColumnSetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # This is an encoded Index of rows that were included with this update
    # (the server may include rows not in addedRows if this is a viewport subscription to refresh
    #  unmodified rows that were scoped into view)
    # BarrageRecordBatch
    def AddedRowsIncluded(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageRecordBatch
    def AddedRowsIncludedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageRecordBatch
    def AddedRowsIncludedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def AddedRowsIncludedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # The list of nodes are first any added columns (if addedRows is nonempty), followed by any modified
    # columns as indicated by modifiedColumnSet.
    # BarrageRecordBatch
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from barrage.flatbuf.BarrageFieldNode import BarrageFieldNode
            obj = BarrageFieldNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BarrageRecordBatch
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Buffers correspond to the pre-ordered flattened buffer tree
    #
    # The number of buffers appended to this list depends on the schema and which nodes were included in the update.
    # Refer to Arrow Flight's specification for buffer schema.
    # BarrageRecordBatch
    def Buffers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from barrage.flatbuf.Buffer import Buffer
            obj = Buffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BarrageRecordBatch
    def BuffersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageRecordBatch
    def BuffersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def Start(builder): builder.StartObject(13)
def BarrageRecordBatchStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFirstSeq(builder, firstSeq): builder.PrependInt64Slot(0, firstSeq, 0)
def BarrageRecordBatchAddFirstSeq(builder, firstSeq):
    """This method is deprecated. Please switch to AddFirstSeq."""
    return AddFirstSeq(builder, firstSeq)
def AddLastSeq(builder, lastSeq): builder.PrependInt64Slot(1, lastSeq, 0)
def BarrageRecordBatchAddLastSeq(builder, lastSeq):
    """This method is deprecated. Please switch to AddLastSeq."""
    return AddLastSeq(builder, lastSeq)
def AddIsSnapshot(builder, isSnapshot): builder.PrependBoolSlot(2, isSnapshot, 0)
def BarrageRecordBatchAddIsSnapshot(builder, isSnapshot):
    """This method is deprecated. Please switch to AddIsSnapshot."""
    return AddIsSnapshot(builder, isSnapshot)
def AddEffectiveViewport(builder, effectiveViewport): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveViewport), 0)
def BarrageRecordBatchAddEffectiveViewport(builder, effectiveViewport):
    """This method is deprecated. Please switch to AddEffectiveViewport."""
    return AddEffectiveViewport(builder, effectiveViewport)
def StartEffectiveViewportVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartEffectiveViewportVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEffectiveViewportVector(builder, numElems)
def AddEffectiveColumnSet(builder, effectiveColumnSet): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveColumnSet), 0)
def BarrageRecordBatchAddEffectiveColumnSet(builder, effectiveColumnSet):
    """This method is deprecated. Please switch to AddEffectiveColumnSet."""
    return AddEffectiveColumnSet(builder, effectiveColumnSet)
def StartEffectiveColumnSetVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartEffectiveColumnSetVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEffectiveColumnSetVector(builder, numElems)
def AddAddedRows(builder, addedRows): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(addedRows), 0)
def BarrageRecordBatchAddAddedRows(builder, addedRows):
    """This method is deprecated. Please switch to AddAddedRows."""
    return AddAddedRows(builder, addedRows)
def StartAddedRowsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartAddedRowsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAddedRowsVector(builder, numElems)
def AddRemovedRows(builder, removedRows): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(removedRows), 0)
def BarrageRecordBatchAddRemovedRows(builder, removedRows):
    """This method is deprecated. Please switch to AddRemovedRows."""
    return AddRemovedRows(builder, removedRows)
def StartRemovedRowsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartRemovedRowsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRemovedRowsVector(builder, numElems)
def AddShiftData(builder, shiftData): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(shiftData), 0)
def BarrageRecordBatchAddShiftData(builder, shiftData):
    """This method is deprecated. Please switch to AddShiftData."""
    return AddShiftData(builder, shiftData)
def StartShiftDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartShiftDataVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartShiftDataVector(builder, numElems)
def AddAddedColumnSet(builder, addedColumnSet): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(addedColumnSet), 0)
def BarrageRecordBatchAddAddedColumnSet(builder, addedColumnSet):
    """This method is deprecated. Please switch to AddAddedColumnSet."""
    return AddAddedColumnSet(builder, addedColumnSet)
def StartAddedColumnSetVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartAddedColumnSetVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAddedColumnSetVector(builder, numElems)
def AddModifiedColumnSet(builder, modifiedColumnSet): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(modifiedColumnSet), 0)
def BarrageRecordBatchAddModifiedColumnSet(builder, modifiedColumnSet):
    """This method is deprecated. Please switch to AddModifiedColumnSet."""
    return AddModifiedColumnSet(builder, modifiedColumnSet)
def StartModifiedColumnSetVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartModifiedColumnSetVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartModifiedColumnSetVector(builder, numElems)
def AddAddedRowsIncluded(builder, addedRowsIncluded): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(addedRowsIncluded), 0)
def BarrageRecordBatchAddAddedRowsIncluded(builder, addedRowsIncluded):
    """This method is deprecated. Please switch to AddAddedRowsIncluded."""
    return AddAddedRowsIncluded(builder, addedRowsIncluded)
def StartAddedRowsIncludedVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageRecordBatchStartAddedRowsIncludedVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAddedRowsIncludedVector(builder, numElems)
def AddNodes(builder, nodes): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)
def BarrageRecordBatchAddNodes(builder, nodes):
    """This method is deprecated. Please switch to AddNodes."""
    return AddNodes(builder, nodes)
def StartNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BarrageRecordBatchStartNodesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartNodesVector(builder, numElems)
def AddBuffers(builder, buffers): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(buffers), 0)
def BarrageRecordBatchAddBuffers(builder, buffers):
    """This method is deprecated. Please switch to AddBuffers."""
    return AddBuffers(builder, buffers)
def StartBuffersVector(builder, numElems): return builder.StartVector(16, numElems, 8)
def BarrageRecordBatchStartBuffersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBuffersVector(builder, numElems)
def End(builder): return builder.EndObject()
def BarrageRecordBatchEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)