# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# ----------------------------------------------------------------------
# Data structures for describing a barrage row batch (an update to a ticking table).
# Metadata about a field at some level of a nested type tree (but not
# its children).
#
# This is similar to arrow's FieldNode, with additional fields to support modified rows.
class BarrageFieldNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BarrageFieldNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBarrageFieldNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BarrageFieldNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The number of value slots in the Arrow array at this level of a nested
    # tree.
    # BarrageFieldNode
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # The number of observed nulls. Fields with null_count == 0 may choose not
    # to write their physical validity bitmap out as a materialized buffer,
    # instead setting the length of the bitmap buffer to 0.
    # BarrageFieldNode
    def NullCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # If this field node is for an outer-most modified column then these fields may be included:
    # This is an encoded Index of rows for this column that were modified:
    # BarrageFieldNode
    def ModifiedRows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageFieldNode
    def ModifiedRowsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageFieldNode
    def ModifiedRowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageFieldNode
    def ModifiedRowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # If this is a viewport, this is an encoded Index of rows for this column that were included in the buffer.
    # BarrageFieldNode
    def IncludedRows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BarrageFieldNode
    def IncludedRowsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # BarrageFieldNode
    def IncludedRowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BarrageFieldNode
    def IncludedRowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def BarrageFieldNodeStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddLength(builder, length): builder.PrependInt64Slot(0, length, 0)
def BarrageFieldNodeAddLength(builder, length):
    """This method is deprecated. Please switch to AddLength."""
    return AddLength(builder, length)
def AddNullCount(builder, nullCount): builder.PrependInt64Slot(1, nullCount, 0)
def BarrageFieldNodeAddNullCount(builder, nullCount):
    """This method is deprecated. Please switch to AddNullCount."""
    return AddNullCount(builder, nullCount)
def AddModifiedRows(builder, modifiedRows): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(modifiedRows), 0)
def BarrageFieldNodeAddModifiedRows(builder, modifiedRows):
    """This method is deprecated. Please switch to AddModifiedRows."""
    return AddModifiedRows(builder, modifiedRows)
def StartModifiedRowsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageFieldNodeStartModifiedRowsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartModifiedRowsVector(builder, numElems)
def AddIncludedRows(builder, includedRows): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(includedRows), 0)
def BarrageFieldNodeAddIncludedRows(builder, includedRows):
    """This method is deprecated. Please switch to AddIncludedRows."""
    return AddIncludedRows(builder, includedRows)
def StartIncludedRowsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BarrageFieldNodeStartIncludedRowsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIncludedRowsVector(builder, numElems)
def End(builder): return builder.EndObject()
def BarrageFieldNodeEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)