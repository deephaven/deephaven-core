import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork
import io.deephaven.tools.docker.WaitForHealthyContainer

plugins {
    id 'com.bmuschko.docker-remote-api'
}

// Build the pydeephaven wheel from sources in a vanilla docker container
tasks.getByName('build').dependsOn(Docker.registerDockerTask(project, 'buildPyClient') {
    copyIn {
        from('requirements.txt') {
            into 'project'
        }
        from('setup.py') {
            into 'project'
        }
        from('README.md') {
            into 'project'
        }
        from('pydeephaven') {
            into 'project/pydeephaven'
        }
    }
    dockerfile {
        from('docker.io/library/python:3.7.10')
        copyFile('project', '/project')
        workingDir('/project')
        runCommand('python3 setup.py bdist_wheel')
    }
    containerOutPath = '/project/dist'
    copyOut {
        into 'build/wheel'
    }
})

// Start up a docker container for the grpc-api, then run pydeephaven test
evaluationDependsOn(':grpc-api-server-docker')
String randomSuffix = UUID.randomUUID().toString();
String dockerContainerName = "pydeephaven-test-container-${randomSuffix}"
String dockerNetworkName = "pydeephaven-network-${randomSuffix}"
def createDeephavenGrpcApiNetwork = tasks.register('createDeephavenGrpcApiNetwork', DockerCreateNetwork) {
    networkName.set dockerNetworkName
}
def removeDeephavenGrpcApiNetwork = tasks.register('removeDeephavenGrpcApiNetwork', DockerRemoveNetwork) {
    networkId.set dockerNetworkName
}

def createDeephavenGrpcApi = tasks.register('createDeephavenGrpcApi', DockerCreateContainer) {
    def grpcApiImage = project(':grpc-api-server-docker').tasks.named('dockerBuildImage');
    dependsOn grpcApiImage, createDeephavenGrpcApiNetwork
    targetImageId grpcApiImage.get().getImageId()
    containerName.set dockerContainerName
    hostConfig.network.set dockerNetworkName
}
def startDeephavenGrpcApi = tasks.register('startDeephavenGrpcApi', DockerStartContainer) {
    dependsOn createDeephavenGrpcApi
    containerId.set dockerContainerName
}
def waitForHealthy = tasks.register('waitForHealthy', WaitForHealthyContainer) {
    dependsOn startDeephavenGrpcApi

    awaitStatusTimeout.set 20
    checkInterval.set 100

    containerId.set dockerContainerName
}
def stopDeephavenGrpcApi = tasks.register('stopDeephavenGrpcApi', DockerRemoveContainer) {
    dependsOn createDeephavenGrpcApi
    finalizedBy removeDeephavenGrpcApiNetwork

    targetContainerId dockerContainerName
    force.set true
    removeVolumes.set true

//    onError { t ->
//        // ignore, container might not exist
//    }
}
tasks.getByName('check').dependsOn(Docker.registerDockerTask(project, 'testPyClient') {
    copyIn {
        from('pydeephaven') {
            into 'project/pydeephaven'
        }
        from('tests') {
            into 'project/tests'
        }
    }
//    parentContainers = [  ]
    containerDependencies.dependsOn = [waitForHealthy, createDeephavenGrpcApiNetwork]
    containerDependencies.finalizedBy = stopDeephavenGrpcApi
    network = dockerNetworkName
    dockerfile {
        from('docker.io/library/python:3.7.10')
        runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4 pyarrow==5.0.0 protobuf==3.17.3 grpcio==1.39.0 bitstring==3.1.9 pandas==1.2.5;\\
                      mkdir -p /out/report'''
        environmentVariable 'DH_HOST', dockerContainerName
        environmentVariable 'DH_PORT', '8080'

        copyFile('project', '/project')
        workingDir('/project')
    }

    entrypoint = ['python', '-m', 'xmlrunner', 'discover', 'tests', '-v', '-o', '/out/report']
    copyOut {
        into layout.buildDirectory.dir('test-results')
    }
})