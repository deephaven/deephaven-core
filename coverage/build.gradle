plugins {
    id 'io.deephaven.project.register'
    id 'java'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.12'
}

tasks.register("jacoco-merge", JacocoReport) {
    def jprojects = rootProject.allprojects.findAll { p ->
        p.plugins.hasPlugin('java') && !p.name.matches('server-jetty.*-11')
    }
    additionalSourceDirs = files(jprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(jprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(jprojects.sourceSets.main.output)
    reports {
        html.required = true
        csv.required = true
        xml.required = false
    }
    def projRootDir = rootProject.rootDir.absolutePath
    executionData fileTree(projRootDir).include("**/build/jacoco/*.exec")
    doLast {
        def javaDir = "$buildDir/reports/java/"
        file("$buildDir/reports/jacoco/jacoco-merge/").renameTo(javaDir)
        delete file("$buildDir/reports/jacoco/")
        file(javaDir + "html").renameTo(file(javaDir + "java-coverage.html"))
        file(javaDir + "jacoco-merge.csv").renameTo(file(javaDir + "java-coverage.csv"))
    }
}

tasks.register("python-merge") {
    def projRootDir = rootProject.rootDir.absolutePath
    def outputDir = file("$buildDir/reports/python/")
    def outputFile = new File(outputDir, "python-coverage.tsv")
    outputDir.mkdirs()
    outputFile.text = ''
    fileTree(projRootDir).include("**/build/test-results/**/coverage/python-coverage-*.tsv").each { f ->
        outputFile << f.text + '\n'
    }
    fileTree(projRootDir).include("**/build/test-results/**/coverage/python-coverage-*.html/index.html").each { f ->
        copy {
          from f.parentFile
          into new File(outputDir, f.parentFile.name)
        }
    }
}

tasks.register("coverage-merge", Exec) {
    dependsOn("jacoco-merge")
    dependsOn("python-merge")
    def projDir = projectDir.absolutePath
    def script = projDir + '/gather-coverage.py'
    commandLine 'python', script, projDir
    standardOutput = System.out
}

