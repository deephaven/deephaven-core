import java.util.function.Supplier

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'com.avast.gradle.docker-compose'
}

evaluationDependsOn ':docker-server-jetty'

configurations {
    implementation.extendsFrom dhIntegrations
    testImplementation.extendsFrom fishBaseTest
}

dependencies {

    implementation project(':engine-table')
    implementation project(':plugin')
    implementation project(':Configuration')
    implementation project(':log-factory')

    testImplementation project(':engine-test-utils')

    testRuntimeOnly project(':log-to-slf4j')
    // add configs, and some runtime dependencies to test classpaths
    testRuntimeOnly project(':configs')
    testRuntimeOnly project(':test-configs')
    // need these projects so session default imports / generated type wrappers resolve correctly
    testRuntimeOnly project(':Numerics')
    testRuntimeOnly project(':Plot')
    testRuntimeOnly project(':extensions-kafka')
    testRuntimeOnly project(':extensions-parquet-table')
}

sourceSets {
    test {
        resources {
            srcDirs += ['test_python']
        }
    }
}

JavaPluginConvention java = project.convention.plugins.get('java') as JavaPluginConvention
SourceSet test = java.sourceSets.maybeCreate('test')

def runInDocker = { String name, String sourcePath, def command, Closure addConfig = {} ->
    Docker.registerDockerTask(project, name) {
        copyIn {
            from(sourcePath) {
                into 'python'
            }
            from(test.runtimeClasspath) {
                into 'classpath'
            }

            // Unpack the config contents for now, since we don't seem to read the configs from inside a jar.
            // This does not add a task dependency, but we already put :configs in the testRuntime classpath,
            // so it is part of the previous statement
            from(zipTree(project(':configs').tasks.getByName('jar').outputs.files.singleFile)) {
                into 'python/configs'
            }
        }
        parentContainers = [project(':docker-server-jetty').tasks.findByName('buildDocker-server-jetty')] // deephaven/server-jetty

        imageName = 'deephaven/py-integrations:local-build'

        addConfig(it)

        dockerfile {
            // set up the container, env vars - things that aren't likely to change
            from 'deephaven/server-jetty:local-build'
            runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4; \\
                      mkdir -p /out/report; \\
					  echo "[PostgreSQL]" > /etc/odbcinst.ini; \\
					  echo "Driver      = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so" >> /etc/odbcinst.ini; \\
					  echo "Threading   = 2" >> /etc/odbcinst.ini'''

            volume '/data'
            volume '/cache'
            environmentVariable 'DEEPHAVEN_CLASSPATH', '/classpath/*:/classpath:/opt/deephaven/server/lib/*:/opt/deephaven/server/lib/'
            environmentVariable 'DEEPHAVEN_MAXMEM', '2G'
            environmentVariable 'DEEPHAVEN_PROPFILE', 'dh-defaults.prop'
            environmentVariable 'DEEPHAVEN_VERSION', project.version

            workingDir '/python'

            // copy in the contents that we do expect to change as the project updates
            copyFile 'python', '/python'
            copyFile 'classpath', '/classpath'
        }

        List<String> entrypointFinal;
        if (command instanceof List) {
            entrypointFinal = command as List<String>
        } else {
            entrypointFinal = ((Supplier<List<String>>) command).get()
        }

        entrypoint = entrypointFinal

        copyOut {
            into layout.buildDirectory.dir('test-results')
        }
    }
}

// Using Integrations/docker-compose.yml, this will start redpanda and wait until it is running before letting tests proceed.
dockerCompose {
    waitForTcpPortsTimeout = Duration.ofMinutes(2)
}

Closure composeConfig = { task ->
    task.network = "${dockerCompose.projectName.get()}_default"
    task.containerDependencies.dependsOn = dockerCompose.tasksConfigurator.upTask
    task.containerDependencies.finalizedBy = dockerCompose.tasksConfigurator.downTask
}

def pyTest = runInDocker('test-py-deephaven', '../py/server', ['python3', '-m', 'xmlrunner', 'discover', '-s', 'tests', '-t', '.', '-v', '-o', '/out/report'], composeConfig)

def pyTestSpecific = runInDocker(
        'test-py-deephaven-specific', '../py/server',
        { ->
            def baseCommand = ['python3', '-m', 'xmlrunner', '-v', '-o', '/out/report']

            if(project.hasProperty("pyTestFiles")) {
//                test-py-deephaven-specific --stacktrace -PpyTestFiles="test_keyed_record_adapter.py"
//                project.setProperty("pyTestFiles", "test_keyed_record_adapter.py")
                def testFilesProp = (String) project.property('pyTestFiles')
                for (final String pyTestFile in testFilesProp.split(/,\s*/)) {
                    final String testFilePath = "tests/$pyTestFile"
                    println "Including Python tests in $testFilePath"
                    baseCommand.add(testFilePath)
                }
            }

            return baseCommand
        },
        composeConfig)

pyTest.configure({
    onlyIf { TestTools.shouldRunTests(project) }
})

pyTestSpecific.configure({
    onlyIf { TestTools.shouldRunTests(project) }
})

tasks.getByName('check').dependsOn(pyTest)
