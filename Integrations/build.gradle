plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'com.avast.gradle.docker-compose'
}

evaluationDependsOn ':docker-server'

configurations {
    implementation.extendsFrom dhIntegrations
    testImplementation.extendsFrom fishBaseTest
}

dependencies {

    implementation project(':engine-table')
    implementation project(':plugin')
    implementation project(':Configuration')
    implementation project(':log-factory')

    testRuntimeOnly project(':log-to-slf4j')
    // add configs, and some runtime dependencies to test classpaths
    testRuntimeOnly project(':configs')
    testRuntimeOnly project(':test-configs')
    // need these projects so session default imports / generated type wrappers resolve correctly
    testRuntimeOnly project(':Numerics')
    testRuntimeOnly project(':Plot')
    testRuntimeOnly project(':extensions-kafka')
    testRuntimeOnly project(':extensions-parquet-table')
}

sourceSets {
    test {
        resources {
            srcDirs += ['test_python']
        }
    }
}

JavaPluginConvention java = project.convention.plugins.get('java') as JavaPluginConvention
SourceSet test = java.sourceSets.maybeCreate('test')

def runInDocker = { String name, String sourcePath, List<String> command, Closure addConfig = {} ->
    Docker.registerDockerTask(project, name) {
        copyIn {
            from(sourcePath) {
                into 'python'
            }
            from(test.runtimeClasspath) {
                into 'classpath'
            }

            // Unpack the config contents for now, since we don't seem to read the configs from inside a jar.
            // This does not add a task dependency, but we already put :configs in the testRuntime classpath,
            // so it is part of the previous statement
            from(zipTree(project(':configs').tasks.getByName('jar').outputs.files.singleFile)) {
                into 'python/configs'
            }
        }
        parentContainers = [project(':docker-server').tasks.findByName('buildDocker-server-netty')] // deephaven/server-netty

        imageName = 'deephaven/py-integrations:local-build'

        addConfig(it)

        dockerfile {
            // set up the container, env vars - things that aren't likely to change
            from 'deephaven/server-netty:local-build'
            runCommand '''set -eux; \\
                      pip3 install pyarrow unittest-xml-reporting==3.0.4;\\
                      mkdir -p /out/report'''
            volume '/data'
            volume '/cache'
            environmentVariable 'DEEPHAVEN_CLASSPATH', '/classpath/*:/classpath:/opt/deephaven/server/lib/*:/opt/deephaven/server/lib/'
            environmentVariable 'DEEPHAVEN_PROPFILE', 'dh-defaults.prop'
            environmentVariable 'DEEPHAVEN_VERSION', project.version

            workingDir '/python'

            // copy in the contents that we do expect to change as the project updates
            copyFile 'python', '/python'
            copyFile 'classpath', '/classpath'
        }
        entrypoint = command

        copyOut {
            into layout.buildDirectory.dir('test-results')
        }
    }
}

// Using Integrations/docker-compose.yml, this will start redpanda and wait until it is running before letting tests proceed.
dockerCompose {
    waitForTcpPortsTimeout = Duration.ofMinutes(2)
}

Closure composeConfig = { task ->
    task.network = "${dockerCompose.projectName.get()}_default"
    task.containerDependencies.dependsOn = dockerCompose.tasksConfigurator.upTask
    task.containerDependencies.finalizedBy = dockerCompose.tasksConfigurator.downTask
}

def pyTest = runInDocker('test-py-deephaven', '../py/server', ['python3', '-m', 'xmlrunner', 'discover', '-s', 'tests', '-t', '.', '-v', '-o', '/out/report'], composeConfig)

pyTest.configure({
    onlyIf { TestTools.shouldRunTests(project) }
})
tasks.getByName('check').dependsOn(pyTest)
