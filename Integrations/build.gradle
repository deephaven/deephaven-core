import java.nio.charset.StandardCharsets
import java.security.MessageDigest

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'com.avast.gradle.docker-compose'
}

evaluationDependsOn ':docker-server-jetty'

configurations {
    implementation.extendsFrom dhIntegrations
    testImplementation.extendsFrom fishBaseTest
}

dependencies {

    implementation project(':engine-table')
    implementation project(':plugin')
    implementation project(':Configuration')
    implementation project(':log-factory')

    testImplementation project(':engine-test-utils')

    // Needed for CalendarInit
    testRuntimeOnly TestTools.projectDependency(project, 'engine-time')
    testRuntimeOnly project(':log-to-slf4j')
    // add configs, and some runtime dependencies to test classpaths
    testRuntimeOnly project(':configs')
    testRuntimeOnly project(':test-configs')
    // need these projects so session default imports / generated type wrappers resolve correctly
    testRuntimeOnly project(':Numerics')
    testRuntimeOnly project(':Plot')
    testRuntimeOnly project(':extensions-kafka')
    testRuntimeOnly project(':extensions-parquet-table')
    testRuntimeOnly project(':log-to-slf4j')
    testRuntimeOnly project(':engine-time')
}

sourceSets {
    test {
        resources {
            srcDirs += ['test_python']
        }
    }
}

SourceSet test = extensions.findByType(JavaPluginExtension).sourceSets.maybeCreate('test')

def runInDocker = { String name, String sourcePath, List<String> command, Closure addConfig = {} ->
    Docker.registerDockerTask(project, name) {
        copyIn {
            from(sourcePath) {
                include 'deephaven/**'
                include 'deephaven_internal/**'
                include 'test_helper/**'
                include 'tests/**'
                include 'setup.py'
                into 'python'
            }
            from(test.runtimeClasspath) {
                into 'classpath'
            }
            from("${sourcePath}/../client") {
                include 'setup.py'
                include 'pydeephaven/**'
                include 'README.md'
                into 'python/client'
            }

            // Unpack the config contents for now, since we don't seem to read the configs from inside a jar.
            // This does not add a task dependency, but we already put :configs in the testRuntime classpath,
            // so it is part of the previous statement
            from(zipTree(project(':configs').tasks.getByName('jar').outputs.files.singleFile)) {
                into 'python/configs'
            }
        }
        parentContainers = [project(':docker-server-jetty').tasks.findByName('buildDocker-server-jetty')] // deephaven/server-jetty

        imageName = Docker.localImageName('py-integrations')

        addConfig(it)

        dockerfile {
            // set up the container, env vars - things that aren't likely to change
            from Docker.localImageName('server-jetty')
            runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4; \\
                      mkdir -p /out/report; \\
					  echo "[PostgreSQL]" > /etc/odbcinst.ini; \\
					  echo "Driver      = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so" >> /etc/odbcinst.ini; \\
					  echo "Threading   = 2" >> /etc/odbcinst.ini'''

            volume '/data'
            volume '/cache'
            environmentVariable 'DEEPHAVEN_CLASSPATH', '/classpath/*:/classpath:/opt/deephaven/server/lib/*:/opt/deephaven/server/lib/'
            environmentVariable 'DEEPHAVEN_MAXMEM', '2G'
            environmentVariable 'DEEPHAVEN_PROPFILE', 'dh-defaults.prop'
            environmentVariable 'DEEPHAVEN_VERSION', project.version

            workingDir '/python'

            // copy in the contents that we do expect to change as the project updates
            copyFile 'python', '/python'
            copyFile 'classpath', '/classpath'
            runCommand '''pip3 install /python/client'''

        }
        entrypoint = command

        copyOut {
            into layout.buildDirectory.dir('test-results')
        }
    }
}

// Using Integrations/docker-compose.yml, this will start all the containers and wait until the exposed ports are ready
dockerCompose {
    // To workaround errors encountered when dockerCompose auto-inherits the projectName (it uses "-" and "_" next to
    // each other, which violates docker naming conventions), we can explicitly set a projectName.
    // https://github.com/avast/gradle-docker-compose-plugin/issues/393
    // https://github.com/avast/gradle-docker-compose-plugin/issues/372#issuecomment-1403264410
    // Additionally, this preserves the prefix logic that dockerCompose chooses to use based on the absolutePath of the
    // project. This may be beneficial in workflows where the user has checked out multiple repositories and wants to
    // ensure docker names do not collide.
    def projectSafePrefix = MessageDigest.getInstance("MD5").digest(project.projectDir.absolutePath.toString().getBytes(StandardCharsets.UTF_8)).encodeHex().toString()
    projectName = "${projectSafePrefix}_${project.name.replace('.', '_')}"
    waitForTcpPortsTimeout = Duration.ofMinutes(2)
}

Closure composeConfig = { task ->
    task.network = "${dockerCompose.projectName.get()}_default"
    task.containerDependencies.dependsOn = dockerCompose.tasksConfigurator.upTask
    task.containerDependencies.finalizedBy = dockerCompose.tasksConfigurator.downTask
}

def pyTest = runInDocker('test-py-deephaven', '../py/server', ['python3', '-m', 'xmlrunner', 'discover', '-s', 'tests', '-t', '.', '-v', '-o', '/out/report'], composeConfig)

pyTest.configure({
    onlyIf { TestTools.shouldRunTests(project) }
})
tasks.getByName('check').dependsOn(pyTest)
