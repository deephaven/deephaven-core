plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'com.avast.gradle.docker-compose'
    id 'idea'
}

evaluationDependsOn ':docker-server'

configurations {
    compile.extendsFrom dhIntegrations
    testCompile.extendsFrom fishBaseTest
}

dependencies {

    compile project(':engine-table')
    testRuntimeOnly project(':log-to-slf4j')
    // add configs, and some runtime dependencies to test classpaths
    testRuntime project(':configs'),
            project(':test-configs'),
            // need these projects so session default imports / generated type wrappers resolve correctly
            project(':Numerics'),
            project(':Plot'),
            project(':extensions-kafka'),
            project(':extensions-parquet-table')
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        // For gradle, we _probably_ do not want to put r into the jar,
        // and definitely do not want to put in python, which is delivered as a wheel.
        // This used to be `resources.srcDirs '.'` with inclusions for 'r' and 'python'
        // We can't use srcDirs '.' and expect IntelliJ to like it, so we'll just remove
        // the sourceSet resources entirely, and then manually staple r into the jar
        // until we can verify that it is safe to remove (and then we'll just remove the jar {} block below)
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['test_python', 'src/test/resources']
    }
}

// Even though we don't want gradle to treat these directories as resources (for jar packing),
// we do want IntelliJ to treat them as resources in IDE.
idea {
    module {
        resourceDirs += [file('r'), file('python')]
        testResourceDirs += [file('python/test')]
    }
}

// This wiring is probably not needed.
// It only exists to maintain legacy jar structure
// (we changed the sourceSets.main.resources srcDirs,
// which affects where files would normally be packed into the jar).
// TODO: verify nobody pulls r from the Integrations jar, then delete this)
(tasks.jar as Jar).configure {
    Jar j ->
        j.from('r') {
            CopySpec c->
                c.into 'r'
        }
}

JavaPluginConvention java = project.convention.plugins.get('java') as JavaPluginConvention
SourceSet test = java.sourceSets.maybeCreate('test')

def runInDocker = { String name, String sourcePath, List<String> command, Closure addConfig = {} ->
    Docker.registerDockerTask(project, name) {
        copyIn {
            from(sourcePath) {
                into 'python'
            }
            from(test.runtimeClasspath) {
                into 'classpath'
            }

            // Unpack the config contents for now, since we don't seem to read the configs from inside a jar.
            // This does not add a task dependency, but we already put :configs in the testRuntime classpath,
            // so it is part of the previous statement
            from(zipTree(project(':configs').tasks.getByName('jar').outputs.files.singleFile)) {
                into 'python/configs'
            }
        }
        parentContainers = [project(':docker-server').tasks.findByName('buildDocker-server')] // deephaven/server

        imageName = 'deephaven/py-integrations:local-build'

        addConfig(it)

        dockerfile {
            // set up the container, env vars - things that aren't likely to change
            from 'deephaven/server:local-build'
            runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4;\\
                      mkdir -p /out/report;\\
                      mkdir -p /workspace/cache/classes'''
            environmentVariable 'DEEPHAVEN_CLASSPATH', '/classpath/*:/classpath:/opt/deephaven/server/lib/*:/opt/deephaven/server/lib/'
            environmentVariable 'DEEPHAVEN_WORKSPACE', '/workspace'
            environmentVariable 'DEEPHAVEN_DEVROOT', '/python'
            environmentVariable 'DEEPHAVEN_PROPFILE', 'dh-defaults.prop'
            environmentVariable 'JDK_HOME', '/usr/lib/jvm/zulu8/jre/'
            environmentVariable 'JAVA_VERSION', '1.8'
            environmentVariable 'DEEPHAVEN_VERSION', project.version

            workingDir '/python'

            // copy in the contents that we do expect to change as the project updates
            copyFile 'python', '/python'
            copyFile 'classpath', '/classpath'
        }
        entrypoint = command

        copyOut {
            into layout.buildDirectory.dir('test-results')
        }
    }
}

// Using Integrations/docker-compose.yml, this will start redpanda and wait until it is running before letting tests proceed.
dockerCompose {
    waitForTcpPortsTimeout = Duration.ofMinutes(2)
}

Closure composeConfig = { task ->
    task.network = dockerCompose.projectName.toLowerCase() + '_default'
    task.containerDependencies.dependsOn = dockerCompose.upTask
    task.containerDependencies.finalizedBy = dockerCompose.downTask
}

def pyTest = runInDocker("test-py-37", 'python', ['python3', '-m', 'xmlrunner', 'discover', '-v', '-o', '/out/report'], composeConfig)
def pyFunctionalTest = runInDocker('py-functional-test', 'python', ['/bin/bash', 'run-functional-tests.sh'])
def pyTest2 = runInDocker('test-py-deephaven2', '../pyintegration', ['python3', '-m', 'xmlrunner', 'discover', 'tests', '-v', '-o', '/out/report'], composeConfig)
pyTest.configure({
    onlyIf { TestTools.shouldRunTests(project) }
})
tasks.getByName('check').dependsOn(pyTest)

pyFunctionalTest.configure({
    onlyIf { TestTools.shouldRunTests(project) }
})
tasks.getByName('check').dependsOn(pyFunctionalTest)

pyTest2.configure({
    onlyIf { TestTools.shouldRunTests(project) }
})
tasks.getByName('check').dependsOn(pyTest2)
