{
 "className": "io.deephaven.integrations.learn.gather.NumPy",
 "methods": {
  "tensorBuffer2DBoolean": "Copy data from a table into a 2d tensor of Booleans.\n\n:param rowSeq: (io.deephaven.engine.rowset.RowSequence) - indices of the rows of the table to put into the tensor\n:param columnSources: (io.deephaven.engine.table.ColumnSource<?>[]) - columns of data to put into the tensor\n:param columnMajorOrder: (boolean) - true to return a column-major array; false to return a row-major array\n:return: (boolean[]) contiguous RAM allocated for the tensor",
  "tensorBuffer2DByte": "Copy data from a table into a 2d tensor of Bytes.\n\n:param rowSeq: (io.deephaven.engine.rowset.RowSequence) - indices of the rows of the table to put into the tensor\n:param columnSources: (io.deephaven.engine.table.ColumnSource<?>[]) - columns of data to put into the tensor\n:param columnMajorOrder: (boolean) - true to return a column-major array; false to return a row-major array\n:return: (byte[]) contiguous RAM allocated for the tensor",
  "tensorBuffer2DDouble": "Copy data from a table into a 2d tensor of doubles.\n\n:param rowSeq: (io.deephaven.engine.rowset.RowSequence) - indices of the rows of the table to put into the tensor\n:param columnSources: (io.deephaven.engine.table.ColumnSource<?>[]) - columns of data to put into the tensor\n:param columnMajorOrder: (boolean) - true to return a column-major array; false to return a row-major array\n:return: (double[]) contiguous RAM allocated for the tensor",
  "tensorBuffer2DFloat": "Copy data from a table into a 2d tensor of floats.\n\n:param rowSeq: (io.deephaven.engine.rowset.RowSequence) - indices of the rows of the table to put into the tensor\n:param columnSources: (io.deephaven.engine.table.ColumnSource<?>[]) - columns of data to put into the tensor\n:param columnMajorOrder: (boolean) - true to return a column-major array; false to return a row-major array\n:return: (float[]) contiguous RAM allocated for the tensor",
  "tensorBuffer2DInt": "Copy data from a table into a 2d tensor of ints.\n\n:param rowSeq: (io.deephaven.engine.rowset.RowSequence) - indices of the rows of the table to put into the tensor\n:param columnSources: (io.deephaven.engine.table.ColumnSource<?>[]) - columns of data to put into the tensor\n:param columnMajorOrder: (boolean) - true to return a column-major array; false to return a row-major array\n:return: (int[]) contiguous RAM allocated for the tensor",
  "tensorBuffer2DLong": "Copy data from a table into a 2d tensor of longs.\n\n:param rowSeq: (io.deephaven.engine.rowset.RowSequence) - indices of the rows of the table to put into the tensor\n:param columnSources: (io.deephaven.engine.table.ColumnSource<?>[]) - columns of data to put into the tensor\n:param columnMajorOrder: (boolean) - true to return a column-major array; false to return a row-major array\n:return: (long[]) contiguous RAM allocated for the tensor",
  "tensorBuffer2DShort": "Copy data from a table into a 2d tensor of shorts.\n\n:param rowSeq: (io.deephaven.engine.rowset.RowSequence) - indices of the rows of the table to put into the tensor\n:param columnSources: (io.deephaven.engine.table.ColumnSource<?>[]) - columns of data to put into the tensor\n:param columnMajorOrder: (boolean) - true to return a column-major array; false to return a row-major array\n:return: (short[]) contiguous RAM allocated for the tensor"
 },
 "path": "io.deephaven.integrations.learn.gather.NumPy",
 "text": "Gatherer takes Deephaven columnar data and places it into a buffer to be used by Python. The Python object will take\n data from the buffer and use it to construct a 2d array of specified size.",
 "typeName": "class"
}