{
 "className": "io.deephaven.web.shared.ast.MergeRelatedSiblingExpressions",
 "methods": {
  "execute": ":param filter: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor",
  "onAnd": ":param descriptor: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor",
  "onOr": ":param descriptor: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor"
 },
 "path": "io.deephaven.web.shared.ast.MergeRelatedSiblingExpressions",
 "text": "If two or more IN-like expressions are in the same OR (or NOT-INs in the same AND), join them together into a single\n expression. This may change the order of expressions, but should not have side effects - execution order of null\n checks vs invoke for example, should not be affected by this. All IN expressions are moved to the front of the list.\n\n Examples: o A in 1 AND B in 2 - left as is o A not in 1 AND A not in 2 - rewritten as A not in 1, 2 o A == B OR A in\n 1 OR A == C OR A in 2 - rewritten as A in 1, 2 OR A == B OR A == C\n\n This assumes that all nested ORs and ANDs have been flattened already, NOTs normalized, and that we're happy with EQs\n vs INs and their children.",
 "typeName": "class"
}