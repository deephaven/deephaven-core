{
 "className": "io.deephaven.web.shared.data.treetable.Key",
 "methods": {
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "getArray": ":return: java.lang.Object[]",
  "getLeaf": ":return: java.lang.Object",
  "getList": ":return: java.lang.Object[]",
  "getNanos": ":return: java.lang.Long",
  "hashCode": ":return: int",
  "isArray": ":return: boolean",
  "isDateTime": ":return: boolean",
  "isLeaf": ":return: boolean",
  "isList": ":return: boolean",
  "isRoot": ":return: boolean",
  "ofArray": ":param array: java.lang.Object[]\n:return: io.deephaven.web.shared.data.treetable.Key",
  "ofDateTime": ":param nanos: long\n:return: io.deephaven.web.shared.data.treetable.Key",
  "ofList": ":param array: java.util.List<?>\n:return: io.deephaven.web.shared.data.treetable.Key",
  "ofObject": ":param serverKey: java.lang.Object\n:return: io.deephaven.web.shared.data.treetable.Key",
  "root": ":return: io.deephaven.web.shared.data.treetable.Key",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.web.shared.data.treetable.Key",
 "text": "OpenAPI compatible analog to SmartKey, leaving out hashcode when serializing. This is an opaque object to client\n code, but serialized using the stream to get the benefits of shared fields rather than simply byte[] encoding the\n java serialized data.\n\n In order to serialize this, as Object[] is not serializable, the custom field serializer must descend into the array,\n and check each value. If the value is a serializable type as is, simply write it, otherwise check for special cases\n that we accept (StringSet, DateTime) and use appropriate wrappers.",
 "typeName": "class"
}