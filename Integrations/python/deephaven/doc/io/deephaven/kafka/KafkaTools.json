{
 "className": "io.deephaven.kafka.KafkaTools",
 "methods": {
  "avroSchemaToColumnDefinitions": "*Overload 1*  \n  :param mappedOut: java.util.Map<java.lang.String,java.lang.String>\n  :param schema: org.apache.avro.Schema\n  :param fieldNameMapping: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: io.deephaven.db.tables.ColumnDefinition<?>[]\n  \n*Overload 2*  \n  :param schema: org.apache.avro.Schema\n  :param fieldNameMapping: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: io.deephaven.db.tables.ColumnDefinition<?>[]\n  \n*Overload 3*  \n  :param schema: org.apache.avro.Schema\n  :return: io.deephaven.db.tables.ColumnDefinition<?>[]",
  "consumeJsonToTable": "*Overload 1*  \n  :param consumerProperties: java.util.Properties\n  :param topic: java.lang.String\n  :param partitionFilter: java.util.function.IntPredicate\n  :param partitionToInitialOffset: java.util.function.IntToLongFunction\n  :param valueColumns: io.deephaven.db.tables.ColumnDefinition<?>[]\n  :return: io.deephaven.db.tables.Table\n  \n*Overload 2*  \n  :param consumerProperties: java.util.Properties\n  :param topic: java.lang.String\n  :param partitionFilter: java.util.function.IntPredicate\n  :param partitionToInitialOffset: java.util.function.IntToLongFunction\n  :param valueColumns: io.deephaven.db.tables.ColumnDefinition<?>[]\n  :param columnNameToJsonField: java.util.Map<java.lang.String,java.lang.String>\n  :return: io.deephaven.db.tables.Table",
  "consumeToTable": "**Incompatible overloads text - text from the first overload:**\n\nConsume a number of partitions from a single, simple type key and single type value Kafka topic to a single table,\n with table partitions matching Kafka partitions.\n\n The types of key and value are either specified in the properties as \"key.type\" and \"value.type\",\n or deduced from the serializer classes for key and value in the provided Properties object.\n The names for the key and value columns can be provided in the properties as \"key.column.name\" and \"value.column.name\",\n and otherwise default to \"key\" and \"value\".\n object for the Kafka Consumer initialization; if the Properties object provided does not contain\n keys for key deserializer or value deserializer, they are assumed to be of String type and the corresponding\n property for the respective deserializer are added.\n\n*Overload 1*  \n  :param kafkaConsumerProperties: (java.util.Properties) - \n  :param topic: (java.lang.String) - \n  :param partitionFilter: (java.util.function.IntPredicate) - \n  :param partitionToInitialOffset: (java.util.function.IntToLongFunction) - \n  :param keySchema: (org.apache.avro.Schema) - Avro schema for the key, or null if no key expected\n  :param keyFieldNameMapping: (java.util.function.Function<java.lang.String,java.lang.String>) - Mapping of key schema field names to deephaven table column names, or null if no key expected\n  :param valueSchema: (org.apache.avro.Schema) - Avro schema for the value\n  :param valueFieldNameMapping: (java.util.function.Function<java.lang.String,java.lang.String>) - Mapping of key schema field names to deephaven table column names\n  :return: (io.deephaven.db.tables.Table) The live table where kafka events are ingested\n  \n*Overload 2*  \n  :param consumerProperties: (java.util.Properties) - Properties to configure this table and also to be passed to create the KafkaConsumer.\n  :param topic: (java.lang.String) - Kafka topic name.\n  :param partitionFilter: (java.util.function.IntPredicate) - A predicate returning true for the partitions to consume.\n  :param partitionToInitialOffset: (java.util.function.IntToLongFunction) - A function specifying the desired initial offset for each partition consumed.\n  :return: (io.deephaven.db.tables.Table) The resulting live table.\n  \n*Overload 3*  \n  :param kafkaConsumerProperties: java.util.Properties\n  :param topic: java.lang.String\n  :param partitionFilter: java.util.function.IntPredicate\n  :return: io.deephaven.db.tables.Table\n  \n*Overload 4*  \n  :param kafkaConsumerProperties: java.util.Properties\n  :param topic: java.lang.String\n  :return: io.deephaven.db.tables.Table",
  "fieldNameMappingFromParallelArrays": ":param fieldNames: java.lang.String[]\n:param columnNames: java.lang.String[]\n:return: java.util.function.Function<java.lang.String,java.lang.String>",
  "getAvroSchema": ":param schemaServerUrl: java.lang.String\n:param resourceName: java.lang.String\n:param version: java.lang.String\n:return: org.apache.avro.Schema",
  "partitionFilterFromArray": ":param partitions: int[]\n:return: java.util.function.IntPredicate",
  "partitionToOffsetFromParallelArrays": ":param partitions: int[]\n:param offsets: long[]\n:return: java.util.function.IntToLongFunction"
 },
 "path": "io.deephaven.kafka.KafkaTools",
 "typeName": "class"
}