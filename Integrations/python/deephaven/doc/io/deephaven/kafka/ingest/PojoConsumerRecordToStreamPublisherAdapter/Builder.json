{
 "className": "io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter$Builder",
 "methods": {
  "addColumnToKeyField": "Maps a column to a field in the key class\n\n:param column: (java.lang.String) - the column name in the output table\n:param field: (java.lang.String) - a field name in the key class\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "addColumnToKeyMethod": "Maps a column to a method in the key class\n\n:param column: (java.lang.String) - the column name in the output table\n:param method: (java.lang.String) - a method name in the key class\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "addColumnToSetter": "Maps a column to setter text in the compiled adapter class.\n\n The Kafka record will have the name \"record\", and can be referenced for example by:\n .addColumnToSetter(\"UserId\", \"((ksql.pageviews)record.value()).getUserid().toString()\")\n\n:param column: (java.lang.String) - the column name\n:param setter: (java.lang.String) - the setter text\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "addColumnToValueField": "Maps a column to a method in the value class\n\n:param column: (java.lang.String) - the column name in the output table\n:param field: (java.lang.String) - a method name in the value class\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "addColumnToValueMethod": "Maps a column to a method in the value class\n\n:param column: (java.lang.String) - the column name in the output table\n:param method: (java.lang.String) - a method name in the value class\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "allowUnmapped": "**Incompatible overloads text - text from the first overload:**\n\nIf set to true, unmapped columns are not an error.\n\n*Overload 1*  \n  :param allowUnmapped: (boolean) - should unmapped columns be ignored?\n  :return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder\n  \n*Overload 2*  \n  :param allowUnmapped: (java.lang.String) - the column name that should remain unmapped\n  :return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "caseInsensitiveSearch": "If set to true, a case insensitive search for column mappings is performed.\n\n:param caseInsensitiveSearch: (boolean) - should a case insensitive search for matching columns be performed?\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "kafkaPartitionColumnName": "Set the name of the column which stores the Kafka partition identifier of the record.\n\n:param kafkaPartitionColumnName: (java.lang.String) - the name of the column in the output table\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "keyClass": "Set the class to use for deserialized keys.\n\n:param keyClass: (java.lang.Class<?>) - the class for deserialized keys\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "offsetColumnName": "Set the name of the column which stores the Kafka offset of the record.\n\n:param offsetColumnName: (java.lang.String) - the name of the column in the output table\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "setPrintClassBody": ":param printClassBody: boolean\n:return: io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder",
  "timestampColumnName": "Set the name of the column which stores the Kafka timestamp of the record.\n\n:param timestampColumnName: (java.lang.String) - the name of the column in the output table\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder",
  "valueClass": "Set the class to use for deserialized values.\n\n:param valueClass: (java.lang.Class<?>) - the class for deserialized values\n:return: (io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder) this builder"
 },
 "path": "io.deephaven.kafka.ingest.PojoConsumerRecordToStreamPublisherAdapter.Builder",
 "text": "A builder for the PojoConsumerRecordToTableWriterAdapter.",
 "typeName": "class"
}