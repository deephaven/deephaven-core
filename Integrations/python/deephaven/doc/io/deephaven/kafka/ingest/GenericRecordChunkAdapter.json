{
 "className": "io.deephaven.kafka.ingest.GenericRecordChunkAdapter",
 "methods": {
  "make": "Create a GenericRecordChunkAdapter.\n\n:param definition: (io.deephaven.engine.table.TableDefinition) - the definition of the output table\n:param chunkTypeForIndex: (java.util.function.IntFunction<io.deephaven.chunk.ChunkType>) - a function from column index to chunk type\n:param columns: (java.util.Map<java.lang.String,java.lang.String>) - a map from Avro field names to Deephaven column names\n:param schema: (org.apache.avro.Schema) - the Avro schema for our input\n:param allowNulls: (boolean) - true if null records should be allowed, if false then an ISE is thrown\n:return: (io.deephaven.kafka.ingest.GenericRecordChunkAdapter) a GenericRecordChunkAdapter for the given definition and column mapping"
 },
 "path": "io.deephaven.kafka.ingest.GenericRecordChunkAdapter",
 "text": "Convert an Avro GenericRecord to Deephaven rows.\n \n Each GenericRecord produces a single row of output, according to the maps of Table column names to Avro field names\n for the keys and values.",
 "typeName": "class"
}