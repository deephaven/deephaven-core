{
 "className": "io.deephaven.kafka.publish.KeyOrValueSerializer",
 "methods": {
  "handleChunk": "Create a chunk of output keys or values that correspond to orderedKeys. The output chunks should be cached in the context for re-use, but the data returned in them should be functionally\n immutable and not rely on pooled or re-usable objects.\n\n:param context: (io.deephaven.kafka.publish.KeyOrValueSerializer.Context) - A KeyOrValueSerializer.Context created by makeContext(int)\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - The row keys to serialize\n:param previous: (boolean) - If previous row values should be used, as with row key removals\n:return: (io.deephaven.db.v2.sources.chunk.ObjectChunk<KeyOrValueSerializer.SERIALIZED_TYPE,io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of serialized data keys or values, with ObjectChunk.size() == orderedKeys.size()",
  "makeContext": "Create a context for calling handleChunk(Context, OrderedKeys, boolean).\n\n:param size: (int) - The maximum number of rows that will be serialized for each chunk\n:return: (io.deephaven.kafka.publish.KeyOrValueSerializer.Context) A Context for the KeyOrValueSerializer"
 },
 "path": "io.deephaven.kafka.publish.KeyOrValueSerializer",
 "text": "Chunk-oriented serializer that supplies keys or values for stream publishing.",
 "typeName": "interface"
}