{
 "className": "io.deephaven.kafka.publish.JsonKeyOrValueSerializer$Builder",
 "methods": {
  "autoValueMapping": "Enables or disables automatic value mapping (true by default).\n\n If auto value mapping is enabled, any column that was not defined [either by excludeColumn or mapColumn] is\n automatically mapped to a JSON field of the same name.\n\n:param autoValueMapping: (boolean) - should automatic value mapping be enabled\n:return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder",
  "buildFactory": "When implemented in a subordinate class, create the actual factory for this adapter.\n\n:return: (java.util.function.Function<io.deephaven.db.v2.DynamicTable,? extends io.deephaven.kafka.publish.JsonKeyOrValueSerializer>) A factory for objects of this type.",
  "excludeColumn": "Indicates that a column is unmapped, and therefore not included in the output. You may not exclude a column\n that has already been excluded or mapped.\n\n:param column: (java.lang.String) - name of the column in the output table\n:return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder",
  "ignoreMissingColumns": "Permit the builder to silently ignore any columns not specified. False by default. If auto value mapping is\n enabled, this has no effect.\n\n:param ignoreMissingColumns: (boolean) - True if the builder should ignore table columns with no specified behavior. false\n        if the builder should throw an exception if columns are found with no mapping.\n:return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder",
  "mapColumn": "**Incompatible overloads text - text from the first overload:**\n\nMap a Deephaven column to a specified output field. You may map multiple output fields from a single column.,\n but may only map a given field once.\n\n*Overload 1*  \n  :param column: (java.lang.String) - The name of the Deephaven column to export\n  :return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder\n  \n*Overload 2*  \n  :param column: (java.lang.String) - The name of the Deephaven column to export\n  :param field: (java.lang.String) - The name of the field to produce\n  :return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder",
  "nestedObjectDelimiter": "The delimiter used to generate nested output objects from column names.\n\n:param nestedObjectDelimiter: (java.lang.String) - the delimiter string/character.\n:return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder",
  "outputNulls": "Whether to output null values.\n\n:param outputNulls: (boolean) - to output nulls\n:return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder",
  "timestampFieldName": "Include a timestamp indicating when this data was processed.\n\n:param timestampFieldName: (java.lang.String) - The name of the field to show a timestamp, or null for no timestamp.\n:return: (io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder) this builder"
 },
 "path": "io.deephaven.kafka.publish.JsonKeyOrValueSerializer.Builder",
 "text": "Create a builder for processing Deephaven table data into string output",
 "typeName": "class"
}