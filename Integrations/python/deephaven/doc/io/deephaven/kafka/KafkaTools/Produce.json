{
 "className": "io.deephaven.kafka.KafkaTools$Produce",
 "methods": {
  "avroSpec": "**Incompatible overloads text - text from the first overload:**\n\nAvro spec from an Avro schmea. All columns with names matching schema field names are included.\n\n*Overload 1*  \n  :param schema: (org.apache.avro.Schema) - An Avro schema.\n  :param columnNames: (java.lang.String[]) - An array indicating the column name to use for each corresponding field in the schema, or\n          null if the schema field names are expected to map exactly to column names.\n  :param timestampFieldName: (java.lang.String) - If not null, include a field of the given name with a publication timestamp.\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 2*  \n  :param schema: (org.apache.avro.Schema) - An Avro schema.\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 3*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server\n  :param schemaVersion: (java.lang.String) - The version to fetch\n  :param columnNames: (java.lang.String[]) - An array indicating the column name to use for each corresponding field in the schema, or\n          null if the schema field names are expected to map exactly to column names.\n  :param timestampFieldName: (java.lang.String) - If not null, include a field of the given name with a publication timestamp.\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 4*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server\n  :param columnNames: (java.lang.String[]) - An array indicating the column name to use for each corresponding field in the schema, or\n          null if the schema field names are expected to map exactly to column names.\n  :param timestampFieldName: (java.lang.String) - If not null, include a field of the given name with a publication timestamp.\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 5*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server\n  :param schemaVersion: (java.lang.String) - The version to fetch\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A spec corresponding to the schema provided, where all columns with names matching schema field names\n           are included.\n  \n*Overload 6*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server.\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A spec corresponding to the schema provided, where all columns with names matching schema field names\n           are included.",
  "ignoreSpec": "Spec to explicitly ask\n consumeToTable to ignore either key or value.\n\n:return: io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec",
  "jsonSpec": "A JSON spec from a set of column names\n\n*Overload 1*  \n  :param columnNames: (java.lang.String[]) - An array including an entry for each column intended to be included in the JSON output. If\n          null, include all columns.\n  :param fieldNames: (java.lang.String[]) - An array parallel to columnNames, including an entry for each field name in JSON to map for\n          the corresponding column name in the columnNames array. If null, map columns to fields of the\n          same name.\n  :param nestedObjectDelimiter: (java.lang.String) - A string used to separate values in composite fields.\n  :param outputNulls: (boolean) - If false, omit fields with a null value.\n  :param timestampFieldName: (java.lang.String) - If not null, include a field of the given name with a publication timestamp.\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A JSON spec for the given inputs.\n  \n*Overload 2*  \n  :param columnNames: (java.lang.String[]) - An array including an entry for each column intended to be included in the JSON output. If\n          null, include all columns.\n  :param fieldNames: (java.lang.String[]) - An array parallel to columnNames, including an entry for each field name in JSON to map for\n          the corresponding column name in the columnNames array. If null, map columns to fields of the\n          same name.\n  :return: (io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec) A JSON spec for the given inputs.",
  "simpleSpec": ":param columnName: java.lang.String\n:return: io.deephaven.kafka.KafkaTools.Produce.KeyOrValueSpec"
 },
 "path": "io.deephaven.kafka.KafkaTools.Produce",
 "typeName": "class"
}