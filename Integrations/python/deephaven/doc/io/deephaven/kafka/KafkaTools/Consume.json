{
 "className": "io.deephaven.kafka.KafkaTools$Consume",
 "methods": {
  "avroSpec": "**Incompatible overloads text - text from the first overload:**\n\nAvro spec from an Avro schema.\n\n*Overload 1*  \n  :param schema: (org.apache.avro.Schema) - An Avro schema.\n  :param fieldNameToColumnName: (java.util.function.Function<java.lang.String,java.lang.String>) - A mapping specifying which Avro fields to include and what column name to use\n          for them; fields mapped to null are excluded.\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 2*  \n  :param schema: (org.apache.avro.Schema) - An Avro schema.\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 3*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server\n  :param schemaVersion: (java.lang.String) - The version to fetch\n  :param fieldNameToColumnName: (java.util.function.Function<java.lang.String,java.lang.String>) - A mapping specifying which Avro fields to include and what column name to use\n          for them; fields mapped to null are excluded.\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 4*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server\n  :param fieldNameToColumnName: (java.util.function.Function<java.lang.String,java.lang.String>) - A mapping specifying which Avro fields to include and what column name to use\n          for them; fields mapped to null are excluded.\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A spec corresponding to the schema provided.\n  \n*Overload 5*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server\n  :param schemaVersion: (java.lang.String) - The version to fetch\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A spec corresponding to the schema provided\n  \n*Overload 6*  \n  :param schemaName: (java.lang.String) - The registered name for the schema on Schema Server.\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A spec corresponding to the schema provided.",
  "ignoreSpec": "Spec to explicitly ask\n consumeToTable to ignore either key or value.\n\n:return: io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec",
  "jsonSpec": "**Incompatible overloads text - text from the first overload:**\n\nA JSON spec from a set of column definitions, with an specific mapping of JSON nodes to columns. JSON nodes\n can be specified as a string field name, or as a JSON Pointer string (see RFC 6901, ISSN: 2070-1721).\n\n*Overload 1*  \n  :param columnDefinitions: (io.deephaven.engine.table.ColumnDefinition<?>[]) - An array of column definitions for specifying the table to be created\n  :param fieldToColumnName: (java.util.Map<java.lang.String,java.lang.String>) - A mapping from JSON field names or JSON Pointer strings to column names provided in\n          the definition. For each field key, if it starts with '/' it is assumed to be a JSON Pointer (e.g.,\n          \"/parent/nested\" represents a pointer to the nested field \"nested\" inside the toplevel\n          field \"parent\"). Fields not included will be ignored\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A JSON spec for the given inputs\n  \n*Overload 2*  \n  :param columnDefinitions: (io.deephaven.engine.table.ColumnDefinition<?>[]) - An array of column definitions for specifying the table to be created. The column\n          names should map one to JSON fields expected; is not necessary to include all fields from the expected\n          JSON, any fields not included would be ignored.\n  :return: (io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec) A JSON spec for the given inputs.",
  "simpleSpec": "The types for key or value are either specified in the properties as \"key.type\" or \"value.type\", or deduced\n from the serializer classes for key or value in the provided Properties object.\n\n*Overload 1*  \n  :param columnName: java.lang.String\n  :param dataType: java.lang.Class<?>\n  :return: io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec\n  \n*Overload 2*  \n  :param columnName: java.lang.String\n  :return: io.deephaven.kafka.KafkaTools.Consume.KeyOrValueSpec"
 },
 "path": "io.deephaven.kafka.KafkaTools.Consume",
 "typeName": "class"
}