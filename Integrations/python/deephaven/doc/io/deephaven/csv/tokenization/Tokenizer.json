{
 "className": "io.deephaven.csv.tokenization.Tokenizer",
 "methods": {
  "tryParseBMPChar": "Try to parse the input as a single character in Unicode's Basic Multilingual Plane. This means the character will\n fit in a single Java \"char\" without requiring UTF-16 surrogate pairs. Unicode characters that meet this criterion\n are either in the range U+0000 through U+D7FF, or the range U+E000 through U+FFFF.\n\n:param bs: (io.deephaven.csv.containers.ByteSlice) - The input text. This slice is *NOT* modified, regardless of success or failure.\n:param result: (org.apache.commons.lang3.mutable.MutableInt) - Contains the parsed value if this method returns true. Otherwise, the contents are unspecified.\n:return: (boolean) true if the input was successfully parsed. Otherwise, false. The return value is provided in a\n         MutableInt because Apache doesn't provide a MutableChar.",
  "tryParseBoolean": "Try to parse the input as a boolean.\n\n:param bs: (io.deephaven.csv.containers.ByteSlice) - The input text. This slice is *NOT* modified, regardless of success or failure.\n:param result: (org.apache.commons.lang3.mutable.MutableBoolean) - Contains the parsed value if this method returns true. Otherwise, the contents are unspecified.\n:return: (boolean) true if the input was successfully parsed. Otherwise, false.",
  "tryParseDateTime": "Try to parse the input as a Deephaven DateTime value (represented as nanoseconds since the epoch).\n\n:param bs: (io.deephaven.csv.containers.ByteSlice) - The input text. This slice is *NOT* modified, regardless of success or failure.\n:param result: (org.apache.commons.lang3.mutable.MutableLong) - Contains the parsed value if this method returns true. Otherwise, the contents are unspecified.\n:return: (boolean) true if bs was successfully parsed as a Deephaven DateTime. Otherwise, false.",
  "tryParseDouble": "Try to parse the input as a double.\n\n:param bs: (io.deephaven.csv.containers.ByteSlice) - The input text. This slice is *NOT* modified, regardless of success or failure.\n:param result: (org.apache.commons.lang3.mutable.MutableDouble) - Contains the parsed value if this method returns true. Otherwise, the contents are unspecified.\n:return: (boolean) true if bs was successfully parsed as a double. Otherwise, false.",
  "tryParseFloatStrict": "Try to parse the input as a float, using Float.parseFloat(java.lang.String). Most code will prefer to use\n tryParseDouble(io.deephaven.csv.containers.ByteSlice, org.apache.commons.lang3.mutable.MutableDouble) because it is much faster. This method exists for callers who want the exact\n semantics of Java's Float.parseFloat(java.lang.String) and are willing to pay the performance cost (both of the toString()\n and of the slower parser).\n\n:param bs: (io.deephaven.csv.containers.ByteSlice) - The input text. This slice is *NOT* modified, regardless of success or failure.\n:param result: (org.apache.commons.lang3.mutable.MutableFloat) - Contains the parsed value if this method returns true. Otherwise, the contents are unspecified.\n:return: (boolean) true if bs was successfully parsed as a float. Otherwise, false.",
  "tryParseLong": "Try to parse the input as a long.\n\n:param bs: (io.deephaven.csv.containers.ByteSlice) - The input text. This slice is *NOT* modified, regardless of success or failure.\n:param result: (org.apache.commons.lang3.mutable.MutableLong) - Contains the parsed value if this method returns true. Otherwise, the contents are unspecified.\n:return: (boolean) true if the input was successfully parsed. Otherwise, false."
 },
 "path": "io.deephaven.csv.tokenization.Tokenizer",
 "text": "This class provides a variety of methods to efficiently parse various low-level types like booleans, longs, doubles,\n and datetimes.",
 "typeName": "class"
}