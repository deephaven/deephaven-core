{
 "className": "io.deephaven.csv.reading.ParseInputToDenseStorage",
 "methods": {
  "doit": "Take cell text (parsed by the CellGrabber), and feed them to the various DenseStorageWriter\n classes.\n\n:param optionalFirstDataRow: (byte[][]) - If not null, this is the first row of data from the file, which the caller had to\n        peek at in order to know the number of columns in the file.\n:param nullValueLiteral: (java.lang.String) - The configured null value literal. This is used for providing the null value literal to\n        the downstream processing code (namely the ParseDenseStorageToColumn code).\n:param grabber: (io.deephaven.csv.reading.CellGrabber) - The CellGrabber which does all the CSV format handling (delimiters, quotes, etc).\n:param dsws: (io.deephaven.csv.densestorage.DenseStorageWriter[]) - The array of DenseStorageWriters, one for each column. As a special case, if a given\n        DenseStorageWriter is null, then instead of passing data to it, we confirm that the data is the\n        empty string and then just drop the data. This is used to handle input files that have a trailing empty\n        column on the right.\n:return: (long) The number of data rows in the input (i.e. not including headers or strings split across multiple lines)."
 },
 "path": "io.deephaven.csv.reading.ParseInputToDenseStorage",
 "text": "The job of this class is to take the input text, parse the CSV format (dealing with quoting, escaping, field\n delimiters, and line delimiters) in order to break it into columns of cells (where a cell just contains uninterpreted\n text... we haven't yet tried to parse into types yet), and to feed each of those columns of cells into its own\n DenseStorageWriter. On the reading side, there is a DenseStorageReader paired with every\n DenseStorageWriter and its job is to pull the data back out and have it processed by the\n ParseDenseStorageToColumn class. The job of that class is to do pick the most appropriate parser, typically\n by doing type inference, and parse the text into typed data. The reason for all this separation is that the\n DenseStorageReader and ParseDenseStorageToColumn classes can run concurrently for each column.",
 "typeName": "class"
}