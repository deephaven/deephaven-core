{
 "className": "io.deephaven.csv.CsvSpecs$Builder",
 "methods": {
  "addAllHeaders": ":param headers: java.lang.Iterable<java.lang.String>\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "addHeaders": ":param headers: java.lang.String...\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "build": ":return: io.deephaven.csv.CsvSpecs",
  "concurrent": ":param async: boolean\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "delimiter": ":param delimiter: char\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "hasHeaderRow": ":param hasHeaderRow: boolean\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "header": ":param header: io.deephaven.qst.table.TableHeader\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "ignoreSurroundingSpaces": ":param ignoreSurroundingSpaces: boolean\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "inference": ":param inferenceSpecs: io.deephaven.csv.InferenceSpecs\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "nullValueLiteral": ":param nullValueLiteral: java.lang.String\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "putHeaderForIndex": ":param index: int\n:param header: java.lang.String\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "putNullValueLiteralForIndex": ":param index: int\n:param nullValueLiteral: java.lang.String\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "putNullValueLiteralForName": ":param columnName: java.lang.String\n:param nullValueLiteral: java.lang.String\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "putParserForIndex": ":param index: int\n:param parser: io.deephaven.csv.parsers.Parser<?>\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "putParserForName": ":param columnName: java.lang.String\n:param parser: io.deephaven.csv.parsers.Parser<?>\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "quote": ":param quote: char\n:return: io.deephaven.csv.CsvSpecs.Builder",
  "trim": ":param trim: boolean\n:return: io.deephaven.csv.CsvSpecs.Builder"
 },
 "path": "io.deephaven.csv.CsvSpecs.Builder",
 "typeName": "interface"
}