{
 "className": "io.deephaven.csv.InferenceSpecs",
 "methods": {
  "builder": "Creates a builder for InferenceSpecs.\n\n:return: (io.deephaven.csv.InferenceSpecs.Builder) the builder",
  "infer": "Finds the best parser by checking and eliminating parsers based on Parser.canParse(String). The returned\n parser will be the lowest indexed parser remaining based on the order specified in parsers().\n\n \n When all values are null, the returned value will be an optional that wraps onNullParser().\n\n:param values: (java.util.Iterator<java.lang.String>) - the values to be inferred\n:return: (java.util.Optional<io.deephaven.csv.Parser<?>>) the best parser, if any",
  "limitToType": "Filters out all parsers that do not have type.\n\n \nonNullParser() will be set to the first parser that matches type.\n\n:param type: (io.deephaven.qst.type.Type<?>) - the type to limit to\n:return: (io.deephaven.csv.InferenceSpecs) the new inference based on type",
  "minimal": "The \"minimal\" inference.\n\n \n Contains the following parsers:\n\n \n* Parser.INSTANT\n* Parser.LONG\n* Parser.DOUBLE\n* Parser.BOOL\n* Parser.STRING\n* Parser.BYTE\n* Parser.SHORT\n* Parser.INT\n* Parser.FLOAT\n* Parser.CHAR\n\n\n Uses the default onNullParser().\n\n \n Note: the byte, short, int, float, and char parsers are only relevant when the appropriate\n limitToType(Type) is invoked.\n\n:return: (io.deephaven.csv.InferenceSpecs) the minimal inference",
  "onNullParser": "The parser to return when all values are null. May be null.\n\n \n By default, returns a Parser.STRING.\n\n:return: (io.deephaven.csv.Parser<?>) the on-null values parser",
  "parsers": "The parsers, in preference-based order.\n\n:return: (java.util.List<io.deephaven.csv.Parser<?>>) the parsers",
  "standard": "The \"standard\" inference, does not parse floats or bytes.\n\n \n Contains the following parsers:\n\n \n* Parser.INSTANT\n* Parser.SHORT\n* Parser.INT\n* Parser.LONG\n* Parser.DOUBLE\n* Parser.BOOL\n* Parser.CHAR\n* Parser.STRING\n* Parser.BYTE\n* Parser.FLOAT\n\n\n Uses the default onNullParser().\n\n \n Note: the byte and float parsers are only relevant when the appropriate limitToType(Type) is invoked.\n\n:return: (io.deephaven.csv.InferenceSpecs) the standard inference",
  "standardTimes": "The standard parsers with additional Instant-based parsing.\n\n \n Contains the following parsers:\n\n \n* Parser.INSTANT\n* Parser.INSTANT_LEGACY\n* Parser.epochAny21stCentury(Parser), with Parser.LONG\n* Parser.SHORT\n* Parser.INT\n* Parser.LONG\n* Parser.DOUBLE\n* Parser.BOOL\n* Parser.CHAR\n* Parser.STRING\n* Parser.BYTE\n* Parser.FLOAT\n\n\n Uses the default onNullParser().\n\n \n Note: the byte and float parsers are only relevant when the appropriate limitToType(Type) is invoked.\n\n:return: (io.deephaven.csv.InferenceSpecs) the standard times inference",
  "strings": "The string-only inference.\n\n \n Contains the following parsers:\n\n \n* Parser.STRING\n* Parser.INSTANT\n* Parser.SHORT\n* Parser.INT\n* Parser.LONG\n* Parser.DOUBLE\n* Parser.BOOL\n* Parser.CHAR\n* Parser.BYTE\n* Parser.FLOAT\n\n\n Uses the default onNullParser().\n\n \n Note: the non-string parsers are only relevant when the appropriate limitToType(Type) is invoked.\n\n:return: (io.deephaven.csv.InferenceSpecs) the string-only inference"
 },
 "path": "io.deephaven.csv.InferenceSpecs",
 "text": "Inference specifications contains the configuration and logic for inferring an acceptable parser from string values.",
 "typeName": "class"
}