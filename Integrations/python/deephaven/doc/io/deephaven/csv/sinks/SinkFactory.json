{
 "className": "io.deephaven.csv.sinks.SinkFactory",
 "methods": {
  "forBooleanAsByte": "Provide a Sink for the boolean (as byte) representation.\n\n:return: io.deephaven.csv.sinks.Sink<byte[]>",
  "forByte": "Provide a Sink and a Source for the byte representation.\n\n:param source: org.apache.commons.lang3.mutable.MutableObject<io.deephaven.csv.sinks.Source<byte[]>>\n:return: io.deephaven.csv.sinks.Sink<byte[]>",
  "forChar": "Provide a Sink for the char representation.\n\n:return: io.deephaven.csv.sinks.Sink<char[]>",
  "forDateTimeAsLong": "Provide a Sink for the DateTime (as long) representation.\n\n:return: io.deephaven.csv.sinks.Sink<long[]>",
  "forDouble": "Provide a Sink for the double representation.\n\n:return: io.deephaven.csv.sinks.Sink<double[]>",
  "forFloat": "Provide a Sink for the float representation.\n\n:return: io.deephaven.csv.sinks.Sink<float[]>",
  "forInt": "Provide a Sink and a Source for the int representation.\n\n:param source: org.apache.commons.lang3.mutable.MutableObject<io.deephaven.csv.sinks.Source<int[]>>\n:return: io.deephaven.csv.sinks.Sink<int[]>",
  "forLong": "Provide a Sink and a Source for the long representation.\n\n:param source: org.apache.commons.lang3.mutable.MutableObject<io.deephaven.csv.sinks.Source<long[]>>\n:return: io.deephaven.csv.sinks.Sink<long[]>",
  "forShort": "Provide a Sink and a Source for the short representation.\n\n:param source: org.apache.commons.lang3.mutable.MutableObject<io.deephaven.csv.sinks.Source<short[]>>\n:return: io.deephaven.csv.sinks.Sink<short[]>",
  "forString": "Provide a Sink for the String representation.\n\n:return: io.deephaven.csv.sinks.Sink<java.lang.String[]>",
  "forTimestampAsLong": "Provide a Sink for the Timestamp (as long) representation.\n\n:return: io.deephaven.csv.sinks.Sink<long[]>",
  "of": ":param byteSinkSupplier: java.util.function.Supplier<TBYTESINK>\n:param reservedByte: java.lang.Byte\n:param shortSinkSupplier: java.util.function.Supplier<TSHORTSINK>\n:param reservedShort: java.lang.Short\n:param intSinkSupplier: java.util.function.Supplier<TINTSINK>\n:param reservedInt: java.lang.Integer\n:param longSinkSupplier: java.util.function.Supplier<TLONGSINK>\n:param reservedLong: java.lang.Long\n:param floatSinkSupplier: java.util.function.Supplier<io.deephaven.csv.sinks.Sink<float[]>>\n:param reservedFloat: java.lang.Float\n:param doubleSinkSupplier: java.util.function.Supplier<io.deephaven.csv.sinks.Sink<double[]>>\n:param reservedDouble: java.lang.Double\n:param booleanAsByteSinkSupplier: java.util.function.Supplier<io.deephaven.csv.sinks.Sink<byte[]>>\n:param charSinkSupplier: java.util.function.Supplier<io.deephaven.csv.sinks.Sink<char[]>>\n:param reservedChar: java.lang.Character\n:param stringSinkSupplier: java.util.function.Supplier<io.deephaven.csv.sinks.Sink<java.lang.String[]>>\n:param reservedString: java.lang.String\n:param dateTimeAsLongSinkSupplier: java.util.function.Supplier<io.deephaven.csv.sinks.Sink<long[]>>\n:param reservedDateTimeAsLong: java.lang.Long\n:param timestampAsLongSinkSupplier: java.util.function.Supplier<io.deephaven.csv.sinks.Sink<long[]>>\n:param reservedTimestampAsLong: java.lang.Long\n:return: io.deephaven.csv.sinks.SinkFactory",
  "reservedByte": "The optional reserved value for the byte representation.\n\n:return: java.lang.Byte",
  "reservedChar": "The optional reserved value for the char representation.\n\n:return: java.lang.Character",
  "reservedDateTimeAsLong": "The optional reserved value for the DateTime (as long) representation.\n\n:return: java.lang.Long",
  "reservedDouble": "The optional reserved value for the double representation.\n\n:return: java.lang.Double",
  "reservedFloat": "The optional reserved value for the float representation.\n\n:return: java.lang.Float",
  "reservedInt": "The optional reserved value for the int representation.\n\n:return: java.lang.Integer",
  "reservedLong": "The optional reserved value for the long representation.\n\n:return: java.lang.Long",
  "reservedShort": "The optional reserved value for the short representation.\n\n:return: java.lang.Short",
  "reservedString": "The optional reserved value for the String representation.\n\n:return: java.lang.String",
  "reservedTimestampAsLong": "The optional reserved value for the Timestamp (as long) representation.\n\n:return: java.lang.Long"
 },
 "path": "io.deephaven.csv.sinks.SinkFactory",
 "text": "An interface which allows the CsvReader to write to column data structures whose details it is unaware of. Using this\n interface, the caller provides factory methods that make a Sink<TARRAY> for the corresponding data type. The\n integral parsers (byte, short, int, long) also provide a Source<TARRAY> via an out parameter, because the\n inference algorithm wants a fast path for reading back data it has already written. This is used in the case where\n the algorithm makes some forward progress on a numeric type but then decides to fall back to a wider numeric type.\n The system also supports more general kinds of fallback (e.g. from int to string), but in cases like that the system\n just reparses the original input text rather than asking the collection to read the data back.\n\n For example, if the system has parsed N shorts for a given column and then encounters an int value that doesn't fit\n in a short (or, alternatively, it encounters a reserved short and needs to reject it), it will read back the shorts\n already written and write them to an integer sink instead.\n\n The methods allow the caller to specify \"reserved\" values for types where it makes sense to have one. If a reserved\n value is encountered, the type inference process will move to the next wider type and try again. In typical practice\n this is used in systems that have a reserved sentinel value that represents null. For example, for a byte column, a\n system might reserve the value ((byte)-128) to represent the null byte, yet allow ((short)-128) to be a permissible\n short value. Likewise a system might reserve the value ((short)-32768) to represent the null short, but allow\n ((int)-32768) to be a permissible int value.",
 "typeName": "interface"
}