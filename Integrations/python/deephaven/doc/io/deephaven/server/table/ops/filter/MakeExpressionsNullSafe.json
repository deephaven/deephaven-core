{
 "className": "io.deephaven.server.table.ops.filter.MakeExpressionsNullSafe",
 "methods": {
  "exec": ":param filter: io.deephaven.proto.backplane.grpc.Condition\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "onComparison": ":param operation: io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation\n:param caseSensitivity: io.deephaven.proto.backplane.grpc.CaseSensitivity\n:param lhs: io.deephaven.proto.backplane.grpc.Value\n:param rhs: io.deephaven.proto.backplane.grpc.Value\n:return: io.deephaven.proto.backplane.grpc.Condition"
 },
 "path": "io.deephaven.server.table.ops.filter.MakeExpressionsNullSafe",
 "text": "Rewrites logical expressions into an actual version that does what would be expected. Right now this is just\n equalsIgnoreCase and its negation, to support null values.\n\n Note that some of the branches here should not be needed (such as reference.equalsIgnoreCase(\"literal\")) as they\n should be replaced by a MatchFilter instead, but this may not be fully implemented, so we are defensively leaving\n these cases in place for now.",
 "typeName": "class"
}