{
 "className": "io.deephaven.server.session.SessionService",
 "methods": {
  "addTerminationListener": "Add a listener who receives a single notification when this process is exiting and yet able to communicate with\n the observer.\n\n:param session: (io.deephaven.server.session.SessionState) - the session the observer belongs to\n:param responseObserver: (io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.TerminationNotificationResponse>) - the observer to notify",
  "closeSession": "Reduces the liveness of the session.\n\n:param session: (io.deephaven.server.session.SessionState) - the session to close",
  "getCurrentSession": "Lookup a session via the SessionServiceGrpcImpl.SESSION_CONTEXT_KEY. This method is only valid in the context of\n the original calling gRPC thread.\n\n:return: (io.deephaven.server.session.SessionState) the session attached to this gRPC request",
  "getExpirationDelayMs": ":return: (long) the configured token duration in milliseconds",
  "getOptionalSession": "Lookup a session via the SessionServiceGrpcImpl.SESSION_CONTEXT_KEY. This method is only valid in the context of\n the original calling gRPC thread.\n\n:return: (io.deephaven.server.session.SessionState) the session attached to this gRPC request; null if no session is established",
  "getSessionForToken": "Lookup a session by token.\n\n:param token: (java.util.UUID) - the session secret to look for\n:return: (io.deephaven.server.session.SessionState) the session or null if the session is invalid",
  "newSession": "Create a new session object for the provided auth context.\n\n:param authContext: (io.deephaven.util.auth.AuthContext) - the auth context of the session\n:return: (io.deephaven.server.session.SessionState) a new session independent of all other existing sessions",
  "refreshToken": "If enough time has passed since the last token run, rotate to a new token and reset the expiration deadline.\n\n:param session: (io.deephaven.server.session.SessionState) - the session to run\n:return: (io.deephaven.server.session.SessionService.TokenExpiration) the most recent token expiration"
 },
 "path": "io.deephaven.server.session.SessionService",
 "typeName": "class"
}