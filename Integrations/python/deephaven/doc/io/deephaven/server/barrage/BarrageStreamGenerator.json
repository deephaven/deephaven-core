{
 "className": "io.deephaven.server.barrage.BarrageStreamGenerator",
 "methods": {
  "getMessage": ":return: (io.deephaven.engine.table.impl.util.BarrageMessage) the BarrageMessage that this generator is operating on",
  "getSnapshotView": "**Incompatible overloads text - text from the first overload:**\n\nObtain a Full-Snapshot View of this StreamGenerator that can be sent to a single snapshot requestor.\n\n*Overload 1*  \n  :param options: (io.deephaven.extensions.barrage.BarrageSnapshotOptions) - serialization options for this specific view\n  :param viewport: (io.deephaven.engine.rowset.RowSet) - is the position-space viewport\n  :param reverseViewport: (boolean) - is the viewport reversed (relative to end of table instead of beginning)\n  :param keyspaceViewport: (io.deephaven.engine.rowset.RowSet) - is the key-space viewport\n  :param snapshotColumns: (java.util.BitSet) - are the columns subscribed for this view\n  :return: (io.deephaven.server.barrage.BarrageStreamGenerator.SnapshotView) a MessageView filtered by the snapshot properties that can be sent to that subscriber\n  \n*Overload 2*  \n  :param options: (io.deephaven.extensions.barrage.BarrageSnapshotOptions) - serialization options for this specific view\n  :return: (io.deephaven.server.barrage.BarrageStreamGenerator.SnapshotView) a MessageView filtered by the snapshot properties that can be sent to that subscriber",
  "getSubView": "**Incompatible overloads text - text from the first overload:**\n\nObtain a Full-Subscription View of this StreamGenerator that can be sent to a single subscriber.\n\n*Overload 1*  \n  :param options: (io.deephaven.extensions.barrage.BarrageSubscriptionOptions) - serialization options for this specific view\n  :param isInitialSnapshot: (boolean) - indicates whether or not this is the first snapshot for the listener\n  :param viewport: (io.deephaven.engine.rowset.RowSet) - is the position-space viewport\n  :param reverseViewport: (boolean) - is the viewport reversed (relative to end of table instead of beginning)\n  :param keyspaceViewport: (io.deephaven.engine.rowset.RowSet) - is the key-space viewport\n  :param subscribedColumns: (java.util.BitSet) - are the columns subscribed for this view\n  :return: (io.deephaven.server.barrage.BarrageStreamGenerator.SubView) a MessageView filtered by the subscription properties that can be sent to that subscriber\n  \n*Overload 2*  \n  :param options: (io.deephaven.extensions.barrage.BarrageSubscriptionOptions) - serialization options for this specific view\n  :param isInitialSnapshot: (boolean) - indicates whether or not this is the first snapshot for the listener\n  :return: (io.deephaven.server.barrage.BarrageStreamGenerator.SubView) a MessageView filtered by the subscription properties that can be sent to that subscriber"
 },
 "path": "io.deephaven.server.barrage.BarrageStreamGenerator",
 "typeName": "class"
}