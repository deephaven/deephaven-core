{
 "className": "io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc$BrowserFlightServiceFutureStub",
 "methods": {
  "nextDoExchange": ":param request: org.apache.arrow.flight.impl.Flight.FlightData\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "nextDoPut": ":param request: org.apache.arrow.flight.impl.Flight.FlightData\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "nextHandshake": ":param request: org.apache.arrow.flight.impl.Flight.HandshakeRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>"
 },
 "path": "io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc.BrowserFlightServiceFutureStub",
 "text": "A flight js service is a (non-proper) extension of arrow flight service\n that augments existing client-streaming (or bidirectional streaming) methods\n with a pair that can be used to simulate a client stream over unary requests.",
 "typeName": "class"
}