{
 "className": "io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc",
 "methods": {
  "getNextDoExchangeMethod": ":return: io.grpc.MethodDescriptor<org.apache.arrow.flight.impl.Flight.FlightData,io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "getNextDoPutMethod": ":return: io.grpc.MethodDescriptor<org.apache.arrow.flight.impl.Flight.FlightData,io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "getNextHandshakeMethod": ":return: io.grpc.MethodDescriptor<org.apache.arrow.flight.impl.Flight.HandshakeRequest,io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "getOpenDoExchangeMethod": ":return: io.grpc.MethodDescriptor<org.apache.arrow.flight.impl.Flight.FlightData,org.apache.arrow.flight.impl.Flight.FlightData>",
  "getOpenDoPutMethod": ":return: io.grpc.MethodDescriptor<org.apache.arrow.flight.impl.Flight.FlightData,org.apache.arrow.flight.impl.Flight.PutResult>",
  "getOpenHandshakeMethod": ":return: io.grpc.MethodDescriptor<org.apache.arrow.flight.impl.Flight.HandshakeRequest,org.apache.arrow.flight.impl.Flight.HandshakeResponse>",
  "getServiceDescriptor": ":return: io.grpc.ServiceDescriptor",
  "newBlockingStub": "Creates a new blocking-style stub that supports unary and streaming output calls on the service\n\n:param channel: io.grpc.Channel\n:return: io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc.BrowserFlightServiceBlockingStub",
  "newFutureStub": "Creates a new ListenableFuture-style stub that supports unary calls on the service\n\n:param channel: io.grpc.Channel\n:return: io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc.BrowserFlightServiceFutureStub",
  "newStub": "Creates a new async stub that supports all call types for the service\n\n:param channel: io.grpc.Channel\n:return: io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc.BrowserFlightServiceStub"
 },
 "path": "io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc",
 "text": "A flight js service is a (non-proper) extension of arrow flight service\n that augments existing client-streaming (or bidirectional streaming) methods\n with a pair that can be used to simulate a client stream over unary requests.",
 "typeName": "class"
}