{
 "className": "io.deephaven.libs.GroovyStaticImports",
 "methods": {
  "abs": "*Overload 1*  \n  :param value: byte\n  :return: byte\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: float\n  \n*Overload 4*  \n  :param value: int\n  :return: int\n  \n*Overload 5*  \n  :param value: long\n  :return: long\n  \n*Overload 6*  \n  :param value: short\n  :return: short",
  "absAvg": "*Overload 1*  \n  :param values: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: double\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: double\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: double\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: double\n  \n*Overload 12*  \n  :param values: short[]\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double",
  "acos": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "and": "*Overload 1*  \n  :param values: java.lang.Boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 2*  \n  :param values: boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 3*  \n  :param values: io.deephaven.vector.ObjectVector<java.lang.Boolean>\n  :return: java.lang.Boolean\n  \n*Overload 4*  \n  :param values: java.lang.Boolean[]\n  :param nullValue: java.lang.Boolean\n  :return: java.lang.Boolean\n  \n*Overload 5*  \n  :param values: io.deephaven.vector.ObjectVector<java.lang.Boolean>\n  :param nullValue: java.lang.Boolean\n  :return: java.lang.Boolean",
  "array": "*Overload 1*  \n  :param values: byte[]\n  :return: io.deephaven.vector.ByteVector\n  \n*Overload 2*  \n  :param values: char[]\n  :return: io.deephaven.vector.CharVector\n  \n*Overload 3*  \n  :param values: double[]\n  :return: io.deephaven.vector.DoubleVector\n  \n*Overload 4*  \n  :param values: float[]\n  :return: io.deephaven.vector.FloatVector\n  \n*Overload 5*  \n  :param values: int[]\n  :return: io.deephaven.vector.IntVector\n  \n*Overload 6*  \n  :param values: long[]\n  :return: io.deephaven.vector.LongVector\n  \n*Overload 7*  \n  :param values: java.lang.Boolean[]\n  :return: io.deephaven.vector.BooleanVector\n  \n*Overload 8*  \n  :param values: short[]\n  :return: io.deephaven.vector.ShortVector",
  "asin": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "atan": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "avg": "*Overload 1*  \n  :param values: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: double\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: double\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: double\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: double\n  \n*Overload 12*  \n  :param values: short[]\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double",
  "binSearchIndex": "*Overload 1*  \n  :param values: byte[]\n  :param key: byte\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :param key: double\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :param key: float\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :param key: int\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :param key: long\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 6*  \n  :param values: short[]\n  :param key: short\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.ByteVector\n  :param key: byte\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.DoubleVector\n  :param key: double\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.FloatVector\n  :param key: float\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.IntVector\n  :param key: int\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.LongVector\n  :param key: long\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.ShortVector\n  :param key: short\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 13*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :param key: T\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int",
  "castDouble": "*Overload 1*  \n  :param values: byte[]\n  :return: double[]\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double[]\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double[]\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double[]\n  \n*Overload 6*  \n  :param values: short[]\n  :return: double[]\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double[]\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double[]\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double[]\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double[]\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double[]\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double[]",
  "castLong": "*Overload 1*  \n  :param values: byte[]\n  :return: long[]\n  \n*Overload 2*  \n  :param values: int[]\n  :return: long[]\n  \n*Overload 3*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 4*  \n  :param values: short[]\n  :return: long[]\n  \n*Overload 5*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: long[]\n  \n*Overload 6*  \n  :param values: io.deephaven.vector.IntVector\n  :return: long[]\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long[]\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: long[]",
  "ceil": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "clamp": "*Overload 1*  \n  :param value: byte\n  :param min: byte\n  :param max: byte\n  :return: byte\n  \n*Overload 2*  \n  :param value: double\n  :param min: double\n  :param max: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :param min: float\n  :param max: float\n  :return: float\n  \n*Overload 4*  \n  :param value: int\n  :param min: int\n  :param max: int\n  :return: int\n  \n*Overload 5*  \n  :param value: long\n  :param min: long\n  :param max: long\n  :return: long\n  \n*Overload 6*  \n  :param value: short\n  :param min: short\n  :param max: short\n  :return: short",
  "concat": "*Overload 1*  \n  :param values: io.deephaven.vector.ByteVector[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param values: io.deephaven.vector.CharVector[]\n  :return: char[]\n  \n*Overload 3*  \n  :param values: io.deephaven.vector.DoubleVector[]\n  :return: double[]\n  \n*Overload 4*  \n  :param values: io.deephaven.vector.FloatVector[]\n  :return: float[]\n  \n*Overload 5*  \n  :param values: io.deephaven.vector.IntVector[]\n  :return: int[]\n  \n*Overload 6*  \n  :param values: io.deephaven.vector.LongVector[]\n  :return: long[]\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.ShortVector[]\n  :return: short[]\n  \n*Overload 8*  \n  :param values: byte[][]\n  :return: byte[]\n  \n*Overload 9*  \n  :param values: char[][]\n  :return: char[]\n  \n*Overload 10*  \n  :param values: double[][]\n  :return: double[]\n  \n*Overload 11*  \n  :param values: float[][]\n  :return: float[]\n  \n*Overload 12*  \n  :param values: int[][]\n  :return: int[]\n  \n*Overload 13*  \n  :param values: long[][]\n  :return: long[]\n  \n*Overload 14*  \n  :param values: short[][]\n  :return: short[]",
  "contains": ":param target: java.lang.String\n:param sequence: java.lang.CharSequence\n:return: boolean",
  "containsNonNormal": "*Overload 1*  \n  :param values: double[]\n  :return: boolean\n  \n*Overload 2*  \n  :param values: float[]\n  :return: boolean\n  \n*Overload 3*  \n  :param values: java.lang.Double[]\n  :return: boolean\n  \n*Overload 4*  \n  :param values: java.lang.Float[]\n  :return: boolean",
  "cor": "*Overload 1*  \n  :param values0: byte[]\n  :param values1: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values0: byte[]\n  :param values1: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 3*  \n  :param values0: double[]\n  :param values1: double[]\n  :return: double\n  \n*Overload 4*  \n  :param values0: double[]\n  :param values1: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 5*  \n  :param values0: float[]\n  :param values1: float[]\n  :return: double\n  \n*Overload 6*  \n  :param values0: float[]\n  :param values1: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 7*  \n  :param values0: int[]\n  :param values1: int[]\n  :return: double\n  \n*Overload 8*  \n  :param values0: int[]\n  :param values1: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 9*  \n  :param values0: long[]\n  :param values1: long[]\n  :return: double\n  \n*Overload 10*  \n  :param values0: long[]\n  :param values1: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values0: short[]\n  :param values1: short[]\n  :return: double\n  \n*Overload 12*  \n  :param values0: short[]\n  :param values1: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 13*  \n  :param values0: io.deephaven.vector.ByteVector\n  :param values1: byte[]\n  :return: double\n  \n*Overload 14*  \n  :param values0: io.deephaven.vector.ByteVector\n  :param values1: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 15*  \n  :param values0: io.deephaven.vector.DoubleVector\n  :param values1: double[]\n  :return: double\n  \n*Overload 16*  \n  :param values0: io.deephaven.vector.DoubleVector\n  :param values1: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values0: io.deephaven.vector.FloatVector\n  :param values1: float[]\n  :return: double\n  \n*Overload 18*  \n  :param values0: io.deephaven.vector.FloatVector\n  :param values1: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 19*  \n  :param values0: io.deephaven.vector.IntVector\n  :param values1: int[]\n  :return: double\n  \n*Overload 20*  \n  :param values0: io.deephaven.vector.IntVector\n  :param values1: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 21*  \n  :param values0: io.deephaven.vector.LongVector\n  :param values1: long[]\n  :return: double\n  \n*Overload 22*  \n  :param values0: io.deephaven.vector.LongVector\n  :param values1: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 23*  \n  :param values0: io.deephaven.vector.ShortVector\n  :param values1: short[]\n  :return: double\n  \n*Overload 24*  \n  :param values0: io.deephaven.vector.ShortVector\n  :param values1: io.deephaven.vector.ShortVector\n  :return: double",
  "cos": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "count": "*Overload 1*  \n  :param values: byte[]\n  :return: int\n  \n*Overload 2*  \n  :param values: char[]\n  :return: int\n  \n*Overload 3*  \n  :param values: double[]\n  :return: int\n  \n*Overload 4*  \n  :param values: float[]\n  :return: int\n  \n*Overload 5*  \n  :param values: int[]\n  :return: int\n  \n*Overload 6*  \n  :param values: long[]\n  :return: int\n  \n*Overload 7*  \n  :param values: java.lang.Byte[]\n  :return: int\n  \n*Overload 8*  \n  :param values: java.lang.Character[]\n  :return: int\n  \n*Overload 9*  \n  :param values: java.lang.Double[]\n  :return: int\n  \n*Overload 10*  \n  :param values: java.lang.Float[]\n  :return: int\n  \n*Overload 11*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 12*  \n  :param values: java.lang.Long[]\n  :return: int\n  \n*Overload 13*  \n  :param values: java.lang.Short[]\n  :return: int\n  \n*Overload 14*  \n  :param values: short[]\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.BooleanVector\n  :return: int\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: int\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.CharVector\n  :return: int\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: int\n  \n*Overload 19*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: int\n  \n*Overload 20*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 21*  \n  :param values: io.deephaven.vector.LongVector\n  :return: int\n  \n*Overload 22*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: int\n  \n*Overload 23*  \n  Note: Java generics information - <T>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: int",
  "countDistinct": "*Overload 1*  \n  :param values: byte[]\n  :return: long\n  \n*Overload 2*  \n  :param values: char[]\n  :return: long\n  \n*Overload 3*  \n  :param values: double[]\n  :return: long\n  \n*Overload 4*  \n  :param values: float[]\n  :return: long\n  \n*Overload 5*  \n  :param values: int[]\n  :return: long\n  \n*Overload 6*  \n  :param values: long[]\n  :return: long\n  \n*Overload 7*  \n  :param values: short[]\n  :return: long\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: long\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.CharVector\n  :return: long\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: long\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: long\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.IntVector\n  :return: long\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: long\n  \n*Overload 15*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: long\n  \n*Overload 16*  \n  :param values: byte[]\n  :param countNull: boolean\n  :return: long\n  \n*Overload 17*  \n  :param values: char[]\n  :param countNull: boolean\n  :return: long\n  \n*Overload 18*  \n  :param values: double[]\n  :param countNull: boolean\n  :return: long\n  \n*Overload 19*  \n  :param values: float[]\n  :param countNull: boolean\n  :return: long\n  \n*Overload 20*  \n  :param values: int[]\n  :param countNull: boolean\n  :return: long\n  \n*Overload 21*  \n  :param values: long[]\n  :param countNull: boolean\n  :return: long\n  \n*Overload 22*  \n  :param values: short[]\n  :param countNull: boolean\n  :return: long\n  \n*Overload 23*  \n  :param values: io.deephaven.vector.ByteVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 24*  \n  :param values: io.deephaven.vector.CharVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 25*  \n  :param values: io.deephaven.vector.DoubleVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 26*  \n  :param values: io.deephaven.vector.FloatVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 27*  \n  :param values: io.deephaven.vector.IntVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 28*  \n  :param values: io.deephaven.vector.LongVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 29*  \n  :param values: io.deephaven.vector.ShortVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 30*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :param countNull: boolean\n  :return: long",
  "countNeg": "*Overload 1*  \n  :param values: byte[]\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :return: int\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: int\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: int\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: int\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: int\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: int\n  \n*Overload 12*  \n  :param values: short[]\n  :return: int\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: int\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: int\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: int\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: int",
  "countPos": "*Overload 1*  \n  :param values: byte[]\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :return: int\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: int\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: int\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: int\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: int\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: int\n  \n*Overload 12*  \n  :param values: short[]\n  :return: int\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: int\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: int\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: int\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: int",
  "countZero": "*Overload 1*  \n  :param values: byte[]\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :return: int\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: int\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: int\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: int\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: int\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: int\n  \n*Overload 12*  \n  :param values: short[]\n  :return: int\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: int\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: int\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: int\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: int",
  "cov": "*Overload 1*  \n  :param values0: byte[]\n  :param values1: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values0: byte[]\n  :param values1: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 3*  \n  :param values0: double[]\n  :param values1: double[]\n  :return: double\n  \n*Overload 4*  \n  :param values0: double[]\n  :param values1: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 5*  \n  :param values0: float[]\n  :param values1: float[]\n  :return: double\n  \n*Overload 6*  \n  :param values0: float[]\n  :param values1: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 7*  \n  :param values0: int[]\n  :param values1: int[]\n  :return: double\n  \n*Overload 8*  \n  :param values0: int[]\n  :param values1: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 9*  \n  :param values0: long[]\n  :param values1: long[]\n  :return: double\n  \n*Overload 10*  \n  :param values0: long[]\n  :param values1: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values0: short[]\n  :param values1: short[]\n  :return: double\n  \n*Overload 12*  \n  :param values0: short[]\n  :param values1: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 13*  \n  :param values0: io.deephaven.vector.ByteVector\n  :param values1: byte[]\n  :return: double\n  \n*Overload 14*  \n  :param values0: io.deephaven.vector.ByteVector\n  :param values1: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 15*  \n  :param values0: io.deephaven.vector.DoubleVector\n  :param values1: double[]\n  :return: double\n  \n*Overload 16*  \n  :param values0: io.deephaven.vector.DoubleVector\n  :param values1: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values0: io.deephaven.vector.FloatVector\n  :param values1: float[]\n  :return: double\n  \n*Overload 18*  \n  :param values0: io.deephaven.vector.FloatVector\n  :param values1: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 19*  \n  :param values0: io.deephaven.vector.IntVector\n  :param values1: int[]\n  :return: double\n  \n*Overload 20*  \n  :param values0: io.deephaven.vector.IntVector\n  :param values1: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 21*  \n  :param values0: io.deephaven.vector.LongVector\n  :param values1: long[]\n  :return: double\n  \n*Overload 22*  \n  :param values0: io.deephaven.vector.LongVector\n  :param values1: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 23*  \n  :param values0: io.deephaven.vector.ShortVector\n  :param values1: short[]\n  :return: double\n  \n*Overload 24*  \n  :param values0: io.deephaven.vector.ShortVector\n  :param values1: io.deephaven.vector.ShortVector\n  :return: double",
  "cumprod": "*Overload 1*  \n  :param values: byte[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 3*  \n  :param values: float[]\n  :return: float[]\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int[]\n  \n*Overload 5*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: byte[]\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double[]\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: float[]\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: int[]\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: long[]\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: short[]\n  \n*Overload 12*  \n  :param values: short[]\n  :return: short[]\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte[]\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double[]\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float[]\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int[]\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long[]\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short[]",
  "cumsum": "*Overload 1*  \n  :param values: byte[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 3*  \n  :param values: float[]\n  :return: float[]\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int[]\n  \n*Overload 5*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: byte[]\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double[]\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: float[]\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: int[]\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: long[]\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: short[]\n  \n*Overload 12*  \n  :param values: short[]\n  :return: short[]\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte[]\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double[]\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float[]\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int[]\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long[]\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short[]",
  "distinct": "*Overload 1*  \n  :param values: byte[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param values: char[]\n  :return: char[]\n  \n*Overload 3*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 4*  \n  :param values: float[]\n  :return: float[]\n  \n*Overload 5*  \n  :param values: int[]\n  :return: int[]\n  \n*Overload 6*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 7*  \n  :param values: short[]\n  :return: short[]\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: io.deephaven.vector.ByteVector\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.CharVector\n  :return: io.deephaven.vector.CharVector\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: io.deephaven.vector.DoubleVector\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: io.deephaven.vector.FloatVector\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.IntVector\n  :return: io.deephaven.vector.IntVector\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.LongVector\n  :return: io.deephaven.vector.LongVector\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: io.deephaven.vector.ShortVector\n  \n*Overload 15*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: io.deephaven.vector.ObjectVector<T>\n  \n*Overload 16*  \n  :param values: byte[]\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: byte[]\n  \n*Overload 17*  \n  :param values: char[]\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: char[]\n  \n*Overload 18*  \n  :param values: double[]\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: double[]\n  \n*Overload 19*  \n  :param values: float[]\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: float[]\n  \n*Overload 20*  \n  :param values: int[]\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: int[]\n  \n*Overload 21*  \n  :param values: long[]\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: long[]\n  \n*Overload 22*  \n  :param values: short[]\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: short[]\n  \n*Overload 23*  \n  :param values: io.deephaven.vector.ByteVector\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.ByteVector\n  \n*Overload 24*  \n  :param values: io.deephaven.vector.CharVector\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.CharVector\n  \n*Overload 25*  \n  :param values: io.deephaven.vector.DoubleVector\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.DoubleVector\n  \n*Overload 26*  \n  :param values: io.deephaven.vector.FloatVector\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.FloatVector\n  \n*Overload 27*  \n  :param values: io.deephaven.vector.IntVector\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.IntVector\n  \n*Overload 28*  \n  :param values: io.deephaven.vector.LongVector\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.LongVector\n  \n*Overload 29*  \n  :param values: io.deephaven.vector.ShortVector\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.ShortVector\n  \n*Overload 30*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :param includeNull: boolean\n  :param sort: boolean\n  :return: io.deephaven.vector.ObjectVector<T>",
  "enlist": "*Overload 1*  \n  :param values: byte[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param values: char[]\n  :return: char[]\n  \n*Overload 3*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 4*  \n  :param values: float[]\n  :return: float[]\n  \n*Overload 5*  \n  :param values: int[]\n  :return: int[]\n  \n*Overload 6*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 7*  \n  :param values: short[]\n  :return: short[]",
  "exp": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "first": "*Overload 1*  \n  :param values: byte[]\n  :return: byte\n  \n*Overload 2*  \n  :param values: char[]\n  :return: char\n  \n*Overload 3*  \n  :param values: double[]\n  :return: double\n  \n*Overload 4*  \n  :param values: float[]\n  :return: float\n  \n*Overload 5*  \n  :param values: int[]\n  :return: int\n  \n*Overload 6*  \n  :param values: long[]\n  :return: long\n  \n*Overload 7*  \n  :param values: java.lang.Boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 8*  \n  :param values: short[]\n  :return: short\n  \n*Overload 9*  \n  :param values: boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.CharVector\n  :return: char\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short\n  \n*Overload 17*  \n  Note: Java generics information - <T>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: T",
  "firstIndexOf": "*Overload 1*  \n  :param values: byte[]\n  :param val: byte\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :param val: double\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :param val: float\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :param val: int\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :param val: long\n  :return: int\n  \n*Overload 6*  \n  :param values: short[]\n  :param val: short\n  :return: int\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.ByteVector\n  :param val: byte\n  :return: int\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.DoubleVector\n  :param val: double\n  :return: int\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.FloatVector\n  :param val: float\n  :return: int\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.IntVector\n  :param val: int\n  :return: int\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.LongVector\n  :param val: long\n  :return: int\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.ShortVector\n  :param val: short\n  :return: int",
  "floor": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "in": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param testedValue: T\n  :param possibleValues: T[]\n  :return: boolean\n  \n*Overload 2*  \n  :param testedValues: byte\n  :param possibleValues: byte[]\n  :return: boolean\n  \n*Overload 3*  \n  :param testedValues: char\n  :param possibleValues: char[]\n  :return: boolean\n  \n*Overload 4*  \n  :param testedValues: double\n  :param possibleValues: double[]\n  :return: boolean\n  \n*Overload 5*  \n  :param testedValues: float\n  :param possibleValues: float[]\n  :return: boolean\n  \n*Overload 6*  \n  :param testedValues: int\n  :param possibleValues: int[]\n  :return: boolean\n  \n*Overload 7*  \n  :param testedValues: long\n  :param possibleValues: long[]\n  :return: boolean\n  \n*Overload 8*  \n  :param testedValues: short\n  :param possibleValues: short[]\n  :return: boolean",
  "inRange": "*Overload 1*  \n  :param testedValue: byte\n  :param lowInclusiveValue: byte\n  :param highInclusiveValue: byte\n  :return: boolean\n  \n*Overload 2*  \n  :param testedValue: char\n  :param lowInclusiveValue: char\n  :param highInclusiveValue: char\n  :return: boolean\n  \n*Overload 3*  \n  :param testedValue: double\n  :param lowInclusiveValue: double\n  :param highInclusiveValue: double\n  :return: boolean\n  \n*Overload 4*  \n  :param testedValue: float\n  :param lowInclusiveValue: float\n  :param highInclusiveValue: float\n  :return: boolean\n  \n*Overload 5*  \n  :param testedValue: int\n  :param lowInclusiveValue: int\n  :param highInclusiveValue: int\n  :return: boolean\n  \n*Overload 6*  \n  :param testedValue: java.lang.Comparable\n  :param lowInclusiveValue: java.lang.Comparable\n  :param highInclusiveValue: java.lang.Comparable\n  :return: boolean\n  \n*Overload 7*  \n  :param testedValue: long\n  :param lowInclusiveValue: long\n  :param highInclusiveValue: long\n  :return: boolean\n  \n*Overload 8*  \n  :param testedValue: short\n  :param lowInclusiveValue: short\n  :param highInclusiveValue: short\n  :return: boolean",
  "indexOfMax": "*Overload 1*  \n  :param values: byte[]\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :return: int\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: int\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: int\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: int\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: int\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: int\n  \n*Overload 12*  \n  :param values: short[]\n  :return: int\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: int\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: int\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: int\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: int",
  "indexOfMin": "*Overload 1*  \n  :param values: byte[]\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :return: int\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: int\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: int\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: int\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: int\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: int\n  \n*Overload 12*  \n  :param values: short[]\n  :return: int\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: int\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: int\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: int\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: int",
  "intToDouble": "*Overload 1*  \n  :param values: int[]\n  :return: double[]\n  \n*Overload 2*  \n  :param values: io.deephaven.vector.IntVector\n  :return: io.deephaven.vector.DoubleVector",
  "isDBNull": "Note: Java generics information - <T>\n\n:param value: T\n:return: boolean",
  "isInf": "*Overload 1*  \n  :param value: double\n  :return: boolean\n  \n*Overload 2*  \n  :param value: float\n  :return: boolean",
  "isNaN": "*Overload 1*  \n  :param value: double\n  :return: boolean\n  \n*Overload 2*  \n  :param value: float\n  :return: boolean",
  "isNormal": "*Overload 1*  \n  :param value: double\n  :return: boolean\n  \n*Overload 2*  \n  :param value: float\n  :return: boolean",
  "isNull": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param value: T\n  :return: boolean\n  \n*Overload 2*  \n  :param value: byte\n  :return: boolean\n  \n*Overload 3*  \n  :param value: char\n  :return: boolean\n  \n*Overload 4*  \n  :param value: java.lang.Boolean\n  :return: boolean\n  \n*Overload 5*  \n  :param value: double\n  :return: boolean\n  \n*Overload 6*  \n  :param value: float\n  :return: boolean\n  \n*Overload 7*  \n  :param value: int\n  :return: boolean\n  \n*Overload 8*  \n  :param value: long\n  :return: boolean\n  \n*Overload 9*  \n  :param value: short\n  :return: boolean",
  "last": "*Overload 1*  \n  :param values: byte[]\n  :return: byte\n  \n*Overload 2*  \n  :param values: char[]\n  :return: char\n  \n*Overload 3*  \n  :param values: double[]\n  :return: double\n  \n*Overload 4*  \n  :param values: float[]\n  :return: float\n  \n*Overload 5*  \n  :param values: int[]\n  :return: int\n  \n*Overload 6*  \n  :param values: long[]\n  :return: long\n  \n*Overload 7*  \n  :param values: java.lang.Boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 8*  \n  :param values: short[]\n  :return: short\n  \n*Overload 9*  \n  :param values: boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.CharVector\n  :return: char\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short\n  \n*Overload 17*  \n  Note: Java generics information - <T>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: T",
  "log": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "longToDouble": "*Overload 1*  \n  :param values: long[]\n  :return: double[]\n  \n*Overload 2*  \n  :param values: io.deephaven.vector.LongVector\n  :return: io.deephaven.vector.DoubleVector",
  "lowerBin": "*Overload 1*  \n  :param value: byte\n  :param interval: byte\n  :return: byte\n  \n*Overload 2*  \n  :param value: double\n  :param interval: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :param interval: float\n  :return: float\n  \n*Overload 4*  \n  :param value: int\n  :param interval: int\n  :return: int\n  \n*Overload 5*  \n  :param value: long\n  :param interval: long\n  :return: long\n  \n*Overload 6*  \n  :param value: short\n  :param interval: short\n  :return: short\n  \n*Overload 7*  \n  :param value: byte\n  :param interval: byte\n  :param offset: byte\n  :return: byte\n  \n*Overload 8*  \n  :param value: double\n  :param interval: double\n  :param offset: double\n  :return: double\n  \n*Overload 9*  \n  :param value: float\n  :param interval: float\n  :param offset: float\n  :return: float\n  \n*Overload 10*  \n  :param value: int\n  :param interval: int\n  :param offset: int\n  :return: int\n  \n*Overload 11*  \n  :param value: long\n  :param interval: long\n  :param offset: long\n  :return: long\n  \n*Overload 12*  \n  :param value: short\n  :param interval: short\n  :param offset: short\n  :return: short",
  "max": "*Overload 1*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: NUM[]\n  :return: NUM\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: T[]\n  :return: T\n  \n*Overload 3*  \n  :param values: byte[]\n  :return: byte\n  \n*Overload 4*  \n  :param values: double[]\n  :return: double\n  \n*Overload 5*  \n  :param values: float[]\n  :return: float\n  \n*Overload 6*  \n  :param values: int[]\n  :return: int\n  \n*Overload 7*  \n  :param values: long[]\n  :return: long\n  \n*Overload 8*  \n  :param values: java.lang.Byte[]\n  :return: byte\n  \n*Overload 9*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Float[]\n  :return: float\n  \n*Overload 11*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 12*  \n  :param values: java.lang.Long[]\n  :return: long\n  \n*Overload 13*  \n  :param values: java.lang.Short[]\n  :return: short\n  \n*Overload 14*  \n  :param values: short[]\n  :return: short\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 19*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 20*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short\n  \n*Overload 21*  \n  Note: Java generics information - <T extends java.lang.Comparable>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: T\n  \n*Overload 22*  \n  :param v1: byte\n  :param v2: byte\n  :return: byte\n  \n*Overload 23*  \n  :param v1: byte\n  :param v2: double\n  :return: double\n  \n*Overload 24*  \n  :param v1: byte\n  :param v2: float\n  :return: float\n  \n*Overload 25*  \n  :param v1: byte\n  :param v2: int\n  :return: int\n  \n*Overload 26*  \n  :param v1: byte\n  :param v2: long\n  :return: long\n  \n*Overload 27*  \n  :param v1: byte\n  :param v2: short\n  :return: short\n  \n*Overload 28*  \n  :param v1: double\n  :param v2: byte\n  :return: double\n  \n*Overload 29*  \n  :param v1: double\n  :param v2: double\n  :return: double\n  \n*Overload 30*  \n  :param v1: double\n  :param v2: float\n  :return: double\n  \n*Overload 31*  \n  :param v1: double\n  :param v2: int\n  :return: double\n  \n*Overload 32*  \n  :param v1: double\n  :param v2: long\n  :return: double\n  \n*Overload 33*  \n  :param v1: double\n  :param v2: short\n  :return: double\n  \n*Overload 34*  \n  :param v1: float\n  :param v2: byte\n  :return: float\n  \n*Overload 35*  \n  :param v1: float\n  :param v2: double\n  :return: double\n  \n*Overload 36*  \n  :param v1: float\n  :param v2: float\n  :return: float\n  \n*Overload 37*  \n  :param v1: float\n  :param v2: int\n  :return: double\n  \n*Overload 38*  \n  :param v1: float\n  :param v2: long\n  :return: double\n  \n*Overload 39*  \n  :param v1: float\n  :param v2: short\n  :return: float\n  \n*Overload 40*  \n  :param v1: int\n  :param v2: byte\n  :return: int\n  \n*Overload 41*  \n  :param v1: int\n  :param v2: double\n  :return: double\n  \n*Overload 42*  \n  :param v1: int\n  :param v2: float\n  :return: double\n  \n*Overload 43*  \n  :param v1: int\n  :param v2: int\n  :return: int\n  \n*Overload 44*  \n  :param v1: int\n  :param v2: long\n  :return: long\n  \n*Overload 45*  \n  :param v1: int\n  :param v2: short\n  :return: int\n  \n*Overload 46*  \n  :param v1: long\n  :param v2: byte\n  :return: long\n  \n*Overload 47*  \n  :param v1: long\n  :param v2: double\n  :return: double\n  \n*Overload 48*  \n  :param v1: long\n  :param v2: float\n  :return: double\n  \n*Overload 49*  \n  :param v1: long\n  :param v2: int\n  :return: long\n  \n*Overload 50*  \n  :param v1: long\n  :param v2: long\n  :return: long\n  \n*Overload 51*  \n  :param v1: long\n  :param v2: short\n  :return: long\n  \n*Overload 52*  \n  :param v1: short\n  :param v2: byte\n  :return: short\n  \n*Overload 53*  \n  :param v1: short\n  :param v2: double\n  :return: double\n  \n*Overload 54*  \n  :param v1: short\n  :param v2: float\n  :return: float\n  \n*Overload 55*  \n  :param v1: short\n  :param v2: int\n  :return: int\n  \n*Overload 56*  \n  :param v1: short\n  :param v2: long\n  :return: long\n  \n*Overload 57*  \n  :param v1: short\n  :param v2: short\n  :return: short",
  "median": "*Overload 1*  \n  :param values: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: double\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: double\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: double\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: double\n  \n*Overload 12*  \n  :param values: short[]\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double",
  "min": "*Overload 1*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: NUM[]\n  :return: NUM\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: T[]\n  :return: T\n  \n*Overload 3*  \n  :param values: byte[]\n  :return: byte\n  \n*Overload 4*  \n  :param values: double[]\n  :return: double\n  \n*Overload 5*  \n  :param values: float[]\n  :return: float\n  \n*Overload 6*  \n  :param values: int[]\n  :return: int\n  \n*Overload 7*  \n  :param values: long[]\n  :return: long\n  \n*Overload 8*  \n  :param values: java.lang.Byte[]\n  :return: byte\n  \n*Overload 9*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Float[]\n  :return: float\n  \n*Overload 11*  \n  :param values: java.lang.Integer[]\n  :return: int\n  \n*Overload 12*  \n  :param values: java.lang.Long[]\n  :return: long\n  \n*Overload 13*  \n  :param values: java.lang.Short[]\n  :return: short\n  \n*Overload 14*  \n  :param values: short[]\n  :return: short\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 19*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 20*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short\n  \n*Overload 21*  \n  Note: Java generics information - <T extends java.lang.Comparable>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: T\n  \n*Overload 22*  \n  :param v1: byte\n  :param v2: byte\n  :return: byte\n  \n*Overload 23*  \n  :param v1: byte\n  :param v2: double\n  :return: double\n  \n*Overload 24*  \n  :param v1: byte\n  :param v2: float\n  :return: float\n  \n*Overload 25*  \n  :param v1: byte\n  :param v2: int\n  :return: int\n  \n*Overload 26*  \n  :param v1: byte\n  :param v2: long\n  :return: long\n  \n*Overload 27*  \n  :param v1: byte\n  :param v2: short\n  :return: short\n  \n*Overload 28*  \n  :param v1: double\n  :param v2: byte\n  :return: double\n  \n*Overload 29*  \n  :param v1: double\n  :param v2: double\n  :return: double\n  \n*Overload 30*  \n  :param v1: double\n  :param v2: float\n  :return: double\n  \n*Overload 31*  \n  :param v1: double\n  :param v2: int\n  :return: double\n  \n*Overload 32*  \n  :param v1: double\n  :param v2: long\n  :return: double\n  \n*Overload 33*  \n  :param v1: double\n  :param v2: short\n  :return: double\n  \n*Overload 34*  \n  :param v1: float\n  :param v2: byte\n  :return: float\n  \n*Overload 35*  \n  :param v1: float\n  :param v2: double\n  :return: double\n  \n*Overload 36*  \n  :param v1: float\n  :param v2: float\n  :return: float\n  \n*Overload 37*  \n  :param v1: float\n  :param v2: int\n  :return: double\n  \n*Overload 38*  \n  :param v1: float\n  :param v2: long\n  :return: double\n  \n*Overload 39*  \n  :param v1: float\n  :param v2: short\n  :return: float\n  \n*Overload 40*  \n  :param v1: int\n  :param v2: byte\n  :return: int\n  \n*Overload 41*  \n  :param v1: int\n  :param v2: double\n  :return: double\n  \n*Overload 42*  \n  :param v1: int\n  :param v2: float\n  :return: double\n  \n*Overload 43*  \n  :param v1: int\n  :param v2: int\n  :return: int\n  \n*Overload 44*  \n  :param v1: int\n  :param v2: long\n  :return: long\n  \n*Overload 45*  \n  :param v1: int\n  :param v2: short\n  :return: int\n  \n*Overload 46*  \n  :param v1: long\n  :param v2: byte\n  :return: long\n  \n*Overload 47*  \n  :param v1: long\n  :param v2: double\n  :return: double\n  \n*Overload 48*  \n  :param v1: long\n  :param v2: float\n  :return: double\n  \n*Overload 49*  \n  :param v1: long\n  :param v2: int\n  :return: long\n  \n*Overload 50*  \n  :param v1: long\n  :param v2: long\n  :return: long\n  \n*Overload 51*  \n  :param v1: long\n  :param v2: short\n  :return: long\n  \n*Overload 52*  \n  :param v1: short\n  :param v2: byte\n  :return: short\n  \n*Overload 53*  \n  :param v1: short\n  :param v2: double\n  :return: double\n  \n*Overload 54*  \n  :param v1: short\n  :param v2: float\n  :return: float\n  \n*Overload 55*  \n  :param v1: short\n  :param v2: int\n  :return: int\n  \n*Overload 56*  \n  :param v1: short\n  :param v2: long\n  :return: long\n  \n*Overload 57*  \n  :param v1: short\n  :param v2: short\n  :return: short",
  "not": "*Overload 1*  \n  :param values: java.lang.Boolean[]\n  :return: java.lang.Boolean[]\n  \n*Overload 2*  \n  :param values: boolean[]\n  :return: java.lang.Boolean[]",
  "nth": "*Overload 1*  \n  :param index: int\n  :param values: byte[]\n  :return: byte\n  \n*Overload 2*  \n  :param index: int\n  :param values: char[]\n  :return: char\n  \n*Overload 3*  \n  :param index: int\n  :param values: double[]\n  :return: double\n  \n*Overload 4*  \n  :param index: int\n  :param values: float[]\n  :return: float\n  \n*Overload 5*  \n  :param index: int\n  :param values: int[]\n  :return: int\n  \n*Overload 6*  \n  :param index: int\n  :param values: long[]\n  :return: long\n  \n*Overload 7*  \n  :param index: int\n  :param values: java.lang.Boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 8*  \n  :param index: int\n  :param values: short[]\n  :return: short\n  \n*Overload 9*  \n  :param index: int\n  :param values: io.deephaven.vector.BooleanVector\n  :return: java.lang.Boolean\n  \n*Overload 10*  \n  :param index: int\n  :param values: io.deephaven.vector.ByteVector\n  :return: byte\n  \n*Overload 11*  \n  :param index: int\n  :param values: io.deephaven.vector.CharVector\n  :return: char\n  \n*Overload 12*  \n  :param index: int\n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 13*  \n  :param index: int\n  :param values: io.deephaven.vector.FloatVector\n  :return: float\n  \n*Overload 14*  \n  :param index: int\n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 15*  \n  :param index: int\n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 16*  \n  :param index: int\n  :param values: io.deephaven.vector.ShortVector\n  :return: short\n  \n*Overload 17*  \n  Note: Java generics information - <T>\n  \n  :param index: int\n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: T",
  "nullToValue": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param value: T\n  :param defaultValue: T\n  :return: T\n  \n*Overload 2*  \n  :param value: byte\n  :param defaultValue: byte\n  :return: byte\n  \n*Overload 3*  \n  :param value: char\n  :param defaultValue: char\n  :return: char\n  \n*Overload 4*  \n  :param values: byte[]\n  :param defaultValue: byte\n  :return: byte[]\n  \n*Overload 5*  \n  :param values: char[]\n  :param defaultValue: char\n  :return: char[]\n  \n*Overload 6*  \n  :param values: double[]\n  :param defaultValue: double\n  :return: double[]\n  \n*Overload 7*  \n  :param values: float[]\n  :param defaultValue: float\n  :return: float[]\n  \n*Overload 8*  \n  :param values: int[]\n  :param defaultValue: int\n  :return: int[]\n  \n*Overload 9*  \n  :param values: long[]\n  :param defaultValue: long\n  :return: long[]\n  \n*Overload 10*  \n  :param values: short[]\n  :param defaultValue: short\n  :return: short[]\n  \n*Overload 11*  \n  :param value: java.lang.Boolean\n  :param defaultValue: boolean\n  :return: java.lang.Boolean\n  \n*Overload 12*  \n  :param value: double\n  :param defaultValue: double\n  :return: double\n  \n*Overload 13*  \n  :param value: float\n  :param defaultValue: float\n  :return: float\n  \n*Overload 14*  \n  :param value: int\n  :param defaultValue: int\n  :return: int\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.BooleanVector\n  :param defaultValue: boolean\n  :return: java.lang.Boolean[]\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.ByteVector\n  :param defaultValue: byte\n  :return: byte[]\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.CharVector\n  :param defaultValue: char\n  :return: char[]\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.DoubleVector\n  :param defaultValue: double\n  :return: double[]\n  \n*Overload 19*  \n  :param values: io.deephaven.vector.FloatVector\n  :param defaultValue: float\n  :return: float[]\n  \n*Overload 20*  \n  :param values: io.deephaven.vector.IntVector\n  :param defaultValue: int\n  :return: int[]\n  \n*Overload 21*  \n  :param values: io.deephaven.vector.LongVector\n  :param defaultValue: long\n  :return: long[]\n  \n*Overload 22*  \n  :param values: io.deephaven.vector.ShortVector\n  :param defaultValue: short\n  :return: short[]\n  \n*Overload 23*  \n  Note: Java generics information - <T>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :param defaultValue: T\n  :return: T[]\n  \n*Overload 24*  \n  :param value: long\n  :param defaultValue: long\n  :return: long\n  \n*Overload 25*  \n  :param value: short\n  :param defaultValue: short\n  :return: short",
  "or": "*Overload 1*  \n  :param values: java.lang.Boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 2*  \n  :param values: boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 3*  \n  :param values: java.lang.Boolean[]\n  :param nullValue: java.lang.Boolean\n  :return: java.lang.Boolean",
  "percentile": "*Overload 1*  \n  :param values: double[]\n  :param percentile: double\n  :return: double\n  \n*Overload 2*  \n  :param values: float[]\n  :param percentile: double\n  :return: double\n  \n*Overload 3*  \n  :param percentile: double\n  :param values: byte[]\n  :return: double\n  \n*Overload 4*  \n  :param percentile: double\n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param percentile: double\n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param percentile: double\n  :param values: short[]\n  :return: double\n  \n*Overload 7*  \n  :param percentile: double\n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 8*  \n  :param percentile: double\n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 9*  \n  :param percentile: double\n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 10*  \n  :param percentile: double\n  :param values: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.DoubleVector\n  :param percentile: double\n  :return: double\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.FloatVector\n  :param percentile: double\n  :return: double",
  "pow": "*Overload 1*  \n  :param a: byte\n  :param b: byte\n  :return: double\n  \n*Overload 2*  \n  :param a: double\n  :param b: double\n  :return: double\n  \n*Overload 3*  \n  :param a: float\n  :param b: float\n  :return: double\n  \n*Overload 4*  \n  :param a: int\n  :param b: int\n  :return: double\n  \n*Overload 5*  \n  :param a: long\n  :param b: long\n  :return: double\n  \n*Overload 6*  \n  :param a: short\n  :param b: short\n  :return: double",
  "product": "*Overload 1*  \n  :param values: byte[]\n  :return: byte\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: float\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :return: long\n  \n*Overload 6*  \n  :param values: short[]\n  :return: short\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short",
  "random": ":return: double",
  "randomBool": "*Overload 1*  \n  :return: boolean\n  \n*Overload 2*  \n  :param size: int\n  :return: boolean[]",
  "randomDouble": "*Overload 1*  \n  :param min: double\n  :param max: double\n  :return: double\n  \n*Overload 2*  \n  :param min: double\n  :param max: double\n  :param size: int\n  :return: double[]",
  "randomFloat": "*Overload 1*  \n  :param min: float\n  :param max: float\n  :return: float\n  \n*Overload 2*  \n  :param min: float\n  :param max: float\n  :param size: int\n  :return: float[]",
  "randomGaussian": "*Overload 1*  \n  :param mean: double\n  :param std: double\n  :return: double\n  \n*Overload 2*  \n  :param mean: double\n  :param std: double\n  :param size: int\n  :return: double[]",
  "randomInt": "*Overload 1*  \n  :param min: int\n  :param max: int\n  :return: int\n  \n*Overload 2*  \n  :param min: int\n  :param max: int\n  :param size: int\n  :return: int[]",
  "randomLong": "*Overload 1*  \n  :param min: long\n  :param max: long\n  :return: long\n  \n*Overload 2*  \n  :param min: long\n  :param max: long\n  :param size: int\n  :return: long[]",
  "rawBinSearchIndex": "*Overload 1*  \n  :param values: byte[]\n  :param key: byte\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 2*  \n  :param values: double[]\n  :param key: double\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 3*  \n  :param values: float[]\n  :param key: float\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 4*  \n  :param values: int[]\n  :param key: int\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :param key: long\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 6*  \n  :param values: short[]\n  :param key: short\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.ByteVector\n  :param key: byte\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.DoubleVector\n  :param key: double\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.FloatVector\n  :param key: float\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.IntVector\n  :param key: int\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.LongVector\n  :param key: long\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.ShortVector\n  :param key: short\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int\n  \n*Overload 13*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :param key: T\n  :param choiceWhenEquals: io.deephaven.function.BinSearch\n  :return: int",
  "repeat": "*Overload 1*  \n  :param value: byte\n  :param size: int\n  :return: byte[]\n  \n*Overload 2*  \n  :param value: char\n  :param size: int\n  :return: char[]\n  \n*Overload 3*  \n  :param value: double\n  :param size: int\n  :return: double[]\n  \n*Overload 4*  \n  :param value: float\n  :param size: int\n  :return: float[]\n  \n*Overload 5*  \n  :param value: int\n  :param size: int\n  :return: int[]\n  \n*Overload 6*  \n  :param value: long\n  :param size: int\n  :return: long[]\n  \n*Overload 7*  \n  :param value: short\n  :param size: int\n  :return: short[]",
  "reverse": "*Overload 1*  \n  :param values: byte[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param values: char[]\n  :return: char[]\n  \n*Overload 3*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 4*  \n  :param values: float[]\n  :return: float[]\n  \n*Overload 5*  \n  :param values: int[]\n  :return: int[]\n  \n*Overload 6*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 7*  \n  :param values: short[]\n  :return: short[]\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte[]\n  \n*Overload 9*  \n  :param values: io.deephaven.vector.CharVector\n  :return: char[]\n  \n*Overload 10*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double[]\n  \n*Overload 11*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float[]\n  \n*Overload 12*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int[]\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long[]\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short[]",
  "rint": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "round": "*Overload 1*  \n  :param value: byte\n  :return: long\n  \n*Overload 2*  \n  :param value: double\n  :return: long\n  \n*Overload 3*  \n  :param value: float\n  :return: long\n  \n*Overload 4*  \n  :param value: int\n  :return: long\n  \n*Overload 5*  \n  :param value: long\n  :return: long\n  \n*Overload 6*  \n  :param value: short\n  :return: long",
  "sequence": "*Overload 1*  \n  :param start: byte\n  :param end: byte\n  :param step: byte\n  :return: byte[]\n  \n*Overload 2*  \n  :param start: double\n  :param end: double\n  :param step: double\n  :return: double[]\n  \n*Overload 3*  \n  :param start: float\n  :param end: float\n  :param step: float\n  :return: float[]\n  \n*Overload 4*  \n  :param start: int\n  :param end: int\n  :param step: int\n  :return: int[]\n  \n*Overload 5*  \n  :param start: long\n  :param end: long\n  :param step: long\n  :return: long[]\n  \n*Overload 6*  \n  :param start: short\n  :param end: short\n  :param step: short\n  :return: short[]",
  "signum": "*Overload 1*  \n  :param value: byte\n  :return: byte\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: float\n  \n*Overload 4*  \n  :param value: int\n  :return: int\n  \n*Overload 5*  \n  :param value: long\n  :return: long\n  \n*Overload 6*  \n  :param value: short\n  :return: short",
  "sin": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "sort": "*Overload 1*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: NUM[]\n  :return: NUM[]\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: T[]\n  :return: T[]\n  \n*Overload 3*  \n  :param values: byte[]\n  :return: byte[]\n  \n*Overload 4*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 5*  \n  :param values: float[]\n  :return: float[]\n  \n*Overload 6*  \n  :param values: int[]\n  :return: int[]\n  \n*Overload 7*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 8*  \n  :param values: java.lang.Byte[]\n  :return: byte[]\n  \n*Overload 9*  \n  :param values: java.lang.Double[]\n  :return: double[]\n  \n*Overload 10*  \n  :param values: java.lang.Float[]\n  :return: float[]\n  \n*Overload 11*  \n  :param values: java.lang.Integer[]\n  :return: int[]\n  \n*Overload 12*  \n  :param values: java.lang.Long[]\n  :return: long[]\n  \n*Overload 13*  \n  :param values: java.lang.Short[]\n  :return: short[]\n  \n*Overload 14*  \n  :param values: short[]\n  :return: short[]\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: io.deephaven.vector.ByteVector\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: io.deephaven.vector.DoubleVector\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: io.deephaven.vector.FloatVector\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.IntVector\n  :return: io.deephaven.vector.IntVector\n  \n*Overload 19*  \n  :param values: io.deephaven.vector.LongVector\n  :return: io.deephaven.vector.LongVector\n  \n*Overload 20*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: io.deephaven.vector.ShortVector\n  \n*Overload 21*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: io.deephaven.vector.ObjectVector<T>",
  "sortDescending": "*Overload 1*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: NUM[]\n  :return: NUM[]\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: T[]\n  :return: T[]\n  \n*Overload 3*  \n  :param values: byte[]\n  :return: byte[]\n  \n*Overload 4*  \n  :param values: double[]\n  :return: double[]\n  \n*Overload 5*  \n  :param values: float[]\n  :return: float[]\n  \n*Overload 6*  \n  :param values: int[]\n  :return: int[]\n  \n*Overload 7*  \n  :param values: long[]\n  :return: long[]\n  \n*Overload 8*  \n  :param values: java.lang.Byte[]\n  :return: byte[]\n  \n*Overload 9*  \n  :param values: java.lang.Double[]\n  :return: double[]\n  \n*Overload 10*  \n  :param values: java.lang.Float[]\n  :return: float[]\n  \n*Overload 11*  \n  :param values: java.lang.Integer[]\n  :return: int[]\n  \n*Overload 12*  \n  :param values: java.lang.Long[]\n  :return: long[]\n  \n*Overload 13*  \n  :param values: java.lang.Short[]\n  :return: short[]\n  \n*Overload 14*  \n  :param values: short[]\n  :return: short[]\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: io.deephaven.vector.ByteVector\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: io.deephaven.vector.DoubleVector\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: io.deephaven.vector.FloatVector\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.IntVector\n  :return: io.deephaven.vector.IntVector\n  \n*Overload 19*  \n  :param values: io.deephaven.vector.LongVector\n  :return: io.deephaven.vector.LongVector\n  \n*Overload 20*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: io.deephaven.vector.ShortVector\n  \n*Overload 21*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: io.deephaven.vector.ObjectVector<T>",
  "sqrt": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "std": "*Overload 1*  \n  :param values: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: double\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: double\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: double\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: double\n  \n*Overload 12*  \n  :param values: short[]\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double",
  "ste": "*Overload 1*  \n  :param values: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: double\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: double\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: double\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: double\n  \n*Overload 12*  \n  :param values: short[]\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double",
  "sum": "*Overload 1*  \n  :param values: byte[]\n  :return: byte\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: float\n  \n*Overload 4*  \n  :param values: int[]\n  :return: int\n  \n*Overload 5*  \n  :param values: long[]\n  :return: long\n  \n*Overload 6*  \n  :param values: java.lang.Boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 7*  \n  :param values: short[]\n  :return: short\n  \n*Overload 8*  \n  :param values: boolean[]\n  :return: java.lang.Boolean\n  \n*Overload 9*  \n  :param values: byte[][]\n  :return: byte[]\n  \n*Overload 10*  \n  :param values: double[][]\n  :return: double[]\n  \n*Overload 11*  \n  :param values: float[][]\n  :return: float[]\n  \n*Overload 12*  \n  :param values: int[][]\n  :return: int[]\n  \n*Overload 13*  \n  :param values: long[][]\n  :return: long[]\n  \n*Overload 14*  \n  :param values: short[][]\n  :return: short[]\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int\n  \n*Overload 19*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long\n  \n*Overload 20*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short",
  "tan": "*Overload 1*  \n  :param value: byte\n  :return: double\n  \n*Overload 2*  \n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :return: double\n  \n*Overload 4*  \n  :param value: int\n  :return: double\n  \n*Overload 5*  \n  :param value: long\n  :return: double\n  \n*Overload 6*  \n  :param value: short\n  :return: double",
  "tstat": "*Overload 1*  \n  :param values: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: double\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: double\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: double\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: double\n  \n*Overload 12*  \n  :param values: short[]\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double",
  "unbox": "*Overload 1*  \n  :param values: java.lang.Byte[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param values: java.lang.Character[]\n  :return: char[]\n  \n*Overload 3*  \n  :param values: java.lang.Double[]\n  :return: double[]\n  \n*Overload 4*  \n  :param values: java.lang.Float[]\n  :return: float[]\n  \n*Overload 5*  \n  :param values: java.lang.Integer[]\n  :return: int[]\n  \n*Overload 6*  \n  :param values: java.lang.Long[]\n  :return: long[]\n  \n*Overload 7*  \n  :param values: java.lang.Short[]\n  :return: short[]",
  "uniqueValue": "*Overload 1*  \n  :param arr: io.deephaven.vector.ByteVector\n  :param countNull: boolean\n  :return: byte\n  \n*Overload 2*  \n  :param arr: io.deephaven.vector.CharVector\n  :param countNull: boolean\n  :return: char\n  \n*Overload 3*  \n  :param arr: io.deephaven.vector.DoubleVector\n  :param countNull: boolean\n  :return: double\n  \n*Overload 4*  \n  :param arr: io.deephaven.vector.FloatVector\n  :param countNull: boolean\n  :return: float\n  \n*Overload 5*  \n  :param arr: io.deephaven.vector.IntVector\n  :param countNull: boolean\n  :return: int\n  \n*Overload 6*  \n  :param arr: io.deephaven.vector.LongVector\n  :param countNull: boolean\n  :return: long\n  \n*Overload 7*  \n  :param arr: io.deephaven.vector.ShortVector\n  :param countNull: boolean\n  :return: short",
  "upperBin": "*Overload 1*  \n  :param value: byte\n  :param interval: byte\n  :return: byte\n  \n*Overload 2*  \n  :param value: double\n  :param interval: double\n  :return: double\n  \n*Overload 3*  \n  :param value: float\n  :param interval: float\n  :return: float\n  \n*Overload 4*  \n  :param value: int\n  :param interval: int\n  :return: int\n  \n*Overload 5*  \n  :param value: long\n  :param interval: long\n  :return: long\n  \n*Overload 6*  \n  :param value: short\n  :param interval: short\n  :return: short\n  \n*Overload 7*  \n  :param value: byte\n  :param interval: byte\n  :param offset: byte\n  :return: byte\n  \n*Overload 8*  \n  :param value: double\n  :param interval: double\n  :param offset: double\n  :return: double\n  \n*Overload 9*  \n  :param value: float\n  :param interval: float\n  :param offset: float\n  :return: float\n  \n*Overload 10*  \n  :param value: int\n  :param interval: int\n  :param offset: int\n  :return: int\n  \n*Overload 11*  \n  :param value: long\n  :param interval: long\n  :param offset: long\n  :return: long\n  \n*Overload 12*  \n  :param value: short\n  :param interval: short\n  :param offset: short\n  :return: short",
  "var": "*Overload 1*  \n  :param values: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: java.lang.Byte[]\n  :return: double\n  \n*Overload 7*  \n  :param values: java.lang.Double[]\n  :return: double\n  \n*Overload 8*  \n  :param values: java.lang.Float[]\n  :return: double\n  \n*Overload 9*  \n  :param values: java.lang.Integer[]\n  :return: double\n  \n*Overload 10*  \n  :param values: java.lang.Long[]\n  :return: double\n  \n*Overload 11*  \n  :param values: java.lang.Short[]\n  :return: double\n  \n*Overload 12*  \n  :param values: short[]\n  :return: double\n  \n*Overload 13*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 14*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 15*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 16*  \n  :param values: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 17*  \n  :param values: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 18*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: double",
  "vec": "*Overload 1*  \n  :param values: io.deephaven.vector.BooleanVector\n  :return: java.lang.Boolean[]\n  \n*Overload 2*  \n  :param values: io.deephaven.vector.ByteVector\n  :return: byte[]\n  \n*Overload 3*  \n  :param values: io.deephaven.vector.CharVector\n  :return: char[]\n  \n*Overload 4*  \n  :param values: io.deephaven.vector.DoubleVector\n  :return: double[]\n  \n*Overload 5*  \n  :param values: io.deephaven.vector.FloatVector\n  :return: float[]\n  \n*Overload 6*  \n  :param values: io.deephaven.vector.IntVector\n  :return: int[]\n  \n*Overload 7*  \n  :param values: io.deephaven.vector.LongVector\n  :return: long[]\n  \n*Overload 8*  \n  :param values: io.deephaven.vector.ShortVector\n  :return: short[]\n  \n*Overload 9*  \n  Note: Java generics information - <T>\n  \n  :param values: io.deephaven.vector.ObjectVector<T>\n  :return: T[]",
  "wavg": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double",
  "weightedAvg": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double",
  "weightedSum": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double",
  "wstd": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double",
  "wste": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double",
  "wsum": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double",
  "wtstat": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double",
  "wvar": "There are 120 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: byte[]\n  :param weights: byte[]\n  :return: double\n  \n*Overload 2*  \n  :param values: byte[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 3*  \n  :param values: byte[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 4*  \n  :param values: byte[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 5*  \n  :param values: byte[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 6*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.ByteVector\n  :return: double\n  \n*Overload 7*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 8*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 9*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 10*  \n  :param values: byte[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 11*  \n  :param values: double[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 12*  \n  :param values: double[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 13*  \n  :param values: double[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 14*  \n  :param values: double[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 15*  \n  :param values: double[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 16*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 17*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 18*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 19*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 20*  \n  :param values: double[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 21*  \n  :param values: float[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 22*  \n  :param values: float[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 23*  \n  :param values: float[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 24*  \n  :param values: float[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 25*  \n  :param values: float[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 26*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 27*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 28*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 29*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 30*  \n  :param values: float[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 31*  \n  :param values: int[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 32*  \n  :param values: int[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 33*  \n  :param values: int[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 34*  \n  :param values: int[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 35*  \n  :param values: int[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 36*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 37*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 38*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 39*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 40*  \n  :param values: int[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double\n  \n*Overload 41*  \n  :param values: long[]\n  :param weights: double[]\n  :return: double\n  \n*Overload 42*  \n  :param values: long[]\n  :param weights: float[]\n  :return: double\n  \n*Overload 43*  \n  :param values: long[]\n  :param weights: int[]\n  :return: double\n  \n*Overload 44*  \n  :param values: long[]\n  :param weights: long[]\n  :return: double\n  \n*Overload 45*  \n  :param values: long[]\n  :param weights: short[]\n  :return: double\n  \n*Overload 46*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.DoubleVector\n  :return: double\n  \n*Overload 47*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.FloatVector\n  :return: double\n  \n*Overload 48*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.IntVector\n  :return: double\n  \n*Overload 49*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.LongVector\n  :return: double\n  \n*Overload 50*  \n  :param values: long[]\n  :param weights: io.deephaven.vector.ShortVector\n  :return: double"
 },
 "path": "io.deephaven.libs.GroovyStaticImports",
 "text": "Functions statically imported into Groovy.",
 "typeName": "class"
}