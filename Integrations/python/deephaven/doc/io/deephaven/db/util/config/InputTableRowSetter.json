{
 "className": "io.deephaven.db.util.config.InputTableRowSetter",
 "methods": {
  "addRow": "**Incompatible overloads text - text from the first overload:**\n\nAdd the specified row to the table, optionally overwriting existing keys. This method will execute\n asynchronously, the input listener will be notified on success/failure.\n\n*Overload 1*  \n  :param values: (java.util.Map<java.lang.String,java.lang.Object>) - The values to write.\n  \n*Overload 2*  \n  :param valueArray: (java.util.Map<java.lang.String,java.lang.Object>) - The value to write.\n  :param allowEdits: (boolean) - Should pre-existing keys be overwritten?\n  :param listener: (io.deephaven.db.util.config.InputTableStatusListener) - The listener to report asynchronous result to.",
  "addRows": "**Incompatible overloads text - text from the first overload:**\n\nAdd the specified rows to the table, optionally overwriting existing keys. This method will execute\n asynchronously, the input listener will be notified on success/failure.\n\n*Overload 1*  \n  :param valueArray: (java.util.Map<java.lang.String,java.lang.Object>[]) - The values to write.\n  \n*Overload 2*  \n  :param valueArray: (java.util.Map<java.lang.String,java.lang.Object>[]) - The values to write.\n  :param allowEdits: (boolean) - Should pre-existing keys be overwritten?\n  :param listener: (io.deephaven.db.util.config.InputTableStatusListener) - The listener to report asynchronous results to.",
  "setRow": "Set the values of the column specified by the input, filling in missing data using the parameter 'table' as the\n previous value source. This method will be invoked asynchronously. Users may use\n setRows(Table, int[], Map[], InputTableStatusListener) to be notified of asynchronous results.\n\n:param table: (io.deephaven.db.tables.Table) - The table to use as the previous value source\n:param row: (int) - The row index to set\n:param values: (java.util.Map<java.lang.String,java.lang.Object>) - A map of column name to value to set.",
  "setRows": "**Incompatible overloads text - text from the first overload:**\n\nSet the values of the columns specified by the input, filling in missing data using the parameter 'table' as the\n previous value source. This method will be invoked asynchronously. The input listener will be notified on\n success/failure\n\n*Overload 1*  \n  :param table: (io.deephaven.db.tables.Table) - The table to use as the previous value source\n  :param rowArray: (int[]) - The row indices to update.\n  :param valueArray: (java.util.Map<java.lang.String,java.lang.Object>[]) - The new values.\n  \n*Overload 2*  \n  :param table: (io.deephaven.db.tables.Table) - The table to use as the previous value source\n  :param rowArray: (int[]) - The row indices to update.\n  :param valueArray: (java.util.Map<java.lang.String,java.lang.Object>[]) - The new values.\n  :param listener: (io.deephaven.db.util.config.InputTableStatusListener) - The listener to notify on asynchronous results."
 },
 "path": "io.deephaven.db.util.config.InputTableRowSetter",
 "typeName": "interface"
}