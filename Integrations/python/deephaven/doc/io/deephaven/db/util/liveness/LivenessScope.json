{
 "className": "io.deephaven.db.util.liveness.LivenessScope",
 "methods": {
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "release": "Release all referents previously added to this scope in its capacity as a LivenessManager, unless other\n references to this scope are retained in its capacity as a LivenessReferent.",
  "transferTo": "Transfer all retained LivenessReferents from this LivenessScope to a compatible\n LivenessManager. Transfer support compatibility is implementation defined.\n\n:param other: (io.deephaven.db.util.liveness.LivenessManager) - The other LivenessManager",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.util.liveness.LivenessScope",
 "text": "LivenessNode implementation for providing external scope to one or more LivenessReferents.",
 "typeName": "class"
}