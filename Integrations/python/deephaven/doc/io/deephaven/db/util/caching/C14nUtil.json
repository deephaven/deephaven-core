{
 "className": "io.deephaven.db.util.caching.C14nUtil",
 "methods": {
  "makeSmartKey": "Make a SmartKey appropriate for values.\n\n:param values: (java.lang.Object...) - \n:return: (io.deephaven.datastructures.util.SmartKey) A canonicalized CanonicalizedSmartKey if all values are canonicalizable, else a new SmartKey",
  "maybeCanonicalize": "Canonicalize an object using the default CanonicalizationCache, if it's an instance of a known appropriate class.\n\nNote: Java generics information - <T>\n\n:param item: (T) - \n:return: (T) null if item was null, else the canonicalized version of item if its class was eligible, else item",
  "maybeCanonicalizeAll": "Canonicalizes an array of objects in-place using the default CanonicalizationCache, if they're instances of known\n appropriate classes. May canonicalize some items without canonicalizing all.\n\nNote: Java generics information - <T>\n\n:param items: (T[]) - \n:return: (boolean) true if all non-null items were canonicalized, else false.",
  "maybeMakeSmartKey": "If there is one value and it is null, return a special singleton smart key that we have created for this purpose.\n If there is one value and it is not null, hand it to maybeCanonicalize, which will either make a smart key out of\n it or return the value itself. Otherwise (if there are zero values or more than one value), then hand off to\n makeSmartKey which will make a CanonicalizedSmartKey (if possible) or a SmartKey (otherwise).\n\n:param values: (java.lang.Object...) - the value or values to turn into a key\n:return: (java.lang.Object) a potentially canonicalized key for use in a map"
 },
 "path": "io.deephaven.db.util.caching.C14nUtil",
 "typeName": "class"
}