{
 "className": "io.deephaven.db.util.DBColorUtilImpl",
 "methods": {
  "background": "Creates a table format encoding with specified background color and an unformatted foreground.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Color) - color represented by a Color\n  :return: (long) table format encoding with specified background color and unformatted foreground\n  \n*Overload 2*  \n  :param color: (java.lang.String) - the hex representation or the case-insensitive color name\n  :return: (long) table format encoding with specified background color and unformatted foreground",
  "backgroundForeground": "Creates a table format encoding with specified foreground and background colors.\n\n*Overload 1*  \n  :param bg: (io.deephaven.gui.color.Color) - background color represented by a Color\n  :param fg: (io.deephaven.gui.color.Color) - foreground color represented by a Color\n  :return: (long) table format encoding with specified foreground and background colors\n  \n*Overload 2*  \n  :param bg: (java.lang.String) - background color represented by a String. This may be the hex representation or the\n          case-insensitive color name\n  :param fg: (java.lang.String) - foreground color represented by a String. This may be the hex representation or the\n          case-insensitive color name\n  :return: (long) table format encoding with specified foreground and background colors",
  "backgroundForegroundAuto": "Creates a table format encoding with specified background color and automatically chosen contrasting foreground\n color.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Color) - background color represented by a Color\n  :return: (long) table format encoding with background color and auto-generated foreground color\n  \n*Overload 2*  \n  :param color: (java.lang.String) - background color represented by a String. This may be the hex representation or the\n          case-insensitive color name\n  :return: (long) table format encoding with background color and auto-generated foreground color",
  "backgroundOverride": "Background with Override .. Overrides the default selection color.\n\n*Overload 1*  \n  :param color: long\n  :return: long\n  \n*Overload 2*  \n  :param color: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: long",
  "bg": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for background(Color).\n \n This variant takes color RBG components as inputs.\n\n*Overload 1*  \n  :param r: long\n  :param g: long\n  :param b: long\n  :return: long\n  \n*Overload 2*  \n  :param color: long\n  :return: long\n  \n*Overload 3*  \n  :param color: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 4*  \n  :param color: java.lang.String\n  :return: long",
  "bgfg": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for backgroundForeground(Color, Color).\n \n This variant takes color RBG components as inputs.\n\n*Overload 1*  \n  :param bgr: long\n  :param bgg: long\n  :param bgb: long\n  :param fgr: long\n  :param fgg: long\n  :param fgb: long\n  :return: long\n  \n*Overload 2*  \n  :param bg: long\n  :param fg: long\n  :return: long\n  \n*Overload 3*  \n  :param bg: io.deephaven.gui.color.Color\n  :param fg: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 4*  \n  :param bg: java.lang.String\n  :param fg: java.lang.String\n  :return: long",
  "bgfga": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for backgroundForegroundAuto(Color)\n\n This variant takes color RBG components as inputs.\n\n*Overload 1*  \n  :param bgr: long\n  :param bgg: long\n  :param bgb: long\n  :return: long\n  \n*Overload 2*  \n  :param color: long\n  :return: long\n  \n*Overload 3*  \n  :param color: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 4*  \n  :param color: java.lang.String\n  :return: long",
  "bgo": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for backgroundOverride(Color).\n \n This variant takes the input color as a Color.\n\n*Overload 1*  \n  :param color: long\n  :return: long\n  \n*Overload 2*  \n  :param color: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: long",
  "fg": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for foreground(Color).\n \n This variant takes color RBG components as inputs.\n\n*Overload 1*  \n  :param color: long\n  :return: long\n  \n*Overload 2*  \n  :param color: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: long\n  \n*Overload 4*  \n  :param r: long\n  :param g: long\n  :param b: long\n  :return: long",
  "fgo": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for foregroundOverride(Color).\n \n This variant takes the input color as a Color.\n\n*Overload 1*  \n  :param color: long\n  :return: long\n  \n*Overload 2*  \n  :param color: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: long",
  "foreground": "Creates a table format encoding with specified foreground color and unformatted background.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Color) - color represented by a Color\n  :return: (long) table format encoding with specified foreground color and unformatted background\n  \n*Overload 2*  \n  :param color: (java.lang.String) - the hex representation or the case-insensitive color name\n  :return: (long) table format encoding with specified foreground color and unformatted background",
  "foregroundOverride": "Foreground with Override .. Overrides the default selection color.\n\n*Overload 1*  \n  :param color: long\n  :return: long\n  \n*Overload 2*  \n  :param color: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: long",
  "heatmap": "Creates a table format encoding for the heat map at value. A contrasting foreground color is\n automatically chosen.\n\n*Overload 1*  \n  :param value: (double) - determines the color used by its location in the heat map's range\n  :param min: (double) - minimum value of the heat map range\n  :param max: (double) - maximum value of the heat map range\n  :param bg1: (long) - background color at or below the minimum value of the heat map. Encoded as a long\n  :param bg2: (long) - background color at or above the maximum value of the heat map. Encoded as a long\n  :return: (long) table format encoding with background color and auto-generated foreground color determined by a heat map\n  \n*Overload 2*  \n  :param value: (double) - determines the color used by its location in the heat map's range\n  :param min: (double) - minimum value of the heat map range\n  :param max: (double) - maximum value of the heat map range\n  :param bg1: (io.deephaven.gui.color.Color) - background color at or below the minimum value of the heat map.\n  :param bg2: (io.deephaven.gui.color.Color) - background color at or above the maximum value of the heat map.\n  :return: (long) table format encoding with background color and auto-generated foreground color determined by a heat map\n  \n*Overload 3*  \n  :param value: (double) - determines the color used by its location in the heat map's range\n  :param min: (double) - minimum value of the heat map range\n  :param max: (double) - maximum value of the heat map range\n  :param bg1: (java.lang.String) - background color at or below the minimum value of the heat map.\n  :param bg2: (java.lang.String) - background color at or above the maximum value of the heat map.\n  :return: (long) table format encoding with background color and auto-generated foreground color determined by a heat map",
  "heatmapFg": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for heatmapForeground(double, double, double, Color, Color)\n\n This variant takes the input colors encoded as a longs. These colors must be formatted as a foreground (i.e.\n through fg() call) for this to work as expected.\n\n*Overload 1*  \n  :param value: double\n  :param min: double\n  :param max: double\n  :param fg1: long\n  :param fg2: long\n  :return: long\n  \n*Overload 2*  \n  :param value: double\n  :param min: double\n  :param max: double\n  :param fg1: io.deephaven.gui.color.Color\n  :param fg2: io.deephaven.gui.color.Color\n  :return: long\n  \n*Overload 3*  \n  :param value: double\n  :param min: double\n  :param max: double\n  :param fg1: java.lang.String\n  :param fg2: java.lang.String\n  :return: long",
  "heatmapForeground": "Creates a table format encoding for the heat map at value with specified foreground color and unformatted\n background.\n\n*Overload 1*  \n  :param value: (double) - determines the color used by its location in the heat map's range\n  :param min: (double) - minimum value of the heat map range.\n  :param max: (double) - maximum value of the heat map range.\n  :param fg1: (io.deephaven.gui.color.Color) - foreground color at or below the minimum value of the heat map\n  :param fg2: (io.deephaven.gui.color.Color) - foreground color at or above the maximum value of the heat map\n  :return: (long) table format encoding with foreground color determined by a heat map\n  \n*Overload 2*  \n  :param value: (double) - determines the color used by its location in the heat map's range\n  :param min: (double) - minimum value of the heat map range.\n  :param max: (double) - maximum value of the heat map range.\n  :param fg1: (java.lang.String) - foreground color at or below the minimum value of the heat map\n  :param fg2: (java.lang.String) - foreground color at or above the maximum value of the heat map\n  :return: (long) table format encoding with foreground color determined by a heat map",
  "isBackgroundSelectionOverride": "Checks if a background color should override selection.\n\n:param color: (long) - the color to check\n:return: (boolean) true if the color should override selection, false otherwise",
  "isForegroundSelectionOverride": "Checks if a foreground color should override selection.\n\n:param color: (long) - the color to check\n:return: (boolean) true if the color should override selection, false otherwise",
  "toLong": "Gets the formatting long of the input color\n\n*Overload 1*  \n  :param color: (long) - color encoded in a long\n  :return: (long) formatting long of the input color\n  \n*Overload 2*  \n  :param color: (io.deephaven.gui.color.Color) - color represented by a Color\n  :return: (long) formatting long of the input color\n  \n*Overload 3*  \n  :param color: (java.lang.String) - the hex representation or the case-insensitive color name\n  :return: (long) formatting long of the input color",
  "valueOf": "Returns the long value for the color with the given name. For example,\n DBColorUtil.valueOf(\"VIVID_BLUE\") == Color.VIVID_BLUE.\n \n This method has been deprecated. The new method is toLong(String)\n\n\n:param colorName: (java.lang.String) - The name of the color to retrieve.\n:return: (long) The long value for the given color"
 },
 "path": "io.deephaven.db.util.DBColorUtilImpl",
 "text": "Formatting methods from DBColorUtil. Exists so that we can statically import the DBColorUtil methods without\n importing the color fields. TODO: remove once DBColorUtil field and Color field conflicts are\n resolved. TODO: This class won't be necessary once we can import DBColorUtil as static again. TODO\n (deephaven/deephaven-core/issues/175): Move this to a new module and package",
 "typeName": "class"
}