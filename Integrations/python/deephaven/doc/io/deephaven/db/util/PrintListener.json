{
 "className": "io.deephaven.db.util.PrintListener",
 "methods": {
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "onFailureInternal": ":param originalException: java.lang.Throwable\n:param sourceEntry: io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry",
  "onUpdate": "Process notification of table changes.\n\n:param upstream: (io.deephaven.db.v2.ShiftAwareListener.Update) - The set of upstream table updates.",
  "stop": "Remove this listener from the table.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.util.PrintListener",
 "text": "A simple listener that prints out each update received from a table.\n\n This can be used to debug the performance of a query by attaching to various tables in an effort to understand\n the update pattern.  Optionally, you can also print out the head of the table.\nOutput is directed to stdout, thus this should not be enabled in production queries.\nAfter you are finished, call the stop() method to remove this listener from the source table.",
 "typeName": "class"
}