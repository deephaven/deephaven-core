{
 "className": "io.deephaven.db.util.tuples.generated.DoubleCharObjectTuple",
 "methods": {
  "canonicalize": "Canonicalize this tuple.\n\n:param canonicalizer: (java.util.function.UnaryOperator<java.lang.Object>) - The canonicalization operator to use on each object element.\n:return: (io.deephaven.db.util.tuples.generated.DoubleCharObjectTuple) This tuple if already canonical, else a new, canonical tuple of the same type",
  "compareTo": ":param other: io.deephaven.db.util.tuples.generated.DoubleCharObjectTuple\n:return: int",
  "equals": ":param other: java.lang.Object\n:return: boolean",
  "getFirstElement": ":return: double",
  "getSecondElement": ":return: char",
  "getThirdElement": ":return: java.lang.Object",
  "hashCode": ":return: int",
  "readExternal": ":param in: java.io.ObjectInput",
  "readExternalStreaming": "Alternative to Externalizable.readExternal(ObjectInput) for use when a series of tuples of\n the same type with the same element types are being read in iterative fashion.\n Primitive elements should be read with their primitive read methods (e.g. DataInput.readInt()).\n Object elements are preceded by a boolean, true if null, false otherwise. The first non-null value for a given\n Object element is then preceded by the name of the class. All non-null values are then read with a reader\n method from SerializationUtils.getReader(Class, ObjectInput), cached in cachedReaders.\n\n:param in: (java.io.ObjectInput) - The input\n:param cachedReaders: (gnu.trove.map.TIntObjectMap<io.deephaven.db.util.serialization.SerializationUtils.Reader>) - The cached readers",
  "toString": ":return: java.lang.String",
  "writeExternal": ":param out: java.io.ObjectOutput",
  "writeExternalStreaming": "Alternative to Externalizable.writeExternal(ObjectOutput) for use when a series of tuples of\n the same type with the same element types are being written in iterative fashion.\n Primitive elements should be written with their primitive write methods\n (e.g. DataOutput.writeInt(int)).\n Object elements are preceded by a boolean, true if null, false otherwise. The first non-null value for a given\n Object element is then preceded by the name of the class. All non-null values are then written with a writer\n method from SerializationUtils.getWriter(Class, ObjectOutput), cached in cachedWriters.\n\n:param out: (java.io.ObjectOutput) - The output\n:param cachedWriters: (gnu.trove.map.TIntObjectMap<io.deephaven.db.util.serialization.SerializationUtils.Writer>) - The cached writers"
 },
 "path": "io.deephaven.db.util.tuples.generated.DoubleCharObjectTuple",
 "text": "3-Tuple (triple) key class composed of double, char, and Object elements.\n Generated by TupleCodeGenerator.",
 "typeName": "class"
}