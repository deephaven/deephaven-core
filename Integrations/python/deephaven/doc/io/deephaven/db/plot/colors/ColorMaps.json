{
 "className": "io.deephaven.db.plot.colors.ColorMaps",
 "methods": {
  "closureMap": "Returns a function which uses closure functions to determine which colors is returned for an input value.\n For each input value, a map is iterated through until the closure function (map key) returns true.\n When the closure returns true, the associated color (map value) is returned.  If no such closure is found,\n an out of range color is returned.\n\n*Overload 1*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<groovy.lang.Closure<java.lang.Boolean>,COLOR>) - map from Closure to color\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function which returns the color mapped to the first Closure for which the input is true.  Out of range, null, and NaN inputs return null.\n  \n*Overload 2*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<groovy.lang.Closure<java.lang.Boolean>,COLOR>) - map from Closure to color\n  :param outOfRangeColor: (io.deephaven.gui.color.Color) - color returned when the input satisfies no Closure in the map\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function which returns the color mapped to the first Closure for which the input is true.  Null and NaN inputs return null.\n  \n*Overload 3*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<groovy.lang.Closure<java.lang.Boolean>,COLOR>) - map from Closure to color\n  :param outOfRangeColor: (io.deephaven.gui.color.Paint) - color returned when the input satisfies no Closure in the map\n  :param nullColor: (io.deephaven.gui.color.Paint) - color returned when the input is null or Double.NaN\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function which returns the color mapped to the first Closure for which the input is true",
  "heatMap": "Returns a heat map to map numerical values to colors.\n \n Values less than or equal to min return the starting color.\n Values greater than or equal to max return the ending color.\n Values in between this range are a linear combination of\n the RGB components of these two colors. Higher values\n return colors that are closer to the ending color, and\n lower values return colors that are closer to the starting color.\n \n Inputs that are null or Double.NaN return a null color.\n\n*Overload 1*  \n  :param min: (double) - minimum\n  :param max: (double) - maximum\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Color>) function for mapping double values to colors.  The starting color is blue (#0000FF) and the ending color is yellow (#FFFF00).\n  \n*Overload 2*  \n  :param min: (double) - minimum\n  :param max: (double) - maximum\n  :param startColor: (io.deephaven.gui.color.Color) - color at values less than or equal to min\n  :param endColor: (io.deephaven.gui.color.Color) - color at values greater than or equal to max\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Color>) function for mapping double values to colors\n  \n*Overload 3*  \n  :param min: (double) - minimum\n  :param max: (double) - maximum\n  :param startColor: (io.deephaven.gui.color.Color) - color at values less than or equal to min\n  :param endColor: (io.deephaven.gui.color.Color) - color at values greater than or equal to max\n  :param nullColor: (io.deephaven.gui.color.Color) - color at null input values\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Color>) function for mapping double values to colors",
  "predicateMap": "Returns a function which uses predicate functions to determine which colors is returned for an input value.\n For each input value, a map is iterated through until the predicate function (map key) returns true.\n When the predicate returns true, the associated color (map value) is returned.  If no such predicate is found,\n an out of range color is returned.\n\n*Overload 1*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<io.deephaven.db.plot.colors.ColorMaps.SerializablePredicate<java.lang.Double>,COLOR>) - map from ColorMaps.SerializablePredicate to color\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function which returns the color mapped to the first ColorMaps.SerializablePredicate for which the input is true.  Out of range, null, and NaN values return null.\n  \n*Overload 2*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<io.deephaven.db.plot.colors.ColorMaps.SerializablePredicate<java.lang.Double>,COLOR>) - map from ColorMaps.SerializablePredicate to color\n  :param outOfRangeColor: (io.deephaven.gui.color.Color) - color returned when the input satisfies no ColorMaps.SerializablePredicate in the map\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function which returns the color mapped to the first ColorMaps.SerializablePredicate for which the input is true.  Null and NaN inputs return null.\n  \n*Overload 3*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<io.deephaven.db.plot.colors.ColorMaps.SerializablePredicate<java.lang.Double>,COLOR>) - map from ColorMaps.SerializablePredicate to color\n  :param outOfRangeColor: (io.deephaven.gui.color.Paint) - color returned when the input satisfies no ColorMaps.SerializablePredicate in the map\n  :param nullColor: (io.deephaven.gui.color.Paint) - color returned when the input is null or Double.NaN\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function which returns the color mapped to the first ColorMaps.SerializablePredicate for which the input is true",
  "rangeMap": "Maps Ranges of values to specific colors.\n Values inside a given Range return the corresponding Paint.\n \n Values not in any of the specified Range return an out of range color.\n Null inputs return a null color.\n\n*Overload 1*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<io.deephaven.numerics.util.Range,COLOR>) - map of Ranges to Paints.\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function for mapping double values to colors.  Null and out of range values return null.\n  \n*Overload 2*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<io.deephaven.numerics.util.Range,COLOR>) - map of Ranges to Paints.\n  :param outOfRangeColor: (io.deephaven.gui.color.Color) - color for values not within any of the defined ranges\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function for mapping double values to colors.  Null values return null.\n  \n*Overload 3*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param map: (java.util.Map<io.deephaven.numerics.util.Range,COLOR>) - map of Ranges to Paints.\n  :param outOfRangeColor: (io.deephaven.gui.color.Paint) - color for values not within any of the defined ranges\n  :param nullColor: (io.deephaven.gui.color.Paint) - color for null values\n  :return: (java.util.function.Function<java.lang.Double,io.deephaven.gui.color.Paint>) function for mapping double values to colors"
 },
 "path": "io.deephaven.db.plot.colors.ColorMaps",
 "text": "Functions for mapping between values and Colors or Paints.",
 "typeName": "class"
}