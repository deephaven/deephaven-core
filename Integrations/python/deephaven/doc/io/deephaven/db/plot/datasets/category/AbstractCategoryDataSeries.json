{
 "className": "io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries",
 "methods": {
  "errorBarColor": "Sets the error bar Paint for this dataset.\n\n*Overload 1*  \n  :param color: io.deephaven.gui.color.Paint\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param color: int\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "getColor": "Gets the Paint for the given data point.\n\n:param category: java.lang.Comparable\n:return: (io.deephaven.gui.color.Paint) Paint for the given data point",
  "getGroup": "Gets the group for this dataset.\n\n:return: (int) group for this dataset",
  "getLabel": "Gets the point label for the given data point.\n\n:param category: java.lang.Comparable\n:return: (java.lang.String) point label for the given data point",
  "getPiePercentLabelFormat": "Gets the pie plot percent label format.\n\n:return: (java.lang.String) pie plot percent label format",
  "getPointShape": "Gets the point shape for the given data point.\n\n:param category: java.lang.Comparable\n:return: (io.deephaven.gui.shape.Shape) point shape for the given data point",
  "getPointSize": "Gets the point size for the given data point.\n\n:param category: java.lang.Comparable\n:return: (java.lang.Double) point size for the given data point",
  "getSeriesColor": "Gets the series color.\n\n:return: (io.deephaven.gui.color.Paint) series color",
  "gradientVisible": "Sets the visibility of bar gradients for this dataset.\n\n:param visible: boolean\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "group": "Sets the group for this dataset.\n\n:param group: int\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.",
  "lineColor": "Sets the default line Paint for this dataset.\n\n*Overload 1*  \n  :param color: io.deephaven.gui.color.Paint\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param color: int\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "lineStyle": "Sets the LineStyle for this dataset\n\n:param style: io.deephaven.db.plot.LineStyle\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this dat",
  "linesVisible": "Sets the visibility of the lines for this dataset.\n\n:param visible: java.lang.Boolean\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "piePercentLabelFormat": "Sets the format of the percentage point label format\n in pie plots.\n\n:param format: java.lang.String\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.",
  "pointColor": "Sets the point color.  Unspecified points use the default color.\n\n*Overload 1*  \n  :param color: io.deephaven.gui.color.Paint\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param color: int\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeriesInternal) this CategoryDataSeries\n  \n*Overload 4*  \n  :param category: java.lang.Comparable\n  :param color: io.deephaven.gui.color.Paint\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 5*  \n  :param category: java.lang.Comparable\n  :param color: int\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 6*  \n  :param category: java.lang.Comparable\n  :param color: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeriesInternal) this CategoryDataSeries\n  \n*Overload 7*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable,COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param colors: java.util.Map<CATEGORY,COLOR>\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 8*  \n  :param t: io.deephaven.db.tables.Table\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 9*  \n  :param sds: io.deephaven.db.plot.filters.SelectableDataSet\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "pointColorByY": "Sets the point color for a data point based upon the y-value.\n\n*Overload 1*  \n  Note: Java generics information - <T extends io.deephaven.gui.color.Paint>\n  \n  :param colors: java.util.Map<java.lang.Double,T>\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  Note: Java generics information - <T extends io.deephaven.gui.color.Paint>\n  \n  :param colors: groovy.lang.Closure<T>\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this DataSeries",
  "pointColorInteger": "Sets the point color.  Unspecified points use the default color.\n\nNote: Java generics information - <CATEGORY extends java.lang.Comparable,COLOR extends java.lang.Integer>\n\n:param colors: java.util.Map<CATEGORY,COLOR>\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "pointLabel": "Sets the point label for data point i from index i of the input labels.\n Points outside of these indices are unlabeled.\n\n*Overload 1*  \n  :param label: java.lang.Object\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this XYDataSeries\n  \n*Overload 2*  \n  :param category: java.lang.Comparable\n  :param label: java.lang.Object\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable,LABEL>\n  \n  :param labels: java.util.Map<CATEGORY,LABEL>\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 4*  \n  :param t: io.deephaven.db.tables.Table\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 5*  \n  :param sds: io.deephaven.db.plot.filters.SelectableDataSet\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "pointLabelFormat": "Sets the point label format.\n \n Use {0} where the data series name should be inserted,\n {1} for the x-value and\n {2} y-value\n e.g. \"{0}: ({1}, {2})\" will display as Series1: (2.0, 5.5).\n\n:param format: java.lang.String\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.",
  "pointShape": "Sets the point shapes for data point i from index i of the input labels.\n Points outside of these indices use default shapes.\n\n*Overload 1*  \n  :param shape: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this DataSeries\n  \n*Overload 2*  \n  :param shape: io.deephaven.gui.shape.Shape\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this DataSeries\n  \n*Overload 3*  \n  :param category: java.lang.Comparable\n  :param shape: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 4*  \n  :param category: java.lang.Comparable\n  :param shape: io.deephaven.gui.shape.Shape\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 5*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param shapes: java.util.Map<CATEGORY,java.lang.String>\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 6*  \n  :param t: io.deephaven.db.tables.Table\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 7*  \n  :param sds: io.deephaven.db.plot.filters.SelectableDataSet\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "pointSize": "Sets the point size.  A scale factor of 1 is the default size.  A scale factor of 2 is 2x the\n default size.  Unspecified points use the default size.\n\n*Overload 1*  \n  :param factor: int\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.\n  \n*Overload 2*  \n  :param factor: long\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.\n  \n*Overload 3*  \n  :param factor: double\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.\n  \n*Overload 4*  \n  :param factor: java.lang.Number\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.\n  \n*Overload 5*  \n  :param category: java.lang.Comparable\n  :param factor: int\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 6*  \n  :param category: java.lang.Comparable\n  :param factor: long\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 7*  \n  :param category: java.lang.Comparable\n  :param factor: double\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 8*  \n  :param category: java.lang.Comparable\n  :param factor: java.lang.Number\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 9*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param categories: CATEGORY[]\n  :param factors: int[]\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 10*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param categories: CATEGORY[]\n  :param factors: long[]\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 11*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable,NUMBER extends java.lang.Number>\n  \n  :param categories: CATEGORY[]\n  :param factors: NUMBER[]\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 12*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param categories: CATEGORY[]\n  :param factors: double[]\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 13*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable,NUMBER extends java.lang.Number>\n  \n  :param factors: java.util.Map<CATEGORY,NUMBER>\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 14*  \n  :param t: io.deephaven.db.tables.Table\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 15*  \n  :param sds: io.deephaven.db.plot.filters.SelectableDataSet\n  :param keyColumn: java.lang.String\n  :param valueColumn: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "pointsVisible": "Sets the visibility of the point shapes for this dataset.\n\n:param visible: java.lang.Boolean\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "seriesColor": "Sets the default Paint for this dataset.\n\n*Overload 1*  \n  :param color: io.deephaven.gui.color.Paint\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param color: int\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param color: java.lang.String\n  :return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this CategoryDataSeries",
  "toolTipPattern": "Sets the tooltip format.\n\n:param format: java.lang.String\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.",
  "xToolTipPattern": "Sets the x-value tooltip format.\n\n:param format: java.lang.String\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series.",
  "yToolTipPattern": "Sets the y-value tooltip format.\n\n:param format: java.lang.String\n:return: (io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries) this data series."
 },
 "path": "io.deephaven.db.plot.datasets.category.AbstractCategoryDataSeries",
 "text": "Common class for CategoryDataSeriesInternal.\n \n Please note that any method which uses a SwappableTable must call a lastBy()!",
 "typeName": "class"
}