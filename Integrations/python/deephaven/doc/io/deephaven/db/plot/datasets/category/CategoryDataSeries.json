{
 "className": "io.deephaven.db.plot.datasets.category.CategoryDataSeries",
 "methods": {
  "errorBarColor": "Sets the error bar Paint for this dataset.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param color: (int) - index of the color in the series color palette\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "gradientVisible": "Sets the visibility of bar gradients for this dataset.\n\n:param visible: (boolean) - whether to display bar gradients or not\n:return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "group": "Sets the group for this dataset.\n\n:param group: int\n:return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this data series.",
  "lineColor": "Sets the default line Paint for this dataset.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param color: (int) - index of the color in the series color palette\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "lineStyle": "Sets the LineStyle for this dataset\n\n:param style: (io.deephaven.db.plot.LineStyle) - line style\n:return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this dat",
  "linesVisible": "Sets the visibility of the lines for this dataset.\n\n:param visible: (java.lang.Boolean) - whether to display lines or not\n:return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "piePercentLabelFormat": "Sets the format of the percentage point label format in pie plots.\n\n:param format: (java.lang.String) - format\n:return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this data series.",
  "pointColor": "Sets the point color. Unspecified points use the default color.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - default point color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param color: (int) - index of the color in the series color palette to use as the default color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param color: (java.lang.String) - default point color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 4*  \n  :param category: (java.lang.Comparable) - data point\n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 5*  \n  :param category: (java.lang.Comparable) - data point\n  :param color: (int) - index of the color in the series color palette\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 6*  \n  :param category: (java.lang.Comparable) - data point\n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 7*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable,\n  COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param colors: (java.util.Map<CATEGORY,COLOR>) - map from data points to their Paints\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 8*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param colors: (java.util.function.Function<java.lang.Comparable,COLOR>) - function from data points to their Paints\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 9*  \n  Note: Java generics information - <COLOR extends io.deephaven.gui.color.Paint>\n  \n  :param colors: (groovy.lang.Closure<COLOR>) - closure from data points to their Paints\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 10*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param keyColumn: (java.lang.String) - column in t, specifying category values\n  :param valueColumn: (java.lang.String) - column in t, specifying Paints or ints/Integers representing color palette\n          values.\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 11*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table)\n  :param keyColumn: (java.lang.String) - column in sds, specifying category values\n  :param valueColumn: (java.lang.String) - column in sds, specifying Paints or ints/Integers representing color palette\n          values.\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "pointColorByY": "Sets the point color for a data point based upon the y-value.\n\nNote: Java generics information - <T extends io.deephaven.gui.color.Paint>\n\n:param colors: (java.util.Map<java.lang.Double,T>) - map from the y-value of data points to Paint\n:return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "pointColorInteger": "Sets the point color. Unspecified points use the default color.\n\n*Overload 1*  \n  :param colors: (java.util.Map<CATEGORY,COLOR>) - map from data points to the index of the color palette\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  Note: Java generics information - <COLOR extends java.lang.Integer>\n  \n  :param colors: (java.util.function.Function<java.lang.Comparable,COLOR>) - function from data points to the index of the color palette\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  Note: Java generics information - <COLOR extends java.lang.Integer>\n  \n  :param colors: (groovy.lang.Closure<COLOR>) - closure from data points to the index of the color palette\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "pointLabel": "Sets the point label for data point i from index i of the input labels. Points outside of these indices are\n unlabeled.\n\n*Overload 1*  \n  :param category: (java.lang.Comparable) - category value\n  :param label: (java.lang.Object) - label\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable,\n  LABEL>\n  \n  :param labels: (java.util.Map<CATEGORY,LABEL>) - map used to determine point labels\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  Note: Java generics information - <LABEL>\n  \n  :param labels: (java.util.function.Function<java.lang.Comparable,LABEL>) - function used to determine point labels\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 4*  \n  Note: Java generics information - <LABEL>\n  \n  :param labels: (groovy.lang.Closure<LABEL>) - closure used to determine point labels for input categories\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 5*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param keyColumn: (java.lang.String) - column in t, specifying category values\n  :param valueColumn: (java.lang.String) - column in t, specifying labels\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 6*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table)\n  :param keyColumn: (java.lang.String) - column in sds, specifying category values\n  :param valueColumn: (java.lang.String) - column in sds, specifying labels\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "pointShape": "Sets the point shapes for data point i from index i of the input labels. Points outside of these indices use\n default shapes.\n\n*Overload 1*  \n  :param category: (java.lang.Comparable) - category value\n  :param shape: (java.lang.String) - shape\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param category: (java.lang.Comparable) - category value\n  :param shape: (io.deephaven.gui.shape.Shape) - shape\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param shapes: (java.util.Map<CATEGORY,java.lang.String>) - map used to determine point shapes\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 4*  \n  :param shapes: (java.util.function.Function<java.lang.Comparable,java.lang.String>) - function used to determine point shapes\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 5*  \n  :param shapes: (groovy.lang.Closure<java.lang.String>) - closure used to determine point shapes\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 6*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param keyColumn: (java.lang.String) - column in t, specifying category values\n  :param valueColumn: (java.lang.String) - column in t, specifying shapes\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 7*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table)\n  :param keyColumn: (java.lang.String) - column in sds, specifying category values\n  :param valueColumn: (java.lang.String) - column in sds, specifying shapes\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "pointSize": "Sets the point size. A scale factor of 1 is the default size. A scale factor of 2 is 2x the default size.\n Unspecified points use the default size.\n\n*Overload 1*  \n  :param category: (java.lang.Comparable) - data point\n  :param factor: (int) - factor to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 2*  \n  :param category: (java.lang.Comparable) - data point\n  :param factor: (long) - factor to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 3*  \n  :param category: (java.lang.Comparable) - data point\n  :param factor: (double) - factor to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 4*  \n  :param category: (java.lang.Comparable) - data point\n  :param factor: (java.lang.Number) - factor to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 5*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param categories: (CATEGORY[]) - data points\n  :param factors: (int[]) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 6*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param categories: (CATEGORY[]) - data points\n  :param factors: (double[]) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 7*  \n  Note: Java generics information - <CATEGORY extends java.lang.Comparable>\n  \n  :param categories: (CATEGORY[]) - data points\n  :param factors: (long[]) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 8*  \n  :param categories: (CATEGORY[]) - data points\n  :param factors: (NUMBER[]) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 9*  \n  :param factors: (java.util.Map<CATEGORY,NUMBER>) - map used to set sizes of specific data points\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 10*  \n  Note: Java generics information - <NUMBER extends java.lang.Number>\n  \n  :param factors: (java.util.function.Function<java.lang.Comparable,NUMBER>) - function used to set sizes of data points\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 11*  \n  Note: Java generics information - <NUMBER extends java.lang.Number>\n  \n  :param factors: (groovy.lang.Closure<NUMBER>) - closure used to set sizes of data points\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 12*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param keyColumn: (java.lang.String) - column in t, specifying category values\n  :param valueColumn: (java.lang.String) - column in t, specifying point sizes\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries\n  \n*Overload 13*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table)\n  :param keyColumn: (java.lang.String) - column in sds, specifying category values\n  :param valueColumn: (java.lang.String) - column in sds, specifying point sizes\n  :return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries",
  "pointsVisible": "Sets the visibility of the point shapes for this dataset.\n\n:param visible: (java.lang.Boolean) - whether to display point shapes or not\n:return: (io.deephaven.db.plot.datasets.category.CategoryDataSeries) this CategoryDataSeries"
 },
 "path": "io.deephaven.db.plot.datasets.category.CategoryDataSeries",
 "text": "Dataset with discrete and numeric components. Discrete values must extend Comparable and are called\n categories.",
 "typeName": "interface"
}