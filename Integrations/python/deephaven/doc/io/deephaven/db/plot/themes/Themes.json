{
 "className": "io.deephaven.db.plot.themes.Themes",
 "methods": {
  "addThemeFromFile": "**Incompatible overloads text - text from the first overload:**\n\nAdds a theme to the collection from the file\n\n*Overload 1*  \n  :param filePath: (java.lang.String) - must be chart format\n  \n*Overload 2*  \n  :param file: (java.io.File) - must be chart format",
  "containsKey": ":param key: java.lang.Object\n:return: boolean",
  "containsValue": ":param value: java.lang.Object\n:return: boolean",
  "entrySet": ":return: java.util.Set<java.util.Map.Entry<java.lang.String,io.deephaven.db.plot.Theme>>",
  "get": ":param key: java.lang.Object\n:return: io.deephaven.db.plot.Theme",
  "isEmpty": ":return: boolean",
  "keySet": ":return: java.util.Set<java.lang.String>",
  "put": ":param key: java.lang.String\n:param value: io.deephaven.db.plot.Theme\n:return: io.deephaven.db.plot.Theme",
  "putAll": ":param m: java.util.Map<? extendsjava.lang.String,? extendsio.deephaven.db.plot.Theme>",
  "remove": ":param key: java.lang.Object\n:return: io.deephaven.db.plot.Theme",
  "setDefaultTheme": "Defines the default Theme used when one isn't specified.\n\n:param defaultTheme: (io.deephaven.db.plot.Theme) - default theme",
  "size": ":return: int",
  "theme": "**Incompatible overloads text - text from the first overload:**\n\nReturns a specified theme.\n\n*Overload 1*  \n  :param name: (java.lang.String) - name of the theme\n  :return: (io.deephaven.db.plot.Theme) theme\n  \n*Overload 2*  \n  :return: (io.deephaven.db.plot.Theme) default theme",
  "themeNames": "Returns the names of all available themess\n\n:return: (java.lang.String[]) names of all available themes",
  "values": ":return: java.util.Collection<io.deephaven.db.plot.Theme>"
 },
 "path": "io.deephaven.db.plot.themes.Themes",
 "text": "Constructs Themes from .theme XML files.\n\n The constructed Themes are held in a Map\n with Theme names as keys.",
 "typeName": "class"
}