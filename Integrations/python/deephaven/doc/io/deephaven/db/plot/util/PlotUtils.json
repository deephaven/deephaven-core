{
 "className": "io.deephaven.db.plot.util.PlotUtils",
 "methods": {
  "createCategoryComboAgg": ":param agg: io.deephaven.db.v2.by.ComboAggregateFactory.ComboBy\n:return: io.deephaven.db.v2.by.ComboAggregateFactory",
  "createCategoryHistogramTable": ":param t: io.deephaven.db.tables.Table\n:param byColumns: java.lang.String...\n:return: io.deephaven.db.tables.Table",
  "createCategoryTable": ":param t: io.deephaven.db.tables.Table\n:param catColumns: java.lang.String[]\n:return: io.deephaven.db.tables.Table",
  "createCategoryTableHandle": "*Overload 1*  \n  :param t: io.deephaven.db.tables.Table\n  :param catColumn: java.lang.String\n  :param otherColumns: java.lang.String...\n  :return: io.deephaven.db.plot.util.tables.TableHandle\n  \n*Overload 2*  \n  :param t: io.deephaven.db.tables.Table\n  :param catColumns: java.lang.String[]\n  :param otherColumns: java.lang.String...\n  :return: io.deephaven.db.plot.util.tables.TableHandle",
  "createCategoryTableMapHandle": "*Overload 1*  \n  :param t: io.deephaven.db.tables.Table\n  :param catColumn: java.lang.String\n  :param otherColumns: java.lang.String[]\n  :param byColumns: java.lang.String[]\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.util.tables.TableBackedTableMapHandle\n  \n*Overload 2*  \n  :param t: io.deephaven.db.tables.Table\n  :param catColumns: java.lang.String[]\n  :param otherColumns: java.lang.String[]\n  :param byColumns: java.lang.String[]\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.util.tables.TableBackedTableMapHandle",
  "createEmptyIndexableData": "Note: Java generics information - <T>\n\n:param c: java.lang.Class<T>\n:param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n:return: io.deephaven.db.plot.datasets.data.IndexableData",
  "createEmptyIndexableNumericDataArray": ":param dataType: java.lang.Class\n:param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n:return: io.deephaven.db.plot.datasets.data.IndexableNumericData",
  "createIndexableData": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param t: io.deephaven.db.tables.Table\n  :param column: java.lang.String\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableData\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param snapshotData: java.util.Map<java.lang.String,java.lang.Object>\n  :param tableDefinition: io.deephaven.db.tables.TableDefinition\n  :param column: java.lang.String\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableData\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param snapshotData: java.util.Map<java.lang.String,java.lang.Object>\n  :param c: java.lang.Class<T>\n  :param column: java.lang.String\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableData\n  \n*Overload 4*  \n  Note: Java generics information - <T>\n  \n  :param data: java.lang.Object\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableData\n  \n*Overload 5*  \n  Note: Java generics information - <T>\n  \n  :param data: java.lang.Object\n  :param c: java.lang.Class<T>\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableData\n  \n*Overload 6*  \n  Note: Java generics information - <T extends java.lang.Comparable>\n  \n  :param data: T[]\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableData",
  "createIndexableNumericDataArray": "*Overload 1*  \n  :param data: java.util.Map<java.lang.String,java.lang.Object>\n  :param th: io.deephaven.db.plot.util.tables.TableHandle\n  :param column: java.lang.String\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableNumericData\n  \n*Overload 2*  \n  :param data: java.util.Map<java.lang.String,java.lang.Object>\n  :param t: io.deephaven.db.tables.Table\n  :param column: java.lang.String\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableNumericData\n  \n*Overload 3*  \n  :param data: java.util.Map<java.lang.String,java.lang.Object>\n  :param tableDefinition: io.deephaven.db.tables.TableDefinition\n  :param column: java.lang.String\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableNumericData\n  \n*Overload 4*  \n  :param data: java.lang.Object\n  :param dataType: java.lang.Class\n  :param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n  :return: io.deephaven.db.plot.datasets.data.IndexableNumericData",
  "doubleTable": "Creates a new table with a column of doubles holding the specified data.\n Values of x are converted to their corresponding double values.\n Nulls are mapped to Double.NaN.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param x: (T[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param x: (java.util.List<T>) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 3*  \n  :param x: (short[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 4*  \n  :param x: (int[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 5*  \n  :param x: (long[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 6*  \n  :param x: (float[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 7*  \n  :param x: (double[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 8*  \n  :param x: (java.lang.Double[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 9*  \n  :param x: (java.lang.Short[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 10*  \n  :param x: (java.lang.Long[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 11*  \n  :param x: (java.lang.Float[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 12*  \n  :param x: (java.lang.Integer[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x",
  "getColumnConditions": ":param arg: io.deephaven.db.tables.Table\n:param column: java.lang.String\n:return: java.util.List<io.deephaven.gui.table.filters.Condition>",
  "getNColors": "Gets the Color array for this palette.\n\n:param colorPalette: io.deephaven.gui.color.ColorPalette\n:param n: int\n:return: (io.deephaven.gui.color.Color[]) Array of Color for this palette.",
  "getNumberFromNumericOrTimeSource": ":param t: io.deephaven.db.tables.Table\n:param numericCol: java.lang.String\n:param plotInfo: io.deephaven.db.plot.errors.PlotInfo\n:return: java.util.function.Function<java.lang.Long,java.lang.Number>",
  "intToColor": "Gets the color of the chart's color palette at the specified index color.\n\n*Overload 1*  \n  :param chart: (io.deephaven.db.plot.ChartImpl) - chart\n  :param color: (java.lang.Integer) - index\n  :return: (io.deephaven.gui.color.Paint) color of the chart at the index color\n  \n*Overload 2*  \n  :param color: java.lang.Integer\n  :return: io.deephaven.gui.color.Paint",
  "maxIgnoreNaN": "*Overload 1*  \n  :param values: double...\n  :return: double\n  \n*Overload 2*  \n  :param oldMin: double\n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param oldMin: float\n  :param value: float\n  :return: float",
  "maxIgnoreNull": "*Overload 1*  \n  :param oldMin: int\n  :param value: int\n  :return: int\n  \n*Overload 2*  \n  :param oldMin: short\n  :param value: short\n  :return: short\n  \n*Overload 3*  \n  :param oldMin: long\n  :param value: long\n  :return: long",
  "minIgnoreNaN": "*Overload 1*  \n  :param values: double...\n  :return: double\n  \n*Overload 2*  \n  :param oldMin: double\n  :param value: double\n  :return: double\n  \n*Overload 3*  \n  :param oldMin: float\n  :param value: float\n  :return: float",
  "minIgnoreNull": "*Overload 1*  \n  :param oldMin: int\n  :param value: int\n  :return: int\n  \n*Overload 2*  \n  :param oldMin: short\n  :param value: short\n  :return: short\n  \n*Overload 3*  \n  :param oldMin: long\n  :param value: long\n  :return: long",
  "numberToDouble": "Gets the double equivalent of the Number.\n Null QueryConstants are converted to Double.NaN.\n\n:param n: (java.lang.Number) - number\n:return: (double) double value of n",
  "table": "**Incompatible overloads text - text from the first overload:**\n\nCreates a new table with a column holding the specified data.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param x: (T[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param x: (java.util.List<T>) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 3*  \n  :param x: (short[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 4*  \n  :param x: (int[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 5*  \n  :param x: (long[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 6*  \n  :param x: (float[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x\n  \n*Overload 7*  \n  :param x: (double[]) - data\n  :param colName: (java.lang.String) - column name\n  :return: (io.deephaven.db.tables.Table) new table with column holding x",
  "toDouble": "Creates a new array of doubles holding the specified data.\n Values of x are converted to their corresponding double values.\n Nulls are mapped to Double.NaN.\n\n*Overload 1*  \n  :param x: (float[]) - data\n  :return: (double[]) new float array holding x\n  \n*Overload 2*  \n  :param x: (int[]) - data\n  :return: (double[]) new float array holding x\n  \n*Overload 3*  \n  :param x: (long[]) - data\n  :return: (double[]) new float array holding x\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param x: (T[]) - data\n  :return: (double[]) new float array holding x",
  "toFloat": "Creates a new array of floats holding the specified data.\n Values of x are converted to their corresponding float values.\n Nulls are mapped to Float.NaN.\n\n*Overload 1*  \n  :param x: (double[]) - data\n  :return: (float[]) new float array holding x\n  \n*Overload 2*  \n  :param x: (int[]) - data\n  :return: (float[]) new float array holding x\n  \n*Overload 3*  \n  :param x: (long[]) - data\n  :return: (float[]) new float array holding x\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param x: (T[]) - data\n  :return: (float[]) new float array holding x",
  "uniqueVarName": "Gets a variable name not already in the QueryScope by appending\n random integers to the end of root until a unique name is found.\n\n:param root: (java.lang.String) - base variable name\n:return: (java.lang.String) unique randomized variable name based off root"
 },
 "path": "io.deephaven.db.plot.util.PlotUtils",
 "text": "Utilities class for plotting.",
 "typeName": "class"
}