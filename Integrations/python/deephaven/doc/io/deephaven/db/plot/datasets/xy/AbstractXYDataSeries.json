{
 "className": "io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries",
 "methods": {
  "errorBarColor": "Sets the error bar Paint for this dataset.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this DataSeries\n  \n*Overload 2*  \n  :param color: (int) - index of the color in the series color palette\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this DataSeries\n  \n*Overload 3*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this DataSeries",
  "getPointColor": "Gets the color of the data point at index i.\n\n:param i: (int) - index\n:return: (io.deephaven.gui.color.Paint) color of this data point at index i",
  "getPointLabel": "Gets the label of the data point at index i.\n\n:param i: (int) - index\n:return: (java.lang.String) label of this data point at index i",
  "getPointShape": "Gets the shape of the data point at index i.\n\n:param i: (int) - index\n:return: (io.deephaven.gui.shape.Shape) shape of this data point at index i",
  "getPointSize": "Gets the size of the data point at index i.\n\n:param i: (int) - index\n:return: (java.lang.Double) size of this data point at index i",
  "getSeriesColor": "Gets the series color.\n\n:return: (io.deephaven.gui.color.Paint) series color",
  "gradientVisible": "Sets whether bar gradients are visible.\n\n:param visible: (boolean) - bar gradient visibility\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "lineColor": "Defines the default line color.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.\n  \n*Overload 2*  \n  :param color: (int) - color palette index\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.\n  \n*Overload 3*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "lineStyle": "Sets the line style.\n\n:param style: (io.deephaven.db.plot.LineStyle) - style\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "linesVisible": "Sets whether lines are visible.\n\n:param visible: (java.lang.Boolean) - line visibility\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "pointColor": "Sets the point color. Unspecified points use the default color.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.\n  \n*Overload 2*  \n  :param color: (int) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.\n  \n*Overload 3*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.\n  \n*Overload 4*  \n  Note: Java generics information - <T extends io.deephaven.gui.color.Paint>\n  \n  :param colors: (io.deephaven.db.plot.datasets.data.IndexableData<T>) - colors. The color for data point i comes from index i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 5*  \n  :param colors: (io.deephaven.gui.color.Paint...) - colors. The color for data point i comes from index i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 6*  \n  :param colors: (int...) - color palette indices. The color for data point i comes from index i. A value of 3 corresponds to\n          the 3rd color from the color pallette.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 7*  \n  :param colors: (java.lang.Integer...) - color palette indices. The color for data point i comes from index i. A value of 3 corresponds to\n          the 3rd color from the color pallette.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 8*  \n  :param colors: (java.lang.String...) - color names. The color for data point i comes from index i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 9*  \n  :param t: (io.deephaven.db.tables.Table) - table containing colors\n  :param columnName: (java.lang.String) - column in t containing colors. The color data for point i comes from row i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 10*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table) containing colors\n  :param columnName: (java.lang.String) - column in sds containing colors. The color data for point i comes from row i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries",
  "pointColorByY": "Sets the point color for a data point based upon the y-value.\n\n*Overload 1*  \n  Note: Java generics information - <T extends io.deephaven.gui.color.Paint>\n  \n  :param colors: (java.util.function.Function<java.lang.Double,T>) - function from the y-value of data points to Paint\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this DataSeries\n  \n*Overload 2*  \n  Note: Java generics information - <T extends io.deephaven.gui.color.Paint>\n  \n  :param colors: (groovy.lang.Closure<T>) - function from the y-value of data points to Paint\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this DataSeries",
  "pointColorInteger": "Sets the point color. Unspecified points use the default color.\n\n:param colors: (io.deephaven.db.plot.datasets.data.IndexableData<java.lang.Integer>) - colors. The color for data point i comes from index i.\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries",
  "pointLabel": "Sets the point label for data point i from index i of the input labels. Points outside of these indices are\n unlabeled.\n\n*Overload 1*  \n  :param label: (java.lang.Object) - label\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 2*  \n  :param labels: (io.deephaven.db.plot.datasets.data.IndexableData<?>) - labels\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 3*  \n  :param labels: (java.lang.Object...) - labels\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.tables.Table) - table containing labels\n  :param columnName: (java.lang.String) - column in t containing labels. The label data for point i comes from row i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 5*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table) containing labels\n  :param columnName: (java.lang.String) - column in sds containing labels. The color data for point i comes from row i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries",
  "pointLabelFormat": "Sets the point label format.\n \n Use {0} where the data series name should be inserted, {1} for the x-value and {2} y-value e.g. \"{0}: ({1}, {2})\"\n will display as Series1: (2.0, 5.5).\n\n:param format: (java.lang.String) - format\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "pointShape": "Sets the point shapes for data point i from index i of the input labels. Points outside of these indices use\n default shapes.\n\n*Overload 1*  \n  :param shape: (java.lang.String) - shape\n  :return: (io.deephaven.db.plot.datasets.DataSeries) this DataSeries\n  \n*Overload 2*  \n  :param shape: (io.deephaven.gui.shape.Shape) - shape\n  :return: (io.deephaven.db.plot.datasets.DataSeries) this DataSeries\n  \n*Overload 3*  \n  :param shapes: (io.deephaven.db.plot.datasets.data.IndexableData<java.lang.String>) - shapes\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeries) this XYDataSeries\n  \n*Overload 4*  \n  :param shapes: (java.lang.String...) - shapes\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeries) this XYDataSeries\n  \n*Overload 5*  \n  :param shapes: (io.deephaven.gui.shape.Shape...) - shapes\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeries) this XYDataSeries\n  \n*Overload 6*  \n  :param t: (io.deephaven.db.tables.Table) - table containing shapes\n  :param columnName: (java.lang.String) - column in t containing shapes. The shape data for point i comes from row i.\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeries) this XYDataSeries\n  \n*Overload 7*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table) containing shapes\n  :param columnName: (java.lang.String) - column in sds containing shapes. The color data for point i comes from row i.\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeries) this XYDataSeries",
  "pointSize": "Sets the point size. A scale factor of 1 is the default size. A scale factor of 2 is 2x the default size.\n Unspecified points use the default size.\n\n*Overload 1*  \n  :param factor: (int) - point size\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeriesInternal) this data series.\n  \n*Overload 2*  \n  :param factor: (long) - point size\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeriesInternal) this data series.\n  \n*Overload 3*  \n  :param factor: (double) - point size\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeriesInternal) this data series.\n  \n*Overload 4*  \n  :param factor: (java.lang.Number) - point size\n  :return: (io.deephaven.db.plot.datasets.xy.XYDataSeriesInternal) this data series.\n  \n*Overload 5*  \n  :param factors: (io.deephaven.db.plot.datasets.data.IndexableData<java.lang.Double>) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 6*  \n  :param factors: (int...) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 7*  \n  :param factors: (long...) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 8*  \n  :param factors: (double...) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 9*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param factors: (T[]) - factors to multiply the default size (1) by\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 10*  \n  :param t: (io.deephaven.db.tables.Table) - table containing factors to multiply the default size (1) by\n  :param columnName: (java.lang.String) - column in t containing size scaling factors. The size data for point i comes from row\n          i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries\n  \n*Overload 11*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick filterable table) containing factors to multiply the default size\n          (1) by\n  :param columnName: (java.lang.String) - column in sds containing size scaling factors. The size data for point i comes from row\n          i.\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this XYDataSeries",
  "pointsVisible": "Sets whether points are visible.\n\n:param visible: (java.lang.Boolean) - point visibility\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "seriesColor": "Defines the default line and point color.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.\n  \n*Overload 2*  \n  :param color: (int) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.\n  \n*Overload 3*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "toolTipPattern": "Sets the tooltip format.\n\n:param format: (java.lang.String) - format\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "xToolTipPattern": "Sets the x-value tooltip format.\n\n:param format: (java.lang.String) - format\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series.",
  "yToolTipPattern": "Sets the y-value tooltip format.\n\n:param format: (java.lang.String) - format\n:return: (io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries) this data series."
 },
 "path": "io.deephaven.db.plot.datasets.xy.AbstractXYDataSeries",
 "text": "Base class for the XYDataSeriesInternal.",
 "typeName": "class"
}