{
 "className": "io.deephaven.db.v2.sources.ByteSparseArraySource",
 "methods": {
  "copy": ":param sourceColumn: io.deephaven.db.v2.sources.ColumnSource<java.lang.Byte>\n:param sourceKey: long\n:param destKey: long",
  "ensureCapacity": ":param capacity: long",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext\n:param src: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param keys: io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param dest: io.deephaven.db.v2.sources.chunk.WritableChunk<? super io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "get": ":param index: long\n:return: java.lang.Byte",
  "getByte": ":param index: long\n:return: byte",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys\n:return: (io.deephaven.db.v2.sources.chunk.ByteChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "getPrev": ":param index: long\n:return: java.lang.Byte",
  "getPrevByte": ":param index: long\n:return: byte",
  "getPrevChunk": "Returns a chunk of previous data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys\n:return: (io.deephaven.db.v2.sources.chunk.ByteChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "remove": ":param toRemove: io.deephaven.db.v2.utils.Index",
  "set": "*Overload 1*  \n  :param key: long\n  :param value: byte\n  \n*Overload 2*  \n  :param key: long\n  :param value: java.lang.Byte",
  "shift": ":param keysToShift: io.deephaven.db.v2.utils.Index\n:param shiftDelta: long",
  "startTrackingPrevValues": "ColumnSource implementations that track previous values have the option to not actually start tracking previous\n values until this method is called. This is an option, not an obligation: some simple ColumnSource\n implementations (like TSingleValueSource for various T) always track previous values; other implementations (like\n PrevColumnSource) never do; some (like TArrayColumnSource) only start tracking once this method is called.\n\n An immutable column source can not have distinct prev values; therefore it is implemented as a no-op."
 },
 "path": "io.deephaven.db.v2.sources.ByteSparseArraySource",
 "text": "Sparse array source for Byte.\n \n The C-haracterSparseArraySource is replicated to all other types with\n io.deephaven.db.v2.sources.Replicate.\n\n (C-haracter is deliberately spelled that way in order to prevent Replicate from altering this very comment).",
 "typeName": "class"
}