{
 "className": "io.deephaven.db.v2.by.BaseStreamFirstOrLastChunkedOperator",
 "methods": {
  "getResultColumns": "Return a map of result columns produced by this operator.\n\n:return: (java.util.Map<java.lang.String,? extends io.deephaven.db.v2.sources.ColumnSource<?>>) a map of name to columns for the result table",
  "modifyChunk": "**Incompatible overloads text - text from the first overload:**\n\nModify a chunk of data previously aggregated into the result columns using a parallel chunk of new values.\n Never includes modifies that have been shifted if IterativeChunkedAggregationOperator.requiresIndices() returns true - those are handled in\n IterativeChunkedAggregationOperator.shiftChunk(BucketedContext, Chunk, Chunk, LongChunk, LongChunk, IntChunk, IntChunk, IntChunk, WritableBooleanChunk).\n\n*Overload 1*  \n  :param bucketedContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) - the operator-specific context\n  :param previousValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values that have been previously aggregated\n  :param newValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values to aggregate\n  :param postShiftIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destinations: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the destinations in resultColumn to remove the values from, parallel with startPositions and length\n  :param startPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the starting positions in the chunk for each destination\n  :param length: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of values in the chunk for each destination\n  :param stateModified: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) - a boolean output array, parallel to destinations, which is set to true if the corresponding destination has been modified\n  \n*Overload 2*  \n  :param singletonContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) - the operator-specific context\n  :param chunkSize: (int) - the size of the modification\n  :param previousValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values that have been previously aggregated.\n  :param newValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values to aggregate\n  :param postShiftIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destination: long\n  :return: (boolean) true if the state was modified, false otherwise",
  "modifyIndices": "Called with the modified indices when IterativeChunkedAggregationOperator.requiresIndices() returns true if our input columns have not\n changed (or we have none).\n\n*Overload 1*  \n  :param context: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) - the operator-specific context\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destinations: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the destinations in resultColumn to aggregate into, parallel with startPositions and length\n  :param startPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the starting positions in the chunk for each destination\n  :param length: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of values in the chunk for each destination\n  :param stateModified: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) - a boolean output array, parallel to destinations, which is set to true if the corresponding destination has been modified\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) - the operator-specific context\n  :param indices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the modified indices for a given destination, in post-shift space\n  :param destination: (long) - the destination that was modified\n  :return: (boolean) true if the result should be considered modified",
  "removeChunk": "Remove a chunk of data previously aggregated into the result columns.\n\n*Overload 1*  \n  :param bucketedContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) - the operator-specific context\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values that have been previously aggregated.\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in pre-shift space\n  :param destinations: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the destinations in resultColumn to remove the values from, parallel with startPositions and length\n  :param startPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the starting positions in the chunk for each destination\n  :param length: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of values in the chunk for each destination\n  :param stateModified: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) - a boolean output array, parallel to destinations, which is set to true if the corresponding destination has been modified\n  \n*Overload 2*  \n  :param singletonContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) - the operator-specific context\n  :param chunkSize: (int) - the size of the removal\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the values to remove from the aggregation\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in pre-shift space\n  :param destination: (long) - the destination in the result columns\n  :return: (boolean) true if the state was modified, false otherwise",
  "requiresIndices": "Whether the operator requires indices. This implies that the operator must process shifts\n (i.e. IterativeChunkedAggregationOperator.shiftChunk(io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext, io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>, io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>, io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>, io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>, io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>, io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>, io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>, io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>)), and must observe modifications even when its input columns (if any) are not modified\n (i.e. IterativeChunkedAggregationOperator.modifyIndices(io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext, io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>, io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>, io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>, io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>, io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>)).\n\n:return: (boolean) true if the operator requires indices, false otherwise",
  "resetForStep": "Reset any per-step internal state.\n Note that the arguments to this method should not be mutated in any way.\n\n:param upstream: (io.deephaven.db.v2.ShiftAwareListener.Update) - The upstream ShiftAwareListener.Update",
  "shiftChunk": "**Incompatible overloads text - text from the first overload:**\n\nCalled with shifted indices when IterativeChunkedAggregationOperator.requiresIndices() returns true, including shifted same-slot modifies.\n\n*Overload 1*  \n  :param bucketedContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) - the operator-specific context\n  :param previousValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values that have been previously aggregated.\n  :param newValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values to aggregate\n  :param preShiftIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in pre-shift space\n  :param postShiftIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destinations: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the destinations in resultColumn to aggregate into, parallel with startPositions and length\n  :param startPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the starting positions in the chunk for each destination\n  :param length: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of values in the chunk for each destination\n  :param stateModified: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) - a boolean output array, parallel to destinations, which is set to true if the corresponding destination has been modified\n  \n*Overload 2*  \n  :param singletonContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) - the operator-specific context\n  :param previousValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values that have been previously aggregated.\n  :param newValues: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values to aggregate\n  :param preInputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in pre-shift space\n  :param postInputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destination: (long) - the destination in the result columns\n  :return: (boolean) true if the result should be considered modified"
 },
 "path": "io.deephaven.db.v2.by.BaseStreamFirstOrLastChunkedOperator",
 "text": "Base class with shared boilerplate for StreamFirstChunkedOperator and StreamLastChunkedOperator.",
 "typeName": "class"
}