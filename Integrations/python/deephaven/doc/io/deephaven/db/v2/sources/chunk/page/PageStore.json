{
 "className": "io.deephaven.db.v2.sources.chunk.page.PageStore",
 "methods": {
  "doFillChunkAppend": "This is a helper which is the same as a call to fillChunkAppend(io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext, io.deephaven.db.v2.sources.chunk.WritableChunk<? super ATTR>, io.deephaven.db.v2.utils.OrderedKeys.Iterator), except that some of the initial\n work has already been done for the first call to\n PagingChunkSource.fillChunkAppend(FillContext, WritableChunk, OrderedKeys.Iterator) which we don't want to repeat.\n\nNote: Java generics information - io.deephaven.util.annotations.@FinalDefault\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super PageStore.ATTR>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys\n:param page: io.deephaven.db.v2.sources.chunk.page.Page<PageStore.INNER_ATTR>",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super PageStore.ATTR>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "fillChunkAppend": "Similar to ChunkSource.fillChunk(FillContext, WritableChunk, OrderedKeys), except that the values from the\n ChunkSource are appended to destination, rather than placed at the beginning.\nThe values to fill into destination are specified by orderedKeysIterator, whose\n OrderedKeys.firstKey() must exist, and must be represented by this PagingChunkSource\n (modulo {#link @mask}), otherwise results are undefined.\nNo more than the elements in orderedKeysIterator, which are on the same page as\n OrderedKeys.firstKey(), have their values appended to destination, and consumed from\n orderedKeysIterator.  Keys are on the same page when the bits outside of PagingChunkSource.mask() are identical.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super PageStore.ATTR>\n:param orderedKeysIterator: io.deephaven.db.v2.utils.OrderedKeys.Iterator",
  "getChunk": "**Incompatible overloads text - text from the first overload:**\n\nReturns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n*Overload 1*  \n  :param context: io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext\n  :param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys\n  :return: (io.deephaven.db.v2.sources.chunk.Chunk<? extends PageStore.ATTR>) A chunk of data corresponding to the keys from the given OrderedKeys\n  \n*Overload 2*  \n  :param context: io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext\n  :param firstKey: long\n  :param lastKey: long\n  :return: io.deephaven.db.v2.sources.chunk.Chunk<? extends PageStore.ATTR>",
  "getPageContaining": ":param fillContext: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param row: long\n:return: (PageStore.PAGE) The page containing row, after applying PagingChunkSource.mask()."
 },
 "path": "io.deephaven.db.v2.sources.chunk.page.PageStore",
 "text": "PageStores are a collection of non-overlapping pages, which provides a single\n ChunkSource interface across all the pages.",
 "typeName": "interface"
}