{
 "className": "io.deephaven.db.v2.sources.LongSingleValueSource",
 "methods": {
  "copy": ":param sourceColumn: io.deephaven.db.v2.sources.ColumnSource<java.lang.Long>\n:param sourceKey: long\n:param destKey: long",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext\n:param src: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext\n:param src: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param keys: io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>",
  "getLong": ":param index: long\n:return: long",
  "getPrevLong": ":param index: long\n:return: long",
  "set": "*Overload 1*  \n  :param value: java.lang.Long\n  \n*Overload 2*  \n  :param value: long\n  \n*Overload 3*  \n  :param key: long\n  :param value: long"
 },
 "path": "io.deephaven.db.v2.sources.LongSingleValueSource",
 "text": "Single value source for Long.\n \n The C-haracterSingleValueSource is replicated to all other types with\n io.deephaven.db.v2.sources.Replicate.\n\n (C-haracter is deliberately spelled that way in order to prevent Replicate from altering this very comment).",
 "typeName": "class"
}