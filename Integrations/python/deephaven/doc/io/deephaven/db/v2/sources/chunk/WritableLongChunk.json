{
 "className": "io.deephaven.db.v2.sources.chunk.WritableLongChunk",
 "methods": {
  "add": ":param value: long",
  "appendTypedChunk": ":param src: io.deephaven.db.v2.sources.chunk.LongChunk<? extendsWritableLongChunk.ATTR>\n:param srcOffset: int\n:param length: int",
  "copyFromArray": ":param srcArray: java.lang.Object\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "copyFromBuffer": "Fill a sub-range of this writable chunk with values from a Buffer. This is an optional method, as some\n chunk types do not have a corresponding buffer type.\n\n Implementations are free to copy data as efficiently as they may, and will use absolute rather than positional\n access where possible. To facilitate this pattern, srcOffset is an absolute offset from position 0,\n rather than a relative offset from srcBuffer.position().\n\n srcBuffer.limit() is at least srcOffset + length.\n\n srcBuffer's position may be modified, but will always be restored to its initial value upon successful\n return.\n\n:param srcBuffer: (java.nio.Buffer) - The source buffer, which will be cast to the appropriate type for this chunk\n:param srcOffset: (int) - The offset into srcBuffer (from position 0, not srcBuffer.position())\n                   to start copying from\n:param destOffset: (int) - The offset into this chunk to start copying to\n:param length: (int) - The number of elements to copy",
  "copyFromChunk": ":param src: io.deephaven.db.v2.sources.chunk.Chunk<? extendsWritableLongChunk.ATTR>\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "copyFromTypedArray": ":param src: long[]\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "copyFromTypedBuffer": "Fill a sub-range of this WritableLongChunk with values from a LongBuffer.\n\n See copyFromBuffer(Buffer, int, int, int) for general documentation.\n\n:param srcBuffer: (java.nio.LongBuffer) - The source LongBuffer\n:param srcOffset: (int) - The absolute offset into srcBuffer to start copying from\n:param destOffset: (int) - The offset into this chunk to start copying to\n:param length: (int) - The number of elements to copy",
  "copyFromTypedChunk": ":param src: io.deephaven.db.v2.sources.chunk.LongChunk<? extendsWritableLongChunk.ATTR>\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "fillWithBoxedValue": "Fill a sub-range of this writable chunk with the given value, unboxing it as appropriate.\n\n:param offset: (int) - Starting offset\n:param size: (int) - Number of values to fill\n:param value: java.lang.Object",
  "fillWithNullValue": "Fill a sub-range of this writable chunk with the appropriate Deephaven null value for the type.\n\n:param offset: (int) - Starting offset\n:param length: (int) - Number of values to fill",
  "fillWithValue": ":param offset: int\n:param length: int\n:param value: long",
  "getChunkFiller": "Our ChunkFiller \"plugin\".\n\n:return: io.deephaven.db.v2.sources.chunk.util.chunkfillers.ChunkFiller",
  "makeWritableChunk": "Note: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:param size: int\n:return: io.deephaven.db.v2.sources.chunk.WritableLongChunk<ATTR>",
  "makeWritableChunkForPool": ":param size: int\n:return: io.deephaven.db.v2.sources.chunk.WritableLongChunk",
  "set": ":param index: int\n:param value: long",
  "slice": "Make a new Chunk that represents either exactly the same view on the underlying data as this Chunk, or a\n subrange of that view. The view is defined as [0..size) (in the coordinate space of this Chunk).\n\n:param offset: (int) - Offset of the new Chunk, relative to this Chunk. 0   offset   this.size\n:param capacity: (int) - Capacity and initial size of the new Chunk. 0   capacity   this.size - offset.\n:return: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<WritableLongChunk.ATTR>) The new Chunk. A new Chunk will always be returned, even if the Chunks represent the same view.",
  "sort": "Sort this chunk in-place using Java's primitive defined ordering.\n\n Of note is that nulls or NaNs are not sorted according to Deephaven ordering rules.\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param start: int\n  :param length: int",
  "upcast": ":param self: io.deephaven.db.v2.sources.chunk.WritableLongChunk<ATTR_DERIV>\n:return: io.deephaven.db.v2.sources.chunk.WritableLongChunk<ATTR>",
  "writableChunkWrap": "*Overload 1*  \n  Note: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  \n  :param data: long[]\n  :return: io.deephaven.db.v2.sources.chunk.WritableLongChunk<ATTR>\n  \n*Overload 2*  \n  Note: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  \n  :param data: long[]\n  :param offset: int\n  :param size: int\n  :return: io.deephaven.db.v2.sources.chunk.WritableLongChunk<ATTR>"
 },
 "path": "io.deephaven.db.v2.sources.chunk.WritableLongChunk",
 "text": "WritableChunk implementation for long data.",
 "typeName": "class"
}