{
 "className": "io.deephaven.db.v2.select.ReinterpretedColumn",
 "methods": {
  "copy": "Create a copy of this SelectColumn.\n\n:return: (io.deephaven.db.v2.select.ReinterpretedColumn<ReinterpretedColumn.S,ReinterpretedColumn.D>) an independent copy of this SelectColumn.",
  "disallowRefresh": "Should we disallow use of this column for refreshing tables?\n\n Some formulas can not be reliably computed with a refreshing table, therefore we will refuse to compute those values.\n\n:return: boolean",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "getColumnArrays": "Get a list of the names of column arrays used in this SelectColumn.  Behavior is undefined if none of the init* methods have been called yet.\n\n:return: (java.util.List<java.lang.String>) the list of column arrays used",
  "getColumns": "Get a list of the names of columns used in this SelectColumn.  Behavior is undefined if none of the init* methods have been called yet.\n\n:return: (java.util.List<java.lang.String>) the columns used in this SelectColumn",
  "getDataView": "Get a ColumnSource that can be used to access the data on demand.\n\n:return: (io.deephaven.db.v2.sources.ColumnSource) a ColumnSource",
  "getLazyView": "Returns a lazily computed view of this column.\n\n:return: (io.deephaven.db.v2.sources.ColumnSource) a lazily computed column source",
  "getMatchPair": "Get a MatchPair for this column, if applicable.\n\n:return: io.deephaven.db.tables.select.MatchPair",
  "getName": "Get the name of the resultant column.\n\n:return: (java.lang.String) the name of the column",
  "getReturnedType": "Get the data type stored in the resultant column.\n\n:return: (java.lang.Class) the type",
  "hashCode": ":return: int",
  "initDef": "Initialize any internal column definitions from the provided initial.\n\n:param columnDefinitionMap: (java.util.Map<java.lang.String,io.deephaven.db.tables.ColumnDefinition>) - the starting set of column definitions\n:return: (java.util.List<java.lang.String>) a list of columns on which the result of this is dependent",
  "initInputs": "**Incompatible overloads text - text from the first overload:**\n\nInitialize the SelectColumn using the input table and return a list of underlying columns that this SelectColumn\n is dependent upon.\n\n*Overload 1*  \n  :param table: (io.deephaven.db.tables.Table) - the table to initialize internals from\n  :return: (java.util.List<java.lang.String>) a list containing all columns from 'table' that the result depends on\n  \n*Overload 2*  \n  :param index: (io.deephaven.db.v2.utils.Index) - the base index\n  :param columnsOfInterest: (java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.ColumnSource>) - the input columns\n  :return: (java.util.List<java.lang.String>) a list of columns on which the result of this is dependent",
  "isRetain": ":return: boolean",
  "newDestInstance": "Create a new WritableSource with sufficient capacity for the rows in the index.\n\n:param size: (long) - The number of rows to allocate\n:return: (io.deephaven.db.v2.sources.WritableSource) a new WritableSource with sufficient capacity for 'dataSubset'",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.db.v2.select.ReinterpretedColumn",
 "text": "Allows us to support ColumnSource reinterpretation via view-type Table operations.\n Currently, this is only exposed in V2 tables' support for dateTimeColumnAsNanos().\n\n TODO:\n If we come up with other valid, useful reinterpretations, it would be trivial to create a general purpose syntax for\n use in view()/updateView() column expressions.\n\n The syntax I have in mind is:\n   \"<ColumnNameB>=<ColumnNameA>.as(<ClassName>)\"\n   \"<ColumnName>.as(<ClassName>)\"\n\n Making this work would consist of any one of:\n   1. Adding a V1 version and updating SelectColumnFactory and SelectColumnAdaptor\n   2. Adding the appropriate if-regex-matches to realColumn selection in V2 SwitchColumn\n   3. Creating a V2-native SelectColumnFactory",
 "typeName": "class"
}