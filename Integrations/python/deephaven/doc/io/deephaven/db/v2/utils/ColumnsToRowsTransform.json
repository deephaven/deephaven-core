{
 "className": "io.deephaven.db.v2.utils.ColumnsToRowsTransform",
 "methods": {
  "columnsToRows": "Convert value columns to labeled rows.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - the table with multiple value columns\n  :param labelColumn: (java.lang.String) - the output column name for the label column\n  :param valueColumn: (java.lang.String) - the output column name for the value column\n  :param transposeColumns: (java.lang.String...) - the names of the columns to transpose, the label value is the name of the column\n  :return: (io.deephaven.db.tables.Table) the transformed table\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - the table with multiple value columns\n  :param labelColumn: (java.lang.String) - the output column name for the label column\n  :param valueColumn: (java.lang.String) - the output column name for the value column\n  :param labels: (java.lang.String[]) - the labels for the transposed columns, must be parallel to transposeColumns\n  :param transposeColumns: (java.lang.String[]) - the input column names to transpose, must be parallel to labels\n  :return: (io.deephaven.db.tables.Table) the transformed table\n  \n*Overload 3*  \n  :param source: (io.deephaven.db.tables.Table) - the table with multiple value columns\n  :param labelColumn: (java.lang.String) - the output column name for the label column\n  :param valueColumns: (java.lang.String[]) - the output column names for the value columns\n  :param labels: (java.lang.String[]) - the labels for the transposed columns, must be parallel to each element of transposeColumns\n  :param transposeColumns: (java.lang.String[][]) - an array parallel to valueColumns; each element is in turn an array of input column names\n          that are constituents for the output column. The input columns within each element must be the same type,\n          and the cardinality much match labels.\n  :return: (io.deephaven.db.tables.Table) the transformed table"
 },
 "path": "io.deephaven.db.v2.utils.ColumnsToRowsTransform",
 "text": "Convert value columns into labeled rows.\n\n \n There are times when you have a wide table, that is better displayed to the user as a narrow table with additional\n rows. For example, you might have a table with columns for \"Bid\", \"Ask\" and \"Last\", which you may prefer to have\n three rows, one each for Bid, Ask, and Last with a label for each symbol.\n \n\n The same can be accomplished by calling\n .update(\"Label=new String[]{`Bid`, `Ask`, `Last`}\", \"Value=new double[]{Bid, Ask, Last}\").ungroup(), but\n the creation of arrays in the update statement introduces additional overhead and garbage creation to the query\n execution.\n \n\n You may have only a single label column, but you may define multiple output value columns, all of which must have the\n same number of source columns.\n \n\n For each output value column, all of the constituent input columns columns must have the same type. If the types are\n different, then an IllegalArgumentException is thrown.\n \n\n For example, when calling @{code ColumnsToRowsTransform.columnsToRows(inTable, \"Name\", new String[]{\"IV\", \"DV\"}, new\n String[]{\"Apple\", \"Banana\", \"Canteloupe\"}, new String[][]{new String[]{\"Val1\", \"Val2\", \"Val3\"}, new String[]{\"D1\",\n \"D2\", \"D3\"}});}, on this table:\n \n \n        Sym|      Val1|                  D1|                  D2|      Val2|      Val3|                  D3\n ----------+----------+--------------------+--------------------+----------+----------+--------------------\n AAPL      |         1|                 7.7|                 9.9|         3|         5|               11.11\n SPY       |         2|                 8.8|                10.1|         4|         6|               12.12\n \n \n The expected output is:\n \n \n        Sym|      Name|        IV|                  DV\n ----------+----------+----------+--------------------\n AAPL      |Apple     |         1|                 7.7\n AAPL      |Banana    |         3|                 9.9\n AAPL      |Canteloupe|         5|               11.11\n SPY       |Apple     |         2|                 8.8\n SPY       |Banana    |         4|                10.1\n SPY       |Canteloupe|         6|               12.12",
 "typeName": "class"
}