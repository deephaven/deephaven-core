{
 "className": "io.deephaven.db.v2.sources.regioned.ParquetColumnRegionBase",
 "methods": {
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super ParquetColumnRegionBase.ATTR>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "fillChunkAppend": "Similar to ChunkSource.fillChunk(FillContext, WritableChunk, OrderedKeys), except that the values from the\n ChunkSource are appended to destination, rather than placed at the beginning.\nThe values to fill into destination are specified by orderedKeysIterator, whose\n OrderedKeys.firstKey() must exist, and must be represented by this PagingChunkSource\n (modulo {#link @mask}), otherwise results are undefined.\nNo more than the elements in orderedKeysIterator, which are on the same page as\n OrderedKeys.firstKey(), have their values appended to destination, and consumed from\n orderedKeysIterator.  Keys are on the same page when the bits outside of PagingChunkSource.mask() are identical.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super ParquetColumnRegionBase.ATTR>\n:param orderedKeysIterator: io.deephaven.db.v2.utils.OrderedKeys.Iterator",
  "getChunk": "**Incompatible overloads text - text from the first overload:**\n\nReturns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n*Overload 1*  \n  :param context: io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext\n  :param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys\n  :return: (io.deephaven.db.v2.sources.chunk.Chunk<? extends ParquetColumnRegionBase.ATTR>) A chunk of data corresponding to the keys from the given OrderedKeys\n  \n*Overload 2*  \n  :param context: io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext\n  :param firstKey: long\n  :param lastKey: long\n  :return: io.deephaven.db.v2.sources.chunk.Chunk<? extends ParquetColumnRegionBase.ATTR>",
  "getChunkPageContaining": ":param elementIndex: long\n:return: io.deephaven.db.v2.sources.chunk.page.ChunkPage<ParquetColumnRegionBase.ATTR>",
  "getNativeType": ":return: java.lang.Class<?>",
  "length": ":return: (long) the length of this page.",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: int\n:param sharedContext: io.deephaven.db.v2.sources.chunk.SharedContext\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) A context for use with fill operations",
  "makeGetContext": "Allocate a new ChunkSource.GetContext for retrieving chunks from this GetContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: int\n:param sharedContext: io.deephaven.db.v2.sources.chunk.SharedContext\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) A context for use with get operations",
  "releaseCachedResources": "Release any resources held for caching purposes. Implementations need not guarantee that they are safe for\n normal use concurrently with invocations of this method."
 },
 "path": "io.deephaven.db.v2.sources.regioned.ParquetColumnRegionBase",
 "typeName": "class"
}