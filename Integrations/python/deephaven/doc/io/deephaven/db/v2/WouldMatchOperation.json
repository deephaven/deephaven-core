{
 "className": "io.deephaven.db.v2.WouldMatchOperation",
 "methods": {
  "getDescription": ":return: (java.lang.String) the description of this operation",
  "getLogPrefix": ":return: (java.lang.String) the log prefix of this operation",
  "getMemoizedOperationKey": ":return: (io.deephaven.db.v2.MemoizedOperationKey) the key that should be used to memoize off of",
  "initialize": "Initialize this operation.\n\n:param usePrev: (boolean) - data from the previous cycle should be used (otherwise use this cycle)\n:param beforeClock: (long) - the clock value that we captured before the function began; the function can use\n                    this value to bail out early if it notices something has gone wrong.\n:return: (io.deephaven.db.v2.QueryTable.Operation.Result) the result table / listener if successful, null if it should be retried."
 },
 "path": "io.deephaven.db.v2.WouldMatchOperation",
 "text": "A table operation similar to Table.where(String...) except that instead of filtering\n the rows in the table,  it appends new columns containing the result of the filter evaluation on each row of the table.\n It will re-evaluate cell values if any of the underlying filters are dynamic, and change.",
 "typeName": "class"
}