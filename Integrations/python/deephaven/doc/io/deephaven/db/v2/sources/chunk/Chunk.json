{
 "className": "io.deephaven.db.v2.sources.chunk.Chunk",
 "methods": {
  "asBooleanChunk": ":return: io.deephaven.db.v2.sources.chunk.BooleanChunk<Chunk.ATTR>",
  "asByteChunk": ":return: io.deephaven.db.v2.sources.chunk.ByteChunk<Chunk.ATTR>",
  "asCharChunk": ":return: io.deephaven.db.v2.sources.chunk.CharChunk<Chunk.ATTR>",
  "asDoubleChunk": ":return: io.deephaven.db.v2.sources.chunk.DoubleChunk<Chunk.ATTR>",
  "asFloatChunk": ":return: io.deephaven.db.v2.sources.chunk.FloatChunk<Chunk.ATTR>",
  "asIntChunk": ":return: io.deephaven.db.v2.sources.chunk.IntChunk<Chunk.ATTR>",
  "asLongChunk": ":return: io.deephaven.db.v2.sources.chunk.LongChunk<Chunk.ATTR>",
  "asObjectChunk": "Note: Java generics information - <T>\n\n:return: io.deephaven.db.v2.sources.chunk.ObjectChunk<T,Chunk.ATTR>",
  "asShortChunk": ":return: io.deephaven.db.v2.sources.chunk.ShortChunk<Chunk.ATTR>",
  "checkChunkType": ":param expected: io.deephaven.db.v2.sources.chunk.ChunkType",
  "copyToArray": "Copy a subrange of this Chunk to the subrange of the 'dest' array.\n\n:param srcOffset: (int) - Starting position in 'this' (the source)\n:param dest: (java.lang.Object) - Destination array.\n:param destOffset: (int) - Starting offset in the destination.\n:param size: (int) - Number of values to copy",
  "copyToBuffer": "Copy a sub-range of this chunk to a Buffer. This is an optional method, as some\n chunk types do not have a corresponding buffer type.\n\n Implementations are free to copy data as efficiently as they may, and will use absolute rather than positional\n access where possible. To facilitate this pattern, destOffset is an absolute offset from position 0,\n rather than a relative offset from destBuffer.position().\n\n destBuffer.limit() is at least destOffset + length.\n\n destBuffer's position may be modified, but will always be restored to its initial value upon successful\n return.\n\n:param srcOffset: (int) - The offset into this chunk to start copying from\n:param destBuffer: (java.nio.Buffer) - The destination Buffer\n:param destOffset: (int) - The absolute offset into destBuffer to start copying to\n:param length: (int) - The number of elements to copy",
  "copyToChunk": "Copy a subrange of this Chunk to the subrange of the 'dest' writable chunk.\n\n:param srcOffset: (int) - Starting position in 'this' (the source)\n:param dest: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superChunk.ATTR>) - Destination writable chunk.\n:param destOffset: (int) - Starting offset in the destination.\n:param size: (int) - Number of values to copy",
  "downcast": "Downcast the attribute.\n\n When you know the data in this chunk which you plan to read is a more specific sub-type, you can downcast\n the attribute with this helper method.  This might be necessary, for instance, when you have a KeyIndices chunk\n which you sort, and now want to treat it as an OrderedKeyIndices.\n\n:param extend: io.deephaven.db.v2.sources.chunk.Chunk<?\n:return: io.deephaven.db.v2.sources.chunk.Chunk<ATTR_DERIV>",
  "getChunkType": ":return: (io.deephaven.db.v2.sources.chunk.ChunkType) The underlying chunk type",
  "isAlias": "*Overload 1*  \n  :param object: java.lang.Object\n  :return: (boolean) true iff this and array are aliases, that is they refer to the same underlying data\n  \n*Overload 2*  \n  :param chunk: io.deephaven.db.v2.sources.chunk.Chunk\n  :return: (boolean) true iff this and chunk are aliases, that is they refer to the same underlying data",
  "size": ":return: (int) The length of the data in the chunk",
  "slice": "Make a new Chunk that represents either exactly the same view on the underlying data as this Chunk, or a\n subrange of that view. The view is defined as [0..size) (in the coordinate space of this Chunk).\n\n:param offset: (int) - Offset of the new Chunk, relative to this Chunk. 0   offset   this.size\n:param capacity: (int) - Capacity and initial size of the new Chunk. 0   capacity   this.size - offset.\n:return: (io.deephaven.db.v2.sources.chunk.Chunk<Chunk.ATTR>) The new Chunk. A new Chunk will always be returned, even if the Chunks represent the same view.",
  "walk": "Note: Java generics information - <V extends io.deephaven.db.v2.sources.chunk.Chunk.Visitor<Chunk.ATTR>>\n\n:param visitor: V\n:return: V"
 },
 "path": "io.deephaven.db.v2.sources.chunk.Chunk",
 "text": "Data structure for a contiguous region of data.",
 "typeName": "interface"
}