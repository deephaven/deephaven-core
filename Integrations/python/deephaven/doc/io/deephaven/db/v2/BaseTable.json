{
 "className": "io.deephaven.db.v2.BaseTable",
 "methods": {
  "addParentReference": "Called on a dependent node to ensure that a strong reference is maintained to any parent object that is required\n for the proper maintenance and functioning of the dependent.\n\n In the most common case, the parent object is a child listener to a parent node. The parent node only keeps a\n weak reference to its child listener, but the listener maintains a strong reference to the parent node. In this\n scenario, the only strong reference to the listener (and thus indirectly to the parent node itself) is the\n reference kept by the dependent node.\n\n:param parent: (java.lang.Object) - A parent of this node",
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "awaitUpdate": "Wait for updates to this DynamicTable.\n \n In some implementations, this call may also terminate in case of interrupt or spurious wakeup (see\n java.util.concurrent.locks.Condition#await()).\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param timeout: (long) - The maximum time to wait in milliseconds.\n  :return: (boolean) false if the timeout elapses without notification, true otherwise.",
  "clearSortingRestrictions": "Clear all sorting restrictions that was applied to the current table.\n \n\n Note that this table operates on the table it was invoked on and does not create a new table. So in the following\n code T1 = baseTable.where(...)\n          T2 = T1.restrictSortTo(\"C1\")\n          T3 = T2.clearSortingRestrictions()\n    \n\n T1 == T2 == T3 and the result has no restrictions on sorting.\n \n\n:return: (io.deephaven.db.tables.Table) The same table this was invoked on.",
  "copy": "Copies this table, but with a new set of attributes.\n\n:return: (io.deephaven.db.tables.Table) an identical table; but with a new set of attributes",
  "copyAttributes": "**Incompatible overloads text - text from the first overload:**\n\nCopy this table's attributes to the specified table. Attributes are copied based on a predicate.\n\n*Overload 1*  \n  :param dest: (io.deephaven.db.tables.Table) - The table to copy attributes to\n  :param copyType: (io.deephaven.db.v2.BaseTable.CopyAttributeOperation) - The operation being performed that requires attributes to be copied.\n  \n*Overload 2*  \n  :param dest: (io.deephaven.db.tables.Table) - The table to copy attributes to\n  :param shouldCopy: (java.util.function.Predicate<java.lang.String>) - should we copy this attribute?",
  "createSwapListenerIfRefreshing": "If we are a refreshing table, then we should create a swap listener and listen for updates.\n\n Otherwise, we return null.\n\nNote: Java generics information - <T extends io.deephaven.db.v2.SwapListenerBase<?>>\n\n:param factory: io.deephaven.db.v2.BaseTable.SwapListenerFactory<T>\n:return: (T) a swap listener for this table (or null)",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "dropStream": "If this table is a stream table, i.e. it has Table.STREAM_TABLE_ATTRIBUTE set to true, return a child\n without the attribute, restoring standard semantics for aggregation operations.\n\n:return: (io.deephaven.db.tables.Table) A non-stream child table, or this table if it is not a stream table",
  "getAttribute": "Get the value of the specified attribute.\n\n:param key: (java.lang.String) - the name of the attribute\n:return: (java.lang.Object) the value, or null if there was none.",
  "getAttributeNames": "Get a set of all the attributes that have values for this table.\n\n:return: (java.util.Set<java.lang.String>) a set of names",
  "getAttributes": "Get all attributes from the desired table except the items that appear in excluded.\n\n:param excludedAttrs: (java.util.Collection<java.lang.String>) - A set of attributes to exclude from the result\n:return: (java.util.Map<java.lang.String,java.lang.Object>) All of the table's attributes except the ones present in excluded",
  "getDefinition": ":return: io.deephaven.db.tables.TableDefinition",
  "getDescription": ":return: java.lang.String",
  "getLastNotificationStep": "Get the last logical clock step on which this element dispatched a notification.\n\n:return: (long) The last notification step",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "hasAttribute": "Check if the specified attribute exists in this table.\n\n:param name: (java.lang.String) - the name of the attribute\n:return: (boolean) true if the attribute exists",
  "hasListeners": ":return: boolean",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "initializeWithSnapshot": "Note: Java generics information - <SL extends io.deephaven.db.v2.SwapListenerBase<?>>\n\n:param logPrefix: java.lang.String\n:param swapListener: SL\n:param snapshotFunction: io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotFunction",
  "isAddOnly": "Returns true if this table is static, or has an attribute asserting that no modifies, shifts, or removals are\n generated.\n\n:return: (boolean) true if this table does not produce modifications, shifts, or removals",
  "isFailed": ":return: (boolean) true if this table is in a failure state.",
  "isRefreshing": "Is the node updating?\n\n:return: (boolean) true if the node is updating; false otherwise.",
  "isStream": "Returns true if this table is a stream table.\n\n:return: (boolean) Whether this table is a stream table",
  "isSystemicObject": "Returns true if this is a systemically important object (see SystemicObjectTracker).\n\n:return: (boolean) true if this is a systemically important object, false otherwise.",
  "layoutHints": ":param hints: java.lang.String\n:return: io.deephaven.db.tables.Table",
  "listenForDirectUpdates": "Subscribe for updates to this table. Direct listeners are invoked immediately when changes are published, rather\n than via a LiveTableMonitor notification queue.\n\n:param listener: (io.deephaven.db.v2.Listener) - listener for updates",
  "listenForUpdates": "**Incompatible overloads text - text from the first overload:**\n\nSubscribe for updates to this table. After the optional initial image, listener will be invoked via the\n LiveTableMonitor notification queue associated with this DynamicTable.\n\n*Overload 1*  \n  :param listener: (io.deephaven.db.v2.Listener) - listener for updates\n  :param replayInitialImage: (boolean) - true to process updates for all initial rows in the table plus all new row changes;\n          false to only process new row changes\n  \n*Overload 2*  \n  :param listener: (io.deephaven.db.v2.ShiftAwareListener) - listener for updates",
  "markSystemic": "Mark this object as systemically important.",
  "notifyListeners": "Initiate update delivery to this table's listeners. Will notify direct listeners before completing, and enqueue\n notifications for all other listeners.\n\n:param update: (io.deephaven.db.v2.ShiftAwareListener.Update) - the set of table changes to propagate The caller gives this update object away; the invocation of\n        notifyListeners takes ownership, and will call release on it once it is not used anymore;\n        callers should pass a clone for updates they intend to further use.",
  "notifyListenersOnError": "Initiate failure delivery to this table's listeners. Will notify direct listeners before completing, and enqueue\n notifications for all other listeners.\n\n:param e: (java.lang.Throwable) - error\n:param sourceEntry: (io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry) - performance tracking",
  "removeDirectUpdateListener": "Unsubscribe the supplied listener.\n\n:param listenerToRemove: (io.deephaven.db.v2.Listener) - listener for updates",
  "removeUpdateListener": "Unsubscribe the supplied listener.\n\n*Overload 1*  \n  :param listenerToRemove: (io.deephaven.db.v2.Listener) - listener for updates\n  \n*Overload 2*  \n  :param listenerToRemove: (io.deephaven.db.v2.ShiftAwareListener) - listener for updates",
  "restrictSortTo": "Disallow sorting on all but the specified columns.\n \n\n:param allowedSortingColumns: (java.lang.String...) - The columns on which sorting is allowed.\n:return: (io.deephaven.db.tables.Table) The same table this was invoked on.",
  "satisfied": "Is this ancestor satisfied? Note that this method must be safe to call on any thread.\n\n:param step: (long) - The step for which we are testing satisfaction\n:return: (boolean) Whether the dependency is satisfied on step (and will not fire subsequent notifications)",
  "setAttribute": "Set the value of an attribute.\n\n:param key: (java.lang.String) - the name of the attribute\n:param object: (java.lang.Object) - the value",
  "setColumnRenderers": "Sets renderers for columns.\n\n:param builder: (io.deephaven.db.v2.ColumnRenderersBuilder) - a builder that creates the packed string for the attribute\n:return: (io.deephaven.db.tables.Table) The same table with the ColumnRenderes attribute set",
  "setLastNotificationStep": "Deliver a last notification step to this receiver.\n\n:param lastNotificationStep: (long) - The last notification step to be delivered",
  "setRefreshing": "Change the node's refresh mode.\n\n:param refreshing: (boolean) - true to cause the node to update; false otherwise.\n:return: (boolean) new refreshing state",
  "setTotalsTable": "Sets parameters for the default totals table display.\n\n:param builder: (io.deephaven.db.v2.TotalsTableBuilder) - a TotalsTableBuilder object\n:return: (io.deephaven.db.tables.Table) a table with the totals applied",
  "toString": ":return: java.lang.String",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true. Otherwise, returns false rather\n than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise",
  "withColumnDescription": "Add a set of column descriptions to the table.\n\n:param descriptions: (java.util.Map<java.lang.String,java.lang.String>) - a map of Column name to Column description.\n:return: (io.deephaven.db.tables.Table) a copy of the table with the descriptions applied.",
  "withKeys": "Set the table's key columns.\n\n:param columns: java.lang.String...\n:return: (io.deephaven.db.tables.Table) The same table this method was invoked on, with the keyColumns attribute set",
  "withTableDescription": ":param description: java.lang.String\n:return: io.deephaven.db.tables.Table",
  "withUniqueKeys": "Set the table's key columns and indicate that each key set will be unique.\n\n:param columns: java.lang.String...\n:return: (io.deephaven.db.tables.Table) The same table this method was invoked on, with the keyColumns and unique attributes set"
 },
 "path": "io.deephaven.db.v2.BaseTable",
 "text": "Base abstract class all standard table implementations.",
 "typeName": "class"
}