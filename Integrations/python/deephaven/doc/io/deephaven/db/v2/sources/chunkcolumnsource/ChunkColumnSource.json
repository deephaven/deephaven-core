{
 "className": "io.deephaven.db.v2.sources.chunkcolumnsource.ChunkColumnSource",
 "methods": {
  "addChunk": "Append a chunk of data to this column source.\n\n:param chunk: (io.deephaven.db.v2.sources.chunk.WritableChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the chunk of data to add",
  "clear": "Reset the column source to be ready for reuse.\n \n Clear will discard the currently held chunks.  This should not be called if a table will continue to reference\n the column source; as it violates the immutability contract.",
  "make": "Create a new ChunkColumnSource for the given chunk type and data type.\n\n*Overload 1*  \n  :param chunkType: (io.deephaven.db.v2.sources.chunk.ChunkType) - the type of chunk\n  :param dataType: (java.lang.Class<?>) - the datatype for the newly created column source\n  :return: (io.deephaven.db.v2.sources.chunkcolumnsource.ChunkColumnSource<?>) an empty ChunkColumnSource\n  \n*Overload 2*  \n  :param chunkType: (io.deephaven.db.v2.sources.chunk.ChunkType) - the type of chunk\n  :param dataType: (java.lang.Class<?>) - the datatype for the newly created column source\n  :param sharedOffsetForData: (gnu.trove.list.array.TLongArrayList) - an array list representing the shared offsets for data across several ChunkColumnSources\n  :return: (io.deephaven.db.v2.sources.chunkcolumnsource.ChunkColumnSource<?>) an empty ChunkColumnSource"
 },
 "path": "io.deephaven.db.v2.sources.chunkcolumnsource.ChunkColumnSource",
 "text": "An immutable ColumnSource that is backed by chunks.\n \n The owner of the column source may append chunks to with the addChunk call.",
 "typeName": "interface"
}