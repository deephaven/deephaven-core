{
 "className": "io.deephaven.db.v2.TableMap",
 "methods": {
  "addKeyListener": "Listen to changes in the map's keys.\n\n:param listener: (io.deephaven.db.v2.TableMap.KeyListener) - key change listener",
  "addListener": "Add a new listener for changes to the map.\n\n:param listener: (io.deephaven.db.v2.TableMap.Listener) - map change listener",
  "apply": "Applies a function to this tableMap.\n\n This is useful if you have a reference to a tableMap and want to run a series of operations against the table\n map without each individual operation resulting in a remote method invocation.\n\nNote: Java generics information - <R>\n\n:param function: io.deephaven.base.Function.Unary<R,io.deephaven.db.v2.TableMap>\n:return: (R) the return value of function",
  "asTableMap": "If you're a TableMap return this, otherwise if you're a Proxy return the underlying TableMap.\n\n:return: (io.deephaven.db.v2.TableMap) a TableMap representation of this object",
  "emptyMap": "Returns an instance of the EmptyTableMap.\n\n:return: io.deephaven.db.v2.TableMap",
  "entrySet": "Gets the entries.\n\n:return: (java.util.Collection<java.util.Map.Entry<java.lang.Object,io.deephaven.db.tables.Table>>) the entries",
  "flatten": "Flattens all of the result tables within the tablemap.\n\n:return: io.deephaven.db.v2.TableMap",
  "get": "Gets a table with a given key.\n Note that this causes the current LivenessManager\n (see LivenessScopeStack) to manage the result if non-null.\n\n:param key: (java.lang.Object) - key\n:return: (io.deephaven.db.tables.Table) table associated with the key, or null if the key is not present.",
  "getKeySet": "Gets the keys.\n\n:return: (java.lang.Object[]) keys",
  "getWithTransform": "Gets a table with a given key, applying the specified transform before returning.\n\n:param key: (java.lang.Object) - key\n:param transform: java.util.function.Function<io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>\n:return: (io.deephaven.db.tables.Table) table associated with the key, or null if the key is not present.",
  "isSentinel": "Check the key passed to the function in transformTablesWithKey(BiFunction), to see\n if it's the sentinel.\n\n:param key: (java.lang.Object) - the object\n:return: (boolean) true if the key is the sentinel",
  "populateKeys": "When creating the table map, some of the keys that we would like to be there eventually may not exist.  This\n call lets you pre-populate keys, so that at initialization time you can perform the appropriate joins, etc.,\n on empty tables that you expect to be populated in the future.\n\n:param keys: (java.lang.Object...) - the keys to add to the map\n:return: (io.deephaven.db.v2.TableMap) this TableMap",
  "removeKeyListener": "Removes a key change listener.\n\n:param listener: (io.deephaven.db.v2.TableMap.KeyListener) - key change listener to remove",
  "removeListener": "Removes a map change listener.\n\n:param listener: (io.deephaven.db.v2.TableMap.Listener) - map change listener.",
  "size": "Number of tables in the map.\n\n:return: (int) number of tables in the map.",
  "transformTables": "**Incompatible overloads text - text from the first overload:**\n\nApplies a transformation function on all tables in the TableMap, producing a new TableMap\n which will update as new keys are added.\n\n*Overload 1*  \n  :param function: (java.util.function.Function<io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>) - the function to apply to each table in this TableMap\n  :return: (io.deephaven.db.v2.TableMap) a new TableMap where each table has had function applied\n  \n*Overload 2*  \n  :param returnDefinition: (io.deephaven.db.tables.TableDefinition) - the table definition for the tables the function will return\n  :param function: (java.util.function.Function<io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>) - the function to apply to each table in this TableMap\n  :return: (io.deephaven.db.v2.TableMap) a new TableMap where each table has had function applied",
  "transformTablesWithKey": "**Incompatible overloads text - text from the first overload:**\n\nApplies a transformation function on all tables in the TableMap, producing a new TableMap\n which will update as new keys are added.\n\n*Overload 1*  \n  :param function: (java.util.function.BiFunction<java.lang.Object,io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>) - the bifunction to apply to each table in this TableMap\n  :return: (io.deephaven.db.v2.TableMap) a new TableMap where each table has had function applied\n  \n*Overload 2*  \n  :param returnDefinition: (io.deephaven.db.tables.TableDefinition) - the table definition for the tables the function will return\n  :param function: (java.util.function.BiFunction<java.lang.Object,io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>) - the bifunction to apply to each table in this TableMap\n  :return: (io.deephaven.db.v2.TableMap) a new TableMap where each table has had function applied",
  "transformTablesWithMap": "Applies a BiFunction function on all tables in this TableMap and otherMap that have matching keys, producing a\n new TableMap which will update as new keys are added.  Only applies the function to tables which exist in both\n maps.\n\n:param otherMap: (io.deephaven.db.v2.TableMap) - the other TableMap\n:param function: (java.util.function.BiFunction<io.deephaven.db.tables.Table,io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>) - the function to apply to each table in this TableMap, the tables in this map are the first argument\n                 the tables in the other map are the second argument.\n:return: (io.deephaven.db.v2.TableMap) a new TableMap where each table has had function applied",
  "values": "Gets the values.\n\n:return: (java.util.Collection<io.deephaven.db.tables.Table>) values"
 },
 "path": "io.deephaven.db.v2.TableMap",
 "text": "A map of tables.",
 "typeName": "interface"
}