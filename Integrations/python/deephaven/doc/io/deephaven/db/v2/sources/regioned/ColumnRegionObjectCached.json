{
 "className": "io.deephaven.db.v2.sources.regioned.ColumnRegionObjectCached",
 "methods": {
  "fillChunkAppend": "Appends the values referenced by orderKeys onto destination.  orderKeys are assumed\n to be entirely contained on this Page.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? superColumnRegionObjectCached.ATTR>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "getCache": ":return: ColumnRegionObjectCached.OFFSET_LOOKUP_CACHE",
  "getNativeType": ":return: java.lang.Class<?>",
  "getObject": "Get a single object from this region.\n\n*Overload 1*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A ColumnRegionFillContext to enable resource caching where suitable, with current\n                       region index pointing to this region\n  :param elementIndex: (long) - Element (object) index in the table's address space\n  :return: (ColumnRegionObjectCached.T) The object value at the specified element (object) index\n  \n*Overload 2*  \n  :param elementIndex: (long) - Element (object) index in the table's address space\n  :return: (ColumnRegionObjectCached.T) The object value at the specified element (object) index",
  "length": ":return: (long) the length of this page.",
  "lookup": ":param offset: int\n:param extra: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:return: ColumnRegionObjectCached.T",
  "releaseCachedResources": "Release any resources held for caching purposes. Implementations need not guarantee that they are safe for\n normal use concurrently with invocations of this method.",
  "skipCache": ":return: io.deephaven.db.v2.sources.regioned.ColumnRegionObject<ColumnRegionObjectCached.T,ColumnRegionObjectCached.ATTR>"
 },
 "path": "io.deephaven.db.v2.sources.regioned.ColumnRegionObjectCached",
 "text": "Column region interface for regions that support fetching objects.",
 "typeName": "class"
}