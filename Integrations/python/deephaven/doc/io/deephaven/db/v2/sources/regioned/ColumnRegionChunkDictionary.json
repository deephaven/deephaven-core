{
 "className": "io.deephaven.db.v2.sources.regioned.ColumnRegionChunkDictionary",
 "methods": {
  "create": "Note: Java generics information - <DATA_TYPE,\nATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:param pageMask: long\n:param dataType: java.lang.Class<DATA_TYPE>\n:param dictionaryChunkSupplier: java.util.function.Supplier<io.deephaven.db.v2.sources.chunk.Chunk<ATTR>>\n:return: io.deephaven.db.v2.sources.regioned.ColumnRegionObject<DATA_TYPE,ATTR>",
  "fillChunkAppend": "Appends the values referenced by orderKeys onto destination. orderKeys are assumed to\n be entirely contained on this Page.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? superColumnRegionChunkDictionary.ATTR>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "gatherDictionaryValuesIndex": "Optional method that should only be used on regions returned by ColumnRegionObject.getDictionaryValuesRegion().\n Gathers\n\n:param keysToVisit: (io.deephaven.db.v2.utils.ReadOnlyIndex.SearchIterator) - A search iterator over the enclosing table address space (which must have the same\n                          regions at the same masks), positioned at an index key in this region. Used to\n                          identify regions to visit. Should be advanced to after this region as a side-effect.\n:param knownKeys: (io.deephaven.db.v2.utils.OrderedKeys.Iterator) - An iterator over the previously-known index keys, positioned at the first known key in\n                          this region, or after the region's maximum key if no keys are known. Should be advanced\n                          to after this region as a side effect.\n:param sequentialBuilder: (io.deephaven.db.v2.utils.Index.SequentialBuilder) - Output builder; implementations should append ranges for index keys not found in\n                          knownKeys\n:return: (boolean) Whether keysToVisit has been exhausted",
  "getChunk": "Same as ChunkSource.getChunk(GetContext, OrderedKeys), except that you pass in the begin and last keys representing\n the begin and last (inclusive) keys of a single range rather than an OrderedKeys. Typically you want to\n call this only if you don't have an OrderedKeys, such as during an\n OrderedKeys.forAllLongRanges(LongRangeConsumer) call. In this case, it allows you to avoid creating an\n intermediary OrderedKeys object.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n        the Context may be used to provide a Chunk data pool\n:param firstKey: (long) - The beginning key (inclusive) of the range to fetch in the chunk\n:param lastKey: (long) - The last key (inclusive) of the range to fetch in the chunk\n:return: io.deephaven.db.v2.sources.chunk.Chunk<? extends ColumnRegionChunkDictionary.ATTR>",
  "getObject": "Get a single object from this region.\n\n:param elementIndex: (long) - Element (object) index in the table's address space\n:return: (ColumnRegionChunkDictionary.DATA_TYPE) The object value at the specified element (object) index"
 },
 "path": "io.deephaven.db.v2.sources.regioned.ColumnRegionChunkDictionary",
 "text": "ColumnRegionObject implementation for regions that support fetching symbols from a dictionary represented as\n an ObjectChunk.",
 "typeName": "class"
}