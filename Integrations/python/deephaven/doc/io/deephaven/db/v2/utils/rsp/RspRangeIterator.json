{
 "className": "io.deephaven.db.v2.utils.rsp.RspRangeIterator",
 "methods": {
  "advance": "Advance the current iterator position while the current range end is less than key.\n This results in either (a) true, leaving a current range whose start value is greater or equal than key,\n or (b) false, leaving an exhausted, invalid iterator.\n\n Note if the iterator is not exhausted, true is returned and the satisfying range is left as\n the iterator's current range: no need to call next to get to it.\n Also note the iterator may not move if at call entry the current range already satisfies (a).\n\n If this method returns false, it implies the iterator has been exhausted, the current range is invalid,\n and subsequent calls to hasNext will return false;  there is no guarantee as to where the start\n and end positions are left in this case.\n\n:param key: (long) - a key to search forward from the current iterator position\n:return: (boolean) true if case (a), false if case (b).",
  "end": ":return: (long) end point of the current interval, inclusive.",
  "forEachLongRange": ":param lrc: io.deephaven.db.v2.utils.LongRangeAbortableConsumer\n:return: boolean",
  "hasNext": "This method should be called:\n * After the iterator is created and before calling any other methods;\n   it returns false, calling any other methods results in undefined behavior.\n * Right after a call to next, similar to above.\n\n:return: (boolean) true if a call to next leads to a valid range to be read from start() and end().",
  "postpone": "At call, start() <= v <= end()\n\n:param v: (long) - Next call to start will return this value.",
  "rangeIteratorView": "Create a RangeIterator that is a view into this iterator;\n the returned rangeIterator has current start() - startOffset as it initial start value\n (note the iterator needs to have a valid current position at the time of the call).\n The returned RangeIterator includes all the ranges until the end parameter (exclusive),\n and as it advances it will make the underlying iterator advance.\n Once the RangeIterator is exhausted, the underlying iterator will have a current value\n that is one after the last range returned by the range iterator (not this may have\n been truncated to a partial, still valid, range).\n\n:param startOffset: (long) - The resulting range iterator returns ranges offset with this value.\n:param rangesEnd: (long) - boundary (exclusive) on the underlying iterator ranges for the ranges returned.\n:return: io.deephaven.db.v2.utils.rsp.RspRangeIterator.RangeIteratorView",
  "search": "Advance the current iterator (start) position to the rightmost (last) value v that maintains\n comp.directionToTargetFrom(v) >= 0.  I.e, either hasNext() returns false after this call, or the next value\n in the iterator nv would be such that comp.directionToTargetFrom(nv) < 0.\n\n Note this method should be called only after calling hasNext() and next() at least once, eg,\n from a valid current position in a non-empty and also non-exhausted iterator.\n\n:param comp: (io.deephaven.db.v2.utils.IndexUtilities.Comparator) - a comparator used to search forward from the current iterator position",
  "start": ":return: (long) start point of the current interval."
 },
 "path": "io.deephaven.db.v2.utils.rsp.RspRangeIterator",
 "typeName": "class"
}