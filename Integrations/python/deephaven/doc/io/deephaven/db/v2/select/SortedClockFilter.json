{
 "className": "io.deephaven.db.v2.select.SortedClockFilter",
 "methods": {
  "copy": "Create a copy of this SelectFilter.\n\n:return: (io.deephaven.db.v2.select.SortedClockFilter) an independent copy of this SelectFilter.",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getSortColumns": "Get the columns on which the input table should be sorted before filtering.\n\n:return: (java.lang.String[]) Columns to sort on, or null if there are no such columns",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "requiresSorting": ":return: (boolean) True iff getSortColumns will return a non-null, non-empty array of column names to sort on.",
  "sortingDone": "Advise this filter that sorting has been performed.  requiresSorting must return false hereafter.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.select.SortedClockFilter",
 "text": "This will filter a table on a DBDateTime column for all rows greater than \"now\" according to a supplied clock.\n It requires sorting of the input table according to the specified timestamp column, leveraging this for a very\n efficient implementation (albeit one that requires sorting first) and an output sequence that is monotonically\n nondecreasing in the specified column.",
 "typeName": "class"
}