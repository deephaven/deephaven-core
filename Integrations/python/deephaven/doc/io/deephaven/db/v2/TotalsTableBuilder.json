{
 "className": "io.deephaven.db.v2.TotalsTableBuilder",
 "methods": {
  "addOperation": "**Incompatible overloads text - text from the first overload:**\n\nAdds an operation for a column.\n\n The add method is used instead of the setOperation(String, AggType, String) method when more than one\n aggregation per input column is desired.\n\n*Overload 1*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (io.deephaven.db.v2.by.AggType) - the aggregation operation for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 2*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (io.deephaven.db.v2.by.AggType) - the aggregation operation for this column\n  :param format: (java.lang.String) - the format string for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 3*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (java.lang.String) - the aggregation operation for this column\n  :param format: (java.lang.String) - the format string for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 4*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (java.lang.String) - the aggregation operation for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder",
  "buildDirective": "Creates the string directive used to set the Table attribute.\n\n:return: (java.lang.String) the attribute string representing this TotalsTableBuilder.",
  "fromDirective": "Produce a TotalsTableBuilder from a directive string.\n\n The buildDirective() method produces a String representation of a TotalsTableBuilder, this function\n is its inverse.\n\n:param directive: (java.lang.String) - the directive.\n:return: (io.deephaven.db.v2.TotalsTableBuilder) a TotalsTableBuilder",
  "get": "Produce a totals table builder from the source table.\n\n:param source: (io.deephaven.db.tables.Table) - the source table\n:return: (io.deephaven.db.v2.TotalsTableBuilder) a TotalsTableBuilder derived from the source table's totals table attribute",
  "getDefaultOperation": "Gets the operation to use for columns without an operation specified.\n\n:return: (io.deephaven.db.v2.by.AggType) the default operation",
  "getFormats": "Gets the format for an aggregated column.\n\n:param column: (java.lang.String) - the column to get the format for\n:return: (java.util.Map<io.deephaven.db.v2.by.AggType,java.lang.String>) a map from AggType to the corresponding format string",
  "getOperations": "Gets the operations for a given column.\n\n:param column: (java.lang.String) - the column to get the operations for\n:return: (java.util.Set<io.deephaven.db.v2.by.AggType>) a set of aggregations for the column",
  "getShowGrandTotalsByDefault": "Should grand totals be shown by default?\n\n:return: (boolean) true if grand totals should be shown by default",
  "getShowTotalsByDefault": "Should totals be shown by default?\n\n:return: (boolean) true if totals should be shown by default",
  "hasDefinedTotals": "Does a table have a totals table defined?\n\n:param source: (io.deephaven.db.tables.Table) - the source table\n:return: (boolean) true if source has a totals table defined",
  "makeAggregationFactory": "Produce a ComboAggregateFactory from a source table and builder.\n\n:param source: (io.deephaven.db.tables.Table) - the source table\n:param builder: (io.deephaven.db.v2.TotalsTableBuilder) - the TotalsTableBuilder\n:return: (io.deephaven.db.v2.by.ComboAggregateFactory) the ComboAggregateFactory described by source and builder.",
  "makeTotalsTable": "**Incompatible overloads text - text from the first overload:**\n\nCreate a totals table from a source table.\n\n Given a source table that has had a TotalsTableBuilder applied, create a new totals table from the table.\n If no TotalsTableBuilder has been applied, then the columns are summed.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - the source table\n  :return: (io.deephaven.db.tables.Table) an aggregated totals table\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - the source table\n  :param builder: (io.deephaven.db.v2.TotalsTableBuilder) - the TotalsTableBuilder\n  :param groupByColumns: (java.lang.String...) - the columns to group by\n  :return: (io.deephaven.db.tables.Table) an aggregated totals table",
  "operationApplies": "Does the operation apply to type?\n\n:param type: (java.lang.Class) - the column type\n:param operation: (io.deephaven.db.v2.by.AggType) - the aggregation operation\n:return: (boolean) true if the operation is applicable to columns of this type",
  "setDefaultOperation": "Sets the operation for columns which are not otherwise specified.\n\n*Overload 1*  \n  :param defaultOperation: (io.deephaven.db.v2.by.AggType) - the default operation\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 2*  \n  :param defaultOperation: (java.lang.String) - the default operation\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder",
  "setFormat": "Sets the format of a column.\n\n*Overload 1*  \n  :param column: (java.lang.String) - the column to set the format for\n  :param agg: (io.deephaven.db.v2.by.AggType) - the aggregation type the format is relevant for\n  :param format: (java.lang.String) - the format string\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 2*  \n  :param column: (java.lang.String) - the column to set the format for\n  :param agg: (java.lang.String) - the aggregation type the format is relevant for, \"*\" for all aggregations\n  :param format: (java.lang.String) - the format string\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder",
  "setOperation": "Sets the operation for a column.\n\n*Overload 1*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (io.deephaven.db.v2.by.AggType) - the aggregation operation for this column\n  :param format: (java.lang.String) - the format string for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 2*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (io.deephaven.db.v2.by.AggType) - the aggregation operation for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 3*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (java.lang.String) - the aggregation operation for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder\n  \n*Overload 4*  \n  :param column: (java.lang.String) - the name of the column to operate on\n  :param operation: (java.lang.String) - the aggregation operation for this column\n  :param format: (java.lang.String) - the format string for this column\n  :return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder",
  "setShowGrandTotalsByDefault": "Set whether grand totals are shown by default.\n\n:param showGrandTotalsByDefault: (boolean) - whether grand totals are shown by default\n:return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder",
  "setShowTotalsByDefault": "Set whether totals are shown by default.\n\n:param showTotalsByDefault: (boolean) - whether totals are shown by default\n:return: (io.deephaven.db.v2.TotalsTableBuilder) this TotalsTableBuilder",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.db.v2.TotalsTableBuilder",
 "text": "Defines the default aggregations and display for a totals table.\n\n The builder is intended to be passed to the Table.setTotalsTable(TotalsTableBuilder) operation after the\n operations are applied.",
 "typeName": "class"
}