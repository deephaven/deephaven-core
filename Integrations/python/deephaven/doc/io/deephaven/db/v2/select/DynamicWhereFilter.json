{
 "className": "io.deephaven.db.v2.select.DynamicWhereFilter",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "copy": "Create a copy of this SelectFilter.\n\n:return: (io.deephaven.db.v2.select.DynamicWhereFilter) an independent copy of this SelectFilter.",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "filter": "Filter selection to only matching rows.\n\n:param selection: io.deephaven.db.v2.utils.Index\n:param fullSet: io.deephaven.db.v2.utils.Index\n:param table: io.deephaven.db.tables.Table\n:param usePrev: boolean\n:return: (io.deephaven.db.v2.utils.Index) the subset of selection accepted by this filter",
  "getColumnArrays": "Get the array columns required by this select filter.\n\n:return: (java.util.List<java.lang.String>) the columns used as array input by this select filter.",
  "getColumns": "Get the columns required by this select filter.\n\n:return: (java.util.List<java.lang.String>) the columns used as input by this select filter.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "init": "Initialize this select filter given the table definition\n\n:param tableDefinition: io.deephaven.db.tables.TableDefinition",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "isRefreshing": "Is this filter refreshing?\n\n:return: (boolean) if this filter is refreshing",
  "isSimpleFilter": ":return: (boolean) true if this is a filter that does not require any code execution, but rather is handled entirely\n  within the database engine.",
  "satisfied": "Is this ancestor satisfied? Note that this method must be safe to call on any thread.\n\n:param step: long\n:return: (boolean) Whether the dependency is satisfied on step (and will not fire subsequent notifications)",
  "setRecomputeListener": "Set the Listener that should be notified if results based on this filter must be recomputed.\n\n:param listener: io.deephaven.db.v2.select.SelectFilter.RecomputeListener",
  "toString": ":return: java.lang.String",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.select.DynamicWhereFilter",
 "text": "A where filter that extracts a set of inclusion or exclusion keys from a set table.\n\n Each time the set table ticks, the entire where filter is recalculated.",
 "typeName": "class"
}