{
 "className": "io.deephaven.db.v2.sources.EmptyToNullStringRegionedColumnSource",
 "methods": {
  "get": ":param index: long\n:return: EmptyToNullStringRegionedColumnSource.STRING_LIKE_TYPE",
  "getGroupToRange": "**Incompatible overloads text - text from the first overload:**\n\nCompute grouping information for (at least) all keys present in index.\n\n*Overload 1*  \n  :return: (java.util.Map<EmptyToNullStringRegionedColumnSource.STRING_LIKE_TYPE,io.deephaven.db.v2.utils.Index>) A map from distinct data values to an index that contains those values\n  \n*Overload 2*  \n  :param index: io.deephaven.db.v2.utils.Index\n  :return: (java.util.Map<EmptyToNullStringRegionedColumnSource.STRING_LIKE_TYPE,io.deephaven.db.v2.utils.Index>) A map from distinct data values to an index that contains those values",
  "getPrev": ":param index: long\n:return: EmptyToNullStringRegionedColumnSource.STRING_LIKE_TYPE",
  "isImmutable": "Determine if this column source is immutable, meaning that the values at a given index key never change.\n\n:return: (boolean) true if the values at a given index of the column source never change, false otherwise",
  "releaseCachedResources": "Release any resources held for caching purposes. Implementations need not guarantee that concurrent accesses are\n correct, as the purpose of this method is to ensure cleanup for column sources that will no longer be used."
 },
 "path": "io.deephaven.db.v2.sources.EmptyToNullStringRegionedColumnSource",
 "text": "Regioned ColumnSource that replaces empty CharSequences with null.",
 "typeName": "class"
}