{
 "className": "io.deephaven.db.v2.by.LongStreamSortedFirstOrLastChunkedOperator",
 "methods": {
  "addChunk": "Aggregate a chunk of data into the result columns.\n\n*Overload 1*  \n  :param bucketedContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) - the operator-specific context\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values to aggregate\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destinations: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the destinations in resultColumn to aggregate into, parallel with startPositions and length\n  :param startPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the starting positions in the chunk for each destination\n  :param length: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of values in the chunk for each destination\n  :param stateModified: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) - a boolean output array, parallel to destinations, which is set to true if the corresponding\n          destination has been modified\n  \n*Overload 2*  \n  :param singletonContext: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) - the operator-specific context\n  :param chunkSize: (int) - the size of the addition\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the values to aggregate\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destination: (long) - the destination in the result columns\n  :return: (boolean) true if the state was modified, false otherwise",
  "ensureCapacity": "Ensure that this operator can handle destinations up to tableSize - 1.\n\n:param tableSize: (long) - the new size of the table",
  "propagateInitialState": "Perform any internal state keeping needed for destinations that were added during initialization.\n\n:param resultTable: (io.deephaven.db.v2.QueryTable) - The result QueryTable after initialization",
  "propagateUpdates": "Perform any internal state keeping needed for destinations that were added (went from 0 keys to &gt 0), removed\n (went from &gt 0 keys to 0), or modified (keys added or removed, or keys modified) by this iteration. Note that\n the arguments to this method should not be mutated in any way.\n\n:param downstream: (io.deephaven.db.v2.ShiftAwareListener.Update) - The downstream ShiftAwareListener.Update (which does not have its\n        ModifiedColumnSet finalized yet)\n:param newDestinations: (io.deephaven.db.v2.utils.ReadOnlyIndex) - New destinations added on this update",
  "resetForStep": "Reset any per-step internal state. Note that the arguments to this method should not be mutated in any way.\n\n:param upstream: (io.deephaven.db.v2.ShiftAwareListener.Update) - The upstream ShiftAwareListener.Update"
 },
 "path": "io.deephaven.db.v2.by.LongStreamSortedFirstOrLastChunkedOperator",
 "text": "Chunked aggregation operator for sorted first/last-by using a long sort-column on stream tables.",
 "typeName": "class"
}