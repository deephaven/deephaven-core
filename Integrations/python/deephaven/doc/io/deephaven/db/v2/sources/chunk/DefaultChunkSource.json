{
 "className": "io.deephaven.db.v2.sources.chunk.DefaultChunkSource",
 "methods": {
  "getChunk": "**Incompatible overloads text - text from the first overload:**\n\nReturns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n*Overload 1*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n          the Context may be used to provide a Chunk data pool\n  :param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n  :return: (io.deephaven.db.v2.sources.chunk.Chunk<? extends DefaultChunkSource.ATTR>) A chunk of data corresponding to the keys from the given OrderedKeys\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n          the Context may be used to provide a Chunk data pool\n  :param firstKey: (long) - The beginning key (inclusive) of the range to fetch in the chunk\n  :param lastKey: (long) - The last key (inclusive) of the range to fetch in the chunk\n  :return: io.deephaven.db.v2.sources.chunk.Chunk<? extends DefaultChunkSource.ATTR>",
  "getChunkByFilling": ":param context: io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys\n:return: io.deephaven.db.v2.sources.chunk.Chunk<DefaultChunkSource.ATTR>",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) A context for use with fill operations",
  "makeGetContext": "Allocate a new ChunkSource.GetContext for retrieving chunks from this GetContextMaker, typically\n a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size required for any WritableChunk allocated as part of the result.\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) A context for use with get operations"
 },
 "path": "io.deephaven.db.v2.sources.chunk.DefaultChunkSource",
 "typeName": "interface"
}