{
 "className": "io.deephaven.db.v2.locations.impl.TableLocationSubscriptionBuffer",
 "methods": {
  "handleException": "Notify the listener that an exception was encountered while initiating or maintaining the subscription.\n Delivery of an exception implies that the subscription is no longer valid.\n This might happen during subscription establishment, and consequently should be checked for after\n subscribe completes.\n\n:param exception: (io.deephaven.db.v2.locations.TableDataException) - The exception",
  "handleTableLocationKey": "Notify the listener of a TableLocationKey encountered while initiating or maintaining the location\n subscription.  This should occur at most once per location, but the order of delivery is not\n guaranteed.\n\n:param tableLocationKey: (io.deephaven.db.v2.locations.ImmutableTableLocationKey) - The new table location key",
  "processPending": "Subscribe if needed, and return any pending location keys (or throw a pending exception) from the table location\n provider.\n A given location key will only be returned by a single call to processPending() (unless state is reset).\n No order is maintained internally.\n If a pending exception is thrown, this signals that the subscription is no longer valid and no\n subsequent location keys will be returned.\n\n:return: (java.util.Collection<io.deephaven.db.v2.locations.ImmutableTableLocationKey>) The collection of pending location keys",
  "reset": "Unsubscribe and clear any state pending processing."
 },
 "path": "io.deephaven.db.v2.locations.impl.TableLocationSubscriptionBuffer",
 "text": "Intermediates between push-based subscription to a TableLocationProvider and polling on LiveTable refresh.",
 "typeName": "class"
}