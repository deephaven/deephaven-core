{
 "className": "io.deephaven.db.v2.locations.DeferredTableLocation$DataDriven",
 "methods": {
  "getFormat": "Get the format that was used to persist this table location.\n\n:return: (io.deephaven.db.v2.locations.TableLocation.Format) The format for this table location",
  "getLastModifiedTimeMillis": ":return: (long) The last modified time for a table location, in milliseconds from the epoch:\n         NULL_TIME : Modification time information is unknown or does not exist for this table location\n             >= 0L : The time this table was last modified, in milliseconds from the UTC epoch",
  "getSize": ":return: (long) The size of a table location:\n         NULL_SIZE : Size information is unknown or does not exist for this table location\n              >= 0 : The table location exists and has (possibly empty) data",
  "getStateLock": ":return: (java.lang.Object) The Object that accessors should synchronize on if they want to invoke multiple getters with consistent results.",
  "refresh": "Initialize or refresh state information.",
  "subscribe": "Subscribe to pushed location updates. Subscribing more than once with the same listener without an\n intervening unsubscribe is an error, and may result in undefined behavior.\n This is a possibly asynchronous operation - listener will receive 1 or more handleUpdate callbacks,\n followed by 0 or 1 handleException callbacks during invocation and continuing after completion, on a thread\n determined by the implementation.  Don't hold a lock that prevents notification delivery while subscribing!\n This method only guarantees eventually consistent state.  To force a state update, use refresh() after\n subscription completes.\n\n:param listener: (io.deephaven.db.v2.locations.TableLocation.Listener) - A listener",
  "supportsSubscriptions": "Does this location support subscriptions? That is, can this location ever have ticking data?\n\n:return: (boolean) True if this location supports subscriptions",
  "unsubscribe": "Unsubscribe from pushed location updates.\n\n:param listener: (io.deephaven.db.v2.locations.TableLocation.Listener) - The listener to forget about"
 },
 "path": "io.deephaven.db.v2.locations.DeferredTableLocation.DataDriven",
 "text": "DeferredTableLocation that needs to initialize its inner location for all non-key methods.",
 "typeName": "class"
}