{
 "className": "io.deephaven.db.v2.select.TimeSeriesFilter",
 "methods": {
  "copy": "Create a copy of this SelectFilter.\n\n:return: (io.deephaven.db.v2.select.TimeSeriesFilter) an independent copy of this SelectFilter.",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "filter": "Filter selection to only matching rows.\n\n:param selection: (io.deephaven.db.v2.utils.Index) - the indices that should be filtered.  The selection must be a subset of fullSet; and may not\n                  include rows that the engine determines need not be evaluated to produce the result.\n:param fullSet: (io.deephaven.db.v2.utils.Index) - the complete Index of the table to filter.  The fullSet is used for calculating variables like\n                \"i\" or \"ii\".\n:param table: (io.deephaven.db.tables.Table) - the table to filter\n:param usePrev: (boolean) - true if previous values should be used.  Implementing previous value filtering is optional, and\n                a SelectFilter.PreviousFilteringNotSupported exception may be thrown.  If a PreviousFiltering exception\n                is thrown, then the caller must acquire the LiveTableMonitor lock.\n:return: (io.deephaven.db.v2.utils.Index) the subset of selection accepted by this filter",
  "getColumnArrays": "Get the array columns required by this select filter.\n\n:return: (java.util.List<java.lang.String>) the columns used as array input by this select filter.",
  "getColumns": "Get the columns required by this select filter.\n\n:return: (java.util.List<java.lang.String>) the columns used as input by this select filter.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "init": "Initialize this select filter given the table definition\n\n:param tableDefinition: (io.deephaven.db.tables.TableDefinition) - the definition of the table that will be filtered",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "isRefreshing": "Is this filter refreshing?\n\n:return: (boolean) if this filter is refreshing",
  "isSimpleFilter": ":return: (boolean) true if this is a filter that does not require any code execution, but rather is handled entirely\n  within the database engine.",
  "refresh": "Refresh this LiveTable.",
  "setRecomputeListener": "Set the Listener that should be notified if results based on this filter must be recomputed.\n\n:param listener: (io.deephaven.db.v2.select.SelectFilter.RecomputeListener) - the listener to notify.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.select.TimeSeriesFilter",
 "text": "This will filter a table for the most recent N nanoseconds (must be on a date time column).",
 "typeName": "class"
}