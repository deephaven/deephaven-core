{
 "className": "io.deephaven.db.v2.locations.AbstractTableLocationProvider",
 "methods": {
  "ensureInitialized": "Ensure that this location provider is initialized. Mainly useful in cases where it cannot be otherwise\n guaranteed that TableLocationProvider.refresh() or TableLocationProvider.subscribe(Listener) has been called prior to calls to\n the various table location fetch methods.\n\n:return: (io.deephaven.db.v2.locations.TableLocationProvider) this, to allow method chaining",
  "getNamespace": ":return: (java.lang.CharSequence) The namespace enclosing this table",
  "getTableLocationIfPresent": ":param tableLocationKey: (io.deephaven.db.v2.locations.TableLocationKey) - A key specifying the location to get\n:return: (io.deephaven.db.v2.locations.TableLocation) The TableLocation matching the given key if present, else null",
  "getTableLocations": "Get this provider's currently available locations.  Locations returned may have null size - that is, they may not\n \"exist\" for application purposes.\n\n:return: (java.util.Collection<io.deephaven.db.v2.locations.TableLocation>) A collection of locations available from this provider",
  "getTableName": ":return: (java.lang.CharSequence) The name of this table",
  "getTableType": ":return: (io.deephaven.db.v2.locations.TableType) The type of this table (which generally dictates storage, metadata-availability, etc)",
  "handleTableLocationKey": "Deliver a possibly-new key.\n\n:param locationKey: (io.deephaven.db.v2.locations.TableLocationKey) - The new key",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.db.v2.locations.AbstractTableLocationProvider",
 "text": "Partial TableLocationProvider implementation for use by TableDataService implementations.\n \n It implements an interface similar to TableLocationProvider.Listener for implementation classes to use when\n communicating with the parent.\n \n Note that implementations are responsible for determining when it's appropriate to call setInitialized()\n and/or override doInitialization().",
 "typeName": "class"
}