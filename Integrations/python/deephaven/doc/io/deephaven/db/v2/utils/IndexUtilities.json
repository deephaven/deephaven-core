{
 "className": "io.deephaven.db.v2.utils.IndexUtilities",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:param it: io.deephaven.db.v2.utils.ReadOnlyIndex.RangeIterator\n:return: io.deephaven.base.log.LogOutput",
  "fillKeyIndicesChunk": ":param index: io.deephaven.db.v2.utils.ReadOnlyIndex\n:param chunkToFill: io.deephaven.db.v2.sources.chunk.WritableLongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>",
  "fillKeyRangesChunk": ":param index: io.deephaven.db.v2.utils.ReadOnlyIndex\n:param chunkToFill: io.deephaven.db.v2.sources.chunk.WritableLongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyRanges>",
  "forAllInvertedLongRanges": "This is equivalent to `sourceIndex.invert(destIndex).forAllLongRanges(lrc)`, but requires O(1) space. Note that\n coalescing adjacent position-space runs enables callers to make minimal System.arraycopy calls.\n\n:param sourceIndex: (io.deephaven.db.v2.utils.Index) - index to find the destIndex keys in - ranges in the callback will be on this index\n:param destIndex: (io.deephaven.db.v2.utils.Index) - index values to look for within sourceIndex\n:param lrc: (io.deephaven.db.v2.utils.LongRangeConsumer) - consumer to handle each inverted range that is encountered",
  "rangeSearch": "Look for the biggest value of i that satisfies begin <= i <= end and comp.directionToTargetFrom(i) > 0, or some\n value that satisfies comp.directionToTargetFrom(i) == 0.\n\n:param begin: (long) - The beginning of the range (inclusive)\n:param end: (long) - The end of the range (inclusive)\n:param comp: (io.deephaven.db.v2.utils.IndexUtilities.Comparator) - a Comparator.\n:return: (long) the last position i inside the provided range that satisfies comp.directionToTargetFrom(i) > 0, or some\n         position that satisfies comp.directionToTargetFrom(i) == 0."
 },
 "path": "io.deephaven.db.v2.utils.IndexUtilities",
 "typeName": "class"
}