{
 "className": "io.deephaven.db.v2.utils.Index",
 "methods": {
  "compact": "May reclaim some unused memory.",
  "extract": "Removes all the keys from other index that are present in the current set.\n\n:param other: io.deephaven.db.v2.utils.Index\n:return: (io.deephaven.db.v2.utils.Index) a new index representing the keys removed",
  "initializePreviousValue": "Initializes our previous value from the current value.\n\n This call is used by operations that manipulate an Index while constructing it, but need to set the state at the\n end of the initial operation to the current state.\n\n Calling this in other circumstances will yield undefined results.",
  "insert": "**Incompatible overloads text - text from the first overload:**\n\nAdd a single key to this index if it's not already present.\n\n*Overload 1*  \n  :param key: (long) - The key to add\n  \n*Overload 2*  \n  :param keys: (io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyIndices>) - The LongChunk of Attributes.OrderedKeyIndices to insert\n  :param offset: (int) - The offset in keys to begin inserting keys from\n  :param length: (int) - The number of keys to insert\n  \n*Overload 3*  \n  :param added: (io.deephaven.db.v2.utils.ReadOnlyIndex) - The index to add",
  "insertRange": "Add all keys in a closed range to this index if they are not already present.\n\n:param startKey: (long) - The first key to add\n:param endKey: (long) - The last key to add (inclusive)",
  "insertWithShift": "For each key in the provided index, shift it by shiftAmount and insert it in the current index.\n\n:param shiftAmount: (long) - the amount to add to each key in the index argument before insertion.\n:param other: (io.deephaven.db.v2.utils.ReadOnlyIndex) - the index with the keys to shift and insert.",
  "remove": "**Incompatible overloads text - text from the first overload:**\n\nRemove a single key from this index if it's present.\n\n*Overload 1*  \n  :param key: (long) - The key to remove\n  \n*Overload 2*  \n  :param keys: (io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyIndices>) - The LongChunk of Attributes.OrderedKeyIndices to remove\n  :param offset: (int) - The offset in keys to begin removing keys from\n  :param length: (int) - The number of keys to remove\n  \n*Overload 3*  \n  :param removed: (io.deephaven.db.v2.utils.ReadOnlyIndex) - The index to remove",
  "removeRange": "Remove all keys in a closed range from this index if they are present.\n\n:param startKey: (long) - The first key to remove\n:param endKey: (long) - The last key to remove (inclusive)",
  "retain": "Modifies the index by removing any keys not in the indexToIntersect argument.\n\n:param indexToIntersect: (io.deephaven.db.v2.utils.ReadOnlyIndex) - an index with the keys to retain; any other keys not in indexToIntersect will be removed.",
  "retainRange": "Modifies the index by keeping only keys in the interval [start, end]\n\n:param start: (long) - beginning of interval of keys to keep.\n:param end: (long) - end of interval of keys to keep (inclusive).",
  "shiftInPlace": ":param shiftAmount: long",
  "update": "Simultaneously adds the keys from the first index and removes the keys from the second one. API assumption: the\n intersection of added and removed is empty.\n\n:param added: io.deephaven.db.v2.utils.ReadOnlyIndex\n:param removed: io.deephaven.db.v2.utils.ReadOnlyIndex"
 },
 "path": "io.deephaven.db.v2.utils.Index",
 "text": "A set of sorted long keys between 0 and Long.MAX_VALUE",
 "typeName": "interface"
}