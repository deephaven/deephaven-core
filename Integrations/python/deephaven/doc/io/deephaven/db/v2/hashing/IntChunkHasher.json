{
 "className": "io.deephaven.db.v2.hashing.IntChunkHasher",
 "methods": {
  "hashInitial": "**Incompatible overloads text - text from the first overload:**\n\nCalled for the first (or only) hash value, sets the hash codes in destination corresponding to values.\n\n*Overload 1*  \n  :param value: java.lang.Object\n  :return: (int) the hashcode, as if you called the chunked version of this function\n  \n*Overload 2*  \n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableIntChunk<io.deephaven.db.v2.sources.chunk.Attributes.HashCode>",
  "hashUpdate": "**Incompatible overloads text - text from the first overload:**\n\nCalled for subsequent hash values, updates the hash codes in destination corresponding to values.\n\n*Overload 1*  \n  :param existing: int\n  :param value: java.lang.Object\n  :return: (int) the hashcode, as if you called the chunked version of this function\n  \n*Overload 2*  \n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableIntChunk<io.deephaven.db.v2.sources.chunk.Attributes.HashCode>"
 },
 "path": "io.deephaven.db.v2.hashing.IntChunkHasher",
 "typeName": "class"
}