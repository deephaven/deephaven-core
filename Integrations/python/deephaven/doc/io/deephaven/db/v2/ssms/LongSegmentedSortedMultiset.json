{
 "className": "io.deephaven.db.v2.ssms.LongSegmentedSortedMultiset",
 "methods": {
  "countChunk": ":return: io.deephaven.db.v2.sources.chunk.LongChunk<?>",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "fillAddedChunk": ":param chunk: io.deephaven.db.v2.sources.chunk.WritableLongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param position: int",
  "fillDateChunk": ":param destChunk: io.deephaven.db.v2.sources.chunk.WritableChunk",
  "fillKeyChunk": ":param keyChunk: io.deephaven.db.v2.sources.chunk.WritableChunk<?>\n:param offset: int",
  "fillRemovedChunk": ":param chunk: io.deephaven.db.v2.sources.chunk.WritableLongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param position: int",
  "get": ":param i: long\n:return: long",
  "getAddedSize": ":return: int",
  "getAsDate": ":param i: long\n:return: io.deephaven.db.tables.utils.DBDateTime",
  "getDirect": "Return a version of this DbArrayBase that is flattened out to only reference memory.\n\n:return: io.deephaven.db.tables.dbarrays.DbLongArray",
  "getDirectAsDate": ":return: io.deephaven.db.tables.dbarrays.DbArray<io.deephaven.db.tables.utils.DBDateTime>",
  "getMax": ":return: java.lang.Long",
  "getMaxCount": ":return: (long) the number of times the maximum value exists in this SSM.",
  "getMaxLong": ":return: long",
  "getMin": ":return: java.lang.Long",
  "getMinCount": ":return: (long) the number of times the minimum value exists in this SSM.",
  "getMinLong": ":return: long",
  "getNodeSize": ":return: int",
  "getPrev": ":param i: long\n:return: long",
  "getPrevAsDate": ":param offset: long\n:return: io.deephaven.db.tables.utils.DBDateTime",
  "getPrevValues": ":return: io.deephaven.db.tables.dbarrays.DbLongArray",
  "getRemovedSize": ":return: int",
  "hashCode": ":return: int",
  "insert": "Insert new valuesToInsert into this SSMS.  The valuesToInsert to insert must be sorted, without duplicates.\n\n The valuesToInsert and counts chunks will be modified during this call, and the resulting chunks are\n undefined.\n\n:param valuesToInsert: (io.deephaven.db.v2.sources.chunk.WritableChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the valuesToInsert to insert\n:param counts: (io.deephaven.db.v2.sources.chunk.WritableIntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of times each value occurs\n:return: (boolean) true if any new values were inserted",
  "keyChunk": ":return: io.deephaven.db.v2.sources.chunk.LongChunk<?>",
  "moveBackToFront": "Remove count elements from the back of this SSM and add them to the front of the destination SSM.\n \n The minimum element of this SSM must be less than or equal to the maximum of destination.\n\n:param untypedDestination: (io.deephaven.db.v2.ssms.SegmentedSortedMultiSet) - the SegmentedSortedMultiSet to prepend count elements to\n:param count: (long) - how many elements to move to the destination",
  "moveFrontToBack": "Remove count elements from the front of this SSM and add them to the back of the destination SSM.\n \n The minimum element of this SSM must be greater than or equal to the maximum of destination.\n\n:param untypedDestination: (io.deephaven.db.v2.ssms.SegmentedSortedMultiSet) - the SegmentedSortedMultiSet to append count elements to\n:param count: (long) - how many elements to move to the destination",
  "remove": "Remove valuesToRemove from this SSA.  The valuesToRemove to remove must be sorted.\n\n:param removeContext: (io.deephaven.db.v2.ssms.SegmentedSortedMultiSet.RemoveContext) - removalContext\n:param valuesToRemove: (io.deephaven.db.v2.sources.chunk.WritableChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the valuesToRemove to remove\n:param counts: io.deephaven.db.v2.sources.chunk.WritableIntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>\n:return: (boolean) true if any values were removed.",
  "setTrackDeltas": ":param shouldTrackDeltas: boolean",
  "size": "The size of this data structure.\n\n:return: (long) the size of the set (i.e. the number of unique elements).",
  "subArray": ":param fromIndex: long\n:param toIndex: long\n:return: io.deephaven.db.tables.dbarrays.DbLongArray",
  "subArrayAsDate": ":param fromIndexInclusive: long\n:param toIndexExclusive: long\n:return: io.deephaven.db.tables.dbarrays.DbArray<io.deephaven.db.tables.utils.DBDateTime>",
  "subArrayByPositions": ":param positions: long[]\n:return: io.deephaven.db.tables.dbarrays.DbLongArray",
  "subArrayByPositionsAsDates": ":param positions: long[]\n:return: io.deephaven.db.tables.dbarrays.DbArray<io.deephaven.db.tables.utils.DBDateTime>",
  "toArray": ":return: long[]",
  "toDateArray": ":return: io.deephaven.db.tables.utils.DBDateTime[]",
  "toDateChunk": ":return: io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>",
  "toDateString": ":return: java.lang.String",
  "toDbArray": ":return: io.deephaven.db.tables.dbarrays.DbArray<java.lang.Long>",
  "toString": ":return: java.lang.String",
  "totalSize": ":return: (long) the total size of the set in elements (i.e. if A exists twice, 2 is returned not one)"
 },
 "path": "io.deephaven.db.v2.ssms.LongSegmentedSortedMultiset",
 "typeName": "class"
}