{
 "className": "io.deephaven.db.v2.sources.aggregate.IntAggregateColumnSource",
 "methods": {
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "get": ":param index: long\n:return: io.deephaven.db.tables.dbarrays.DbIntArray",
  "getPrev": ":param index: long\n:return: io.deephaven.db.tables.dbarrays.DbIntArray",
  "getUngrouped": "Reach into a grouped column source and pull one element out of the array.\n\n:param groupIndexKey: long\n:param offsetInGroup: int\n:return: (java.lang.Object) Equivalent to ((DbArray)columnSource.get(columnIndex)).get(arrayIndex)",
  "getUngroupedBoolean": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: java.lang.Boolean",
  "getUngroupedByte": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: byte",
  "getUngroupedChar": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: char",
  "getUngroupedDouble": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: double",
  "getUngroupedFloat": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: float",
  "getUngroupedInt": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: int",
  "getUngroupedLong": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: long",
  "getUngroupedPrev": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: java.lang.Object",
  "getUngroupedPrevBoolean": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: java.lang.Boolean",
  "getUngroupedPrevByte": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: byte",
  "getUngroupedPrevChar": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: char",
  "getUngroupedPrevDouble": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: double",
  "getUngroupedPrevFloat": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: float",
  "getUngroupedPrevInt": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: int",
  "getUngroupedPrevLong": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: long",
  "getUngroupedPrevShort": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: short",
  "getUngroupedPrevSize": ":param groupIndexKey: long\n:return: long",
  "getUngroupedShort": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: short",
  "getUngroupedSize": ":param groupIndexKey: long\n:return: (long) the size of the DbArray at columnIndex.",
  "isUngroupable": "Does this particular instance of the column source support ungrouping?\n\n:return: (boolean) true if you can call the getUngrouped family of methods and get a valid answer.",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: int\n:param sharedContext: io.deephaven.db.v2.sources.chunk.SharedContext\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) A context for use with fill operations",
  "startTrackingPrevValues": "ColumnSource implementations that track previous values have the option to not actually start tracking previous\n values until this method is called. This is an option, not an obligation: some simple ColumnSource\n implementations (like TSingleValueSource for various T) always track previous values; other implementations (like\n PrevColumnSource) never do; some (like TArrayColumnSource) only start tracking once this method is called.\n\n An immutable column source can not have distinct prev values; therefore it is implemented as a no-op.",
  "ungrouped": ":return: io.deephaven.db.v2.sources.UngroupedColumnSource<COMPONENT_TYPE>"
 },
 "path": "io.deephaven.db.v2.sources.aggregate.IntAggregateColumnSource",
 "text": "ColumnSource implementation for aggregation result int columns.",
 "typeName": "class"
}