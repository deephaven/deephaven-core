{
 "className": "io.deephaven.db.v2.snapshot.SnapshotUtils",
 "methods": {
  "copyDataColumns": "For each name in srcColumns, copy all the data at srcColumns.get(name) (with a range of rows defined by srcIndex)\n to a column indicated by destColumns.get(name) (with a range of rows defined by destIndex).\n\n:param srcColumns: (java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.ColumnSource<?>>) - The stamp columns that serve as the source data\n:param srcIndex: (io.deephaven.db.v2.utils.Index) - The keys in the srcColumns we are reading from\n:param destColumns: (java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.WritableSource<?>>) - The destination columns we are writing to\n:param destIndex: (io.deephaven.db.v2.utils.Index) - The keys in destColumns we want to write to\n:param usePrev: boolean",
  "copyStampColumns": "**Incompatible overloads text - text from the first overload:**\n\nFor each name in stampColumns: - identify a stamp source (namely 'stampColumns.get(name)') - a row in that stamp\n source (namely 'stampKey') - a stamp dest (namely the column identified by 'destColumns.get(name)') - a bunch of\n destination rows (namely all the rows defined in 'destIndex') Then \"spray\" that single source value over those\n destination values.\n\n*Overload 1*  \n  :param stampColumns: (java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.ColumnSource<?>>) - The stamp columns that serve as the source data\n  :param stampKey: (long) - The source key\n  :param destColumns: (java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.WritableSource<?>>) - The destination columns we are \"spraying\" to\n  :param destIndex: (io.deephaven.db.v2.utils.Index) - The keys in destColumns we want to write to\n  \n*Overload 2*  \n  :param stampColumns: (java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.ColumnSource<?>>) - The stamp columns that serve as the source data\n  :param stampKey: (long) - The source key\n  :param destColumns: (java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.WritableSource<?>>) - The destination columns we are writing to to\n  :param destKey: (long) - The key in destColumns we want to write to",
  "createColumnSourceMap": "Creates a new columnSourceMap based on 'columns'.\n\nNote: Java generics information - <T>\n\n:param columns: java.util.Map<java.lang.String,? extendsio.deephaven.db.v2.sources.ColumnSource<?>>\n:param factory: java.util.function.BiFunction<java.lang.Class<?>,java.lang.Class<?>,T>\n:return: java.util.Map<java.lang.String,T>"
 },
 "path": "io.deephaven.db.v2.snapshot.SnapshotUtils",
 "typeName": "class"
}