{
 "className": "io.deephaven.db.v2.sources.ArrayBackedColumnSource",
 "methods": {
  "ensureCapacity": ":param size: long\n:param nullFill: boolean",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "fillChunkUnordered": "Populates a contiguous portion of the given destination chunk with data corresponding to the keys from the given LongChunk.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to keys\n:param keyIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - A chunk of individual, not assumed to be ordered keys to be fetched",
  "fillPrevChunkUnordered": "Populates a contiguous portion of the given destination chunk with prev data corresponding to the keys from the given LongChunk.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to keys\n:param keyIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - A chunk of individual, not assumed to be ordered keys to be fetched",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                    In particular, the Context may be used to provide a Chunk data pool\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n:return: (io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "getDateTimeMemoryColumnSource": "Produces an DateTimeArraySource with the given data.\n\n:param data: (long[]) - an array containing the data to insert into the ColumnSource, represented as long nanoseconds since\n             the epoch\n:return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<io.deephaven.db.tables.utils.DBDateTime>) an in-memory column source with the requested data",
  "getImmutableMemoryColumnSource": "**Incompatible overloads text - text from the first overload:**\n\nWrap the input array in an immutable ColumnSource. This method will unbox any boxed values,\n and directly use the result array.\n\n*Overload 1*  \n  :param dataArray: (java.lang.Object) - The array to turn into a ColumnSource\n  :return: (io.deephaven.db.v2.sources.ColumnSource<?>) An Immutable ColumnSource that directly wraps the input array.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param dataArray: (java.lang.Object) - The array to turn into a ColumnSource\n  :param dataType: (java.lang.Class<T>) - the data type of the resultant column source\n  :param componentType: (java.lang.Class<?>) - the component type for column sources of arrays or DbArrays\n  :return: (io.deephaven.db.v2.sources.ColumnSource<T>) An Immutable ColumnSource that directly wraps the input array.",
  "getMemoryColumnSource": "**Incompatible overloads text - text from the first overload:**\n\nProduces an ArrayBackedColumnSource with the given data.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param data: (java.util.Collection<T>) - a collection containing the data to insert into the ColumnSource.\n  :param dataType: (java.lang.Class<T>) - the data type of the resulting column source\n  :param componentType: (java.lang.Class<?>) - the component type of the resulting column source\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<T>) an in-memory column source with the requested data\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param data: (T[]) - an array containing the data to insert into the ColumnSource\n  :param dataType: (java.lang.Class<T>) - the data type of the resulting column source\n  :param componentType: (java.lang.Class<?>) - the component type of the resulting column source\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<T>) an in-memory column source with the requested data\n  \n*Overload 3*  \n  :param data: (byte[]) - an array containing the data to insert into the ColumnSource.\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<java.lang.Byte>) an in-memory column source with the requested data\n  \n*Overload 4*  \n  :param data: (char[]) - an array containing the data to insert into the ColumnSource.\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<java.lang.Character>) an in-memory column source with the requested data\n  \n*Overload 5*  \n  :param data: (double[]) - an array containing the data to insert into the ColumnSource.\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<java.lang.Double>) an in-memory column source with the requested data\n  \n*Overload 6*  \n  :param data: (float[]) - an array containing the data to insert into the ColumnSource.\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<java.lang.Float>) an in-memory column source with the requested data\n  \n*Overload 7*  \n  :param data: (int[]) - an array containing the data to insert into the ColumnSource.\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<java.lang.Integer>) an in-memory column source with the requested data\n  \n*Overload 8*  \n  :param data: (long[]) - an array containing the data to insert into the ColumnSource.\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<java.lang.Long>) an in-memory column source with the requested data\n  \n*Overload 9*  \n  :param data: (short[]) - an array containing the data to insert into the ColumnSource.\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<java.lang.Short>) an in-memory column source with the requested data\n  \n*Overload 10*  \n  Note: Java generics information - <T>\n  \n  :param size: (long) - the capacity of the returned column source\n  :param dataType: (java.lang.Class<T>) - the data type of the resultant column source\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<T>) an in-memory column source of the requested type\n  \n*Overload 11*  \n  Note: Java generics information - <T>\n  \n  :param dataType: java.lang.Class<T>\n  :param componentType: java.lang.Class<?>\n  :return: io.deephaven.db.v2.sources.ArrayBackedColumnSource<T>\n  \n*Overload 12*  \n  Note: Java generics information - <T>\n  \n  :param size: (long) - the capacity of the returned column source\n  :param dataType: (java.lang.Class<T>) - the data type of the resultant column source\n  :param componentType: (java.lang.Class<?>) - the component type for column sources of arrays or DbArrays\n  :return: (io.deephaven.db.v2.sources.ArrayBackedColumnSource<T>) an in-memory column source of the requested type",
  "getMemoryColumnSourceUntyped": "Creates an in-memory ColumnSource from the supplied dataArray, using instanceof checks to determine the\n appropriate type of column source to produce.\n\n*Overload 1*  \n  :param dataArray: (java.lang.Object) - the data to insert into the new column source\n  :return: (io.deephaven.db.v2.sources.WritableSource<?>) a ColumnSource with the supplied data.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param dataArray: (java.lang.Object) - the data to insert into the new column source\n  :param dataType: (java.lang.Class<T>) - the data type of the resultant column source\n  :param componentType: (java.lang.Class<?>) - the component type for column sources of arrays or DbArrays\n  :return: (io.deephaven.db.v2.sources.WritableSource<T>) a ColumnSource with the supplied data.",
  "isImmutable": "Determine if this column source is immutable, meaning that the values at a given index key never change.\n\n:return: (boolean) true if the values at a given index of the column source never change, false otherwise",
  "resetWritableChunkToBackingStore": "Resets the given chunk to provide a write-through reference to our backing array.\n \n Note: This is unsafe to use if previous tracking has been enabled!\n\n:param chunk: (io.deephaven.db.v2.sources.chunk.ResettableWritableChunk<?>) - the writable chunk to reset to our backing array.\n:param position: (long) - position that we require\n:return: (long) the first position addressable by the chunk",
  "set": "*Overload 1*  \n  :param key: long\n  :param value: byte\n  \n*Overload 2*  \n  :param key: long\n  :param value: char\n  \n*Overload 3*  \n  :param key: long\n  :param value: double\n  \n*Overload 4*  \n  :param key: long\n  :param value: float\n  \n*Overload 5*  \n  :param key: long\n  :param value: int\n  \n*Overload 6*  \n  :param key: long\n  :param value: long\n  \n*Overload 7*  \n  :param key: long\n  :param value: short",
  "shift": ":param start: long\n:param end: long\n:param offset: long"
 },
 "path": "io.deephaven.db.v2.sources.ArrayBackedColumnSource",
 "text": "A ColumnSource backed by in-memory arrays of data.\n \n The column source is dense with keys from 0 to capacity, there can be no holes.  Arrays are divided into blocks\n so that the column source can be incrementally expanded without copying data from one array to another.",
 "typeName": "class"
}