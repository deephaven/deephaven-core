{
 "className": "io.deephaven.db.v2.SwapListenerBase",
 "methods": {
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getErrorNotification": "Creates a notification for the exception.\n\n:param originalException: (java.lang.Throwable) - exception\n:param sourceEntry: (io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry) - performance tracking\n:return: (io.deephaven.db.tables.live.NotificationQueue.Notification) exception notification",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "makeSnapshotControl": ":return: io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl",
  "onFailure": "Notification of exceptions.\n\n:param originalException: (java.lang.Throwable) - exception\n:param sourceEntry: (io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry) - performance tracking",
  "setListenerAndResult": "Set the listener that will eventually become the listener, if we have a successful swap.\n\n:param listener: (SwapListenerBase.T) - The listener that we will eventually forward all updates to\n:param resultTable: (io.deephaven.db.v2.NotificationStepReceiver) - The table that will result from this operation",
  "subscribeForUpdates": "Invoke DynamicTable.listenForUpdates(Listener) for the appropriate subclass of SwapListenerBase.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.SwapListenerBase",
 "text": "Watch for ticks and when initialization is complete forward to the eventual listener.\n\n The SwapListenerBase is attached to a table so that we can listen for updates during the LTM cycle; and if any updates\n occur, we'll be able to notice them and retry initialization.  If no ticks were received before the result is ready,\n then we should forward all calls to our eventual listener.\n\n Callers should use our start and end functions.  The start function is called at the beginning of a data snapshot;\n and allows us to setup our state variables.  At the end of the snapshot attempt, end() is called; and if there were\n no clock changes, we were not gotNotification, and no notifications were enqueued; then we have a successful snapshot and\n can return true.  We then set the currentListener, so that all future calls are forwarded to the listener.\n\n Use either SwapListener or ShiftAwareSwapListener depending on which Listener interface you are using.",
 "typeName": "class"
}