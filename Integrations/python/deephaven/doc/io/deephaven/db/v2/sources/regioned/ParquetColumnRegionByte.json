{
 "className": "io.deephaven.db.v2.sources.regioned.ParquetColumnRegionByte",
 "methods": {
  "getByte": "Get a single byte from this region.\n\n*Overload 1*  \n  :param elementIndex: (long) - Element (byte) index in the table's address space\n  :return: (byte) The byte value at the specified element (byte) index\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A ColumnRegionFillContext to enable resource caching where suitable, with current\n                       region index pointing to this region\n  :param elementIndex: (long) - Element (byte) index in the table's address space\n  :return: (byte) The byte value at the specified element (byte) index",
  "getBytes": "Get a range of bytes from this region. Implementations are not required to verify that the range specified is\n meaningful.\n\n:param firstElementIndex: (long) - First element (byte) index in the table's address space\n:param destination: (byte[]) - Array to store results\n:param destinationOffset: (int) - Offset into destination to begin storing at\n:param length: (int) - Number of bytes to get\n:return: (byte[]) destination, to enable method chaining"
 },
 "path": "io.deephaven.db.v2.sources.regioned.ParquetColumnRegionByte",
 "text": "ColumnRegionByte implementation for regions that support fetching primitive bytes from a\n ColumnChunkPageStore.",
 "typeName": "class"
}