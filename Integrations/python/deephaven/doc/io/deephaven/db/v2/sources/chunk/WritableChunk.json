{
 "className": "io.deephaven.db.v2.sources.chunk.WritableChunk",
 "methods": {
  "asWritableBooleanChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<WritableChunk.ATTR>",
  "asWritableByteChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableByteChunk<WritableChunk.ATTR>",
  "asWritableCharChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableCharChunk<WritableChunk.ATTR>",
  "asWritableDoubleChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableDoubleChunk<WritableChunk.ATTR>",
  "asWritableFloatChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableFloatChunk<WritableChunk.ATTR>",
  "asWritableIntChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableIntChunk<WritableChunk.ATTR>",
  "asWritableLongChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableLongChunk<WritableChunk.ATTR>",
  "asWritableObjectChunk": "Note: Java generics information - <T>\n\n:return: io.deephaven.db.v2.sources.chunk.WritableObjectChunk<T,WritableChunk.ATTR>",
  "asWritableShortChunk": ":return: io.deephaven.db.v2.sources.chunk.WritableShortChunk<WritableChunk.ATTR>",
  "capacity": ":return: int",
  "copyFromArray": ":param srcArray: java.lang.Object\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "copyFromBuffer": "Fill a sub-range of this writable chunk with values from a Buffer. This is an optional method, as some\n chunk types do not have a corresponding buffer type.\n\n Implementations are free to copy data as efficiently as they may, and will use absolute rather than positional\n access where possible. To facilitate this pattern, srcOffset is an absolute offset from position 0,\n rather than a relative offset from srcBuffer.position().\n\n srcBuffer.limit() is at least srcOffset + length.\n\n srcBuffer's position may be modified, but will always be restored to its initial value upon successful\n return.\n\n:param srcBuffer: (java.nio.Buffer) - The source buffer, which will be cast to the appropriate type for this chunk\n:param srcOffset: (int) - The offset into srcBuffer (from position 0, not srcBuffer.position())\n                   to start copying from\n:param destOffset: (int) - The offset into this chunk to start copying to\n:param length: (int) - The number of elements to copy",
  "copyFromChunk": ":param src: io.deephaven.db.v2.sources.chunk.Chunk<? extends WritableChunk.ATTR>\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "fillWithBoxedValue": "Fill a sub-range of this writable chunk with the given value, unboxing it as appropriate.\n\n:param offset: (int) - Starting offset\n:param size: (int) - Number of values to fill\n:param value: java.lang.Object",
  "fillWithNullValue": "Fill a sub-range of this writable chunk with the appropriate Deephaven null value for the type.\n\n:param offset: (int) - Starting offset\n:param size: (int) - Number of values to fill",
  "getChunkFiller": "Our ChunkFiller \"plugin\".\n\n:return: io.deephaven.db.v2.sources.chunk.util.chunkfillers.ChunkFiller",
  "internalCapacity": "DO NOT CALL THIS INTERNAL METHOD. Call capacity()  That method is\n the only legal caller of this method in the entire system.\n\n:param password: long\n:return: int",
  "internalSetSize": "DO NOT CALL THIS INTERNAL METHOD. If you want to set a size, call setSize(int). That method is\n the only legal caller of this method in the entire system.\n\n:param newSize: int\n:param password: long",
  "setSize": ":param newSize: int",
  "slice": "Make a new Chunk that represents either exactly the same view on the underlying data as this Chunk, or a\n subrange of that view. The view is defined as [0..size) (in the coordinate space of this Chunk).\n\n:param offset: int\n:param capacity: int\n:return: (io.deephaven.db.v2.sources.chunk.WritableChunk<WritableChunk.ATTR>) The new Chunk. A new Chunk will always be returned, even if the Chunks represent the same view.",
  "sort": "Sort this chunk in-place using Java's primitive defined ordering.\n\n Of note is that nulls or NaNs are not sorted according to Deephaven ordering rules.\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param start: int\n  :param length: int",
  "upcast": "Upcast the attribute.\n\n When you know the data you will receive in this chunk from another source is a more specific suptype than the\n source provides, you can upcast the attribute with this helper method (such as reading KeyIndices from a\n ColumnSource which thinks they are just Values.)\n\nNote: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any,ATTR_DERIV extends ATTR>\n\n:param self: io.deephaven.db.v2.sources.chunk.WritableChunk<ATTR_DERIV>\n:return: io.deephaven.db.v2.sources.chunk.WritableChunk<ATTR>"
 },
 "path": "io.deephaven.db.v2.sources.chunk.WritableChunk",
 "text": "Data structure for a contiguous region of data that may be mutated.",
 "typeName": "interface"
}