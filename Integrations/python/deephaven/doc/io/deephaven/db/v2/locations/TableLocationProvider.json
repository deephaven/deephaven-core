{
 "className": "io.deephaven.db.v2.locations.TableLocationProvider",
 "methods": {
  "ensureInitialized": "Ensure that this location provider is initialized. Mainly useful in cases where it cannot be otherwise\n guaranteed that refresh() or subscribe(Listener) has been called prior to calls to\n the various table location fetch methods.\n\n:return: (io.deephaven.db.v2.locations.TableLocationProvider) this, to allow method chaining",
  "getName": "allow TableLocationProvider instances to have names.\n\n:return: java.lang.String",
  "getTableLocation": "*Overload 1*  \n  :param internalPartition: (java.lang.String) - The internal partition\n  :param columnPartition: (java.lang.String) - The column partition\n  :return: (io.deephaven.db.v2.locations.TableLocation) The TableLocation matching the given partition names\n  \n*Overload 2*  \n  :param tableLocationKey: (io.deephaven.db.v2.locations.TableLocationKey) - A key specifying the location to get\n  :return: (io.deephaven.db.v2.locations.TableLocation) The TableLocation matching the given key",
  "getTableLocationIfPresent": ":param tableLocationKey: (io.deephaven.db.v2.locations.TableLocationKey) - A key specifying the location to get\n:return: (io.deephaven.db.v2.locations.TableLocation) The TableLocation matching the given key if present, else null",
  "getTableLocations": "Get this provider's currently available locations.  Locations returned may have null size - that is, they may not\n \"exist\" for application purposes.\n\n:return: (java.util.Collection<io.deephaven.db.v2.locations.TableLocation>) A collection of locations available from this provider",
  "refresh": "Initialize or refresh state information about the list of existing locations.",
  "subscribe": "Subscribe to pushed location additions. Subscribing more than once with the same listener without an\n intervening unsubscribe is an error, and may result in undefined behavior.\n This is a possibly asynchronous operation - listener will receive 0 or more handleTableLocation callbacks,\n followed by 0 or 1 handleException callbacks during invocation and continuing after completion, on a thread\n determined by the implementation. As noted in BasicTableDataListener.handleException(TableDataException), an exception\n callback signifies that the subscription is no longer valid, and no unsubscribe is required in that case.\n Callers must not hold any lock that prevents notification delivery while subscribing.\n Callers must guard against duplicate notifications.\n This method only guarantees eventually consistent state.  To force a state update, use refresh() after\n subscription completes.\n\n:param listener: (io.deephaven.db.v2.locations.TableLocationProvider.Listener) - A listener.",
  "supportsSubscriptions": "Does this provider support subscriptions? That is, can this provider ever have ticking data?\n\n:return: (boolean) True if this provider supports subscriptions.",
  "unsubscribe": "Unsubscribe from pushed location additions.\n\n:param listener: (io.deephaven.db.v2.locations.TableLocationProvider.Listener) - The listener to forget about."
 },
 "path": "io.deephaven.db.v2.locations.TableLocationProvider",
 "text": "Discovery utility for table locations for a given table.",
 "typeName": "interface"
}