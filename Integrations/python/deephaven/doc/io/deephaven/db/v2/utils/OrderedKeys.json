{
 "className": "io.deephaven.db.v2.utils.OrderedKeys",
 "methods": {
  "asIndex": "Get an Index representation of this OrderedKeys.\n\n:return: (io.deephaven.db.v2.utils.Index) An Index representation for the same keys in the same order",
  "asKeyIndicesChunk": "Get a LongChunk representation of the individual keys in this OrderedKeys.\n\n:return: (io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyIndices>) A LongChunk containing the keys in this OrderedKeys",
  "asKeyRangesChunk": "Get a LongChunk representation of key ranges in this OrderedKeys.\n\n:return: (io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyRanges>) A LongChunk containing the key ranges in this OrderedKeys",
  "close": "Free any resources associated with this object.\n Using any OrderedKeys methods after close() is an error and may produce exceptions or\n undefined results.",
  "fillKeyIndicesChunk": "Fill the supplied WritableLongChunk with individual keys from this OrderedKeys.\n The chunk's capacity is assumed to be big enough.\n\n:param chunkToFill: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - A chunk to fill with individual keys",
  "fillKeyRangesChunk": "Fill the supplied WritableLongChunk with key ranges from this OrderedKeys.\n The chunk's capacity is assumed to be big enough.\n\n:param chunkToFill: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyRanges>) - A chunk to fill with key ranges",
  "firstKey": "Get the first key in this OrderedKeys.\n\n:return: (long) The first key, or ReadOnlyIndex.NULL_KEY if there is none.",
  "forAllLongRanges": ":param lrc: io.deephaven.db.v2.utils.LongRangeConsumer",
  "forAllLongs": ":param lc: java.util.function.LongConsumer",
  "forEachLong": "For as long as the consumer wants more keys, call accept on the consumer with the individual key instances\n in this OrderedKeys, in increasing order.\n\n:param lac: (io.deephaven.db.v2.utils.LongAbortableConsumer) - a consumer to feed the individual key values to.\n:return: (boolean) false if the consumer provided ever returned false, true otherwise.",
  "forEachLongRange": "For as long as the consumer wants more ranges, call accept on the consumer with the individual key ranges\n in this OrderedKeys, in increasing order.\n\n:param larc: (io.deephaven.db.v2.utils.LongRangeAbortableConsumer) - a consumer to feed the individual key values to.\n:return: (boolean) false if the consumer provided ever returned false, true otherwise.",
  "forRange": ":param firstKey: long\n:param lastKey: long\n:return: io.deephaven.db.v2.utils.OrderedKeys",
  "getAverageRunLengthEstimate": "Get an estimate of the average (mean) length of runs of adjacent keys in this OrderedKeys.\n Implementations should strive to keep this method efficient (O(1) preferred) at the expense of\n accuracy.\n Empty OrderedKeys should return an arbitrary valid value, usually 1.\n\n:return: (long) An estimate of the average run length in this OrderedKeys, in [1, size()]",
  "getOrderedKeysByKeyRange": "Get an ordered subset of the keys in this OrderedKeys for a key range. The returned set will be the\n intersection of the keys in this  with the keys in the closed interval\n [startKeyInclusive, endKeyInclusive].\n\n The returned reference is owned by the caller, who should call close() when it is done with it.\n\n:param startKeyInclusive: (long) - The minimum key to include\n:param endKeyInclusive: (long) - The maximum key to include\n:return: (io.deephaven.db.v2.utils.OrderedKeys) The subset as an OrderedKeys, which may be this",
  "getOrderedKeysByPosition": "Get an ordered subset of the keys in this OrderedKeys for a position range.\n The result will contain the set of keys in this that lie at positions in the half-open range\n [startPositionInclusive, startPositionInclusive + length).\n\n The returned reference is owned by the caller, who should call close() when it is done with it.\n\n:param startPositionInclusive: (long) - The position of the first key to include\n:param length: (long) - The number of keys to include\n:return: (io.deephaven.db.v2.utils.OrderedKeys) The subset as an OrderedKeys, which may be this",
  "getOrderedKeysIterator": "Get an OrderedKeys.Iterator over this OrderedKeys.\n\n:return: (io.deephaven.db.v2.utils.OrderedKeys.Iterator) A new iterator, positioned at the first key",
  "isContiguous": "Helper to tell you if this is one contiguous range.\n\n:return: boolean",
  "isEmpty": "True if the size of this Orderedkeys is zero.\n\n:return: (boolean) True if there are no elements in this OrderedKeys.",
  "lastKey": "Get the last key in this OrderedKeys.\n\n:return: (long) The last key, or ReadOnlyIndex.NULL_KEY if there is none.",
  "size": "Get the number of keys in this OrderedKeys.\n\n:return: (long) The size, in [0, Long.MAX_VALUE]",
  "takeKeyIndicesChunkAndMakeOrderedKeys": "Create and return a new OrderedKeys object from the provided WritableLongChunk.\n\n:param longChunk: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyIndices>) - The input chunk.  The returned object will take ownership of this chunk.\n:return: (io.deephaven.db.v2.utils.OrderedKeys) A new OrderedKeys object, who owns the passed chunk.",
  "takeKeyRangesChunkAndMakeOrderedKeys": "Create and return a new OrderedKeys object from the provided WritableLongChunk.\n\n:param longChunk: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyRanges>) - The input chunk.  The returned object will take ownership of this chunk.\n:return: (io.deephaven.db.v2.utils.OrderedKeys) A new OrderedKeys object, who owns the passed chunk.",
  "wrapKeyIndicesChunkAsOrderedKeys": "Wrap a LongChunk as an OrderedKeys.\n\n:param longChunk: (io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyIndices>) - A chunk to wrap as a new OrderedKeys object.\n:return: (io.deephaven.db.v2.utils.OrderedKeys) A new OrderedKeys object, who does not own the passed chunk.",
  "wrapKeyRangesChunkAsOrderedKeys": "Wrap a LongChunk as an OrderedKeys.\n\n:param longChunk: (io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyRanges>) - A chunk to wrap as a new OrderedKeys object.\n:return: (io.deephaven.db.v2.utils.OrderedKeys) A new OrderedKeys object, who does not own the passed chunk."
 },
 "path": "io.deephaven.db.v2.utils.OrderedKeys",
 "text": "An ordered collection of long keys.",
 "typeName": "interface"
}