{
 "className": "io.deephaven.db.v2.DynamicTable",
 "methods": {
  "awaitUpdate": "Wait for updates to this DynamicTable.\n \n In some implementations, this call may also terminate in case of interrupt or spurious wakeup (see\n java.util.concurrent.locks.Condition#await()).\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param timeout: (long) - The maximum time to wait in milliseconds.\n  :return: (boolean) false if the timeout elapses without notification, true otherwise.",
  "isFailed": ":return: (boolean) true if this table is in a failure state.",
  "listenForDirectUpdates": "Subscribe for updates to this table. Direct listeners are invoked immediately when changes are published, rather\n than via a LiveTableMonitor notification queue.\n\n:param listener: (io.deephaven.db.v2.Listener) - listener for updates",
  "listenForUpdates": "**Incompatible overloads text - text from the first overload:**\n\nSubscribe for updates to this table. After the optional initial image, listener will be invoked via the\n LiveTableMonitor notification queue associated with this DynamicTable.\n\n*Overload 1*  \n  :param listener: (io.deephaven.db.v2.Listener) - listener for updates\n  \n*Overload 2*  \n  :param listener: (io.deephaven.db.v2.Listener) - listener for updates\n  :param replayInitialImage: (boolean) - true to process updates for all initial rows in the table plus all new row changes;\n          false to only process new row changes\n  \n*Overload 3*  \n  :param listener: (io.deephaven.db.v2.ShiftAwareListener) - listener for updates",
  "newModifiedColumnSet": "Retrieve the ModifiedColumnSet that will be used when propagating updates from this table.\n\n:param columnNames: (java.lang.String...) - the columns that should belong to the resulting set.\n:return: (io.deephaven.db.v2.ModifiedColumnSet) the resulting ModifiedColumnSet for the given columnNames",
  "newModifiedColumnSetIdentityTransformer": "**Incompatible overloads text - text from the first overload:**\n\nCreate a transformer that uses an identity mapping from one ColumnSourceMap to another. The two CSMs must have\n equivalent column names and column ordering.\n\n*Overload 1*  \n  :param newColumns: (java.util.Map<java.lang.String,io.deephaven.db.v2.sources.ColumnSource>) - the column source map for result table\n  :return: (io.deephaven.db.v2.ModifiedColumnSet.Transformer) a simple Transformer that makes a cheap, but CSM compatible copy\n  \n*Overload 2*  \n  :param other: (io.deephaven.db.v2.DynamicTable) - the result table\n  :return: (io.deephaven.db.v2.ModifiedColumnSet.Transformer) a simple Transformer that makes a cheap, but CSM compatible copy",
  "newModifiedColumnSetTransformer": "**Incompatible overloads text - text from the first overload:**\n\nCreate a ModifiedColumnSet.Transformer that can be used to propagate dirty columns from this table to\n listeners of the provided resultTable.\n\n*Overload 1*  \n  :param columnNames: (java.lang.String[]) - the source columns\n  :param columnSets: (io.deephaven.db.v2.ModifiedColumnSet[]) - the destination columns in the convenient ModifiedColumnSet form\n  :return: (io.deephaven.db.v2.ModifiedColumnSet.Transformer) a transformer that knows the dirty details\n  \n*Overload 2*  \n  :param resultTable: (io.deephaven.db.v2.DynamicTable) - the destination table\n  :param columnNames: (java.lang.String...) - the columns that map one-to-one with the result table\n  :return: (io.deephaven.db.v2.ModifiedColumnSet.Transformer) a transformer that passes dirty details via an identity mapping\n  \n*Overload 3*  \n  :param resultTable: (io.deephaven.db.v2.DynamicTable) - the destination table\n  :param matchPairs: (io.deephaven.db.tables.select.MatchPair...) - the columns that map one-to-one with the result table\n  :return: (io.deephaven.db.v2.ModifiedColumnSet.Transformer) a transformer that passes dirty details via an identity mapping",
  "notifyListeners": "Initiate update delivery to this table's listeners. Will notify direct listeners before completing, and enqueue\n notifications for all other listeners.\n\n*Overload 1*  \n  :param added: (io.deephaven.db.v2.utils.Index) - index values added to the table\n  :param removed: (io.deephaven.db.v2.utils.Index) - index values removed from the table\n  :param modified: (io.deephaven.db.v2.utils.Index) - index values modified in the table.\n  \n*Overload 2*  \n  :param update: (io.deephaven.db.v2.ShiftAwareListener.Update) - the set of table changes to propagate The caller gives this update object away; the invocation of\n          notifyListeners takes ownership, and will call release on it once it is not used anymore;\n          callers should pass a clone for updates they intend to further use.",
  "notifyListenersOnError": "Initiate failure delivery to this table's listeners. Will notify direct listeners before completing, and enqueue\n notifications for all other listeners.\n\n:param e: (java.lang.Throwable) - error\n:param sourceEntry: (io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry) - performance tracking",
  "removeDirectUpdateListener": "Unsubscribe the supplied listener.\n\n:param listener: (io.deephaven.db.v2.Listener) - listener for updates",
  "removeUpdateListener": "Unsubscribe the supplied listener.\n\n*Overload 1*  \n  :param listener: (io.deephaven.db.v2.Listener) - listener for updates\n  \n*Overload 2*  \n  :param listener: (io.deephaven.db.v2.ShiftAwareListener) - listener for updates"
 },
 "path": "io.deephaven.db.v2.DynamicTable",
 "text": "A dynamically changing table.\n\n The DynamicTable interface provides support for listening for table changes and errors.",
 "typeName": "interface"
}