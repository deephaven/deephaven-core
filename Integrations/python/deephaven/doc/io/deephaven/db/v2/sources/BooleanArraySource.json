{
 "className": "io.deephaven.db.v2.sources.BooleanArraySource",
 "methods": {
  "allowsReinterpret": "Test if a reinterpret call will succeed.\n\nNote: Java generics information - <ALTERNATE_DATA_TYPE>\n\n:param alternateDataType: (java.lang.Class<ALTERNATE_DATA_TYPE>) - The alternative type to consider\n:return: (boolean) If a reinterpret on this column source with the supplied alternateDataType will succeed.",
  "copy": ":param sourceColumn: io.deephaven.db.v2.sources.ColumnSource<? extendsjava.lang.Boolean>\n:param sourceKey: long\n:param destKey: long",
  "ensureCapacity": "Ensure that this WritableSource can accept index keys in range [0, capacity).\n\n:param capacity: (long) - The new minimum capacity\n:param nullFill: (boolean) - Whether data should be \"null-filled\". If true, get operations at index keys that have not been\n        set will return the appropriate null value; otherwise such gets produce undefined results.",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys. No assumptions shall be made about\n        the size of the chunk shall be made. The chunk will be populated from position [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: (io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source of the data orderedKeys\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be written",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: (io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source of the data orderedKeys\n:param keys: (io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - A LongChunk representing the keys to be written",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "get": ":param index: long\n:return: java.lang.Boolean",
  "getAndSetUnsafe": "*Overload 1*  \n  :param index: long\n  :param newValue: java.lang.Boolean\n  :return: java.lang.Boolean\n  \n*Overload 2*  \n  :param index: long\n  :param newValue: byte\n  :return: byte",
  "getByte": ":param index: long\n:return: byte",
  "getCapacity": "Get the capacity of this column source. This number is one higher than the highest key that may be accessed (read\n or written).\n\n:return: (long) The capacity of this column source",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n        the Context may be used to provide a Chunk data pool\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n:return: (io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "getPrev": ":param index: long\n:return: java.lang.Boolean",
  "getPrevByte": ":param index: long\n:return: byte",
  "getPrevChunk": "Returns a chunk of previous data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In\n        particular, the Context may be used to provide a Chunk data pool\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n:return: (io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "getUnsafe": ":param index: long\n:return: java.lang.Boolean",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.sources.ArraySourceHelper.FillContext) A context for use with fill operations",
  "makeFillFromContext": "Provide a default, empty WritableChunkSink.FillFromContext for use with our default WritableSource.fillFromChunk(io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext, io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>, io.deephaven.db.v2.utils.OrderedKeys).\n\n:param chunkCapacity: int\n:return: io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext",
  "resetWritableChunkToBackingStore": "Resets the given chunk to provide a write-through reference to our backing array.\n \n Note: This is unsafe to use if previous tracking has been enabled!\n\n:param chunk: (io.deephaven.db.v2.sources.chunk.ResettableWritableChunk<?>) - the writable chunk to reset to our backing array.\n:param position: (long) - position that we require\n:return: (long) the first position addressable by the chunk",
  "set": "*Overload 1*  \n  :param key: long\n  :param value: java.lang.Boolean\n  \n*Overload 2*  \n  :param key: long\n  :param value: byte",
  "shift": ":param start: long\n:param end: long\n:param offset: long",
  "startTrackingPrevValues": "Force my inheritors to implement this method, rather than taking the interface default."
 },
 "path": "io.deephaven.db.v2.sources.BooleanArraySource",
 "text": "TODO: Re-implement this with better compression (only need 2 bits per value, or we can pack 5 values into 1 byte if we're feeling fancy).",
 "typeName": "class"
}