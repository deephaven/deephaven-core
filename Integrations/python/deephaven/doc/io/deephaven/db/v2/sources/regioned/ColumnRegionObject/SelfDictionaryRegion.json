{
 "className": "io.deephaven.db.v2.sources.regioned.ColumnRegionObject$SelfDictionaryRegion",
 "methods": {
  "getDictionaryValuesRegion": ":return: (io.deephaven.db.v2.sources.regioned.ColumnRegionObject<ColumnRegionObject.SelfDictionaryRegion.DATA_TYPE,ColumnRegionObject.SelfDictionaryRegion.ATTR>) A dictionary values region as specified by ColumnRegionObject.supportsDictionaryFormat(ReadOnlyIndex.SearchIterator)",
  "supportsDictionaryFormat": "Check if this region can expose an alternate form as paired regions of long keys and DATA_TYPE\n values covering all of its index keys in keysToVisit.\n\n Both alternate regions must use the same or smaller index key space as this one. Keys fetched from the\n keys region must represent valid element indices in the values region. Values regions must support\n ColumnRegionObject.gatherDictionaryValuesIndex(ReadOnlyIndex.SearchIterator, OrderedKeys.Iterator, Index.SequentialBuilder).\n\n Use ColumnRegionObject.getDictionaryKeysRegion() to access the region of keys and ColumnRegionObject.getDictionaryValuesRegion()\n to access the region of values.\n\n:param keysToVisit: (io.deephaven.db.v2.utils.ReadOnlyIndex.SearchIterator) - Iterator positioned at the first relevant index key belonging to this region.\n                    Will be advanced to after this region if true is returned.\n                    No guarantee is made if false is returned.\n:return: (io.deephaven.db.v2.sources.regioned.RegionVisitResult) A RegionVisitResult specifying FAILED if this region cannot supply a dictionary,\n CONTINUE if it can and keysToVisit is not exhausted, and COMPLETE if it can and\n keysToVisit is exhausted"
 },
 "path": "io.deephaven.db.v2.sources.regioned.ColumnRegionObject.SelfDictionaryRegion",
 "typeName": "interface"
}