{
 "className": "io.deephaven.db.v2.InstrumentedListenerBase",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "canExecute": ":param step: long\n:return: boolean",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getEntry": ":return: io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry",
  "getErrorNotification": "Creates a notification for the exception.\n\n:param originalException: java.lang.Throwable\n:param sourceEntry: io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry\n:return: (io.deephaven.db.tables.live.NotificationQueue.Notification) exception notification",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "onFailure": "Notification of exceptions.\n\n:param originalException: java.lang.Throwable\n:param sourceEntry: io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry",
  "satisfied": "Is this ancestor satisfied? Note that this method must be safe to call on any thread.\n\n:param step: long\n:return: (boolean) Whether the dependency is satisfied on step (and will not fire subsequent notifications)",
  "setVerboseLogging": ":param enableVerboseLogging: boolean\n:return: boolean",
  "toString": ":return: java.lang.String",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.InstrumentedListenerBase",
 "typeName": "class"
}