{
 "className": "io.deephaven.db.v2.locations.GroupingProvider",
 "methods": {
  "getGroupToRange": "**Incompatible overloads text - text from the first overload:**\n\nReturns a grouping structure, possibly constructed on-demand.\n\n*Overload 1*  \n  :return: (java.util.Map<GroupingProvider.DATA_TYPE,io.deephaven.db.v2.utils.Index>) a Map from grouping keys to Indices, or null if the group could not be constructed\n  \n*Overload 2*  \n  :param hint: (io.deephaven.db.v2.utils.Index) - required indices within the resultant Map\n  :return: (io.deephaven.base.Pair<java.util.Map<GroupingProvider.DATA_TYPE,io.deephaven.db.v2.utils.Index>,java.lang.Boolean>) a Pair containing a Map from grouping keys to Indices, which includes at least the hint indices;\n   and a Boolean which indicates that the grouping is complete",
  "makeGroupingProvider": "Make a new GroupingProvider for the specified ColumnDefinition and current global configuration.\n\nNote: Java generics information - <DATA_TYPE>\n\n:param columnDefinition: (io.deephaven.db.tables.ColumnDefinition<DATA_TYPE>) - The column definition\n:return: (io.deephaven.db.v2.locations.GroupingProvider<DATA_TYPE>) A new GroupingProvider"
 },
 "path": "io.deephaven.db.v2.locations.GroupingProvider",
 "text": "Interface used by DeferredGroupingColumnSource to compute groupings.",
 "typeName": "interface"
}