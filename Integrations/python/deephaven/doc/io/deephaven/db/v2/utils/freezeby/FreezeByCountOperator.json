{
 "className": "io.deephaven.db.v2.utils.freezeby.FreezeByCountOperator",
 "methods": {
  "addChunk": "Aggregate a chunk of data into the result columns.\n\n*Overload 1*  \n  :param context: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) - the operator-specific context\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values to aggregate\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destinations: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the destinations in resultColumn to aggregate into, parallel with startPositions and length\n  :param startPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the starting positions in the chunk for each destination\n  :param length: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of values in the chunk for each destination\n  :param stateModified: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) - a boolean output array, parallel to destinations, which is set to true if the corresponding destination has been modified\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) - the operator-specific context\n  :param chunkSize: (int) - the size of the addition\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the values to aggregate\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in post-shift space\n  :param destination: (long) - the destination in the result columns\n  :return: (boolean) true if the state was modified, false otherwise",
  "ensureCapacity": "Ensure that this operator can handle destinations up to tableSize - 1.\n\n:param tableSize: (long) - the new size of the table",
  "getResultColumns": "Return a map of result columns produced by this operator.\n\n:return: (java.util.Map<java.lang.String,? extends io.deephaven.db.v2.sources.ColumnSource<?>>) a map of name to columns for the result table",
  "removeChunk": "Remove a chunk of data previously aggregated into the result columns.\n\n*Overload 1*  \n  :param context: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) - the operator-specific context\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - a chunk of values that have been previously aggregated.\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in pre-shift space\n  :param destinations: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the destinations in resultColumn to remove the values from, parallel with startPositions and length\n  :param startPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the starting positions in the chunk for each destination\n  :param length: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>) - the number of values in the chunk for each destination\n  :param stateModified: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) - a boolean output array, parallel to destinations, which is set to true if the corresponding destination has been modified\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) - the operator-specific context\n  :param chunkSize: (int) - the size of the removal\n  :param values: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the values to remove from the aggregation\n  :param inputIndices: (io.deephaven.db.v2.sources.chunk.LongChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the input indices, in pre-shift space\n  :param destination: (long) - the destination in the result columns\n  :return: (boolean) true if the state was modified, false otherwise",
  "startTrackingPrevValues": "Called after initialization; when the operator's result columns must have previous tracking enabled."
 },
 "path": "io.deephaven.db.v2.utils.freezeby.FreezeByCountOperator",
 "typeName": "class"
}