{
 "className": "io.deephaven.db.v2.utils.freezeby.FreezeByCountOperator",
 "methods": {
  "addChunk": "Aggregate a chunk of data into the result columns.\n\n*Overload 1*  \n  :param context: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destinations: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param startPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n  :param length: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>\n  :param stateModified: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  \n*Overload 2*  \n  :param context: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext\n  :param chunkSize: int\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destination: long\n  :return: (boolean) true if the state was modified, false otherwise",
  "ensureCapacity": "Ensure that this operator can handle destinations up to tableSize - 1.\n\n:param tableSize: long",
  "getResultColumns": "Return a map of result columns produced by this operator.\n\n:return: (java.util.Map<java.lang.String,? extends io.deephaven.db.v2.sources.ColumnSource<?>>) a map of name to columns for the result table",
  "removeChunk": "Remove a chunk of data previously aggregated into the result columns.\n\n*Overload 1*  \n  :param context: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destinations: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param startPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n  :param length: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>\n  :param stateModified: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  \n*Overload 2*  \n  :param context: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext\n  :param chunkSize: int\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destination: long\n  :return: (boolean) true if the state was modified, false otherwise",
  "startTrackingPrevValues": "Called after initialization; when the operator's result columns must have previous tracking enabled."
 },
 "path": "io.deephaven.db.v2.utils.freezeby.FreezeByCountOperator",
 "typeName": "class"
}