{
 "className": "io.deephaven.db.v2.ColumnComparatorFactory",
 "methods": {
  "createComparator": "Produce an ColumnComparatorFactory.IComparator specialized for a given left and right ColumnSource.\n To do this we look at the underlying types of the column sources (actually we require those underlying types to\n be the same) and we use this information to call the specific primitive type getter method (whether ElementSource.getDouble(long),\n ElementSource.getLong(long) and so on). This approach allows us to avoid boxing on these calls. We use a similar approach in order\n to test the null-ness of a given element.\n\n This method is not especially efficient, but (because we are typically not being called from an inner loop),\n that fact is probably not relevant for performance. The point is that the returned IComparator *is*\n rather efficient.\n\n:param lcs: (io.deephaven.db.v2.sources.ColumnSource) - The left-hand ColumnSource (uses current values)\n:param rcs: (io.deephaven.db.v2.sources.ColumnSource) - The right-hand ColumnSource (uses current values)\n:return: (io.deephaven.db.v2.ColumnComparatorFactory.IComparator) An AbstractColumnSource.IComparator designed to compare elements from the two column sources.",
  "createComparatorLeftCurrRightPrev": "Produce an ColumnComparatorFactory.IComparator specialized for a given left and right ColumnSource.\n To do this we look at the underlying types of the column sources (actually we require those underlying types to\n be the same) and we use this information to call the specific primitive type getter method (whether ElementSource.getDouble(long),\n ElementSource.getLong(long) and so on). This approach allows us to avoid boxing on these calls. We use a similar approach in order\n to test the null-ness of a given element.\n\n This method is not especially efficient, but (because we are typically not being called from an inner loop),\n that fact is probably not relevant for performance. The point is that the returned IComparatorEnhanced *is*\n rather efficient.\n\n:param lcs: (io.deephaven.db.v2.sources.ColumnSource) - The left-hand ColumnSource (uses current values)\n:param rcs: (io.deephaven.db.v2.sources.ColumnSource) - The right-hand ColumnSource (uses previous values)\n:return: (io.deephaven.db.v2.ColumnComparatorFactory.IComparator) An AbstractColumnSource.IComparator designed to compare elements from the two column sources."
 },
 "path": "io.deephaven.db.v2.ColumnComparatorFactory",
 "typeName": "class"
}