{
 "className": "io.deephaven.db.v2.join.JoinListenerRecorder",
 "methods": {
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true. Otherwise, returns false rather\n than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.join.JoinListenerRecorder",
 "text": "This is a listener that writes down the indices that were updated on a given clock cycle, and then notifies another\n listener. The intention is that you would have two of these, one for the left side and another for the right side of\n the join. The ListenerRecorders are created before the MergedJoinListener, so that they are always fired first in the\n priority queue. Once the MergedJoinListener is fired, it can examine the indices that were recorded into added and\n removed, and thus know what has changed on the left, and also what has changed on the right at the same time to\n produce a consistent output table.",
 "typeName": "class"
}