{
 "className": "io.deephaven.db.v2.hashing.IntChunkEquals",
 "methods": {
  "andEqual": "Called for subsequent pair of chunks, if the corresponding destination entry is false, do nothing. If true, then\n set to false if the corresponding values are not equal.\n\n:param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n:param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into",
  "andEqualLhsPermuted": "If destination[i] is false do nothing, otherwise, sets the corresponding destination entry to true if\n lhs[lhsPositions] == rhs.\n\n:param lhsPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the positions within left-hand side of the comparison\n:param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n:param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into",
  "andEqualNext": "For each pair of indices i and i + 1 in chunk; if destination[i] is false do nothing, otherwise write true to\n destination[i] if they are equal.\n\n:param chunk: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the chunk to compare subsequent values in\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into, size is chunk.size() - 1",
  "andEqualPairs": "Compares valuesChunk[chunkPositionsToCheckForEquality[pp * 2]] and\n valuesChunk[chunkPositionsToCheckForEquality[pp * 2 + 1]] for each even/odd pair in\n chunkPositionsToCheckForEquality and writes the result to destinations.\n\n:param chunkPositionsToCheckForEquality: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the position pairs of interest\n:param valuesChunk: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the chunk of values we are interested in\n:param destinations: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the destination chunk to write equality values into",
  "andEqualPermuted": "If destination[i] is false do nothing, otherwise, sets the corresponding destination entry to true if\n lhs[lhsPositions] == rhs[rhsPositions].\n\n:param lhsPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the positions within left-hand side of the comparison\n:param rhsPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the positions within the right-hand side of the comparison\n:param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n:param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into",
  "andNotEqual": "Called for subsequent pair of chunks, if the corresponding destination entry is false, do nothing. If true, then\n set to false if the corresponding values are equal.\n\n:param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n:param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into",
  "equal": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if the values are\n equal, or false otherwise\n\n*Overload 1*  \n  :param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n  :param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n  :param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into\n  \n*Overload 2*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: int\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "equalLhsPermuted": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if\n lhs[lhsPositions] == rhs.\n\n:param lhsPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the positions within left-hand side of the comparison\n:param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n:param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into",
  "equalNext": "For each pair of indices i and i + 1 in chunk; write true to destination[i] if they are equal, otherwise write\n false.\n\n:param chunk: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the chunk to compare subsequent values in\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into, size is chunk.size() - 1",
  "equalPairs": "Compares valuesChunk[chunkPositionsToCheckForEquality[pp * 2]] and\n valuesChunk[chunkPositionsToCheckForEquality[pp * 2 + 1]] for each even/odd pair in\n chunkPositionsToCheckForEquality and writes the result to destinations.\n\n:param chunkPositionsToCheckForEquality: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the position pairs of interest\n:param valuesChunk: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the chunk of values we are interested in\n:param destinations: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the destination chunk to write equality values into",
  "equalPermuted": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if\n lhs[lhsPositions] == rhs[rhsPositions].\n\n:param lhsPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the positions within left-hand side of the comparison\n:param rhsPositions: (io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>) - the positions within the right-hand side of the comparison\n:param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n:param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into",
  "equalReduce": "Returns true iff the chunks have the same size() and each corresponding element of the chunk compares equal.\n\n*Overload 1*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :return: boolean\n  \n*Overload 2*  \n  :param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n  :param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n  :return: boolean",
  "firstDifference": ":param lhs: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n:return: int",
  "notEqual": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if the values are\n not equal, or false otherwise\n\n*Overload 1*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk\n  \n*Overload 2*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: int\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk\n  \n*Overload 3*  \n  :param lhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the left-hand side of the comparison\n  :param rhs: (io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>) - the right-hand side of the comparison\n  :param destination: (io.deephaven.db.v2.sources.chunk.WritableBooleanChunk) - the chunk to write equality values into\n  \n*Overload 4*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: int\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk"
 },
 "path": "io.deephaven.db.v2.hashing.IntChunkEquals",
 "typeName": "class"
}