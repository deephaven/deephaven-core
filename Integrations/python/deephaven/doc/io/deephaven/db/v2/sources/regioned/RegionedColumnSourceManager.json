{
 "className": "io.deephaven.db.v2.sources.regioned.RegionedColumnSourceManager",
 "methods": {
  "addLocation": "Add a table location to the list to be checked in refresh().\n\n:param tableLocation: (io.deephaven.db.v2.locations.TableLocation) - The table location to be added",
  "allLocations": "Get the added locations, first the ones that have been \"included\" (found to exist with non-zero size) in order of\n inclusion, then the remainder in order of discovery.\n\n:return: (java.util.Collection<io.deephaven.db.v2.locations.TableLocation>) All known locations, ordered as described",
  "disableGrouping": "Turn off column grouping, and clear the groupings on all GROUPING column sources. Note that this does *not*\n affect PARTITIONING columns.",
  "getColumnSources": "Get a map of name to DeferredGroupingColumnSource for the column sources maintained by this manager.\n\n:return: (java.util.Map<java.lang.String,? extends io.deephaven.db.v2.sources.DeferredGroupingColumnSource<?>>) An unmodifiable view of the column source map maintained by this manager.",
  "includedLocations": "Get the added locations that have been found to exist and have non-zero size.\n\n:return: (java.util.Collection<io.deephaven.db.v2.locations.TableLocation>) The added locations that have been found to exist and have non-zero size",
  "isEmpty": "Report whether this ColumnSourceManager has no locations that have been \"included\" (i.e. found to exist with\n non-zero size).\n\n:return: (boolean) True if there are no included locations",
  "refresh": "Observe size changes in the previously added table locations, and update the managed column sources accordingly.\n\n:return: (io.deephaven.db.v2.utils.Index) The index of added keys"
 },
 "path": "io.deephaven.db.v2.sources.regioned.RegionedColumnSourceManager",
 "text": "Manage column sources made up of regions in their own index address space.",
 "typeName": "class"
}