{
 "className": "io.deephaven.db.v2.hashing.DoubleChunkEquals",
 "methods": {
  "andEqual": "Called for subsequent pair of chunks, if the corresponding destination entry is false, do nothing.\n If true, then set to false if the corresponding values are not equal.\n\n:param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "andEqualLhsPermuted": "If destination[i] is false do nothing, otherwise, sets the corresponding destination entry to true if lhs[lhsPositions] == rhs.\n\n:param lhsPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "andEqualNext": "For each pair of indices i and i + 1 in chunk; if destination[i] is false do nothing, otherwise write true to\n destination[i] if they are equal.\n\n:param chunk: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "andEqualPairs": "Compares valuesChunk[chunkPositionsToCheckForEquality[pp * 2]] and valuesChunk[chunkPositionsToCheckForEquality[pp * 2 + 1]]\n for each even/odd pair in chunkPositionsToCheckForEquality and writes the result to destinations.\n\n:param chunkPositionsToCheckForEquality: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param valuesChunk: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destinations: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "andEqualPermuted": "If destination[i] is false do nothing, otherwise, sets the corresponding destination entry to true if lhs[lhsPositions] == rhs[rhsPositions].\n\n:param lhsPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param rhsPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "andNotEqual": "Called for subsequent pair of chunks, if the corresponding destination entry is false, do nothing.\n If true, then set to false if the corresponding values are equal.\n\n:param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "equal": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if the\n values are equal, or false otherwise\n\n*Overload 1*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk\n  \n*Overload 2*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: double\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "equalLhsPermuted": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if lhs[lhsPositions] == rhs.\n\n:param lhsPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "equalNext": "For each pair of indices i and i + 1 in chunk; write true to destination[i] if they are equal, otherwise write false.\n\n:param chunk: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "equalPairs": "Compares valuesChunk[chunkPositionsToCheckForEquality[pp * 2]] and valuesChunk[chunkPositionsToCheckForEquality[pp * 2 + 1]]\n for each even/odd pair in chunkPositionsToCheckForEquality and writes the result to destinations.\n\n:param chunkPositionsToCheckForEquality: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param valuesChunk: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destinations: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "equalPermuted": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if lhs[lhsPositions] == rhs[rhsPositions].\n\n:param lhsPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param rhsPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n:param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk",
  "equalReduce": "Returns true iff the chunks have the same size() and each corresponding element of the chunk compares equal.\n\n*Overload 1*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :return: boolean\n  \n*Overload 2*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :return: boolean",
  "firstDifference": ":param lhs: io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:param rhs: io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n:return: int",
  "notEqual": "Called for the first (or only) pair of chunks, sets the corresponding destination entry to true if the\n values are not equal, or false otherwise\n\n*Overload 1*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk\n  \n*Overload 2*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: double\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk\n  \n*Overload 3*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk\n  \n*Overload 4*  \n  :param lhs: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  :param rhs: double\n  :param destination: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk"
 },
 "path": "io.deephaven.db.v2.hashing.DoubleChunkEquals",
 "typeName": "class"
}