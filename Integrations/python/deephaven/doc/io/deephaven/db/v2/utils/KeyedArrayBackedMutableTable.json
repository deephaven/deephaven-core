{
 "className": "io.deephaven.db.v2.utils.KeyedArrayBackedMutableTable",
 "methods": {
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "make": "**Incompatible overloads text - text from the first overload:**\n\nCreate an empty KeyedArrayBackedMutableTable.\n\n*Overload 1*  \n  :param definition: (io.deephaven.db.tables.TableDefinition) - the definition of the table to create\n  :param keyColumnNames: (java.lang.String...) - the name of the key columns\n  :return: (io.deephaven.db.v2.utils.KeyedArrayBackedMutableTable) an empty KeyedArrayBackedMutableTable with the given definition and key columns\n  \n*Overload 2*  \n  :param definition: (io.deephaven.db.tables.TableDefinition) - the definition of the table to create\n  :param enumValues: (java.util.Map<java.lang.String,java.lang.Object[]>) - a map of column names to enumeration values\n  :param keyColumnNames: (java.lang.String...) - the name of the key columns\n  :return: (io.deephaven.db.v2.utils.KeyedArrayBackedMutableTable) an empty KeyedArrayBackedMutableTable with the given definition and key columns\n  \n*Overload 3*  \n  :param initialTable: (io.deephaven.db.tables.Table) - the initial values to copy into the KeyedArrayBackedMutableTable\n  :param keyColumnNames: (java.lang.String...) - the name of the key columns\n  :return: (io.deephaven.db.v2.utils.KeyedArrayBackedMutableTable) an empty KeyedArrayBackedMutableTable with the given definition and key columns\n  \n*Overload 4*  \n  :param initialTable: (io.deephaven.db.tables.Table) - the initial values to copy into the KeyedArrayBackedMutableTable\n  :param enumValues: (java.util.Map<java.lang.String,java.lang.Object[]>) - a map of column names to enumeration values\n  :param keyColumnNames: (java.lang.String...) - the name of the key columns\n  :return: (io.deephaven.db.v2.utils.KeyedArrayBackedMutableTable) an empty KeyedArrayBackedMutableTable with the given definition and key columns",
  "refresh": "Refresh this LiveTable.",
  "setDescription": ":param newDescription: java.lang.String\n:return: io.deephaven.db.v2.utils.BaseArrayBackedMutableTable",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true. Otherwise, returns false rather\n than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.utils.KeyedArrayBackedMutableTable",
 "text": "An in-memory table that has keys for each row, which can be updated on the LTM.\n\n This is used to implement in-memory editable table columns from web plugins.",
 "typeName": "class"
}