{
 "className": "io.deephaven.db.v2.DeferredViewTable$SimpleTableReference",
 "methods": {
  "dropReference": "Drop a previously-retained reference to this referent.",
  "get": "Returns the table in a form  that the user can run queries on it.  This may be as simple as returning\n a reference, but for amorphous tables, this means we need to do the work to instantiate it.\n\n:return: io.deephaven.db.tables.Table",
  "getDefinition": "Get the definition, without instantiating it.\n\n:return: (io.deephaven.db.tables.TableDefinition) The definition of the table we are referring to",
  "getSize": "What size should the uninitialized table return.\n\n:return: long",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.DeferredViewTable.SimpleTableReference",
 "typeName": "class"
}