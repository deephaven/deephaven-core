{
 "className": "io.deephaven.db.v2.sources.chunk.sized.SizedLongChunk",
 "methods": {
  "ensureCapacity": "Ensure the underlying chunk has a capacity of at least capacity, preserving data.\n\n The data and size of the returned chunk are undefined.  If you must maintain the data, then use\n ensureCapacityPreserve(int).\n\n:param capacity: (int) - the minimum capacity for the chunk.\n:return: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<SizedLongChunk.T>) the underlying chunk",
  "ensureCapacityPreserve": "Ensure the underlying chunk has a capacity of at least capacity.\n\n If the chunk has existing data, then it is copied to the new chunk.\n\n If the underlying chunk already exists, then the size of the chunk is the original size.  If the chunk did not\n exist, then the size of the returned chunk is zero.\n\n:param capacity: (int) - the minimum capacity for the chunk.\n:return: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<SizedLongChunk.T>) the underlying chunk",
  "get": "Get the underlying chunk.\n\n:return: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<SizedLongChunk.T>) the underlying chunk."
 },
 "path": "io.deephaven.db.v2.sources.chunk.sized.SizedLongChunk",
 "text": "A wrapper for a long chunk that allows you to resize the chunk to a capacity.",
 "typeName": "class"
}