{
 "className": "io.deephaven.db.v2.select.UnsortedClockFilter",
 "methods": {
  "copy": "Create a copy of this SelectFilter.\n\n:return: (io.deephaven.db.v2.select.UnsortedClockFilter) an independent copy of this SelectFilter.",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getSortColumns": "Get the columns on which the input table should be sorted before filtering.\n\n:return: (java.lang.String[]) Columns to sort on, or null if there are no such columns",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "requiresSorting": ":return: (boolean) True iff getSortColumns will return a non-null, non-empty array of column names to sort on.",
  "sortingDone": "Advise this filter that sorting has been performed. requiresSorting must return false hereafter.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true. Otherwise, returns false rather\n than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.select.UnsortedClockFilter",
 "text": "This will filter a table on a DBDateTime column for all rows greater than \"now\" according to a supplied clock. It\n does not require any pre-sorting of the input table, instead preserving relative order in the initial output and each\n subsequent refresh. Relative to SortedClockFilter, this implementation may require less overall storage and do less\n overall work for tables with relatively few monotonically nondecreasing ranges (that is, m (number of ranges)\n <<< n (size in rows)), but it will do more work on refresh().",
 "typeName": "class"
}