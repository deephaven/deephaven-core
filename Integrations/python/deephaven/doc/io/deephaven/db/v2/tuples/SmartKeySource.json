{
 "className": "io.deephaven.db.v2.tuples.SmartKeySource",
 "methods": {
  "createPreviousTuple": "Create a tuple for previous key column values at the supplied index key.\n\n:param indexKey: (long) - The index key\n:return: (io.deephaven.datastructures.util.SmartKey) The resulting tuple",
  "createTuple": "Create a tuple for key column values at the supplied index key.\n\n:param indexKey: (long) - The index key\n:return: (io.deephaven.datastructures.util.SmartKey) The resulting tuple",
  "createTupleFromValues": "Create a tuple for the supplied (boxed) values.\n\n:param values: (java.lang.Object...) - The values\n:return: (io.deephaven.datastructures.util.SmartKey) The resulting tuple",
  "exportElement": "**Incompatible overloads text - text from the first overload:**\n\nExport a single element from the tuple, identified by its element index, to an Object\n\n For the empty tuple, this is unsupported.\n For singles, this will copy the sole element, possibly in boxed form.\n For doubles and longer, this will copy the specified element without any unnecessary boxing.\n\n*Overload 1*  \n  Note: Java generics information - <ELEMENT_TYPE>\n  \n  :param smartKey: (io.deephaven.datastructures.util.SmartKey) - The tuple to export an element from\n  :param elementIndex: (int) - The element index to export\n  :param writableSource: (io.deephaven.db.v2.sources.WritableSource<ELEMENT_TYPE>) - The destination\n  :param destinationIndexKey: (long) - The destination index key\n  \n*Overload 2*  \n  :param smartKey: (io.deephaven.datastructures.util.SmartKey) - The tuple to export an element from\n  :param elementIndex: (int) - The element index to export\n  :return: java.lang.Object",
  "exportToExternalKey": "Export this tuple's element list as a key suitable for the TableMaps resulting\n from Table.byExternal(boolean, java.lang.String...).\n For the empty tuple this is a unsupported.\n For singles, this is the (boxed) sole element itself.\n For doubles and longer, this is a newly-allocated \"SmartKey\".\n\n:param smartKey: (io.deephaven.datastructures.util.SmartKey) - The tuple to export all elements from\n:return: (io.deephaven.datastructures.util.SmartKey) The new smart key",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "get": ":param indexKey: long\n:return: io.deephaven.datastructures.util.SmartKey",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                    In particular, the Context may be used to provide a Chunk data pool\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n:return: (io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "getColumnSources": "Get the ColumnSources backing this tuple source.\n\n:return: (java.util.List<io.deephaven.db.v2.sources.ColumnSource>) The column sources",
  "getNativeType": ":return: java.lang.Class<io.deephaven.datastructures.util.SmartKey>",
  "getPrev": ":param indexKey: long\n:return: io.deephaven.datastructures.util.SmartKey",
  "getPrevChunk": "Returns a chunk of previous data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                    In particular, the Context may be used to provide a Chunk data pool\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n:return: (io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "getPrevSource": ":return: (io.deephaven.db.v2.sources.chunk.ChunkSource<io.deephaven.db.v2.sources.chunk.Attributes.Values>) a chunk source which accesses the previous values.",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.tuples.SmartKeySource.FillContext) A context for use with fill operations",
  "makeGetContext": "Allocate a new ChunkSource.GetContext for retrieving chunks from this GetContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size required for any WritableChunk allocated as part of the result.\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.tuples.SmartKeySource.GetContext) A context for use with get operations",
  "startTrackingPrevValues": "ColumnSource implementations that track previous values have the option to not actually start tracking previous\n values until this method is called. This is an option, not an obligation: some simple ColumnSource\n implementations (like TSingleValueSource for various T) always track previous values; other implementations (like\n PrevColumnSource) never do; some (like TArrayColumnSource) only start tracking once this method is called.\n\n An immutable column source can not have distinct prev values; therefore it is implemented as a no-op."
 },
 "path": "io.deephaven.db.v2.tuples.SmartKeySource",
 "text": "ColumnSource that produces key column values as SmartKeys from multiple ColumnSources.",
 "typeName": "class"
}