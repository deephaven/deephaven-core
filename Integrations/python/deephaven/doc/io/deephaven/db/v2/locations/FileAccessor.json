{
 "className": "io.deephaven.db.v2.locations.FileAccessor",
 "methods": {
  "force": "Make sure any previous writes to the underlying file through this file accessor are persisted, synchronously.",
  "getOffsetView": "Get an offset view into this FileAccessor.\n\n:param startOffset: (long) - The offset\n:return: (io.deephaven.db.v2.locations.FileAccessor) The new offset view accessor",
  "read": "Fill the supplied buffer with data starting at the supplied offset (position) into this file accessor.\n A successful invocation will fill the buffer from buffer.position(), inclusive, to at least buffer.limit(),\n exclusive, possibly up to buffer.capacity(), exclusive.\n\n:param buffer: (java.nio.ByteBuffer) - A buffer with state appropriate for a call to FileChannel.read()\n:param position: (long) - The start position in this file accessor's data space to read from\n:return: (int) The number of bytes read, or -1 on error",
  "size": "Request an up-to-date size value for the file data space backing this accessor.\n\n:param requiredSize: (long) - Hint about the minimum size the caller would like as a result\n:return: (long) The size of the file data space backing this accessor",
  "truncate": "Truncate the file data space backing this accessor to the supplied size.\n\n:param size: (long) - The new size",
  "write": "Write the supplied buffer (from buffer.position(), inclusive, to buffer.limit(), exclusive), starting at the\n supplied offset (position) into this file accessor.\n\n:param buffer: (java.nio.ByteBuffer) - A buffer with state appropriate for a call to FileChannel.write()\n:param position: (long) - The start position in this file accessor's data space to write to\n:return: (int) The number of bytes written, or -1 on error"
 },
 "path": "io.deephaven.db.v2.locations.FileAccessor",
 "text": "Interface to abstract-away local or remote file access.",
 "typeName": "interface"
}