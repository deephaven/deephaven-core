{
 "className": "io.deephaven.db.v2.ReplicateHashTable",
 "methods": {
  "main": ":param args: java.lang.String[]"
 },
 "path": "io.deephaven.db.v2.ReplicateHashTable",
 "text": "This code replicator is designed to operate differently than the other replication in our system.\n\n It reads both the source and destination file, preserving custom code inside of the destination file.\n\n The source and destination files must provide annotations for their state column source, overflow column source, and\n empty state value. These are used to translate names, and also to determine the appropriate types for substitution.\n\n The source file has three kinds of structured comments that control behavior.\n \n* regions, denoted by // region name and // endregion name are\n snippets of code that change between the source and destination. You should edit the code within a region in either\n the source or destination file. Each region that exists in the source must exist in the destination (this is a sanity\n check to prevent you from overwriting your work). Regions must have unique names.\n* mixins, denoted by // mixin name and // mixin name are snippets of\n code that may not be useful in the destination class. Any mixins in the destination class will be overwritten! A\n mixin can be spread across multiple structured blocks, for example imports and a function definition may both use the\n same mixin name. Regions may exist inside a mixin. When mixins are excluded, the regions that exist within them are\n ignored.\n* substitutions, denoted by // @thing from literal are instructions to replace a\n particular literal with the appropriate type denoted by thing on the next line. Multiple substitutions may be\n separated using commas. The valid substitutions are:\n \n* StateChunkName, e.g. \"LongChunk\"\n* StateChunkIdentityName, e.g. \"LongChunk\" or \"ObjectChunkIdentity\"\n* StateChunkType, e.g. \"LongChunk<Values>\"\n* WritableStateChunkName, e.g. \"WritableLongChunk\"\n* WritableStateChunkType, e.g. \"WritableLongChunk<Values>\"\n* StateColumnSourceType, e.g. \"LongArraySource\"\n* StateColumnSourceConstructor, e.g. \"LongArraySource()\"\n* NullStateValue, e.g. \"QueryConstants.NULL_LONG\"\n* StateValueType, e.g. \"long\"\n* StateChunkTypeEnum, e.g. \"Long\"",
 "typeName": "class"
}