{
 "className": "io.deephaven.db.v2.locations.parquet.topage.ToPageWithDictionary",
 "methods": {
  "convertResult": ":param result: java.lang.Object\n:return: (ToPageWithDictionary.DATA_TYPE[]) Produce the array of values from the result",
  "getChunkType": ":return: (io.deephaven.db.v2.sources.chunk.ChunkType) The chunk type used to wrap the arrays produced by this object.",
  "getDictionaryChunk": ":return: (io.deephaven.db.v2.sources.chunk.ObjectChunk<ToPageWithDictionary.DATA_TYPE,ToPageWithDictionary.ATTR>) the dictionary stored for this column, if one exists, otherwise null.",
  "getDictionaryKeysToPage": ":return: (io.deephaven.db.v2.locations.parquet.topage.ToPage<io.deephaven.db.v2.sources.chunk.Attributes.DictionaryKeys,long[]>) an object implementing ToChunk which will read the integral Dictionary Keys when there's a dictionary for\n         this column (as opposed to the values, which this object's toChunk will return.). This will return null\n         iff ToPage.getDictionaryChunk() returns null.",
  "getNativeType": ":return: (java.lang.Class<ToPageWithDictionary.DATA_TYPE>) The native type for the elements of the arrays produced by this object.",
  "getResult": ":param columnPageReader: io.deephaven.parquet.ColumnPageReader\n:return: (java.lang.Object) Gets the result from the columnPageReader.",
  "getReversibleLookup": ":return: (io.deephaven.db.v2.sources.StringSetImpl.ReversibleLookup<ToPageWithDictionary.DATA_TYPE>) an reverse lookup map of the dictionary."
 },
 "path": "io.deephaven.db.v2.locations.parquet.topage.ToPageWithDictionary",
 "typeName": "class"
}