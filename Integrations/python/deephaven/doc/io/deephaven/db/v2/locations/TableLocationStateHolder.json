{
 "className": "io.deephaven.db.v2.locations.TableLocationStateHolder",
 "methods": {
  "getLastModifiedTimeMillis": ":return: (long) The last modified time for a table location, in milliseconds from the epoch:\n         NULL_TIME : Modification time information is unknown or does not exist for this table location\n             >= 0L : The time this table was last modified, in milliseconds from the UTC epoch",
  "getSize": ":return: (long) The size of a table location:\n         NULL_SIZE : Size information is unknown or does not exist for this table location\n              >= 0 : The table location exists and has (possibly empty) data",
  "getStateLock": ":return: (java.lang.Object) The Object that accessors should synchronize on if they want to invoke multiple getters with consistent results.",
  "readValuesFrom": "Read all values from the supplied input into this state holder.\n\n:param input: (java.io.DataInput) - A input to read from\n:return: (boolean) Whether any of the values changed",
  "setValues": "Set all state values.\n\n:param size: (long) - The new size\n:param lastModifiedTimeMillis: (long) - The new modification time\n:return: (boolean) Whether any of the values changed"
 },
 "path": "io.deephaven.db.v2.locations.TableLocationStateHolder",
 "text": "Tool for generic multi-field \"atomic\" get/set of state values for a table location.\n NB: Possibly-concurrent usages should be externally synchronized.",
 "typeName": "class"
}