{
 "className": "io.deephaven.db.v2.by.ssmcountdistinct.distinct.DoubleRollupDistinctOperator",
 "methods": {
  "addChunk": "Aggregate a chunk of data into the result columns.\n\n*Overload 1*  \n  :param bucketedContext: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destinations: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param startPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n  :param length: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>\n  :param stateModified: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  \n*Overload 2*  \n  :param singletonContext: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext\n  :param chunkSize: int\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destination: long\n  :return: (boolean) true if the state was modified, false otherwise",
  "ensureCapacity": "Ensure that this operator can handle destinations up to tableSize - 1.\n\n:param tableSize: long",
  "getResultColumns": "Return a map of result columns produced by this operator.\n\n:return: (java.util.Map<java.lang.String,? extends io.deephaven.db.v2.sources.ColumnSource<?>>) a map of name to columns for the result table",
  "makeBucketedContext": "Make a IterativeChunkedAggregationOperator.BucketedContext suitable for this operator if necessary.\n\n:param size: int\n:return: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext) A new IterativeChunkedAggregationOperator.BucketedContext, or null if none is necessary",
  "makeSingletonContext": "Make a IterativeChunkedAggregationOperator.SingletonContext suitable for this operator if necessary.\n\n:param size: int\n:return: (io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext) A new IterativeChunkedAggregationOperator.SingletonContext, or null if none is necessary",
  "modifyChunk": "**Incompatible overloads text - text from the first overload:**\n\nModify a chunk of data previously aggregated into the result columns using a parallel chunk of new values.\n Never includes modifies that have been shifted if IterativeChunkedAggregationOperator.requiresIndices() returns true - those are handled in\n IterativeChunkedAggregationOperator.shiftChunk(BucketedContext, Chunk, Chunk, LongChunk, LongChunk, IntChunk, IntChunk, IntChunk, WritableBooleanChunk).\n\n*Overload 1*  \n  :param bucketedContext: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext\n  :param preValues: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param postValues: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param postShiftIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destinations: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param startPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n  :param length: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>\n  :param stateModified: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  \n*Overload 2*  \n  :param singletonContext: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext\n  :param chunkSize: int\n  :param preValues: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param postValues: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param postShiftIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destination: long\n  :return: (boolean) true if the state was modified, false otherwise",
  "propagateUpdates": "Perform any internal state keeping needed for destinations that were added (went from 0 keys to &gt 0),\n removed (went from &gt 0 keys to 0), or modified (keys added or removed, or keys modified) by this iteration.\n Note that the arguments to this method should not be mutated in any way.\n\n:param downstream: io.deephaven.db.v2.ShiftAwareListener.Update\n:param newDestinations: io.deephaven.db.v2.utils.ReadOnlyIndex",
  "removeChunk": "Remove a chunk of data previously aggregated into the result columns.\n\n*Overload 1*  \n  :param bucketedContext: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.BucketedContext\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destinations: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param startPositions: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n  :param length: io.deephaven.db.v2.sources.chunk.IntChunk<io.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>\n  :param stateModified: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  \n*Overload 2*  \n  :param singletonContext: io.deephaven.db.v2.by.IterativeChunkedAggregationOperator.SingletonContext\n  :param chunkSize: int\n  :param values: io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>\n  :param inputIndices: io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n  :param destination: long\n  :return: (boolean) true if the state was modified, false otherwise",
  "startTrackingPrevValues": "Called after initialization; when the operator's result columns must have previous tracking enabled."
 },
 "path": "io.deephaven.db.v2.by.ssmcountdistinct.distinct.DoubleRollupDistinctOperator",
 "text": "This operator computes the set of distinct values within the source.",
 "typeName": "class"
}