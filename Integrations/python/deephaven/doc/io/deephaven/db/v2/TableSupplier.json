{
 "className": "io.deephaven.db.v2.TableSupplier",
 "methods": {
  "build": "Use to start the construction of a Table Supplier.\n\n:param sourceTable: (io.deephaven.db.tables.Table) - the source table\n:return: (io.deephaven.db.tables.Table) a Proxy that will supply a table",
  "complete": "Sets a Table Supplier to be complete. This means that the supplier will generate a table the next time a filter\n operation is called. This method has no affect on Tables that are not suppliers.\n\n:param maybeSupplier: (io.deephaven.db.tables.Table) - a Table that may be a supplier\n:return: (io.deephaven.db.tables.Table) a completed Supplier or unaltered Table",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getAppliedEmptyTable": "Gets an empty version of the supplied table with all current operations applied to it. If the Table is not a\n Table Supplier then this will return the table unaltered.\n\n:param maybeSupplier: (io.deephaven.db.tables.Table) - a Table that may be a supplier\n:return: (io.deephaven.db.tables.Table) an applied empty table or an unaltered table",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "invoke": ":param proxy: java.lang.Object\n:param method: java.lang.reflect.Method\n:param args: java.lang.Object[]\n:return: java.lang.Object",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true. Otherwise, returns false rather\n than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.TableSupplier",
 "text": "TableSupplier creates a Proxy to a Table with a list of Table operations to be applied when a filter method is\n called.",
 "typeName": "class"
}