{
 "className": "io.deephaven.db.v2.sources.chunk.ContextWithChunk",
 "methods": {
  "close": "Release any resources associated with this context. The context should not be used afterwards.",
  "ensureLength": "Makes sure that the internal array (and hence the writableChunk) is at least specified size.\n\n:param length: int",
  "getContext": "*Overload 1*  \n  :return: (ContextWithChunk.CONTEXT) The context held in this Context\n  \n*Overload 2*  \n  Note: Java generics information - <CONTEXT extends io.deephaven.db.v2.sources.chunk.Context>\n  \n  :param context: io.deephaven.db.v2.sources.chunk.Context\n  :return: (CONTEXT) The context held in this Context",
  "getResettableChunk": "*Overload 1*  \n  :return: (io.deephaven.db.v2.sources.chunk.ResettableChunk<ContextWithChunk.ATTR>) a ResettableChunk chunk which you can use for results by calling one of its various reset\n           methods.\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.sources.chunk.Context) - The context that owns the reusable chunk\n  :return: (RESETTABLE_WRITABLE_CHUNK) a ResettableWritableChunk, which you can use for results by using one of its various reset\n           methods.",
  "getWritableChunk": "*Overload 1*  \n  :return: (io.deephaven.db.v2.sources.chunk.WritableChunk<ContextWithChunk.ATTR>) a WritableChunk which you can use for results\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.sources.chunk.Context) - The context that owns the reusable chunk\n  :return: (WRITABLE_CHUNK) a WritableChunk which you can use for results. The size will be set to 0.",
  "isMyResettableChunk": "Checks if this chunk is the result of a call to getResettableChunk() or\n getResettableChunk(Context) with this context, followed by a some reset call, including the result of a\n call to resetChunkFromArray(Context, Object, int, int). This is primarily intended for testing and\n verification code.\n\nNote: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:param context: io.deephaven.db.v2.sources.chunk.Context\n:param chunk: io.deephaven.db.v2.sources.chunk.Chunk<ATTR>\n:return: boolean",
  "isMyWritableChunk": "Checks if this chunk is the result of a call to getWritableChunk() or getWritableChunk(Context)\n with this context. This is primarily intended for testing and verification code.\n\nNote: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:param context: io.deephaven.db.v2.sources.chunk.Context\n:param chunk: io.deephaven.db.v2.sources.chunk.Chunk<ATTR>\n:return: boolean",
  "resetChunkFromArray": ":param context: (io.deephaven.db.v2.sources.chunk.Context) - The context that owns the reusable chunk\n:param array: (java.lang.Object) - The array to alias. If this is null, returns a null-value filled chunk.\n:param offset: (int) - The offset in the array for the beginning of the chunk\n:param length: (int) - The length of the chunk\n:return: (CHUNK) A chunk which aliases the region of the array which can be used for results."
 },
 "path": "io.deephaven.db.v2.sources.chunk.ContextWithChunk",
 "typeName": "class"
}