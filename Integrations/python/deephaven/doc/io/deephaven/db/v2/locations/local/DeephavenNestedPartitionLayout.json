{
 "className": "io.deephaven.db.v2.locations.local.DeephavenNestedPartitionLayout",
 "methods": {
  "findKeys": "Find keys and deliver them to the locationKeyObserver.\n\n:param locationKeyObserver: (java.util.function.Consumer<DeephavenNestedPartitionLayout.TLK>) - Per-key callback",
  "forParquet": ":param tableRootDirectory: java.io.File\n:param tableName: java.lang.String\n:param columnPartitionKey: java.lang.String\n:param internalPartitionValueFilter: java.util.function.Predicate<java.lang.String>\n:return: io.deephaven.db.v2.locations.local.DeephavenNestedPartitionLayout<io.deephaven.db.v2.locations.parquet.local.ParquetTableLocationKey>"
 },
 "path": "io.deephaven.db.v2.locations.local.DeephavenNestedPartitionLayout",
 "text": "TableLocationKeyFinder that will traverse a directory hierarchy laid out in Deephaven's \"nested-partitioned\"\n format, e.g. tableRootDirectory/internalPartitionValue/columnPartitionValue/tableName/..., producing\n FileTableLocationKey's with two partitions, for keys \"__INTERNAL_PARTITION__\" and the specified\n columnPartitionKey.",
 "typeName": "class"
}