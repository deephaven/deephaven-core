{
 "className": "io.deephaven.db.v2.utils.singlerange.SingleRange",
 "methods": {
  "copy": ":return: io.deephaven.db.v2.utils.singlerange.SingleRange",
  "getCardinality": ":return: long",
  "ixAppendRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixCardinality": ":return: long",
  "ixCompact": ":return: io.deephaven.db.v2.utils.singlerange.SingleRange",
  "ixContainsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixCowRef": ":return: io.deephaven.db.v2.utils.singlerange.SingleRange",
  "ixFind": ":param key: long\n:return: long",
  "ixFirstKey": ":return: long",
  "ixForEachLong": ":param lc: io.deephaven.db.v2.utils.LongAbortableConsumer\n:return: boolean",
  "ixForEachLongRange": ":param larc: io.deephaven.db.v2.utils.LongRangeAbortableConsumer\n:return: boolean",
  "ixGet": ":param pos: long\n:return: long",
  "ixGetAverageRunLengthEstimate": ":return: long",
  "ixGetKeysForPositions": ":param inputPositions: java.util.PrimitiveIterator.OfLong\n:param outputKeys: java.util.function.LongConsumer",
  "ixGetOrderedKeysByKeyRange": ":param startKeyInclusive: long\n:param endKeyInclusive: long\n:return: io.deephaven.db.v2.utils.OrderedKeys",
  "ixGetOrderedKeysByPosition": ":param startPositionInclusive: long\n:param length: long\n:return: io.deephaven.db.v2.utils.OrderedKeys",
  "ixGetOrderedKeysIterator": ":return: io.deephaven.db.v2.utils.OrderedKeys.Iterator",
  "ixInsert": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.db.v2.utils.TreeIndexImpl\n  \n*Overload 2*  \n  :param added: io.deephaven.db.v2.utils.TreeIndexImpl\n  :return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixInsertRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixInsertSecondHalf": ":param keys: io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyIndices>\n:param offset: int\n:param length: int\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixInsertWithShift": ":param shiftAmount: long\n:param other: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixIntersectOnNew": ":param intersected: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixInvertOnNew": "Invert the given index.\n\n:param keys: (io.deephaven.db.v2.utils.TreeIndexImpl) - Index of keys to invert\n:param maximumPosition: (long) - the largest position to add to indexBuilder, inclusive\n:return: (io.deephaven.db.v2.utils.TreeIndexImpl) the inverse of index",
  "ixIsEmpty": ":return: boolean",
  "ixIterator": ":return: io.deephaven.db.v2.utils.ReadOnlyIndex.Iterator",
  "ixLastKey": ":return: long",
  "ixMinusOnNew": ":param set: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixOverlaps": ":param impl: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: boolean",
  "ixOverlapsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixRangeIterator": ":return: io.deephaven.db.v2.utils.ReadOnlyIndex.RangeIterator",
  "ixRangesCountUpperBound": ":return: long",
  "ixRefCount": ":return: int",
  "ixRemove": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.db.v2.utils.TreeIndexImpl\n  \n*Overload 2*  \n  :param removed: io.deephaven.db.v2.utils.TreeIndexImpl\n  :return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixRemoveRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixRemoveSecondHalf": ":param keys: io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.OrderedKeyIndices>\n:param offset: int\n:param length: int\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixRetain": ":param other: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixRetainRange": ":param start: long\n:param end: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixReverseIterator": ":return: io.deephaven.db.v2.utils.ReadOnlyIndex.SearchIterator",
  "ixSearchIterator": ":return: io.deephaven.db.v2.utils.ReadOnlyIndex.SearchIterator",
  "ixShiftInPlace": ":param shiftAmount: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixShiftOnNew": ":param shiftAmount: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixSubindexByKeyOnNew": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixSubindexByPosOnNew": ":param startPos: long\n:param endPosExclusive: long\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixSubsetOf": ":param impl: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: boolean",
  "ixToRspOnNew": ":return: io.deephaven.db.v2.utils.rsp.RspBitmap",
  "ixUnionOnNew": ":param set: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixUpdate": ":param added: io.deephaven.db.v2.utils.TreeIndexImpl\n:param removed: io.deephaven.db.v2.utils.TreeIndexImpl\n:return: io.deephaven.db.v2.utils.TreeIndexImpl",
  "ixValidate": ":param failMsg: java.lang.String",
  "make": ":param start: long\n:param end: long\n:return: io.deephaven.db.v2.utils.singlerange.SingleRange",
  "rangeEnd": ":return: long",
  "rangeStart": ":return: long",
  "toRsp": ":return: io.deephaven.db.v2.utils.rsp.RspBitmap",
  "toSortedRanges": ":return: io.deephaven.db.v2.utils.sortedranges.SortedRanges"
 },
 "path": "io.deephaven.db.v2.utils.singlerange.SingleRange",
 "typeName": "class"
}