{
 "className": "io.deephaven.db.v2.utils.FunctionGeneratedTableFactory",
 "methods": {
  "create": "**Incompatible overloads text - text from the first overload:**\n\nCreate a table that refreshes based on the value of your function, automatically called every refreshIntervalMs.\n\n*Overload 1*  \n  :param tableGenerator: (io.deephaven.base.Function.Nullary<io.deephaven.db.tables.Table>) - a function returning a table to copy into the output table\n  :param refreshIntervalMs: int\n  :return: (io.deephaven.db.tables.Table) a ticking table (assuming sourceTables have been specified) generated by tableGenerator\n  \n*Overload 2*  \n  :param tableGenerator: (io.deephaven.base.Function.Nullary<io.deephaven.db.tables.Table>) - a function returning a table to copy into the output table\n  :param sourceTables: (io.deephaven.db.v2.DynamicTable...) - The query engine does not know the details of your function inputs.  If you are dependent on\n                       a ticking table tables in your tableGenerator function, you can add it to this list so that\n                       the function will be recomputed on each tick.\n  :return: (io.deephaven.db.tables.Table) a ticking table (assuming sourceTables have been specified) generated by tableGenerator"
 },
 "path": "io.deephaven.db.v2.utils.FunctionGeneratedTableFactory",
 "text": "An abstract table that represents the result of a function.\n\n The table will refresh by regenerating the full values (using the tableGenerator Function passed in).  The resultant\n table's values are copied into the result table and appropriate listener notifications are fired.\n\n All of the rows in the output table are modified on every tick, even if no actual changes occurred.  The output table\n also has a contiguous index.\n\n The generator function must produce a V2 table, and the table definition must not change between invocations.\n\n If you are transforming a table, you should generally prefer to use the regular table operations as opposed to this\n factory, because they are capable of performing some operations incrementally.  However, for small tables this might\n prove to require less development effort.",
 "typeName": "class"
}