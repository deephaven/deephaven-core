{
 "className": "io.deephaven.db.v2.sources.chunk.BooleanChunk",
 "methods": {
  "chunkWrap": "*Overload 1*  \n  Note: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  \n  :param data: boolean[]\n  :return: io.deephaven.db.v2.sources.chunk.BooleanChunk<ATTR>\n  \n*Overload 2*  \n  Note: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  \n  :param data: boolean[]\n  :param offset: int\n  :param capacity: int\n  :return: io.deephaven.db.v2.sources.chunk.BooleanChunk<ATTR>",
  "copyToArray": "Copy a subrange of this Chunk to the subrange of the 'dest' array.\n\n:param srcOffset: (int) - Starting position in 'this' (the source)\n:param dest: (java.lang.Object) - Destination array.\n:param destOffset: (int) - Starting offset in the destination.\n:param length: (int) - Number of values to copy",
  "copyToChunk": "Copy a subrange of this Chunk to the subrange of the 'dest' writable chunk.\n\n:param srcOffset: (int) - Starting position in 'this' (the source)\n:param dest: (io.deephaven.db.v2.sources.chunk.WritableChunk<? super BooleanChunk.ATTR>) - Destination writable chunk.\n:param destOffset: (int) - Starting offset in the destination.\n:param length: (int) - Number of values to copy",
  "copyToTypedArray": ":param srcOffset: int\n:param destData: boolean[]\n:param destOffset: int\n:param length: int",
  "downcast": "Note: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any,ATTR_DERIV extends ATTR>\n\n:param self: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<ATTR>\n:return: io.deephaven.db.v2.sources.chunk.WritableBooleanChunk<ATTR_DERIV>",
  "get": ":param index: int\n:return: boolean",
  "getChunkType": ":return: (io.deephaven.db.v2.sources.chunk.ChunkType) The underlying chunk type",
  "getEmptyChunk": "Note: Java generics information - <ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:return: io.deephaven.db.v2.sources.chunk.BooleanChunk<ATTR>",
  "isAlias": "*Overload 1*  \n  :param array: java.lang.Object\n  :return: (boolean) true iff this and array are aliases, that is they refer to the same underlying data\n  \n*Overload 2*  \n  :param chunk: io.deephaven.db.v2.sources.chunk.Chunk\n  :return: (boolean) true iff this and chunk are aliases, that is they refer to the same underlying data",
  "makeArray": ":param capacity: int\n:return: boolean[]",
  "slice": "Make a new Chunk that represents either exactly the same view on the underlying data as this Chunk, or a\n subrange of that view. The view is defined as [0..size) (in the coordinate space of this Chunk).\n\n:param offset: (int) - Offset of the new Chunk, relative to this Chunk. 0   offset   this.size\n:param capacity: (int) - Capacity and initial size of the new Chunk. 0   capacity   this.size - offset.\n:return: (io.deephaven.db.v2.sources.chunk.BooleanChunk<BooleanChunk.ATTR>) The new Chunk. A new Chunk will always be returned, even if the Chunks represent the same view.",
  "walk": "Note: Java generics information - <V extends io.deephaven.db.v2.sources.chunk.Chunk.Visitor<BooleanChunk.ATTR>>\n\n:param visitor: V\n:return: V"
 },
 "path": "io.deephaven.db.v2.sources.chunk.BooleanChunk",
 "text": "Chunk implementation for boolean data.",
 "typeName": "class"
}