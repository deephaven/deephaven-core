{
 "className": "io.deephaven.db.v2.sources.regioned.ParquetColumnRegionSymbolTable",
 "methods": {
  "create": "Note: Java generics information - <T,\nATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:param nativeType: java.lang.Class<T>\n:param dictionary: io.deephaven.db.v2.sources.chunk.Chunk<ATTR>\n:return: io.deephaven.db.v2.sources.regioned.ColumnRegionObject<T,ATTR>",
  "fillChunkAppend": "Appends the values referenced by orderKeys onto destination.  orderKeys are assumed\n to be entirely contained on this Page.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? superParquetColumnRegionSymbolTable.ATTR>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "getChunk": "Same as ChunkSource.getChunk(GetContext, OrderedKeys), except that you pass in the begin and last keys\n representing the begin and last (inclusive) keys of a single range rather than an OrderedKeys.\n Typically you want to call this only if you don't have an OrderedKeys, such as during an\n OrderedKeys.forAllLongRanges(LongRangeConsumer) call.  In this case, it allows you to avoid\n creating an intermediary OrderedKeys object.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                    In particular, the Context may be used to provide a Chunk data pool\n:param firstKey: (long) - The beginning key (inclusive) of the range to fetch in the chunk\n:param lastKey: (long) - The last key (inclusive) of the range to fetch in the chunk\n:return: io.deephaven.db.v2.sources.chunk.Chunk<? extends ParquetColumnRegionSymbolTable.ATTR>",
  "getNativeType": ":return: java.lang.Class<?>",
  "getObject": "Get a single object from this region.\n\n:param elementIndex: (long) - Element (object) index in the table's address space\n:return: (ParquetColumnRegionSymbolTable.STRING_LIKE_TYPE) The object value at the specified element (object) index",
  "length": ":return: (long) the length of this page."
 },
 "path": "io.deephaven.db.v2.sources.regioned.ParquetColumnRegionSymbolTable",
 "text": "ColumnRegionObject implementation for regions that support fetching symbols from a dictionary from a\n ObjectChunk.",
 "typeName": "class"
}