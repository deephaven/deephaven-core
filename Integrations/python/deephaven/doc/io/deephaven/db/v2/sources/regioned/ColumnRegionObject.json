{
 "className": "io.deephaven.db.v2.sources.regioned.ColumnRegionObject",
 "methods": {
  "createConstantDictionaryKeysRegion": ":param pageMask: long\n:return: io.deephaven.db.v2.sources.regioned.ColumnRegionLong<io.deephaven.db.v2.sources.chunk.Attributes.DictionaryKeys>",
  "createNull": "Note: Java generics information - <DATA_TYPE,\nATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:param pageMask: long\n:return: io.deephaven.db.v2.sources.regioned.ColumnRegionObject<DATA_TYPE,ATTR>",
  "gatherDictionaryValuesIndex": "Optional method that should only be used on regions returned by getDictionaryValuesRegion().\n Gathers\n\n:param keysToVisit: (io.deephaven.db.v2.utils.ReadOnlyIndex.SearchIterator) - A search iterator over the enclosing table address space (which must have the same\n                          regions at the same masks), positioned at an index key in this region. Used to\n                          identify regions to visit. Should be advanced to after this region as a side-effect.\n:param knownKeys: (io.deephaven.db.v2.utils.OrderedKeys.Iterator) - An iterator over the previously-known index keys, positioned at the first known key in\n                          this region, or after the region's maximum key if no keys are known. Should be advanced\n                          to after this region as a side effect.\n:param sequentialBuilder: (io.deephaven.db.v2.utils.Index.SequentialBuilder) - Output builder; implementations should append ranges for index keys not found in\n                          knownKeys\n:return: (boolean) Whether keysToVisit has been exhausted",
  "getChunkType": "Get the most suitable ChunkType for use with this ChunkSource.\n\n:return: (io.deephaven.db.v2.sources.chunk.ChunkType) The ChunkType",
  "getDictionaryKeysRegion": ":return: (io.deephaven.db.v2.sources.regioned.ColumnRegionLong<io.deephaven.db.v2.sources.chunk.Attributes.DictionaryKeys>) A dictionary keys region as specified by supportsDictionaryFormat(ReadOnlyIndex.SearchIterator)",
  "getDictionaryValuesRegion": ":return: (io.deephaven.db.v2.sources.regioned.ColumnRegionObject<ColumnRegionObject.DATA_TYPE,ColumnRegionObject.ATTR>) A dictionary values region as specified by supportsDictionaryFormat(ReadOnlyIndex.SearchIterator)",
  "getObject": "Get a single object from this region.\n\n*Overload 1*  \n  :param elementIndex: (long) - Element (object) index in the table's address space\n  :return: (ColumnRegionObject.DATA_TYPE) The object value at the specified element (object) index\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A RegionContextHolder to enable resource caching where suitable, with current\n                       region index pointing to this region\n  :param elementIndex: (long) - Element (object) index in the table's address space\n  :return: (ColumnRegionObject.DATA_TYPE) The object value at the specified element (object) index",
  "supportsDictionaryFormat": "Check if this region can expose an alternate form as paired regions of long keys and DATA_TYPE\n values covering all of its index keys in keysToVisit.\n\n Both alternate regions must use the same or smaller index key space as this one. Keys fetched from the\n keys region must represent valid element indices in the values region. Values regions must support\n gatherDictionaryValuesIndex(ReadOnlyIndex.SearchIterator, OrderedKeys.Iterator, Index.SequentialBuilder).\n\n Use getDictionaryKeysRegion() to access the region of keys and getDictionaryValuesRegion()\n to access the region of values.\n\n:param keysToVisit: (io.deephaven.db.v2.utils.ReadOnlyIndex.SearchIterator) - Iterator positioned at the first relevant index key belonging to this region.\n                    Will be advanced to after this region if true is returned.\n                    No guarantee is made if false is returned.\n:return: (io.deephaven.db.v2.sources.regioned.RegionVisitResult) A RegionVisitResult specifying FAILED if this region cannot supply a dictionary,\n CONTINUE if it can and keysToVisit is not exhausted, and COMPLETE if it can and\n keysToVisit is exhausted"
 },
 "path": "io.deephaven.db.v2.sources.regioned.ColumnRegionObject",
 "text": "Column region interface for regions that support fetching objects.",
 "typeName": "interface"
}