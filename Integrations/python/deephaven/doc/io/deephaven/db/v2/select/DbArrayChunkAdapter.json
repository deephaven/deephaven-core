{
 "className": "io.deephaven.db.v2.select.DbArrayChunkAdapter",
 "methods": {
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super DbArrayChunkAdapter.ATTR>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "getChunkType": "Get the most suitable ChunkType for use with this ColumnSource.\n\n:return: (io.deephaven.db.v2.sources.chunk.ChunkType) The ChunkType",
  "getNativeType": ":return: java.lang.Class<?>",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: int\n:param sharedContext: io.deephaven.db.v2.sources.chunk.SharedContext\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) A context for use with fill operations"
 },
 "path": "io.deephaven.db.v2.select.DbArrayChunkAdapter",
 "text": "This class wraps an inner ChunkSource holding a DbArray. The purpose of doing so is to apply DbArray#getDirect\n to the underlying DbArray values returned by the underlying ChunkSource. This is the strategy for implementing\n this class:\n makeGetContext() - doesn't need to change. The default implementation in our parent, namely\n DefaultChunkSource#makeGetContext, already does the right thing.\n getChunk() - likewise.\n makeFillContext() - We don't need to add anything to the \"inner\" context, so we just delegate to inner and return\n   its context\n fillContext() - We first let the inner fill the chunk, then we overwrite each value (where non-null) with the\n   result of DbArrayBase#getDirect() invoked on that value.",
 "typeName": "class"
}