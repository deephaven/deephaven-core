{
 "className": "io.deephaven.db.v2.locations.LazyFileAccessor",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "force": "Make sure any previous writes to the underlying file through this file accessor are persisted, synchronously.",
  "getImplementationName": "Get a name for the implementing class.  Useful for abstract classes that implement\n LogOutputAppendable or override\n toString.\n The default implementation is correct, but not suitable for high-frequency usage.\n\n:return: (java.lang.String) A name for the implementing class",
  "getOffsetView": "Get an offset view into this FileAccessor.\n\n:param startOffset: long\n:return: (io.deephaven.db.v2.locations.FileAccessor) The new offset view accessor",
  "read": "Fill the supplied buffer with data starting at the supplied offset (position) into this file accessor.\n A successful invocation will fill the buffer from buffer.position(), inclusive, to at least buffer.limit(),\n exclusive, possibly up to buffer.capacity(), exclusive.\n\n:param buffer: java.nio.ByteBuffer\n:param position: long\n:return: (int) The number of bytes read, or -1 on error",
  "size": "Request an up-to-date size value for the file data space backing this accessor.\n\n:param requiredSize: long\n:return: (long) The size of the file data space backing this accessor",
  "toString": ":return: java.lang.String",
  "truncate": "Truncate the file data space backing this accessor to the supplied size.\n\n:param size: long",
  "write": "Write the supplied buffer (from buffer.position(), inclusive, to buffer.limit(), exclusive), starting at the\n supplied offset (position) into this file accessor.\n\n:param buffer: java.nio.ByteBuffer\n:param position: long\n:return: (int) The number of bytes written, or -1 on error"
 },
 "path": "io.deephaven.db.v2.locations.LazyFileAccessor",
 "text": "Lazily-initialized FileAccessor implementation.\n Defers initialization costs, e.g. file handle allocation or size-buffer reading whenever possible.",
 "typeName": "class"
}