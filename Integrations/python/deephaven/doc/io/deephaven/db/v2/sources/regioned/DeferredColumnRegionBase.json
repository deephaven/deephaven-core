{
 "className": "io.deephaven.db.v2.sources.regioned.DeferredColumnRegionBase",
 "methods": {
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superDeferredColumnRegionBase.ATTR>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "fillChunkAppend": "Similar to ChunkSource.fillChunk(FillContext, WritableChunk, OrderedKeys), except that the values from the\n ChunkSource are appended to destination, rather than placed at the beginning.\nThe values to fill into destination are specified by orderedKeysIterator, whose\n OrderedKeys.firstKey() must exist, and must be represented by this PagingChunkSource\n (modulo {#link @mask}), otherwise results are undefined.\nNo more than the elements in orderedKeysIterator, which are on the same page as\n OrderedKeys.firstKey(), have their values appended to destination, and consumed from\n orderedKeysIterator.  Keys are on the same page when the bits outside of PagingChunkSource.mask() are identical.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                             In particular, the Context may be used to provide a Chunk data pool\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superDeferredColumnRegionBase.ATTR>) - The chunk to append the results to.\n:param orderedKeysIterator: (io.deephaven.db.v2.utils.OrderedKeys.Iterator) - The iterator to the ordered keys, which contain at least the keys to extract from\n                             this ChunkSource.  The keys to extract will be at the beginning of iteration\n                             order.",
  "getChunk": "**Incompatible overloads text - text from the first overload:**\n\nReturns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n*Overload 1*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                      In particular, the Context may be used to provide a Chunk data pool\n  :param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n  :return: (io.deephaven.db.v2.sources.chunk.Chunk<? extends DeferredColumnRegionBase.ATTR>) A chunk of data corresponding to the keys from the given OrderedKeys\n  \n*Overload 2*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                      In particular, the Context may be used to provide a Chunk data pool\n  :param firstKey: (long) - The beginning key (inclusive) of the range to fetch in the chunk\n  :param lastKey: (long) - The last key (inclusive) of the range to fetch in the chunk\n  :return: io.deephaven.db.v2.sources.chunk.Chunk<? extends DeferredColumnRegionBase.ATTR>",
  "getNativeType": ":return: java.lang.Class<?>",
  "getResultRegion": ":return: DeferredColumnRegionBase.REGION_TYPE",
  "length": ":return: (long) the length of this page.",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) A context for use with fill operations",
  "makeGetContext": "Allocate a new ChunkSource.GetContext for retrieving chunks from this GetContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size required for any WritableChunk allocated as part of the result.\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) A context for use with get operations",
  "releaseCachedResources": "Release any resources held for caching purposes. Implementations need not guarantee that they are safe for\n normal use concurrently with invocations of this method."
 },
 "path": "io.deephaven.db.v2.sources.regioned.DeferredColumnRegionBase",
 "text": "Base deferred region implementation.",
 "typeName": "class"
}