{
 "className": "io.deephaven.db.v2.sources.regioned.SymbolTableSource",
 "methods": {
  "getStaticSymbolTable": "Get a static Table view of this SymbolTableSource's symbol table, providing a many:1 or 1:1 mapping of\n unique long identifiers to the symbol values in this source.\n\n:param sourceIndex: (io.deephaven.db.v2.utils.Index) - The Index whose keys must be mappable via the result Table's identifier\n                         column\n:param useLookupCaching: (boolean) - Whether symbol lookups performed to generate the symbol table should apply caching\n:return: (io.deephaven.db.tables.Table) The symbol table",
  "getSymbolTable": "Get a Table view of this SymbolTableSource's symbol table, providing a many:1 or 1:1 mapping of unique\n long identifiers to the symbol values in this source.\n\n The result will be refreshing if table is a refreshing DynamicTable.\n\n:param sourceTable: (io.deephaven.db.v2.QueryTable) - The QueryTable whose Index keys must be mappable via the result\n                         Table's identifier column\n:param useLookupCaching: (boolean) - Whether symbol lookups performed to generate the symbol table should apply caching\n:return: (io.deephaven.db.tables.Table) The symbol table",
  "makeSymbolColumnSource": "Construct a symbol column source for the supplied location, with no built-in offset caching.\n\nNote: Java generics information - <STRING_LIKE_TYPE extends java.lang.CharSequence>\n\n:param columnDefinition: (io.deephaven.db.tables.ColumnDefinition<STRING_LIKE_TYPE>) - The column definition\n:param columnLocation: (io.deephaven.db.v2.locations.ColumnLocation) - The column location\n:param cache: (io.deephaven.base.string.cache.StringCache<STRING_LIKE_TYPE>) - The string cache\n:return: (io.deephaven.db.v2.sources.ColumnSource<STRING_LIKE_TYPE>) A symbol column source for the supplied location",
  "makeSymbolColumnSourceInternal": "Note: Java generics information - <STRING_LIKE_TYPE extends java.lang.CharSequence>\n\n:param columnDefinition: io.deephaven.db.tables.ColumnDefinition<STRING_LIKE_TYPE>\n:param cache: io.deephaven.base.string.cache.StringCache<STRING_LIKE_TYPE>\n:return: io.deephaven.db.v2.sources.regioned.RegionedColumnSourceSymbol<STRING_LIKE_TYPE,?>"
 },
 "path": "io.deephaven.db.v2.sources.regioned.SymbolTableSource",
 "text": "Interface for ColumnSources that can provide a Table view of their\n symbol tables, providing a many:1 or 1:1 mapping of unique long identifiers to the symbol values in this\n source.\n Such sources are also expected to be reinterpretable (ColumnSource.allowsReinterpret(Class)) as\n long ColumnSources of the same identifiers.",
 "typeName": "interface"
}