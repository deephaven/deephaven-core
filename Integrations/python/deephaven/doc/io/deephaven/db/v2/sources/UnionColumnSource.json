{
 "className": "io.deephaven.db.v2.sources.UnionColumnSource",
 "methods": {
  "allowsReinterpret": "Test if a reinterpret call will succeed.\n\nNote: Java generics information - <ALTERNATE_DATA_TYPE>\n\n:param alternateDataType: (java.lang.Class<ALTERNATE_DATA_TYPE>) - The alternative type to consider\n:return: (boolean) If a reinterpret on this column source with the supplied alternateDataType will succeed.",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param _context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param _context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "get": ":param index: long\n:return: UnionColumnSource.T",
  "getBoolean": ":param index: long\n:return: java.lang.Boolean",
  "getByte": ":param index: long\n:return: byte",
  "getChar": ":param index: long\n:return: char",
  "getDouble": ":param index: long\n:return: double",
  "getFloat": ":param index: long\n:return: float",
  "getInt": ":param index: long\n:return: int",
  "getLong": ":param index: long\n:return: long",
  "getPrev": ":param index: long\n:return: UnionColumnSource.T",
  "getPrevBoolean": ":param index: long\n:return: java.lang.Boolean",
  "getPrevByte": ":param index: long\n:return: byte",
  "getPrevChar": ":param index: long\n:return: char",
  "getPrevDouble": ":param index: long\n:return: double",
  "getPrevFloat": ":param index: long\n:return: float",
  "getPrevInt": ":param index: long\n:return: int",
  "getPrevLong": ":param index: long\n:return: long",
  "getPrevShort": ":param index: long\n:return: short",
  "getShort": ":param index: long\n:return: short",
  "getSubSource": ":param i: int\n:return: io.deephaven.db.v2.sources.ColumnSource",
  "getUnionSourceManager": "Return the Union source manager that was used to create this table.\n\n:return: io.deephaven.db.v2.sources.UnionSourceManager",
  "isImmutable": "Determine if this column source is immutable, meaning that the values at a given index key never change.\n\n:return: (boolean) true if the values at a given index of the column source never change, false otherwise",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) A context for use with fill operations"
 },
 "path": "io.deephaven.db.v2.sources.UnionColumnSource",
 "text": "ColumnSource implementation for TableTools.merge(java.util.List<io.deephaven.db.tables.Table>) results.",
 "typeName": "class"
}