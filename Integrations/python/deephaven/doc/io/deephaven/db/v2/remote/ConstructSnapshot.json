{
 "className": "io.deephaven.db.v2.remote.ConstructSnapshot",
 "methods": {
  "appendConcurrentAttemptClockInfo": "Append clock info that pertains to the concurrent attempt state to logOutput.\n\n:param logOutput: (io.deephaven.base.log.LogOutput) - The LogOutput\n:return: (io.deephaven.base.log.LogOutput) logOutput",
  "callDataSnapshotFunction": "Invokes the snapshot function in a loop until it succeeds with provably consistent results, or until\n MAX_CONCURRENT_ATTEMPTS or MAX_CONCURRENT_ATTEMPT_DURATION_MILLIS are exceeded. Falls back to\n acquiring a shared LTM lock for a final attempt.\n\n*Overload 1*  \n  :param logPrefix: (java.lang.String) - A prefix for our log messages\n  :param control: (io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl) - A ConstructSnapshot.SnapshotControl to define the parameters and consistency for this snapshot\n  :param function: (io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotFunction) - The function to execute\n  :return: (long) The logical clock step that applied to this snapshot\n  \n*Overload 2*  \n  :param logPrefix: (io.deephaven.base.log.LogOutputAppendable) - A prefix for our log messages\n  :param control: (io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl) - A ConstructSnapshot.SnapshotControl to define the parameters and consistency for this snapshot\n  :param function: (io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotFunction) - The function to execute\n  :return: (long) The logical clock step that applied to this snapshot",
  "concurrentAttemptInconsistent": "Test that determines whether the currently-active concurrent snapshot attempt has become inconsistent. Always\n returns false if there is no snapshot attempt active, or if there is a locked attempt active (necessarily\n at lower depth than the lowest concurrent attempt).\n\n:return: (boolean) Whether the clock or sources have changed in such a way as to make the currently-active concurrent\n         snapshot attempt inconsistent",
  "constructBackplaneSnapshot": "Create a snapshot of the specified table including all columns and rows. Note that this\n method is notification-oblivious, i.e. it makes no attempt to ensure that notifications are not missed.\n\n:param logIdentityObject: (java.lang.Object) - An object used to prepend to log rows.\n:param table: (io.deephaven.db.v2.BaseTable) - the table to snapshot.\n:return: (io.deephaven.db.v2.utils.BarrageMessage) a snapshot of the entire base table.",
  "constructBackplaneSnapshotInPositionSpace": "**Incompatible overloads text - text from the first overload:**\n\nCreate a snapshot of the specified table using a set of requested columns and positions.\n Note that this method uses an index that is in Position space, and that it is notification-oblivious, i.e. it\n makes no attempt to ensure that notifications are not missed.\n\n*Overload 1*  \n  :param logIdentityObject: (java.lang.Object) - An object used to prepend to log rows.\n  :param table: (io.deephaven.db.v2.BaseTable) - the table to snapshot.\n  :param columnsToSerialize: (java.util.BitSet) - A BitSet of columns to include, null for all\n  :param positionsToSnapshot: (io.deephaven.db.v2.utils.Index) - An Index of positions within the table to include, null for all\n  :return: (io.deephaven.db.v2.utils.BarrageMessage) a snapshot of the entire base table.\n  \n*Overload 2*  \n  :param logIdentityObject: (java.lang.Object) - An object used to prepend to log rows.\n  :param table: (io.deephaven.db.v2.BaseTable) - the table to snapshot.\n  :param columnsToSerialize: (java.util.BitSet) - A BitSet of columns to include, null for all\n  :param positionsToSnapshot: (io.deephaven.db.v2.utils.Index) - An Index of positions within the table to include, null for all\n  :param control: (io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl) - A ConstructSnapshot.SnapshotControl to define the parameters and consistency for this snapshot\n  :return: (io.deephaven.db.v2.utils.BarrageMessage) a snapshot of the entire base table.",
  "constructInitialSnapshot": "**Incompatible overloads text - text from the first overload:**\n\nCreate a snapshot of the entire table specified. Note that this method is\n notification-oblivious, i.e. it makes no attempt to ensure that notifications are not missed.\n\n*Overload 1*  \n  :param logIdentityObject: (java.lang.Object) - An object used to prepend to log rows.\n  :param table: (io.deephaven.db.v2.BaseTable) - the table to snapshot.\n  :return: (io.deephaven.db.v2.remote.InitialSnapshot) a snapshot of the entire base table.\n  \n*Overload 2*  \n  :param logIdentityObject: (java.lang.Object) - An object used to prepend to log rows.\n  :param table: (io.deephaven.db.v2.BaseTable) - the table to snapshot.\n  :param columnsToSerialize: (java.util.BitSet) - A BitSet of columns to include, null for all\n  :param keysToSnapshot: (io.deephaven.db.v2.utils.Index) - An Index of keys within the table to include, null for all\n  :return: (io.deephaven.db.v2.remote.InitialSnapshot) a snapshot of the entire base table.",
  "constructInitialSnapshotInPositionSpace": "Create a snapshot of the specified table using a set of requested columns and positions.\n Note that this method uses an index that is in Position space, and that it is notification-oblivious, i.e. it\n makes no attempt to ensure that notifications are not missed.\n\n:param logIdentityObject: (java.lang.Object) - An object used to prepend to log rows.\n:param table: (io.deephaven.db.v2.BaseTable) - the table to snapshot.\n:param columnsToSerialize: (java.util.BitSet) - A BitSet of columns to include, null for all\n:param positionsToSnapshot: (io.deephaven.db.v2.utils.Index) - An Index of positions within the table to include, null for all\n:return: (io.deephaven.db.v2.remote.InitialSnapshot) a snapshot of the entire base table.",
  "constructInitialSnapshots": "Constructs InitialSnapshots for the entirety of the tables. Note that this method is\n notification-oblivious, i.e. it makes no attempt to ensure that notifications are not missed.\n\n:param logIdentityObject: (java.lang.Object) - identifier prefixing the log message\n:param tables: (io.deephaven.db.v2.BaseTable...) - tables to snapshot\n:return: (java.util.List<io.deephaven.db.v2.remote.InitialSnapshot>) list of the resulting InitialSnapshots",
  "estimateSnapshotSize": "**Incompatible overloads text - text from the first overload:**\n\nEstimate the size of a complete table snapshot in bytes.\n\n*Overload 1*  \n  :param table: (io.deephaven.db.tables.Table) - the table to estimate\n  :return: (long) the estimated snapshot size in bytes.\n  \n*Overload 2*  \n  :param tableDefinition: (io.deephaven.db.tables.TableDefinition) - the table definitionm\n  :param columns: (java.util.BitSet) - a bitset indicating which columns are included\n  :param rowCount: (long) - how many rows of this data we'll be snapshotting\n  :return: (long) the estimated size of the snapshot",
  "failIfConcurrentAttemptInconsistent": "Check that fails if the currently-active concurrent snapshot attempt has become inconsistent. source. This is a\n no-op if there is no snapshot attempt active, or if there is a locked attempt active (necessarily at lower depth\n than the lowest concurrent attempt).",
  "getConcurrentAttemptClockValue": "Return the currently-active concurrent snapshot attempt's \"before\" clock value, or zero if there is no concurrent\n attempt active.\n\n:return: (long) The concurrent snapshot attempt's \"before\" clock value, or zero",
  "makeSnapshotControl": "**Incompatible overloads text - text from the first overload:**\n\nMake a default ConstructSnapshot.SnapshotControl for a single source.\n\n*Overload 1*  \n  :param usePreviousValues: io.deephaven.db.v2.remote.ConstructSnapshot.UsePreviousValues\n  :param snapshotConsistent: io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotConsistent\n  :param snapshotCompletedConsistently: io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotCompletedConsistently\n  :return: io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl\n  \n*Overload 2*  \n  :param notificationAware: (boolean) - Whether the result should be concerned with not missing notifications\n  :param source: (io.deephaven.db.v2.NotificationStepSource) - The source\n  :return: (io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl) An appropriate ConstructSnapshot.SnapshotControl\n  \n*Overload 3*  \n  :param notificationAware: (boolean) - Whether the result should be concerned with not missing notifications\n  :param sources: (io.deephaven.db.v2.NotificationStepSource...) - The sources\n  :return: (io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl) An appropriate ConstructSnapshot.SnapshotControl",
  "maybeWaitForSatisfaction": "Wait for a dependency to become satisfied on the current cycle if we're trying to use current values for the\n currently-active concurrent snapshot attempt. This is a no-op if there is no snapshot attempt active, or if there\n is a locked attempt active (necessarily at lower depth than the lowest concurrent attempt).\n\n:param dependency: (io.deephaven.db.tables.live.NotificationQueue.Dependency) - The dependency, which may be null in order to avoid redundant checks in calling code",
  "serializeAllTable": "**Incompatible overloads text - text from the first overload:**\n\n\n Populate a BarrageMessage with the specified positions to snapshot and columns.\n \n >Note that care must be taken while using this method to ensure the underlying table is locked or does not\n change, otherwise the resulting snapshot may be inconsistent. In general users should instead use\n constructBackplaneSnapshot(java.lang.Object, io.deephaven.db.v2.BaseTable) for simple use cases or callDataSnapshotFunction(int, io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotControl, io.deephaven.db.v2.remote.ConstructSnapshot.SnapshotFunction) for more advanced\n uses.\n\n*Overload 1*  \n  :param usePrev: (boolean) - Whether to use previous values\n  :param snapshot: (io.deephaven.db.v2.remote.InitialSnapshot) - The snapshot to populate\n  :param table: io.deephaven.db.v2.BaseTable\n  :param logIdentityObject: (java.lang.Object) - An object for use with log() messages\n  :param columnsToSerialize: (java.util.BitSet) - A BitSet of columns to include, null for all\n  :param keysToSnapshot: (io.deephaven.db.v2.utils.Index) - An Index of keys within the table to include, null for all\n  :return: (boolean) Whether the snapshot succeeded\n  \n*Overload 2*  \n  :param usePrev: (boolean) - Use previous values?\n  :param snapshot: (io.deephaven.db.v2.utils.BarrageMessage) - The snapshot to populate\n  :param table: io.deephaven.db.v2.BaseTable\n  :param logIdentityObject: (java.lang.Object) - an object for use with log() messages\n  :param columnsToSerialize: (java.util.BitSet) - A BitSet of columns to include, null for all\n  :param positionsToSnapshot: (io.deephaven.db.v2.utils.Index) - An Index of keys within the table to include, null for all\n  :return: (boolean) true if the snapshot was computed with an unchanged clock, false otherwise."
 },
 "path": "io.deephaven.db.v2.remote.ConstructSnapshot",
 "text": "A Set of static utilities for computing values from a table while avoiding the use of the LTM lock. This class\n supports snapshots in both position space and key space.",
 "typeName": "class"
}