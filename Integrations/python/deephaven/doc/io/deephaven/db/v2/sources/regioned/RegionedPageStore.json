{
 "className": "io.deephaven.db.v2.sources.regioned.RegionedPageStore",
 "methods": {
  "getElementIndex": "Get the element index.\n\n:param regionIndex: int\n:param regionOffset: long\n:return: (long) the element index for a particular region offset of a region index.",
  "getFirstElementIndex": "Get the first element index.\n\n:param regionIndex: int\n:return: (long) the first element index for a region index.",
  "getLastElementIndex": "Get the last element index.\n\n:param regionIndex: int\n:return: (long) the last element index for a region index.",
  "getPageContaining": "Note: Java generics information - io.deephaven.util.annotations.@FinalDefault\n\n:param fillContext: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param row: long\n:return: (RegionedPageStore.REGION_TYPE) The page containing row, after applying PagingChunkSource.mask().",
  "getRegion": "Map from a region index to its corresponding region.\n\n:param regionIndex: (int) - The region index\n:return: (RegionedPageStore.REGION_TYPE) The region for the supplied region index",
  "getRegionCount": "Get the number of regions.\n\n:return: (int) The number of regions that have been added",
  "getRegionIndex": "Get the region index.\n\n:param elementIndex: long\n:return: (int) The region index for an element index.",
  "lookupRegion": "Perform region lookup for an element index.\n\nNote: Java generics information - io.deephaven.util.annotations.@FinalDefault\n\n:param elementIndex: (long) - The element index to get the region for\n:return: (RegionedPageStore.REGION_TYPE) The appropriate region",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: int\n:param sharedContext: io.deephaven.db.v2.sources.chunk.SharedContext\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) A context for use with fill operations",
  "mask": "This mask is applied to OrderedKeys which are passed into\n ChunkSource.getChunk(ChunkSource.GetContext, OrderedKeys) and\n ChunkSource.fillChunk(ChunkSource.FillContext, WritableChunk, OrderedKeys). This allows the\n PagingChunkSources to be cached, and reused even if they are properly relocated in key space.\n\nNote: Java generics information - io.deephaven.util.annotations.@FinalDefault\n\n:return: (long) the mask for this page, which must be a bitmask representing the some number of lower order bits of a\n long.",
  "size": "The size of this data structure.\n\n:return: (long) The total number of rows across all regions."
 },
 "path": "io.deephaven.db.v2.sources.regioned.RegionedPageStore",
 "typeName": "interface"
}