{
 "className": "io.deephaven.db.v2.sources.CrossJoinRightColumnSource",
 "methods": {
  "allowsReinterpret": "Test if a reinterpret call will succeed.\n\nNote: Java generics information - <ALTERNATE_DATA_TYPE>\n\n:param alternateDataType: java.lang.Class<ALTERNATE_DATA_TYPE>\n:return: (boolean) If a reinterpret on this column source with the supplied alternateDataType will succeed.",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext\n:param destination: io.deephaven.db.v2.sources.chunk.WritableChunk<? super io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "get": ":param index: long\n:return: CrossJoinRightColumnSource.T",
  "getBoolean": ":param index: long\n:return: java.lang.Boolean",
  "getByte": ":param index: long\n:return: byte",
  "getChar": ":param index: long\n:return: char",
  "getComponentType": ":return: java.lang.Class<?>",
  "getDouble": ":param index: long\n:return: double",
  "getFloat": ":param index: long\n:return: float",
  "getInt": ":param index: long\n:return: int",
  "getLong": ":param index: long\n:return: long",
  "getPrev": ":param index: long\n:return: CrossJoinRightColumnSource.T",
  "getPrevBoolean": ":param index: long\n:return: java.lang.Boolean",
  "getPrevByte": ":param index: long\n:return: byte",
  "getPrevChar": ":param index: long\n:return: char",
  "getPrevDouble": ":param index: long\n:return: double",
  "getPrevFloat": ":param index: long\n:return: float",
  "getPrevInt": ":param index: long\n:return: int",
  "getPrevLong": ":param index: long\n:return: long",
  "getPrevShort": ":param index: long\n:return: short",
  "getShort": ":param index: long\n:return: short",
  "getUngrouped": "Reach into a grouped column source and pull one element out of the array.\n\n:param columnIndex: long\n:param arrayIndex: int\n:return: (CrossJoinRightColumnSource.T) Equivalent to ((DbArray)columnSource.get(columnIndex)).get(arrayIndex)",
  "getUngroupedBoolean": ":param columnIndex: long\n:param arrayIndex: int\n:return: java.lang.Boolean",
  "getUngroupedByte": ":param columnIndex: long\n:param arrayIndex: int\n:return: byte",
  "getUngroupedChar": ":param columnIndex: long\n:param arrayIndex: int\n:return: char",
  "getUngroupedDouble": ":param columnIndex: long\n:param arrayIndex: int\n:return: double",
  "getUngroupedFloat": ":param columnIndex: long\n:param arrayIndex: int\n:return: float",
  "getUngroupedInt": ":param columnIndex: long\n:param arrayIndex: int\n:return: int",
  "getUngroupedLong": ":param columnIndex: long\n:param arrayIndex: int\n:return: long",
  "getUngroupedPrev": ":param columnIndex: long\n:param arrayIndex: int\n:return: CrossJoinRightColumnSource.T",
  "getUngroupedPrevBoolean": ":param columnIndex: long\n:param arrayIndex: int\n:return: java.lang.Boolean",
  "getUngroupedPrevByte": ":param columnIndex: long\n:param arrayIndex: int\n:return: byte",
  "getUngroupedPrevChar": ":param columnIndex: long\n:param arrayIndex: int\n:return: char",
  "getUngroupedPrevDouble": ":param columnIndex: long\n:param arrayIndex: int\n:return: double",
  "getUngroupedPrevFloat": ":param columnIndex: long\n:param arrayIndex: int\n:return: float",
  "getUngroupedPrevInt": ":param columnIndex: long\n:param arrayIndex: int\n:return: int",
  "getUngroupedPrevLong": ":param columnIndex: long\n:param arrayIndex: int\n:return: long",
  "getUngroupedPrevShort": ":param columnIndex: long\n:param arrayIndex: int\n:return: short",
  "getUngroupedPrevSize": ":param columnIndex: long\n:return: long",
  "getUngroupedShort": ":param columnIndex: long\n:param arrayIndex: int\n:return: short",
  "getUngroupedSize": ":param columnIndex: long\n:return: (long) the size of the DbArray at columnIndex.",
  "isImmutable": "Determine if this column source is immutable, meaning that the values at a given index key never change.\n\n:return: (boolean) true if the values at a given index of the column source never change, false otherwise",
  "isUngroupable": "Does this particular instance of the column source support ungrouping?\n\n:return: (boolean) true if you can call the getUngrouped family of methods and get a valid answer.",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: int\n:param sharedContext: io.deephaven.db.v2.sources.chunk.SharedContext\n:return: (io.deephaven.db.v2.sources.CrossJoinRightColumnSource.FillContext) A context for use with fill operations",
  "releaseCachedResources": "Release any resources held for caching purposes. Implementations need not guarantee that concurrent accesses are\n correct, as the purpose of this method is to ensure cleanup for column sources that will no longer be used.",
  "startTrackingPrevValues": "ColumnSource implementations that track previous values have the option to not actually start tracking previous\n values until this method is called. This is an option, not an obligation: some simple ColumnSource\n implementations (like TSingleValueSource for various T) always track previous values; other implementations (like\n PrevColumnSource) never do; some (like TArrayColumnSource) only start tracking once this method is called.\n\n An immutable column source can not have distinct prev values; therefore it is implemented as a no-op."
 },
 "path": "io.deephaven.db.v2.sources.CrossJoinRightColumnSource",
 "typeName": "class"
}