{
 "className": "io.deephaven.db.v2.sources.chunkcolumnsource.ByteChunkColumnSource",
 "methods": {
  "addChunk": "Append a chunk of data to this column source.\n\n:param chunk: (io.deephaven.db.v2.sources.chunk.WritableChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>) - the chunk of data to add",
  "clear": "Reset the column source to be ready for reuse.\n \n Clear will discard the currently held chunks.  This should not be called if a table will continue to reference\n the column source; as it violates the immutability contract.",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.db.v2.sources.chunk.WritableChunk<? superio.deephaven.db.v2.sources.chunk.Attributes.Values>) - The chunk to be populated according to orderedKeys.  No assumptions shall be made\n                    about the size of the chunk shall be made.  The chunk will be populated from position\n                    [0,orderedKeys.size()).\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched",
  "getByte": ":param index: long\n:return: byte",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given OrderedKeys.\n\n:param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n                    In particular, the Context may be used to provide a Chunk data pool\n:param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - An OrderedKeys representing the keys to be fetched\n:return: (io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) A chunk of data corresponding to the keys from the given OrderedKeys",
  "makeGetContext": "Allocate a new ChunkSource.GetContext for retrieving chunks from this GetContextMaker,\n typically a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size required for any WritableChunk allocated as part of the result.\n:param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) A context for use with get operations"
 },
 "path": "io.deephaven.db.v2.sources.chunkcolumnsource.ByteChunkColumnSource",
 "text": "A column source backed by ByteChunks.\n \n The address space of the column source is dense, with each chunk backing a contiguous set of indices.  The\n getChunk(GetContext, OrderedKeys)\n call will return the backing chunk or a slice of the backing chunk if possible.",
 "typeName": "class"
}