{
 "className": "io.deephaven.db.v2.utils.RedirectionIndex",
 "methods": {
  "applyShift": "Update this RedirectionIndex according to the IndexShiftData.\n\n:param tableIndex: (io.deephaven.db.v2.utils.ReadOnlyIndex) - an Index to filter which rows should be shifted\n:param shiftData: (io.deephaven.db.v2.utils.IndexShiftData) - the IndexShiftData for this update",
  "fillChunk": "Lookup each element in OrderedKeys and write the result to mappedKeysOut\n\n:param fillContext: (io.deephaven.db.v2.utils.RedirectionIndex.FillContext) - the RedirectionIndex FillContext\n:param mappedKeysOut: (io.deephaven.db.v2.sources.chunk.WritableLongChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>) - the result chunk\n:param keysToMap: (io.deephaven.db.v2.utils.OrderedKeys) - the keys to lookup in this redirection index",
  "fillChunkUnordered": ":param fillContext: io.deephaven.db.v2.utils.RedirectionIndex.FillContext\n:param mappedKeysOut: io.deephaven.db.v2.sources.chunk.WritableLongChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n:param keysToMap: io.deephaven.db.v2.sources.chunk.LongChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext\n:param src: io.deephaven.db.v2.sources.chunk.Chunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.Values>\n:param orderedKeys: io.deephaven.db.v2.utils.OrderedKeys",
  "fillPrevChunk": ":param fillContext: io.deephaven.db.v2.utils.RedirectionIndex.FillContext\n:param mappedKeysOut: io.deephaven.db.v2.sources.chunk.WritableLongChunk<io.deephaven.db.v2.sources.chunk.Attributes.KeyIndices>\n:param keysToMap: io.deephaven.db.v2.utils.OrderedKeys",
  "get": ":param key: long\n:return: long",
  "getPrev": ":param key: long\n:return: long",
  "makeFillContext": ":param chunkCapacity: int\n:param sharedContext: io.deephaven.db.v2.sources.chunk.SharedContext\n:return: io.deephaven.db.v2.utils.RedirectionIndex.FillContext",
  "makeFillFromContext": "Provide a default, empty WritableChunkSink.FillFromContext for use with our default WritableSource.fillFromChunk(io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext, io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>, io.deephaven.db.v2.utils.OrderedKeys).\n\n:param chunkCapacity: int\n:return: io.deephaven.db.v2.sources.WritableChunkSink.FillFromContext",
  "put": ":param key: long\n:param index: long\n:return: long",
  "putVoid": "Like put, but we do not care about a return value.\n\n:param key: (long) - the key to put\n:param index: (long) - the inner value to insert into the redirection index",
  "remove": ":param leftIndex: long\n:return: long",
  "removeAll": ":param keys: io.deephaven.db.v2.utils.OrderedKeys",
  "removeVoid": "Like remove, but we do not care about a return value.\n\n:param key: (long) - the key to remove"
 },
 "path": "io.deephaven.db.v2.utils.RedirectionIndex",
 "text": "A RedirectionIndex can be in one of two states: tracking prev values or not. The typical lifecycle looks like this:\n \n* A RedirectionIndex is created with an initial map, but not tracking prev values. In this state, get() and\n     getPrev() behave identically; put() and remove() affect current values but do no \"prev value\" tracking.\n * Prev value tracking begins when the caller calls startTrackingPrevValues(). Immediately after this call, the data\n     is logically \"forked\": getPrev() will still refer to the same set of entries as before; this set will be\n     frozen until the end of the generation.\n * Additionally, a terminal listener will be registered so that the prev map will be updated at the end of the\n     generation.\n * Meanwhile, get(), put(), and remove() will logically refer to a fork of that map: it will initially have the same\n     entries as prev, but it will diverge over time as the caller does put() and remove() operations.\n * At the end of the generation (when the TerminalListener runs), the prev set is (logically) discarded, prev gets\n     current, and current becomes the new fork of the map.",
 "typeName": "interface"
}