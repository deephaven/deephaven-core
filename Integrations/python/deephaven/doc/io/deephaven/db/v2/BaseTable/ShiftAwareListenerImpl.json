{
 "className": "io.deephaven.db.v2.BaseTable$ShiftAwareListenerImpl",
 "methods": {
  "canExecute": ":param step: long\n:return: boolean",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "onFailureInternal": ":param originalException: java.lang.Throwable\n:param sourceEntry: io.deephaven.db.v2.utils.UpdatePerformanceTracker.Entry",
  "onUpdate": "Process notification of table changes.\n\n:param upstream: (io.deephaven.db.v2.ShiftAwareListener.Update) - The set of upstream table updates.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true. Otherwise, returns false rather\n than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.BaseTable.ShiftAwareListenerImpl",
 "text": "Simplest appropriate InstrumentedShiftAwareListener implementation for BaseTable and descendants. It's expected\n that most use-cases will require overriding onUpdate() - the default implementation simply passes index updates\n through to the dependent's listeners.",
 "typeName": "class"
}