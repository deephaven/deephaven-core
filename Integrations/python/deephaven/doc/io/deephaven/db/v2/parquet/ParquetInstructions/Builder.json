{
 "className": "io.deephaven.db.v2.parquet.ParquetInstructions$Builder",
 "methods": {
  "addColumnCodec": "*Overload 1*  \n  :param columnName: java.lang.String\n  :param codecName: java.lang.String\n  :return: io.deephaven.db.v2.parquet.ParquetInstructions.Builder\n  \n*Overload 2*  \n  :param columnName: java.lang.String\n  :param codecName: java.lang.String\n  :param codecArgs: java.lang.String\n  :return: io.deephaven.db.v2.parquet.ParquetInstructions.Builder",
  "addColumnNameMapping": ":param parquetColumnName: java.lang.String\n:param columnName: java.lang.String\n:return: io.deephaven.db.v2.parquet.ParquetInstructions.Builder",
  "build": ":return: io.deephaven.db.v2.parquet.ParquetInstructions",
  "getTakenNames": ":return: java.util.Set<java.lang.String>",
  "setCompressionCodecName": ":param compressionCodecName: java.lang.String\n:return: io.deephaven.db.v2.parquet.ParquetInstructions.Builder",
  "setIsLegacyParquet": ":param isLegacyParquet: boolean\n:return: io.deephaven.db.v2.parquet.ParquetInstructions.Builder",
  "setMaximumDictionaryKeys": "Set the maximum number of unique keys the writer should add to a dictionary page before switching to\n non-dictionary encoding; never evaluated for non-String columns, ignored if use\n dictionary is set for the column.\n\n:param maximumDictionaryKeys: (int) - The maximum number of dictionary keys; must be >= 0\n:return: io.deephaven.db.v2.parquet.ParquetInstructions.Builder",
  "useDictionary": "Set a hint that the writer should use dictionary-based encoding for writing this column; never evaluated for\n non-String columns.\n\n:param columnName: (java.lang.String) - The column name\n:param useDictionary: (boolean) - The hint value\n:return: io.deephaven.db.v2.parquet.ParquetInstructions.Builder"
 },
 "path": "io.deephaven.db.v2.parquet.ParquetInstructions.Builder",
 "typeName": "class"
}