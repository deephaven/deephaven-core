{
 "className": "io.deephaven.db.v2.utils.CumulativeUtil",
 "methods": {
  "accumulate": "General purpose core method for executing running and cumulative aggregations. Used by helper methods which\n provide template formulae for specific types of aggregations.\n\n:param t: (io.deephaven.db.tables.Table) - The Table to use as input to the aggregation.\n:param key: (java.lang.String) - Nullable string key to use to access the cached previous row value within the CumulativeUtil.CumulativeHelper\n        map. Note that a non-null literal key must be enclosed in backticks since it will be used in a formula.\n        Typically a column expression, rather than a literal, is used to allow operations based on the grouping of\n        the expression.\n:param startValue: (double) - Initial value from which to start aggregating. Normally 0.\n:param newCol: (java.lang.String) - The name of the aggregation column to add to the table.\n:param formula: (java.lang.String) - A formula indicating how to calculate the aggregation. This is normally provides by a helper\n        method. An example would be something like: \"_prev+A\" to cumulatively sum A.\n:return: (io.deephaven.db.tables.Table) A Table with the new aggregation column added. Note that this column will be a double column,\n         regardless of the numeric type(s) of the formula input(s).",
  "cumMin": "Executes a cumulative aggregation of the minimum value so far for a formula.\n\n:param t: (io.deephaven.db.tables.Table) - The Table to use as input to the aggregation.\n:param newCol: (java.lang.String) - The name of the aggregation column to add to the table.\n:param formula: (java.lang.String) - A formula for the source value on which to calculate a running minimum. This can be as simple as\n        the column name or a more complex expression.\n:return: (io.deephaven.db.tables.Table) A Table with the new aggregation column added. Note that this column will be a double column,\n         regardless of the numeric type(s) of the formula input(s).",
  "cumSum": "Executes a cumulative sum aggregation far for a formula.\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - The Table to use as input to the aggregation.\n  :param key: (java.lang.String) - Nullable string key to use to access the cached previous row value within the CumulativeUtil.CumulativeHelper\n          map. Note that a non-null literal key must be enclosed in backticks since it will be used in a formula.\n          Typically a column expression, rather than a literal, is used to allow operations based on the grouping of\n          the expression.\n  :param newCol: (java.lang.String) - The name of the aggregation column to add to the table.\n  :param formula: (java.lang.String) - A formula for the source value on which to calculate a running sum. This can be as simple as the\n          column name or a more complex expression.\n  :return: (io.deephaven.db.tables.Table) A Table with the new aggregation column added. Note that this column will be a double column,\n           regardless of the numeric type(s) of the formula input(s).\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.Table) - The Table to use as input to the aggregation.\n  :param newCol: (java.lang.String) - The name of the aggregation column to add to the table.\n  :param formula: (java.lang.String) - A formula for the source value on which to calculate a running sum. This can be as simple as the\n          column name or a more complex expression.\n  :return: (io.deephaven.db.tables.Table) A Table with the new aggregation column added. Note that this column will be a double column,\n           regardless of the numeric type(s) of the formula input(s).",
  "filterChanged": "Returns only rows for which the selected column value is different from the value in the previous row.\n\n:param t: (io.deephaven.db.tables.Table) - The Table to use as input to the method.\n:param key: (java.lang.String) - Nullable string key to use to access the cached previous row value within the CumulativeUtil.CumulativeHelper\n        map. Note that a non-null literal key must be enclosed in backticks since it will be used in a formula.\n        Typically a column expression, rather than a literal, is used to allow operations based on the grouping of\n        the expression.\n:param col: (java.lang.String) - The column to check for changing values.\n:return: (io.deephaven.db.tables.Table) A Table of only rows where the selected value has changed from the value in the previous row.",
  "main": "main method to show examples of use of this class' methods.\n\n:param args: (java.lang.String...) - Not used",
  "rollingSum": "Executes a rolling sum aggregation far for a formula.\n\n:param t: (io.deephaven.db.tables.Table) - The Table to use as input to the aggregation.\n:param windowSize: (int) - The number of rows to include in the rolling sum window.\n:param newCol: (java.lang.String) - The name of the aggregation column to add to the table.\n:param formula: (java.lang.String) - A formula for the source value on which to calculate a running sum. This can be as simple as the\n        column name or a more complex expression.\n:return: (io.deephaven.db.tables.Table) A Table with the new aggregation column added. Note that this column will be a double column,\n         regardless of the numeric type(s) of the formula input(s)."
 },
 "path": "io.deephaven.db.v2.utils.CumulativeUtil",
 "text": "Utilities for cumulative and rolling aggregations.",
 "typeName": "class"
}