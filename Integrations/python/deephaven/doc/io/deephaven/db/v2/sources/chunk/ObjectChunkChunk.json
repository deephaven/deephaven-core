{
 "className": "io.deephaven.db.v2.sources.chunk.ObjectChunkChunk",
 "methods": {
  "chunkWrap": "*Overload 1*  \n  Note: Java generics information - <T,\n  ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  \n  :param data: io.deephaven.db.v2.sources.chunk.ObjectChunk<T,ATTR>[]\n  :return: io.deephaven.db.v2.sources.chunk.ObjectChunkChunk<T,ATTR>\n  \n*Overload 2*  \n  Note: Java generics information - <T,\n  ATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n  \n  :param data: io.deephaven.db.v2.sources.chunk.ObjectChunk<T,ATTR>[]\n  :param offset: int\n  :param capacity: int\n  :return: io.deephaven.db.v2.sources.chunk.ObjectChunkChunk<T,ATTR>",
  "get": "*Overload 1*  \n  :param index: int\n  :return: io.deephaven.db.v2.sources.chunk.ObjectChunk<ObjectChunkChunk.T,ObjectChunkChunk.ATTR>\n  \n*Overload 2*  \n  :param j: int\n  :param i: int\n  :return: ObjectChunkChunk.T",
  "getChunk": ":param index: int\n:return: io.deephaven.db.v2.sources.chunk.ObjectChunk<ObjectChunkChunk.T,ObjectChunkChunk.ATTR>",
  "getEmptyChunk": "Note: Java generics information - <T,\nATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:return: io.deephaven.db.v2.sources.chunk.ObjectChunkChunk<T,ATTR>",
  "makeArray": "Note: Java generics information - <T,\nATTR extends io.deephaven.db.v2.sources.chunk.Attributes.Any>\n\n:param capacity: int\n:return: io.deephaven.db.v2.sources.chunk.ObjectChunk<T,ATTR>[]",
  "slice": ":param offset: int\n:param capacity: int\n:return: io.deephaven.db.v2.sources.chunk.ObjectChunkChunk<ObjectChunkChunk.T,ObjectChunkChunk.ATTR>"
 },
 "path": "io.deephaven.db.v2.sources.chunk.ObjectChunkChunk",
 "typeName": "class"
}