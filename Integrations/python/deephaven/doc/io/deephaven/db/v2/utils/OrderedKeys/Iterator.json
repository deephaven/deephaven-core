{
 "className": "io.deephaven.db.v2.utils.OrderedKeys$Iterator",
 "methods": {
  "advance": "Advance this iterator's position to nextKey, or to the first present key greater than\n nextKey if nextKey is not found. If nextKey is less than or equal to the key at this\n iterator's current position, this method is a no-op.\n Subsequent calls to peekNextKey(), getNextOrderedKeysThrough(long), or\n getNextOrderedKeysWithLength(long) will begin with the key advanced to.\n\n:param nextKey: (long) - The key to advance to\n:return: (boolean) true If there are any keys remaining to be iterated after the advance, false if this OrderedKeys.Iterator\n              is exhausted",
  "advanceAndGetPositionDistance": "Advance this iterator's position as in advance(long), returning the number of keys thus consumed.\n\n:param nextKey: (long) - The key to advance to\n:return: (long) The number of keys consumed from the iterator",
  "close": "Free any resources associated with this iterator.\n Callers of OrderedKeys.getOrderedKeysIterator() are responsible for ensuring that close()\n is called when they are done with resulting OrderedKeys.Iterator.\n Using any OrderedKeys.Iterator methods after close() is an error and may produce exceptions or\n undefined results.",
  "getNextOrderedKeysThrough": "Get an OrderedKeys from the key at the position of this iterator up to the maximum key (inclusive).\n Advances the position of this iterator by the size of the result.\n If the maximum key provided is smaller than the next key (as would be returned by peekNextKey()),\n the empty OrderedKeys is returned.\n\n The returned OrderedKeys object is only borrowed by the caller from the OrderedKeys.Iterator, who owns it.\n It is guaranteed to be valid and not change only until a later call to another getNext* method.\n As the returned reference is owned by the OrderedKeys.Iterator, the caller should not call close()\n on it.\n\n:param maxKeyInclusive: (long) - The maximum key to include.\n:return: (io.deephaven.db.v2.utils.OrderedKeys) An OrderedKeys from the key at the initial position up to the maximum key (inclusive).",
  "getNextOrderedKeysWithLength": "Get an OrderedKeys from the key at the position of this iterator up to the desired number of keys.\n Advances the position of this iterator by the size of the result.\n\n The returned OrderedKeys object is only borrowed by the caller from the OrderedKeys.Iterator, who owns it.\n It is guaranteed to be valid and not change only until the next call to another getNext* method.\n As the returned reference is owned by the OrderedKeys.Iterator, the caller should not call close()\n on it.\n\n:param numberOfKeys: (long) - The desired number of keys\n:return: (io.deephaven.db.v2.utils.OrderedKeys) An OrderedKeys from the key at the initial position up to the desired number of keys",
  "getRelativePosition": "Taking the difference between values returned by this method at different positions in the iterator\n gives you the cardinality of the set of keys between them, exclusive.  Note a single value itself\n is not meaningful; like measuring elapsed time, it only makes sense to take the difference\n from absolute points.\n\n:return: (long) A relative position offset from some arbitrary initial point in the underlying ordered keys.",
  "hasMore": "Poll whether there are more keys available from this OrderedKeys.Iterator.\n\n:return: (boolean) True if there are more keys available, else false",
  "peekNextKey": "Peek at the next key that would be returned by getNextOrderedKeysThrough(long) or\n getNextOrderedKeysWithLength(long). Does not advance the position.\n\n:return: (long) The next key that would be returned, or ReadOnlyIndex.NULL_KEY if this iterator is exhausted"
 },
 "path": "io.deephaven.db.v2.utils.OrderedKeys.Iterator",
 "text": "Iterator for consuming an OrderedKeys by ordered subsets.",
 "typeName": "interface"
}