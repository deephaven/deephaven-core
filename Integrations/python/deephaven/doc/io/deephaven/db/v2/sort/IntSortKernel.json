{
 "className": "io.deephaven.db.v2.sort.IntSortKernel",
 "methods": {
  "makeContext": "Creates a SortKernel for the given chunkType.\n\n:param chunkType: (io.deephaven.db.v2.sources.chunk.ChunkType) - the type of chunk we are sorting\n:param order: (io.deephaven.db.tables.SortingOrder) - whether we should sort in an ascending or descending direction\n:param size: (int) - how many values we will be sorting\n:param preserveValues: (boolean) - if the output chunk of our sort should contain the values in sorted order; otherwise the\n                       kernel need only permute the input indices into sorted order\n:return: (io.deephaven.db.v2.sort.IntSortKernel<ATTR,KEY_INDICES>) a SortKernel suitable for the given type, order, and size",
  "sort": "**Incompatible overloads text - text from the first overload:**\n\nSort the values in valuesToSort permuting the indexKeys chunk in the same way.\n\n*Overload 1*  \n  :param indexKeys: io.deephaven.db.v2.sources.chunk.WritableIntChunk<IntSortKernel.KEY_INDICES>\n  :param valuesToSort: io.deephaven.db.v2.sources.chunk.WritableChunk<IntSortKernel.ATTR>\n  \n*Overload 2*  \n  :param indexKeys: io.deephaven.db.v2.sources.chunk.WritableIntChunk<IntSortKernel.KEY_INDICES>\n  :param valuesToSort: io.deephaven.db.v2.sources.chunk.WritableChunk<IntSortKernel.ATTR>\n  :param offsetsIn: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.ChunkPositions>\n  :param lengthsIn: io.deephaven.db.v2.sources.chunk.IntChunk<? extendsio.deephaven.db.v2.sources.chunk.Attributes.ChunkLengths>"
 },
 "path": "io.deephaven.db.v2.sort.IntSortKernel",
 "text": "The SortKernel sorts a chunk of primitive value together with a parallel IntChunk of KeyIndices.",
 "typeName": "interface"
}