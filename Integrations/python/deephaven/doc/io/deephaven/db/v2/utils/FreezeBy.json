{
 "className": "io.deephaven.db.v2.utils.FreezeBy",
 "methods": {
  "freezeBy": "**Incompatible overloads text - text from the first overload:**\n\nFreeze the input table.\n\n \n The input table may only have zero or one rows. The first added row will be frozen until the table becomes empty.\n\n*Overload 1*  \n  :param input: (io.deephaven.db.tables.Table) - the table to freeze\n  :return: (io.deephaven.db.tables.Table) a frozen copy of the input table\n  \n*Overload 2*  \n  :param input: (io.deephaven.db.tables.Table) - the table to freeze\n  :param groupByColumns: (java.lang.String...) - the keys to freeze the table by\n  :return: (io.deephaven.db.tables.Table) a copy of the input table frozen by key\n  \n*Overload 3*  \n  :param input: (io.deephaven.db.tables.Table) - the table to freeze\n  :param groupByColumns: (java.util.Collection<java.lang.String>) - the keys to freeze the table by\n  :return: (io.deephaven.db.tables.Table) a copy of the input table frozen by key\n  \n*Overload 4*  \n  :param input: (io.deephaven.db.tables.Table) - the table to freeze\n  :param groupByColumns: (io.deephaven.db.v2.select.SelectColumn...) - the keys to freeze the table by\n  :return: (io.deephaven.db.tables.Table) a copy of the input table frozen by key"
 },
 "path": "io.deephaven.db.v2.utils.FreezeBy",
 "text": "FreezeBy records the first value for a given key in the output table and ignores subsequent changes.\n\n When keys are removed, the corresponding row is removed from the output table. When keys are added back on another\n cycle, the newly added value is frozen in the output.\n\n Only one row per key is allowed in the input. This is because the operation can not determine which is the correct\n row to freeze in cases where there are multiple rows per key. The freeze operation is not sensitive to index changes\n (e.g., adds, removes, modifies, shifts); whether a row is updated is based solely on (1) a key did not exist in the\n input table at the start of the cycle and (2) it now exists in the input table. If the key did not exist, a frozen\n copy is taken. If the key did exist, then no modifications occur.",
 "typeName": "class"
}