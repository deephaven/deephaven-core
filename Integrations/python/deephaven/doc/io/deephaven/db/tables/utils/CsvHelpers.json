{
 "className": "io.deephaven.db.tables.utils.CsvHelpers",
 "methods": {
  "readCsv": "Returns a memory table created by importing CSV data. The first row must be column names. Column data types are\n inferred from the data.\n\n*Overload 1*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to\n          use as a delimiter.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 2*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to\n          use as a delimiter.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar. If\n          passed explicitly as null, a StatusCallback instance will be created to log progress to the current\n          logger.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 3*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param separator: (char) - a char to use as the delimiter value when parsing the file.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 4*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param separator: (char) - a char to use as the delimiter value when parsing the file.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar. If\n          passed explicitly as null, a StatusCallback instance will be created to log progress to the current\n          logger.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 5*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 6*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar. If\n          passed explicitly as null, a StatusCallback instance will be created to log progress to the current\n          logger.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object",
  "readCsv2": "Returns a memory table created by importing CSV data. The first row must be column names. Column data types are\n inferred from the data.\n\n*Overload 1*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param separator: (char) - a char to use as the delimiter value when parsing the file.\n  :return: (io.deephaven.db.v2.QueryTable) a Deephaven QueryTable object\n  \n*Overload 2*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :return: (io.deephaven.db.v2.QueryTable) a Deephaven QueryTable object",
  "writeCsv": "Writes a DB table out as a CSV file.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 3*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 4*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.BufferedWriter) - BufferedWriter used to write the CSV\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 5*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.BufferedWriter) - BufferedWriter used to write the CSV\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param columns: (java.lang.String...) - a list of columns to include in the export",
  "writeCsvContents": "Writes a DB table out as a CSV file.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.BufferedWriter) - a BufferedWriter to which the header should be written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.BufferedWriter) - a BufferedWriter to which the header should be written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 3*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.BufferedWriter) - a BufferedWriter to which the header should be written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 4*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.BufferedWriter) - a BufferedWriter to which the header should be written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 5*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.BufferedWriter) - a BufferedWriter to which the header should be written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param colNames: (java.lang.String...) - a list of columns to include in the export",
  "writeCsvHeader": "Writes the column name header row to a CSV file.\n\n*Overload 1*  \n  :param out: (java.io.BufferedWriter) - the BufferedWriter to which the header should be written\n  :param columns: (java.lang.String...) - a list of column names to be written\n  \n*Overload 2*  \n  :param out: (java.io.BufferedWriter) - the BufferedWriter to which the header should be written\n  :param separator: (char) - a char to use as the delimiter value when writing out the header\n  :param columns: (java.lang.String...) - a list of column names to be written",
  "writeCsvPaginate": "Writes a Deephaven table to one or more files, splitting it based on the MAX_CSV_LINE_COUNT setting.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table to be exported\n  :param destPath: (java.lang.String) - the path in which the CSV file(s) should be written\n  :param filename: (java.lang.String) - the base file name to use for the files. A dash and starting line number will be concatenated to\n          each file.\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table to be exported\n  :param destPath: (java.lang.String) - the path in which the CSV file(s) should be written\n  :param filename: (java.lang.String) - the base file name to use for the files. A dash and starting line number will be concatenated to\n          each file.\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'",
  "writeToMultipleFiles": "Writes a subset of rows from a Deephaven table to a CSV file.\n\n*Overload 1*  \n  :param table: (io.deephaven.db.tables.Table) - a Deephaven table from which rows should be exported\n  :param path: (java.lang.String) - the destination path in which the output CSV file should be created\n  :param filename: (java.lang.String) - the base file name to which a dash and starting line number will be concatenated for the file\n  :param startLine: (long) - the starting line number from the table to export; the ending line number will be startLine +\n          MAX_CSV_LINE_COUNT-1, or the end of the table\n  \n*Overload 2*  \n  :param table: (io.deephaven.db.tables.Table) - a Deephaven table from which rows should be exported\n  :param path: (java.lang.String) - the destination path in which the output CSV file should be created\n  :param filename: (java.lang.String) - the base file name to which a dash and starting line number will be concatenated for the file\n  :param startLine: (long) - the starting line number from the table to export; the ending line number will be startLine +\n          MAX_CSV_LINE_COUNT-1, or the end of the table\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'"
 },
 "path": "io.deephaven.db.tables.utils.CsvHelpers",
 "text": "Utilities for reading and writing CSV files to and from Tables",
 "typeName": "class"
}