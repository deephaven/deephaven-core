{
 "className": "io.deephaven.db.tables.dbarrays.DbBooleanArray",
 "methods": {
  "equals": "Helper method for implementing Object.equals(Object).\n\n:param aArray: (io.deephaven.db.tables.dbarrays.DbBooleanArray) - The LHS of the equality test (always a DbBooleanArray)\n:param b: (java.lang.Object) - The RHS of the equality test\n:return: (boolean) Whether the two inputs are equal",
  "fillChunk": ":param destChunk: io.deephaven.db.v2.sources.chunk.WritableChunk",
  "get": ":param i: long\n:return: java.lang.Boolean",
  "getComponentType": ":return: java.lang.Class",
  "getDirect": "Return a version of this DbArrayBase that is flattened out to only reference memory.\n\n:return: io.deephaven.db.tables.dbarrays.DbBooleanArrayDirect",
  "hashCode": "Helper method for implementing Object.hashCode(). Follows the pattern in\n Arrays.hashCode(Object[]).\n\n:param array: (io.deephaven.db.tables.dbarrays.DbBooleanArray) - The DbBooleanArray to hash\n:return: (int) The hash code",
  "subArray": ":param fromIndex: long\n:param toIndex: long\n:return: io.deephaven.db.tables.dbarrays.DbBooleanArray",
  "subArrayByPositions": ":param positions: long[]\n:return: io.deephaven.db.tables.dbarrays.DbBooleanArray",
  "toArray": ":return: java.lang.Boolean[]",
  "toChunk": ":return: io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>",
  "toDbArray": ":return: io.deephaven.db.tables.dbarrays.DbArray",
  "toString": "Helper method for implementing Object.toString().\n\n:param array: (io.deephaven.db.tables.dbarrays.DbBooleanArray) - The DbBooleanArray to convert to a String\n:return: (java.lang.String) The String representation of array"
 },
 "path": "io.deephaven.db.tables.dbarrays.DbBooleanArray",
 "typeName": "interface"
}