{
 "className": "io.deephaven.db.tables.utils.csv.Parser",
 "methods": {
  "canParse": "Checks if this parser can parse value.\n\n \nnull values are always return true.\n\n:param value: (java.lang.String) - the value\n:return: (boolean) true if the value can be parsed.",
  "epochAny21stCentury": "Returns four parser that will parse long values as epoch seconds, epoch milliseconds, epoch microseconds, and\n epoch nanoseconds from the 21st century.\n\n:param longParser: (io.deephaven.db.tables.utils.csv.Parser<java.lang.Long>) - the long parser\n:return: (java.util.List<io.deephaven.db.tables.utils.csv.Parser<java.time.Instant>>) the 21st century epoch second, milli, micro, and nanoseconds parsers",
  "epochAnyParser": "Returns four parsers that will parse long values as epoch seconds, milliseconds, epoch microseconds, and epoch\n nanoseconds based on non-overlapping min/max ranges.\n\n \n Note: the duration between the epoch and the max must be less than 1000 times the duration between the epoch and\n the min.\n\n:param longParser: (io.deephaven.db.tables.utils.csv.Parser<java.lang.Long>) - the long parser\n:param min: (java.time.Instant) - the minimum instant to infer\n:param max: (java.time.Instant) - the maximum instant to infer\n:return: (java.util.List<io.deephaven.db.tables.utils.csv.Parser<java.time.Instant>>) the epoch milli and micro parsers",
  "epochMicroParser": "A parser that will parse long values as epoch microseconds.\n\n:param longParser: (io.deephaven.db.tables.utils.csv.Parser<java.lang.Long>) - the long parser\n:param min: (java.time.Instant) - the minimum instant to infer, may be null\n:param max: (java.time.Instant) - the maximum instant to infer, may be null\n:return: (io.deephaven.db.tables.utils.csv.Parser<java.time.Instant>) the epoch micro parser",
  "epochMilliParser": "A parser that will parse long values as epoch milliseconds.\n\n:param longParser: (io.deephaven.db.tables.utils.csv.Parser<java.lang.Long>) - the long parser\n:param min: (java.time.Instant) - the minimum instant to infer, may be null\n:param max: (java.time.Instant) - the maximum instant to infer, may be null\n:return: (io.deephaven.db.tables.utils.csv.Parser<java.time.Instant>) the epoch milli parser",
  "epochNanoParser": "A parser that will parse long values as epoch nanoseconds.\n\n:param longParser: (io.deephaven.db.tables.utils.csv.Parser<java.lang.Long>) - the long parser\n:param min: (java.time.Instant) - the minimum instant to infer, may be null\n:param max: (java.time.Instant) - the maximum instant to infer, may be null\n:return: (io.deephaven.db.tables.utils.csv.Parser<java.time.Instant>) the epoch nano parser",
  "epochSecondParser": "A parser that will parse long values as epoch seconds.\n\n:param longParser: (io.deephaven.db.tables.utils.csv.Parser<java.lang.Long>) - the long parser\n:param min: (java.time.Instant) - the minimum instant to infer, may be null\n:param max: (java.time.Instant) - the maximum instant to infer, may be null\n:return: (io.deephaven.db.tables.utils.csv.Parser<java.time.Instant>) the epoch second parser",
  "parse": "Parses value when non-null, otherwise returns null.\n\n \n This method catches RuntimeException from function and converts them to Parser.ParserException.\n\n:param value: (java.lang.String) - the string to parse\n:return: (Parser.T) the parsed value, or null",
  "type": ":return: io.deephaven.qst.type.Type<Parser.T>"
 },
 "path": "io.deephaven.db.tables.utils.csv.Parser",
 "text": "A parser is responsible for parsing strings into parsed types.",
 "typeName": "class"
}