{
 "className": "io.deephaven.db.tables.TableDefinition",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "checkCompatibility": "**Incompatible overloads text - text from the first overload:**\n\nTest compatibility of this definition with another. This definition must have all columns of\n the other, and the column definitions in common must be compatible, as defined by\n ColumnDefinition.isCompatible(ColumnDefinition).\n\n Note: unlike ColumnDefinition.isCompatible(ColumnDefinition), this method does not\n have an equivalence relation. For a stricter check, use\n TableDefinition.checkMutualCompatibility(TableDefinition).\n\n*Overload 1*  \n  :param other: (io.deephaven.db.tables.TableDefinition) - comparison table definition\n  :return: (io.deephaven.db.tables.TableDefinition) the minimized compatible table definition, in the same order as other\n  \n*Overload 2*  \n  :param other: (io.deephaven.db.tables.TableDefinition) - comparison table definition\n  :param ignorePartitioningColumns: (boolean) - if true, other definition may contain partitioning columns not\n       in this definition\n  :return: (io.deephaven.db.tables.TableDefinition) the minimized compatible table definition, in the same order as other",
  "checkMutualCompatibility": "Tests mutual-compatibility of this and other. To be mutually compatible, they\n must have the same number of columns, each matched up with ColumnDefinition.isCompatible(io.deephaven.db.tables.ColumnDefinition).\n As such, this method has an equivalence relation, ie\n A.checkMutualCompatibility(B) == B.checkMutualCompatibility(A).\n\n:param other: (io.deephaven.db.tables.TableDefinition) - the other definition\n:return: (io.deephaven.db.tables.TableDefinition) this table definition, but in the the column order of other",
  "createUserPartitionedTableDefinition": "**Incompatible overloads text - text from the first overload:**\n\nHelper method to assist with definition creation for user-namespace partitioned tables.\n\n*Overload 1*  \n  :param partitioningColumnName: (java.lang.String) - The name of the column to use for partitioning\n  :param baseDefinition: (io.deephaven.db.tables.TableDefinition) - The definition to work from\n  :return: (io.deephaven.db.tables.TableDefinition) A new definition suitable for writing partitioned tables with\n  \n*Overload 2*  \n  :param partitioningColumnName: (java.lang.String) - The name of the column to use for partitioning\n  :param baseDefinition: (io.deephaven.db.tables.TableDefinition) - The definition to work from\n  :param groupingColumnsAsNormal: (boolean) - Whether grouping columns should be converted to normal columns\n  :return: (io.deephaven.db.tables.TableDefinition) A new definition suitable for writing partitioned tables with",
  "datePartitionedTableDefinition": ":param types: java.lang.Class[]\n:param columnNames: java.lang.String[]\n:return: io.deephaven.db.tables.TableDefinition",
  "describeDifferences": "Build a description of the difference between this definition and the other.\n Should correspond to equalsIgnoreOrder logic.\n\n:param other: (io.deephaven.db.tables.TableDefinition) - another TableDefinition to compare\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:return: (java.util.List<java.lang.String>) a list of strings representing the difference between two table definitions",
  "equals": "Strict comparison (column-wise only).\n\n:param other: java.lang.Object\n:return: (boolean) True if other is a TableDefinition and contains equal ColumnDefinitions in the same order.  False otherwise.",
  "equalsIgnoreOrder": "Strict comparison (column-wise only).\n\n:param other: (io.deephaven.db.tables.TableDefinition) - - The other TableDefinition to compare with.\n:return: (boolean) True if other contains equal ColumnDefinitions in any order.  False otherwise.",
  "getColumn": ":param columnName: (java.lang.String) - the column name to search for\n:return: (io.deephaven.db.tables.ColumnDefinition) The column definition for the supplied name, or null if no such column exists in this table definition.",
  "getColumnDefinitionsTable": ":return: io.deephaven.db.tables.Table",
  "getColumnIndex": ":param column: (io.deephaven.db.tables.ColumnDefinition) - the ColumnDefinition to search for\n:return: (int) The index of the column for the supplied name, or -1 if no such column exists in this table definition.\n Note: This is an O(columns.length) lookup.",
  "getColumnList": ":return: (java.util.List<io.deephaven.db.tables.ColumnDefinition>) A list view of the column definition array for this table definition.",
  "getColumnNameMap": ":return: (java.util.Map<java.lang.String,io.deephaven.db.tables.ColumnDefinition>) A freshly-allocated, unmodifiable map from column name to column definition.",
  "getColumnNames": ":return: (java.util.List<java.lang.String>) A freshly-allocated list of column names in the same order as the column definitions array.",
  "getColumnNamesArray": ":return: (java.lang.String[]) A freshly-allocated array of column names in the same order as the column definitions array.",
  "getColumnNamesAsString": ":return: (java.lang.String) A freshly-allocated String of column names joined with ','.",
  "getColumnStream": ":return: (java.util.stream.Stream<io.deephaven.db.tables.ColumnDefinition>) A stream of the column definition array for this table definition",
  "getColumnTypes": ":return: (java.util.List<java.lang.Class>) A freshly-allocated list of column types in the same order as the column definitions array.",
  "getColumnTypesArray": ":return: (java.lang.Class[]) A freshly-allocated array of column types in the same order as the column definitions array.",
  "getDifferenceDescription": "Build a description of the difference between this definition and the other.\n Should correspond to equalsIgnoreOrder logic.\n\n:param other: (io.deephaven.db.tables.TableDefinition) - another TableDefinition to compare\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:param separator: (java.lang.String) - separate strings in the list of differences with this separator\n:return: (java.lang.String) A string in which the differences are enumerated, separated by the given separator",
  "getGroupingColumnNamesArray": ":return: (java.lang.String[]) A freshly-allocated array of column names for all grouping columns, in the same relative order as in the column definitions array.",
  "getGroupingColumns": ":return: (java.util.List<io.deephaven.db.tables.ColumnDefinition>) A freshly-allocated list of column definitions for all grouping columns, in the same relative order as in the column definitions array.",
  "getPartitioningColumns": ":return: (java.util.List<io.deephaven.db.tables.ColumnDefinition>) A freshly-allocated list of column definitions for all partitioning columns, in the same relative order as in the column definitions array.",
  "getWritable": "*Overload 1*  \n  :return: (io.deephaven.db.tables.TableDefinition) This definition if it's writable, or a freshly-allocated definition that is identical but for the columns\n           array, which will exclude all non-writable columns.\n  \n*Overload 2*  \n  :param partitioningToNormal: (boolean) - Whether partitioning columns should be preserved as normal columns, or excluded\n  :return: (io.deephaven.db.tables.TableDefinition) This definition if it's writable, or a freshly-allocated definition that is identical but for the columns\n           array, which will exclude all non-writable columns, optionally converting partitioning columns to normal\n           columns.",
  "getWritableColumns": ":param partitioningToNormal: (boolean) - Whether partitioning columns should be preserved as normal columns, or excluded\n:return: (io.deephaven.db.tables.ColumnDefinition[]) This definition's array of column definitions if they're all writable, or a freshly-allocated array of\n         column definitions which will exclude all non-writable columns, optionally converting partitioning\n         columns to normal columns.",
  "inferFrom": ":param sources: java.util.Map<java.lang.String,? extends io.deephaven.db.v2.sources.ColumnSource>\n:return: io.deephaven.db.tables.TableDefinition",
  "isOnDisk": "Deprecated. \n\n:return: boolean",
  "isValidStorageType": ":param storageType: int\n:return: boolean",
  "loadDefinition": "**Incompatible overloads text - text from the first overload:**\n\nLoad a TableDefinition from the default file for the supplied directory and table name.\n\n*Overload 1*  \n  :param source: (java.io.File) - The file to find the definition in\n  :return: (io.deephaven.db.tables.TableDefinition) The TableDefinition object\n  \n*Overload 2*  \n  :param sourceDirectory: (java.io.File) - The directory to find the definition file in\n  :param tableName: (java.lang.String) - The table name to use when determining the definition file name\n  :return: (io.deephaven.db.tables.TableDefinition) The TableDefinition object\n  \n*Overload 3*  \n  :param sourceDirectory: (java.io.File) - The directory to find the definition file in\n  :param tableName: (java.lang.String) - The table name to use when determining the definition file name\n  :param allowMissing: (boolean) - Whether to return null if the file is not found, rather than throwing an exception\n  :return: (io.deephaven.db.tables.TableDefinition) The TableDefinition object, or null if not found and allowMissing",
  "main": ":param args: java.lang.String[]",
  "of": ":param columnDefinitions: io.deephaven.db.tables.ColumnDefinition<?>...\n:return: io.deephaven.db.tables.TableDefinition",
  "persistDefinition": "Persist the supplied TableDefinition to the default file for the supplied directory and table name.\n\n:param definition: (io.deephaven.db.tables.TableDefinition) - The definition\n:param destinationDirectory: (java.io.File) - The destination directory\n:param tableName: (java.lang.String) - The table name",
  "readExternal": ":param in: java.io.ObjectInput",
  "setColumns": ":param columns: io.deephaven.db.tables.ColumnDefinition[]",
  "setStorageType": ":param storageType: int",
  "tableDefinition": ":param types: java.lang.Class[]\n:param columnNames: java.lang.String[]\n:return: io.deephaven.db.tables.TableDefinition",
  "toString": ":return: java.lang.String",
  "writeExternal": ":param out: java.io.ObjectOutput"
 },
 "path": "io.deephaven.db.tables.TableDefinition",
 "text": "Table definition for all Deephaven tables.\n Adds non-stateful functionality to DefaultTableDefinition.",
 "typeName": "class"
}