{
 "className": "io.deephaven.db.tables.utils.NameValidator",
 "methods": {
  "isLegalNamespaceName": "Validates whether a given name is a valid namespace.\n\n*Overload 1*  \n  :param name: (java.lang.String) - the name to validate\n  :param customReplace: (java.util.function.Function<java.lang.String,java.lang.String>) - a function that is applied to the name before processing legality\n  :param takenNames: (java.util.Set<java.lang.String>) - the list of names that are already taken\n  :return: (boolean) whether the name is valid for a new namespace\n  \n*Overload 2*  \n  :param name: java.lang.String\n  :return: boolean\n  \n*Overload 3*  \n  :param name: java.lang.String\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: boolean\n  \n*Overload 4*  \n  :param name: java.lang.String\n  :param replaceCustom: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: boolean",
  "isLegalTableName": "Validates whether a given name is a legal table name.\n\n*Overload 1*  \n  :param name: java.lang.String\n  :return: boolean\n  \n*Overload 2*  \n  :param name: java.lang.String\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: boolean\n  \n*Overload 3*  \n  :param name: java.lang.String\n  :param replaceCustom: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: boolean\n  \n*Overload 4*  \n  :param name: (java.lang.String) - the name to validate\n  :param customReplace: (java.util.function.Function<java.lang.String,java.lang.String>) - a function that is applied to the name before processing legality\n  :param takenNames: (java.util.Set<java.lang.String>) - the list of names that are already taken\n  :return: (boolean) whether the name is valid for a new table",
  "isValidColumnName": ":param name: java.lang.String\n:return: boolean",
  "legalizeColumnName": "Attempts to return a legal name based on the passed in name.\n\n \n Illegal characters are simply removed. Custom replacement is possible through customReplace\n\n To avoid duplicated names, anything in the set takenNames will not be returned. These duplicates are\n resolved by adding sequential digits at the end of the variable name.\n\n \n Column names A variable's name can be any legal identifier - an unlimited-length sequence of Unicode letters and\n digits, beginning with a letter, the dollar sign \"$\", or the underscore character \"_\". Subsequent characters may\n be letters, digits, dollar signs, or underscore characters.\n\n*Overload 1*  \n  :param name: java.lang.String\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param name: java.lang.String\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String\n  \n*Overload 3*  \n  :param name: java.lang.String\n  :param replaceCustom: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String\n  \n*Overload 4*  \n  :param name: (java.lang.String) - , customReplace, takenNames can not be null\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String",
  "legalizeColumnNames": "*Overload 1*  \n  :param names: java.lang.String[]\n  :return: java.lang.String[]\n  \n*Overload 2*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String[]\n  \n*Overload 3*  \n  :param names: java.lang.String[]\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]\n  \n*Overload 4*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]",
  "legalizeNamespaceName": "Attempts to return a legal name based on the passed in name.\n\n \n Illegal characters are simply removed. Custom replacement is possible through customReplace\n\n To avoid duplicated names, anything in the set takenNames will not be returned. These duplicates are\n resolved by adding sequential digits at the end of the variable name.\n\n \n Namespace Names- check the regex TABLE_NAME_PATTERN\n\n*Overload 1*  \n  :param name: java.lang.String\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param name: java.lang.String\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String\n  \n*Overload 3*  \n  :param name: java.lang.String\n  :param replaceCustom: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String\n  \n*Overload 4*  \n  :param name: (java.lang.String) - , customReplace, takenNames can not be null\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String",
  "legalizeNamespaceNames": "*Overload 1*  \n  :param names: java.lang.String[]\n  :return: java.lang.String[]\n  \n*Overload 2*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String[]\n  \n*Overload 3*  \n  :param names: java.lang.String[]\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]\n  \n*Overload 4*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]",
  "legalizeQueryParameterName": "Attempts to return a legal name based on the passed in name.\n\n \n Illegal characters are simply removed. Custom replacement is possible through customReplace\n\n To avoid duplicated names, anything in the set takenNames will not be returned. These duplicates are\n resolved by adding sequential digits at the end of the variable name.\n\n \n Query parameters follow the same rules as column names\n\n*Overload 1*  \n  :param name: java.lang.String\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param name: java.lang.String\n  :param replaceCustom: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String\n  \n*Overload 3*  \n  :param name: java.lang.String\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String\n  \n*Overload 4*  \n  :param name: (java.lang.String) - , customReplace, takenNames can not be null\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String",
  "legalizeQueryParameterNames": "*Overload 1*  \n  :param names: java.lang.String[]\n  :return: java.lang.String[]\n  \n*Overload 2*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String[]\n  \n*Overload 3*  \n  :param names: java.lang.String[]\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]\n  \n*Overload 4*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]",
  "legalizeTableName": "Attempts to return a legal name based on the passed in name.\n\n \n Illegal characters are simply removed. Custom replacement is possible through customReplace\n\n To avoid duplicated names, anything in the set takenNames will not be returned. These duplicates are\n resolved by adding sequential digits at the end of the variable name.\n\n \n Table Names- check the regex TABLE_NAME_PATTERN\n\n*Overload 1*  \n  :param name: java.lang.String\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param name: java.lang.String\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String\n  \n*Overload 3*  \n  :param name: java.lang.String\n  :param replaceCustom: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String\n  \n*Overload 4*  \n  :param name: (java.lang.String) - , customReplace, takenNames can not be null\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param takenNames: java.util.Set<java.lang.String>\n  :return: java.lang.String",
  "legalizeTableNames": "*Overload 1*  \n  :param names: java.lang.String[]\n  :return: java.lang.String[]\n  \n*Overload 2*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :return: java.lang.String[]\n  \n*Overload 3*  \n  :param names: java.lang.String[]\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]\n  \n*Overload 4*  \n  :param names: java.lang.String[]\n  :param customReplace: java.util.function.Function<java.lang.String,java.lang.String>\n  :param resolveConflicts: boolean\n  :return: java.lang.String[]",
  "validateColumnName": ":param name: java.lang.String\n:return: java.lang.String",
  "validateNamespaceName": ":param name: java.lang.String\n:return: java.lang.String",
  "validatePartitionName": ":param name: java.lang.String\n:return: java.lang.String",
  "validateQueryParameterName": ":param name: java.lang.String\n:return: java.lang.String",
  "validateTableName": ":param name: java.lang.String\n:return: java.lang.String"
 },
 "path": "io.deephaven.db.tables.utils.NameValidator",
 "typeName": "class"
}