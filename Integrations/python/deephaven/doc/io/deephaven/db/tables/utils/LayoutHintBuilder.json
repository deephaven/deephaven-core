{
 "className": "io.deephaven.db.tables.utils.LayoutHintBuilder",
 "methods": {
  "alwaysSubscribed": "Indicate that the UI should maintain a subscription to the specified columns within viewports, even if they are\n out of view.\n\n:param columns: (java.lang.String...) - the columns to keep subscribed\n:return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "areSavedLayoutsAllowed": "Check if saved layouts should be allowed.\n\n:return: (boolean) if saved layouts are allowed",
  "atEnd": "Indicate the specified columns should appear as the last N columns of the table when displayed.\n\n*Overload 1*  \n  :param cols: java.lang.String...\n  :return: io.deephaven.db.tables.utils.LayoutHintBuilder\n  \n*Overload 2*  \n  :param cols: (java.util.Collection<java.lang.String>) - the columns to show at the back\n  :return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "atFront": "Indicate the specified columns should appear as the first N columns of the table when displayed.\n\n*Overload 1*  \n  :param cols: java.lang.String...\n  :return: io.deephaven.db.tables.utils.LayoutHintBuilder\n  \n*Overload 2*  \n  :param cols: (java.util.Collection<java.lang.String>) - the columns to show at front\n  :return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "autoFilter": "Indicate the specified columns should be configured as AutoFilter columns\n\n*Overload 1*  \n  :param cols: java.lang.String...\n  :return: io.deephaven.db.tables.utils.LayoutHintBuilder\n  \n*Overload 2*  \n  :param cols: (java.util.Collection<java.lang.String>) - the columns to enable as AutoFilter columns\n  :return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "autoFilterFetchSize": "Set the default initial number of rows to fetch for columns that have been marked as\n AutoFilter columns.\n\n:param col: (java.lang.String) - the column to set the fetch size for\n:param size: (int) - the number of rows to fetch initially\n:return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "build": "Create an appropriate parameter string suitable for use with\n Table.layoutHints(String).\n\n:return: (java.lang.String) this LayoutHintBuilder as a string",
  "freeze": "Indicate the specified columns should be frozen (displayed as the first N, unmovable columns) upon display.\n\n*Overload 1*  \n  :param cols: java.lang.String...\n  :return: io.deephaven.db.tables.utils.LayoutHintBuilder\n  \n*Overload 2*  \n  :param cols: (java.util.Collection<java.lang.String>) - the columns to freeze\n  :return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "fromString": "Create a LayoutHintBuilder from the specified parameter string.\n\n:param attrs: (java.lang.String) - the parameter string\n:return: (io.deephaven.db.tables.utils.LayoutHintBuilder) a LayoutHintBuilder for the input parameter string",
  "get": "Create a new LayoutHintBuilder.\n\n:return: (io.deephaven.db.tables.utils.LayoutHintBuilder) a new LayoutHintBuilder",
  "getAlwaysSubscribedCols": "Get the set of columns that should always remain subscribed.\n\n:return: (java.util.Set<java.lang.String>) the set of columns to be subscribed.",
  "getAutoFilterCols": "Get the set of columns that should be enabled for AutoFilter.\n\n:return: (java.util.Set<java.lang.String>) the set of columns enabled for AutoFilter",
  "getAutoFilterFetchSize": "Get the number of rows to fetch in the initial AutoFilter data fetch.\n\n:param column: (java.lang.String) - the column to set the fetch size for\n:return: (int) the number of rows to fetch initially",
  "getBackCols": "Get the ordered set of columns that should be displayed as the last N columns.\n\n:return: (java.util.Set<java.lang.String>) an ordfered set of columns to display at the end.",
  "getFreezeCols": "Get the ordered set of columns that should be frozen.\n\n:return: (java.util.Set<java.lang.String>) the ordered set of columns that should be frozen",
  "getFrontCols": "Get the ordered set of columns that should be displayed up front.\n\n:return: (java.util.Set<java.lang.String>) an ordered set of columns to display up as the first N columns",
  "getGroupableColumns": "Get the set of columns allowed to participate in UI-driven rollups.\n\n:return: (java.util.Set<java.lang.String>) the set of columns",
  "getHiddenCols": "Get the set of columns that should be hidden by default.\n\n:return: (java.util.Set<java.lang.String>) the set of columns that should be hidden",
  "groupableColumns": "Set the columns which are allowed to be used as UI-driven rollup columns.\n\n*Overload 1*  \n  :param columns: (java.lang.String...) - the columns.\n  :return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder\n  \n*Overload 2*  \n  :param columns: (java.util.Collection<java.lang.String>) - the columns.\n  :return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "hide": "Indicate the specified columns should be hidden by default.\n\n*Overload 1*  \n  :param cols: java.lang.String...\n  :return: io.deephaven.db.tables.utils.LayoutHintBuilder\n  \n*Overload 2*  \n  :param cols: (java.util.Collection<java.lang.String>) - the columns to initially hide\n  :return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder",
  "savedLayouts": "Enable or disable saved layouts for the specified table.\n\n:param allowed: (boolean) - if layout saving is enabled\n:return: (io.deephaven.db.tables.utils.LayoutHintBuilder) this LayoutHintBuilder"
 },
 "path": "io.deephaven.db.tables.utils.LayoutHintBuilder",
 "text": "The builder class for use in assembling layout hints suitable for use with\n Table.layoutHints(LayoutHintBuilder) or\n Table.layoutHints(String).",
 "typeName": "class"
}