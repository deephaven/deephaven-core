{
 "className": "io.deephaven.db.tables.DataColumn",
 "methods": {
  "get": "**Incompatible overloads text - text from the first overload:**\n\nReturn the column's values for the specified row range.  Note that this will be a boxed array, for data columns\n of primitive types.\n\n*Overload 1*  \n  :param index: (long) - - the index of the row for which the data is being retrieved\n  :return: (DataColumn.TYPE) the value in the column at the row designated by the index\n  \n*Overload 2*  \n  :param startIndexInclusive: (long) - The first position in the data column to include, inclusive\n  :param endIndexExclusive: (long) - One more than the last position in the data column to include\n  :return: (DataColumn.TYPE[]) Return the column's values for the specified row range\n  \n*Overload 3*  \n  :param indexes: (long...) - The row indexes to fetch\n  :return: (DataColumn.TYPE[]) Return the column's values for the specified rows\n  \n*Overload 4*  \n  :param indexes: (int...) - The row indexes to fetch\n  :return: (DataColumn.TYPE[]) Return the column's values for the specified rows",
  "getBoolean": ":param index: long\n:return: java.lang.Boolean",
  "getBooleans": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: java.lang.Boolean[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: java.lang.Boolean[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: java.lang.Boolean[]",
  "getByte": ":param index: long\n:return: byte",
  "getBytes": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: byte[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: byte[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: byte[]",
  "getChar": ":param index: long\n:return: char",
  "getChars": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: char[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: char[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: char[]",
  "getComponentType": "Get the array component type, or the type itself.\n For basic types, this is just the type.  For example, if you have a column of java.lang.String, this also returns\n java.lang.String.  For array types (java Arrays), or DbArray (which would be returned by getType), you get the\n type that is contained within the array.  For example, if a single row in this column contains a DbDoubleArray,\n getComponentType returns double.\n\n:return: (java.lang.Class) if type is an array, the type of object within the array. Otherwise type itself.",
  "getDirect": "**Incompatible overloads text - text from the first overload:**\n\nGet the contents of a range of this data column in array form. See getDirect() for an explanation\n of return types. Note that it's required that endIndexExclusive - startIndexInclusive < Integer.MAX_VALUE.\n\n*Overload 1*  \n  :return: (java.lang.Object) An appropriately-typed array containing the full contents of this data column\n  \n*Overload 2*  \n  :param startIndexInclusive: (long) - The first position in the data column to include, inclusive\n  :param endIndexExclusive: (long) - One more than the last position in the data column to include\n  :return: (java.lang.Object) An appropriately-typed array containing the contents of the specified range of this data column\n  \n*Overload 3*  \n  :param indexes: long...\n  :return: java.lang.Object\n  \n*Overload 4*  \n  :param indexes: int...\n  :return: java.lang.Object",
  "getDouble": ":param index: long\n:return: double",
  "getDoubles": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: double[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: double[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: double[]",
  "getFloat": ":param index: long\n:return: float",
  "getFloats": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: float[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: float[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: float[]",
  "getInt": ":param index: long\n:return: int",
  "getInts": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: int[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: int[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: int[]",
  "getLong": ":param index: long\n:return: long",
  "getLongs": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: long[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: long[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: long[]",
  "getName": ":return: java.lang.String",
  "getShort": ":param index: long\n:return: short",
  "getShorts": "*Overload 1*  \n  :param startIndexInclusive: long\n  :param endIndexExclusive: long\n  :return: short[]\n  \n*Overload 2*  \n  :param indexes: long...\n  :return: short[]\n  \n*Overload 3*  \n  :param indexes: int...\n  :return: short[]",
  "getType": ":return: (java.lang.Class) the type of object contained within this column.",
  "set": ":param index: long\n:param value: DataColumn.TYPE",
  "setArray": ":param startIndex: long\n:param values: DataColumn.TYPE...",
  "setBoolean": ":param index: long\n:param value: java.lang.Boolean",
  "setBooleans": ":param startIndex: long\n:param values: java.lang.Boolean...",
  "setByte": ":param index: long\n:param value: byte",
  "setBytes": ":param startIndex: long\n:param values: byte...",
  "setChar": ":param index: long\n:param value: char",
  "setChars": ":param startIndex: long\n:param values: char...",
  "setDirect": ":param startIndex: long\n:param array: java.lang.Object",
  "setDouble": ":param index: long\n:param value: double",
  "setDoubles": ":param startIndex: long\n:param values: double...",
  "setFloat": ":param index: long\n:param value: float",
  "setFloats": ":param startIndex: long\n:param values: float...",
  "setInt": ":param index: long\n:param value: int",
  "setInts": ":param startIndex: long\n:param values: int...",
  "setLong": ":param index: long\n:param value: long",
  "setLongs": ":param startIndex: long\n:param values: long...",
  "setShort": ":param index: long\n:param value: short",
  "setShorts": ":param startIndex: long\n:param values: short..."
 },
 "path": "io.deephaven.db.tables.DataColumn",
 "text": "Interface for positional column access to a Deephaven table column.",
 "typeName": "interface"
}