{
 "className": "io.deephaven.db.tables.utils.QueryPerformanceNugget",
 "methods": {
  "abort": ":param recorder: io.deephaven.db.tables.utils.QueryPerformanceRecorder\n:return: boolean",
  "close": "AutoCloseable implementation - wraps the no-argument version of done() used by query code outside of the\n QueryPerformance(Recorder/Nugget), reporting successful completion to the thread-local QueryPerformanceRecorder\n instance.",
  "done": "Mark this nugget QueryState.FINISHED and notify the recorder.\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param recorder: (io.deephaven.db.tables.utils.QueryPerformanceRecorder) - The recorder to notify\n  :return: (boolean) if the nugget passes logging thresholds.",
  "getAllocatedBytes": "Get bytes of allocated memory attributed to the instrumented operation.\n\n:return: (long) The bytes of allocated memory attributed to the instrumented operation, or\n         QueryConstants.NULL_LONG if not enabled/supported.",
  "getCallerLine": ":return: java.lang.String",
  "getCpuNanos": "Get nanoseconds of CPU time attributed to the instrumented operation.\n\n:return: (long) The nanoseconds of CPU time attributed to the instrumented operation, or QueryConstants.NULL_LONG\n         if not enabled/supported.",
  "getDepth": ":return: int",
  "getDiffFreeMemory": ":return: (long) free memory difference between time of completion and creation",
  "getDiffTotalMemory": ":return: (long) total (allocated high water mark) memory difference between time of completion and creation",
  "getEndFreeMemory": ":return: (long) free memory at completion",
  "getEndTotalMemory": ":return: (long) total memory used at completion",
  "getEvaluationNumber": ":return: int",
  "getInputSize": ":return: long",
  "getName": ":return: java.lang.String",
  "getPoolAllocatedBytes": "Get bytes of allocated pooled/reusable memory attributed to the instrumented operation.\n\n:return: (long) The bytes of allocated pooled/reusable memory attributed to the instrumented operation, or\n         QueryConstants.NULL_LONG if not enabled/supported.",
  "getStartClockTime": ":return: (long) wall clock time in milliseconds from the epoch",
  "getTotalTimeNanos": ":return: (java.lang.Long) nanoseconds elapsed, once state != QueryState.RUNNING() has been called.",
  "getUserCpuNanos": "Get nanoseconds of user mode CPU time attributed to the instrumented operation.\n\n:return: (long) The nanoseconds of user mode CPU time attributed to the instrumented operation, or\n         QueryConstants.NULL_LONG if not enabled/supported.",
  "isTopLevel": ":return: boolean",
  "isUser": ":return: boolean",
  "setShouldLogMeAndStackParents": "Ensure this nugget gets logged, alongside its stack of nesting operations.",
  "shouldLogMenAndStackParents": ":return: (boolean) true if this nugget triggers the logging of itself and every other nugget in its stack of nesting\n         operations.",
  "toString": ":return: java.lang.String",
  "wasInterrupted": ":return: (boolean) true if this nugget was interrupted by an abort() call."
 },
 "path": "io.deephaven.db.tables.utils.QueryPerformanceNugget",
 "text": "Per-operation instrumentation node for hierarchical performance recording. Note that this class has an unusually\n intimate relationship with another class, QueryPerformanceRecorder. Changes to either should take this lack\n of encapsulation into account.",
 "typeName": "class"
}