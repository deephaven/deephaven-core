{
 "className": "io.deephaven.db.tables.utils.TableTools",
 "methods": {
  "base64Fingerprint": "Compute the SHA256 hash of the input table and return it in base64 string format.\n\n:param source: (io.deephaven.db.tables.Table) - The table to fingerprint\n:return: (java.lang.String) The SHA256 hash of the table data and TableDefinition",
  "byteCol": "Returns a ColumnHolder of type byte that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (byte...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "charCol": "Returns a ColumnHolder of type char that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (char...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "col": "Returns a ColumnHolder that can be used when creating in-memory tables.\n\nNote: Java generics information - <T>\n\n:param name: (java.lang.String) - name of the column\n:param data: (T...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "colSource": "**Incompatible overloads text - text from the first overload:**\n\nCreates an  in-memory column of type byte for a collection of values.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param clazz: (java.lang.Class<T>) - the class to use for the new column\n  :param values: (java.util.Collection<T>) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<T>) a Deephaven ColumnSource object\n  \n*Overload 2*  \n  :param values: (long...) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<java.lang.Long>) a Deephaven ColumnSource object\n  \n*Overload 3*  \n  :param values: (int...) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<java.lang.Integer>) a Deephaven ColumnSource object\n  \n*Overload 4*  \n  :param values: (short...) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<java.lang.Short>) a Deephaven ColumnSource object\n  \n*Overload 5*  \n  :param values: (byte...) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<java.lang.Byte>) a Deephaven ColumnSource object\n  \n*Overload 6*  \n  :param values: (char...) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<java.lang.Character>) a Deephaven ColumnSource object\n  \n*Overload 7*  \n  :param values: (double...) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<java.lang.Double>) a Deephaven ColumnSource object\n  \n*Overload 8*  \n  :param values: (float...) - a collection of values to populate the new column\n  :return: (io.deephaven.db.v2.sources.ColumnSource<java.lang.Float>) a Deephaven ColumnSource object",
  "computeFingerprint": "Compute the SHA256 hash of the input table.\nThe hash is computed using every value in each row, using toString for unrecognized objects.\n The hash also includes the input table definition column names and types.\n \n\n:param source: (io.deephaven.db.tables.Table) - The table to fingerprint\n:return: (byte[]) The SHA256 hash of the table data and TableDefinition",
  "dateTimeCol": "Returns a ColumnHolder of type DBDateTime that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (io.deephaven.db.tables.utils.DBDateTime...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "diff": "Computes the difference of two tables for use in verification.\n\n*Overload 1*  \n  :param actualResult: (io.deephaven.db.tables.Table) - first Deephaven table object to compare\n  :param expectedResult: (io.deephaven.db.tables.Table) - second Deephaven table object to compare\n  :param maxDiffLines: (long) - stop comparing after this many differences are found\n  :return: (java.lang.String) String report of the detected differences\n  \n*Overload 2*  \n  :param actualResult: (io.deephaven.db.tables.Table) - first Deephaven table object to compare\n  :param expectedResult: (io.deephaven.db.tables.Table) - second Deephaven table object to compare\n  :param maxDiffLines: (long) - stop comparing after this many differences are found\n  :param itemsToSkip: (java.util.EnumSet<io.deephaven.db.tables.utils.TableDiff.DiffItems>) - EnumSet of checks not to perform, such as checking column order, or exact match of double values\n  :return: (java.lang.String) String report of the detected differences",
  "diffPair": "Computes the difference of two tables for use in verification.\n\n:param actualResult: (io.deephaven.db.tables.Table) - first Deephaven table object to compare\n:param expectedResult: (io.deephaven.db.tables.Table) - second Deephaven table object to compare\n:param maxDiffLines: (long) - stop comparing after this many differences are found\n:param itemsToSkip: (java.util.EnumSet<io.deephaven.db.tables.utils.TableDiff.DiffItems>) - EnumSet of checks not to perform, such as checking column order, or exact match of double values\n:return: (io.deephaven.base.Pair<java.lang.String,java.lang.Long>) a pair of String report of the detected differences, and the first different row (0 if there are no different data values)",
  "doubleCol": "Returns a ColumnHolder of type double that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (double...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "emptyTable": "Returns a new, empty Deephaven Table.\n\n:param size: (long) - the number of rows to allocate space for\n:return: (io.deephaven.db.tables.Table) a Deephaven Table with no columns.",
  "floatCol": "Returns a ColumnHolder of type float that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (float...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "getKey": "Returns a SmartKey for the specified row from a set of ColumnSources.\n\n:param groupByColumnSources: (io.deephaven.db.v2.sources.ColumnSource[]) - a set of ColumnSources from which to retrieve the data\n:param row: (long) - the row number for which to retrieve data\n:return: (java.lang.Object) a Deephaven SmartKey object",
  "getPrevKey": "Returns a SmartKey for the row previous to the specified row from a set of ColumnSources.\n\n:param groupByColumnSources: (io.deephaven.db.v2.sources.ColumnSource[]) - a set of ColumnSources from which to retrieve the data\n:param row: (long) - the row number for which to retrieve the previous row's data\n:return: (java.lang.Object) a Deephaven SmartKey object",
  "html": "Returns a printout of a table formatted as HTML. Limit use to small tables to avoid running out of memory.\n\n:param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n:return: (java.lang.String) a String of the table printout formatted as HTML",
  "intCol": "Returns a ColumnHolder of type int that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (int...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "longCol": "Returns a ColumnHolder of type long that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (long...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "merge": "Concatenates multiple Deephaven Tables into a single Table.\n\n The resultant table will have rows from the same table together, in the order they\n are specified as inputs.\nWhen ticking tables grow, they may run out of the 'pre-allocated' space for newly added rows. When more key-\n space is needed, tables in higher key-space are shifted to yet higher key-space to make room for new rows. Shifts\n are handled efficiently, but some downstream operations generate a linear O(n) amount of work per shifted row. When\n possible, one should favor ordering the constituent tables first by static/non-ticking sources followed by tables\n that are expected to grow at slower rates, and finally by tables that grow without bound.\n\n*Overload 1*  \n  :param theList: (java.util.List<io.deephaven.db.tables.Table>) - a List of Tables to be concatenated\n  :return: (io.deephaven.db.tables.Table) a Deephaven table object\n  \n*Overload 2*  \n  :param tables: (java.util.Collection<io.deephaven.db.tables.Table>) - a Collection of Tables to be concatenated\n  :return: (io.deephaven.db.tables.Table) a Deephaven table object\n  \n*Overload 3*  \n  :param tables: (io.deephaven.db.tables.Table...) - a list of Tables to be concatenated\n  :return: (io.deephaven.db.tables.Table) a Deephaven table object",
  "mergeSorted": "Concatenates multiple sorted Deephaven Tables into a single Table sorted by the specified key column.\n \n The input tables must each individually be sorted by keyColumn, otherwise results are undefined.\n\n*Overload 1*  \n  :param keyColumn: (java.lang.String) - the column to use when sorting the concatenated results\n  :param tables: (io.deephaven.db.tables.Table...) - sorted Tables to be concatenated\n  :return: (io.deephaven.db.tables.Table) a Deephaven table object\n  \n*Overload 2*  \n  :param keyColumn: (java.lang.String) - the column to use when sorting the concatenated results\n  :param tables: (java.util.Collection<io.deephaven.db.tables.Table>) - a Collection of sorted Tables to be concatenated\n  :return: (io.deephaven.db.tables.Table) a Deephaven table object",
  "newTable": "Creates a new DynamicTable.\n\n*Overload 1*  \n  :param size: (long) - the number of rows to allocate\n  :param names: (java.util.List<java.lang.String>) - a List of column names\n  :param columnSources: (java.util.List<io.deephaven.db.v2.sources.ColumnSource>) - a List of the ColumnSource(s)\n  :return: (io.deephaven.db.v2.DynamicTable) a Deephaven DynamicTable\n  \n*Overload 2*  \n  :param size: (long) - the number of rows to allocate\n  :param columns: (java.util.Map<java.lang.String,io.deephaven.db.v2.sources.ColumnSource>) - a Map of column names and ColumnSources\n  :return: (io.deephaven.db.v2.DynamicTable) a Deephaven DynamicTable\n  \n*Overload 3*  \n  :param definition: (io.deephaven.db.tables.TableDefinition) - the TableDefinition (column names and properties) to use for the new table\n  :return: (io.deephaven.db.v2.DynamicTable) an empty Deephaven DynamicTable object\n  \n*Overload 4*  \n  :param columnHolders: (io.deephaven.db.v2.utils.ColumnHolder...) - a list of ColumnHolders from which to create the table\n  :return: (io.deephaven.db.v2.DynamicTable) a Deephaven DynamicTable\n  \n*Overload 5*  \n  :param definition: io.deephaven.db.tables.TableDefinition\n  :param columnHolders: io.deephaven.db.v2.utils.ColumnHolder...\n  :return: io.deephaven.db.v2.DynamicTable",
  "nullTypeAsString": ":param dataType: java.lang.Class<?>\n:return: java.lang.String",
  "objColSource": "Creates an in-memory column of the specified type for a collection of values\n\nNote: Java generics information - <T>\n\n:param values: (T...) - a collection of values to populate the new column\n:return: (io.deephaven.db.v2.sources.ColumnSource) a Deephaven ColumnSource object",
  "readCsv": "Returns a memory table created from importing CSV data. The first row must be column names. Column data types are inferred from the data.\n\n*Overload 1*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :return: (io.deephaven.db.v2.DynamicTable) a Deephaven DynamicTable object\n  \n*Overload 2*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param separator: (char) - a char to use as the delimiter value when parsing the file.\n  :return: (io.deephaven.db.v2.DynamicTable) a Deephaven DynamicTable object\n  \n*Overload 3*  \n  :param filePath: (java.lang.String) - the fully-qualified path to a CSV file to be read.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 4*  \n  :param filePath: (java.lang.String) - the fully-qualified path to a CSV file to be read.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to use as a delimiter.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 5*  \n  :param filePath: (java.lang.String) - the fully-qualified path to a CSV file to be read.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to use as a delimiter.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar. If passed explicitly as null, a StatusCallback instance will be created to log progress to the current logger.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 6*  \n  :param file: (java.io.File) - a file object providing access to the CSV file to be read.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 7*  \n  :param file: (java.io.File) - a file object providing access to the CSV file to be read.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar.\n                   If passed explicitly as null, a StatusCallback instance will be created to log progress to the current logger.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 8*  \n  :param file: (java.io.File) - a file object providing access to the CSV file to be read.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to use as a delimiter.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar.\n                   If passed explicitly as null, a StatusCallback instance will be created to log progress to the current logger.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object",
  "readHeaderlessCsv": "Returns a memory table created from importing CSV data. Column data types are inferred from the data.\n\n*Overload 1*  \n  :param filePath: (java.lang.String) - the fully-qualified path to a CSV file to be read.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 2*  \n  :param filePath: (java.lang.String) - the fully-qualified path to a CSV file to be read.\n  :param header: (java.util.Collection<java.lang.String>) - Column names to use for the resultant table.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 3*  \n  :param filePath: (java.lang.String) - the fully-qualified path to a CSV file to be read.\n  :param header: (java.lang.String...) - Column names to use for the resultant table.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 4*  \n  :param filePath: (java.lang.String) - the fully-qualified path to a CSV file to be read.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to use as a delimiter.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar. If passed explicitly as null, a StatusCallback instance will be created to log progress to the current logger.\n  :param header: (java.util.Collection<java.lang.String>) - Column names to use for the resultant table.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object\n  \n*Overload 5*  \n  :param file: (java.io.File) - a file object providing access to the CSV file to be read.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to use as a delimiter.\n  :param progress: (io.deephaven.util.progress.StatusCallback) - a StatusCallback object that can be used to log progress details or update a progress bar.\n                   If passed explicitly as null, a StatusCallback instance will be created to log progress to the current logger.\n  :param header: (java.util.Collection<java.lang.String>) - Column names to use for the resultant table, or null if column names should be automatically generated.\n  :return: (io.deephaven.db.tables.Table) a Deephaven Table object",
  "roundDecimalColumns": "Produce a new table with all the columns of this table, in the same order, but with double and\n float columns rounded to longs.\n\n*Overload 1*  \n  :param table: io.deephaven.db.tables.Table\n  :return: (io.deephaven.db.tables.Table) The new Table, with all double and float columns rounded to longs.\n  \n*Overload 2*  \n  :param table: io.deephaven.db.tables.Table\n  :param columns: (java.lang.String...) - The names of the double and float columns to round.\n  :return: (io.deephaven.db.tables.Table) The new Table, with the specified columns rounded to longs.",
  "roundDecimalColumnsExcept": "Produce a new table with all the columns of this table, in the same order, but with all double and\n float columns rounded to longs, except for the specified columnsNotToRound.\n\n:param table: io.deephaven.db.tables.Table\n:param columnsNotToRound: (java.lang.String...) - The names of the double and float columns not to round to longs\n:return: (io.deephaven.db.tables.Table) The new Table, with columns modified as explained above",
  "shortCol": "Returns a ColumnHolder of type short that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (short...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "show": "Prints the first few rows of a table to standard output.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 3*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param maxRowCount: (long) - the number of rows to return\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 4*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param maxRowCount: (long) - the number of rows to return\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 5*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param maxRowCount: (long) - the number of rows to return\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param out: (java.io.PrintStream) - a PrintStream destination to which to print the data\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 6*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param maxRowCount: (long) - the number of rows to return\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param delimiter: (java.lang.String) - a String value to use between printed values\n  :param out: (java.io.PrintStream) - a PrintStream destination to which to print the data\n  :param showIndex: (boolean) - a boolean indicating whether to also print index details\n  :param columns: (java.lang.String...) - varargs of column names to display",
  "showCommaDelimited": "Prints the first few rows of a table to standard output, with commas between values.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param maxRowCount: (long) - the number of rows to return\n  :param columns: (java.lang.String...) - varargs of column names to display",
  "showWithIndex": "Prints the first few rows of a table to standard output, and also prints the details of the index and record positions that provided the values.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param maxRowCount: (long) - the number of rows to return\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 3*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param maxRowCount: (long) - the number of rows to return\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param out: (java.io.PrintStream) - a PrintStream destination to which to print the data\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 4*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param firstRow: (long) - the firstRow to display\n  :param lastRow: (long) - the lastRow (exclusive) to display\n  :param out: (java.io.PrintStream) - a PrintStream destination to which to print the data\n  :param columns: (java.lang.String...) - varargs of column names to display\n  \n*Overload 5*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param firstRow: (long) - the firstRow to display\n  :param lastRow: (long) - the lastRow (exclusive) to display\n  :param columns: (java.lang.String...) - varargs of column names to display",
  "string": "Returns the first few rows of a table as a pipe-delimited string.\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param columns: (java.lang.String...) - varargs of columns to include in the result\n  :return: (java.lang.String) a String\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param size: (int) - the number of rows to return\n  :param columns: (java.lang.String...) - varargs of columns to include in the result\n  :return: (java.lang.String) a String\n  \n*Overload 3*  \n  :param t: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param columns: (java.lang.String...) - varargs of columns to include in the result\n  :return: (java.lang.String) a String\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.tables.Table) - a Deephaven table object\n  :param size: (int) - the number of rows to return\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param columns: (java.lang.String...) - varargs of columns to include in the result\n  :return: (java.lang.String) a String",
  "stringCol": "Returns a ColumnHolder of type String that can be used when creating in-memory tables.\n\n:param name: (java.lang.String) - name of the column\n:param data: (java.lang.String...) - a list of values for the column\n:return: (io.deephaven.db.v2.utils.ColumnHolder) a Deephaven ColumnHolder object",
  "timeTable": "Creates a table that adds a new row on a regular interval.\n\n*Overload 1*  \n  :param period: (java.lang.String) - time interval between new row additions.\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 2*  \n  :param period: (java.lang.String) - time interval between new row additions\n  :param replayer: (io.deephaven.db.v2.replay.ReplayerInterface) - data replayer\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 3*  \n  :param startTime: (io.deephaven.db.tables.utils.DBDateTime) - start time for adding new rows\n  :param period: (java.lang.String) - time interval between new row additions\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 4*  \n  :param startTime: (io.deephaven.db.tables.utils.DBDateTime) - start time for adding new rows\n  :param period: (java.lang.String) - time interval between new row additions\n  :param replayer: (io.deephaven.db.v2.replay.ReplayerInterface) - data replayer\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 5*  \n  :param startTime: (java.lang.String) - start time for adding new rows\n  :param period: (java.lang.String) - time interval between new row additions\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 6*  \n  :param startTime: (java.lang.String) - start time for adding new rows\n  :param period: (java.lang.String) - time interval between new row additions\n  :param replayer: (io.deephaven.db.v2.replay.ReplayerInterface) - data replayer\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 7*  \n  :param periodNanos: (long) - time interval between new row additions in nanoseconds.\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 8*  \n  :param periodNanos: (long) - time interval between new row additions in nanoseconds.\n  :param replayer: (io.deephaven.db.v2.replay.ReplayerInterface) - data replayer\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 9*  \n  :param startTime: (io.deephaven.db.tables.utils.DBDateTime) - start time for adding new rows\n  :param periodNanos: (long) - time interval between new row additions in nanoseconds.\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 10*  \n  :param startTime: (io.deephaven.db.tables.utils.DBDateTime) - start time for adding new rows\n  :param periodNanos: (long) - time interval between new row additions in nanoseconds.\n  :param replayer: (io.deephaven.db.v2.replay.ReplayerInterface) - data replayer\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 11*  \n  :param startTime: (java.lang.String) - start time for adding new rows\n  :param periodNanos: (long) - time interval between new row additions in nanoseconds.\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 12*  \n  :param startTime: (java.lang.String) - start time for adding new rows\n  :param periodNanos: (long) - time interval between new row additions in nanoseconds.\n  :param replayer: (io.deephaven.db.v2.replay.ReplayerInterface) - data replayer\n  :return: (io.deephaven.db.tables.Table) time table\n  \n*Overload 13*  \n  :param timeProvider: (io.deephaven.db.v2.utils.TimeProvider) - the time provider\n  :param startTime: (io.deephaven.db.tables.utils.DBDateTime) - start time for adding new rows\n  :param periodNanos: (long) - time interval between new row additions in nanoseconds.\n  :return: (io.deephaven.db.tables.Table) time table",
  "writeCsv": "Writes a DB table out as a CSV.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 3*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 4*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 5*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.PrintStream) - the stream to write to\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 6*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param out: (java.io.PrintStream) - the stream to write to\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 7*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 8*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 9*  \n  :param source: (io.deephaven.db.tables.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 10*  \n  :param sources: (io.deephaven.db.tables.Table[]) - an array of Deephaven table objects to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param tableSeparator: (java.lang.String) - a String (normally a single character) to be used as the table delimiter\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 11*  \n  :param sources: (io.deephaven.db.tables.Table[]) - an array of Deephaven table objects to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param tableSeparator: (java.lang.String) - a String (normally a single character) to be used as the table delimiter\n  :param nullsAsEmpty: boolean\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 12*  \n  :param sources: (io.deephaven.db.tables.Table[]) - an array of Deephaven table objects to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param timeZone: (io.deephaven.db.tables.utils.DBTimeZone) - a DBTimeZone constant relative to which DBDateTime data should be adjusted\n  :param tableSeparator: (java.lang.String) - a String (normally a single character) to be used as the table delimiter\n  :param fieldSeparator: (char) - the delimiter for the CSV files\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export"
 },
 "path": "io.deephaven.db.tables.utils.TableTools",
 "text": "Tools for working with tables.  This includes methods to examine tables, combine them, convert them to and from CSV files,\n and create and manipulate columns.",
 "typeName": "class"
}