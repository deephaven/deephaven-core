{
 "className": "io.deephaven.db.tables.verify.SortedAssertionInstrumentedListenerAdapter",
 "methods": {
  "doCheckStatic": ":param toProcess: io.deephaven.db.v2.utils.Index\n:param parentColumnSource: io.deephaven.db.v2.sources.ColumnSource<?>\n:param sortCheck: io.deephaven.db.v2.sortcheck.SortCheck\n:param description: java.lang.String\n:param column: java.lang.String\n:param order: io.deephaven.db.tables.SortingOrder",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.",
  "onUpdate": "Process notification of table changes.\n\n:param upstream: (io.deephaven.db.v2.ShiftAwareListener.Update) - The set of upstream table updates.",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: (io.deephaven.db.util.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.tables.verify.SortedAssertionInstrumentedListenerAdapter",
 "typeName": "class"
}