{
 "className": "io.deephaven.db.tables.verify.TableAssertions",
 "methods": {
  "assertAppendOnly": "Asserts that the table is append-only. If its rows are ever modified or removed, the query will crash.\n \n This can be used to ensure the safety and stability of stateful operations.\n\n*Overload 1*  \n  :param table: (io.deephaven.db.tables.Table) - The table to apply the assertion to\n  :return: (io.deephaven.db.tables.Table) The provided table.\n  \n*Overload 2*  \n  :param description: (java.lang.String) - An optional description which will be included in the exception message if the assertion is\n          violated.\n  :param table: (io.deephaven.db.tables.Table) - The table to apply the assertion to\n  :return: (io.deephaven.db.tables.Table) The provided table.",
  "assertSorted": "Asserts that the table is sorted by the given column.\n\n This allows range filters to utilize binary search instead of a linear scan of the table for the given column.\n\n*Overload 1*  \n  :param table: (io.deephaven.db.tables.Table) - The table to apply the assertion to\n  :param column: (java.lang.String) - The column that the table is sorted by.\n  :param order: (io.deephaven.db.tables.SortingOrder) - Whether the column is ascending or descending.\n  :return: (io.deephaven.db.tables.Table) The provided table.\n  \n*Overload 2*  \n  :param description: (java.lang.String) - An optional description which will be included in the exception message if the assertion is\n          violated.\n  :param table: (io.deephaven.db.tables.Table) - The table to apply the assertion to\n  :param column: (java.lang.String) - The column that the table is sorted by.\n  :param order: (io.deephaven.db.tables.SortingOrder) - Whether the column is ascending or descending.\n  :return: (io.deephaven.db.tables.Table) The provided table."
 },
 "path": "io.deephaven.db.tables.verify.TableAssertions",
 "text": "Assert properties of a table.\n\n The table assertions verify that a table meets certain properties. Presently, that the table is add only and that it\n is sorted by a particular column. The desired property is verified on the initial table, and if the table is\n refreshing then a listener is attached to ensure that the property remains true.\n\n The returned table may have attributes set which allow the query engine to more efficiently perform downstream\n operations.",
 "typeName": "class"
}