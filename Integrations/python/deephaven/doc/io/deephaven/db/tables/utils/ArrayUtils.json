{
 "className": "io.deephaven.db.tables.utils.ArrayUtils",
 "methods": {
  "booleanNullArray": ":param size: int\n:return: java.lang.Boolean[]",
  "boxedToPrimitive": ":param objects: java.util.Set<?>\n:param type: java.lang.Class\n:return: java.lang.Object",
  "byteNullArray": ":param size: int\n:return: byte[]",
  "charNullArray": ":param size: int\n:return: char[]",
  "createArrayAccessor": ":param element: java.lang.Object\n:param size: int\n:return: io.deephaven.db.tables.utils.ArrayUtils.ArrayAccessor",
  "doubleNullArray": ":param size: int\n:return: double[]",
  "equals": ":param actualValue: java.lang.Object\n:param expectedValue: java.lang.Object\n:return: boolean",
  "floatNullArray": ":param size: int\n:return: float[]",
  "getAccessorForElementType": ":param componentType: java.lang.Class\n:param size: int\n:return: io.deephaven.db.tables.utils.ArrayUtils.ArrayAccessor",
  "getArrayAccessor": ":param array: java.lang.Object\n:return: io.deephaven.db.tables.utils.ArrayUtils.ArrayAccessor",
  "getArrayAccessorFromArray": ":param arrayPrototype: java.lang.Object\n:param size: int\n:return: io.deephaven.db.tables.utils.ArrayUtils.ArrayAccessor",
  "getBoxedArray": "*Overload 1*  \n  :param referenceData: char[]\n  :return: java.lang.Character[]\n  \n*Overload 2*  \n  :param referenceData: boolean[]\n  :return: java.lang.Boolean[]\n  \n*Overload 3*  \n  :param referenceData: int[]\n  :return: java.lang.Integer[]\n  \n*Overload 4*  \n  :param referenceData: byte[]\n  :return: java.lang.Byte[]\n  \n*Overload 5*  \n  :param referenceData: double[]\n  :return: java.lang.Double[]\n  \n*Overload 6*  \n  :param referenceData: float[]\n  :return: java.lang.Float[]\n  \n*Overload 7*  \n  :param referenceData: long[]\n  :return: java.lang.Long[]\n  \n*Overload 8*  \n  :param referenceData: short[]\n  :return: java.lang.Short[]\n  \n*Overload 9*  \n  :param value: java.lang.Object\n  :return: java.lang.Object[]",
  "getDbArray": ":param dbArray: java.lang.Object\n:return: io.deephaven.db.tables.dbarrays.DbArray",
  "getUnboxedArray": "*Overload 1*  \n  :param value: java.lang.Object\n  :return: java.lang.Object\n  \n*Overload 2*  \n  :param boxedArray: java.lang.Byte[]\n  :return: byte[]\n  \n*Overload 3*  \n  :param boxedArray: java.lang.Character[]\n  :return: char[]\n  \n*Overload 4*  \n  :param boxedArray: java.lang.Double[]\n  :return: double[]\n  \n*Overload 5*  \n  :param boxedArray: java.lang.Float[]\n  :return: float[]\n  \n*Overload 6*  \n  :param boxedArray: java.lang.Integer[]\n  :return: int[]\n  \n*Overload 7*  \n  :param boxedArray: java.lang.Long[]\n  :return: long[]\n  \n*Overload 8*  \n  :param boxedArray: java.lang.Short[]\n  :return: short[]",
  "getUnboxedByteArray": ":param boxedArray: java.lang.Object[]\n:return: byte[]",
  "getUnboxedCharArray": ":param boxedArray: java.lang.Object[]\n:return: char[]",
  "getUnboxedDoubleArray": ":param boxedArray: java.lang.Object[]\n:return: double[]",
  "getUnboxedFloatArray": ":param boxedArray: java.lang.Object[]\n:return: float[]",
  "getUnboxedIntArray": ":param boxedArray: java.lang.Object[]\n:return: int[]",
  "getUnboxedLongArray": ":param boxedArray: java.lang.Object[]\n:return: long[]",
  "getUnboxedShortArray": ":param boxedArray: java.lang.Object[]\n:return: short[]",
  "intNullArray": ":param size: int\n:return: int[]",
  "longNullArray": ":param size: int\n:return: long[]",
  "nullSafeDbArrayToArray": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbArray<T>\n  :return: T[]\n  \n*Overload 2*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbBooleanArray\n  :return: java.lang.Boolean[]\n  \n*Overload 3*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbByteArray\n  :return: byte[]\n  \n*Overload 4*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbCharArray\n  :return: char[]\n  \n*Overload 5*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbDoubleArray\n  :return: double[]\n  \n*Overload 6*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbFloatArray\n  :return: float[]\n  \n*Overload 7*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbIntArray\n  :return: int[]\n  \n*Overload 8*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbLongArray\n  :return: long[]\n  \n*Overload 9*  \n  :param dbArray: io.deephaven.db.tables.dbarrays.DbShortArray\n  :return: short[]",
  "shortNullArray": ":param size: int\n:return: short[]",
  "toArray": "*Overload 1*  \n  :param objects: java.util.Collection<?>\n  :param elementType: java.lang.Class\n  :return: java.lang.Object\n  \n*Overload 2*  \n  :param objects: java.util.Collection<?>\n  :return: java.lang.Object",
  "toString": "*Overload 1*  \n  :param actualValue: java.lang.Object\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param a: boolean[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 3*  \n  :param a: byte[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 4*  \n  :param a: char[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 5*  \n  :param a: short[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 6*  \n  :param a: int[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 7*  \n  :param a: long[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 8*  \n  :param a: float[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 9*  \n  :param a: double[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String\n  \n*Overload 10*  \n  :param a: java.lang.Object[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String"
 },
 "path": "io.deephaven.db.tables.utils.ArrayUtils",
 "text": "Common utilities for interacting generically with arrays.",
 "typeName": "class"
}