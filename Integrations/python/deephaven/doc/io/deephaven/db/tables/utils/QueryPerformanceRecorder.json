{
 "className": "io.deephaven.db.tables.utils.QueryPerformanceRecorder",
 "methods": {
  "abortQuery": "Abort a query.",
  "clearCallsite": "Clear any previously set callsite.  See QueryPerformanceRecorder.setCallsite(String)",
  "endQuery": "End a query.\n\n:return: boolean",
  "getCallerLine": ":return: java.lang.String",
  "getInstance": ":return: io.deephaven.db.tables.utils.QueryPerformanceRecorder",
  "getNugget": "*Overload 1*  \n  :param name: (java.lang.String) - the nugget name\n  :return: (io.deephaven.db.tables.utils.QueryPerformanceNugget) A new QueryPerformanceNugget to encapsulate user query operations.  done() must be called on the nugget.\n  \n*Overload 2*  \n  :param name: (java.lang.String) - the nugget name\n  :param inputSize: (long) - the nugget's input size\n  :return: (io.deephaven.db.tables.utils.QueryPerformanceNugget) A new QueryPerformanceNugget to encapsulate user query operations.  done() must be called on the nugget.",
  "getOperationLevelPerformanceData": ":return: java.util.List<io.deephaven.db.tables.utils.QueryPerformanceNugget>",
  "getPoolAllocatedBytesForCurrentThread": "Get the total bytes of pool-allocated memory attributed to this thread via\n QueryPerformanceRecorder.recordPoolAllocation(Supplier).\n\n:return: (long) The total bytes of pool-allocated memory attributed to this thread.",
  "getQueryLevelPerformanceData": ":return: io.deephaven.db.tables.utils.QueryPerformanceNugget",
  "getState": "Return the query's current state\n\n:return: (io.deephaven.db.tables.utils.QueryState) the query's state or null if it isn't initialized yet",
  "getTimingResultsAsTable": ":return: io.deephaven.db.tables.Table",
  "recordPoolAllocation": "Record a single-threaded operation's allocations as \"pool\" allocated memory attributable to the current thread.\n\nNote: Java generics information - <RESULT_TYPE>\n\n:param operation: (java.util.function.Supplier<RESULT_TYPE>) - The operation to record allocation for\n:return: (RESULT_TYPE) The result of the operation.",
  "setCallsite": "**Incompatible overloads text - text from the first overload:**\n\nAttempt to compute and set the thread local callsite so that invocations of QueryPerformanceRecorder.getCallerLine()\n will not spend time trying to recompute.\nUsers should follow the best practice as described by QueryPerformanceRecorder.setCallsite(String)\n\n*Overload 1*  \n  :param callsite: (java.lang.String) - The call site to use.\n  :return: (boolean) true if successfully set, false otherwise/\n  \n*Overload 2*  \n  :return: (boolean) true if the callsite was computed and set.",
  "setQueryData": ":param setter: io.deephaven.db.tables.utils.QueryPerformanceRecorder.EntrySetter",
  "startQuery": "Start a query.\n\n:param description: (java.lang.String) - A description for the query.\n:return: (int) a unique evaluation number to identify this query execution.",
  "withNugget": "Surround the given code with a Performance Nugget\n\n*Overload 1*  \n  :param name: (java.lang.String) - the nugget name\n  :param r: (io.deephaven.base.Procedure.Nullary) - the stuff to run\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: (java.lang.String) - the nugget name\n  :param r: (java.util.function.Supplier<T>) - the stuff to run\n  :return: (T) the result of the stuff to run\n  \n*Overload 3*  \n  :param name: (java.lang.String) - the nugget name\n  :param inputSize: long\n  :param r: (io.deephaven.base.Procedure.Nullary) - the stuff to run\n  \n*Overload 4*  \n  Note: Java generics information - <T>\n  \n  :param name: (java.lang.String) - the nugget name\n  :param inputSize: long\n  :param r: (java.util.function.Supplier<T>) - the stuff to run\n  :return: (T) the result of the stuff to run",
  "withNuggetThrowing": "Surround the given code with a Performance Nugget\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Exception>\n  \n  :param name: java.lang.String\n  :param r: (io.deephaven.base.Procedure.ThrowingNullary<T>) - the stuff to run\n  \n*Overload 2*  \n  Note: Java generics information - <R,ExceptionType extends java.lang.Exception>\n  \n  :param name: (java.lang.String) - the nugget name\n  :param r: (io.deephaven.base.Function.ThrowingNullary<R,ExceptionType>) - the stuff to run\n  :return: (R) the result of the stuff to run\n  \n*Overload 3*  \n  Note: Java generics information - <T extends java.lang.Exception>\n  \n  :param name: java.lang.String\n  :param inputSize: long\n  :param r: (io.deephaven.base.Procedure.ThrowingNullary<T>) - the stuff to run\n  \n*Overload 4*  \n  Note: Java generics information - <R,ExceptionType extends java.lang.Exception>\n  \n  :param name: (java.lang.String) - the nugget name\n  :param inputSize: long\n  :param r: (io.deephaven.base.Function.ThrowingNullary<R,ExceptionType>) - the stuff to run\n  :return: (R) the result of the stuff to run"
 },
 "path": "io.deephaven.db.tables.utils.QueryPerformanceRecorder",
 "text": "Query performance instrumentation tools. Manages a hierarchy of QueryPerformanceNugget instances.\n \n Thread-safety note: This used to be thread-safe only by virtue of using a thread-local instance.\n                     Now it's aggressively synchronized so we can abort it from outside the \"owner\" thread.",
 "typeName": "class"
}