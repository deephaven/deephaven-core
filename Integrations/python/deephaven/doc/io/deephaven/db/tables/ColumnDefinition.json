{
 "className": "io.deephaven.db.tables.ColumnDefinition",
 "methods": {
  "clone": ":return: io.deephaven.db.tables.ColumnDefinition",
  "describeDifferences": "Enumerate the differences between this ColumnDefinition, and another one.\n Lines will be of the form \"lhs attribute 'value' does not match rhs attribute 'value'.\n\n:param differences: (java.util.List<java.lang.String>) - an array to which differences can be added\n:param other: (io.deephaven.db.tables.ColumnDefinition) - the ColumnDefinition under comparison\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:param prefix: (java.lang.String) - begin each difference with this string",
  "doingPersistentSerialization": ":return: boolean",
  "equals": ":param other: java.lang.Object\n:return: boolean",
  "getDataType": ":return: java.lang.Class<ColumnDefinition.TYPE>",
  "getEncodingInfo": "*Overload 1*  \n  :return: io.deephaven.base.string.EncodingInfo\n  \n*Overload 2*  \n  :param encoding: int\n  :return: io.deephaven.base.string.EncodingInfo",
  "getObjectCodecType": "Get the appropriate ObjectCodecType for this column definition.\n\n:return: (io.deephaven.db.tables.ColumnDefinition.ObjectCodecType) The StandardObjectCodec, or null if none is appropriate",
  "getSymbolTableType": ":return: io.deephaven.db.tables.ColumnDefinition.SymbolTableType",
  "isCompatible": "Compares two ColumnDefinitions somewhat more permissively than equals, disregarding matters of\n storage and derivation.\n\n:param other: (io.deephaven.db.tables.ColumnDefinition) - - The ColumnDefinition to compare to.\n:return: (boolean) True if the ColumnDefinition defines a column whose data is compatible with this ColumnDefinition.",
  "isDirect": ":return: boolean",
  "isFixedWidthObjectType": ":return: boolean",
  "isGrouping": ":return: boolean",
  "isPartitioning": ":return: boolean",
  "readExternal": ":param in: java.io.ObjectInput",
  "rename": ":param newName: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition",
  "writeExternal": ":param out: java.io.ObjectOutput"
 },
 "path": "io.deephaven.db.tables.ColumnDefinition",
 "text": "Column definition for all Deephaven columns.\n Adds non-stateful functionality to DefaultColumnDefinition.",
 "typeName": "class"
}