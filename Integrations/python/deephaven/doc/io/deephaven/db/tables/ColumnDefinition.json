{
 "className": "io.deephaven.db.tables.ColumnDefinition",
 "methods": {
  "clone": ":return: io.deephaven.db.tables.ColumnDefinition",
  "describeDifferences": "Enumerate the differences between this ColumnDefinition, and another one.\n Lines will be of the form \"lhs attribute 'value' does not match rhs attribute 'value'.\n\n:param differences: (java.util.List<java.lang.String>) - an array to which differences can be added\n:param other: (io.deephaven.db.tables.ColumnDefinition) - the ColumnDefinition under comparison\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:param prefix: (java.lang.String) - begin each difference with this string",
  "describeForCompatibility": "Describes the column definition with respect to the fields that are checked in\n isCompatible(ColumnDefinition).\n\n:return: (java.lang.String) the description for compatibility",
  "doingPersistentSerialization": ":return: boolean",
  "equals": ":param other: java.lang.Object\n:return: boolean",
  "fromGenericType": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :return: io.deephaven.db.tables.ColumnDefinition<T>\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :param componentType: java.lang.Class<?>\n  :return: io.deephaven.db.tables.ColumnDefinition<T>",
  "getDataType": ":return: java.lang.Class<ColumnDefinition.TYPE>",
  "getEncodingInfo": "*Overload 1*  \n  :return: io.deephaven.base.string.EncodingInfo\n  \n*Overload 2*  \n  :param encoding: int\n  :return: io.deephaven.base.string.EncodingInfo",
  "getObjectCodecType": "Get the appropriate ObjectCodecType for this column definition.\n\n:return: (io.deephaven.db.tables.ColumnDefinition.ObjectCodecType) The ObjectCodecType",
  "getSymbolTableType": ":return: io.deephaven.db.tables.ColumnDefinition.SymbolTableType",
  "isCompatible": "Compares two ColumnDefinitions somewhat more permissively than equals, disregarding matters of\n storage and derivation. Checks for equality of name, dataType, and\n componentType. As such, this method has an equivalence relation, ie\n A.isCompatible(B) == B.isCompatible(A).\n\n:param other: (io.deephaven.db.tables.ColumnDefinition) - - The ColumnDefinition to compare to.\n:return: (boolean) True if the ColumnDefinition defines a column whose data is compatible with this ColumnDefinition.",
  "isDirect": ":return: boolean",
  "isFixedWidthObjectType": ":return: boolean",
  "isGrouping": ":return: boolean",
  "isPartitioning": ":return: boolean",
  "ofBoolean": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Boolean>",
  "ofByte": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Byte>",
  "ofChar": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Character>",
  "ofDouble": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Double>",
  "ofFixedWidthCodec": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :param codecName: java.lang.String\n  :param codecArguments: java.lang.String\n  :param width: int\n  :return: io.deephaven.db.tables.ColumnDefinition<T>\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :param componentType: java.lang.Class<?>\n  :param codecName: java.lang.String\n  :param codecArguments: java.lang.String\n  :param width: int\n  :return: io.deephaven.db.tables.ColumnDefinition<T>",
  "ofFloat": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Float>",
  "ofInt": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Integer>",
  "ofLong": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Long>",
  "ofShort": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.Short>",
  "ofString": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<java.lang.String>",
  "ofTime": ":param name: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition<io.deephaven.db.tables.utils.DBDateTime>",
  "ofVariableWidthCodec": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :param codecName: java.lang.String\n  :return: io.deephaven.db.tables.ColumnDefinition<T>\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :param componentType: java.lang.Class<?>\n  :param codecName: java.lang.String\n  :return: io.deephaven.db.tables.ColumnDefinition<T>",
  "readExternal": ":param in: java.io.ObjectInput",
  "rename": ":param newName: java.lang.String\n:return: io.deephaven.db.tables.ColumnDefinition",
  "withDataType": "Note: Java generics information - <Other>\n\n:param dataType: java.lang.Class<Other>\n:return: io.deephaven.db.tables.ColumnDefinition<Other>",
  "withGrouping": ":return: io.deephaven.db.tables.ColumnDefinition<ColumnDefinition.TYPE>",
  "withNormal": ":return: io.deephaven.db.tables.ColumnDefinition<ColumnDefinition.TYPE>",
  "withPartitioning": ":return: io.deephaven.db.tables.ColumnDefinition<ColumnDefinition.TYPE>",
  "withVarSizeString": ":return: io.deephaven.db.tables.ColumnDefinition<ColumnDefinition.TYPE>",
  "writeExternal": ":param out: java.io.ObjectOutput"
 },
 "path": "io.deephaven.db.tables.ColumnDefinition",
 "text": "Column definition for all Deephaven columns.\n Adds non-stateful functionality to DefaultColumnDefinition.",
 "typeName": "class"
}