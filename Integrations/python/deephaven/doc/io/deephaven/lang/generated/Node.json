{
 "className": "io.deephaven.lang.generated.Node",
 "methods": {
  "addChild": "*Overload 1*  \n  :param child: io.deephaven.lang.generated.Node\n  \n*Overload 2*  \n  :param child: io.deephaven.lang.generated.Node\n  :param index: int",
  "addJunk": ":param junk: io.deephaven.lang.generated.Token\n:return: io.deephaven.lang.generated.Token",
  "addScope": "*Overload 1*  \n  :param scope: io.deephaven.lang.api.IsScope\n  \n*Overload 2*  \n  :param scope: java.util.List<io.deephaven.lang.api.IsScope>",
  "addToken": "*Overload 1*  \n  :param token: io.deephaven.lang.generated.Token\n  \n*Overload 2*  \n  :param token: io.deephaven.lang.generated.Token\n  :param anchor: io.deephaven.lang.generated.Node",
  "adopt": ":param node: io.deephaven.lang.generated.Node",
  "append": ":param b: java.lang.StringBuilder\n:param tok: io.deephaven.lang.generated.Token",
  "asRange": ":return: io.deephaven.proto.backplane.script.grpc.DocumentRange.Builder",
  "contains": ":param pos: io.deephaven.proto.backplane.script.grpc.Position\n:return: boolean",
  "containsIndex": ":param i: int\n:return: boolean",
  "containsLines": ":param winStartLine: int\n:param winEndLine: int\n:return: boolean",
  "distanceTo": ":param offset: int\n:return: int",
  "findToken": ":param requested: io.deephaven.proto.backplane.script.grpc.PositionOrBuilder\n:return: io.deephaven.lang.generated.Token",
  "getChildren": ":return: java.util.List<io.deephaven.lang.generated.Node>",
  "getEndIndex": ":return: int",
  "getId": ":return: int",
  "getStartIndex": ":return: int",
  "indexOf": ":param node: io.deephaven.lang.generated.Node\n:return: int",
  "insertChild": ":param child: io.deephaven.lang.generated.Node\n:param index: int",
  "isAutocompleteTerminal": "Overridden manually for nodes who can \"have a cursor on them\" with respect to autocomplete.\n\n If any part of an ast node collects tokens that are \"leaf nodes\" (i.e. there are cursor positions\n where your ast node will be the most derived child found), then it is a candidate to be a terminal autocomplete source.\n\n When encountering whitespace or . or , we might search left or right for interesting nodes,\n and those ast nodes who are autocomplete terminal will be preferred over their children.\n\n The normal search algorithm is a standard binary tree search, where the next-leftmost|rightmost leaf node is transversed.\n When an `isAutocompleteTerminal() == true` node is found, however, we stop there to continue searches.\n\n:return: (boolean) true for nodes that the visitor in ChunkerCompleter will visit and generate results.\n\n This is not needed for always-terminal nodes, like ChunkerNum or ChunkerIdent, but is needed by terminal-nodes-with-children,\n like ChunkerInvoke or ChunkerNew.",
  "isChildOf": ":param best: io.deephaven.lang.generated.Node\n:return: boolean",
  "isWellFormed": ":return: boolean",
  "jjtAccept": "Accept the visitor.\n\n:param visitor: io.deephaven.lang.generated.ChunkerVisitor\n:param data: java.lang.Object\n:return: java.lang.Object",
  "jjtAddChild": "This method tells the node to add its argument to the node's\n     list of children.\n\n:param n: io.deephaven.lang.generated.Node\n:param i: int",
  "jjtClose": "This method is called after all the child nodes have been\n     added.",
  "jjtGetChild": "This method returns a child node.  The children are numbered\n     from zero, left to right.\n\n:param i: int\n:return: io.deephaven.lang.generated.Node",
  "jjtGetFirstToken": ":return: io.deephaven.lang.generated.Token",
  "jjtGetLastToken": ":return: io.deephaven.lang.generated.Token",
  "jjtGetNumChildren": "Return the number of children the node has.\n\n:return: int",
  "jjtGetParent": ":return: io.deephaven.lang.generated.Node",
  "jjtInsertChild": "This method inserts the specified node at the given index, shifting any existing items to the right.\n\n:param n: io.deephaven.lang.generated.Node\n:param i: int",
  "jjtOpen": "This method is called after the node has been made the current\n     node.  It indicates that child nodes can now be added to it.",
  "jjtSetFirstToken": ":param token: io.deephaven.lang.generated.Token",
  "jjtSetLastToken": ":param token: io.deephaven.lang.generated.Token",
  "jjtSetParent": "This pair of methods are used to inform the node of its\n     parent.\n\n:param n: io.deephaven.lang.generated.Node",
  "removeChild": ":param node: io.deephaven.lang.generated.Node",
  "rescope": ":param scope: java.util.List<io.deephaven.lang.api.IsScope>\n:return: io.deephaven.lang.generated.Node",
  "setScope": ":param scope: java.util.List<io.deephaven.lang.api.IsScope>",
  "toSource": ":return: java.lang.String",
  "tokens": ":param strict: boolean\n:return: io.deephaven.web.shared.fu.LinkedIterable<io.deephaven.lang.generated.Token>",
  "tokensReversed": ":param strict: boolean\n:return: io.deephaven.web.shared.fu.LinkedIterable<io.deephaven.lang.generated.Token>"
 },
 "path": "io.deephaven.lang.generated.Node",
 "typeName": "interface"
}