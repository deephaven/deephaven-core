{
 "className": "io.deephaven.configuration.PropertyFile",
 "methods": {
  "getBitSet": ":param propertyName: java.lang.String\n:param length: int\n:return: java.util.BitSet",
  "getBoolean": "*Overload 1*  \n  :param propertyName: java.lang.String\n  :return: boolean\n  \n*Overload 2*  \n  :param propertyName: java.lang.String\n  :param logger: io.deephaven.io.logger.Logger\n  :param logPrefix: java.lang.String\n  :return: boolean",
  "getBooleanForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: boolean",
  "getBooleanForClassWithDefault": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:param defaultValue: boolean\n:return: boolean",
  "getBooleanWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: boolean\n:return: boolean",
  "getChar": ":param propertyName: java.lang.String\n:return: char",
  "getClassParams": "*Overload 1*  \n  :param log: io.deephaven.io.logger.Logger\n  :param c: java.lang.Class\n  :param instanceStr: java.lang.String\n  :param obj: java.lang.Object\n  :param desiredMods: int\n  \n*Overload 2*  \n  :param c: java.lang.Class\n  :param obj: java.lang.Object\n  \n*Overload 3*  \n  :param log: io.deephaven.io.logger.Logger\n  :param c: java.lang.Class\n  :param obj: java.lang.Object\n  \n*Overload 4*  \n  :param log: io.deephaven.io.logger.Logger\n  :param c: java.lang.Class\n  :param name: java.lang.String\n  :param obj: java.lang.Object",
  "getDouble": "*Overload 1*  \n  :param propertyName: java.lang.String\n  :return: double\n  \n*Overload 2*  \n  :param propertyName: java.lang.String\n  :param logger: io.deephaven.io.logger.Logger\n  :param logPrefix: java.lang.String\n  :return: double",
  "getDoubleForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: double",
  "getDoubleForClassWithDefault": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:param defaultValue: double\n:return: double",
  "getDoubleWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: double\n:return: double",
  "getIntArrayForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: int[]",
  "getIntHashSetForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: gnu.trove.set.hash.TIntHashSet",
  "getIntHashSetFromProperty": ":param propertyName: java.lang.String\n:return: gnu.trove.set.hash.TIntHashSet",
  "getInteger": "*Overload 1*  \n  :param propertyName: java.lang.String\n  :return: int\n  \n*Overload 2*  \n  :param propertyName: java.lang.String\n  :param logger: io.deephaven.io.logger.Logger\n  :param logPrefix: java.lang.String\n  :return: int",
  "getIntegerArray": ":param propertyName: java.lang.String\n:return: int[]",
  "getIntegerForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: int",
  "getIntegerForClassWithDefault": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:param defaultValue: int\n:return: int",
  "getIntegerWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: int\n:return: int",
  "getLong": "*Overload 1*  \n  :param propertyName: java.lang.String\n  :return: long\n  \n*Overload 2*  \n  :param propertyName: java.lang.String\n  :param logger: io.deephaven.io.logger.Logger\n  :param logPrefix: java.lang.String\n  :return: long",
  "getLongArray": ":param propertyName: java.lang.String\n:return: long[]",
  "getLongForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: long",
  "getLongForClassWithDefault": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:param defaultValue: long\n:return: long",
  "getLongWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: long\n:return: long",
  "getNameStringMapFromProperty": ":param propertyName: java.lang.String\n:return: java.util.Map<java.lang.String,java.lang.String>",
  "getNameStringSetFromProperty": ":param propertyName: java.lang.String\n:return: java.util.Set<java.lang.String>",
  "getNonNegativeIntSetWithRangeSupport": "Parse a set of non-negative ints from a property. Format is comma-separated individual values and ranges of the\n form start-end.\n\n:param propertyName: (java.lang.String) - \n:return: (gnu.trove.set.TIntSet) A set of ints derived from the specified property.",
  "getPositiveInteger": ":param propertyName: java.lang.String\n:return: int",
  "getPossibleIntegerWithDefault": ":param defaultValue: int\n:param possiblePropertyNames: java.lang.String...\n:return: int",
  "getPossibleStringWithDefault": ":param defaultValue: java.lang.String\n:param possiblePropertyNames: java.lang.String...\n:return: java.lang.String",
  "getProperties": "**Incompatible overloads text - text from the first overload:**\n\nCollect all of the properties in this property file that begin with a given prefix.\n\n*Overload 1*  \n  :return: (java.util.Properties) the Properties object.\n  \n*Overload 2*  \n  :param prefix: java.lang.String\n  :return: (java.util.Properties) a new Properties object containing the selected properties, with the prefix removed.",
  "getProperty": "Gets the value of the given property, aborting if the value is not specified in the system config files. Note\n that it is by design that there is no overloaded method taking a default value. Rather than scattering default\n values through all the source files, all properties should be in one config file (as much as possible). Put\n default values in common.prop.\n\n:param propertyName: java.lang.String\n:return: java.lang.String",
  "getShort": "*Overload 1*  \n  :param propertyName: java.lang.String\n  :return: short\n  \n*Overload 2*  \n  :param propertyName: java.lang.String\n  :param logger: io.deephaven.io.logger.Logger\n  :param logPrefix: java.lang.String\n  :return: short",
  "getShortForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: long",
  "getShortWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: short\n:return: short",
  "getString": ":param propertyName: java.lang.String\n:param logger: io.deephaven.io.logger.Logger\n:param logPrefix: java.lang.String\n:return: java.lang.String",
  "getStringArrayFromProperty": ":param propertyName: java.lang.String\n:return: java.lang.String[]",
  "getStringArrayFromPropertyWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: java.lang.String[]\n:return: java.lang.String[]",
  "getStringForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: java.lang.String",
  "getStringForClassWithDefault": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:param defaultValue: java.lang.String\n:return: java.lang.String",
  "getStringIntHashMap": ":param propertyName: java.lang.String\n:param separator: java.lang.String\n:return: gnu.trove.map.hash.TObjectIntHashMap<java.lang.String>",
  "getStringSetFromProperty": ":param propertyName: java.lang.String\n:return: java.util.Set<java.lang.String>",
  "getStringSetFromPropertyForClass": ":param c: java.lang.Class\n:param propertyLast: java.lang.String\n:return: java.util.Set<java.lang.String>",
  "getStringSetFromPropertyWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: java.util.Set<java.lang.String>\n:return: java.util.Set<java.lang.String>",
  "getStringWithDefault": ":param propertyName: java.lang.String\n:param defaultValue: java.lang.String\n:return: java.lang.String",
  "hasProperty": ":param propertyName: java.lang.String\n:return: boolean",
  "setProperty": "Sets the value of a given property\n\n:param key: (java.lang.String) - an identifier for the property\n:param value: (java.lang.String) - the value for the property\n:return: (java.lang.String) the previous value of the property"
 },
 "path": "io.deephaven.configuration.PropertyFile",
 "typeName": "class"
}