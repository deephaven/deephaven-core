{
 "className": "io.deephaven.configuration.ParsedProperties",
 "methods": {
  "contains": ":param value: java.lang.Object\n:return: boolean",
  "containsKey": ":param key: java.lang.Object\n:return: boolean",
  "containsValue": ":param value: java.lang.Object\n:return: boolean",
  "elements": ":return: java.util.Enumeration<java.lang.Object>",
  "entrySet": ":return: java.util.Set",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "get": ":param key: java.lang.Object\n:return: java.lang.Object",
  "getLineNumbers": "A mapping from each property name to the file and location where the property came from. This is public so that\n we can use this in a property inspector to get the full story about what properties exist and where those\n properties were defined.\n\n:return: (java.util.Map<java.lang.String,java.util.List<io.deephaven.configuration.PropertyHistory>>) The current map",
  "getProperty": ":param key: java.lang.String\n:return: java.lang.String",
  "isEmpty": ":return: boolean",
  "keySet": ":return: java.util.Set",
  "keys": ":return: java.util.Enumeration",
  "list": "*Overload 1*  \n  :param out: java.io.PrintStream\n  \n*Overload 2*  \n  :param out: java.io.PrintWriter",
  "load": "**Incompatible overloads text - text from the first overload:**\n\nLoad the properties from the specified InputStream, ignoring any directives that do not match the current\n context. Automatically closes the stream when the last line has been processed.\n\n*Overload 1*  \n  :param stream: (java.io.InputStream) - The open stream providing a view into the data to be parsed.\n  \n*Overload 2*  \n  :param fileName: (java.lang.String) - The resource or file to load.",
  "put": "Determine whether a property is final or not, and only allow the update if it is not already final.\n\n:param key: (java.lang.Object) - The name of the property to set a value for.\n:param value: (java.lang.Object) - The value of the property being set.\n:return: (java.lang.Object) The previous value of the property being set, or null if it had no previous value.",
  "putAll": ":param t: java.util.Map<?,?>",
  "remove": "Remove a non-final property from the collection. Attempting to remove a final property will cause a\n ConfigurationException to be thrown.\n\n:param key: (java.lang.Object) - The name of the property to be removed.\n:return: (java.lang.Object) The value of the property, if it existed.",
  "setProperty": "Determine whether a property is final or not, and only allow the update if it is not already final. This should\n not be called from within the load operation for this class.\n\n:param key: (java.lang.String) - The name of the property to set a value for.\n:param value: (java.lang.String) - The value of the property being set.\n:return: (java.lang.Object) The previous value of the property being set, or null if it had no previous value.",
  "size": ":return: int",
  "values": ":return: java.util.Collection"
 },
 "path": "io.deephaven.configuration.ParsedProperties",
 "text": "Class for reading in a customized properties file, applying only the locally-relevant properties and keeping track of\n which properties may not be further modified. Maintains the ordering of the properties from the input file.",
 "typeName": "class"
}