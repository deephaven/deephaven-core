{
 "className": "io.deephaven.proto.backplane.grpc.ComboAggregateRequest$Builder",
 "methods": {
  "addAggregates": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n*Overload 1*  \n  :param value: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 2*  \n  :param index: int\n  :param value: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 3*  \n  :param builderForValue: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.Builder\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 4*  \n  :param index: int\n  :param builderForValue: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.Builder\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "addAggregatesBuilder": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n*Overload 1*  \n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.Builder\n  \n*Overload 2*  \n  :param index: int\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.Builder",
  "addAllAggregates": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:param values: java.lang.Iterable<? extendsio.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate>\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "addAllGroupByColumns": "repeated string group_by_columns = 4;\n\n:param values: (java.lang.Iterable<java.lang.String>) - The groupByColumns to add.\n:return: (io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder) This builder for chaining.",
  "addGroupByColumns": "repeated string group_by_columns = 4;\n\n:param value: (java.lang.String) - The groupByColumns to add.\n:return: (io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder) This builder for chaining.",
  "addGroupByColumnsBytes": "repeated string group_by_columns = 4;\n\n:param value: (com.google.protobuf.ByteString) - The bytes of the groupByColumns to add.\n:return: (io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder) This builder for chaining.",
  "addRepeatedField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:param value: java.lang.Object\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "build": ":return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest",
  "buildPartial": ":return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest",
  "clear": ":return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "clearAggregates": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "clearField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "clearForceCombo": "don't use direct single-aggregate table operations even if there is only a single aggregate\n \nbool force_combo = 5;\n\n:return: (io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder) This builder for chaining.",
  "clearGroupByColumns": "repeated string group_by_columns = 4;\n\n:return: (io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder) This builder for chaining.",
  "clearOneof": ":param oneof: com.google.protobuf.Descriptors.OneofDescriptor\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "clearResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "clearSourceId": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "clone": ":return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "getAggregates": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:param index: int\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate",
  "getAggregatesBuilder": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:param index: int\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.Builder",
  "getAggregatesBuilderList": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: java.util.List<io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.Builder>",
  "getAggregatesCount": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: int",
  "getAggregatesList": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: java.util.List<io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate>",
  "getAggregatesOrBuilder": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:param index: int\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggregateOrBuilder",
  "getAggregatesOrBuilderList": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: java.util.List<? extends io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggregateOrBuilder>",
  "getDefaultInstanceForType": ":return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest",
  "getDescriptor": ":return: com.google.protobuf.Descriptors.Descriptor",
  "getDescriptorForType": ":return: com.google.protobuf.Descriptors.Descriptor",
  "getForceCombo": "don't use direct single-aggregate table operations even if there is only a single aggregate\n \nbool force_combo = 5;\n\n:return: (boolean) The forceCombo.",
  "getGroupByColumns": "repeated string group_by_columns = 4;\n\n:param index: (int) - The index of the element to return.\n:return: (java.lang.String) The groupByColumns at the given index.",
  "getGroupByColumnsBytes": "repeated string group_by_columns = 4;\n\n:param index: (int) - The index of the value to return.\n:return: (com.google.protobuf.ByteString) The bytes of the groupByColumns at the given index.",
  "getGroupByColumnsCount": "repeated string group_by_columns = 4;\n\n:return: (int) The count of groupByColumns.",
  "getGroupByColumnsList": "repeated string group_by_columns = 4;\n\n:return: (com.google.protobuf.ProtocolStringList) A list containing the groupByColumns.",
  "getResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (io.deephaven.proto.backplane.grpc.Ticket) The resultId.",
  "getResultIdBuilder": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.Ticket.Builder",
  "getResultIdOrBuilder": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.TicketOrBuilder",
  "getSourceId": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: (io.deephaven.proto.backplane.grpc.TableReference) The sourceId.",
  "getSourceIdBuilder": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.TableReference.Builder",
  "getSourceIdOrBuilder": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.TableReferenceOrBuilder",
  "hasResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (boolean) Whether the resultId field is set.",
  "hasSourceId": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: (boolean) Whether the sourceId field is set.",
  "isInitialized": ":return: boolean",
  "mergeFrom": "*Overload 1*  \n  :param other: com.google.protobuf.Message\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 2*  \n  :param other: io.deephaven.proto.backplane.grpc.ComboAggregateRequest\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 3*  \n  :param input: com.google.protobuf.CodedInputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "mergeResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:param value: io.deephaven.proto.backplane.grpc.Ticket\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "mergeSourceId": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:param value: io.deephaven.proto.backplane.grpc.TableReference\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "mergeUnknownFields": ":param unknownFields: com.google.protobuf.UnknownFieldSet\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "removeAggregates": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:param index: int\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "setAggregates": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n*Overload 1*  \n  :param index: int\n  :param value: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 2*  \n  :param index: int\n  :param builderForValue: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.Builder\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "setField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:param value: java.lang.Object\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "setForceCombo": "don't use direct single-aggregate table operations even if there is only a single aggregate\n \nbool force_combo = 5;\n\n:param value: (boolean) - The forceCombo to set.\n:return: (io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder) This builder for chaining.",
  "setGroupByColumns": "repeated string group_by_columns = 4;\n\n:param index: (int) - The index to set the value at.\n:param value: (java.lang.String) - The groupByColumns to set.\n:return: (io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder) This builder for chaining.",
  "setRepeatedField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:param index: int\n:param value: java.lang.Object\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "setResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n*Overload 1*  \n  :param value: io.deephaven.proto.backplane.grpc.Ticket\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 2*  \n  :param builderForValue: io.deephaven.proto.backplane.grpc.Ticket.Builder\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "setSourceId": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n*Overload 1*  \n  :param value: io.deephaven.proto.backplane.grpc.TableReference\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder\n  \n*Overload 2*  \n  :param builderForValue: io.deephaven.proto.backplane.grpc.TableReference.Builder\n  :return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
  "setUnknownFields": ":param unknownFields: com.google.protobuf.UnknownFieldSet\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder"
 },
 "path": "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Builder",
 "text": "Protobuf type io.deephaven.proto.backplane.grpc.ComboAggregateRequest",
 "typeName": "class"
}