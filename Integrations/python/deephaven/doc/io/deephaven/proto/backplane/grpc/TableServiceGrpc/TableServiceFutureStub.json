{
 "className": "io.deephaven.proto.backplane.grpc.TableServiceGrpc$TableServiceFutureStub",
 "methods": {
  "asOfJoinTables": "Returns the result of an as of join operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "comboAggregate": "Returns the result of an aggregate table operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.ComboAggregateRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "crossJoinTables": "Returns the result of a cross join operation. Also known as the cartesian product.\n \n\n:param request: io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "dropColumns": "Drop columns from the parent table.\n \n\n:param request: io.deephaven.proto.backplane.grpc.DropColumnsRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "emptyTable": "Create an empty table with the given column names and types.\n \n\n:param request: io.deephaven.proto.backplane.grpc.EmptyTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "exactJoinTables": "Returns the result of an exact join operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "fetchPandasTable": "Fetches a pandas table from an existing source ticket and exports it to the local session result ticket.\n \n\n:param request: io.deephaven.proto.backplane.grpc.FetchPandasTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "fetchTable": "Fetches a Table from an existing source ticket and exports it to the local session result ticket.\n \n\n:param request: io.deephaven.proto.backplane.grpc.FetchTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "fetchTableMap": "Fetches a TableMap from an existing source ticket and exports it to the local session result ticket.\n \n\n:param request: io.deephaven.proto.backplane.grpc.FetchTableMapRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.FetchTableMapResponse>",
  "filter": "Filter parent table with structured filters.\n \n\n:param request: io.deephaven.proto.backplane.grpc.FilterTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "flatten": "Returns a new table with a flattened index.\n \n\n:param request: io.deephaven.proto.backplane.grpc.FlattenRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "getExportedTableCreationResponse": "Request an ETCR for this ticket. Ticket must reference a Table.\n \n\n:param request: io.deephaven.proto.backplane.grpc.Ticket\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "head": "Extract rows from the head of the parent table.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HeadOrTailRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "headBy": "Run the headBy table operation for the given group by columns on the given table.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HeadOrTailByRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "lazyUpdate": "Add columns to the given table using the given column specifications and the lazyUpdate table operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "leftJoinTables": "Returns the result of a left join operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "mergeTables": "Create a merged table from the given input tables. If a key column is provided (not null), a sorted\n merged will be performed using that column.\n \n\n:param request: io.deephaven.proto.backplane.grpc.MergeTablesRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "naturalJoinTables": "Returns the result of a natural join operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "runChartDownsample": "Downsamples a table assume its contents will be rendered in a run chart, with each subsequent row holding a later\n X value (i.e., sorted on that column). Multiple Y columns can be specified, as can a range of values for the X\n column to support zooming in.\n \n\n:param request: io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "select": "Select the given columns from the given table.\n \n\n:param request: io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "selectDistinct": "Returns a new table definition with the unique tuples of the specified columns\n \n\n:param request: io.deephaven.proto.backplane.grpc.SelectDistinctRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "snapshot": "Snapshot rightId, triggered by leftId, and export the resulting new Table.\n The left table's change events cause a new snapshot to be taken. The result table includes a\n \"snapshot key\" which is a subset (possibly all) of the left table's columns. The\n remaining columns in the result table come from right table, the table being snapshotted.\n \n\n:param request: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "sort": "Sort parent table via the provide sort descriptors.\n \n\n:param request: io.deephaven.proto.backplane.grpc.SortTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "tail": "Extract rows from the tail of the parent table.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HeadOrTailRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "tailBy": "Run the tailBy operation for the given group by columns on the given table.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HeadOrTailByRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "timeTable": "Create a time table with the given start time and period.\n \n\n:param request: io.deephaven.proto.backplane.grpc.TimeTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "ungroup": "Ungroup the given columns (all columns will be ungrouped if columnsToUngroup is empty or unspecified).\n \n\n:param request: io.deephaven.proto.backplane.grpc.UngroupRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "unstructuredFilter": "Filter parent table with unstructured filters.\n \n\n:param request: io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "update": "Add columns to the given table using the given column specifications and the update table operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "updateView": "Add columns to the given table using the given column specifications and the updateView table operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>",
  "view": "Add columns to the given table using the given column specifications and the view table operation.\n \n\n:param request: io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse>"
 },
 "path": "io.deephaven.proto.backplane.grpc.TableServiceGrpc.TableServiceFutureStub",
 "typeName": "class"
}