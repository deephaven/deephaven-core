{
 "className": "io.deephaven.proto.backplane.grpc.SnapshotTableRequest$Builder",
 "methods": {
  "addAllStampColumns": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param values: (java.lang.Iterable<java.lang.String>) - The stampColumns to add.\n:return: (io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder) This builder for chaining.",
  "addRepeatedField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:param value: java.lang.Object\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "addStampColumns": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param value: (java.lang.String) - The stampColumns to add.\n:return: (io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder) This builder for chaining.",
  "addStampColumnsBytes": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param value: (com.google.protobuf.ByteString) - The bytes of the stampColumns to add.\n:return: (io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder) This builder for chaining.",
  "build": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
  "buildPartial": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
  "clear": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "clearDoInitialSnapshot": "Whether to take an initial snapshot (passed to table.snapshot function).\n \nbool do_initial_snapshot = 4;\n\n:return: (io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder) This builder for chaining.",
  "clearField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "clearLeftId": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "clearOneof": ":param oneof: com.google.protobuf.Descriptors.OneofDescriptor\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "clearResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "clearRightId": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "clearStampColumns": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:return: (io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder) This builder for chaining.",
  "clone": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "getDefaultInstanceForType": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
  "getDescriptor": ":return: com.google.protobuf.Descriptors.Descriptor",
  "getDescriptorForType": ":return: com.google.protobuf.Descriptors.Descriptor",
  "getDoInitialSnapshot": "Whether to take an initial snapshot (passed to table.snapshot function).\n \nbool do_initial_snapshot = 4;\n\n:return: (boolean) The doInitialSnapshot.",
  "getLeftId": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: (io.deephaven.proto.backplane.grpc.TableReference) The leftId.",
  "getLeftIdBuilder": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.TableReference.Builder",
  "getLeftIdOrBuilder": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.TableReferenceOrBuilder",
  "getResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (io.deephaven.proto.backplane.grpc.Ticket) The resultId.",
  "getResultIdBuilder": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.Ticket.Builder",
  "getResultIdOrBuilder": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.TicketOrBuilder",
  "getRightId": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: (io.deephaven.proto.backplane.grpc.TableReference) The rightId.",
  "getRightIdBuilder": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: io.deephaven.proto.backplane.grpc.TableReference.Builder",
  "getRightIdOrBuilder": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: io.deephaven.proto.backplane.grpc.TableReferenceOrBuilder",
  "getStampColumns": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param index: (int) - The index of the element to return.\n:return: (java.lang.String) The stampColumns at the given index.",
  "getStampColumnsBytes": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param index: (int) - The index of the value to return.\n:return: (com.google.protobuf.ByteString) The bytes of the stampColumns at the given index.",
  "getStampColumnsCount": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:return: (int) The count of stampColumns.",
  "getStampColumnsList": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:return: (com.google.protobuf.ProtocolStringList) A list containing the stampColumns.",
  "hasLeftId": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: (boolean) Whether the leftId field is set.",
  "hasResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (boolean) Whether the resultId field is set.",
  "hasRightId": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: (boolean) Whether the rightId field is set.",
  "isInitialized": ":return: boolean",
  "mergeFrom": "*Overload 1*  \n  :param other: com.google.protobuf.Message\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder\n  \n*Overload 2*  \n  :param other: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder\n  \n*Overload 3*  \n  :param input: com.google.protobuf.CodedInputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "mergeLeftId": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:param value: io.deephaven.proto.backplane.grpc.TableReference\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "mergeResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:param value: io.deephaven.proto.backplane.grpc.Ticket\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "mergeRightId": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:param value: io.deephaven.proto.backplane.grpc.TableReference\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "mergeUnknownFields": ":param unknownFields: com.google.protobuf.UnknownFieldSet\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "setDoInitialSnapshot": "Whether to take an initial snapshot (passed to table.snapshot function).\n \nbool do_initial_snapshot = 4;\n\n:param value: (boolean) - The doInitialSnapshot to set.\n:return: (io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder) This builder for chaining.",
  "setField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:param value: java.lang.Object\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "setLeftId": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n*Overload 1*  \n  :param value: io.deephaven.proto.backplane.grpc.TableReference\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder\n  \n*Overload 2*  \n  :param builderForValue: io.deephaven.proto.backplane.grpc.TableReference.Builder\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "setRepeatedField": ":param field: com.google.protobuf.Descriptors.FieldDescriptor\n:param index: int\n:param value: java.lang.Object\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "setResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n*Overload 1*  \n  :param value: io.deephaven.proto.backplane.grpc.Ticket\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder\n  \n*Overload 2*  \n  :param builderForValue: io.deephaven.proto.backplane.grpc.Ticket.Builder\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "setRightId": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n*Overload 1*  \n  :param value: io.deephaven.proto.backplane.grpc.TableReference\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder\n  \n*Overload 2*  \n  :param builderForValue: io.deephaven.proto.backplane.grpc.TableReference.Builder\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "setStampColumns": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param index: (int) - The index to set the value at.\n:param value: (java.lang.String) - The stampColumns to set.\n:return: (io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder) This builder for chaining.",
  "setUnknownFields": ":param unknownFields: com.google.protobuf.UnknownFieldSet\n:return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder"
 },
 "path": "io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
 "text": "Protobuf type io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
 "typeName": "class"
}