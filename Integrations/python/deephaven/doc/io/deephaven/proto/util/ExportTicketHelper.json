{
 "className": "io.deephaven.proto.util.ExportTicketHelper",
 "methods": {
  "exportIdToBytes": "Convenience method to create the flight ticket bytes for the export ID.\n\n:param exportId: (int) - the export ID\n:return: (byte[]) the ticket bytes",
  "exportIdToPath": "Convenience method to create the flight descriptor path for the export ID.\n\n:param exportId: (int) - the export ID\n:return: (java.util.List<java.lang.String>) the path",
  "tableReference": "Convenience method to convert from export id to a ticket TableReference.\n\n:param exportId: (int) - the export id\n:return: (io.deephaven.proto.backplane.grpc.TableReference) a table reference",
  "ticketToExportId": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method to convert from ByteBuffer to export id. Most efficient when ticket is\n ByteOrder.LITTLE_ENDIAN.\n\n \n Ticket's byte[0] must be TICKET_PREFIX, bytes[1-4] are a signed int export id in\n little-endian.\n\n \n Does not consume the ticket.\n\n*Overload 1*  \n  :param ticket: (io.deephaven.proto.backplane.grpc.Ticket) - the grpc Ticket\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (int) the export id that the Ticket wraps\n  \n*Overload 2*  \n  :param ticket: (java.nio.ByteBuffer) - the grpc Ticket\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (int) the export id that the Ticket wraps",
  "ticketToExportIdInternal": ":param ticket: java.nio.ByteBuffer\n:param logId: java.lang.String\n:return: int",
  "toReadableString": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method to create a human readable string for the export ID.\n\n*Overload 1*  \n  :param ticket: (io.deephaven.proto.backplane.grpc.Ticket) - the ticket to convert\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (java.lang.String) a log-friendly string\n  \n*Overload 2*  \n  :param tableReference: (io.deephaven.proto.backplane.grpc.TableReference) - the table reference\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (java.lang.String) a log-friendly string\n  \n*Overload 3*  \n  :param ticket: (java.nio.ByteBuffer) - the ticket to convert\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (java.lang.String) a log-friendly string\n  \n*Overload 4*  \n  :param exportId: (int) - the export ID\n  :return: (java.lang.String) a log-friendly string",
  "wrapExportIdInTicket": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method to convert from ByteBuffer to export ticket. Most efficient when ticket is\n ByteOrder.LITTLE_ENDIAN.\n\n \n Ticket's byte[0] must be TICKET_PREFIX, bytes[1-4] are a signed int export id in\n little-endian.\n\n \n Does not consume the ticket.\n\n*Overload 1*  \n  :param exportId: (int) - the export id\n  :return: (io.deephaven.proto.backplane.grpc.Ticket) a grpc Ticket wrapping the export id\n  \n*Overload 2*  \n  :param ticket: (java.nio.ByteBuffer) - the grpc Ticket\n  :return: (io.deephaven.proto.backplane.grpc.Ticket) the export id that the Ticket wraps"
 },
 "path": "io.deephaven.proto.util.ExportTicketHelper",
 "typeName": "class"
}