{
 "className": "io.deephaven.time.DateTimeUtils",
 "methods": {
  "autoEpochToNanos": "Converts a long offset from Epoch value to a nanoseconds as a long. This method uses expected date ranges to\n infer whether the passed value is in milliseconds, microseconds, or nanoseconds. Thresholds used are\n TimeConstants.MICROTIME_THRESHOLD divided by 1000 for milliseconds, as-is for microseconds, and\n multiplied by 1000 for nanoseconds. The value is tested to see if its ABS exceeds the threshold. E.g. a value\n whose ABS is greater than 1000 * TimeConstants.MICROTIME_THRESHOLD will be treated as nanoseconds.\n\n:param epoch: (long) - The long Epoch offset value to convert.\n:return: (long) null, if the input is equal to QueryConstants.NULL_LONG, otherwise a nanoseconds value\n         corresponding to the passed in epoch value.",
  "autoEpochToTime": "Converts a long offset from Epoch value to a DateTime. This method uses expected date ranges to infer\n whether the passed value is in milliseconds, microseconds, or nanoseconds. Thresholds used are\n TimeConstants.MICROTIME_THRESHOLD divided by 1000 for milliseconds, as-is for microseconds, and\n multiplied by 1000 for nanoseconds. The value is tested to see if its ABS exceeds the threshold. E.g. a value\n whose ABS is greater than 1000 * TimeConstants.MICROTIME_THRESHOLD will be treated as nanoseconds.\n\n:param epoch: (long) - The long Epoch offset value to convert.\n:return: (io.deephaven.time.DateTime) null, if the input is equal to QueryConstants.NULL_LONG, otherwise a DateTime based on\n         the inferred conversion.",
  "cappedTimeOffset": "Returns a DateTime value based on a starting value and a Period to add to it, but with a cap max\n value which is returned in case the starting value plus period exceeds the cap.\n\n:param original: (io.deephaven.time.DateTime) - The starting DateTime value.\n:param period: (io.deephaven.time.Period) - The Period to add to dateTime.\n:param cap: (io.deephaven.time.DateTime) - A DateTime value to use as the maximum return value.\n:return: (io.deephaven.time.DateTime) a null DateTime if either original or period are null; the starting DateTime plus the\n         specified period, if the result is not too large for a DateTime and does not exceed the cap value; the\n         cap value if this is less than offset plus period. Throws a DateTimeOverflowException if the resultant value is more than max long nanoseconds from Epoch.",
  "convertDate": "Attempt to convert the given string to a LocalDate. This should not accept dates with times, as we want\n those to be interpreted as DateTime values. The ideal date format is YYYY-MM-DD since it's the least ambiguous,\n but this method also parses slash-delimited dates according to the system \"date style\".\n\n:param s: (java.lang.String) - the date string to convert\n:return: java.time.LocalDate",
  "convertDateQuiet": "Attempt to convert the given string to a LocalDate. This should not accept dates with times, as we want\n those to be interpreted as DateTime values. The ideal date format is YYYY-MM-DD since it's the least ambiguous.\n\n*Overload 1*  \n  :param s: (java.lang.String) - the date string to convert\n  :return: (java.time.LocalDate) the LocalDate formatted using the default date style.\n  \n*Overload 2*  \n  :param s: (java.lang.String) - the date string\n  :param dateStyle: (io.deephaven.time.DateTimeUtils.DateStyle) - indicates how to interpret slash-delimited dates\n  :return: (java.time.LocalDate) the LocalDate",
  "convertDateTime": "Converts a DateTime String from a few specific zoned formats to a DateTime\n\n:param s: (java.lang.String) - String to be converted, usually in the form yyyy-MM-ddThh:mm:ss and with optional sub-seconds after an\n        optional decimal point, followed by a mandatory time zone character code\n:return: io.deephaven.time.DateTime",
  "convertDateTimeQuiet": "Converts a DateTime String from a few specific zoned formats to a DateTime\n\n:param s: (java.lang.String) - String to be converted, usually in the form yyyy-MM-ddThh:mm:ss and with optional sub-seconds after an\n        optional decimal point, followed by a mandatory time zone character code\n:return: (io.deephaven.time.DateTime) A DateTime from the parsed String, or null if the format is not recognized or an exception occurs",
  "convertExpression": "Converts an expression, replacing DateTime and Period literals with references to constant DateTime/Period\n instances.\n\n:param formula: (java.lang.String) - The formula to convert.\n:return: (io.deephaven.time.DateTimeUtils.Result) A DateTimeUtils.Result object, which includes the converted formula string, a string of instance variable\n         declarations, and a map describing the names and types of these instance variables.",
  "convertJimDateTimeQuiet": ":param s: java.lang.String\n:return: io.deephaven.time.DateTime",
  "convertJimMicrosDateTimeQuiet": ":param s: java.lang.String\n:return: io.deephaven.time.DateTime",
  "convertJimMicrosDateTimeQuietFast": ":param s: java.lang.String\n:param timeZone: org.joda.time.DateTimeZone\n:return: io.deephaven.time.DateTime",
  "convertJimMicrosDateTimeQuietFastTz": ":param s: java.lang.String\n:return: org.joda.time.DateTimeZone",
  "convertLocalTimeQuiet": "Converts a time String in the form hh:mm:ss[.nnnnnnnnn] to a LocalTime.\n\n:param s: (java.lang.String) - The String to convert.\n:return: (java.time.LocalTime) null if the String cannot be parsed, otherwise a LocalTime.",
  "convertPeriod": "Converts a String into a Period object.\n\n:param s: (java.lang.String) - The String to convert in the form of numbertype, e.g. 1W for one week, and Tnumbertype for times, e.g.\n        T1M for one minute.\n:return: io.deephaven.time.Period",
  "convertPeriodQuiet": "Converts a String into a Period object.\n\n:param s: (java.lang.String) - The String to convert in the form of numbertype, e.g. 1W for one week, and Tnumbertype for times, e.g.\n        T1M for one minute.\n:return: (io.deephaven.time.Period) null if the String cannot be parsed, otherwise a Period object.",
  "convertTime": "Converts a String time to nanoseconds from Epoch. The format for the String is:\n \n hh:mm:ss[.nnnnnnnnn].\n\n:param s: (java.lang.String) - The String to be evaluated and converted.\n:return: (long) A long value representing an Epoch offset in nanoseconds. Throws RuntimeException if the String\n         cannot be parsed.",
  "convertTimeQuiet": "Converts a time String in the form hh:mm:ss[.nnnnnnnnn] to a long nanoseconds offset from Epoch.\n\n:param s: (java.lang.String) - The String to convert.\n:return: (long) QueryConstants.NULL_LONG if the String cannot be parsed, otherwise long nanoseconds offset from\n         Epoch.",
  "createFormatter": "Create a DateTimeFormatter formatter with the specified time zone name using the standard yyyy-MM-dd format.\n\n:param timeZoneName: (java.lang.String) - the time zone name\n:return: (java.time.format.DateTimeFormatter) a formatter set for the specified time zone",
  "currentDate": "Returns a String of the current date in the specified TimeZone.\n\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to reference when evaluating the current date for \"now\".\n:return: (java.lang.String) A String in format yyyy-MM-dd.",
  "currentDateNy": "Provides a String representing the current date in the New York time zone or, if a custom\n currentDateNyOverride has been set, the date provided by that override.\n\n:return: (java.lang.String) A String in yyyy-MM-dd format.",
  "currentTime": "Provides the current date/time, or, if a custom timeProvider has been configured, provides the current\n time according to the custom provider.\n\n:return: (io.deephaven.time.DateTime) A DateTime of the current date and time from the system or from the configured alternate time\n         provider.",
  "dateAtMidnight": "Returns a DateTime for the requested DateTime at midnight in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - DateTime for which the new value at midnight should be calculated.\n:param timeZone: (io.deephaven.time.TimeZone) - TimeZone for which the new value at midnight should be calculated.\n:return: (io.deephaven.time.DateTime) A null DateTime if either input is null, otherwise a DateTime representing midnight for\n         the date and time zone of the inputs.",
  "dayDiff": ":param start: io.deephaven.time.DateTime\n:param end: io.deephaven.time.DateTime\n:return: double",
  "dayOfMonth": "Returns an int value of the day of the month for a DateTime and specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the day of the month.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the day of the\n         month represented by the DateTime when interpreted in the specified time zone.",
  "dayOfMonthNy": "Returns an int value of the day of the month for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the day of the month.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of the day of the month\n         represented by the DateTime when interpreted in the New York time zone.",
  "dayOfWeek": "Returns an int value of the day of the week for a DateTime in the specified time zone, with 1 being\n Monday and 7 being Sunday.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the day of the week.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the day of the week\n         represented by the DateTime when interpreted in the specified time zone.",
  "dayOfWeekNy": "Returns an int value of the day of the week for a DateTime in the New York time zone, with 1 being Monday\n and 7 being Sunday.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the day of the week.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of the day of the week\n         represented by the DateTime when interpreted in the New York time zone.",
  "dayOfYear": "Returns an int value of the day of the year (Julian date) for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the day of the year.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the day of the year\n         represented by the DateTime when interpreted in the specified time zone.",
  "dayOfYearNy": "Returns an int value of the day of the year (Julian date) for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the day of the year.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of the day of the year\n         represented by the DateTime when interpreted in the New York time zone.",
  "diff": ":param d1: io.deephaven.time.DateTime\n:param d2: io.deephaven.time.DateTime\n:return: long",
  "diffDay": "Returns a double value of the number of days difference between two DateTime values.\n\n:param start: (io.deephaven.time.DateTime) - The first DateTime.\n:param end: (io.deephaven.time.DateTime) - The second DateTime.\n:return: (double) QueryConstants.NULL_LONG if either input is null; a double value of the number of days obtained\n         from the first DateTime value minus d2, if the intermediate value of nanoseconds difference\n         between the two dates is not out of range for a long value; or throws a DateTimeOverflowException if the intermediate value would be more than min long or max long nanoseconds\n         from Epoch.\n         \n         Note that the subtraction is done based the nanosecond offsets of the two dates from Epoch, so, if either\n         date is before Epoch (negative offset), the result may be unexpected.\n         \n         If the first value is greater than the second value, the result will be negative.",
  "diffNanos": "Returns the difference in nanoseconds between two DateTime values.\n\n:param d1: (io.deephaven.time.DateTime) - The first DateTime.\n:param d2: (io.deephaven.time.DateTime) - The second DateTime.\n:return: (long) QueryConstants.NULL_LONG if either input is null; the long nanoseconds from Epoch value of the\n         first DateTime minus d2, if the result is not out of range for a long value; or throws a\n         DateTimeOverflowException if the resultant value would be more than min\n         long or max long nanoseconds from Epoch.\n         \n         Note that the subtraction is done based the nanosecond offsets of the two dates from Epoch, so, if either\n         date is before Epoch (negative offset), the result may be unexpected.\n         \n         If the first value is greater than the second value, the result will be negative.",
  "diffYear": "Returns a double value of the number of 365 day units difference between two DateTime values.\n\n:param start: (io.deephaven.time.DateTime) - The first DateTime.\n:param end: (io.deephaven.time.DateTime) - The second DateTime.\n:return: (double) QueryConstants.NULL_LONG if either input is null; a double value of the number of 365 day periods\n         obtained from the first DateTime value minus d2, if the intermediate value of nanoseconds\n         difference between the two dates is not out of range for a long value; or throws a\n         DateTimeUtils.DateTimeOverflowException if the intermediate value would be more than min long or max long\n         nanoseconds from Epoch.\n         \n         Note that the subtraction is done based the nanosecond offsets of the two dates from Epoch, so, if either\n         date is before Epoch (negative offset), the result may be unexpected.\n         \n         If the first value is greater than the second value, the result will be negative.",
  "expressionToNanos": "Converts a String date/time to nanoseconds from Epoch or a nanoseconds period. Three patterns are supported:\n \n yyyy-MM-ddThh:mm:ss[.nnnnnnnnn] TZ for date/time values\n \n\n hh:mm:ss[.nnnnnnnnn] for time values\n \n\n Period Strings in the form of numbertype, e.g. 1W for one week, and Tnumbertype for times, e.g. T1M for one\n minute\n \n\n:param formula: (java.lang.String) - The String to be evaluated and converted. Optionally, but preferred, enclosed in straight single\n        ticks.\n:return: (long) A long value representing an Epoch offset in nanoseconds for a time or date/time, or a duration in\n         nanoseconds for a period. Throws DateTimeUtils.DateTimeOverflowException if the resultant value would be longer\n         than max long, or IllegalArgumentException if expression cannot be evaluated.",
  "format": "Returns a String date/time representation.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime to format as a String.\n  :param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when formatting the String.\n  :return: (java.lang.String) A null String if either input is null, otherwise a String formatted as yyyy-MM-ddThh:mm:ss.nnnnnnnnn TZ.\n  \n*Overload 2*  \n  :param nanos: (long) - The long number of nanoseconds offset from Epoch.\n  :return: (java.lang.String) A String of varying format depending on the offset.\n           \n           For values greater than one day, the output will start with dddT\n           \n  \n           For values with fractional seconds, the output will be trailed by .nnnnnnnnn\n           \n  \n           e.g. output may be dddThh:mm:ss.nnnnnnnnn or subsets of this.",
  "formatDate": "Returns a String date representation of a DateTime interpreted for a specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime to format as a String.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when formatting the String.\n:return: (java.lang.String) A null String if either input is null, otherwise a String formatted as yyyy-MM-dd.",
  "formatDateNy": "Returns a String date representation of a DateTime interpreted for the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime to format as a String.\n:return: (java.lang.String) A null String if the input is null, otherwise a String formatted as yyyy-MM-dd.",
  "formatNy": "Returns a String date/time representation of a DateTime interpreted for the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime to format as a String.\n:return: (java.lang.String) A null String if the input is null, otherwise a String formatted as yyyy-MM-ddThh:mm:ss.nnnnnnnnn NY.",
  "getExcelDateTime": "Returns the Excel double time format representation of a DateTime.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime to convert.\n  :param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n  :return: (double) 0.0 if either input is null, otherwise, a double value containing the Excel double format representation\n           of a DateTime in the specified time zone.\n  \n*Overload 2*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime to convert.\n  :param timeZone: (java.util.TimeZone) - The TimeZone to use when interpreting the date/time.\n  :return: (double) 0.0 if either input is null, otherwise, a double value containing the Excel double format representation\n           of a DateTime in the specified time zone.\n  \n*Overload 3*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime to convert.\n  :return: (double) 0.0 if the input is null, otherwise, a double value containing the Excel double format representation of\n           a DateTime in the New York time zone.",
  "getFinestDefinedUnit": "Returns a ChronoField indicating the level of precision in a String time value.\n\n:param timeDef: (java.lang.String) - The time String to evaluate.\n:return: (java.time.temporal.ChronoField) null if the time String cannot be parsed, otherwise a ChronoField for the finest units in the\n         String (e.g. \"10:00:00\" would yield SecondOfMinute).",
  "getPartitionFromTimestampMicros": "Given a DateTimeFormatter and a timestamp in micros from epoch, return the date as a String in standard\n column-partition format of yyyy-MM-dd. A timestamp of NULL_LONG means use the system current time.\n\n:param dateTimeFormatter: (java.time.format.DateTimeFormatter) - the date formatter\n:param timestampMicros: (long) - the timestamp in micros\n:return: (java.lang.String) the formatted date",
  "getPartitionFromTimestampMillis": "Given a DateTimeFormatter and a timestamp in millis, return the date as a String in standard column-partition\n format of yyyy-MM-dd. A timestamp of NULL_LONG means use the system current time.\n\n:param dateTimeFormatter: (java.time.format.DateTimeFormatter) - the date formatter\n:param timestampMillis: (long) - the timestamp in millis\n:return: (java.lang.String) the formatted date",
  "getPartitionFromTimestampNanos": "Given a DateTimeFormatter and a timestamp in nanos from epoch, return the date as a String in standard\n column-partition format of yyyy-MM-dd. A timestamp of NULL_LONG means use the system current time.\n\n:param dateTimeFormatter: (java.time.format.DateTimeFormatter) - the date formatter\n:param timestampNanos: (long) - the timestamp in nanos\n:return: (java.lang.String) the formatted date",
  "getPartitionFromTimestampSeconds": "Given a DateTimeFormatter and a timestamp in seconds from epoch, return the date as a String in standard\n column-partition format of yyyy-MM-dd. A timestamp of NULL_LONG means use the system current time.\n\n:param dateTimeFormatter: (java.time.format.DateTimeFormatter) - the date formatter\n:param timestampSeconds: (long) - the timestamp in seconds\n:return: (java.lang.String) the formatted date",
  "getZonedDateTime": "Converts a DateTime to a ZonedDateTime.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The a DateTime to convert.\n  :return: (java.time.ZonedDateTime) A ZonedDateTime using the default time zone for the session as indicated by\n           TimeZone.TZ_DEFAULT.\n  \n*Overload 2*  \n  :param dateTime: (io.deephaven.time.DateTime) - The a DateTime to convert.\n  :param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use for the conversion.\n  :return: (java.time.ZonedDateTime) A ZonedDateTime using the specified time zone.",
  "hourOfDay": "Returns an int value of the hour of the day for a DateTime in the specified time zone. The hour is on a\n 24 hour clock (0 - 23).\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the hour of the day.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the hour of the day\n         represented by the DateTime when interpreted in the specified time zone.",
  "hourOfDayNy": "Returns an int value of the hour of the day for a DateTime in the New York time zone. The hour is on a 24\n hour clock (0 - 23).\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the hour of the day.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of the hour of the day\n         represented by the DateTime when interpreted in the New York time zone.",
  "isAfter": "Evaluates whether one DateTime value is later than a second DateTime value.\n\n:param d1: (io.deephaven.time.DateTime) - The first DateTime value to compare.\n:param d2: (io.deephaven.time.DateTime) - The second DateTime value to compare.\n:return: (boolean) Boolean true if d1 is later than d2, false if either value is null, or if d2 is equal to or later than\n         d1.",
  "isBefore": "Evaluates whether one DateTime value is earlier than a second DateTime value.\n\n:param d1: (io.deephaven.time.DateTime) - The first DateTime value to compare.\n:param d2: (io.deephaven.time.DateTime) - The second DateTime value to compare.\n:return: (boolean) Boolean true if d1 is earlier than d2, false if either value is null, or if d2 is equal to or earlier\n         than d1.",
  "lastBusinessDateNy": "Provides a String representing the previous business date in the New York time zone using the NYSE calendar, or,\n if a custom lastBusinessDayNyOverride has been set, the date provided by that override.\n\n*Overload 1*  \n  :return: (java.lang.String) A String in yyyy-MM-dd format.\n  \n*Overload 2*  \n  :param currentTimeMillis: (long) - The current date/time in milliseconds from Epoch to be used when determining the\n          previous business date. Typically this is System.currentTimeMillis() and is passed in by calling the\n          niladic variant of this method.\n  :return: (java.lang.String) A String in yyyy-MM-dd format.",
  "lowerBin": "Returns a DateTime value, which is at the starting (lower) end of a time range defined by the interval\n nanoseconds. For example, a 5*MINUTE intervalNanos value would return the date/time value for the start of the\n five minute window that contains the input date time.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to evaluate the start of the containing window.\n  :param intervalNanos: (long) - The size of the window in nanoseconds.\n  :return: (io.deephaven.time.DateTime) Null if either input is null, otherwise a DateTime representing the start of the window.\n  \n*Overload 2*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to evaluate the start of the containing window.\n  :param intervalNanos: (long) - The size of the window in nanoseconds.\n  :param offset: (long) - The window start offset in nanoseconds. For example, a value of MINUTE would offset all windows by\n          one minute.\n  :return: (io.deephaven.time.DateTime) Null if either input is null, otherwise a DateTime representing the start of the window.",
  "microsOfMilli": "Returns the number of microseconds that have elapsed since the start of the millisecond represented by the\n provided dateTime in the specified time zone. Nanoseconds are rounded, not dropped --\n '20:41:39.123456700' has 457 micros, not 456.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the microseconds.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of microseconds since\n         the top of the millisecond for the date/time represented by the DateTime when interpreted in the\n         specified time zone.",
  "microsOfMilliNy": "Returns the number of microseconds that have elapsed since the start of the millisecond represented by the\n provided dateTime in the New York time zone. Nanoseconds are rounded, not dropped -- '20:41:39.123456700'\n has 457 micros, not 456.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the microseconds.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of microseconds since the\n         top of the millisecond for the date/time represented by the DateTime when interpreted in the New\n         York time zone.",
  "microsToNanos": "Converts microseconds to nanoseconds.\n\n:param micros: (long) - The long value of microseconds to convert.\n:return: (long) A QueryConstants.NULL_LONG if the input is null. Throws a DateTimeUtils.DateTimeOverflowException if\n         the resultant value would exceed the range that can be stored in a long. Otherwise, returns a long\n         containing the equivalent number of nanoseconds for the input in microseconds.",
  "microsToTime": "Converts a value of microseconds from Epoch in the UTC time zone to a DateTime.\n\n:param micros: (long) - The long microseconds value to convert.\n:return: (io.deephaven.time.DateTime) QueryConstants.NULL_LONG if the input is null, otherwise, a DateTime representation of\n         the input.",
  "millis": "Returns milliseconds since Epoch for a DateTime value.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which the milliseconds offset should be returned.\n:return: (long) A long value of milliseconds since Epoch, or a QueryConstants.NULL_LONG value if the\n         DateTime is null.",
  "millisOfDay": "Returns an int value of milliseconds since midnight for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the milliseconds since midnight.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of milliseconds since\n         midnight for the date/time represented by the DateTime when interpreted in the specified time\n         zone.",
  "millisOfDayNy": "Returns an int value of milliseconds since midnight for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the milliseconds since midnight.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of milliseconds since\n         midnight for the date/time represented by the DateTime when interpreted in the New York time\n         zone.",
  "millisOfSecond": "Returns an int value of milliseconds since the top of the second for a DateTime in the specified time\n zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the milliseconds.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of milliseconds since\n         the top of the second for the date/time represented by the DateTime when interpreted in the\n         specified time zone.",
  "millisOfSecondNy": "Returns an int value of milliseconds since the top of the second for a DateTime in the New York time\n zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the milliseconds.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of milliseconds since the\n         top of the second for the date/time represented by the DateTime when interpreted in the New York\n         time zone.",
  "millisToDateAtMidnight": "Returns a DateTime representing midnight in a selected time zone on the date specified by the a number of\n milliseconds from Epoch.\n\n:param millis: (long) - A long value of the number of milliseconds from Epoch for which the DateTime is to be\n        calculated.\n:param timeZone: (io.deephaven.time.TimeZone) - TimeZone for which the new value at midnight should be calculated.\n:return: (io.deephaven.time.DateTime) A DateTime rounded down to midnight in the selected time zone for the specified number of\n         milliseconds from Epoch.",
  "millisToDateAtMidnightNy": "Returns a DateTime representing midnight in New York time zone on the date specified by the a number of\n milliseconds from Epoch.\n\n:param millis: (long) - A long value of the number of milliseconds from Epoch for which the DateTime is to be\n        calculated.\n:return: (io.deephaven.time.DateTime) A DateTime rounded down to midnight in the New York time zone for the specified number of\n         milliseconds from Epoch.",
  "millisToNanos": "Converts milliseconds to nanoseconds.\n\n:param millis: (long) - The long milliseconds value to convert.\n:return: (long) QueryConstants.NULL_LONG if the input is equal to QueryConstants.NULL_LONG. Throws\n         DateTimeUtils.DateTimeOverflowException if the input is too large for conversion. Otherwise returns a long of\n         the equivalent number of nanoseconds to the input.",
  "millisToTime": "Converts a value of milliseconds from Epoch in the UTC time zone to a DateTime.\n\n:param millis: (long) - The long milliseconds value to convert.\n:return: (io.deephaven.time.DateTime) QueryConstants.NULL_LONG if the input is null, otherwise, a DateTime representation of\n         the input.",
  "minus": "Subtracts one time from another.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The starting DateTime value.\n  :param nanos: (long) - The long number of nanoseconds to subtract from dateTime.\n  :return: (io.deephaven.time.DateTime) a null DateTime if either input is null; the starting DateTime minus the specified number\n           of nanoseconds, if the result is not too negative for a DateTime; or throws a\n           DateTimeOverflowException if the resultant value is more than min long\n           nanoseconds from Epoch.\n  \n*Overload 2*  \n  :param dateTime: (io.deephaven.time.DateTime) - The starting DateTime value.\n  :param period: (io.deephaven.time.Period) - The Period to subtract from dateTime.\n  :return: (io.deephaven.time.DateTime) a null DateTime if either input is null; the starting DateTime minus the specified\n           period, if the result is not too negative for a DateTime; or throws a\n           DateTimeOverflowException if the resultant value is more than min long\n           nanoseconds from Epoch.\n  \n*Overload 3*  \n  :param d1: (io.deephaven.time.DateTime) - The first DateTime.\n  :param d2: (io.deephaven.time.DateTime) - The DateTime to subtract from d1.\n  :return: (long) QueryConstants.NULL_LONG if either input is null; the long nanoseconds from Epoch value of the\n           first DateTime minus d2, if the result is not out of range for a long value; or throws a\n           DateTimeOverflowException if the resultant value would be more than min\n           long or max long nanoseconds from Epoch.\n           \n           Note that the subtraction is done based the nanosecond offsets of the two dates from Epoch, so, if either\n           date is before Epoch (negative offset), the result may be unexpected.",
  "minuteOfDay": "Returns an int value of minutes since midnight for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the minutes.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of minutes since\n         midnight for the date/time represented by the DateTime when interpreted in the specified time\n         zone.",
  "minuteOfDayNy": "Returns an int value of minutes since midnight for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the milliseconds since midnight.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of minutes since midnight\n         for the date/time represented by the DateTime when interpreted in the New York time zone.",
  "minuteOfHour": "Returns an int value of minutes since the top of the hour for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the minutes.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of minutes since the\n         top of the hour for the date/time represented by the DateTime when interpreted in the specified\n         time zone.",
  "minuteOfHourNy": "Returns an int value of minutes since the top of the hour for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the minutes.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of minutes since the top\n         of the hour for the date/time represented by the DateTime when interpreted in the New York time\n         zone.",
  "monthOfYear": "Returns an int value for the month of a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the month.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the month for the\n         date/time represented by the DateTime when interpreted in the specified time zone. January is 1,\n         February is 2, etc.",
  "monthOfYearNy": "Returns an int value for the month of a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the month.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of the month for the\n         date/time represented by the DateTime when interpreted in the New York time zone.",
  "nanos": "Returns nanoseconds since Epoch for a DateTime value.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime for which the nanoseconds offset should be returned.\n  :return: (long) A long value of nanoseconds since Epoch, or a NULL_LONG value if the DateTime is null.\n  \n*Overload 2*  \n  :param instant: java.time.Instant\n  :return: long",
  "nanosOfDay": "Returns a long value of nanoseconds since midnight for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the nanoseconds since midnight.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (long) A QueryConstants.NULL_LONG if either input is null, otherwise, a long value of nanoseconds since\n         midnight for the date/time represented by the DateTime when interpreted in the specified time\n         zone.",
  "nanosOfDayNy": "Returns a long value of nanoseconds since midnight for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the nanoseconds since midnight.\n:return: (long) A QueryConstants.NULL_LONG if the input is null, otherwise, a long value of nanoseconds since\n         midnight for the date/time represented by the DateTime when interpreted in the New York time\n         zone.",
  "nanosOfSecond": "Returns a long value of nanoseconds since the top of the second for a DateTime in the specified time\n zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the nanoseconds.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (long) A QueryConstants.NULL_LONG if either input is null, otherwise, a long value of nanoseconds since\n         the top of the second for the date/time represented by the DateTime when interpreted in the\n         specified time zone.",
  "nanosOfSecondNy": "Returns a long value of nanoseconds since the top of the second for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the nanoseconds.\n:return: (long) A QueryConstants.NULL_LONG if the input is null, otherwise, a long value of nanoseconds since the\n         top of the second for the date/time represented by the DateTime when interpreted in the New York\n         time zone.",
  "nanosToMicros": "Converts nanoseconds to microseconds.\n\n:param nanos: (long) - The long value of nanoseconds to convert.\n:return: (long) A QueryConstants.NULL_LONG if the input is null. Otherwise, returns a long containing the\n         equivalent number of microseconds for the input in nanoseconds.",
  "nanosToMillis": "Converts nanoseconds to milliseconds.\n\n:param nanos: (long) - The long value of nanoseconds to convert.\n:return: (long) A QueryConstants.NULL_LONG if the input is null. Otherwise, returns a long containing the\n         equivalent number of milliseconds for the input in nanoseconds.",
  "nanosToTime": "Converts a value of nanoseconds from Epoch to a DateTime.\n\n:param nanos: (long) - The long nanoseconds since Epoch value to convert.\n:return: (io.deephaven.time.DateTime) A DateTime for nanos, or null if nanos is equal to\n         NULL_LONG.",
  "overrideLastBusinessDateNyFromCurrentDateNy": "Sets the lastBusinessDayNyOverride to the previous business day from a currently set\n currentDateNyOverride value. If currentDateNyOverride has not been set, this method has no\n effect.",
  "plus": "Adds one time from another.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The starting DateTime value.\n  :param nanos: (long) - The long number of nanoseconds to add to dateTime.\n  :return: (io.deephaven.time.DateTime) a null DateTime if either input is null; the starting DateTime plus the specified number\n           of nanoseconds, if the result is not too large for a DateTime; or throws a\n           DateTimeOverflowException if the resultant value is more than max long\n           nanoseconds from Epoch.\n  \n*Overload 2*  \n  :param dateTime: (io.deephaven.time.DateTime) - The starting DateTime value.\n  :param period: (io.deephaven.time.Period) - The Period to add to dateTime.\n  :return: (io.deephaven.time.DateTime) a null DateTime if either input is null; the starting DateTime plus the specified period,\n           if the result is not too large for a DateTime; or throws a DateTimeOverflowException if the resultant value is more than max long nanoseconds from Epoch.",
  "secondOfDay": "Returns an int value of seconds since midnight for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the seconds.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of seconds since\n         midnight for the date/time represented by the DateTime when interpreted in the specified time\n         zone.",
  "secondOfDayNy": "Returns an int value of seconds since midnight for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the seconds.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of seconds since\n         midnight for the date/time represented by the DateTime when interpreted in the New York time\n         zone.",
  "secondOfMinute": "Returns an int value of seconds since the top of the minute for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the seconds.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of seconds since the\n         top of the minute for the date/time represented by the DateTime when interpreted in the specified\n         time zone.",
  "secondOfMinuteNy": "Returns an int value of seconds since the top of the minute for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the seconds.\n:return: (int) A QueryConstants.NULL_INT if the input is null, otherwise, an int value of seconds since the top\n         of the minute for the date/time represented by the DateTime when interpreted in the New York time\n         zone.",
  "secondsToNanos": "Converts seconds to nanoseconds.\n\n:param seconds: (long) - The long value of seconds to convert.\n:return: (long) A QueryConstants.NULL_LONG if the input is null. Throws a DateTimeUtils.DateTimeOverflowException if\n         the resultant value would exceed the range that can be stored in a long. Otherwise, returns a long\n         containing the equivalent number of nanoseconds for the input in seconds.",
  "secondsToTime": "Converts a value of seconds from Epoch in the UTC time zone to a DateTime.\n\n:param seconds: (long) - The long seconds value to convert.\n:return: (io.deephaven.time.DateTime) QueryConstants.NULL_LONG if the input is null, otherwise, a DateTime representation of\n         the input.",
  "toDateTime": "Converts a ZonedDateTime to a DateTime.\n\n:param zonedDateTime: (java.time.ZonedDateTime) - The a ZonedDateTime to convert.\n:return: io.deephaven.time.DateTime",
  "upperBin": "Returns a DateTime value, which is at the ending (upper) end of a time range defined by the interval\n nanoseconds. For example, a 5*MINUTE intervalNanos value would return the date/time value for the end of the five\n minute window that contains the input date time.\n\n*Overload 1*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to evaluate the end of the containing window.\n  :param intervalNanos: (long) - The size of the window in nanoseconds.\n  :return: (io.deephaven.time.DateTime) Null if either input is null, otherwise a DateTime representing the end of the window.\n  \n*Overload 2*  \n  :param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to evaluate the end of the containing window.\n  :param intervalNanos: (long) - The size of the window in nanoseconds.\n  :param offset: (long) - The window start offset in nanoseconds. For example, a value of MINUTE would offset all windows by\n          one minute.\n  :return: (io.deephaven.time.DateTime) Null if either input is null, otherwise a DateTime representing the end of the window.",
  "year": "Returns an int value of the year for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the year.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the year for the\n         date/time represented by the DateTime when interpreted in the specified time zone.",
  "yearDiff": ":param start: io.deephaven.time.DateTime\n:param end: io.deephaven.time.DateTime\n:return: double",
  "yearNy": "Returns an int value of the year for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the year.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the year for the\n         date/time represented by the DateTime when interpreted in the New York time zone.",
  "yearOfCentury": "Returns an int value of the two-digit year for a DateTime in the specified time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the year.\n:param timeZone: (io.deephaven.time.TimeZone) - The TimeZone to use when interpreting the date/time.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the two-digit year\n         for the date/time represented by the DateTime when interpreted in the specified time zone.",
  "yearOfCenturyNy": "Returns an int value of the two-digit year for a DateTime in the New York time zone.\n\n:param dateTime: (io.deephaven.time.DateTime) - The DateTime for which to find the year.\n:return: (int) A QueryConstants.NULL_INT if either input is null, otherwise, an int value of the two-digit year\n         for the date/time represented by the DateTime when interpreted in the New York time zone."
 },
 "path": "io.deephaven.time.DateTimeUtils",
 "text": "Utilities for Deephaven date/time storage and manipulation.",
 "typeName": "class"
}