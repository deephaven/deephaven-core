{
 "className": "io.deephaven.time.calendar.DefaultNoHolidayBusinessCalendar",
 "methods": {
  "diffBusinessNanos": "Returns the amount of business time in nanoseconds between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n:return: (long) the amount of business time in nanoseconds between the start and end",
  "diffBusinessYear": "Returns the number of business years between start and end.\n\n:param startTime: (io.deephaven.time.DateTime) - start; if null, return null\n:param endTime: (io.deephaven.time.DateTime) - end; if null, return null\n:return: (double) the amount of business time in business years between the start and end",
  "diffNonBusinessDay": "Returns the amount of non-business time in standard business days between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n:return: (double) the amount of non-business time in standard business days between the start and end",
  "diffNonBusinessNanos": "Returns the amount of non-business time in nanoseconds between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n:return: (long) the amount of non-business time in nanoseconds between the start and end",
  "equals": ":param obj: java.lang.Object\n:return: boolean",
  "getBusinessDay": "Gets the indicated business day.\n\n*Overload 1*  \n  :param time: (io.deephaven.time.DateTime) - time\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of time; null if time is null\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date\n  \n*Overload 3*  \n  :param date: (java.time.LocalDate) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date",
  "getBusinessSchedule": "Gets the indicated business day's schedule. getBusinessSchedule(null) returns null.\n\n*Overload 1*  \n  :param time: (io.deephaven.time.DateTime) - time\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of time; null if time is null\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date\n  \n*Overload 3*  \n  :param date: (java.time.LocalDate) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date",
  "getDefaultBusinessPeriods": "Gets the business periods for the default days.\n\n:return: (java.util.List<java.lang.String>) a list of strings with a comma separating open and close times",
  "getHolidays": "Gets business schedules for dates that are different from the defaults. This returns all dates that are defined\n as a holiday for the calendar.\n\n:return: (java.util.Map<java.time.LocalDate,io.deephaven.time.calendar.BusinessSchedule>) a map of dates and to their business periods",
  "hashCode": ":return: int",
  "isBusinessDay": "Is the day of the week a business day? A business day is a day that has a business schedule with one or more\n business periods defined.\n\n:param day: (java.time.DayOfWeek) - a day of the week\n:return: (boolean) true if the day is a business day; false otherwise.",
  "name": "Gets the name of the calendar.\n\n:return: (java.lang.String) the name of the calendar",
  "nextNonBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the next non-business day.\n\n*Overload 1*  \n  :return: (java.lang.String) the next non-business day after the current day\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days after the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (java.lang.String) the next non-business day after time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days after input time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the next non-business day after date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the most recent business day before time",
  "nonBusinessDaysInRange": "Returns the non-business days between start and end, inclusive.\n\n Because no time information (e.g., hours, minutes, seconds) is returned, the corresponding days for start\n and end will be included if they are non-business days.\n\n*Overload 1*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return empty array\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive non-business days between start and end\n  \n*Overload 2*  \n  :param start: (java.lang.String) - start time; if null, return empty array\n  :param end: (java.lang.String) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive non-business days between start and end",
  "numberOfNonBusinessDays": "Returns the number of non-business days between start and end.\n\n*Overload 1*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_INT\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_INT\n  :return: (int) number of business days between the start and end, inclusive and exclusive respectively.\n  \n*Overload 2*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of business days between the start and end, inclusive and endInclusive\n           respectively.\n  \n*Overload 3*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :return: (int) number of non-business days between the start and end, inclusive.\n  \n*Overload 4*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of non-business days between the start and end, inclusive and endInclusive\n           respectively.",
  "previousNonBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the non-business date days non-business days before input date. If days is zero and\n the day is a business day, null is returned.\n\n*Overload 1*  \n  :return: (java.lang.String) the most recent non-business day before the current day\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (java.lang.String) the most recent non-business day before time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before input time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the most recent non-business day before date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before input date",
  "standardBusinessDayLengthNanos": "Returns the length of a standard business day in nanoseconds.\n\n:return: (long) length of a standard business day in nanoseconds.",
  "timeZone": "Gets the timezone of the calendar.\n\n:return: (io.deephaven.time.TimeZone) the time zone of the calendar",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.time.calendar.DefaultNoHolidayBusinessCalendar",
 "text": "A BusinessCalendar with no non-business days.",
 "typeName": "class"
}