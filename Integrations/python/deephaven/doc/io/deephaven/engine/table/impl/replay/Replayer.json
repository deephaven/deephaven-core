{
 "className": "io.deephaven.engine.table.impl.replay.Replayer",
 "methods": {
  "currentTime": "Simulated time.\n\n:return: (io.deephaven.time.DateTime) simulated time.",
  "currentTimeNanos": "Simulated time in nanoseconds.\n\n:return: (long) simulated time in nanoseconds.",
  "getHandle": "Gets a handle to the replayer.\n\n:return: (io.deephaven.engine.table.impl.replay.ReplayerHandle) handle to the replayer.",
  "getTimeProvider": "Gets a time provider for the replayer. The time provider returns the current replay time.\n\n:param replayer: (io.deephaven.engine.table.impl.replay.ReplayerInterface) - replayer\n:return: (io.deephaven.time.TimeProvider) time provider that returns the current replay time.",
  "isDone": "Has the replayer finished replaying all data.\n\n:return: (boolean) true if the replayer has finished replaying all data; false otherwise.",
  "registerTimeSource": "Register the time column and row set from a new table to replay. Most users will use replay,\n replayGrouped, or replayGroupedLastBy instead of this function.\n\n:param rowSet: (io.deephaven.engine.rowset.RowSet) - table row set\n:param timestampSource: (io.deephaven.engine.table.ColumnSource<io.deephaven.time.DateTime>) - column source containing time information.",
  "replay": "Prepares a historical table for replaying.\n\n:param dataSource: (io.deephaven.engine.table.Table) - historical table to replay\n:param timeColumn: (java.lang.String) - column in the table containing timestamps\n:return: (io.deephaven.engine.table.Table) dynamic, replayed version of the table.",
  "replayGrouped": "Prepares a grouped historical table for replaying. This method can be faster than the ungrouped replay, but the\n performance increase comes with a cost. Within a group, the data ordering is maintained. Between groups, data\n ordering is not maintained for a time interval.\n\n:param dataSource: (io.deephaven.engine.table.Table) - historical table to replay\n:param timeColumn: (java.lang.String) - column in the table containing timestamps\n:param groupingColumn: java.lang.String\n:return: (io.deephaven.engine.table.Table) dynamic, replayed version of the table.",
  "replayGroupedLastBy": "Prepares a grouped historical table for replaying as a last-by table.\n\n:param dataSource: (io.deephaven.engine.table.Table) - historical table to replay\n:param timeColumn: (java.lang.String) - column in the table containing timestamps\n:param groupingColumns: (java.lang.String...) - columns used as the key in computing last-by\n:return: (io.deephaven.engine.table.Table) dynamic, replayed version of the last-by table.",
  "run": "Refresh the simulated live tables.",
  "schedule": "Schedule a task to execute.\n\n:param task: (java.util.TimerTask) - task to execute\n:param delay: (long) - delay in milliseconds before first executing the task\n:param period: (long) - frequency in milliseconds to execute the task.",
  "setTime": "Sets the current replay time.\n\n:param updatedTime: (long) - new replay time.",
  "shutdown": "Shuts down the replayer.",
  "start": "Starts replaying data.",
  "waitDone": "Wait a specified interval for the replayer to complete. If the replayer has not completed by the end of the\n interval, the method returns.\n\n:param maxTimeMillis: (long) - maximum number of milliseconds to wait."
 },
 "path": "io.deephaven.engine.table.impl.replay.Replayer",
 "text": "Replay historical data as simulated real-time data.",
 "typeName": "class"
}