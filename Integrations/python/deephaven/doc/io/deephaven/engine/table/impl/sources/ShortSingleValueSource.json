{
 "className": "io.deephaven.engine.table.impl.sources.ShortSingleValueSource",
 "methods": {
  "copy": ":param sourceColumn: io.deephaven.engine.table.ColumnSource<? extendsjava.lang.Short>\n:param sourceKey: long\n:param destKey: long",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data rowSequence\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be written",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data RowSequence\n:param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.RowKeys>) - A LongChunk representing the keys to be written",
  "getPrevShort": ":param index: long\n:return: short",
  "getShort": ":param index: long\n:return: short",
  "set": "*Overload 1*  \n  :param value: java.lang.Short\n  \n*Overload 2*  \n  :param value: short\n  \n*Overload 3*  \n  :param key: long\n  :param value: short"
 },
 "path": "io.deephaven.engine.table.impl.sources.ShortSingleValueSource",
 "text": "Single value source for Short.\n \n The C-haracterSingleValueSource is replicated to all other types with\n io.deephaven.engine.table.impl.sources.Replicate.\n\n (C-haracter is deliberately spelled that way in order to prevent Replicate from altering this very comment).",
 "typeName": "class"
}