{
 "className": "io.deephaven.engine.table.impl.util.compact.DoubleCompactKernel",
 "methods": {
  "compact": "**Incompatible overloads text - text from the first overload:**\n\nCompact the values in values by retaining only the positions where retainValues is true.\n\n*Overload 1*  \n  :param values: (io.deephaven.chunk.WritableDoubleChunk<? extendsio.deephaven.chunk.attributes.Any>) - the input and output chunk of values\n  :param retainValues: (io.deephaven.chunk.BooleanChunk<io.deephaven.chunk.attributes.Any>) - a chunk parallel to values, a value is retained in the output iff retainedValues is true\n  \n*Overload 2*  \n  :param values: (io.deephaven.chunk.WritableChunk<? extendsio.deephaven.chunk.attributes.Any>) - a chunk of values, input and output\n  :param retainValues: (io.deephaven.chunk.BooleanChunk<io.deephaven.chunk.attributes.Any>) - the values to retain",
  "compactAndCount": "**Incompatible overloads text - text from the first overload:**\n\nFor each run in valuesChunk, sort it, eliminate duplicates, and write the number of times a value occurred into\n the parallel slot within counts.\n\n*Overload 1*  \n  :param valueChunk: (io.deephaven.chunk.WritableChunk<? extendsio.deephaven.chunk.attributes.Values>) - a chunk of values, input and output\n  :param counts: (io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>) - an output chunk parallel to valueChunk with the number of times a value occurred\n  :param countNull: (boolean) - if the compaction should count nulls or not\n  \n*Overload 2*  \n  :param valueChunk: (io.deephaven.chunk.WritableChunk<? extendsio.deephaven.chunk.attributes.Values>) - a chunk of values, input and output\n  :param counts: (io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>) - an output chunk parallel to valueChunk with the number of times a value occurred\n  :param startPositions: (io.deephaven.chunk.IntChunk<io.deephaven.chunk.attributes.ChunkPositions>) - the start of each run\n  :param lengths: (io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>) - the length of each run, input and output\n  :param countNull: (boolean) - if the compaction should count nulls or not\n  \n*Overload 3*  \n  :param valueChunk: io.deephaven.chunk.WritableDoubleChunk<? extendsio.deephaven.chunk.attributes.Values>\n  :param counts: io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>\n  \n*Overload 4*  \n  :param valueChunk: io.deephaven.chunk.WritableDoubleChunk<? extendsio.deephaven.chunk.attributes.Values>\n  :param counts: io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>\n  :param countNull: boolean\n  \n*Overload 5*  \n  :param valueChunk: io.deephaven.chunk.WritableDoubleChunk<? extendsio.deephaven.chunk.attributes.Values>\n  :param counts: io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>\n  :param startPositions: io.deephaven.chunk.IntChunk<io.deephaven.chunk.attributes.ChunkPositions>\n  :param lengths: io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>\n  :param countNull: boolean\n  \n*Overload 6*  \n  :param valueChunk: io.deephaven.chunk.WritableDoubleChunk<? extendsio.deephaven.chunk.attributes.Values>\n  :param counts: io.deephaven.chunk.WritableIntChunk<io.deephaven.chunk.attributes.ChunkLengths>\n  :param start: int\n  :param length: int\n  :param countNull: boolean\n  :return: int"
 },
 "path": "io.deephaven.engine.table.impl.util.compact.DoubleCompactKernel",
 "typeName": "class"
}