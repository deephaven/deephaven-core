{
 "className": "io.deephaven.engine.table.impl.sources.chunkcolumnsource.ShortChunkColumnSource",
 "methods": {
  "addChunk": "Append a chunk of data to this column source.\n\n The chunk must not be empty (i.e., the size must be greater than zero).\n\n*Overload 1*  \n  :param chunk: (io.deephaven.chunk.WritableShortChunk<? extendsio.deephaven.chunk.attributes.Values>) - the chunk of data to add\n  \n*Overload 2*  \n  :param chunk: (io.deephaven.chunk.WritableChunk<? extendsio.deephaven.chunk.attributes.Values>) - the chunk of data to add",
  "clear": "Reset the column source to be ready for reuse.\n \n Clear will discard the currently held chunks. This should not be called if a table will continue to reference the\n column source; as it violates the immutability contract.",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made about\n        the size of the chunk shall be made. The chunk will be populated from position [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n        the Context may be used to provide a Chunk data pool\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched\n:return: (io.deephaven.chunk.Chunk<? extends io.deephaven.chunk.attributes.Values>) A chunk of data corresponding to the keys from the given RowSequence",
  "getShort": ":param index: long\n:return: short",
  "getSize": "Get the size of this column source (one more than the last valid row key).\n\n:return: (long) the size of this column source",
  "makeGetContext": "Allocate a new ChunkSource.GetContext for retrieving chunks from this GetContextMaker, typically\n a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size required for any WritableChunk allocated as part of the result.\n:param sharedContext: (io.deephaven.engine.table.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.table.ChunkSource.GetContext) A context for use with get operations"
 },
 "path": "io.deephaven.engine.table.impl.sources.chunkcolumnsource.ShortChunkColumnSource",
 "text": "A column source backed by ShortChunks.\n \n The address space of the column source is dense, with each chunk backing a contiguous set of indices.  The\n getChunk(GetContext, RowSequence)\n call will return the backing chunk or a slice of the backing chunk if possible.",
 "typeName": "class"
}