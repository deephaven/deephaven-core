{
 "className": "io.deephaven.engine.table.impl.sources.LongArraySource",
 "methods": {
  "copy": ":param sourceColumn: io.deephaven.engine.table.ColumnSource<? extendsjava.lang.Long>\n:param sourceKey: long\n:param destKey: long",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data rowSequence\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be written",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "get": ":param index: long\n:return: java.lang.Long",
  "getCapacity": "Get the capacity of this column source. This number is one higher than the highest key that may be accessed (read\n or written).\n\n:return: (long) The capacity of this column source",
  "getPrev": ":param index: long\n:return: java.lang.Long",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.engine.table.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.table.impl.sources.ArraySourceHelper.FillContext) A context for use with fill operations",
  "makeFillFromContext": "Provide a default, empty ChunkSink.FillFromContext for use with our default\n WritableColumnSource.fillFromChunk(io.deephaven.engine.table.ChunkSink.FillFromContext, io.deephaven.chunk.Chunk<? extends io.deephaven.chunk.attributes.Values>, io.deephaven.engine.rowset.RowSequence).\n\n:param chunkCapacity: int\n:return: io.deephaven.engine.table.ChunkSink.FillFromContext",
  "set": ":param key: long\n:param value: java.lang.Long"
 },
 "path": "io.deephaven.engine.table.impl.sources.LongArraySource",
 "text": "Simple array source for Long.",
 "typeName": "class"
}