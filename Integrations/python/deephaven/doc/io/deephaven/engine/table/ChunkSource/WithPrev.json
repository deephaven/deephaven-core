{
 "className": "io.deephaven.engine.table.ChunkSource$WithPrev",
 "methods": {
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superChunkSource.WithPrev.ATTR>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "getPrevChunk": "**Incompatible overloads text - text from the first overload:**\n\nReturns a chunk of previous data corresponding to the keys from the given RowSequence.\n\n*Overload 1*  \n  :param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In\n          particular, the Context may be used to provide a Chunk data pool\n  :param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched\n  :return: (io.deephaven.chunk.Chunk<? extends ChunkSource.WithPrev.ATTR>) A chunk of data corresponding to the keys from the given RowSequence\n  \n*Overload 2*  \n  :param context: io.deephaven.engine.table.ChunkSource.GetContext\n  :param firstKey: long\n  :param lastKey: long\n  :return: io.deephaven.chunk.Chunk<? extends ChunkSource.WithPrev.ATTR>",
  "getPrevSource": ":return: (io.deephaven.engine.table.ChunkSource<ChunkSource.WithPrev.ATTR>) a chunk source which accesses the previous values."
 },
 "path": "io.deephaven.engine.table.ChunkSource.WithPrev",
 "text": "Sub-interface for ChunkSources that support previous value retrieval.",
 "typeName": "interface"
}