{
 "className": "io.deephaven.engine.table.impl.select.SelectColumn",
 "methods": {
  "copy": "Create a copy of this SelectColumn.\n\n:return: (io.deephaven.engine.table.impl.select.SelectColumn) an independent copy of this SelectColumn.",
  "disallowRefresh": "Should we disallow use of this column for refreshing tables?\n\n Some formulas can not be reliably computed with a refreshing table, therefore we will refuse to compute those\n values.\n\n:return: boolean",
  "expression": "The expression.\n\n:return: (io.deephaven.api.expression.Expression) the expression",
  "from": "*Overload 1*  \n  :param selectables: io.deephaven.api.Selectable...\n  :return: io.deephaven.engine.table.impl.select.SelectColumn[]\n  \n*Overload 2*  \n  :param selectables: java.util.Collection<? extendsio.deephaven.api.Selectable>\n  :return: io.deephaven.engine.table.impl.select.SelectColumn[]",
  "getColumnArrays": "Get a list of the names of column arrays used in this SelectColumn. Behavior is undefined if none of the init*\n methods have been called yet.\n\n:return: (java.util.List<java.lang.String>) the list of column arrays used",
  "getColumns": "Get a list of the names of columns used in this SelectColumn. Behavior is undefined if none of the init* methods\n have been called yet.\n\n:return: (java.util.List<java.lang.String>) the columns used in this SelectColumn",
  "getDataView": "Get a ColumnSource that can be used to access the data on demand.\n\n:return: (io.deephaven.engine.table.ColumnSource<?>) a ColumnSource",
  "getLazyView": "Returns a lazily computed view of this column.\n\n:return: (io.deephaven.engine.table.ColumnSource<?>) a lazily computed column source",
  "getMatchPair": "Get a MatchPair for this column, if applicable.\n\n:return: io.deephaven.engine.table.MatchPair",
  "getName": "Get the name of the resultant column.\n\n:return: (java.lang.String) the name of the column",
  "getReturnedType": "Get the data type stored in the resultant column.\n\n:return: (java.lang.Class<?>) the type",
  "initDef": "Initialize any internal column definitions from the provided initial.\n\n:param columnDefinitionMap: (java.util.Map<java.lang.String,io.deephaven.engine.table.ColumnDefinition<?>>) - the starting set of column definitions\n:return: (java.util.List<java.lang.String>) a list of columns on which the result of this is dependent",
  "initInputs": "**Incompatible overloads text - text from the first overload:**\n\nInitialize the SelectColumn using the input table and return a list of underlying columns that this SelectColumn\n is dependent upon.\n\n*Overload 1*  \n  :param table: (io.deephaven.engine.table.Table) - the table to initialize internals from\n  :return: (java.util.List<java.lang.String>) a list containing all columns from 'table' that the result depends on\n  \n*Overload 2*  \n  :param rowSet: (io.deephaven.engine.rowset.TrackingRowSet) - the base row set\n  :param columnsOfInterest: (java.util.Map<java.lang.String,? extendsio.deephaven.engine.table.ColumnSource<?>>) - the input columns\n  :return: (java.util.List<java.lang.String>) a list of columns on which the result of this is dependent",
  "isRetain": ":return: boolean",
  "newColumn": "The new column name, to be added to the new table.\n\n:return: (io.deephaven.api.ColumnName) the new column name",
  "newDestInstance": "Create a new WritableColumnSource with sufficient capacity for the rows in the row set.\n\n:param size: (long) - The number of rows to allocate\n:return: (io.deephaven.engine.table.WritableColumnSource<?>) a new WritableColumnSource with sufficient capacity for 'dataSubset'",
  "of": ":param selectable: io.deephaven.api.Selectable\n:return: io.deephaven.engine.table.impl.select.SelectColumn"
 },
 "path": "io.deephaven.engine.table.impl.select.SelectColumn",
 "text": "The interface for a query table to perform retrieve values from a column for select like operations.",
 "typeName": "interface"
}