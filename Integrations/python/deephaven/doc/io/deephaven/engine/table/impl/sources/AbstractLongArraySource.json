{
 "className": "io.deephaven.engine.table.impl.sources.AbstractLongArraySource",
 "methods": {
  "copyFromChunk": ":param firstKey: long\n:param totalLength: long\n:param src: io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>\n:param offset: int",
  "ensureCapacity": "Ensure that this WritableColumnSource can accept row keys in range [0, capacity).\n\n:param capacity: (long) - The new minimum capacity\n:param nullFill: (boolean) - Whether data should be \"null-filled\". If true, get operations at row keys that have not been\n        set will return the appropriate null value; otherwise such gets produce undefined results.",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data rowSequence\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be written",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data RowSequence\n:param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.RowKeys>) - A LongChunk representing the keys to be written",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "getAndAddUnsafe": ":param index: long\n:param addend: long\n:return: long",
  "getAndSetUnsafe": ":param index: long\n:param newValue: long\n:return: long",
  "getCapacity": "Get the capacity of this column source. This number is one higher than the highest key that may be accessed (read\n or written).\n\n:return: (long) The capacity of this column source",
  "getLong": ":param index: long\n:return: long",
  "getPrevLong": ":param index: long\n:return: long",
  "getUnsafe": ":param index: long\n:return: long",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.engine.table.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.table.impl.sources.ArraySourceHelper.FillContext) A context for use with fill operations",
  "makeFillFromContext": "Provide a default, empty ChunkSink.FillFromContext for use with our default\n WritableColumnSource.fillFromChunk(io.deephaven.engine.table.ChunkSink.FillFromContext, io.deephaven.chunk.Chunk<? extends io.deephaven.chunk.attributes.Values>, io.deephaven.engine.rowset.RowSequence).\n\n:param chunkCapacity: int\n:return: io.deephaven.engine.table.ChunkSink.FillFromContext",
  "move": ":param source: long\n:param dest: long\n:param length: long",
  "resetWritableChunkToBackingStore": "Resets the given chunk to provide a write-through reference to our backing array.\n \n Note: This is unsafe to use if previous tracking has been enabled!\n\n:param chunk: (io.deephaven.chunk.ResettableWritableChunk) - the writable chunk to reset to our backing array.\n:param position: (long) - position that we require\n:return: (long) the first position addressable by the chunk",
  "resetWritableChunkToBackingStoreSlice": "Resets the given chunk to provide a write-through reference to our backing array.\n \n Note: This is unsafe to use if previous tracking has been enabled!\n\n:param chunk: (io.deephaven.chunk.ResettableWritableChunk<?>) - the writable chunk to reset to a slice of our backing array.\n:param position: (long) - position of the first value in the returned chunk\n:return: (long) the capacity of the returned chunk",
  "set": ":param key: long\n:param value: long",
  "shift": ":param start: long\n:param end: long\n:param offset: long",
  "startTrackingPrevValues": "Force my inheritors to implement this method, rather than taking the interface default."
 },
 "path": "io.deephaven.engine.table.impl.sources.AbstractLongArraySource",
 "text": "Shared implementation for DateTimeArraySource and LongArraySource (ArraySources that have 'long' as their underlying\n element type).",
 "typeName": "class"
}