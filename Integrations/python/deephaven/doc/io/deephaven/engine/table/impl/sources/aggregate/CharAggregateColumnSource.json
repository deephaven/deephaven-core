{
 "className": "io.deephaven.engine.table.impl.sources.aggregate.CharAggregateColumnSource",
 "methods": {
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made about\n        the size of the chunk shall be made. The chunk will be populated from position [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "get": ":param rowKey: long\n:return: io.deephaven.vector.CharVector",
  "getPrev": ":param rowKey: long\n:return: io.deephaven.vector.CharVector",
  "getUngrouped": "Reach into a grouped column source and pull one element out of the array.\n\n:param groupIndexKey: (long) - the row key within the column of the cell to get\n:param offsetInGroup: (int) - the index within the array at the specified cell\n:return: (java.lang.Object) Equivalent to ((Vector)columnSource.get(columnIndex)).get(arrayIndex)",
  "getUngroupedBoolean": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: java.lang.Boolean",
  "getUngroupedByte": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: byte",
  "getUngroupedChar": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: char",
  "getUngroupedDouble": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: double",
  "getUngroupedFloat": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: float",
  "getUngroupedInt": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: int",
  "getUngroupedLong": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: long",
  "getUngroupedPrev": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: java.lang.Object",
  "getUngroupedPrevBoolean": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: java.lang.Boolean",
  "getUngroupedPrevByte": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: byte",
  "getUngroupedPrevChar": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: char",
  "getUngroupedPrevDouble": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: double",
  "getUngroupedPrevFloat": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: float",
  "getUngroupedPrevInt": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: int",
  "getUngroupedPrevLong": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: long",
  "getUngroupedPrevShort": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: short",
  "getUngroupedPrevSize": ":param groupIndexKey: long\n:return: long",
  "getUngroupedShort": ":param groupIndexKey: long\n:param offsetInGroup: int\n:return: short",
  "getUngroupedSize": ":param groupIndexKey: (long) - the row key within this column to interrogate\n:return: (long) the size of the Vector at columnIndex.",
  "isUngroupable": "Does this particular instance of the column source support ungrouping?\n\n:return: (boolean) true if you can call the getUngrouped family of methods and get a valid answer.",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.engine.table.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.table.ChunkSource.FillContext) A context for use with fill operations",
  "startTrackingPrevValues": "ColumnSource implementations that track previous values have the option to not actually start tracking previous\n values until this method is called. This is an option, not an obligation: some simple ColumnSource\n implementations (like TSingleValueSource for various T) always track previous values; other implementations (like\n PrevColumnSource) never do; some (like TArrayColumnSource) only start tracking once this method is called.\n\n An immutable column source can not have distinct prev values; therefore it is implemented as a no-op.",
  "ungrouped": ":return: io.deephaven.engine.table.impl.sources.UngroupedColumnSource<java.lang.Character>"
 },
 "path": "io.deephaven.engine.table.impl.sources.aggregate.CharAggregateColumnSource",
 "text": "ColumnSource implementation for aggregation result char columns.",
 "typeName": "class"
}