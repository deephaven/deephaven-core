{
 "className": "io.deephaven.engine.table.impl.CodecLookup",
 "methods": {
  "codecRequired": "**Incompatible overloads text - text from the first overload:**\n\nTest whether a codec is required to write or read the supplied ColumnDefinition.\n\n*Overload 1*  \n  :param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition\n  :return: (boolean) Whether a codec is required\n  \n*Overload 2*  \n  :param dataType: (java.lang.Class<?>) - The data type to check\n  :param componentType: (java.lang.Class<?>) - The component type to check, for array and Vector types\n  :return: (boolean) Whether a codec is required",
  "explicitCodecPresent": "Test whether an explicit codec has been set.\n\n:param codecClassName: (java.lang.String) - The codec class name\n:return: (boolean) Whether an explicit codec has been set",
  "getDefaultCodec": "Get the default codec for the supplied data type.\n\nNote: Java generics information - <TYPE>\n\n:param dataType: (java.lang.Class<TYPE>) - The data type\n:return: (io.deephaven.util.codec.ObjectCodec<TYPE>) The default ObjectCodec",
  "lookup": "**Incompatible overloads text - text from the first overload:**\n\nLookup an ObjectCodec for the supplied ColumnDefinition. Assumes that the data type is\n appropriate for use with a codec, i.e. that codecRequired(Class, Class) will return false.\n\n*Overload 1*  \n  Note: Java generics information - <TYPE>\n  \n  :param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<TYPE>) - The ColumnDefinition\n  :param codecMappings: io.deephaven.engine.table.impl.ColumnToCodecMappings\n  :return: (io.deephaven.util.codec.ObjectCodec<TYPE>) The ObjectCodec\n  \n*Overload 2*  \n  Note: Java generics information - <TYPE>\n  \n  :param dataType: (java.lang.Class<TYPE>) - The data type\n  :param codecClassName: (java.lang.String) - The codec class name\n  :param codecArguments: (java.lang.String) - The codec arguments in string form\n  :return: (io.deephaven.util.codec.ObjectCodec<TYPE>) The ObjectCodec"
 },
 "path": "io.deephaven.engine.table.impl.CodecLookup",
 "text": "Utility class to concentrate ObjectCodec lookups.",
 "typeName": "class"
}