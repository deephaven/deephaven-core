{
 "className": "io.deephaven.engine.table.impl.locations.impl.AbstractTableLocationProvider",
 "methods": {
  "ensureInitialized": "Ensure that this location provider is initialized. Mainly useful in cases where it cannot be otherwise guaranteed\n that TableLocationProvider.refresh() or TableLocationProvider.subscribe(Listener) has been called prior to calls to the various table\n location fetch methods.\n\n:return: (io.deephaven.engine.table.impl.locations.TableLocationProvider) this, to allow method chaining",
  "getKey": "Get the TableKey associated with this provider.\n\n:return: (io.deephaven.engine.table.impl.locations.ImmutableTableKey) The associated TableKey",
  "getTableLocationIfPresent": ":param tableLocationKey: (io.deephaven.engine.table.impl.locations.TableLocationKey) - A TableLocationKey specifying the location to get\n:return: (io.deephaven.engine.table.impl.locations.TableLocation) The TableLocation matching the given key if present, else null",
  "getTableLocationKeys": "Get this provider's currently known location keys. The locations specified by the keys returned may have null\n size - that is, they may not \"exist\" for application purposes. TableLocationProvider.getTableLocation(TableLocationKey) is\n guaranteed to succeed for all results.\n\n:return: (java.util.Collection<io.deephaven.engine.table.impl.locations.ImmutableTableLocationKey>) A collection of keys for locations available from this provider",
  "hasTableLocationKey": "Check if this provider knows the supplied location key.\n\n:param tableLocationKey: (io.deephaven.engine.table.impl.locations.TableLocationKey) - The key to test for\n:return: (boolean) Whether the key is known to this provider",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.engine.table.impl.locations.impl.AbstractTableLocationProvider",
 "text": "Partial TableLocationProvider implementation for standalone use or as part of a TableDataService.\n \n Presents an interface similar to TableLocationProvider.Listener for subclasses to use when communicating with\n the parent; see handleTableLocationKey(TableLocationKey).\n \n Note that subclasses are responsible for determining when it's appropriate to call setInitialized() and/or\n override doInitialization().",
 "typeName": "class"
}