{
 "className": "io.deephaven.engine.table.impl.sources.CharacterSparseArraySource",
 "methods": {
  "copy": ":param sourceColumn: io.deephaven.engine.table.ColumnSource<? extendsjava.lang.Character>\n:param sourceKey: long\n:param destKey: long",
  "ensureCapacity": "Ensure that this WritableColumnSource can accept row keys in range [0, capacity).\n\n:param capacity: (long) - The new minimum capacity\n:param nullFill: (boolean) - Whether data should be \"null-filled\". If true, get operations at row keys that have not been\n        set will return the appropriate null value; otherwise such gets produce undefined results.",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data RowSequence\n:param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.RowKeys>) - A LongChunk representing the keys to be written",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param dest: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "get": ":param index: long\n:return: java.lang.Character",
  "getChar": ":param index: long\n:return: char",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n        the Context may be used to provide a Chunk data pool\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched\n:return: (io.deephaven.chunk.CharChunk<io.deephaven.chunk.attributes.Values>) A chunk of data corresponding to the keys from the given RowSequence",
  "getPrev": ":param index: long\n:return: java.lang.Character",
  "getPrevChar": ":param index: long\n:return: char",
  "getPrevChunk": "Returns a chunk of previous data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In\n        particular, the Context may be used to provide a Chunk data pool\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched\n:return: (io.deephaven.chunk.CharChunk<io.deephaven.chunk.attributes.Values>) A chunk of data corresponding to the keys from the given RowSequence",
  "remove": ":param toRemove: io.deephaven.engine.rowset.RowSet",
  "set": "*Overload 1*  \n  :param key: long\n  :param value: char\n  \n*Overload 2*  \n  :param key: long\n  :param value: java.lang.Character",
  "shift": ":param keysToShift: io.deephaven.engine.rowset.RowSet\n:param shiftDelta: long",
  "startTrackingPrevValues": "ColumnSource implementations that track previous values have the option to not actually start tracking previous\n values until this method is called. This is an option, not an obligation: some simple ColumnSource\n implementations (like TSingleValueSource for various T) always track previous values; other implementations (like\n PrevColumnSource) never do; some (like TArrayColumnSource) only start tracking once this method is called.\n\n An immutable column source can not have distinct prev values; therefore it is implemented as a no-op."
 },
 "path": "io.deephaven.engine.table.impl.sources.CharacterSparseArraySource",
 "text": "Sparse array source for Character.\n \n The C-haracterSparseArraySource is replicated to all other types with\n io.deephaven.engine.table.impl.sources.Replicate.\n\n (C-haracter is deliberately spelled that way in order to prevent Replicate from altering this very comment).",
 "typeName": "class"
}