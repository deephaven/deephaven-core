{
 "className": "io.deephaven.engine.table.TransformableTableMap",
 "methods": {
  "asTable": "**Incompatible overloads text - text from the first overload:**\n\nCreate a Table out of this TableMap's values.\n\n \n Creates a proxy object that in many respects acts like a Table, you can perform many of the table operations on\n it, which are then applied using TableMap.transformTables(java.util.function.Function) or\n TableMap.transformTablesWithMap(TableMap, BiFunction) if the right hand side of an operation is another\n TableMap.\n \n\n The returned table acts as if it were an uncoalesced table; when two of our Proxy objects are operated on\n together, e.g., by a Table.join(io.deephaven.engine.table.Table)) operation, then tables with identical keys are used. If strictKeys is\n set, an error occurs if the two TableMaps do not have identical keySets.\n \n\n Supported operations include those which return a Table, LongSizedDataStructure.size(),\n Table.getDefinition() and operations to retrieve attributes. Operations which retrieve data (such as\n Table.getRowSet()} or Table.getColumn(int) require a coalesce operation. If allowCoalesce is not\n set to true, then the coalescing operations will fail with an IllegalArgumentException.\n\n*Overload 1*  \n  :param strictKeys: (boolean) - if we should fail when our RHS TableMap does not have the same keySet\n  :param allowCoalesce: (boolean) - if we should allow this TableMap to be automatically coalesced into a table\n  :param sanityCheckJoins: (boolean) - if we should sanity check join keys, meaning that we should refuse to perform any joins\n          if the join keys would span two segments of the TableMap. This option is safer, but requires additional\n          work on the query engine to perform the safety checks.\n  :return: (io.deephaven.engine.table.Table) a Table object that performs operations by segment\n  \n*Overload 2*  \n  :return: (io.deephaven.engine.table.Table) a Table object that performs operations by segment",
  "asTableBuilder": "Create a builder object for calling asTable without having to specify all of the parameters.\n\n:return: (io.deephaven.engine.table.TransformableTableMap.AsTableBuilder) an AsTableBuilder",
  "asTableMap": "If you're a TableMap return this, otherwise if you're a Proxy return the underlying TableMap.\n\n:return: (io.deephaven.engine.table.TableMap) a TableMap representation of this object",
  "merge": "Merges all the component tables into a single Table.\n\n:return: (io.deephaven.engine.table.Table) all of our component tables merged into a single Table."
 },
 "path": "io.deephaven.engine.table.TransformableTableMap",
 "text": "This object can be merged to produce a single coalesced Table.\n \n This is used by TableMap and TableMapProxyHandlers to expose the merge() operation to\n users.",
 "typeName": "interface"
}