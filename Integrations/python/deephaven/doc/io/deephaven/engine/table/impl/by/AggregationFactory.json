{
 "className": "io.deephaven.engine.table.impl.by.AggregationFactory",
 "methods": {
  "Agg": "Create an aggregation.\n\n*Overload 1*  \n  :param factory: (io.deephaven.engine.table.impl.by.AggregationSpec) - aggregation factory.\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)\n  \n*Overload 2*  \n  :param factory: (io.deephaven.engine.table.impl.by.AggregationSpec) - aggregation factory.\n  :param matchPairs: (io.deephaven.engine.table.MatchPair...) - the columns to apply the aggregation to.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)\n  \n*Overload 3*  \n  :param factoryType: (io.deephaven.engine.table.impl.by.AggType) - aggregation factory type.\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)\n  \n*Overload 4*  \n  :param factoryType: (io.deephaven.engine.table.impl.by.AggType) - aggregation factory type.\n  :param matchPairs: (io.deephaven.engine.table.MatchPair...) - the columns to apply the aggregation to.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggAbsSum": "Create an absolute sum aggregation, equivalent to Table.absSumBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggAvg": "Create an average aggregation, equivalent to Table.avgBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggCombo": "Create a new AggregationFactory suitable for passing to\n QueryTable.by(AggregationSpec, io.deephaven.engine.table.impl.select.SelectColumn...).\n\n:param aggregations: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement...) - the aggregations to compute\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory) a new table with the specified aggregations.",
  "AggCount": "Create an count aggregation, equivalent to Table.countBy(String).\n\n:param resultColumn: (java.lang.String) - the name of the result column containing the count of each group\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggCountDistinct": "Create a distinct count aggregation.\n\n The output column contains the number of distinct values for the input column in that group.\n\n*Overload 1*  \n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...). Null values\n           are not counted.\n  \n*Overload 2*  \n  :param countNulls: (boolean) - if true null values are counted as a distinct value, otherwise null values are ignored\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggDistinct": "Create a distinct aggregation.\n\n The output column contains a Vector with the distinct values for the input column within the group.\n\n*Overload 1*  \n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...). Null values\n           are ignored.\n  \n*Overload 2*  \n  :param countNulls: (boolean) - if true, then null values are included in the result, otherwise null values are ignored\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggFirst": "Create a first aggregation, equivalent to Table.firstBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggFormula": "Create a formula aggregation.\n\n:param formula: (java.lang.String) - the formula to apply to each group\n:param formulaParam: (java.lang.String) - the parameter name within the formula\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggGroup": "Create a group aggregation, equivalent to Table.groupBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggLast": "Create a last aggregation, equivalent to Table.lastBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggMax": "Create a maximum aggregation, equivalent to Table.maxBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggMed": "Create a median aggregation, equivalent to Table.medianBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggMin": "Create a minimum aggregation, equivalent to Table.minBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggPct": "Create a percentile aggregation.\n\n*Overload 1*  \n  :param percentile: (double) - the percentile to calculate\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)\n  \n*Overload 2*  \n  :param percentile: (double) - the percentile to calculate\n  :param averageMedian: (boolean) - if true, then when the upper values and lower values have an equal size; average the highest\n          lower value and lowest upper value to produce the median value for integers, longs, doubles, and floats\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggSortedFirst": "Create a sorted first aggregation, equivalent to SortedBy.sortedFirstBy(io.deephaven.engine.table.Table, java.lang.String).\n\n*Overload 1*  \n  :param sortColumn: (java.lang.String) - the column to sort by\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)\n  \n*Overload 2*  \n  :param sortColumns: (java.lang.String[]) - the column to sort by\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggSortedLast": "Create a sorted last aggregation, equivalent to SortedBy.sortedLastBy(io.deephaven.engine.table.Table, java.lang.String).\n\n*Overload 1*  \n  :param sortColumn: (java.lang.String) - the column to sort by\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)\n  \n*Overload 2*  \n  :param sortColumns: (java.lang.String[]) - the columns to sort by\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggStd": "Create a standard deviation aggregation, equivalent to Table.stdBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggSum": "Create a summation aggregation, equivalent to Table.sumBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggUnique": "Create a Unique aggregation.\n\n The output column contains a value of the same type as the input column which contains\n\n* The \"no key value\" - if there are no values present\n* The single unique value - if there is only a single value present\n* The \"non unique value\" - if there are more than 1 distinct values present\n\n*Overload 1*  \n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)\n  \n*Overload 2*  \n  :param countNulls: (boolean) - if true, then null values are included in the result, otherwise null values are ignored\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...). Output\n           columns contain null if there are no values present or there are more than 1 distinct values present.\n  \n*Overload 3*  \n  :param countNulls: (boolean) - if true, then null values are included in the result, otherwise null values are ignored\n  :param noKeyValue: (java.lang.Object) - the value to use if there are no values present\n  :param nonUniqueValue: (java.lang.Object) - the value to use if there are more than 1 values present\n  :param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n          the same name, then the column name can be specified.\n  :return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggVar": "Create a variance aggregation, equivalent to Table.varBy(String...).\n\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggWAvg": "Create a weighted average aggregation, equivalent to Table.wavgBy(String, String...).\n\n:param weight: (java.lang.String) - the name of the column to use as the weight for the average\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "AggWSum": "Create a weighted sum aggregation, equivalent to Table.wsumBy(String, String...).\n\n:param weight: (java.lang.String) - the name of the column to use as the weight for the sum\n:param matchPairs: (java.lang.String...) - the columns to apply the aggregation to in the form Output=Input, if the Output and Input have\n        the same name, then the column name can be specified.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory.AggregationElement) a AggregationElement object suitable for passing to AggCombo(AggregationElement...)",
  "forRollup": ":param includeConstituents: boolean\n:return: io.deephaven.engine.table.impl.by.AggregationFactory",
  "getMatchPairs": ":return: java.util.List<io.deephaven.engine.table.MatchPair>",
  "getMemoKey": "Produces a MemoKey for this AggregationSpec.\n\n \n If two AggregationSpecs have equal memoKeys, then Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>) operations that have the same group by\n columns may be memoized. In that case instead of recomputing the result; the original result will be used.\n \n\n If null is returned, the operation will not be memoized.\n \n\n:return: (io.deephaven.engine.table.impl.by.AggregationMemoKey) an AggregationMemoKey, null if this operation can not be memoized.",
  "makeAggregationContextFactory": ":return: io.deephaven.engine.table.impl.by.AggregationContextFactory",
  "rollupFactory": "Create a factory for performing rollups.\n\n:return: io.deephaven.engine.table.impl.by.AggregationFactory",
  "toString": ":return: java.lang.String",
  "withNulls": "Create a new factory that will have columns with all null values.\n\n Used by rollup to empty out unused grouping columns.\n\n:param nullColumns: (java.util.Map<java.lang.String,java.lang.Class<?>>) - a map of column names to types.\n:return: (io.deephaven.engine.table.impl.by.AggregationFactory) a new AggregationFactory that will produce null values for the given columns."
 },
 "path": "io.deephaven.engine.table.impl.by.AggregationFactory",
 "text": "The AggregationFactory combines one or more aggregations into an AggregationSpec for use internally by the\n implementation of Table.aggBy(io.deephaven.api.agg.Aggregation).\n\n \n The intended use of this class is to call the AggCombo(AggregationElement...) method with a set of\n aggregations defined by:\n \n* AggMin(java.lang.String...)\n* AggMax(java.lang.String...)\n* AggSum(java.lang.String...)\n* AggAbsSum(java.lang.String...)\n* AggVar(java.lang.String...)\n* AggAvg(java.lang.String...)\n* AggWAvg(java.lang.String, java.lang.String...)\n* AggWSum(java.lang.String, java.lang.String...)\n* AggMed(java.lang.String...)\n* AggPct(double, java.lang.String...)\n* AggStd(java.lang.String...)\n* AggFirst(java.lang.String...)\n* AggLast(java.lang.String...)\n* AggCount(java.lang.String)\n* AggCountDistinct(java.lang.String...)\n* AggDistinct(java.lang.String...)\n* AggGroup(java.lang.String...)\n* AggSortedFirst(java.lang.String, java.lang.String...)\n* AggSortedLast(java.lang.String, java.lang.String...)",
 "typeName": "class"
}