{
 "className": "io.deephaven.engine.table.impl.sources.regioned.ColumnRegionChunkDictionary",
 "methods": {
  "create": "Note: Java generics information - <DATA_TYPE,\nATTR extends io.deephaven.chunk.attributes.Any>\n\n:param pageMask: long\n:param dataType: java.lang.Class<DATA_TYPE>\n:param dictionaryChunkSupplier: java.util.function.Supplier<io.deephaven.chunk.Chunk<ATTR>>\n:return: io.deephaven.engine.table.impl.sources.regioned.ColumnRegionObject<DATA_TYPE,ATTR>",
  "fillChunkAppend": "Appends the values referenced by orderKeys onto destination. orderKeys are assumed to\n be entirely contained on this Page.\n\n:param context: io.deephaven.engine.table.ChunkSource.FillContext\n:param destination: io.deephaven.chunk.WritableChunk<? superColumnRegionChunkDictionary.ATTR>\n:param rowSequence: io.deephaven.engine.rowset.RowSequence",
  "gatherDictionaryValuesRowSet": "Optional method that should only be used on regions returned by ColumnRegionObject.getDictionaryValuesRegion().\n Gathers\n\n:param keysToVisit: (io.deephaven.engine.rowset.RowSet.SearchIterator) - A search iterator over the enclosing table address space (which must have the same\n                          regions at the same masks), positioned at a row key in this region. Used to\n                          identify regions to visit. Should be advanced to after this region as a side-effect.\n:param knownKeys: (io.deephaven.engine.rowset.RowSequence.Iterator) - An iterator over the previously-known row keys, positioned at the first known key in\n                          this region, or after the region's maximum key if no keys are known. Should be advanced\n                          to after this region as a side effect.\n:param sequentialBuilder: (io.deephaven.engine.rowset.RowSetBuilderSequential) - Output builder; implementations should append ranges for row keys not found in\n                          knownKeys\n:return: (boolean) Whether keysToVisit has been exhausted",
  "getChunk": "Same as ChunkSource.getChunk(GetContext, RowSequence), except that you pass in the begin and last keys representing\n the begin and last (inclusive) keys of a single range rather than an RowSequence. Typically you want to\n call this only if you don't have an RowSequence, such as during an\n RowSequence.forAllRowKeyRanges(LongRangeConsumer) call. In this case, it allows you to avoid creating an\n intermediary RowSequence object.\n\n:param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n        the Context may be used to provide a Chunk data pool\n:param firstKey: (long) - The beginning key (inclusive) of the range to fetch in the chunk\n:param lastKey: (long) - The last key (inclusive) of the range to fetch in the chunk\n:return: io.deephaven.chunk.Chunk<? extends ColumnRegionChunkDictionary.ATTR>",
  "getObject": "Get a single object from this region.\n\n:param elementIndex: (long) - Element row key in the table's address space\n:return: (ColumnRegionChunkDictionary.DATA_TYPE) The object value at the specified element row key"
 },
 "path": "io.deephaven.engine.table.impl.sources.regioned.ColumnRegionChunkDictionary",
 "text": "ColumnRegionObject implementation for regions that support fetching symbols from a dictionary represented as\n an ObjectChunk.",
 "typeName": "class"
}