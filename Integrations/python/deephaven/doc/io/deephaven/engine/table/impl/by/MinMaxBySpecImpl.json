{
 "className": "io.deephaven.engine.table.impl.by.MinMaxBySpecImpl",
 "methods": {
  "getMemoKey": "Produces a MemoKey for this AggregationSpec.\n\n \n If two AggregationSpecs have equal memoKeys, then Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>) operations that have the same group by\n columns may be memoized. In that case instead of recomputing the result; the original result will be used.\n \n\n If null is returned, the operation will not be memoized.\n \n\n:return: (io.deephaven.engine.table.impl.by.AggregationMemoKey) an AggregationMemoKey, null if this operation can not be memoized.",
  "isMinimum": ":return: boolean",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.engine.table.impl.by.MinMaxBySpecImpl",
 "text": "Minimum and Maximum aggregation factory.\n\n Operates in two modes, for non-refreshing tables it requires very little state (just the current minimum or maximum).\n\n For refreshing tables, it requires maintaining a TreeMap of values to counts; so that if the min/max value is removed\n we are able to identify the next lowest/highest value.\n\n You can use AddOnlyMinMaxBySpecImpl if you want to force add-only behavior.",
 "typeName": "class"
}