{
 "className": "io.deephaven.engine.table.impl.UncoalescedTable",
 "methods": {
  "absSumBy": "Groups the data column according to groupByColumns and computes the sum of the absolute values for\n the rest of the fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "aggBy": ":param aggregations: java.util.Collection<? extendsio.deephaven.api.agg.Aggregation>\n:param groupByColumns: java.util.Collection<? extendsio.deephaven.api.Selectable>\n:return: io.deephaven.engine.table.Table",
  "aj": "Looks up the columns in the rightTable that meet the match conditions in the columnsToMatch list. Matching is\n done exactly for the first n-1 columns and via a binary search for the last match pair. The columns of the\n original table are returned intact, together with the columns from rightTable defined in a comma separated list\n \"columnsToAdd\"\n\n:param rightTable: (io.deephaven.engine.table.Table) - The right side table on the join.\n:param columnsToMatch: (io.deephaven.engine.table.MatchPair[]) - A comma separated list of match conditions (\"leftColumn=rightColumn\" or\n        \"columnFoundInBoth\")\n:param columnsToAdd: (io.deephaven.engine.table.MatchPair[]) - A comma separated list with the columns from the left side that need to be added to the right\n        side as a result of the match.\n:param asOfMatchRule: io.deephaven.engine.table.Table.AsOfMatchRule\n:return: (io.deephaven.engine.table.Table) a new table joined according to the specification in columnsToMatch and columnsToAdd",
  "apply": "Applies a function to this table.\n \n This is useful if you have a reference to a table or a proxy and want to run a series of operations against the\n table without each individual operation resulting in an RMI.\n\nNote: Java generics information - <R>\n\n:param function: (java.util.function.Function<io.deephaven.engine.table.Table,R>) - the function to run, its single argument will be this table\n:return: (R) the return value of function",
  "applyToAllBy": "Groups data according to groupByColumns and applies formulaColumn to each of columns not altered by the grouping\n operation. columnParamName is used as place-holder for the name of each column inside\n formulaColumn.\n\n:param formulaColumn: (java.lang.String) - Formula applied to each column\n:param columnParamName: (java.lang.String) - The parameter name used as a placeholder for each column\n:param groupByColumns: (java.util.Collection<? extendsio.deephaven.api.Selectable>) - The grouping columns as in Table.groupBy(Collection)\n:return: io.deephaven.engine.table.Table",
  "avgBy": "Groups the data column according to groupByColumns and computes the average for the rest of the\n fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "awaitUpdate": "Wait for updates to this Table.\n \n In some implementations, this call may also terminate in case of interrupt or spurious wakeup (see\n java.util.concurrent.locks.Condition#await()).\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param timeout: (long) - The maximum time to wait in milliseconds.\n  :return: (boolean) false if the timeout elapses without notification, true otherwise.",
  "byteColumnIterator": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.iterators.ByteColumnIterator",
  "characterColumnIterator": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.iterators.CharacterColumnIterator",
  "coalesce": "Explicitly ensure that any work needed to make a table addressable, iterable, or queryable has been done, and\n return the coalesced child table if appropriate.\n\n:return: (io.deephaven.engine.table.Table) This table, or a fully-coalesced child",
  "columnIterator": "Note: Java generics information - <TYPE>\n\n:param columnName: java.lang.String\n:return: java.util.Iterator<TYPE>",
  "countBy": ":param countColumnName: java.lang.String\n:param groupByColumns: io.deephaven.api.Selectable...\n:return: io.deephaven.engine.table.Table",
  "dateTimeColumnAsNanos": "Produce a new table with the same columns as this table, but with a new column presenting the specified DateTime\n column as a Long column (with each DateTime represented instead as the corresponding number of nanos since the\n epoch).\n \n NOTE: This is a really just an updateView(), and behaves accordingly for column ordering and (re)placement. This\n doesn't work on data that has been brought fully into memory (e.g. via select()). Use a view instead.\n\n:param dateTimeColumnName: (java.lang.String) - Name of date time column\n:param nanosColumnName: (java.lang.String) - Name of nanos column\n:return: (io.deephaven.engine.table.Table) The new table, constructed as explained above.",
  "doubleColumnIterator": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.iterators.DoubleColumnIterator",
  "dropColumns": ":param columnNames: java.lang.String...\n:return: io.deephaven.engine.table.Table",
  "exactJoin": ":param rightTable: io.deephaven.engine.table.Table\n:param columnsToMatch: io.deephaven.engine.table.MatchPair[]\n:param columnsToAdd: io.deephaven.engine.table.MatchPair[]\n:return: io.deephaven.engine.table.Table",
  "firstBy": "Groups the data column according to groupByColumns and retrieves the first for the rest of the\n fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "flatten": "Creates a version of this table with a flat RowSet.\n\n:return: io.deephaven.engine.table.Table",
  "floatColumnIterator": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.iterators.FloatColumnIterator",
  "formatColumns": ":param columnFormats: java.lang.String...\n:return: io.deephaven.engine.table.Table",
  "getColumn": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.DataColumn",
  "getColumnSource": "Retrieves a ColumnSource. It is conveniently cast to @{code ColumnSource} using the type that caller\n expects. This differs from Table.getColumnSource(String, Class) which uses the provided Class object\n to verify that the data type is a subclass of the expected class.\n\nNote: Java generics information - <T>\n\n:param sourceName: (java.lang.String) - The name of the column\n:return: (io.deephaven.engine.table.ColumnSource<T>) The column source for sourceName, parameterized by T",
  "getColumnSourceMap": ":return: java.util.Map<java.lang.String,? extends io.deephaven.engine.table.ColumnSource<?>>",
  "getColumnSources": ":return: java.util.Collection<? extends io.deephaven.engine.table.ColumnSource<?>>",
  "getColumns": ":return: io.deephaven.engine.table.DataColumn[]",
  "getRecord": ":param rowNo: long\n:param columnNames: java.lang.String...\n:return: java.lang.Object[]",
  "getRowSet": ":return: (io.deephaven.engine.rowset.TrackingRowSet) The TrackingRowSet that exposes the row keys present in this Table",
  "getSubTable": "Get a Table that contains a sub-set of the rows from this.\n\n:param rowSet: (io.deephaven.engine.rowset.TrackingRowSet) - The row set for the result.\n:return: (io.deephaven.engine.table.Table) A new sub-table",
  "groupBy": ":param groupByColumns: java.util.Collection<? extendsio.deephaven.api.Selectable>\n:return: io.deephaven.engine.table.Table",
  "head": ":param size: long\n:return: io.deephaven.engine.table.Table",
  "headBy": ":param nRows: long\n:param groupByColumnNames: java.lang.String...\n:return: io.deephaven.engine.table.Table",
  "headPct": "Provides a head that selects a dynamic number of rows based on a percent.\n\n:param percent: (double) - the fraction of the table to return (0..1), the number of rows will be rounded up. For example if\n        there are 3 rows, headPct(50) returns the first two rows.\n:return: io.deephaven.engine.table.Table",
  "integerColumnIterator": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.iterators.IntegerColumnIterator",
  "isFlat": "Return true if this table is guaranteed to be flat. The RowSet of a flat table will be from 0...numRows-1.\n\n:return: boolean",
  "join": "Perform a cross join with the right table.\n \n Returns a table that is the cartesian product of left rows X right rows, with one column for each of the left\n table's columns, and one column corresponding to each of the right table's columns that are included in the\n columnsToAdd argument. The rows are ordered first by the left table then by the right table. If columnsToMatch is\n non-empty then the product is filtered by the supplied match conditions.\n \n To efficiently produce updates, the bits that represent a key for a given row are split into two. Unless\n specified, join reserves 16 bits to represent a right row. When there are too few bits to represent all of the\n right rows for a given aggregation group the table will shift a bit from the left side to the right side. The\n default of 16 bits was carefully chosen because it results in an efficient implementation to process live\n updates.\n \n An OutOfKeySpaceException is thrown when the total number of bits needed\n to express the result table exceeds that needed to represent Long.MAX_VALUE. There are a few work arounds: - If\n the left table is sparse, consider flattening the left table. - If there are no key-columns and the right table\n is sparse, consider flattening the right table. - If the maximum size of a right table's group is small, you can\n reserve fewer bits by setting numRightBitsToReserve on initialization.\n \n Note: If you can prove that a given group has at most one right-row then you should prefer using\n Table.naturalJoin(io.deephaven.engine.table.Table, io.deephaven.engine.table.MatchPair[], io.deephaven.engine.table.MatchPair[]).\n\n:param rightTable: (io.deephaven.engine.table.Table) - The right side table on the join.\n:param columnsToMatch: (io.deephaven.engine.table.MatchPair[]) - An array of match pair conditions (\"leftColumn=rightColumn\" or \"columnFoundInBoth\")\n:param columnsToAdd: (io.deephaven.engine.table.MatchPair[]) - An array of the columns from the right side that need to be added to the left side as a\n        result of the match.\n:param numRightBitsToReserve: (int) - The number of bits to reserve for rightTable groups.\n:return: (io.deephaven.engine.table.Table) a new table joined according to the specification in columnsToMatch and columnsToAdd",
  "lastBy": "Groups the data column according to groupByColumns and retrieves the last for the rest of the fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "lazyUpdate": "Compute column formulas on demand.\n\n \n Lazy update defers computation until required for a set of values, and caches the results for a set of input\n values. This uses less RAM than an update statement when you have a smaller set of unique values. Less\n computation than an updateView is needed, because the results are saved in a cache.\n \n\n If you have many unique values, you should instead use an update statement, which will have more memory efficient\n structures. Values are never removed from the lazyUpdate cache, so it should be used judiciously on a ticking\n table.\n \n\n:param newColumns: (java.util.Collection<? extendsio.deephaven.api.Selectable>) - the columns to add\n:return: (io.deephaven.engine.table.Table) a new Table with the columns added; to be computed on demand",
  "leftJoin": "Returns a table that has one column for each original table's columns, and one column corresponding to each of\n the input table (right table) columns listed in the columns to add (or all the columns whose names don't overlap\n with the name of a column from the source table if the columnsToAdd is length zero). The new columns (those\n corresponding to the input table) contain an aggregation of all values from the left side that match the join\n criteria. Consequently, the types of all right side columns not involved in a join criteria, is an array of the\n original column type. If the two tables have columns with matching names then the method will fail with an\n exception unless the columns with corresponding names are found in one of the matching criteria.\n \n\n NOTE: leftJoin operation does not involve an actual data copy, or an in-memory table creation. In order to\n produce an actual in memory table you need to apply a select call on the join result.\n\n:param rightTable: (io.deephaven.engine.table.Table) - input table\n:param columnsToMatch: (io.deephaven.engine.table.MatchPair[]) - match criteria\n:param columnsToAdd: (io.deephaven.engine.table.MatchPair[]) - columns to add\n:return: (io.deephaven.engine.table.Table) a table that has one column for each original table's columns, and one column corresponding to each\n         column listed in columnsToAdd. If columnsToAdd.length==0 one column corresponding to each column of the\n         input table (right table) columns whose names don't overlap with the name of a column from the source\n         table is added. The new columns (those corresponding to the input table) contain an aggregation of all\n         values from the left side that match the join criteria.",
  "listenForUpdates": "**Incompatible overloads text - text from the first overload:**\n\nSubscribe for updates to this table. After the optional initial image, listener will be invoked via the\n NotificationQueue associated with this Table.\n\n*Overload 1*  \n  :param listener: (io.deephaven.engine.table.ShiftObliviousListener) - listener for updates\n  :param replayInitialImage: (boolean) - true to process updates for all initial rows in the table plus all changes; false to\n          only process changes\n  \n*Overload 2*  \n  :param listener: (io.deephaven.engine.table.TableUpdateListener) - listener for updates",
  "longColumnIterator": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.iterators.LongColumnIterator",
  "maxBy": "Groups the data column according to groupByColumns and computes the max for the rest of the fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>) }\n:return: io.deephaven.engine.table.Table",
  "medianBy": "Groups the data column according to groupByColumns and computes the median for the rest of the\n fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>) }\n:return: io.deephaven.engine.table.Table",
  "minBy": "Groups the data column according to groupByColumns and computes the min for the rest of the fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "moveColumns": ":param index: int\n:param moveToEnd: boolean\n:param columnsToMove: java.lang.String...\n:return: io.deephaven.engine.table.Table",
  "naturalJoin": ":param rightTable: io.deephaven.engine.table.Table\n:param columnsToMatch: io.deephaven.engine.table.MatchPair[]\n:param columnsToAdd: io.deephaven.engine.table.MatchPair[]\n:return: io.deephaven.engine.table.Table",
  "partitionBy": "Create a TableMap from this table, keyed by the specified columns.\n\n \n The returned TableMap contains each row in this table in exactly one of the tables within the map. If you have\n exactly one key column the TableMap is keyed by the value in that column. If you have zero key columns, then the\n TableMap is keyed by io.deephaven.datastructures.util.SmartKey.EMPTY (and will contain this table as the\n value). If you have multiple key columns, then the TableMap is keyed by a\n io.deephaven.datastructures.util.SmartKey. The SmartKey will have one value for each of your column\n values, in the order specified by keyColumnNames.\n \n\n For example if you have a Table keyed by a String column named USym, and a DateTime column named Expiry; a value\n could be retrieved from the TableMap with\n tableMap.get(new SmartKey(\"SPY\";, DateTimeUtils.convertDateTime(\"2020-06-19T16:15:00 NY\"))). For a table\n with an Integer column named Bucket, you simply use the desired value as in tableMap.get(1).\n \n\n:param dropKeys: (boolean) - if true, drop key columns in the output Tables\n:param keyColumnNames: (java.lang.String...) - the name of the key columns to use.\n:return: (io.deephaven.engine.table.TableMap) a TableMap keyed by keyColumnNames",
  "raj": "Just like .aj(), but the matching on the last column is in reverse order, so that you find the row after the\n given timestamp instead of the row before.\n \n Looks up the columns in the rightTable that meet the match conditions in the columnsToMatch list. Matching is\n done exactly for the first n-1 columns and via a binary search for the last match pair. The columns of the\n original table are returned intact, together with the columns from rightTable defined in a comma separated list\n \"columnsToAdd\"\n\n:param rightTable: (io.deephaven.engine.table.Table) - The right side table on the join.\n:param columnsToMatch: (io.deephaven.engine.table.MatchPair[]) - A comma separated list of match conditions (\"leftColumn=rightColumn\" or\n        \"columnFoundInBoth\")\n:param columnsToAdd: (io.deephaven.engine.table.MatchPair[]) - A comma separated list with the columns from the left side that need to be added to the right\n        side as a result of the match.\n:param asOfMatchRule: io.deephaven.engine.table.Table.AsOfMatchRule\n:return: (io.deephaven.engine.table.Table) a new table joined according to the specification in columnsToMatch and columnsToAdd",
  "removeUpdateListener": "Unsubscribe the supplied listener.\n\n*Overload 1*  \n  :param listener: (io.deephaven.engine.table.ShiftObliviousListener) - listener for updates\n  \n*Overload 2*  \n  :param listener: (io.deephaven.engine.table.TableUpdateListener) - listener for updates",
  "renameColumns": ":param pairs: io.deephaven.engine.table.MatchPair...\n:return: io.deephaven.engine.table.Table",
  "reverse": ":return: io.deephaven.engine.table.Table",
  "rollup": ":param aggregations: java.util.Collection<? extendsio.deephaven.api.agg.Aggregation>\n:param includeConstituents: boolean\n:param columns: io.deephaven.api.Selectable...\n:return: io.deephaven.engine.table.Table",
  "select": ":param columns: java.util.Collection<? extendsio.deephaven.api.Selectable>\n:return: io.deephaven.engine.table.Table",
  "selectDistinct": ":param columns: java.util.Collection<? extendsio.deephaven.api.Selectable>\n:return: io.deephaven.engine.table.Table",
  "shortColumnIterator": ":param columnName: java.lang.String\n:return: io.deephaven.engine.table.iterators.ShortColumnIterator",
  "size": "The size of this data structure.\n\n:return: (long) The size",
  "sizeForInstrumentation": ":return: (long) Size if it is currently known without subsequent steps to coalesce the Table, else\n         null",
  "slice": "Extracts a subset of a table by row position.\n \n If both firstPosition and lastPosition are positive, then the rows are counted from the beginning of the table.\n The firstPosition is inclusive, and the lastPosition is exclusive. The Table.head(long)(N) call is equivalent to\n slice(0, N). The firstPosition must be less than or equal to the lastPosition.\n \n If firstPosition is positive and lastPosition is negative, then the firstRow is counted from the beginning of the\n table, inclusively. The lastPosition is counted from the end of the table. For example, slice(1, -1) includes all\n rows but the first and last. If the lastPosition would be before the firstRow, the result is an emptyTable.\n \n If firstPosition is negative, and lastPosition is zero, then the firstRow is counted from the end of the table,\n and the end of the slice is the size of the table. slice(-N, 0) is equivalent to Table.tail(long)(N).\n \n If the firstPosition is nega tive and the lastPosition is negative, they are both counted from the end of the\n table. For example, slice(-2, -1) returns the second to last row of the table.\n\n:param firstPositionInclusive: (long) - the first position to include in the result\n:param lastPositionExclusive: (long) - the last position to include in the result\n:return: (io.deephaven.engine.table.Table) a new Table, which is the request subset of rows from the original table",
  "snapshot": "Snapshot baseTable, triggered by this table, and return a new table as a result.\n\n \n Delegates to TableOperations.snapshot(Object, boolean, Collection).\n\n:param baseTable: (io.deephaven.engine.table.Table) - The table to be snapshotted\n:param doInitialSnapshot: (boolean) - Take the first snapshot now (otherwise wait for a change event)\n:param stampColumns: (java.lang.String...) - The columns forming the \"snapshot key\", i.e. some subset of this Table's columns to be\n        included in the result at snapshot time. As a special case, an empty stampColumns is taken to mean\n        \"include all columns\".\n:return: (io.deephaven.engine.table.Table) The result table",
  "snapshotHistory": ":param rightTable: io.deephaven.engine.table.Table\n:return: io.deephaven.engine.table.Table",
  "snapshotIncremental": ":param rightTable: io.deephaven.engine.table.Table\n:param doInitialSnapshot: boolean\n:param stampColumns: java.lang.String...\n:return: io.deephaven.engine.table.Table",
  "sort": ":param columnsToSortBy: java.util.Collection<io.deephaven.api.SortColumn>\n:return: io.deephaven.engine.table.Table",
  "stdBy": ":param groupByColumns: io.deephaven.api.Selectable...\n:return: io.deephaven.engine.table.Table",
  "sumBy": "Groups the data column according to groupByColumns and computes the sum for the rest of the fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "tail": ":param size: long\n:return: io.deephaven.engine.table.Table",
  "tailBy": ":param nRows: long\n:param groupByColumnNames: java.lang.String...\n:return: io.deephaven.engine.table.Table",
  "tailPct": ":param percent: double\n:return: io.deephaven.engine.table.Table",
  "treeTable": "Create a hierarchical tree table.\n \n The structure of the table is encoded by an \"id\" and a \"parent\" column. The id column should represent a unique\n identifier for a given row, and the parent column indicates which row is the parent for a given row. Rows that\n have a null parent, are shown in the main table. It is possible for rows to be \"orphaned\", if their parent\n reference is non-null and does not exist in the table.\n\n:param idColumn: (java.lang.String) - the name of a column containing a unique identifier for a particular row in the table\n:param parentColumn: (java.lang.String) - the name of a column containing the parent's identifier, null for elements that are part of\n        the root table\n:return: (io.deephaven.engine.table.Table) a hierarchical table grouped according to the parentColumn",
  "ungroup": "Ungroups a table by converting arrays into columns.\n\n:param nullFill: (boolean) - indicates if the ungrouped table should allow disparate sized arrays filling shorter columns with\n        null values. If set to false, then all arrays should be the same length.\n:param columnsToUngroup: (java.lang.String...) - the columns to ungroup\n:return: (io.deephaven.engine.table.Table) the ungrouped table",
  "update": ":param columns: java.util.Collection<? extendsio.deephaven.api.Selectable>\n:return: io.deephaven.engine.table.Table",
  "updateView": ":param columns: java.util.Collection<? extendsio.deephaven.api.Selectable>\n:return: io.deephaven.engine.table.Table",
  "varBy": "Groups the data column according to groupByColumns and computes the variance for the rest of the\n fields\n\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "view": ":param columns: java.util.Collection<? extendsio.deephaven.api.Selectable>\n:return: io.deephaven.engine.table.Table",
  "wavgBy": "Groups the data column according to groupByColumns and computes the weighted average using\n weightColumn for the rest of the fields\n\n:param weightColumn: (java.lang.String) - the column to use for the weight\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table",
  "where": ":param filters: java.util.Collection<? extendsio.deephaven.api.filter.Filter>\n:return: io.deephaven.engine.table.Table",
  "whereIn": "Filters this table based on the set of values in the rightTable.\n\n \n Note that when the rightTable ticks, all of the rows in this table are going to be re-evaluated,\n thus the intention is that the rightTable is fairly slow moving compared with this table.\n\n:param rightTable: (io.deephaven.engine.table.Table) - the filtering table.\n:param columnsToMatch: (java.util.Collection<? extendsio.deephaven.api.JoinMatch>) - the columns to match between the two tables\n:return: (io.deephaven.engine.table.Table) a new table filtered on right table",
  "whereNotIn": "Filters this table based on the set of values not in the rightTable.\n\n \n Note that when the rightTable ticks, all of the rows in this table are going to be re-evaluated,\n thus the intention is that the rightTable is fairly slow moving compared with this table.\n\n:param rightTable: (io.deephaven.engine.table.Table) - the filtering table.\n:param columnsToMatch: (java.util.Collection<? extendsio.deephaven.api.JoinMatch>) - the columns to match between the two tables\n:return: (io.deephaven.engine.table.Table) a new table filtered on right table",
  "wouldMatch": "A table operation that applies the supplied predicate to each row in the table and produces columns containing\n the pass/fail result of the predicate application. This is similar to Table.where(String...) except that\n instead of selecting only rows that meet the criteria, new columns are added with the result of the comparison.\n\n:param matchers: io.deephaven.engine.table.WouldMatchPair...\n:return: (io.deephaven.engine.table.Table) a table with new columns containing the filter result for each row.",
  "wsumBy": "Groups the data column according to groupByColumns and computes the weighted sum using weightColumn\n for the rest of the fields\n \n If the weight column is a floating point type, all result columns will be doubles. If the weight column is an\n integral type, all integral input columns will have long results and all floating point input columns will have\n double results.\n\n:param weightColumn: (java.lang.String) - the column to use for the weight\n:param groupByColumns: (io.deephaven.api.Selectable...) - The grouping columns as in Table.groupBy(java.util.Collection<? extends io.deephaven.api.Selectable>)\n:return: io.deephaven.engine.table.Table"
 },
 "path": "io.deephaven.engine.table.impl.UncoalescedTable",
 "text": "Abstract class for uncoalesced tables. These tables have deferred work that must be done before data can be operated\n on.",
 "typeName": "class"
}