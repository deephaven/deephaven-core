{
 "className": "io.deephaven.engine.util.SortedBy",
 "methods": {
  "sortedFirstBy": "**Incompatible overloads text - text from the first overload:**\n\nReturn a new table with a single row, containing the lowest value of sortColumnName.\n\n*Overload 1*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnName: (java.lang.String) - the name of the column to sort by\n  :return: (io.deephaven.engine.table.Table) a new table containing the row with the lowest value of the sort column\n  \n*Overload 2*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnNames: (java.lang.String[]) - the names of the column to sort by\n  :return: (io.deephaven.engine.table.Table) a new table containing the row with the lowest value of the sort columns\n  \n*Overload 3*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnName: (java.lang.String) - the name of the column to sort by\n  :param groupByColumns: (java.lang.String...) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the lowest value of the sort column for each grouping key\n  \n*Overload 4*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnNames: (java.lang.String[]) - the names of the column to sort by\n  :param groupByColumns: (java.lang.String...) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the lowest value of the sort columns for each grouping key\n  \n*Overload 5*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnName: (java.lang.String) - the name of the column to sort by\n  :param groupByColumns: (java.util.Collection<java.lang.String>) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the lowest value of the sort column for each grouping key\n  \n*Overload 6*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnNames: (java.util.Collection<java.lang.String>) - the names of the column to sort by\n  :param groupByColumns: (java.util.Collection<java.lang.String>) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the lowest value of the sort columns for each grouping key",
  "sortedLastBy": "**Incompatible overloads text - text from the first overload:**\n\nReturn a new table with a single row, containing the greatest value of sortColumnName.\n\n*Overload 1*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnName: (java.lang.String) - the name of the column to sort by\n  :return: (io.deephaven.engine.table.Table) a new table containing the row with the greatest value of the sort column\n  \n*Overload 2*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnNames: (java.lang.String[]) - the name of the columns to sort by\n  :return: (io.deephaven.engine.table.Table) a new table containing the row with the greatest value of the sort column\n  \n*Overload 3*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnName: (java.lang.String) - the name of the column to sort by\n  :param groupByColumns: (java.lang.String...) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the greatest value of the sort column for each grouping key\n  \n*Overload 4*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnNames: (java.lang.String[]) - the names of the column to sort by\n  :param groupByColumns: (java.lang.String...) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the greatest value of the sort columns for each grouping key\n  \n*Overload 5*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnName: (java.lang.String) - the name of the column to sort by\n  :param groupByColumns: (java.util.Collection<java.lang.String>) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the greatest value of the sort column for each grouping key\n  \n*Overload 6*  \n  :param input: (io.deephaven.engine.table.Table) - the input table\n  :param sortColumnNames: (java.util.Collection<java.lang.String>) - the names of the column to sort by\n  :param groupByColumns: (java.util.Collection<java.lang.String>) - the columns to group by\n  :return: (io.deephaven.engine.table.Table) a new table containing the rows with the greatest value of the sort columns for each grouping key"
 },
 "path": "io.deephaven.engine.util.SortedBy",
 "text": "SortedBy operations sort the values in each of the buckets according to a specified column. The sortedFirstBy returns\n the row with the lowest value and sortedLastBy returns the row with the greatest value.",
 "typeName": "class"
}