{
 "className": "io.deephaven.engine.rowset.impl.WritableRowSetImpl",
 "methods": {
  "addToBuilderFromImpl": ":param builder: io.deephaven.engine.rowset.impl.OrderedLongSet.BuilderRandom\n:param rowSet: io.deephaven.engine.rowset.impl.WritableRowSetImpl",
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "asRowSet": "Get a RowSet representation of this RowSequence.\n\n:return: (io.deephaven.engine.rowset.RowSet) A RowSet representation for the same row keys in the same order",
  "close": "Free any resources associated with this object.\n \n Using any RowSequence methods after close() is an error and may produce exceptions or undefined\n results.",
  "compact": "May reclaim some unused memory.",
  "containsRange": "Queries whether this RowSet contains every element in the range provided.\n\n:param start: (long) - Start of the range, inclusive.\n:param end: (long) - End of the range, inclusive.\n:return: (boolean) true if this RowSet contains every element x in start <= x <= end.",
  "copy": "Make a new WritableRowSet with the same row keys as this that is safe for further mutation. As in\n other operations that return a WritableRowSet, the result must be closed by the caller\n when it is no longer needed. The result will never be a TrackingRowSet; use\n WritableRowSet.toTracking() on the result as needed.\n\n:return: (io.deephaven.engine.rowset.WritableRowSet) The copied WritableRowSet",
  "equals": ":param obj: java.lang.Object\n:return: boolean",
  "fillRowKeyChunk": "Fill the supplied WritableLongChunk with individual row keys from this RowSequence.\n \n The chunk's capacity is assumed to be big enough.\n\n:param chunkToFill: (io.deephaven.chunk.WritableLongChunk<? extendsio.deephaven.engine.rowset.chunkattributes.RowKeys>) - A chunk to fill with individual row keys",
  "fillRowKeyRangesChunk": "Fill the supplied WritableLongChunk with row key ranges from this RowSequence.\n \n The chunk's capacity is assumed to be big enough.\n\n:param chunkToFill: (io.deephaven.chunk.WritableLongChunk<io.deephaven.engine.rowset.chunkattributes.OrderedRowKeyRanges>) - A chunk to fill with row key ranges",
  "find": "Returns the position in [0..(size-1)] where the key is found. If not found, then return (-(position it would be)\n - 1), a la Array.binarySearch.\n\n:param key: (long) - the key to search for\n:return: (long) a position from [0..(size-1)] if the key was found. If the key was not found, then (-position - 1) as in\n         Array.binarySearch.",
  "findMissing": "For the given keys RowSet, under the assertion that none of them are present in the current RowSet, return the\n tentative insertion points in the current RowSet with the count for each of them\n\n:param keys: (io.deephaven.engine.rowset.RowSet) - the keys to identify insertion locations\n:return: (gnu.trove.list.array.TLongArrayList[]) two TLongArrayLists; [0] contains the positions, [1] contains the counts.",
  "firstRowKey": "Get the first row key in this RowSet.\n\n:return: (long) The first row key, or RowSequence.NULL_ROW_KEY if there is none.",
  "forEachRowKey": "Provide each value contained in this RowSet, in increased sorted order to the consumer. If the consumer returns\n false for a key, stops after that key (does not provide any keys after that key).\n\n:param lc: (io.deephaven.util.datastructures.LongAbortableConsumer) - the consumer.\n:return: (boolean) false if the consumer returned false at some point, true if the consumer always returned true and all\n         values in the RowSet were consumed.",
  "forEachRowKeyRange": "For as long as the consumer wants more ranges, call accept on the consumer with the individual row key ranges in\n this RowSequence, in increasing order.\n\n:param larc: (io.deephaven.util.datastructures.LongRangeAbortableConsumer) - a consumer to feed the individual row key values to.\n:return: (boolean) false if the consumer provided ever returned false, true otherwise.",
  "get": "Returns the row key at the given row position.\n\n:param rowPosition: (long) - A row position in this RowSet between 0 and size() - 1.\n:return: (long) The row key at the supplied row position",
  "getAverageRunLengthEstimate": "Get an estimate of the average (mean) length of runs of adjacent row keys in this RowSequence.\n \n Implementations should strive to keep this method efficient (O(1) preferred) at the expense of accuracy.\n \n Empty RowSequence should return an arbitrary valid value, usually 1.\n\n:return: (long) An estimate of the average run length in this RowSequence, in [1, size()]",
  "getKeysForPositions": "Returns the sequence of (increasing) keys corresponding to the positions provided as input.\n\n:param positions: (java.util.PrimitiveIterator.OfLong) - an iterator providing row positions in increasing order.\n:param outputKeys: (java.util.function.LongConsumer) - a consumer of corresponding keys for the positions provided as input.",
  "getRowSequenceByKeyRange": "Get an ordered subset of the row keys in this RowSequence for a row key range. The returned set will be\n the intersection of the row keys in this with the row keys in the closed interval\n [startRowKeyInclusive, endRowKeyInclusive].\n\n The returned reference is owned by the caller, who should call close() when it is done with it.\n\n:param startRowKeyInclusive: (long) - The minimum row key to include\n:param endRowKeyInclusive: (long) - The maximum row key to include\n:return: (io.deephaven.engine.rowset.RowSequence) The subset as an RowSequence, which may be this",
  "getRowSequenceByPosition": "Get an ordered subset of the row keys in this RowSequence for a position range. The result will contain\n the set of row keys in this that lie at positions in the half-open range [startPositionInclusive,\n startPositionInclusive + length).\n\n The returned reference is owned by the caller, who should call close() when it is done with it.\n\n:param startPositionInclusive: (long) - The position of the first row key to include\n:param length: (long) - The number of row keys to include\n:return: (io.deephaven.engine.rowset.RowSequence) The subset as an RowSequence, which may be this",
  "getRowSequenceIterator": "Get an RowSequence.Iterator over this RowSequence.\n\n:return: (io.deephaven.engine.rowset.RowSequence.Iterator) A new iterator, positioned at the first row key",
  "insert": "**Incompatible overloads text - text from the first overload:**\n\nAdd a single key to this RowSet if it's not already present.\n\n*Overload 1*  \n  :param key: (long) - The key to add\n  \n*Overload 2*  \n  :param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.OrderedRowKeys>) - The LongChunk of OrderedRowKeys to insert\n  :param offset: (int) - The offset in keys to begin inserting keys from\n  :param length: (int) - The number of keys to insert\n  \n*Overload 3*  \n  :param added: (io.deephaven.engine.rowset.RowSet) - The RowSet to add",
  "insertRange": "Add all keys in a closed range to this RowSet if they are not already present.\n\n:param startKey: (long) - The first key to add\n:param endKey: (long) - The last key to add (inclusive)",
  "insertWithShift": "For each key in the provided RowSet, shift it by shiftAmount and insert it in the current RowSet.\n\n:param shiftAmount: (long) - the amount to add to each key in the RowSet argument before insertion.\n:param other: (io.deephaven.engine.rowset.RowSet) - the RowSet with the keys to shift and insert.",
  "intersect": "Returns a new RowSet representing the intersection of the current RowSet with the input RowSet\n\n:param range: io.deephaven.engine.rowset.RowSet\n:return: io.deephaven.engine.rowset.WritableRowSet",
  "invert": "Returns the row positions of row keys in the current set as a WritableRowSet, stopping at\n maximumPosition.\n\n \n This can be thought of as an iterative RowSet.find(long) over the values in keys, but all keys\n must exist within this RowSet, because a RowSet result can not represent negative values.\n\n:param keys: (io.deephaven.engine.rowset.RowSet) - The keys to find positions for\n:param maximumPosition: (long) - The largest position for which we will find a key\n:return: (io.deephaven.engine.rowset.WritableRowSet) A new WritableRowSet containing the positions of the keys in this RowSet",
  "isEmpty": "Queries whether this RowSet is empty (i.e. has no keys).\n\n:return: (boolean) true if the size() of this RowSet is zero, false if the size is greater than zero",
  "iterator": ":return: io.deephaven.engine.rowset.RowSet.Iterator",
  "lastRowKey": "Get the last row key in this RowSequence.\n\n:return: (long) The last row key, or RowSequence.NULL_ROW_KEY if there is none.",
  "minus": "Returns a new RowSet representing the keys of the current set not present inside rowSetToRemove. This operation\n is equivalent to set difference. This RowSet is not modified.\n\n:param indexToRemove: io.deephaven.engine.rowset.RowSet\n:return: io.deephaven.engine.rowset.WritableRowSet",
  "overlaps": "Returns true if a RowSet has any overlap.\n\n:param range: io.deephaven.engine.rowset.RowSet\n:return: boolean",
  "overlapsRange": "Returns true if this RowSet has any overlap with the provided range.\n\n:param start: (long) - Start of range, inclusive.\n:param end: (long) - End of range, inclusive.\n:return: (boolean) true if any value x in start <= x <= end is contained in this RowSet.",
  "rangeIterator": ":return: io.deephaven.engine.rowset.RowSet.RangeIterator",
  "rangesCountUpperBound": ":return: long",
  "readExternal": ":param in: java.io.ObjectInput",
  "remove": "**Incompatible overloads text - text from the first overload:**\n\nRemove a single key from this RowSet if it's present.\n\n*Overload 1*  \n  :param key: (long) - The key to remove\n  \n*Overload 2*  \n  :param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.OrderedRowKeys>) - The LongChunk of OrderedRowKeys to remove\n  :param offset: (int) - The offset in keys to begin removing keys from\n  :param length: (int) - The number of keys to remove\n  \n*Overload 3*  \n  :param removed: (io.deephaven.engine.rowset.RowSet) - The RowSet to remove",
  "removeRange": "Remove all keys in a closed range from this RowSet if they are present.\n\n:param start: (long) - The first key to remove\n:param end: (long) - The last key to remove (inclusive)",
  "retain": "Modifies the RowSet by removing any keys not in the rowSetToIntersect argument.\n\n:param rowSetToIntersect: (io.deephaven.engine.rowset.RowSet) - a rowSet with the keys to retain; any other keys not in rowSetToIntersect will be\n        removed.",
  "retainRange": "Modifies the RowSet by keeping only keys in the interval [startRowKey, endRowKey]\n\n:param startRowKey: (long) - beginning of interval of keys to keep.\n:param endRowKey: (long) - endRowKey of interval of keys to keep (inclusive).",
  "reverseIterator": ":return: io.deephaven.engine.rowset.RowSet.SearchIterator",
  "searchIterator": ":return: io.deephaven.engine.rowset.RowSet.SearchIterator",
  "shift": ":param shiftAmount: long\n:return: io.deephaven.engine.rowset.WritableRowSet",
  "shiftInPlace": ":param shiftAmount: long",
  "size": "How many keys are in this RowSet.\n\n:return: (long) the number of keys in this RowSet.",
  "subSetByKeyRange": "Get a subset of this RowSet within the specified closed range of row keys.\n\n:param startKey: (long) - The first key to include in the output.\n:param endKey: (long) - The last key (inclusive) to include in the output.\n:return: (io.deephaven.engine.rowset.WritableRowSet) A new RowSet, containing only values >= startKey and <= endKey.",
  "subSetByPositionRange": "Get a subset of this RowSet within the specified half-closed range of row positions.\n\n:param startPos: (long) - The first position to included in the output (inclusive)\n:param endPos: (long) - The last position to included in the output (exclusive)\n:return: (io.deephaven.engine.rowset.WritableRowSet) A new RowSet, containing only positions >= startPos and < endPos",
  "subSetForPositions": "Get a subset of this RowSet according to the supplied sequence of row positions in posRowSequence.\n\n*Overload 1*  \n  :param posRowSequence: (io.deephaven.engine.rowset.RowSequence) - The RowSequence of positions ranges to get (as in RowSet.get(long))\n  :param reversed: (boolean) - Whether to treat posRowSet as offsets relative to RowSet.size() rather than 0\n  :return: (io.deephaven.engine.rowset.WritableRowSet) A new RowSet, containing the row keys from this RowSet at the row positions in posRowSequence\n  \n*Overload 2*  \n  :param positions: (io.deephaven.engine.rowset.RowSequence) - The RowSequence of position-based ranges to extract.\n  :return: (io.deephaven.engine.rowset.WritableRowSet) A new RowSet, containing values at the locations in the provided RowSet.",
  "subSetForReversePositions": "Get a subset of this RowSet according to the supplied sequence of row positions relative to RowSet.size() in\n posRowSequence.\n\n:param positions: (io.deephaven.engine.rowset.RowSequence) - The RowSequence of positions ranges to get (as in RowSet.get(long))\n:return: (io.deephaven.engine.rowset.WritableRowSet) A new RowSet, containing the row keys from this RowSet at the row positions in posRowSequence",
  "subsetOf": "Returns true if this RowSet is a (possibly improper) subset of other.\n\n:param other: io.deephaven.engine.rowset.RowSet\n:return: (boolean) true if every element of this exists within other",
  "toString": "*Overload 1*  \n  :return: java.lang.String\n  \n*Overload 2*  \n  :param maxRanges: int\n  :return: java.lang.String",
  "toTracking": "Destructively convert this WritableRowSet into a TrackingWritableRowSet.\n \n This is really only suitable when the caller \"owns\" this WritableRowSet. Programming errors may occur if the any\n code holds onto references to this rather than the result, because there may be ambiguity about resource\n ownership.\n \n Implementations are free to transfer ownership of resources from this object to the result. As such, it is an\n error to directly use this object afterwards; callers must instead use the returned result.\n \n It is an error to invoke this on an instance that is already tracking.\n\n:return: (io.deephaven.engine.rowset.TrackingWritableRowSet) A TrackingWritableRowSet constructed from this WritableRowSet, or this if already\n         tracking",
  "union": "Returns a new RowSet representing the keys present in both this RowSet and the argument RowSet.\n\n:param indexToAdd: (io.deephaven.engine.rowset.RowSet) - A RowSet whose keys will be joined with our own to produce a new RowSet.\n:return: (io.deephaven.engine.rowset.WritableRowSet) a new RowSet with the union of the keys in both this RowSet and rowSetToAdd.",
  "update": "Simultaneously adds the keys from the first RowSet and removes the keys from the second one. API assumption: the\n intersection of added and removed is empty.\n\n:param added: io.deephaven.engine.rowset.RowSet\n:param removed: io.deephaven.engine.rowset.RowSet",
  "validate": ":param failMsg: java.lang.String",
  "writeExternal": ":param out: java.io.ObjectOutput",
  "writeImpl": "Debugging tool to serialize the inner set implementation.\n\n:param out: (java.io.ObjectOutput) - The destination"
 },
 "path": "io.deephaven.engine.rowset.impl.WritableRowSetImpl",
 "typeName": "class"
}