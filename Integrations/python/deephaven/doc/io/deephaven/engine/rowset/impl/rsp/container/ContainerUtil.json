{
 "className": "io.deephaven.engine.rowset.impl.rsp.container.ContainerUtil",
 "methods": {
  "advanceUntil": "Find the smallest integer larger than pos such that array[pos]>= min. If none can be found, return length.\n Based on code by O. Kaser.\n\n:param array: (short[]) - array to search within\n:param pos: (int) - starting position of the search\n:param length: (int) - length of the array to search\n:param min: (short) - minimum value\n:return: (int) x greater than pos such that array[pos] is at least as large as min, pos is is equal to length if it is\n         not possible.",
  "cardinalityInBitmapRange": "Hamming weight of the bitset in the range start, start+1,..., end-1\n\n:param bitmap: (long[]) - array of words representing a bitset\n:param start: (int) - first index (inclusive)\n:param end: (int) - last index (exclusive)\n:return: (int) the hamming weight of the corresponding range",
  "cardinalityInBitmapWordRange": "Hamming weight of the 64-bit words involved in the range start, start+1,..., end-1, that is, it will compute the\n cardinality of the bitset from index (floor(start/64) to floor((end-1)/64)) inclusively.\n\n:param bitmap: (long[]) - array of words representing a bitset\n:param start: (int) - first index (inclusive)\n:param end: (int) - last index (exclusive)\n:return: (int) the hamming weight of the corresponding words",
  "compareUnsigned": "Compares the two specified short values, treating them as unsigned values between 0 and\n 2^16 - 1 inclusive.\n\n:param a: (short) - the first unsigned short to compare\n:param b: (short) - the second unsigned short to compare\n:return: (int) a negative value if a is less than b; a positive value if a is greater than\n         b; or zero if they are equal",
  "fillArrayAND": "Compute the bitwise AND between two long arrays and write the set bits in the container.\n\n:param container: (short[]) - where we write\n:param bitmap1: (long[]) - first bitmap\n:param bitmap2: (long[]) - second bitmap",
  "fillArrayANDNOT": "Compute the bitwise ANDNOT between two long arrays and write the set bits in the container.\n\n:param container: (short[]) - where we write\n:param bitmap1: (long[]) - first bitmap\n:param bitmap2: (long[]) - second bitmap",
  "fillArrayXOR": "Compute the bitwise XOR between two long arrays and write the set bits in the container.\n\n:param container: (short[]) - where we write\n:param bitmap1: (long[]) - first bitmap\n:param bitmap2: (long[]) - second bitmap",
  "flipBitmapRange": "flip bits at start, start+1,..., end-1\n\n:param bitmap: (long[]) - array of words to be modified\n:param start: (int) - first index to be modified (inclusive)\n:param end: (int) - last index to be modified (exclusive)",
  "flipBitmapRangeAndCardinalityChange": "flip bits at start, start+1,..., end-1 and report the cardinality change\n\n:param bitmap: (long[]) - array of words to be modified\n:param start: (int) - first index to be modified (inclusive)\n:param end: (int) - last index to be modified (exclusive)\n:return: (int) cardinality change",
  "iterateUntil": "Find the smallest integer larger than pos such that array[pos]>= min. If none can be found, return length.\n\n:param array: (short[]) - array to search within\n:param pos: (int) - starting position of the search\n:param length: (int) - length of the array to search\n:param min: (int) - minimum value\n:return: (int) x greater than pos such that array[pos] is at least as large as min, pos is is equal to length if it is\n         not possible.",
  "partialRadixSort": "Sorts the data by the 16 bit prefix.\n\n:param data: (int[]) - - the data",
  "rangeSearch": "Look for the biggest value of i that satisfies begin <= i < end and comp.directionFrom(i) >= 0.\n\n:param begin: (int) - The beginning of the range (inclusive)\n:param end: (int) - The end of the range (exclusive)\n:param comp: (io.deephaven.engine.rowset.impl.rsp.container.ContainerUtil.TargetComparator) - a TargetComparator.\n:return: (int) the last position i inside the provided range that satisfies comp.directionFrom(i) >= 0, or -1 if none\n         does.",
  "resetBitmapRange": "clear bits at start, start+1,..., end-1\n\n:param bitmap: (long[]) - array of words to be modified\n:param start: (int) - first index to be modified (inclusive)\n:param end: (int) - last index to be modified (exclusive)",
  "resetBitmapRangeAndCardinalityChange": "reset bits at start, start+1,..., end-1 and report the cardinality change\n\n:param bitmap: (long[]) - array of words to be modified\n:param start: (int) - first index to be modified (inclusive)\n:param end: (int) - last index to be modified (exclusive)\n:return: (int) cardinality change",
  "search": "Search for the largest value in array such that comp.directionFrom(value) > 0, or any value such that\n comp.directionFrom(value) == 0, and return its index. If there is no such a value return -1.\n\n:param array: (short[]) - Array with values sorted in increasing order.\n:param begin: (int) - Start position in the array for the search.\n:param end: (int) - One past the last position in the array for the search.\n:param comp: (io.deephaven.engine.rowset.impl.rsp.container.ContainerUtil.TargetComparator) - A comparator.\n:return: (int) -1 if comp.directionFrom(array[begin]) < 0, otherwise the biggest position pos in [begin, end - 1] such\n         that comp.directionFrom(array[pos]) > 0 or, if there is a one or more positions pos for which\n         comp.directionFrom(array[pos]) == 0, return any of them.",
  "select": "Given a word w, return the position of the jth true bit.\n\n:param w: (long) - word\n:param j: (int) - index\n:return: (int) position of jth true bit in w",
  "setBitmapRange": "set bits at start, start+1,..., end-1\n\n:param bitmap: (long[]) - array of words to be modified\n:param start: (int) - first index to be modified (inclusive)\n:param end: (int) - last index to be modified (exclusive)",
  "setBitmapRangeAndCardinalityChange": "set bits at start, start+1,..., end-1 and report the cardinality change\n\n:param bitmap: (long[]) - array of words to be modified\n:param start: (int) - first index to be modified (inclusive)\n:param end: (int) - last index to be modified (exclusive)\n:return: (int) cardinality change",
  "unsignedBinarySearch": "Look for value k in array in the range [begin,end). If the value is found, return its index. If not, return\n -(i+1) where i is the index where the value would be inserted. The array is assumed to contain sorted values\n where shorts are interpreted as unsigned integers.\n\n:param array: (short[]) - array where we search\n:param begin: (int) - first index (inclusive)\n:param end: (int) - last index (exclusive)\n:param k: (short) - value we search for\n:return: (int) count",
  "unsignedDifference": "Compute the difference between two sorted lists and write the result to the provided output array\n\n*Overload 1*  \n  :param set1: (short[]) - first array\n  :param length1: (int) - length of first array\n  :param set2: (short[]) - second array\n  :param length2: (int) - length of second array\n  :param buffer: (short[]) - output array\n  :return: (int) cardinality of the difference\n  \n*Overload 2*  \n  :param set1: (io.deephaven.engine.rowset.impl.rsp.container.ShortIterator) - first array\n  :param set2: (io.deephaven.engine.rowset.impl.rsp.container.ShortIterator) - second array\n  :param buffer: (short[]) - output array\n  :return: (int) cardinality of the difference",
  "unsignedExclusiveUnion2by2": "Compute the exclusive union of two sorted lists and write the result to the provided output array\n\n:param set1: (short[]) - first array\n:param length1: (int) - length of first array\n:param set2: (short[]) - second array\n:param length2: (int) - length of second array\n:param buffer: (short[]) - output array\n:return: (int) cardinality of the exclusive union",
  "unsignedIntersect2by2": "Intersect two sorted lists and write the result to the provided output array\n\n:param set1: (short[]) - first array\n:param length1: (int) - length of first array\n:param set2: (short[]) - second array\n:param length2: (int) - length of second array\n:param buffer: (short[]) - output array\n:return: (int) cardinality of the intersection",
  "unsignedIntersects": "Checks if two arrays intersect\n\n:param set1: (short[]) - first array\n:param length1: (int) - length of first array\n:param set2: (short[]) - second array\n:param length2: (int) - length of second array\n:return: (boolean) true if they intersect",
  "unsignedLocalIntersect2by2Cardinality": "Compute the cardinality of the intersection\n\n:param set1: (short[]) - first set\n:param length1: (int) - how many values to consider in the first set\n:param set2: (short[]) - second set\n:param length2: (int) - how many values to consider in the second set\n:return: (int) cardinality of the intersection",
  "unsignedUnion2by2": "Unite two sorted lists and write the result to the provided output array\n\n:param set1: (short[]) - first array\n:param offset1: (int) - offset of first array\n:param length1: (int) - length of first array\n:param set2: (short[]) - second array\n:param offset2: (int) - offset of second array\n:param length2: (int) - length of second array\n:param buffer: (short[]) - output array\n:return: (int) cardinality of the union"
 },
 "path": "io.deephaven.engine.rowset.impl.rsp.container.ContainerUtil",
 "text": "Various useful methods for roaring bitmaps.",
 "typeName": "class"
}