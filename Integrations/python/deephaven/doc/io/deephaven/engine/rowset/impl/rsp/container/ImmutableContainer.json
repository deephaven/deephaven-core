{
 "className": "io.deephaven.engine.rowset.impl.rsp.container.ImmutableContainer",
 "methods": {
  "cowRef": "Get a shared, copy-on-write copy of an existing container. Mutations on the returned container will always return\n a copy and leave the original container unchanged.\n \n This operation allows for cheap read-only references to the same values, at the cost of an additional copy for\n any first mutation.\n\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) A copy-on-write reference to the container.",
  "deepCopy": "Get a full deep copy of the container in a new container object.\n\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) A copy of the container as a new object.",
  "iadd": "Add all shorts in [begin,end) using an unsigned interpretation. May generate a new container.\n\n:param begin: (int) - start of range (inclusive)\n:param end: (int) - end of range (exclusive)\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) the new container",
  "iand": "Computes the in-place bitwise AND of this container with another (intersection). The current container is\n generally modified, whereas the provided container (x) is unaffected. May generate a new container.\n\n*Overload 1*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.ArrayContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 2*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.BitmapContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 3*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.RunContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container",
  "iandNot": "Computes the in-place bitwise ANDNOT of this container with another (difference). The current container is\n generally modified, whereas the provided container (x) is unaffected. May generate a new container.\n\n*Overload 1*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.ArrayContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 2*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.BitmapContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 3*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.RunContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container",
  "iandRange": "Calculate the intersection of this container and a range; may overwrite the existing container or return a new\n one.\n\n:param start: (int) - start of range\n:param end: (int) - end of range, exclusive.\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) a Container containing the intersction of this container and the given range.",
  "iappend": "Add all shorts in [begin,end) using an unsigned interpretation. May generate a new container. The beginning of\n the range should be strictly greater than the last value already present in the container, if there is one.\n\n:param begin: (int) - start of range (inclusive)\n:param end: (int) - end of range (exclusive)\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) the new container",
  "inot": "Computes the in-place bitwise NOT of this container (complement). Only those bits within the range are affected.\n The current container is generally modified. May generate a new container.\n\n:param rangeStart: (int) - beginning of range (inclusive); 0 is beginning of this container.\n:param rangeEnd: (int) - ending of range (exclusive)\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) (partially) complemented container",
  "ior": "Computes the in-place bitwise OR of this container with another (union). The current container is generally\n modified, whereas the provided container (x) is unaffected. May generate a new container.\n\n*Overload 1*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.ArrayContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 2*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.BitmapContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 3*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.RunContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container",
  "iremove": "Remove shorts in [begin,end) using an unsigned interpretation. May generate a new container.\n\n:param begin: (int) - start of range (inclusive)\n:param end: (int) - end of range (exclusive)\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) the new container",
  "isShared": ":return: boolean",
  "iset": "Insert a short to the container. May generate a new container.\n\n:param x: (short) - short to be added\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) the resulting container",
  "iunset": "Create a new container with the short removed.\n\n:param x: (short) - to be removed\n:return: (io.deephaven.engine.rowset.impl.rsp.container.Container) New container without x.",
  "ixor": "Computes the in-place bitwise XOR of this container with another (symmetric difference). The current container is\n generally modified, whereas the provided container (x) is unaffected. May generate a new container.\n\n*Overload 1*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.ArrayContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 2*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.BitmapContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container\n  \n*Overload 3*  \n  :param x: (io.deephaven.engine.rowset.impl.rsp.container.RunContainer) - Another container\n  :return: (io.deephaven.engine.rowset.impl.rsp.container.Container) aggregated container"
 },
 "path": "io.deephaven.engine.rowset.impl.rsp.container.ImmutableContainer",
 "typeName": "class"
}