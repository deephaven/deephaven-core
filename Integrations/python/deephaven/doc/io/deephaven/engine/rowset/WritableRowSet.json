{
 "className": "io.deephaven.engine.rowset.WritableRowSet",
 "methods": {
  "compact": "May reclaim some unused memory.",
  "extract": "Removes all the keys from other RowSet that are present in this RowSet.\n\n:param other: io.deephaven.engine.rowset.RowSet\n:return: (io.deephaven.engine.rowset.WritableRowSet) a new RowSet representing the keys removed",
  "insert": "**Incompatible overloads text - text from the first overload:**\n\nAdd a single key to this RowSet if it's not already present.\n\n*Overload 1*  \n  :param key: (long) - The key to add\n  \n*Overload 2*  \n  :param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.OrderedRowKeys>) - The LongChunk of OrderedRowKeys to insert\n  :param offset: (int) - The offset in keys to begin inserting keys from\n  :param length: (int) - The number of keys to insert\n  \n*Overload 3*  \n  :param added: (io.deephaven.engine.rowset.RowSet) - The RowSet to add",
  "insertRange": "Add all keys in a closed range to this RowSet if they are not already present.\n\n:param startKey: (long) - The first key to add\n:param endKey: (long) - The last key to add (inclusive)",
  "insertWithShift": "For each key in the provided RowSet, shift it by shiftAmount and insert it in the current RowSet.\n\n:param shiftAmount: (long) - the amount to add to each key in the RowSet argument before insertion.\n:param other: (io.deephaven.engine.rowset.RowSet) - the RowSet with the keys to shift and insert.",
  "remove": "**Incompatible overloads text - text from the first overload:**\n\nRemove a single key from this RowSet if it's present.\n\n*Overload 1*  \n  :param key: (long) - The key to remove\n  \n*Overload 2*  \n  :param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.OrderedRowKeys>) - The LongChunk of OrderedRowKeys to remove\n  :param offset: (int) - The offset in keys to begin removing keys from\n  :param length: (int) - The number of keys to remove\n  \n*Overload 3*  \n  :param removed: (io.deephaven.engine.rowset.RowSet) - The RowSet to remove",
  "removeRange": "Remove all keys in a closed range from this RowSet if they are present.\n\n:param startKey: (long) - The first key to remove\n:param endKey: (long) - The last key to remove (inclusive)",
  "retain": "Modifies the RowSet by removing any keys not in the rowSetToIntersect argument.\n\n:param rowSetToIntersect: (io.deephaven.engine.rowset.RowSet) - a rowSet with the keys to retain; any other keys not in rowSetToIntersect will be\n        removed.",
  "retainRange": "Modifies the RowSet by keeping only keys in the interval [startRowKey, endRowKey]\n\n:param startRowKey: (long) - beginning of interval of keys to keep.\n:param endRowKey: (long) - endRowKey of interval of keys to keep (inclusive).",
  "shiftInPlace": ":param shiftAmount: long",
  "toTracking": "Destructively convert this WritableRowSet into a TrackingWritableRowSet.\n \n This is really only suitable when the caller \"owns\" this WritableRowSet. Programming errors may occur if the any\n code holds onto references to {@link this} rather than the result, because there may be ambiguity about resource\n ownership.\n \n Implementations are free to transfer ownership of resources from this object to the result. As such, it is an\n error to directly use this object afterwards; callers must instead use the returned result.\n \n It is an error to invoke this on an instance that is already tracking.\n\n:return: (io.deephaven.engine.rowset.TrackingWritableRowSet) A TrackingWritableRowSet constructed from this WritableRowSet, or this if already\n         tracking",
  "trackingCast": "Cast this RowSet reference to a TrackingRowSet.\n\n:return: (io.deephaven.engine.rowset.TrackingWritableRowSet) this cast to a TrackingRowSet",
  "update": "Simultaneously adds the keys from the first RowSet and removes the keys from the second one. API assumption: the\n intersection of added and removed is empty.\n\n:param added: io.deephaven.engine.rowset.RowSet\n:param removed: io.deephaven.engine.rowset.RowSet"
 },
 "path": "io.deephaven.engine.rowset.WritableRowSet",
 "text": "RowSet that may be mutated (that is, have its contents changed in-place). Note that all RowSet\n implementations conform to this interface, but many APIs only expose the super-interface to discourage inappropriate\n changes.",
 "typeName": "interface"
}