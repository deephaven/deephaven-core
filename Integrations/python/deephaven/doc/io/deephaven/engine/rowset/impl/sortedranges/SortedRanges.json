{
 "className": "io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
 "methods": {
  "add": ":param v: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "addRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "addRangeUnsafe": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "addUnsafe": ":param v: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "append": ":param v: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "appendRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "appendRangeUnsafe": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "appendUnsafe": ":param v: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "applyShift": ":param shift: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "applyShiftOnNew": ":param shift: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "arraySizeRoundingInt": ":param sizeToRound: int\n:return: int",
  "arraySizeRoundingShort": ":param sizeToRound: int\n:return: int",
  "bytesAllocated": ":return: int",
  "bytesUsed": ":return: int",
  "contains": ":param v: long\n:return: boolean",
  "containsRange": ":param start: long\n:param end: long\n:return: boolean",
  "count": ":return: int",
  "deepCopy": "Get a deep copy of the current object, not shared with anybody.\n\n Note this is not thread safe.\n\n:return: (io.deephaven.engine.rowset.impl.sortedranges.SortedRanges) A full, deep copy of this object with a reference count of 1 (not shared).",
  "find": ":param v: long\n:return: long",
  "first": ":return: long",
  "fits": "*Overload 1*  \n  :param value: long\n  :return: boolean\n  \n*Overload 2*  \n  :param start: long\n  :param end: long\n  :return: boolean",
  "fitsForAppend": ":param end: long\n:return: boolean",
  "forEachLong": ":param lac: io.deephaven.util.datastructures.LongAbortableConsumer\n:return: boolean",
  "forEachLongRange": ":param lrac: io.deephaven.util.datastructures.LongRangeAbortableConsumer\n:return: boolean",
  "get": ":param targetPos: long\n:return: long",
  "getAverageRunLengthEstimate": ":return: long",
  "getCardinality": ":return: long",
  "getIterator": ":return: io.deephaven.engine.rowset.RowSet.Iterator",
  "getKeysForPositions": ":param inputPositions: java.util.PrimitiveIterator.OfLong\n:param outputKeys: java.util.function.LongConsumer",
  "getRangeIterator": ":return: io.deephaven.engine.rowset.RowSet.RangeIterator",
  "getReverseIterator": ":return: io.deephaven.engine.rowset.RowSet.SearchIterator",
  "getRowSequenceByKeyRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.RowSequence",
  "getRowSequenceByPosition": ":param pos: long\n:param length: long\n:return: io.deephaven.engine.rowset.RowSequence",
  "getRowSequenceByPositionWithStart": ":param iStartPos: long\n:param istart: int\n:param startPosForOK: long\n:param lengthForOK: long\n:return: io.deephaven.engine.rowset.RowSequence",
  "getRowSequenceIterator": ":return: io.deephaven.engine.rowset.RowSequence.Iterator",
  "getSearchIterator": ":return: io.deephaven.engine.rowset.RowSet.SearchIterator",
  "hasMoreThanOneRange": ":return: boolean",
  "insertImpl": "*Overload 1*  \n  :param other: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges\n  :return: io.deephaven.engine.rowset.impl.OrderedLongSet\n  \n*Overload 2*  \n  :param other: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges\n  :param writeCheck: boolean\n  :return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "intersectOnNew": ":param toIntersect: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "intersectOnNewImpl": ":param other: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "invertOnNew": ":param rit: io.deephaven.engine.rowset.RowSet.RangeIterator\n:param builder: io.deephaven.engine.rowset.impl.OrderedLongSetBuilderSequential\n:param maxPosition: long\n:return: boolean",
  "invertRangeOnNew": ":param start: long\n:param end: long\n:param maxPosition: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "isDense": ":return: boolean",
  "isDenseInt": ":param data: int[]\n:param count: int\n:return: boolean",
  "isDenseLong": ":param data: long[]\n:param count: int\n:return: boolean",
  "isDenseShort": ":param data: short[]\n:param count: int\n:return: boolean",
  "isEmpty": ":return: boolean",
  "isSparse": ":return: boolean",
  "ixAppendRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixCardinality": ":return: long",
  "ixCompact": ":return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixContainsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixCowRef": ":return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "ixFind": ":param key: long\n:return: long",
  "ixFirstKey": ":return: long",
  "ixForEachLong": ":param lc: io.deephaven.util.datastructures.LongAbortableConsumer\n:return: boolean",
  "ixForEachLongRange": ":param lrac: io.deephaven.util.datastructures.LongRangeAbortableConsumer\n:return: boolean",
  "ixGet": ":param pos: long\n:return: long",
  "ixGetAverageRunLengthEstimate": ":return: long",
  "ixGetKeysForPositions": ":param inputPositions: java.util.PrimitiveIterator.OfLong\n:param outputKeys: java.util.function.LongConsumer",
  "ixGetRowSequenceByKeyRange": ":param startKeyInclusive: long\n:param endKeyInclusive: long\n:return: io.deephaven.engine.rowset.RowSequence",
  "ixGetRowSequenceByPosition": ":param startPositionInclusive: long\n:param length: long\n:return: io.deephaven.engine.rowset.RowSequence",
  "ixGetRowSequenceIterator": ":return: io.deephaven.engine.rowset.RowSequence.Iterator",
  "ixInsert": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.engine.rowset.impl.OrderedLongSet\n  \n*Overload 2*  \n  :param added: io.deephaven.engine.rowset.impl.OrderedLongSet\n  :return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixInsertRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixInsertSecondHalf": ":param keys: io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.OrderedRowKeys>\n:param offset: int\n:param length: int\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixInsertWithShift": ":param shiftAmount: long\n:param other: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixIntersectOnNew": ":param toIntersect: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixInvertOnNew": "Invert the given OrderedLongSet.\n\n:param keys: (io.deephaven.engine.rowset.impl.OrderedLongSet) - OrderedLongSet of keys to invert\n:param maxPosition: (long) - the largest position to add to indexBuilder, inclusive\n:return: (io.deephaven.engine.rowset.impl.OrderedLongSet) the inverse of keys",
  "ixIsEmpty": ":return: boolean",
  "ixIterator": ":return: io.deephaven.engine.rowset.RowSet.Iterator",
  "ixLastKey": ":return: long",
  "ixMinusOnNew": ":param other: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixOverlaps": ":param impl: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: boolean",
  "ixOverlapsRange": ":param start: long\n:param end: long\n:return: boolean",
  "ixRangeIterator": ":return: io.deephaven.engine.rowset.RowSet.RangeIterator",
  "ixRangesCountUpperBound": ":return: long",
  "ixRefCount": ":return: int",
  "ixRemove": "*Overload 1*  \n  :param key: long\n  :return: io.deephaven.engine.rowset.impl.OrderedLongSet\n  \n*Overload 2*  \n  :param removed: io.deephaven.engine.rowset.impl.OrderedLongSet\n  :return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixRemoveRange": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixRemoveSecondHalf": ":param keys: io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.OrderedRowKeys>\n:param offset: int\n:param length: int\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixRetain": ":param toIntersect: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixRetainRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixReverseIterator": ":return: io.deephaven.engine.rowset.RowSet.SearchIterator",
  "ixSearchIterator": ":return: io.deephaven.engine.rowset.RowSet.SearchIterator",
  "ixShiftInPlace": ":param shiftAmount: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixShiftOnNew": ":param shiftAmount: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixSubindexByKeyOnNew": ":param startKey: long\n:param endKey: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixSubindexByPosOnNew": ":param startPos: long\n:param endPosExclusive: long\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixSubsetOf": ":param other: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: boolean",
  "ixToRspOnNew": ":return: io.deephaven.engine.rowset.impl.rsp.RspBitmap",
  "ixUnionOnNew": ":param other: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixUpdate": ":param added: io.deephaven.engine.rowset.impl.OrderedLongSet\n:param removed: io.deephaven.engine.rowset.impl.OrderedLongSet\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "ixValidate": ":param failMsg: java.lang.String",
  "last": ":return: long",
  "makeEmpty": ":return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "makeForKnownRange": ":param first: long\n:param last: long\n:param isDense: boolean\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "makeSingleElement": ":param v: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "makeSingleRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "overlaps": ":param rangeIter: io.deephaven.engine.rowset.RowSet.RangeIterator\n:return: boolean",
  "overlapsRange": ":param start: long\n:param end: long\n:return: boolean",
  "remove": "*Overload 1*  \n  :param v: long\n  :return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges\n  \n*Overload 2*  \n  :param removed: io.deephaven.engine.rowset.impl.OrderedLongSet\n  :return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "removeRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "retainRange": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "self": "Derived classes should implement self() by simply \"return this\" of the right type. This method exists only as an\n implementation artifact for a type safe implementation of the curiously recurring generic pattern.\n\n:return: (io.deephaven.engine.rowset.impl.sortedranges.SortedRanges) this object, with the right, most derived type.",
  "subRangesByKey": ":param start: long\n:param end: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "subRangesByPos": ":param startPosIn: long\n:param endPosIn: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "subsetOf": ":param ritOther: io.deephaven.engine.rowset.RowSet.RangeIterator\n:return: boolean",
  "toRsp": ":return: io.deephaven.engine.rowset.impl.rsp.RspBitmap",
  "toString": ":return: java.lang.String",
  "tryCompact": ":param k: int\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "tryCompactUnsafe": ":param k: (int) - if k == 0, compact if count < capacity. k > 0, compact if (capacity - count > (capacity >> k).\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "tryMakeForKnownRangeFinalCapacityLowerBound": ":param initialCapacity: int\n:param finalCapacityLowerBound: int\n:param first: long\n:param last: long\n:param isDense: boolean\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "tryMakeForKnownRangeKnownCount": ":param count: int\n:param first: long\n:param last: long\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "tryMakeForKnownRangeUnknownMaxCapacity": ":param initialCapacity: int\n:param first: long\n:param last: long\n:param isDense: boolean\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
  "unionOnNew": ":param sar: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges\n:param otherSar: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges\n:return: io.deephaven.engine.rowset.impl.OrderedLongSet",
  "unionOnNewLegacy": ":param sar: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges\n:param otherSar: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges\n:return: io.deephaven.engine.rowset.impl.sortedranges.SortedRanges"
 },
 "path": "io.deephaven.engine.rowset.impl.sortedranges.SortedRanges",
 "typeName": "class"
}