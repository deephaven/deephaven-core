{
 "className": "io.deephaven.engine.liveness.LivenessScopeStack",
 "methods": {
  "open": "**Incompatible overloads text - text from the first overload:**\n\n\n Push a scope onto the scope stack, and get an SafeCloseable that pops it.\n \n This is useful for enclosing scope usage in a try-with-resources block.\n\n*Overload 1*  \n  :param scope: (io.deephaven.engine.liveness.LivenessScope) - The scope\n  :param releaseOnClose: (boolean) - Whether the scope should be released when the result is closed\n  :return: (io.deephaven.util.SafeCloseable) A SafeCloseable whose SafeCloseable.close() method invokes pop(LivenessScope)\n           for the scope (followed by LivenessScope.release() if releaseOnClose is true)\n  \n*Overload 2*  \n  :return: (io.deephaven.util.SafeCloseable) A SafeCloseable whose SafeCloseable.close() method invokes pop(LivenessScope)\n           for the scope, followed by LivenessScope.release()",
  "peek": "Get the scope at the top of the current thread's scope stack, or the base manager if no scopes have been pushed\n but not popped on this thread.\n \n This method defines the manager that should be used for all new LivenessArtifacts.\n\n:return: (io.deephaven.engine.liveness.LivenessManager) The current manager",
  "pop": "Pop a scope from the current thread's scope stack.\n \n Must be the current top of the stack.\n\n:param scope: (io.deephaven.engine.liveness.LivenessScope) - The scope",
  "push": "Push a scope onto the current thread's scope stack.\n\n:param scope: (io.deephaven.engine.liveness.LivenessScope) - The scope"
 },
 "path": "io.deephaven.engine.liveness.LivenessScopeStack",
 "text": "Support for a thread-local stack of LivenessScopes to allow the preferred programming model for scoping of\n LivenessArtifacts.\n \n Instances expect to be used on exactly one thread, and hence do not take any measures to ensure thread safety.",
 "typeName": "class"
}