{
 "className": "io.deephaven.properties.PropertyVisitorError",
 "methods": {
  "valueOf": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)\n\n:param name: (java.lang.String) - the name of the enum constant to be returned.\n:return: (io.deephaven.properties.PropertyVisitorError) the enum constant with the specified name",
  "values": "Returns an array containing the constants of this enum type, in\nthe order they are declared.\n\n:return: (io.deephaven.properties.PropertyVisitorError[]) an array containing the constants of this enum type, in the order they are declared",
  "visit": "**Incompatible overloads text - text from the first overload:**\n\nPerforms this operation on the given key and String value.\n\n*Overload 1*  \n  :param key: (java.lang.String) - the key\n  :param value: (java.lang.String) - the value\n  \n*Overload 2*  \n  :param key: (java.lang.String) - the key\n  :param value: (int) - the value\n  \n*Overload 3*  \n  :param key: (java.lang.String) - the key\n  :param value: (long) - the value\n  \n*Overload 4*  \n  :param key: (java.lang.String) - the key\n  :param value: (boolean) - the value"
 },
 "path": "io.deephaven.properties.PropertyVisitorError",
 "text": "A PropertyVisitor whose methods all throw IllegalStateException with the relevant key and value\n context. Meant to be a utility class that other PropertyVisitors can use, for example in the case of parsing\n an unknown key.",
 "typeName": "enum"
}