{
 "className": "io.deephaven.grpc_api.arrow.FlightServiceGrpcImpl",
 "methods": {
  "doExchangeCustom": "Establish a new DoExchange bi-directional stream.\n\n:param responseObserver: (io.grpc.stub.StreamObserver<java.io.InputStream>) - the observer to reply to\n:return: (io.grpc.stub.StreamObserver<java.io.InputStream>) the observer that grpc can delegate received messages to",
  "doGetCustom": ":param request: org.apache.arrow.flight.impl.Flight.Ticket\n:param responseObserver: io.grpc.stub.StreamObserver<java.io.InputStream>",
  "doPutCustom": "Establish a new DoPut bi-directional stream.\n\n:param responseObserver: (io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.PutResult>) - the observer to reply to\n:return: (io.grpc.stub.StreamObserver<java.io.InputStream>) the observer that grpc can delegate received messages to",
  "getFlightInfo": ":param request: org.apache.arrow.flight.impl.Flight.FlightDescriptor\n:param responseObserver: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.FlightInfo>",
  "getSchema": ":param request: org.apache.arrow.flight.impl.Flight.FlightDescriptor\n:param responseObserver: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.SchemaResult>",
  "handshake": ":param responseObserver: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.HandshakeResponse>\n:return: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.HandshakeRequest>",
  "listFlights": ":param request: org.apache.arrow.flight.impl.Flight.Criteria\n:param responseObserver: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.FlightInfo>"
 },
 "path": "io.deephaven.grpc_api.arrow.FlightServiceGrpcImpl",
 "typeName": "class"
}