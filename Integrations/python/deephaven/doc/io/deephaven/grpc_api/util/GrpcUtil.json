{
 "className": "io.deephaven.grpc_api.util.GrpcUtil",
 "methods": {
  "mapOnNext": "This helper allows one to propagate the onError/onComplete calls through to the delegate, while applying the\n provided mapping function to the original input objects. The mapper may return null to skip sending a message to\n the delegated stream observer.\n\nNote: Java generics information - <T,\nV>\n\n:param delegate: (io.grpc.stub.StreamObserver<V>) - the stream observer to ultimately receive this message\n:param mapper: (java.util.function.Function<T,V>) - the function that maps from input objects to the objects the stream observer expects\n:return: (io.grpc.stub.StreamObserver<T>) a new stream observer that maps from T to V before delivering to delegate::onNext",
  "rpcWrapper": "Utility to avoid errors escaping to the stream, to make sure the server log and client both see the message if\n there is an error, and if the error was not meant to propagate to a gRPC client, obfuscates it.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.io.IOException>\n  \n  :param log: (io.deephaven.io.logger.Logger) - the current class's logger\n  :param response: (io.grpc.stub.StreamObserver<?>) - the responseStream used to send messages to the client\n  :param lambda: (io.deephaven.util.FunctionalInterfaces.ThrowingRunnable<T>) - the code to safely execute\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param log: (io.deephaven.io.logger.Logger) - the current class's logger\n  :param response: (io.grpc.stub.StreamObserver<?>) - the responseStream used to send messages to the client\n  :param lambda: (java.util.concurrent.Callable<T>) - the code to safely execute\n  :return: (T) the result of the lambda",
  "safelyError": "Writes an error to the observer in a try/catch block to minimize damage caused by failing observer call.\n \n\n This will always synchronize on the observer to ensure thread safety when interacting with the grpc response\n stream.\n\n*Overload 1*  \n  :param observer: io.grpc.stub.StreamObserver<?>\n  :param statusCode: com.google.rpc.Code\n  :param msg: java.lang.String\n  \n*Overload 2*  \n  :param observer: io.grpc.stub.StreamObserver<?>\n  :param exception: io.grpc.StatusRuntimeException",
  "safelyExecute": "Wraps the provided runner in a try/catch block to minimize damage caused by a failing externally supplied helper.\n\n:param runner: (io.deephaven.util.FunctionalInterfaces.ThrowingRunnable<java.lang.Exception>) - the runnable to execute safely",
  "safelyExecuteLocked": "Wraps the provided runner in a try/catch block to minimize damage caused by a failing externally supplied helper.\n\n:param lockedObject: java.lang.Object\n:param runner: (io.deephaven.util.FunctionalInterfaces.ThrowingRunnable<java.lang.Exception>) - the runnable to execute safely",
  "securelyWrapError": "*Overload 1*  \n  :param log: io.deephaven.io.logger.Logger\n  :param err: java.lang.Throwable\n  :return: io.grpc.StatusRuntimeException\n  \n*Overload 2*  \n  :param log: io.deephaven.io.logger.Logger\n  :param err: java.lang.Throwable\n  :param statusCode: com.google.rpc.Code\n  :return: io.grpc.StatusRuntimeException",
  "statusRuntimeException": ":param statusCode: com.google.rpc.Code\n:param details: java.lang.String\n:return: io.grpc.StatusRuntimeException"
 },
 "path": "io.deephaven.grpc_api.util.GrpcUtil",
 "typeName": "class"
}