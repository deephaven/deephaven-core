{
 "className": "io.deephaven.grpc_api.table.ops.filter.NormalizeFilterUtil",
 "methods": {
  "doAnd": "*Overload 1*  \n  :param filtersList: java.util.List<io.deephaven.proto.backplane.grpc.Condition>\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 2*  \n  :param filtersList: java.util.List<io.deephaven.proto.backplane.grpc.Condition>\n  :param visitor: io.deephaven.grpc_api.table.ops.filter.FilterVisitor<io.deephaven.proto.backplane.grpc.Condition>\n  :return: io.deephaven.proto.backplane.grpc.Condition",
  "doComparison": ":param operation: io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation\n:param caseSensitivity: io.deephaven.proto.backplane.grpc.CaseSensitivity\n:param lhs: io.deephaven.proto.backplane.grpc.Value\n:param rhs: io.deephaven.proto.backplane.grpc.Value\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "doContains": ":param reference: io.deephaven.proto.backplane.grpc.Reference\n:param searchString: java.lang.String\n:param caseSensitivity: io.deephaven.proto.backplane.grpc.CaseSensitivity\n:param matchType: io.deephaven.proto.backplane.grpc.MatchType\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "doIn": ":param target: io.deephaven.proto.backplane.grpc.Value\n:param candidatesList: java.util.List<io.deephaven.proto.backplane.grpc.Value>\n:param caseSensitivity: io.deephaven.proto.backplane.grpc.CaseSensitivity\n:param matchType: io.deephaven.proto.backplane.grpc.MatchType\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "doInvert": "*Overload 1*  \n  :param condition: io.deephaven.proto.backplane.grpc.Condition\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 2*  \n  :param condition: io.deephaven.proto.backplane.grpc.Condition\n  :param visitor: io.deephaven.grpc_api.table.ops.filter.FilterVisitor<io.deephaven.proto.backplane.grpc.Condition>\n  :return: io.deephaven.proto.backplane.grpc.Condition",
  "doInvoke": ":param method: java.lang.String\n:param target: io.deephaven.proto.backplane.grpc.Value\n:param argumentsList: java.util.List<io.deephaven.proto.backplane.grpc.Value>\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "doIsNull": ":param reference: io.deephaven.proto.backplane.grpc.Reference\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "doMatches": ":param reference: io.deephaven.proto.backplane.grpc.Reference\n:param regex: java.lang.String\n:param caseSensitivity: io.deephaven.proto.backplane.grpc.CaseSensitivity\n:param matchType: io.deephaven.proto.backplane.grpc.MatchType\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "doNot": ":param filter: io.deephaven.proto.backplane.grpc.Condition\n:param visitor: io.deephaven.grpc_api.table.ops.filter.FilterVisitor<io.deephaven.proto.backplane.grpc.Condition>\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "doOr": "*Overload 1*  \n  :param filtersList: java.util.List<io.deephaven.proto.backplane.grpc.Condition>\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 2*  \n  :param filtersList: java.util.List<io.deephaven.proto.backplane.grpc.Condition>\n  :param visitor: io.deephaven.grpc_api.table.ops.filter.FilterVisitor<io.deephaven.proto.backplane.grpc.Condition>\n  :return: io.deephaven.proto.backplane.grpc.Condition",
  "doSearch": ":param searchString: java.lang.String\n:param optionalReferencesList: java.util.List<io.deephaven.proto.backplane.grpc.Reference>\n:return: io.deephaven.proto.backplane.grpc.Condition"
 },
 "path": "io.deephaven.grpc_api.table.ops.filter.NormalizeFilterUtil",
 "text": "Tools to create filter conditions",
 "typeName": "class"
}