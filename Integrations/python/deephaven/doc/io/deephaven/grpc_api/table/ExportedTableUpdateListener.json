{
 "className": "io.deephaven.grpc_api.table.ExportedTableUpdateListener",
 "methods": {
  "destroy": "Attempt to release (destructively when necessary) resources held by this object.  This may render the object\n unusable for subsequent operations.  Implementations should be sure to call super.destroy().\n This is intended to only ever be used as a side effect of decreasing the reference count to 0.",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "onError": ":param t: java.lang.Throwable",
  "onNext": "Process the lifecycle update of an export from the session.\n\n:param notification: io.deephaven.proto.backplane.grpc.ExportNotification",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.grpc_api.table.ExportedTableUpdateListener",
 "text": "Manage the lifecycle of exports that are Tables.\n\n Initially we receive a refresh of exports from the session state. This allows us to timely notify the observer\n of existing table sizes for both static tables and tables that won't tick frequently. When the refresh is\n complete we are sent a notification for exportId == 0 (which is otherwise an invalid export id). Until we see\n that this refresh was complete we will also queue any ticking updates into the refresh batch.\n\n When the refresh is complete, we wait until the end of the current LTM cycle to flush",
 "typeName": "class"
}