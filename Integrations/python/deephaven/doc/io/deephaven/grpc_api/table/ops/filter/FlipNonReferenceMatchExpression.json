{
 "className": "io.deephaven.grpc_api.table.ops.filter.FlipNonReferenceMatchExpression",
 "methods": {
  "exec": ":param filter: io.deephaven.proto.backplane.grpc.Condition\n:return: io.deephaven.proto.backplane.grpc.Condition",
  "onIn": ":param target: io.deephaven.proto.backplane.grpc.Value\n:param candidatesList: java.util.List<io.deephaven.proto.backplane.grpc.Value>\n:param caseSensitivity: io.deephaven.proto.backplane.grpc.CaseSensitivity\n:param matchType: io.deephaven.proto.backplane.grpc.MatchType\n:return: io.deephaven.proto.backplane.grpc.Condition"
 },
 "path": "io.deephaven.grpc_api.table.ops.filter.FlipNonReferenceMatchExpression",
 "text": "Enforces that all IN-type expressions have a reference on the left side and only literals on the right side. Any\n non-reference on the left or reference on the right will trigger the entire IN-type expression being replaced with an\n OR or AND, with a sub-IN for each expression on the right side.\n\n\n Examples: o ColumnA in 1, 2, 3 - left as-is o ColumnA in 1, 2, ColumnB - rewritten as (ColumnA in 1 OR ColumnA in 2\n OR ColumnA in ColumnB) o 1 in 3, 4, 5 - will be rewritten as (3 in 1 OR 4 in 1 OR 5 in 1). This is a silly case, but\n we're not judging. At this step. o 1 in ColumnA, 4, 5 - will be rewritten as (ColumnA in 1 OR 4 in 1 OR 5 in 1) o 1\n in ColumnA - will be rewritten as ColumnA in 1 o ColumnA in ColumnB - will be rewritten as ColumnB in ColumnA. Note\n that like the second example, this isn't productive on its own, but as a pair with a reference on the right, it will\n be noticed by ConvertInvalidInExpressions.\n\n It is assumed that some time after this step, related \"in\" expressions will be merged together, and that these\n one-off expressions will get checked later.",
 "typeName": "class"
}