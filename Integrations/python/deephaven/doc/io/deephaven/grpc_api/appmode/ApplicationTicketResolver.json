{
 "className": "io.deephaven.grpc_api.appmode.ApplicationTicketResolver",
 "methods": {
  "descriptorForName": "Convenience method to convert from a scoped variable name to Flight.FlightDescriptor\n\n:param app: (io.deephaven.appmode.ApplicationState) - the application state that this field is defined in\n:param name: (java.lang.String) - the application variable name to convert\n:return: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) the flight descriptor this descriptor represents",
  "flightInfoFor": "Retrieve a FlightInfo for a given FlightDescriptor.\n\n:param session: io.deephaven.grpc_api.session.SessionState\n:param descriptor: org.apache.arrow.flight.impl.Flight.FlightDescriptor\n:param logId: java.lang.String\n:return: (io.deephaven.grpc_api.session.SessionState.ExportObject<org.apache.arrow.flight.impl.Flight.FlightInfo>) a FlightInfo describing this flight",
  "flightTicketForName": "Convenience method to convert from an application variable name to Flight.Ticket\n\n:param app: (io.deephaven.appmode.ApplicationState) - the application state that this field is defined in\n:param name: (java.lang.String) - the application variable name to convert\n:return: (org.apache.arrow.flight.impl.Flight.Ticket) the ticket this descriptor represents",
  "forAllFlightInfo": "This invokes the provided visitor for each valid flight descriptor this ticket resolver exposes via flight.\n\n:param session: (io.deephaven.grpc_api.session.SessionState) - optional session that the resolver can use to filter which flights a visitor sees\n:param visitor: (java.util.function.Consumer<org.apache.arrow.flight.impl.Flight.FlightInfo>) - the callback to invoke per descriptor path",
  "getLogNameFor": "Create a human readable string to identify this ticket.\n\n:param ticket: (java.nio.ByteBuffer) - the ticket to parse\n:param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n:return: (java.lang.String) a string that is good for log/error messages",
  "onApplicationLoad": ":param app: io.deephaven.appmode.ApplicationState",
  "publish": "**Incompatible overloads text - text from the first overload:**\n\nPublish a new result as a flight descriptor to an export object future.\n\n The user must call SessionState.ExportBuilder.submit(java.util.concurrent.Callable<T>) to publish the result value.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param ticket: (java.nio.ByteBuffer) - (as ByteByffer) the ticket to publish to\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export object; see SessionState for lifecycle propagation details\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - (as Flight.Descriptor) the descriptor to publish to\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export object; see SessionState for lifecycle propagation details",
  "resolve": "**Incompatible overloads text - text from the first overload:**\n\nResolve a flight descriptor to an export object future.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param ticket: (java.nio.ByteBuffer) - (as ByteByffer) the ticket to resolve\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) an export object; see SessionState for lifecycle propagation details\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - the descriptor to resolve\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) an export object; see SessionState for lifecycle propagation details",
  "ticketForName": "Convenience method to convert from an application variable name to Ticket\n\n:param app: (io.deephaven.appmode.ApplicationState) - the application state that this field is defined in\n:param id: (java.lang.String) - the application variable id to convert\n:return: (io.deephaven.proto.backplane.grpc.Ticket) the ticket this descriptor represents"
 },
 "path": "io.deephaven.grpc_api.appmode.ApplicationTicketResolver",
 "typeName": "class"
}