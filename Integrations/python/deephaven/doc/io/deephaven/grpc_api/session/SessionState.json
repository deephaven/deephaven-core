{
 "className": "io.deephaven.grpc_api.session.SessionState",
 "methods": {
  "addExportListener": ":param observer: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.ExportNotification>",
  "addOnCloseCallback": "Attach an on-close callback bound to the life of the session.\n\n:param onClose: (java.io.Closeable) - the callback to invoke at end-of-life",
  "getAuthContext": ":return: (io.deephaven.util.auth.AuthContext) the auth context for this session",
  "getExpiration": ":return: (io.deephaven.grpc_api.session.SessionService.TokenExpiration) the current expiration token for this session",
  "getExport": "**Incompatible overloads text - text from the first overload:**\n\nGrab the ExportObject for the provided id.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param ticket: (io.deephaven.proto.backplane.grpc.Ticket) - the export ticket\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) a future-like object that represents this export\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param ticket: (org.apache.arrow.flight.impl.Flight.Ticket) - the export ticket\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) a future-like object that represents this export\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param exportId: (int) - the export handle id\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) a future-like object that represents this export",
  "getExportIfExists": "Grab the ExportObject for the provided id if it already exists, otherwise return null.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param exportId: (int) - the export handle id\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) a future-like object that represents this export\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param ticket: (io.deephaven.proto.backplane.grpc.Ticket) - the export ticket\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) a future-like object that represents this export",
  "isExpired": ":return: (boolean) whether or not this session is expired",
  "isExportStateFailure": ":param state: io.deephaven.proto.backplane.grpc.ExportNotification.State\n:return: (boolean) true iff the provided export state is a failure state",
  "isExportStateTerminal": ":param state: io.deephaven.proto.backplane.grpc.ExportNotification.State\n:return: (boolean) true iff the provided export state is a terminal state",
  "newExport": "Create an ExportBuilder to create the export after dependencies are satisfied.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param ticket: (org.apache.arrow.flight.impl.Flight.Ticket) - the grpc Flight.Ticket for this export\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export builder\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param ticket: (io.deephaven.proto.backplane.grpc.Ticket) - the grpc Ticket for this export\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export builder\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param exportId: (int) - the export id\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export builder",
  "newServerSideExport": "Create and export a pre-computed element. This is typically used in scenarios where the number of exports is not\n known in advance by the requesting client.\n\nNote: Java generics information - <T>\n\n:param export: (T) - the result of the export\n:return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) the ExportObject for this item for ease of access to the export",
  "nonExport": "Create an ExportBuilder to perform work after dependencies are satisfied that itself does not create any exports.\n\nNote: Java generics information - <T>\n\n:return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export builder",
  "numExportListeners": ":return: long",
  "onExpired": "Notes that this session has expired and exports should be released.",
  "removeExportListener": "Remove an on-close callback bound to the life of the session.\n\n:param observer: (io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.ExportNotification>) - the observer to no longer be subscribed\n:return: (io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.ExportNotification>) The item if it was removed, else null",
  "removeOnCloseCallback": "Remove an on-close callback bound to the life of the session.\n\n:param onClose: (java.io.Closeable) - the callback to no longer invoke at end-of-life\n:return: (boolean) true iff the callback was removed",
  "wrapAsExport": "Wrap an object in an ExportObject to make it conform to the session export API.\n\nNote: Java generics information - <T>\n\n:param export: (T) - the object to wrap\n:return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) a sessionless export object"
 },
 "path": "io.deephaven.grpc_api.session.SessionState",
 "text": "SessionState manages all exports for a single session.\n\n It manages exported LivenessReferent. It cascades failures to child\n dependencies.\n\n TODO: - cyclical dependency detection - out-of-order dependency timeout\n\n Details Regarding Data Structure of ExportObjects:\n\n The exportMap map, exportListeners list, exportListenerVersion, and export object's exportListenerVersion work\n together to enable a listener to synchronize with outstanding exports in addition to sending the listener updates\n while they continue to subscribe.\n\n - SessionState::exportMap's purpose is to map from the export id to the export object -\n SessionState::exportListeners' purpose is to keep a list of active subscribers -\n SessionState::exportListenerVersion's purpose is to know whether or not a subscriber has already seen a status\n\n A listener will receive an export notification for export id NON_EXPORT_ID (a zero) to indicate that the refresh has\n completed. A listener may see an update for an export before receiving the \"refresh has completed\" message. A\n listener should be prepared to receive duplicate/redundant updates.",
 "typeName": "class"
}