{
 "className": "io.deephaven.grpc_api.session.SessionService",
 "methods": {
  "closeSession": "Reduces the liveness of the session.\n\n:param session: (io.deephaven.grpc_api.session.SessionState) - the session to close",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getCurrentSession": "Lookup a session via the SessionServiceGrpcImpl.SESSION_CONTEXT_KEY. This method is only valid in the context of\n the original calling gRPC thread.\n\n:return: (io.deephaven.grpc_api.session.SessionState) the session attached to this gRPC request",
  "getExpirationDelayMs": ":return: (long) the configured token duration in milliseconds",
  "getSessionForToken": "Lookup a session by token.\n\n:param token: (java.util.UUID) - the session secret to look for\n:return: (io.deephaven.grpc_api.session.SessionState) the session",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "newSession": "Create a new session object for the provided auth context.\n\n:param authContext: (io.deephaven.util.auth.AuthContext) - the auth context of the session\n:return: (io.deephaven.grpc_api.session.SessionState) a new session independent of all other existing sessions",
  "refreshToken": "If enough time has passed since the last token refresh, rotate to a new token and reset the expiration deadline.\n\n:param session: (io.deephaven.grpc_api.session.SessionState) - the session to refresh\n:return: (io.deephaven.grpc_api.session.SessionService.TokenExpiration) the most recent token expiration",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.grpc_api.session.SessionService",
 "typeName": "class"
}