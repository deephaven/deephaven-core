{
 "className": "io.deephaven.grpc_api.session.TicketRouter",
 "methods": {
  "flightInfoFor": "Resolve a flight descriptor and retrieve flight info for the flight.\n\n:param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - the flight descriptor\n:return: (org.apache.arrow.flight.impl.Flight.FlightInfo) flight info for the particular descriptor",
  "getFlightInfo": ":param table: io.deephaven.db.tables.Table\n:param descriptor: org.apache.arrow.flight.impl.Flight.FlightDescriptor\n:param ticket: org.apache.arrow.flight.impl.Flight.Ticket\n:return: org.apache.arrow.flight.impl.Flight.FlightInfo",
  "getLogNameFor": "Create a human readable string to identify this ticket.\n\n*Overload 1*  \n  :param ticket: (org.apache.arrow.flight.impl.Flight.Ticket) - the ticket to parse\n  :return: (java.lang.String) a string that is good for log/error messages\n  \n*Overload 2*  \n  :param ticket: (java.nio.ByteBuffer) - the ticket to parse\n  :return: (java.lang.String) a string that is good for log/error messages",
  "publish": "**Incompatible overloads text - text from the first overload:**\n\nPublish a new result as a flight descriptor to an export object future.\n\n The user must call SessionState.ExportBuilder.submit(java.util.concurrent.Callable<T>) to publish the result value.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param ticket: (java.nio.ByteBuffer) - (as ByteByffer) the ticket to publish to\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export object; see SessionState for lifecycle propagation details\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param ticket: (org.apache.arrow.flight.impl.Flight.Ticket) - (as Flight.Ticket) the ticket to publish to\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export object; see SessionState for lifecycle propagation details\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - (as Flight.Descriptor) the descriptor to publish to\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportBuilder<T>) an export object; see SessionState for lifecycle propagation details",
  "resolve": "**Incompatible overloads text - text from the first overload:**\n\nResolve a flight descriptor to an export object future.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param ticket: (java.nio.ByteBuffer) - the ticket to resolve\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) an export object; see SessionState for lifecycle propagation details\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param ticket: (org.apache.arrow.flight.impl.Flight.Ticket) - the ticket to resolve\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) an export object; see SessionState for lifecycle propagation details\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param session: (io.deephaven.grpc_api.session.SessionState) - the user session context\n  :param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - the descriptor to resolve\n  :return: (io.deephaven.grpc_api.session.SessionState.ExportObject<T>) an export object; see SessionState for lifecycle propagation details",
  "visitFlightInfo": "This invokes the provided visitor for each valid flight descriptor this ticket resolver exposes via flight.\n\n:param session: (io.deephaven.grpc_api.session.SessionState) - optional session that the resolver can use to filter which flights a visitor sees\n:param visitor: (java.util.function.Consumer<org.apache.arrow.flight.impl.Flight.FlightInfo>) - the callback to invoke per descriptor path"
 },
 "path": "io.deephaven.grpc_api.session.TicketRouter",
 "typeName": "class"
}