{
 "className": "io.deephaven.grpc_api.uri.BarrageTableResolver",
 "methods": {
  "get": ":return: io.deephaven.grpc_api.uri.BarrageTableResolver",
  "isResolvable": "Returns true if the resolver can resolve the uri.\n\n:param uri: (java.net.URI) - the uri\n:return: (boolean) true if this resolver can resolve uri",
  "resolve": "Resolve uri into an object.\n\n:param uri: (java.net.URI) - the URI\n:return: (io.deephaven.engine.table.Table) the object",
  "schemes": "The supported schemes.\n\n:return: (java.util.Set<java.lang.String>) the schemes",
  "subscribe": "**Incompatible overloads text - text from the first overload:**\n\nCreate a full-subscription to the remote URI. Uses OPTIONS.\n\n*Overload 1*  \n  :param remoteUri: (io.deephaven.uri.RemoteUri) - the remote URI\n  :return: (io.deephaven.engine.table.Table) the subscribed table\n  \n*Overload 2*  \n  :param targetUri: (java.lang.String) - the target URI\n  :param table: (io.deephaven.qst.table.TableSpec) - the table spec\n  :return: (io.deephaven.engine.table.Table) the subscribed table\n  \n*Overload 3*  \n  :param target: (io.deephaven.uri.DeephavenTarget) - the target\n  :param table: (io.deephaven.qst.table.TableSpec) - the table\n  :param options: (io.deephaven.extensions.barrage.BarrageSubscriptionOptions) - the options\n  :return: (io.deephaven.engine.table.Table) the subscribed table"
 },
 "path": "io.deephaven.grpc_api.uri.BarrageTableResolver",
 "text": "The barrage table resolver is able to resolve remote URIs into tables.\n\n \n For more advanced use cases, see BarrageSession.",
 "typeName": "class"
}