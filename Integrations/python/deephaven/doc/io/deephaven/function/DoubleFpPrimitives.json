{
 "className": "io.deephaven.function.DoubleFpPrimitives",
 "methods": {
  "containsNonNormal": "Returns true if the values contains any non-normal value, where \"normal\" is defined as\n not infinite, not NaN, and not null.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (boolean) true if any value is not normal; false otherwise.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (boolean) true if any value is not normal; false otherwise.",
  "isInf": "Returns true if the value is infinite and false otherwise.\n\n:param value: (double) - value.\n:return: (boolean) true if the value is infinite and false otherwise.",
  "isNaN": "Returns true if the value is NaN and false otherwise.\n\n:param value: (double) - value.\n:return: (boolean) true if the value is NaN and false otherwise.",
  "isNormal": "Returns true if the value is normal, where \"normal\" is defined as not infinite, not NaN, and not null.\n\n:param value: (double) - value.\n:return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise"
 },
 "path": "io.deephaven.function.DoubleFpPrimitives",
 "text": "A set of commonly used doubleing point numeric functions that can be applied to Double types.",
 "typeName": "class"
}