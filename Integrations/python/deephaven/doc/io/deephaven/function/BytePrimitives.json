{
 "className": "io.deephaven.function.BytePrimitives",
 "methods": {
  "array": "Converts a primitive array to a Vector.\n\n:param values: (byte[]) - primitive array\n:return: (io.deephaven.vector.ByteVector) Vector.",
  "concat": "Returns the concatenation of multiple arrays into a single array.\n\n*Overload 1*  \n  :param values: (byte[]...) - values.\n  :return: (byte[]) concatenation of multiple arrays into a single array.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.ByteVector...) - values.\n  :return: (byte[]) concatenation of multiple arrays into a single array.",
  "count": "Counts the number of non-null values.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (int) number of non-null values.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :return: (int) number of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (int) number of non-null values.",
  "countDistinct": "Counts the number of distinct elements in the array.\n\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 3*  \n  :param values: (byte[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.",
  "distinct": "Returns an array containing only the distinct values from the input.\n\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :return: (byte[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (io.deephaven.vector.ByteVector) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 3*  \n  :param values: (byte[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :param sort: (boolean) - true to sort the resultant array\n  :return: (byte[]) array containing only distinct items from arr.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :param sort: (boolean) - true to sort the resultant array\n  :return: (io.deephaven.vector.ByteVector) array containing only distinct items from arr.",
  "enlist": "Returns a list containing its arguments.\n\n:param values: (byte...) - values.\n:return: (byte[]) list containing values.",
  "first": "Returns the first value from an array.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) first value from the array.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :return: (byte) first value from the array.",
  "in": "Checks if a value is within a discrete set of possible values.\n\n:param testedValues: (byte) - tested value.\n:param possibleValues: (byte...) - possible values.\n:return: (boolean) true if the tested value is contained in the possible values, and false otherwise.",
  "inRange": "Checks if a value is within a range.\n\n:param testedValue: (byte) - tested value.\n:param lowInclusiveValue: (byte) - lower inclusive bound of the range.\n:param highInclusiveValue: (byte) - upper inclusive bound of the range.\n:return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.",
  "isNull": "Determines if a value is null.\n\n:param value: (byte) - value.\n:return: (boolean) true if the value is null, and false otherwise.",
  "last": "Returns the last value from an array.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) last value from the array.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :return: (byte) last value from the array.",
  "nth": "Returns the nth value from an array.\n\n*Overload 1*  \n  :param index: (int) - index of the value to return.\n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 2*  \n  :param index: (int) - index of the value to return.\n  :param values: (byte[]) - values.\n  :return: (byte) nth value from the array or null, if the index is outside of the array's index range.",
  "nullToValue": "Replaces null values with a default value.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :param defaultValue: (byte) - default value to return for null values.\n  :return: (byte) value, if value is not null, and defaultValue if value is null.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :param defaultValue: (byte) - default value to return for null values.\n  :return: (byte[]) values with nulls replaced by defaultValue.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param defaultValue: (byte) - default value to return for null values.\n  :return: (byte[]) values with nulls replaced by defaultValue.",
  "repeat": "Returns an array with a value repeated.\n\n:param value: (byte) - value.\n:param size: (int) - number of times to repeat the value.\n:return: (byte[]) array of repeated values.  If size is less than zero, an empty array is returned.",
  "reverse": "Returns an array with the values reversed.\n\n*Overload 1*  \n  :param values: (byte...) - values.\n  :return: (byte[]) array with the values reversed.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte[]) array with the values reversed.",
  "unbox": "Unboxes a array of values.\n\n:param values: (java.lang.Byte...) - values.\n:return: (byte[]) unboxed array of values.",
  "uniqueValue": "Get the single unique value in the array, or null if there are none, or there are more than 1 distinct values.\n\n:param arr: (io.deephaven.vector.ByteVector) - the array\n:param countNull: (boolean) - if nulls should count as values\n:return: (byte) the single unique value in the array, or null.",
  "vec": "Converts a Vector to a primitive array.\n\n:param values: (io.deephaven.vector.ByteVector) - Vector\n:return: (byte[]) primitive array."
 },
 "path": "io.deephaven.function.BytePrimitives",
 "text": "A set of commonly used functions that can be applied to Byte types.",
 "typeName": "class"
}