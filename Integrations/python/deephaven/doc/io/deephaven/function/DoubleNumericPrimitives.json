{
 "className": "io.deephaven.function.DoubleNumericPrimitives",
 "methods": {
  "abs": "Returns the absolute value.\n\n:param value: (double) - value.\n:return: (double) absolute value.",
  "absAvg": "Returns the mean of the absolute values of values.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) mean of the absolute value of non-null values.",
  "acos": "Returns the arc cosine.\n\n:param value: (double) - value.\n:return: (double) arc cosine.",
  "asin": "Returns the arc sine.\n\n:param value: (double) - value.\n:return: (double) arc sine.",
  "atan": "Returns the arc tangent.\n\n:param value: (double) - value.\n:return: (double) arc tangent.",
  "avg": "Returns the mean.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) mean of non-null values.",
  "binSearchIndex": "Performs a binary search to find a key.\n\n*Overload 1*  \n  :param values: (double[]) - sorted values to search.\n  :param key: (double) - key to search for.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearch) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - sorted values to search.\n  :param key: (double) - key to search for.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearch) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.",
  "ceil": "Returns the ceiling.  This is the smallest integer, which is greater than or equal to the value.\n\n:param value: (double) - value.\n:return: (double) ceiling.",
  "clamp": "Constrains the value to be on the [min,max] range.  If the value is less than min, min is returned.\n If the value is greater than max, max is returned.\n\n:param value: (double) - value.\n:param min: (double) - minimum value.\n:param max: (double) - maximum value.\n:return: (double) value constrained to be in the [min,max] range.",
  "cor": "Returns the correlation.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values0: (double[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 2*  \n  :param values0: (io.deephaven.vector.DoubleVector) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 3*  \n  :param values0: (double[]) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 4*  \n  :param values0: (io.deephaven.vector.DoubleVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.",
  "cos": "Returns the cosine.\n\n:param value: (double) - value.\n:return: (double) cosine.",
  "countNeg": "Counts the number of negative values.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (int) number of negative values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (int) number of negative values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (int) number of negative values.",
  "countPos": "Counts the number of positive values.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (int) number of positive values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (int) number of positive values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (int) number of positive values.",
  "countZero": "Counts the number of zero values.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (int) number of zero values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (int) number of zero values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (int) number of zero values.",
  "cov": "Returns the covariance.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values0: (double[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 2*  \n  :param values0: (io.deephaven.vector.DoubleVector) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 3*  \n  :param values0: (double[]) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 4*  \n  :param values0: (io.deephaven.vector.DoubleVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.",
  "cumprod": "Returns the cumulative product.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double[]) cumulative product of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double[]) cumulative product of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) cumulative product of non-null values.",
  "cumsum": "Returns the cumulative sum.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double[]) cumulative sum of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double[]) cumulative sum of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) cumulative sum of non-null values.",
  "exp": "Returns Euler's number e raised to a power.\n\n:param value: (double) - value.\n:return: (double) Euler's number e raised to a power.",
  "firstIndexOf": "Returns the first index containing the value.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param val: (double) - value to search for.\n  :return: (int) first index containing the value or null, if the value is not present.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param val: (double) - value to search for.\n  :return: (int) first index containing the value or null, if the value is not present.",
  "floor": "Returns the floor.  This is the largest integer, which is less than or equal to the value.\n\n:param value: (double) - value.\n:return: (double) floor.",
  "indexOfMax": "Returns the index of the maximum value.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (int) index of the maximum value.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (int) index of the maximum value.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (int) index of the maximum value.",
  "indexOfMin": "Returns the index of the minimum value.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (int) index of the minimum value.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (int) index of the minimum value.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (int) index of the minimum value.",
  "log": "Returns the natural logarithm (base e).\n\n:param value: (double) - value.\n:return: (double) natural logarithm (base e).",
  "lowerBin": "Returns the lower bound of the bin containing the value.\n\n*Overload 1*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :return: (double) lower bound of the bin containing the value.\n  \n*Overload 2*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :param offset: (double) - interval offset\n  :return: (double) lower bound of the bin containing the value.",
  "max": "Returns the maximum.  Null and NaN values are excluded.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) maximum of non-null, non-NaN values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) maximum of non-null, non-NaN values.\n  \n*Overload 3*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) maximum of non-null, non-NaN values.",
  "median": "Returns the median.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) median.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) median.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) median.",
  "min": "Returns the minimum.  Null and NaN values are excluded.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) minimum of non-null, non-NaN values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) minimum of non-null, non-NaN values.\n  \n*Overload 3*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) minimum of non-null, non-NaN values.",
  "percentile": "Returns the percentile.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param percentile: (double) - percentile to compute.\n  :return: (double) percentile.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param percentile: (double) - percentile to compute.\n  :return: (double) percentile.",
  "pow": "Returns the value of the first argument raised to the second argument.\n\n:param a: (double) - the base.\n:param b: (double) - the exponent.\n:return: (double) a raised to the b power.",
  "product": "Returns the product.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) product of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) product of non-null values.",
  "rawBinSearchIndex": "Performs a binary search to find a key.\n\n*Overload 1*  \n  :param values: (double[]) - sorted values to search.\n  :param key: (double) - key to search for.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearch) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - sorted values to search.\n  :param key: (double) - key to search for.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearch) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).",
  "rint": "Returns the integer closest to the input value.\n\n:param value: (double) - value.\n:return: (double) integer closes to the input value.",
  "round": "Returns the closest integer to the argument.  If the argument is NaN, the result is 0.  If the argument is greater\n than Integer.MIN_VALUE, Integer.MIN_VALUE is returned.  If the argument is less than Integer.MAX_VALUE,\n Integer.MAX_VALUE is returned.\n\n:param value: (double) - value.\n:return: long",
  "sequence": "Returns a sequence of values.\n\n:param start: (double) - starting value.\n:param end: (double) - terminal value.\n:param step: (double) - step size.\n:return: (double[]) sequence of values from start to end.",
  "signum": "Returns the signum function.\n\n:param value: (double) - value.\n:return: (double) signum function.",
  "sin": "Returns the sine.\n\n:param value: (double) - value.\n:return: (double) sine.",
  "sort": "Returns sorted values from smallest to largest.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (io.deephaven.vector.DoubleVector) sorted values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double[]) sorted values.\n  \n*Overload 3*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double[]) sorted values.",
  "sortDescending": "Returns sorted values from largest to smallest.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (io.deephaven.vector.DoubleVector) sorted values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double[]) sorted values.\n  \n*Overload 3*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double[]) sorted values.",
  "sqrt": "Returns the square root.\n\n:param value: (double) - value.\n:return: (double) square root.",
  "std": "Returns the standard deviation.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) standard deviation of non-null values.",
  "ste": "Returns the standard error.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) standard error of non-null values.",
  "sum": "Returns the sum.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) sum of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) sum of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ObjectVector<double[]>) - values.\n  :return: (double[]) array of sums of non-null values.\n  \n*Overload 4*  \n  :param values: (double[]...) - values.\n  :return: (double[]) array of sums of non-null values.",
  "tan": "Returns the tangent.\n\n:param value: (double) - value.\n:return: (double) tangent.",
  "tstat": "Returns the t-statistic.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) t-statistic of non-null values.",
  "upperBin": "Returns the upper bound of the bin containing the value.\n\n*Overload 1*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :return: (double) upper bound of the bin containing the value.\n  \n*Overload 2*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :param offset: (double) - interval offset\n  :return: (double) upper bound of the bin containing the value.",
  "var": "Returns the variance.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 2*  \n  :param values: (double[]) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) variance of non-null values.",
  "wavg": "Returns the weighted average.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.",
  "weightedAvg": "Returns the weighted average.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.",
  "weightedSum": "Returns the weighted sum.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.",
  "wstd": "Returns the weighted standard deviation.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard deviation of non-null values.",
  "wste": "Returns the weighted standard error.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard error of non-null values.",
  "wsum": "Returns the weighted sum.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.",
  "wtstat": "Returns the weighted t-statistic.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted t-statistic of non-null values.",
  "wvar": "Returns the weighted variance.  Null values are excluded.  NaN values are included.\n\n*Overload 1*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 3*  \n  :param values: (double[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 5*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 7*  \n  :param values: (double[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 9*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 11*  \n  :param values: (double[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 13*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 15*  \n  :param values: (double[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 17*  \n  :param values: (double[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 19*  \n  :param values: (double[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted variance of non-null values."
 },
 "path": "io.deephaven.function.DoubleNumericPrimitives",
 "text": "A set of commonly used numeric functions that can be applied to Double types.",
 "typeName": "class"
}