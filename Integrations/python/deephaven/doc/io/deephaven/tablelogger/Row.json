{
 "className": "io.deephaven.tablelogger.Row",
 "methods": {
  "getColumnPartitionValue": "For rows that are to be used with file managers that allow dynamic column partition selection, retrieve the\n column partition value.\n\n:return: (java.lang.String) the previously-set column partition value",
  "getSetter": "**Incompatible overloads text - text from the first overload:**\n\nGets a setter for a column.\n\n*Overload 1*  \n  :param name: (java.lang.String) - column name\n  :return: (io.deephaven.tablelogger.RowSetter) setter for the column.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: (java.lang.String) - column name\n  :param tClass: (java.lang.Class<T>) - the type for the typed RowSetter\n  :return: (io.deephaven.tablelogger.RowSetter<T>) setter for the column.",
  "setColumnPartitionValue": "For rows that are to be used with file managers that allow dynamic column partition selection, set the column\n partition value.\n\n:param columnPartitionValue: (java.lang.String) - the column partition value",
  "setFlags": ":param flags: io.deephaven.tablelogger.Row.Flags",
  "size": "Number of rows written out.\n\n:return: (long) number of rows written out.",
  "writeRow": "Writes out a new row (values set using setters)."
 },
 "path": "io.deephaven.tablelogger.Row",
 "text": "Interface for writing out values in a row.",
 "typeName": "interface"
}