{
 "className": "io.deephaven.chunk.WritableBooleanChunk",
 "methods": {
  "add": ":param value: boolean",
  "appendTypedChunk": ":param src: io.deephaven.chunk.BooleanChunk<? extendsWritableBooleanChunk.ATTR>\n:param srcOffset: int\n:param length: int",
  "copyFromArray": ":param srcArray: java.lang.Object\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "copyFromChunk": ":param src: io.deephaven.chunk.Chunk<? extendsWritableBooleanChunk.ATTR>\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "copyFromTypedArray": ":param src: boolean[]\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "copyFromTypedChunk": ":param src: io.deephaven.chunk.BooleanChunk<? extendsWritableBooleanChunk.ATTR>\n:param srcOffset: int\n:param destOffset: int\n:param length: int",
  "fillWithBoxedValue": "Fill a sub-range of this writable chunk with the given value, unboxing it as appropriate.\n\n:param offset: (int) - Starting offset\n:param size: (int) - Number of values to fill\n:param value: java.lang.Object",
  "fillWithValue": ":param offset: int\n:param length: int\n:param value: boolean",
  "makeWritableChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:param size: int\n:return: io.deephaven.chunk.WritableBooleanChunk<ATTR>",
  "makeWritableChunkForPool": ":param size: int\n:return: io.deephaven.chunk.WritableBooleanChunk",
  "set": ":param index: int\n:param value: boolean",
  "slice": "Make a new Chunk that represents either exactly the same view on the underlying data as this Chunk, or a subrange\n of that view. The view is defined as [0..size) (in the coordinate space of this Chunk).\n\n:param offset: (int) - Offset of the new Chunk, relative to this Chunk. 0   offset   this.size\n:param capacity: (int) - Capacity and initial size of the new Chunk. 0   capacity   this.size - offset.\n:return: (io.deephaven.chunk.WritableBooleanChunk<WritableBooleanChunk.ATTR>) The new Chunk. A new Chunk will always be returned, even if the Chunks represent the same view.",
  "sort": "Sort this chunk in-place using Java's primitive defined ordering.\n\n Of note is that nulls or NaNs are not sorted according to Deephaven ordering rules.",
  "upcast": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any,\nATTR_DERIV extends ATTR>\n\n:param self: io.deephaven.chunk.WritableBooleanChunk<ATTR_DERIV>\n:return: io.deephaven.chunk.WritableBooleanChunk<ATTR>",
  "writableChunkWrap": "*Overload 1*  \n  Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n  \n  :param data: boolean[]\n  :return: io.deephaven.chunk.WritableBooleanChunk<ATTR>\n  \n*Overload 2*  \n  Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n  \n  :param data: boolean[]\n  :param offset: int\n  :param size: int\n  :return: io.deephaven.chunk.WritableBooleanChunk<ATTR>"
 },
 "path": "io.deephaven.chunk.WritableBooleanChunk",
 "text": "WritableChunk implementation for boolean data.",
 "typeName": "class"
}