{
 "className": "io.deephaven.chunk.ResettableReadOnlyChunk",
 "methods": {
  "asResettableBooleanChunk": ":return: io.deephaven.chunk.ResettableBooleanChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableByteChunk": ":return: io.deephaven.chunk.ResettableByteChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableCharChunk": ":return: io.deephaven.chunk.ResettableCharChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableDoubleChunk": ":return: io.deephaven.chunk.ResettableDoubleChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableFloatChunk": ":return: io.deephaven.chunk.ResettableFloatChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableIntChunk": ":return: io.deephaven.chunk.ResettableIntChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableLongChunk": ":return: io.deephaven.chunk.ResettableLongChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableObjectChunk": "Note: Java generics information - <T>\n\n:return: io.deephaven.chunk.ResettableObjectChunk<T,ResettableReadOnlyChunk.ATTR_BASE>",
  "asResettableShortChunk": ":return: io.deephaven.chunk.ResettableShortChunk<ResettableReadOnlyChunk.ATTR_BASE>",
  "clear": "Reset this chunk to empty storage.\n\nNote: Java generics information - <ATTR extends ResettableReadOnlyChunk.ATTR_BASE>\n\n:return: io.deephaven.chunk.Chunk<ATTR>",
  "resetFromArray": "**Incompatible overloads text - text from the first overload:**\n\nReset the data and bounds of this chunk to a range or sub-range of the specified array.\n\n*Overload 1*  \n  Note: Java generics information - <ATTR extends ResettableReadOnlyChunk.ATTR_BASE>\n  \n  :param array: (java.lang.Object) - The array\n  :param offset: (int) - The offset into array\n  :param capacity: (int) - The capacity this should have after reset\n  :return: (io.deephaven.chunk.Chunk<ATTR>) this\n  \n*Overload 2*  \n  Note: Java generics information - <ATTR extends ResettableReadOnlyChunk.ATTR_BASE>\n  \n  :param array: (java.lang.Object) - The array\n  :return: (io.deephaven.chunk.Chunk<ATTR>) this",
  "resetFromChunk": "**Incompatible overloads text - text from the first overload:**\n\nReset the data and bounds of this chunk to a range or sub-range of the specified Chunk.\n\n*Overload 1*  \n  Note: Java generics information - <ATTR extends ResettableReadOnlyChunk.ATTR_BASE>\n  \n  :param extend: io.deephaven.chunk.Chunk<?\n  :param offset: (int) - The offset into other\n  :param capacity: (int) - The capacity this should have after reset\n  :return: io.deephaven.chunk.Chunk<ATTR>\n  \n*Overload 2*  \n  Note: Java generics information - <ATTR extends ResettableReadOnlyChunk.ATTR_BASE>\n  \n  :param other: (io.deephaven.chunk.WritableChunk<ATTR>) - The other WritableChunk\n  :param offset: (int) - The offset into other\n  :param capacity: (int) - The capacity this should have after reset\n  :return: (io.deephaven.chunk.Chunk<ATTR>) this"
 },
 "path": "io.deephaven.chunk.ResettableReadOnlyChunk",
 "text": "Chunk that may have its backing storage reset to a slice of that belonging to another Chunk or a\n native array.",
 "typeName": "interface"
}