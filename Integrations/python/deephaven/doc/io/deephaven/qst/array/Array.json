{
 "className": "io.deephaven.qst.array.Array",
 "methods": {
  "builder": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param type: io.deephaven.qst.type.Type<T>\n  :return: io.deephaven.qst.array.ArrayBuilder<T,?,?>\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param type: io.deephaven.qst.type.Type<T>\n  :param initialCapacity: int\n  :return: io.deephaven.qst.array.ArrayBuilder<T,?,?>",
  "empty": "Note: Java generics information - <T>\n\n:param type: io.deephaven.qst.type.Type<T>\n:return: io.deephaven.qst.array.Array<T>",
  "of": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param type: io.deephaven.qst.type.Type<T>\n  :param data: T...\n  :return: io.deephaven.qst.array.Array<T>\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param type: io.deephaven.qst.type.Type<T>\n  :param data: java.lang.Iterable<T>\n  :return: io.deephaven.qst.array.Array<T>\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param type: io.deephaven.qst.type.Type<T>\n  :param data: java.util.Collection<T>\n  :return: io.deephaven.qst.array.Array<T>",
  "size": ":return: int",
  "type": ":return: io.deephaven.qst.type.Type<Array.T>",
  "walk": "Note: Java generics information - <V extends io.deephaven.qst.array.Array.Visitor>\n\n:param visitor: V\n:return: V"
 },
 "path": "io.deephaven.qst.array.Array",
 "text": "Provides strong typing around an array-like object. Has a definite size.",
 "typeName": "interface"
}