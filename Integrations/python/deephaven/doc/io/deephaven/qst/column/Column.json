{
 "className": "io.deephaven.qst.column.Column",
 "methods": {
  "array": ":return: io.deephaven.qst.array.Array<Column.T>",
  "cast": "Note: Java generics information - <T>\n\n:param type: io.deephaven.qst.type.Type<T>\n:param column: io.deephaven.qst.column.Column<?>\n:return: io.deephaven.qst.column.Column<T>",
  "empty": "Note: Java generics information - <T>\n\n:param header: io.deephaven.qst.column.header.ColumnHeader<T>\n:return: io.deephaven.qst.column.Column<T>",
  "header": ":return: io.deephaven.qst.column.header.ColumnHeader<Column.T>",
  "name": ":return: java.lang.String",
  "of": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param array: io.deephaven.qst.array.Array<T>\n  :return: io.deephaven.qst.column.Column<T>\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param header: io.deephaven.qst.column.header.ColumnHeader<T>\n  :param data: T...\n  :return: io.deephaven.qst.column.Column<T>\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param header: io.deephaven.qst.column.header.ColumnHeader<T>\n  :param data: java.util.Collection<T>\n  :return: io.deephaven.qst.column.Column<T>\n  \n*Overload 4*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param clazz: java.lang.Class<T>\n  :param values: T...\n  :return: io.deephaven.qst.column.Column<T>\n  \n*Overload 5*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param clazz: java.lang.Class<T>\n  :param values: java.util.Collection<T>\n  :return: io.deephaven.qst.column.Column<T>\n  \n*Overload 6*  \n  :param name: java.lang.String\n  :param values: java.lang.Boolean...\n  :return: io.deephaven.qst.column.Column<java.lang.Boolean>\n  \n*Overload 7*  \n  :param name: java.lang.String\n  :param values: java.lang.Byte...\n  :return: io.deephaven.qst.column.Column<java.lang.Byte>\n  \n*Overload 8*  \n  :param name: java.lang.String\n  :param values: java.lang.Character...\n  :return: io.deephaven.qst.column.Column<java.lang.Character>\n  \n*Overload 9*  \n  :param name: java.lang.String\n  :param values: java.lang.Short...\n  :return: io.deephaven.qst.column.Column<java.lang.Short>\n  \n*Overload 10*  \n  :param name: java.lang.String\n  :param values: java.lang.Integer...\n  :return: io.deephaven.qst.column.Column<java.lang.Integer>\n  \n*Overload 11*  \n  :param name: java.lang.String\n  :param values: java.lang.Long...\n  :return: io.deephaven.qst.column.Column<java.lang.Long>\n  \n*Overload 12*  \n  :param name: java.lang.String\n  :param values: java.lang.Float...\n  :return: io.deephaven.qst.column.Column<java.lang.Float>\n  \n*Overload 13*  \n  :param name: java.lang.String\n  :param values: java.lang.Double...\n  :return: io.deephaven.qst.column.Column<java.lang.Double>\n  \n*Overload 14*  \n  :param name: java.lang.String\n  :param values: java.lang.String...\n  :return: io.deephaven.qst.column.Column<java.lang.String>\n  \n*Overload 15*  \n  :param name: java.lang.String\n  :param values: java.time.Instant...\n  :return: io.deephaven.qst.column.Column<java.time.Instant>",
  "ofBoolean": ":param name: java.lang.String\n:param values: java.lang.Boolean...\n:return: io.deephaven.qst.column.Column<java.lang.Boolean>",
  "ofByte": ":param name: java.lang.String\n:param values: byte...\n:return: io.deephaven.qst.column.Column<java.lang.Byte>",
  "ofChar": ":param name: java.lang.String\n:param values: char...\n:return: io.deephaven.qst.column.Column<java.lang.Character>",
  "ofDouble": ":param name: java.lang.String\n:param values: double...\n:return: io.deephaven.qst.column.Column<java.lang.Double>",
  "ofFloat": ":param name: java.lang.String\n:param values: float...\n:return: io.deephaven.qst.column.Column<java.lang.Float>",
  "ofInt": ":param name: java.lang.String\n:param values: int...\n:return: io.deephaven.qst.column.Column<java.lang.Integer>",
  "ofLong": ":param name: java.lang.String\n:param values: long...\n:return: io.deephaven.qst.column.Column<java.lang.Long>",
  "ofShort": ":param name: java.lang.String\n:param values: short...\n:return: io.deephaven.qst.column.Column<java.lang.Short>",
  "size": ":return: int",
  "toTable": ":return: io.deephaven.qst.table.NewTable",
  "type": ":return: io.deephaven.qst.type.Type<Column.T>"
 },
 "path": "io.deephaven.qst.column.Column",
 "text": "A column is name and array pair.",
 "typeName": "class"
}