{
 "className": "io.deephaven.qst.TableCreator",
 "methods": {
  "create": "\"Replay\" the table against the given interfaces.\n\nNote: Java generics information - <TOPS extends io.deephaven.api.TableOperations<TOPS,\nTABLE>,\nTABLE>\n\n:param creation: (io.deephaven.qst.TableCreator<TABLE>) - the table creation\n:param toOps: (io.deephaven.qst.TableCreator.TableToOperations<TOPS,TABLE>) - the table to operations\n:param toTable: (io.deephaven.qst.TableCreator.OperationsToTable<TOPS,TABLE>) - the operations to table\n:param table: (io.deephaven.qst.table.TableSpec) - the table specification\n:return: (TABLE) the output table",
  "emptyTable": "Equivalent to of(EmptyTable.of(size)).\n\n:param size: (long) - the size\n:return: (TableCreator.TABLE) the empty table",
  "merge": "Merges the given tables.\n\n*Overload 1*  \n  :param tables: (java.lang.Iterable<TableCreator.TABLE>) - the tables\n  :return: (TableCreator.TABLE) the merged results\n  \n*Overload 2*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 3*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 4*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :param t4: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 5*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :param t4: TableCreator.TABLE\n  :param t5: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 6*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :param t4: TableCreator.TABLE\n  :param t5: TableCreator.TABLE\n  :param t6: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 7*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :param t4: TableCreator.TABLE\n  :param t5: TableCreator.TABLE\n  :param t6: TableCreator.TABLE\n  :param t7: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 8*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :param t4: TableCreator.TABLE\n  :param t5: TableCreator.TABLE\n  :param t6: TableCreator.TABLE\n  :param t7: TableCreator.TABLE\n  :param t8: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 9*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :param t4: TableCreator.TABLE\n  :param t5: TableCreator.TABLE\n  :param t6: TableCreator.TABLE\n  :param t7: TableCreator.TABLE\n  :param t8: TableCreator.TABLE\n  :param t9: TableCreator.TABLE\n  :return: TableCreator.TABLE\n  \n*Overload 10*  \n  :param t1: TableCreator.TABLE\n  :param t2: TableCreator.TABLE\n  :param t3: TableCreator.TABLE\n  :param t4: TableCreator.TABLE\n  :param t5: TableCreator.TABLE\n  :param t6: TableCreator.TABLE\n  :param t7: TableCreator.TABLE\n  :param t8: TableCreator.TABLE\n  :param t9: TableCreator.TABLE\n  :param remaining: TableCreator.TABLE...\n  :return: TableCreator.TABLE\n  \n*Overload 11*  \n  :param tables: TableCreator.TABLE[]\n  :return: TableCreator.TABLE",
  "newTable": "Equivalent to of(NewTable.of(columns)).\n\n*Overload 1*  \n  :param columns: (io.deephaven.qst.column.Column<?>...) - the columns\n  :return: (TableCreator.TABLE) the new table\n  \n*Overload 2*  \n  :param columns: (java.lang.Iterable<io.deephaven.qst.column.Column<?>>) - the columns\n  :return: (TableCreator.TABLE) the new table",
  "of": "**Incompatible overloads text - text from the first overload:**\n\nCreates a new table.\n\n*Overload 1*  \n  :param newTable: (io.deephaven.qst.table.NewTable) - the new table specification\n  :return: (TableCreator.TABLE) the new table\n  \n*Overload 2*  \n  :param emptyTable: (io.deephaven.qst.table.EmptyTable) - the empty table specification\n  :return: (TableCreator.TABLE) the empty table\n  \n*Overload 3*  \n  :param timeTable: (io.deephaven.qst.table.TimeTable) - the time table specifications\n  :return: (TableCreator.TABLE) the time table",
  "timeTable": "**Incompatible overloads text - text from the first overload:**\n\nEquivalent to of(TimeTable.of(interval)).\n\n*Overload 1*  \n  :param interval: (java.time.Duration) - the interval\n  :return: (TableCreator.TABLE) the time table\n  \n*Overload 2*  \n  :param interval: (java.time.Duration) - the interval\n  :param startTime: (java.time.Instant) - the start time\n  :return: (TableCreator.TABLE) the time table"
 },
 "path": "io.deephaven.qst.TableCreator",
 "text": "Provides methods for building source tables.",
 "typeName": "interface"
}