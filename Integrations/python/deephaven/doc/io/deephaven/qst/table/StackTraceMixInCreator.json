{
 "className": "io.deephaven.qst.table.StackTraceMixInCreator",
 "methods": {
  "adapt": ":param tops: StackTraceMixInCreator.TOPS\n:return: io.deephaven.qst.table.StackTraceMixIn<StackTraceMixInCreator.TOPS,StackTraceMixInCreator.TABLE>",
  "elements": ":param tops: StackTraceMixInCreator.TOPS\n:return: java.util.Optional<java.lang.StackTraceElement[]>",
  "merge": "Merges the given tables.\n\n:param stackTraceMixIns: (java.lang.Iterable<io.deephaven.qst.table.StackTraceMixIn<StackTraceMixInCreator.TOPS,StackTraceMixInCreator.TABLE>>) - the tables\n:return: (io.deephaven.qst.table.StackTraceMixIn<StackTraceMixInCreator.TOPS,StackTraceMixInCreator.TABLE>) the merged results",
  "of": "**Incompatible overloads text - text from the first overload:**\n\nCreates a new table.\n\n*Overload 1*  \n  :return: io.deephaven.qst.table.StackTraceMixInCreator<io.deephaven.qst.table.TableSpec,io.deephaven.qst.table.TableSpec>\n  \n*Overload 2*  \n  :param newTable: (io.deephaven.qst.table.NewTable) - the new table specification\n  :return: (io.deephaven.qst.table.StackTraceMixIn<StackTraceMixInCreator.TOPS,StackTraceMixInCreator.TABLE>) the new table\n  \n*Overload 3*  \n  :param emptyTable: (io.deephaven.qst.table.EmptyTable) - the empty table specification\n  :return: (io.deephaven.qst.table.StackTraceMixIn<StackTraceMixInCreator.TOPS,StackTraceMixInCreator.TABLE>) the empty table\n  \n*Overload 4*  \n  :param timeTable: (io.deephaven.qst.table.TimeTable) - the time table specifications\n  :return: (io.deephaven.qst.table.StackTraceMixIn<StackTraceMixInCreator.TOPS,StackTraceMixInCreator.TABLE>) the time table"
 },
 "path": "io.deephaven.qst.table.StackTraceMixInCreator",
 "typeName": "class"
}