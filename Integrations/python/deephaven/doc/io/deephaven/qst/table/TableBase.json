{
 "className": "io.deephaven.qst.table.TableBase",
 "methods": {
  "aj": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :return: io.deephaven.qst.table.AsOfJoinTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :param columnsToAdd: java.lang.String\n  :return: io.deephaven.qst.table.AsOfJoinTable\n  \n*Overload 3*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.AsOfJoinTable\n  \n*Overload 4*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :param asOfJoinRule: io.deephaven.api.AsOfJoinRule\n  :return: io.deephaven.qst.table.AsOfJoinTable",
  "by": "*Overload 1*  \n  :return: io.deephaven.qst.table.ByTable\n  \n*Overload 2*  \n  :param groupByColumns: java.lang.String...\n  :return: io.deephaven.qst.table.ByTable\n  \n*Overload 3*  \n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.ByTable\n  \n*Overload 4*  \n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.AggregationTable",
  "exactJoin": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.ExactJoinTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :return: io.deephaven.qst.table.ExactJoinTable\n  \n*Overload 3*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :param columnsToAdd: java.lang.String\n  :return: io.deephaven.qst.table.ExactJoinTable",
  "head": ":param size: long\n:return: io.deephaven.qst.table.HeadTable",
  "join": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.JoinTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :param reserveBits: int\n  :return: io.deephaven.qst.table.JoinTable\n  \n*Overload 3*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :return: io.deephaven.qst.table.JoinTable\n  \n*Overload 4*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :param columnsToAdd: java.lang.String\n  :return: io.deephaven.qst.table.JoinTable",
  "leftJoin": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :return: io.deephaven.qst.table.LeftJoinTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :param columnsToAdd: java.lang.String\n  :return: io.deephaven.qst.table.LeftJoinTable\n  \n*Overload 3*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.LeftJoinTable",
  "naturalJoin": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.NaturalJoinTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :return: io.deephaven.qst.table.NaturalJoinTable\n  \n*Overload 3*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :param columnsToAdd: java.lang.String\n  :return: io.deephaven.qst.table.NaturalJoinTable",
  "raj": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :return: io.deephaven.qst.table.ReverseAsOfJoinTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String\n  :param columnsToAdd: java.lang.String\n  :return: io.deephaven.qst.table.ReverseAsOfJoinTable\n  \n*Overload 3*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.ReverseAsOfJoinTable\n  \n*Overload 4*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :param extend: java.util.Collection<?\n  :param reverseAsOfJoinRule: io.deephaven.api.ReverseAsOfJoinRule\n  :return: io.deephaven.qst.table.ReverseAsOfJoinTable",
  "reverse": ":return: io.deephaven.qst.table.ReverseTable",
  "select": "*Overload 1*  \n  :param columns: java.lang.String...\n  :return: io.deephaven.qst.table.SelectTable\n  \n*Overload 2*  \n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.SelectTable",
  "snapshot": "*Overload 1*  \n  :param baseTable: io.deephaven.qst.table.TableSpec\n  :param stampColumns: java.lang.String...\n  :return: io.deephaven.qst.table.SnapshotTable\n  \n*Overload 2*  \n  :param baseTable: io.deephaven.qst.table.TableSpec\n  :param doInitialSnapshot: boolean\n  :param stampColumns: java.lang.String...\n  :return: io.deephaven.qst.table.SnapshotTable\n  \n*Overload 3*  \n  :param baseTable: io.deephaven.qst.table.TableSpec\n  :param doInitialSnapshot: boolean\n  :param stampColumns: java.util.Collection<io.deephaven.api.ColumnName>\n  :return: io.deephaven.qst.table.SnapshotTable",
  "sort": "*Overload 1*  \n  :param columnsToSortBy: java.lang.String...\n  :return: io.deephaven.qst.table.SortTable\n  \n*Overload 2*  \n  :param columnsToSortBy: java.util.Collection<io.deephaven.api.SortColumn>\n  :return: io.deephaven.qst.table.SortTable",
  "sortDescending": ":param columnsToSortBy: java.lang.String...\n:return: io.deephaven.qst.table.SortTable",
  "tail": ":param size: long\n:return: io.deephaven.qst.table.TailTable",
  "update": "*Overload 1*  \n  :param columns: java.lang.String...\n  :return: io.deephaven.qst.table.UpdateTable\n  \n*Overload 2*  \n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.UpdateTable",
  "updateView": "*Overload 1*  \n  :param columns: java.lang.String...\n  :return: io.deephaven.qst.table.UpdateViewTable\n  \n*Overload 2*  \n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.UpdateViewTable",
  "view": "*Overload 1*  \n  :param columns: java.lang.String...\n  :return: io.deephaven.qst.table.ViewTable\n  \n*Overload 2*  \n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.ViewTable",
  "where": "*Overload 1*  \n  :param filters: java.lang.String...\n  :return: io.deephaven.qst.table.WhereTable\n  \n*Overload 2*  \n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.WhereTable",
  "whereIn": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String...\n  :return: io.deephaven.qst.table.WhereInTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.WhereInTable",
  "whereNotIn": "*Overload 1*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param columnsToMatch: java.lang.String...\n  :return: io.deephaven.qst.table.WhereNotInTable\n  \n*Overload 2*  \n  :param rightTable: io.deephaven.qst.table.TableSpec\n  :param extend: java.util.Collection<?\n  :return: io.deephaven.qst.table.WhereNotInTable"
 },
 "path": "io.deephaven.qst.table.TableBase",
 "typeName": "class"
}