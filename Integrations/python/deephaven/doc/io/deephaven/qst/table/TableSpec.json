{
 "className": "io.deephaven.qst.table.TableSpec",
 "methods": {
  "depth": "The depth of the table is the maximum depth of its dependencies plus one. A table with no dependencies has a\n depth of zero.\n\n:return: (int) the depth",
  "empty": ":param size: long\n:return: io.deephaven.qst.table.EmptyTable",
  "file": "Create a table via java deserialization.\n\n \n Note: stability of the format is not guaranteed.\n\n:param path: (java.nio.file.Path) - the path to the file\n:return: (io.deephaven.qst.table.TableSpec) the table",
  "logic": ":return: io.deephaven.qst.TableCreationLogic",
  "merge": "*Overload 1*  \n  :param first: io.deephaven.qst.table.TableSpec\n  :param second: io.deephaven.qst.table.TableSpec\n  :param rest: io.deephaven.qst.table.TableSpec...\n  :return: io.deephaven.qst.table.MergeTable\n  \n*Overload 2*  \n  :param tables: java.util.Collection<? extendsio.deephaven.qst.table.TableSpec>\n  :return: io.deephaven.qst.table.TableSpec",
  "of": ":param logic: io.deephaven.qst.TableCreationLogic\n:return: io.deephaven.qst.table.TableSpec",
  "walk": "Note: Java generics information - <V extends io.deephaven.qst.table.TableSpec.Visitor>\n\n:param visitor: V\n:return: V"
 },
 "path": "io.deephaven.qst.table.TableSpec",
 "text": "A table specification is a declarative description of a table query. Part of a \"query syntax tree\".\n\n \n A table specification may be built-up explicitly via the individual implementation class build patterns, or may be\n built-up in a fluent-manner via the TableOperations interface.\n\n \n A table specification can be \"replayed\" against the fluent interfaces, see\n TableCreator.create(TableCreator, TableToOperations, OperationsToTable, TableSpec).",
 "typeName": "interface"
}