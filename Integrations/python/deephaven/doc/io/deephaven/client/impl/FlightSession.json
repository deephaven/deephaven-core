{
 "className": "io.deephaven.client.impl.FlightSession",
 "methods": {
  "list": "List the flights.\n\n:return: (java.lang.Iterable<org.apache.arrow.flight.FlightInfo>) the flights",
  "of": ":param session: io.deephaven.client.impl.SessionImpl\n:param incomingAllocator: org.apache.arrow.memory.BufferAllocator\n:param channel: io.grpc.ManagedChannel\n:return: io.deephaven.client.impl.FlightSession",
  "put": "**Incompatible overloads text - text from the first overload:**\n\nCreates a new server side table, backed by the server semantics of DoPut, and returns an appropriate\n handle.\n\n \n For more advanced use cases, callers may use putTicket(FlightStream).\n\n*Overload 1*  \n  :param table: (io.deephaven.qst.table.NewTable) - the table\n  :param allocator: (org.apache.arrow.memory.BufferAllocator) - the allocator\n  :return: (io.deephaven.client.impl.TableHandle) the table handle\n  \n*Overload 2*  \n  :param input: (org.apache.arrow.flight.FlightStream) - the input\n  :return: (io.deephaven.client.impl.TableHandle) the table handle",
  "putTicket": "**Incompatible overloads text - text from the first overload:**\n\nCreates a new server side table, backed by the server semantics of DoPut, and returns the low-level\n Ticket. Callers are responsible for calling\n release(io.deephaven.proto.backplane.grpc.Ticket).\n\n \n This method may be more efficient, depending on how the ticket is going to be used. If it will simply be bound to\n a ticket table, callers should prefer put(FlightStream).\n\n*Overload 1*  \n  :param table: (io.deephaven.qst.table.NewTable) - the table\n  :param allocator: (org.apache.arrow.memory.BufferAllocator) - the allocator\n  :return: (io.deephaven.proto.backplane.grpc.Ticket) the ticket\n  \n*Overload 2*  \n  :param input: (org.apache.arrow.flight.FlightStream) - the input\n  :return: (io.deephaven.proto.backplane.grpc.Ticket) the ticket",
  "release": "Releases the low-level ticket.\n\n \n Note: this should only be called in combination with tickets returned from\n putTicket(NewTable, BufferAllocator) or putTicket(FlightStream).\n\n:param ticket: (io.deephaven.proto.backplane.grpc.Ticket) - the ticket\n:return: (java.util.concurrent.CompletableFuture<java.lang.Void>) the future",
  "schema": "Perform a GetSchema to get the schema.\n\n:param ticket: (io.deephaven.client.impl.HasTicket) - the ticket\n:return: (org.apache.arrow.vector.types.pojo.Schema) the schema",
  "session": "The session.\n\n:return: (io.deephaven.client.impl.Session) the session",
  "stream": "Perform a DoGet to fetch the data.\n\n:param ticket: (io.deephaven.client.impl.HasTicket) - the ticket\n:return: (org.apache.arrow.flight.FlightStream) the stream"
 },
 "path": "io.deephaven.client.impl.FlightSession",
 "typeName": "class"
}