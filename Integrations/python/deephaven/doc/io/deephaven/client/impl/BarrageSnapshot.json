{
 "className": "io.deephaven.client.impl.BarrageSnapshot",
 "methods": {
  "entireTable": "Request a full snapshot of the data and populate a BarrageTable with the data that is received.\n\n:return: (io.deephaven.extensions.barrage.table.BarrageTable) the BarrageTable",
  "partialTable": "**Incompatible overloads text - text from the first overload:**\n\nRequest a partial snapshot of the data limited by viewport or column set and populate a BarrageTable with\n the data that is received.\n\n*Overload 1*  \n  :param viewport: (io.deephaven.engine.rowset.RowSet) - the position-space viewport to use for the snapshot\n  :param columns: (java.util.BitSet) - the columns to include in the snapshot\n  :return: (io.deephaven.extensions.barrage.table.BarrageTable) the BarrageTable\n  \n*Overload 2*  \n  :param viewport: (io.deephaven.engine.rowset.RowSet) - the position-space viewport to use for the snapshot\n  :param columns: (java.util.BitSet) - the columns to include in the snapshot\n  :param reverseViewport: (boolean) - Whether to treat posRowSet as offsets from #size() rather than 0\n  :return: (io.deephaven.extensions.barrage.table.BarrageTable) the BarrageTable"
 },
 "path": "io.deephaven.client.impl.BarrageSnapshot",
 "text": "A BarrageSnapshot represents a snapshot of a table that may or may not be filtered to a viewport of the\n remote source table.",
 "typeName": "interface"
}