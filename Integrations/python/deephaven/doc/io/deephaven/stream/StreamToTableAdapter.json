{
 "className": "io.deephaven.stream.StreamToTableAdapter",
 "methods": {
  "accept": "Accept a batch of rows splayed across per-column chunks of values.\n\n Ownership of data passes to the consumer, which must be sure to\n close each chunk when it's no longer\n needed.\n\n Implementations will generally have a mechanism for determining the expected number and type of input\n chunks, but this is not dictated at the interface level.\n\n:param data: (io.deephaven.db.v2.sources.chunk.WritableChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>...) - Per-column chunks of values.\n             Must all have the same size.",
  "chunkTypeForIndex": "Return the ChunkType for a given column index.\n\n:param idx: (int) - the column index to get the ChunkType for\n:return: (io.deephaven.db.v2.sources.chunk.ChunkType) the ChunkType for the specified column",
  "makeChunksForDefinition": "**Incompatible overloads text - text from the first overload:**\n\nCreate an array of chunks suitable for passing to our accept method.\n\n*Overload 1*  \n  :param size: (int) - the size of the chunks\n  :return: (io.deephaven.db.v2.sources.chunk.WritableChunk[]) an array of writable chunks\n  \n*Overload 2*  \n  :param definition: (io.deephaven.db.tables.TableDefinition) - the definition to make chunks for\n  :param size: (int) - the size of the returned chunks\n  :return: (io.deephaven.db.v2.sources.chunk.WritableChunk[]) an array of writable chunks",
  "refresh": "Refresh this LiveTable.",
  "table": "Return the stream table that this adapter is producing.\n\n:return: (io.deephaven.db.v2.DynamicTable) the resultant stream table"
 },
 "path": "io.deephaven.stream.StreamToTableAdapter",
 "text": "Adapter for converting streams of data into columnar Deephaven tables.",
 "typeName": "class"
}