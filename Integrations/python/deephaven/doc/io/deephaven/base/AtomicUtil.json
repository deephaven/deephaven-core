{
 "className": "io.deephaven.base.AtomicUtil",
 "methods": {
  "atomicAnd": ":param i: java.util.concurrent.atomic.AtomicInteger\n:param mask: int\n:return: int",
  "atomicAndNot": ":param i: java.util.concurrent.atomic.AtomicInteger\n:param mask: int\n:return: int",
  "atomicOr": ":param i: java.util.concurrent.atomic.AtomicInteger\n:param mask: int\n:return: int",
  "changeAndGetIfGreaterThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param by: int\n  :param pivot: int\n  :param negative: int\n  :return: int\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param by: long\n  :param pivot: long\n  :param negative: long\n  :return: long",
  "changeAndGetIfLessThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param by: int\n  :param pivot: int\n  :param negative: int\n  :return: int\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param by: long\n  :param pivot: long\n  :param negative: long\n  :return: long",
  "compareAndSetAndGetOld": ":param i: java.util.concurrent.atomic.AtomicLong\n:param expected: long\n:param updated: long\n:return: long",
  "getAndDecreaseIfGreaterThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param by: int\n  :param pivot: int\n  :return: int\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param by: long\n  :param pivot: long\n  :return: long",
  "getAndIncreaseIfLessThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param by: int\n  :param pivot: int\n  :return: int\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param by: long\n  :param pivot: long\n  :return: long",
  "getAndSetIfDecreases": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param value: long\n  :return: long\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param by: long\n  :param value: long\n  :return: long",
  "getAndSetIfGreaterThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param value: int\n  :param pivot: int\n  :return: int\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param value: long\n  :param pivot: long\n  :return: long",
  "getAndSetIfIncreases": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param value: long\n  :return: long\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param value: int\n  :return: int",
  "getAndSetIfIncreasesBy": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param by: long\n  :param value: long\n  :return: long\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param by: int\n  :param value: int\n  :return: int",
  "getAndSetIfLessThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param value: int\n  :param pivot: int\n  :return: int\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param value: long\n  :param pivot: long\n  :return: long",
  "setIfGreaterThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param pivot: int\n  :param value: int\n  :return: boolean\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param pivot: long\n  :param value: long\n  :return: boolean",
  "setIfLessThan": "*Overload 1*  \n  :param i: java.util.concurrent.atomic.AtomicInteger\n  :param pivot: int\n  :param value: int\n  :return: boolean\n  \n*Overload 2*  \n  :param i: java.util.concurrent.atomic.AtomicLong\n  :param pivot: long\n  :param value: long\n  :return: boolean"
 },
 "path": "io.deephaven.base.AtomicUtil",
 "typeName": "class"
}