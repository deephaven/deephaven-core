{
 "className": "io.deephaven.base.FileUtils",
 "methods": {
  "cleanDirectory": "Cleans the specified path. All files and subdirectories in the path will be deleted. (ie you'll be left with an\n empty directory).\n\n:param path: (java.io.File) - The path to clean",
  "deleteRecursively": ":param file: java.io.File",
  "deleteRecursivelyOnNFS": "**Incompatible overloads text - text from the first overload:**\n\nRecursive delete method that copes with .nfs files.\n\n*Overload 1*  \n  :param file: (java.io.File) -\n  \n*Overload 2*  \n  :param trashFile: (java.io.File) - Filename to move regular files to before deletion. .nfs files may be created in its parent\n          directory.\n  :param fileToBeDeleted: (java.io.File) - File or directory at which to begin recursive deletion.",
  "findAllFiles": "Scan directory recursively to find all files\n\n:param dir: (java.io.File) - \n:return: java.io.File[]",
  "missingSafeListFilenames": "*Overload 1*  \n  :param directory: java.io.File\n  :return: java.lang.String[]\n  \n*Overload 2*  \n  :param directory: java.io.File\n  :param filter: java.io.FilenameFilter\n  :return: java.lang.String[]",
  "missingSafeListFiles": "*Overload 1*  \n  :param directory: java.io.File\n  :return: java.io.File[]\n  \n*Overload 2*  \n  :param directory: java.io.File\n  :param filter: java.io.FileFilter\n  :return: java.io.File[]",
  "missingSafeListSubDirectories": ":param directory: java.io.File\n:return: java.io.File[]",
  "missingSafeListSubDirectoryNames": ":param directory: java.io.File\n:return: java.lang.String[]",
  "moveRecursively": "Move files accepted by a filter from their relative path under source to the same relative path under\n destination. Creates missing destination subdirectories as needed.\n\n:param source: (java.io.File) - Must be a directory.\n:param destination: (java.io.File) - Must be a directory if it exists.\n:param filter: (java.io.FileFilter) - Applied to normal files, only. We recurse on directories automatically.\n:param allowReplace: (boolean) - If the destination regular file exists, do we replace it, or silently ignore it?",
  "readTextFile": "*Overload 1*  \n  :param txtFile: java.io.File\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param txtFile: java.io.InputStream\n  :return: java.lang.String"
 },
 "path": "io.deephaven.base.FileUtils",
 "typeName": "class"
}