{
 "className": "io.deephaven.base.LowGarbageArrayIntegerMap",
 "methods": {
  "clone": ":return: java.lang.Object",
  "containsKey": ":param key: java.lang.Object\n:return: boolean",
  "containsValue": ":param value: java.lang.Object\n:return: boolean",
  "entrySet": ":return: java.util.Set<java.util.Map.Entry<java.lang.Integer,LowGarbageArrayIntegerMap.T>>",
  "get": ":param key: java.lang.Object\n:return: LowGarbageArrayIntegerMap.T",
  "isEmpty": ":return: boolean",
  "keySet": ":return: java.util.Set<java.lang.Integer>",
  "put": ":param key: java.lang.Integer\n:param value: LowGarbageArrayIntegerMap.T\n:return: LowGarbageArrayIntegerMap.T",
  "putAll": ":param m: java.util.Map<? extendsjava.lang.Integer,? extendsLowGarbageArrayIntegerMap.T>",
  "remove": ":param key: java.lang.Object\n:return: LowGarbageArrayIntegerMap.T",
  "size": ":return: int",
  "values": ":return: java.util.Collection<LowGarbageArrayIntegerMap.T>"
 },
 "path": "io.deephaven.base.LowGarbageArrayIntegerMap",
 "text": "A very simple Map for small maps with Integer keys (uses direct array access) that creates no garbage (except\n when expanding). This set only has one Iterator, which is reused. This set is not thread safe.\n \n Note: This class extends HashMap rather than Map (or AbstractMap) only because one of the\n fields where we want to use it (sun.nio.ch.EPollSelectorImpl#fdToKey) is (improperly) declared as a HashMap\n rather than a Map.",
 "typeName": "class"
}