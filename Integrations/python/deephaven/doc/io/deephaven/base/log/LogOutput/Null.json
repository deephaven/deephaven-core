{
 "className": "io.deephaven.base.log.LogOutput$Null",
 "methods": {
  "append": "Appends the character equivalent of each byte remaining in the given ByteBuffer ([65 66 67] == \"ABC\" not\n \"656667\"), but does not modify the mark, position, or limit of the ByteBuffer.\n\n*Overload 1*  \n  :param b: boolean\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 2*  \n  :param c: char\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 3*  \n  :param s: short\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 4*  \n  :param i: int\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 5*  \n  :param l: long\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 6*  \n  :param appendable: io.deephaven.base.log.LogOutputAppendable\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 7*  \n  Note: Java generics information - <T>\n  \n  :param objFormatter: io.deephaven.base.log.LogOutput.ObjFormatter<T>\n  :param t: T\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 8*  \n  Note: Java generics information - <T>\n  \n  :param objFormatter: io.deephaven.base.log.LogOutput.ObjIntIntFormatter<T>\n  :param t: T\n  :param nOffset: int\n  :param nLength: int\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 9*  \n  Note: Java generics information - <T,\n  U>\n  \n  :param objObjFormatter: io.deephaven.base.log.LogOutput.ObjObjFormatter<T,U>\n  :param t: T\n  :param u: U\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 10*  \n  :param formatter: io.deephaven.base.log.LogOutput.LongFormatter\n  :param n: long\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 11*  \n  :param seq: java.lang.CharSequence\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 12*  \n  :param seq: java.lang.CharSequence\n  :param start: int\n  :param length: int\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 13*  \n  :param bb: java.nio.ByteBuffer\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 14*  \n  :param t: java.lang.Throwable\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 15*  \n  :param ba: byte[]\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 16*  \n  :param ba: byte[]\n  :param pos: int\n  :param length: int\n  :return: io.deephaven.base.log.LogOutput\n  \n*Overload 17*  \n  :param ba: byte[]\n  :param terminator: byte\n  :return: io.deephaven.base.log.LogOutput",
  "appendDouble": ":param f: double\n:return: io.deephaven.base.log.LogOutput",
  "appendTimestamp": ":param utcMillis: long\n:param tb: io.deephaven.base.text.TimestampBuffer\n:return: io.deephaven.base.log.LogOutput",
  "appendTimestampMicros": ":param utcMicros: long\n:param tb: io.deephaven.base.text.TimestampBufferMicros\n:return: io.deephaven.base.log.LogOutput",
  "clear": ":return: io.deephaven.base.log.LogOutput",
  "close": ":return: io.deephaven.base.log.LogOutput",
  "getBuffer": ":param i: int\n:return: java.nio.ByteBuffer",
  "getBufferCount": ":return: int",
  "getEndOfHeaderOffset": ":return: int",
  "markEndOfHeader": ":return: io.deephaven.base.log.LogOutput",
  "nf": ":return: io.deephaven.base.log.LogOutput",
  "nl": ":return: io.deephaven.base.log.LogOutput",
  "relativeSize": ":return: int",
  "size": ":return: int",
  "start": ":return: io.deephaven.base.log.LogOutput"
 },
 "path": "io.deephaven.base.log.LogOutput.Null",
 "typeName": "class"
}