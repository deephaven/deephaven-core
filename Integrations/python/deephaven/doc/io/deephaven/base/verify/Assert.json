{
 "className": "io.deephaven.base.verify.Assert",
 "methods": {
  "assertion": "**Incompatible overloads text - text from the first overload:**\n\nassert (condition, conditionText)\n\n*Overload 1*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  \n*Overload 2*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param detailMessage: java.lang.String\n  \n*Overload 3*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  \n*Overload 4*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  \n*Overload 5*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  :param o2: java.lang.Object\n  :param name2: java.lang.String\n  \n*Overload 6*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  :param i2: int\n  :param name2: java.lang.String\n  \n*Overload 7*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  :param o2: java.lang.Object\n  :param name2: java.lang.String\n  :param o3: java.lang.Object\n  :param name3: java.lang.String\n  \n*Overload 8*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param b0: boolean\n  :param name0: java.lang.String\n  \n*Overload 9*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param b0: boolean\n  :param name0: java.lang.String\n  :param b1: boolean\n  :param name1: java.lang.String\n  \n*Overload 10*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param b0: boolean\n  :param name0: java.lang.String\n  :param b1: boolean\n  :param name1: java.lang.String\n  :param b2: boolean\n  :param name2: java.lang.String\n  \n*Overload 11*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param b0: boolean\n  :param name0: java.lang.String\n  :param b1: boolean\n  :param name1: java.lang.String\n  :param b2: boolean\n  :param name2: java.lang.String\n  :param b3: boolean\n  :param name3: java.lang.String\n  \n*Overload 12*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param i0: int\n  :param name0: java.lang.String\n  \n*Overload 13*  \n  :param condition: boolean\n  :param conditionText: java.lang.String\n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  :param name1: java.lang.String",
  "eq": "**Incompatible overloads text - text from the first overload:**\n\nassert (b0 == b1)\n\n*Overload 1*  \n  :param b0: boolean\n  :param name0: java.lang.String\n  :param b1: boolean\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param b0: boolean\n  :param name0: java.lang.String\n  :param b1: boolean\n  \n*Overload 3*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  :param name1: java.lang.String\n  \n*Overload 4*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  \n*Overload 5*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  :param name1: java.lang.String\n  \n*Overload 6*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  \n*Overload 7*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  :param name1: java.lang.String\n  \n*Overload 8*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  \n*Overload 9*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  :param name1: java.lang.String\n  \n*Overload 10*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  \n*Overload 11*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  :param name1: java.lang.String\n  \n*Overload 12*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  \n*Overload 13*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  :param name1: java.lang.String\n  \n*Overload 14*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  \n*Overload 15*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  :param name1: java.lang.String\n  \n*Overload 16*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  \n*Overload 17*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  \n*Overload 18*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object",
  "eqFalse": "assert (b == false)\n\n:param b: boolean\n:param name: java.lang.String",
  "eqNaN": "assert (Double.isNaN(d))\n\n:param d: double\n:param name: java.lang.String",
  "eqNull": "assert (o == null)\n\n:param o: java.lang.Object\n:param name: java.lang.String",
  "eqTrue": "assert (b == true)\n\n:param b: boolean\n:param name: java.lang.String",
  "eqZero": "**Incompatible overloads text - text from the first overload:**\n\nassert (b == 0)\n\n*Overload 1*  \n  :param c: char\n  :param name: java.lang.String\n  \n*Overload 2*  \n  :param b: byte\n  :param name: java.lang.String\n  \n*Overload 3*  \n  :param s: short\n  :param name: java.lang.String\n  \n*Overload 4*  \n  :param i: int\n  :param name: java.lang.String\n  \n*Overload 5*  \n  :param l: long\n  :param name: java.lang.String\n  \n*Overload 6*  \n  :param f: float\n  :param name: java.lang.String\n  \n*Overload 7*  \n  :param d: double\n  :param name: java.lang.String",
  "equals": "assert (o0 != null && o1 != null && o0.equals(o1))\n\n*Overload 1*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object",
  "exceptionNeverCaught": "**Incompatible overloads text - text from the first overload:**\n\nassert (this exception is never caught, Exception e)\n\n*Overload 1*  \n  :param e: java.lang.Exception\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 2*  \n  :param tryStatementDescription: java.lang.String\n  :param e: java.lang.Exception\n  :return: io.deephaven.base.verify.AssertionFailure",
  "geq": "**Incompatible overloads text - text from the first overload:**\n\nassert (b0 >= b1)\n\n*Overload 1*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  \n*Overload 3*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  :param name1: java.lang.String\n  \n*Overload 4*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  \n*Overload 5*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  :param name1: java.lang.String\n  \n*Overload 6*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  \n*Overload 7*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  :param name1: java.lang.String\n  \n*Overload 8*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  \n*Overload 9*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  :param name1: java.lang.String\n  \n*Overload 10*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  \n*Overload 11*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  :param name1: java.lang.String\n  \n*Overload 12*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  \n*Overload 13*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  :param name1: java.lang.String\n  \n*Overload 14*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double",
  "geqZero": "**Incompatible overloads text - text from the first overload:**\n\nassert (b >= 0)\n\n*Overload 1*  \n  :param b: byte\n  :param name: java.lang.String\n  \n*Overload 2*  \n  :param s: short\n  :param name: java.lang.String\n  \n*Overload 3*  \n  :param i: int\n  :param name: java.lang.String\n  \n*Overload 4*  \n  :param l: long\n  :param name: java.lang.String\n  \n*Overload 5*  \n  :param f: float\n  :param name: java.lang.String\n  \n*Overload 6*  \n  :param d: double\n  :param name: java.lang.String",
  "gt": "**Incompatible overloads text - text from the first overload:**\n\nassert (b0 > b1)\n\n*Overload 1*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  \n*Overload 3*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  :param name1: java.lang.String\n  \n*Overload 4*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  \n*Overload 5*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  :param name1: java.lang.String\n  \n*Overload 6*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  \n*Overload 7*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  :param name1: java.lang.String\n  \n*Overload 8*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  \n*Overload 9*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  :param name1: java.lang.String\n  \n*Overload 10*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  \n*Overload 11*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  :param name1: java.lang.String\n  \n*Overload 12*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  \n*Overload 13*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  :param name1: java.lang.String\n  \n*Overload 14*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double",
  "gtZero": "**Incompatible overloads text - text from the first overload:**\n\nassert (b > 0)\n\n*Overload 1*  \n  :param b: byte\n  :param name: java.lang.String\n  \n*Overload 2*  \n  :param s: short\n  :param name: java.lang.String\n  \n*Overload 3*  \n  :param i: int\n  :param name: java.lang.String\n  \n*Overload 4*  \n  :param l: long\n  :param name: java.lang.String\n  \n*Overload 5*  \n  :param f: float\n  :param name: java.lang.String\n  \n*Overload 6*  \n  :param d: double\n  :param name: java.lang.String",
  "holdsLock": "assert (o != null && (current thread holds o's lock))\n\n:param o: java.lang.Object\n:param name: java.lang.String",
  "instanceOf": "assert (o instanceof type)\n\n:param o: java.lang.Object\n:param name: java.lang.String\n:param type: java.lang.Class<?>",
  "isAWTThread": "assert (current thread is AWT Event Dispatch Thread)",
  "isNotAWTThread": "assert (current thread is AWT Event Dispatch Thread)",
  "leq": "**Incompatible overloads text - text from the first overload:**\n\nassert (b0 <= b1)\n\n*Overload 1*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  \n*Overload 3*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  :param name1: java.lang.String\n  \n*Overload 4*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  \n*Overload 5*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  :param name1: java.lang.String\n  \n*Overload 6*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  \n*Overload 7*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  :param name1: java.lang.String\n  \n*Overload 8*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  \n*Overload 9*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  :param name1: java.lang.String\n  \n*Overload 10*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  \n*Overload 11*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  :param name1: java.lang.String\n  \n*Overload 12*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  \n*Overload 13*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  :param name1: java.lang.String\n  \n*Overload 14*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double",
  "leqZero": "**Incompatible overloads text - text from the first overload:**\n\nassert (b <= 0)\n\n*Overload 1*  \n  :param b: byte\n  :param name: java.lang.String\n  \n*Overload 2*  \n  :param s: short\n  :param name: java.lang.String\n  \n*Overload 3*  \n  :param i: int\n  :param name: java.lang.String\n  \n*Overload 4*  \n  :param l: long\n  :param name: java.lang.String\n  \n*Overload 5*  \n  :param f: float\n  :param name: java.lang.String\n  \n*Overload 6*  \n  :param d: double\n  :param name: java.lang.String",
  "lt": "**Incompatible overloads text - text from the first overload:**\n\nassert (b0 < b1)\n\n*Overload 1*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  \n*Overload 3*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  :param name1: java.lang.String\n  \n*Overload 4*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  \n*Overload 5*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  :param name1: java.lang.String\n  \n*Overload 6*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  \n*Overload 7*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  :param name1: java.lang.String\n  \n*Overload 8*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  \n*Overload 9*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  :param name1: java.lang.String\n  \n*Overload 10*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  \n*Overload 11*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  :param name1: java.lang.String\n  \n*Overload 12*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  \n*Overload 13*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  :param name1: java.lang.String\n  \n*Overload 14*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double",
  "ltZero": "**Incompatible overloads text - text from the first overload:**\n\nassert (b < 0)\n\n*Overload 1*  \n  :param b: byte\n  :param name: java.lang.String\n  \n*Overload 2*  \n  :param s: short\n  :param name: java.lang.String\n  \n*Overload 3*  \n  :param i: int\n  :param name: java.lang.String\n  \n*Overload 4*  \n  :param l: long\n  :param name: java.lang.String\n  \n*Overload 5*  \n  :param f: float\n  :param name: java.lang.String\n  \n*Overload 6*  \n  :param d: double\n  :param name: java.lang.String",
  "neq": "**Incompatible overloads text - text from the first overload:**\n\nassert (b0 != b1)\n\n*Overload 1*  \n  :param b0: boolean\n  :param name0: java.lang.String\n  :param b1: boolean\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param b0: boolean\n  :param name0: java.lang.String\n  :param b1: boolean\n  \n*Overload 3*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  :param name1: java.lang.String\n  \n*Overload 4*  \n  :param c0: char\n  :param name0: java.lang.String\n  :param c1: char\n  \n*Overload 5*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  :param name1: java.lang.String\n  \n*Overload 6*  \n  :param b0: byte\n  :param name0: java.lang.String\n  :param b1: byte\n  \n*Overload 7*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  :param name1: java.lang.String\n  \n*Overload 8*  \n  :param s0: short\n  :param name0: java.lang.String\n  :param s1: short\n  \n*Overload 9*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  :param name1: java.lang.String\n  \n*Overload 10*  \n  :param i0: int\n  :param name0: java.lang.String\n  :param i1: int\n  \n*Overload 11*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  :param name1: java.lang.String\n  \n*Overload 12*  \n  :param l0: long\n  :param name0: java.lang.String\n  :param l1: long\n  \n*Overload 13*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  :param name1: java.lang.String\n  \n*Overload 14*  \n  :param f0: float\n  :param name0: java.lang.String\n  :param f1: float\n  \n*Overload 15*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  :param name1: java.lang.String\n  \n*Overload 16*  \n  :param d0: double\n  :param name0: java.lang.String\n  :param d1: double\n  \n*Overload 17*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  \n*Overload 18*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object",
  "neqFalse": "assert (b != false)\n\n:param b: boolean\n:param name: java.lang.String",
  "neqNaN": "assert (!Double.isNaN(d)\n\n:param d: double\n:param name: java.lang.String",
  "neqNull": "assert (o != null)\n\n:param o: java.lang.Object\n:param name: java.lang.String",
  "neqTrue": "assert (b != true)\n\n:param b: boolean\n:param name: java.lang.String",
  "neqZero": "**Incompatible overloads text - text from the first overload:**\n\nassert (b != 0)\n\n*Overload 1*  \n  :param c: char\n  :param name: java.lang.String\n  \n*Overload 2*  \n  :param b: byte\n  :param name: java.lang.String\n  \n*Overload 3*  \n  :param s: short\n  :param name: java.lang.String\n  \n*Overload 4*  \n  :param i: int\n  :param name: java.lang.String\n  \n*Overload 5*  \n  :param l: long\n  :param name: java.lang.String\n  \n*Overload 6*  \n  :param f: float\n  :param name: java.lang.String\n  \n*Overload 7*  \n  :param d: double\n  :param name: java.lang.String",
  "neverInvoked": "Note: Java generics information - <TYPE>\n\n:param t1: TYPE\n:param t2: TYPE\n:return: TYPE",
  "nonempty": "assert (s != null && s.length() > 0)\n\n:param s: java.lang.String\n:param name: java.lang.String",
  "notEquals": "assert (o0 != null && o1 != null && !o0.equals(o1))\n\n*Overload 1*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object\n  :param name1: java.lang.String\n  \n*Overload 2*  \n  :param o0: java.lang.Object\n  :param name0: java.lang.String\n  :param o1: java.lang.Object",
  "notHoldsLock": "assert (o != null && !(current thread holds o's lock))\n\n:param o: java.lang.Object\n:param name: java.lang.String",
  "notInstanceOf": "assert !(o instanceof type)\n\n:param o: java.lang.Object\n:param name: java.lang.String\n:param type: java.lang.Class<?>",
  "nullSafeEquals": "assert ((o0 == null && o1 == null) || (o0 != null && o0.equals(o1)))\n\n:param o0: java.lang.Object\n:param name0: java.lang.String\n:param o1: java.lang.Object\n:param name1: java.lang.String",
  "setOnAssertionCallback": ":param newCallback: java.util.function.Consumer<io.deephaven.base.verify.AssertionFailure>\n:return: boolean",
  "statementNeverExecuted": "**Incompatible overloads text - text from the first overload:**\n\nassert (statementDescription is never executed)\n\n*Overload 1*  \n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 2*  \n  :param statementDescription: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure",
  "valueNeverOccurs": "**Incompatible overloads text - text from the first overload:**\n\nassert (this value never occurs, Object o, name)\n\n*Overload 1*  \n  :param o: java.lang.Object\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 2*  \n  :param b: boolean\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 3*  \n  :param c: char\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 4*  \n  :param b: byte\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 5*  \n  :param s: short\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 6*  \n  :param i: int\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 7*  \n  :param l: long\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 8*  \n  :param f: float\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure\n  \n*Overload 9*  \n  :param d: double\n  :param name: java.lang.String\n  :return: io.deephaven.base.verify.AssertionFailure"
 },
 "path": "io.deephaven.base.verify.Assert",
 "text": "Assertion methods for simple runtime program verification. Failed assertions throw AssertionFailure.\n \n Methods:\n \n* void assertion(boolean condition, String conditionText[, String detailMessage])\n * void assertion(boolean condition, String conditionText, value0, String name0, value1, String name0, ... )\n \n\n* void statementNeverExecuted()\n * void statementNeverExecuted(String statementDescription)\n * void exceptionNeverCaught(Exception caughtException)\n * void exceptionNeverCaught(String tryStatementDescription, Exception caughtException)\n * void valueNeverOccurs(value, String name)\n * void valuesNeverOccur(value0, name0, value1, name1, ... )\n \n\n* void holdsLock/notHoldsLock(Object, String name)\n \n\n* void instanceOf/notInstanceOf(Object, String name, Class type[, int numCallsBelowRequirer])\n \n\n* void eq/neq(boolean/char/byte/short/int/long/float/double, String name0,\n boolean/char/byte/short/int/long/float/double[, String name1])\n * void lt/leq/gt/geq(char/byte/short/int/long/float/double, String name0, char/byte/short/int/long/float/double[,\n String name1])\n \n\n* void eqFalse/neqFalse/eqTrue/neqTrue(boolean, String name)\n * void eqZero/neqZero(char/byte/short/int/long/float/double, String name)\n * void ltZero/leqZero/gtZero/geqZero(byte/short/int/long/float/double, String name)\n \n\n* void eq/neq(Object, name0, Object[, name1])\n * void eqNull/neqNull(Object, String name)\n \n\n* void equals(Object, String name0, Object, String name1)\n * void nonempty(String, String name)\n \n\n Naming Rationale:\n \n* eq, neq, lt, leq, gt, get correspond to ==, !=, , >=, e.g.,\n \n* For Object a and b, Assert.eq(a, \"a\", b, \"b\") corresponds to assert (a == b)\n * For Object o, Assert.neqNull(o, \"o\") corresponds to assert (o != null)\n * for int x, Assert.eqZero(x, \"x\") corresponds to assert (x == 0)\n \n* equals corresponds to Object.equals (preceded by necessary null checks), e.g.,\n \n* For Object a and b, Assert.equals(a, \"a\", b, \"b\") corresponds to assert (a!= null && b != null && a.equals(b))\n * for String s, Assert.nonempty(s, \"s\") corresponds to assert (s != null && s.length() != 0)",
 "typeName": "class"
}