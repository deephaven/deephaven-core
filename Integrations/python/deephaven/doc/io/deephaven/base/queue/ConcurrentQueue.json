{
 "className": "io.deephaven.base.queue.ConcurrentQueue",
 "methods": {
  "dequeue": "Returns null when the queue is empty This method should never block (but it may spin for a finite amount of time)\n\n:return: ConcurrentQueue.T",
  "enqueue": "**Incompatible overloads text - text from the first overload:**\n\nReturns false when the queue is full This method should never block (but it may spin for a finite amount of time)\n\n*Overload 1*  \n  :param new_value: ConcurrentQueue.T\n  :return: boolean\n  \n*Overload 2*  \n  :param new_value: ConcurrentQueue.T\n  :param spins_between_yields: long\n  :return: boolean",
  "peek": "Return the current next value, or null if the queue is empty.\n\n:return: ConcurrentQueue.T",
  "put": "Only return when enqueued. (Might spin continuously)\n\n:param new_value: ConcurrentQueue.T",
  "take": "Only return w/ a dequeued value. (Might spin continuously)\n\n:return: ConcurrentQueue.T"
 },
 "path": "io.deephaven.base.queue.ConcurrentQueue",
 "text": "Common interface for LockFreeArrayQueue and variants.",
 "typeName": "interface"
}