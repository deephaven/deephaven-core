{
 "className": "io.deephaven.base.string.cache.CharSequenceAdapterBuilder",
 "methods": {
  "append": "**Incompatible overloads text - text from the first overload:**\n\nAppend a CharSequence to this adapter.\n\n*Overload 1*  \n  :param value: (java.lang.String) - A String instance to append to this adapter.\n  :param offset: (int) - The index of the first char in value to include in the proto-string.\n  :param length: (int) - The length of the proto-String in chars.\n  :return: (io.deephaven.base.string.cache.CharSequenceAdapterBuilder) This adapter.\n  \n*Overload 2*  \n  :param value: (java.lang.String) - A String instance to append to this adapter.\n  :return: (io.deephaven.base.string.cache.CharSequenceAdapterBuilder) This adapter.\n  \n*Overload 3*  \n  :param value: (java.lang.CharSequence) - A CharSequence instance to append to this adapter.\n  :param offset: (int) - The index of the first char in value to include in the proto-string.\n  :param length: (int) - The length of the proto-String in chars.\n  :return: (io.deephaven.base.string.cache.CharSequenceAdapterBuilder) This adapter.\n  \n*Overload 4*  \n  :param value: (java.lang.CharSequence) - A CharSequence instance to append to this adapter.\n  :return: (io.deephaven.base.string.cache.CharSequenceAdapterBuilder) This adapter.\n  \n*Overload 5*  \n  :param value: char[]\n  :param offset: int\n  :param length: int\n  :return: io.deephaven.base.string.cache.CharSequenceAdapterBuilder\n  \n*Overload 6*  \n  :param value: char[]\n  :return: io.deephaven.base.string.cache.CharSequenceAdapterBuilder\n  \n*Overload 7*  \n  :param value: (char) - A char to append to this adapter.\n  :return: (io.deephaven.base.string.cache.CharSequenceAdapterBuilder) This adapter.\n  \n*Overload 8*  \n  :param value: byte[]\n  :param offset: int\n  :param length: int\n  :return: io.deephaven.base.string.cache.CharSequenceAdapterBuilder\n  \n*Overload 9*  \n  :param value: byte[]\n  :return: io.deephaven.base.string.cache.CharSequenceAdapterBuilder\n  \n*Overload 10*  \n  :param value: (byte) - A byte to append to this adapter.\n  :return: (io.deephaven.base.string.cache.CharSequenceAdapterBuilder) This adapter.",
  "charAt": ":param index: int\n:return: char",
  "clear": "Prepare this adapter for re-use, and eliminate references to external resources.\n\n:return: io.deephaven.base.string.cache.CharSequenceAdapterBuilder",
  "length": ":return: int",
  "reserveCapacity": "Grow the internal storage of this builder to avoid repeated resizing.\n\n:param needed: (int) -",
  "toCompressedString": "Convert this StringCompatible into a CompressedString. Implementations should not cache result CompressedStrings,\n in order to avoid inadvertently allowing promotion of short-lived objects under generational garbage collection.\n\n:return: (io.deephaven.base.string.cache.CompressedString) A newly constructed CompressedString representing the same sequence of characters as this\n         StringCompatible (or this object, if appropriate).",
  "toMappedCompressedString": "Convert this StringCompatible into a MappedCompressedString. Implementations should not cache result\n CompressedStrings, in order to avoid inadvertently allowing promotion of short-lived objects under generational\n garbage collection.\n\n:return: (io.deephaven.base.string.cache.MappedCompressedString) A newly constructed MappedCompressedString representing the same sequence of characters as this\n         StringCompatible (or this object, if appropriate)."
 },
 "path": "io.deephaven.base.string.cache.CharSequenceAdapterBuilder",
 "text": "StringBuilder-like CharSequenceAdapter implementation.",
 "typeName": "class"
}