{
 "className": "io.deephaven.base.system.AsyncSystem",
 "methods": {
  "exit": "Starts an asynchronous call to System.exit(int). A new daemon thread will be started and it will invoke\n only System.exit(status). In the event that System.exit(int) throws an exception, the name of the\n thread and the stacktrace will be printed out.\n\n \n Note: this call will return, unlike a direct call to System.exit(int). Callers should manage this as\n appropriate.\n\n:param name: (java.lang.String) - the name to attach to the thread\n:param status: (int) - exit status\n:param out: (java.io.PrintStream) - the output print stream (on exception)",
  "exitCaught": "**Incompatible overloads text - text from the first overload:**\n\nEquivalent to {@code exitCaught(thread, throwable, status, out, null).\n\n*Overload 1*  \n  :param thread: java.lang.Thread\n  :param throwable: java.lang.Throwable\n  :param status: int\n  :param out: java.io.PrintStream\n  \n*Overload 2*  \n  :param thread: (java.lang.Thread) - the thread\n  :param throwable: (java.lang.Throwable) - the throwable\n  :param status: (int) - the status\n  :param out: (java.io.PrintStream) - the print stream\n  :param message: (java.lang.String) - the optional additional message",
  "exitUncaught": "Prints out a message and stacktrace, and then calls exit(String, int, PrintStream). This should\n only be called from uncaught exception handlers.\n\n:param thread: (java.lang.Thread) - the thread\n:param throwable: (java.lang.Throwable) - the throwable\n:param status: (int) - the status\n:param out: (java.io.PrintStream) - the print stream",
  "uncaughtExceptionHandler": "Creates an Thread.UncaughtExceptionHandler which calls out to\n exitUncaught(Thread, Throwable, int, PrintStream).\n\n:param status: (int) - the exit status\n:param out: java.io.PrintStream\n:return: (java.lang.Thread.UncaughtExceptionHandler) the uncaught exception handler"
 },
 "path": "io.deephaven.base.system.AsyncSystem",
 "text": "A set of conventions for logging exceptions and asynchronously exiting the JVM.",
 "typeName": "class"
}