{
 "className": "io.deephaven.jpy.JpyConfig$Flag",
 "methods": {
  "getBitset": ":return: int",
  "valueOf": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)\n\n:param name: (java.lang.String) - the name of the enum constant to be returned.\n:return: (io.deephaven.jpy.JpyConfig.Flag) the enum constant with the specified name",
  "values": "Returns an array containing the constants of this enum type, in\nthe order they are declared.\n\n:return: (io.deephaven.jpy.JpyConfig.Flag[]) an array containing the constants of this enum type, in the order they are declared"
 },
 "path": "io.deephaven.jpy.JpyConfig.Flag",
 "text": "We can't reference the values in {/@link Diag} directly - that would cause {/@link org.jpy.PyLib} to prematurely\n initialize.\n\n We could: 1) Refactor {/@link Diag} so as not to initialize {/@link PyLib} 2) Use compile-time code generation\n against {/@link Diag} 3) Test to make sure {/@link Flag} and {/@link Diag} are in-sync\n\n We are currently doing the #3, see JpyConfigFlagTest",
 "typeName": "enum"
}