{
 "className": "io.deephaven.api.agg.Aggregation",
 "methods": {
  "AggAbsSum": "Create an absolute sum aggregation for the supplied column name\n pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggApproxPct": "**Incompatible overloads text - text from the first overload:**\n\nCreate an approximate percentile aggregation for\n the supplied input column name and percentile/output column name pairs with the default T-Digest\n compression factor.\n\n*Overload 1*  \n  :param percentile: (double) - The percentile to use for all component\n          aggregations\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param percentile: (double) - The percentile to use for all component\n          aggregations\n  :param compression: (double) - T-Digest compression factor; must be > 1, should\n          probably be < 1000\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 3*  \n  :param inputColumn: (java.lang.String) - The input column name\n  :param percentileOutputs: (io.deephaven.api.agg.util.PercentileOutput...) - The percentile/output column name pairs for the component\n          aggregations; see PctOut(double, String).\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 4*  \n  :param inputColumn: (java.lang.String) - The input column name\n  :param compression: (double) - T-Digest compression factor; must be > 1, should\n          probably be < 1000\n  :param percentileOutputs: (io.deephaven.api.agg.util.PercentileOutput...) - The percentile/output column name pairs for the component\n          aggregations; see PctOut(double, String).\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggAvg": "Create an average (arithmetic mean) aggregation for the\n supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggCount": "Create a count aggregation with the supplied output column name.\n\n:param resultColumn: (java.lang.String) - The output column name\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggCountDistinct": "**Incompatible overloads text - text from the first overload:**\n\nCreate a count distinct aggregation for the supplied\n column name pairs. This will count null values from the input column(s) if countNulls is\n true.\n\n*Overload 1*  \n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param countNulls: (boolean) - Whether null values should be counted; see AggSpecCountDistinct.countNulls()}\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggDistinct": "**Incompatible overloads text - text from the first overload:**\n\nCreate a distinct aggregation for the supplied column name\n pairs. This will include null values in the output column(s) if includeNulls is true.\n\n*Overload 1*  \n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param includeNulls: (boolean) - Whether null values should be included; see AggSpecDistinct.includeNulls()\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggFirst": "Create a first aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggFirstRowKey": "Create a first row key aggregation with the supplied result column.\n\n:param resultColumn: (java.lang.String) - The output column name\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggFormula": "Create a formula aggregation with the supplied formula,\n paramToken, and column name pairs.\n\n:param formula: (java.lang.String) - The formula to use for all input columns to produce all output\n        columns\n:param paramToken: (java.lang.String) - The parameter token to replace with the input column name\n        in formula\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggFreeze": "Create a freeze aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggGroup": "Create a group aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggLast": "Create a last aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggLastRowKey": "Create a last row key aggregation with the supplied result column.\n\n:param resultColumn: (java.lang.String) - The output column name\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggMax": "Create a max aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggMed": "**Incompatible overloads text - text from the first overload:**\n\nCreate a median aggregation for the supplied column name pairs.\n For numeric types, if there are an even number of values the result will be an average of the two middle values\n if average is true, else the result will be the lower of the two middle values.\n\n*Overload 1*  \n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param average: (boolean) - Whether to average the middle two values for even-sized result sets of numeric types; see\n          AggSpecMedian.averageEvenlyDivided()\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggMin": "Create a min aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggPct": "**Incompatible overloads text - text from the first overload:**\n\nCreate a percentile aggregation for the supplied input column\n name and percentile/output column name pairs.\n\n*Overload 1*  \n  :param percentile: (double) - The percentile to use for all component aggregations\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param percentile: (double) - The percentile to use for all component aggregations\n  :param average: (boolean) - Whether to average the lower and higher values for evenly divided result sets of numeric types;\n          see AggSpecPercentile.averageEvenlyDivided()\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 3*  \n  :param inputColumn: (java.lang.String) - The input column name\n  :param percentileOutputs: (io.deephaven.api.agg.util.PercentileOutput...) - The percentile/output column name pairs for the component\n          aggregations; see PctOut(double, String).\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 4*  \n  :param inputColumn: (java.lang.String) - The input column name\n  :param average: (boolean) - Whether to average the lower and higher values for evenly divided result sets of numeric types;\n          see AggSpecPercentile.averageEvenlyDivided()\n  :param percentileOutputs: (io.deephaven.api.agg.util.PercentileOutput...) - The percentile/output column name pairs for the component\n          aggregations; see PctOut(double, String).\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggSortedFirst": "**Incompatible overloads text - text from the first overload:**\n\nCreate a sorted first aggregation for the supplied sort\n column name and input/output column name pairs.\n\n*Overload 1*  \n  :param sortColumn: (java.lang.String) - The sort column name\n  :param pairs: (java.lang.String...) - The input/output column name pairs for the component aggregations\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param sortColumns: (java.util.Collection<? extendsjava.lang.String>) - The sort column names\n  :param pairs: (java.lang.String...) - The input/output column name pairs for the component aggregations\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggSortedLast": "**Incompatible overloads text - text from the first overload:**\n\nCreate a sorted last aggregation for the supplied sort column\n name and input/output column name pairs.\n\n*Overload 1*  \n  :param sortColumn: (java.lang.String) - The sort column name\n  :param pairs: (java.lang.String...) - The input/output column name pairs for the component aggregations\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param sortColumns: (java.util.Collection<? extendsjava.lang.String>) - The sort column names\n  :param pairs: (java.lang.String...) - The input/output column name pairs for the component aggregations\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggStd": "Create a standard deviation aggregation for the supplied column name\n pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggSum": "Create a sum aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggTDigest": "**Incompatible overloads text - text from the first overload:**\n\nCreate a T-Digest aggregation for the supplied column name pairs\n with the default T-Digest compression factor.\n\n*Overload 1*  \n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param compression: (double) - T-Digest compression factor; must be > 1, should\n          probably be < 1000\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggUnique": "**Incompatible overloads text - text from the first overload:**\n\nCreate a unique aggregation for the supplied column name pairs.\n This will consider null values when determining if a group has a single unique value if\n includeNulls is true. Non-unique groups will have null values in the output column.\n\n*Overload 1*  \n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 2*  \n  :param includeNulls: (boolean) - Whether to consider null values towards uniqueness; see\n          AggSpecUnique.includeNulls()\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 3*  \n  :param includeNulls: (boolean) - Whether to consider null values towards uniqueness\n  :param nonUniqueSentinel: (io.deephaven.api.agg.util.Sentinel) - The value to output for non-unique groups\n  :param pairs: (java.lang.String...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggVar": "Create a variance aggregation for the supplied column name pairs.\n\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggWAvg": "Create a weighted average aggregation for the supplied weight\n column name and column name pairs.\n\n:param weightColumn: (java.lang.String) - The weight column name\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "AggWSum": "Create a weighted sum aggregation for the supplied weight column\n name and column name pairs.\n\n:param weightColumn: (java.lang.String) - The weight column name\n:param pairs: (java.lang.String...) - The input/output column name pairs\n:return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "PctOut": "Make a percentile/output column name pair. This allows for strongly-typed input to\n various approximate percentile and percentile aggregation factory methods.\n\n:param percentile: (double) - The percentile for the aggregation\n:param outputColumn: (java.lang.String) - The output column name to associate with the percentile\n:return: (io.deephaven.api.agg.util.PercentileOutput) The percentile/output column name pair",
  "Sentinel": "**Incompatible overloads text - text from the first overload:**\n\nMake a sentinel wrapping null. This serves to avoid ambiguity in the var-args overloads\n of some Aggregation factory methods.\n\n*Overload 1*  \n  :param value: (java.lang.Object) - The value to wrap\n  :return: (io.deephaven.api.agg.util.Sentinel) The sentinel\n  \n*Overload 2*  \n  :return: (io.deephaven.api.agg.util.Sentinel) The sentinel",
  "of": "**Incompatible overloads text - text from the first overload:**\n\nCombine an AggSpec and an input/output column name pair into a ColumnAggregation.\n\n*Overload 1*  \n  :param spec: (io.deephaven.api.agg.spec.AggSpec) - The aggregation specifier to apply to the column name pair\n  :param pair: (java.lang.String) - The input/output column name pair\n  :return: (io.deephaven.api.agg.ColumnAggregation) The aggregation\n  \n*Overload 2*  \n  :param spec: (io.deephaven.api.agg.spec.AggSpec) - The aggregation specifier to apply to the column name pair(s)\n  :param pairs: (java.lang.String...) - The input/output column name pair or\n          pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 3*  \n  :param aggregations: (io.deephaven.api.agg.Aggregation...) - The aggregations to combine\n  :return: (io.deephaven.api.agg.Aggregation) The combined aggregation\n  \n*Overload 4*  \n  Note: Java generics information - <INPUT_TYPE>\n  \n  :param columnAggFactory: (java.util.function.BiFunction<io.deephaven.api.ColumnName,INPUT_TYPE,io.deephaven.api.agg.ColumnAggregation>) - A factory for combining an input column and input value into a aggregation\n  :param inputColumn: (java.lang.String) - The input column for each component of the resulting aggregation\n  :param inputs: (INPUT_TYPE...) - The input values to combine with the input column via the factory\n  :return: (io.deephaven.api.agg.Aggregation) The combined aggregation",
  "walk": "Glue method to deliver this Aggregation to a AggSpec.Visitor.\n\nNote: Java generics information - <V extends io.deephaven.api.agg.Aggregation.Visitor>\n\n:param visitor: (V) - The visitor\n:return: (V) The visitor"
 },
 "path": "io.deephaven.api.agg.Aggregation",
 "text": "Represents an aggregation that can be applied to a table.",
 "typeName": "interface"
}