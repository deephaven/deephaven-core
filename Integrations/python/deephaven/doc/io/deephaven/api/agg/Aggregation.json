{
 "className": "io.deephaven.api.agg.Aggregation",
 "methods": {
  "AggAbsSum": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggApproxPct": "*Overload 1*  \n  :param percentile: double\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param percentile: double\n  :param compression: double\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 3*  \n  :param inputColumn: java.lang.String\n  :param percentileOutputs: io.deephaven.api.agg.util.PercentileOutput...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 4*  \n  :param inputColumn: java.lang.String\n  :param compression: double\n  :param percentileOutputs: io.deephaven.api.agg.util.PercentileOutput...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggAvg": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggCount": ":param resultColumn: java.lang.String\n:return: io.deephaven.api.agg.Aggregation",
  "AggCountDistinct": "*Overload 1*  \n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param countNulls: boolean\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggDistinct": "*Overload 1*  \n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param includeNulls: boolean\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggFirst": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggFirstRowKey": ":param resultColumn: java.lang.String\n:return: io.deephaven.api.agg.Aggregation",
  "AggFormula": ":param formula: java.lang.String\n:param formulaParam: java.lang.String\n:param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggGroup": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggLast": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggLastRowKey": ":param resultColumn: java.lang.String\n:return: io.deephaven.api.agg.Aggregation",
  "AggMax": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggMed": "*Overload 1*  \n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param average: boolean\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggMin": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggPct": "*Overload 1*  \n  :param percentile: double\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param percentile: double\n  :param average: boolean\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 3*  \n  :param inputColumn: java.lang.String\n  :param percentileOutputs: io.deephaven.api.agg.util.PercentileOutput...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 4*  \n  :param inputColumn: java.lang.String\n  :param average: boolean\n  :param percentileOutputs: io.deephaven.api.agg.util.PercentileOutput...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggSortedFirst": "*Overload 1*  \n  :param sortedColumn: java.lang.String\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param sortedColumns: java.util.Collection<? extendsjava.lang.String>\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggSortedLast": "*Overload 1*  \n  :param sortedColumn: java.lang.String\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param sortedColumns: java.util.Collection<? extendsjava.lang.String>\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggStd": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggSum": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggTDigest": "*Overload 1*  \n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param compression: double\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggUnique": "*Overload 1*  \n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 2*  \n  :param includeNulls: boolean\n  :param nonUniqueSentinel: java.lang.Object\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation",
  "AggVar": ":param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggWAvg": ":param weightColumn: java.lang.String\n:param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "AggWSum": ":param weightColumn: java.lang.String\n:param pairs: java.lang.String...\n:return: io.deephaven.api.agg.Aggregation",
  "PctOut": ":param percentile: double\n:param outputColumn: java.lang.String\n:return: io.deephaven.api.agg.util.PercentileOutput",
  "of": "*Overload 1*  \n  :param spec: io.deephaven.api.agg.spec.AggSpec\n  :param pair: java.lang.String\n  :return: io.deephaven.api.agg.ColumnAggregation\n  \n*Overload 2*  \n  :param spec: io.deephaven.api.agg.spec.AggSpec\n  :param pairs: java.lang.String...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 3*  \n  :param aggregations: io.deephaven.api.agg.Aggregation...\n  :return: io.deephaven.api.agg.Aggregation\n  \n*Overload 4*  \n  Note: Java generics information - <INPUT_TYPE>\n  \n  :param columnAggFactory: java.util.function.BiFunction<io.deephaven.api.ColumnName,INPUT_TYPE,io.deephaven.api.agg.ColumnAggregation>\n  :param inputColumn: java.lang.String\n  :param inputs: INPUT_TYPE...\n  :return: io.deephaven.api.agg.Aggregation",
  "walk": "Note: Java generics information - <V extends io.deephaven.api.agg.Aggregation.Visitor>\n\n:param visitor: V\n:return: V"
 },
 "path": "io.deephaven.api.agg.Aggregation",
 "text": "Represents an aggregation that can be applied to a table.",
 "typeName": "interface"
}