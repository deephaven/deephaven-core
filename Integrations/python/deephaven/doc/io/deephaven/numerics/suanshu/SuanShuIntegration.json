{
 "className": "io.deephaven.numerics.suanshu.SuanShuIntegration",
 "methods": {
  "ssMat": "**Incompatible overloads text - text from the first overload:**\n\nWrap Number[]... as Matrix This method assumes numberColumnsData to be in unconventional\n [columns][rows] structure, where first dimension denotes columns and second dimension denotes rows.\n\n*Overload 1*  \n  :param byteVectors: (io.deephaven.vector.ByteVector...) - array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by ByteVector...\n  \n*Overload 2*  \n  :param byteColumnsData: (byte[]...) - 2D array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by byte[]...\n  \n*Overload 3*  \n  :param shortVectors: (io.deephaven.vector.ShortVector...) - array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by ShortVector...\n  \n*Overload 4*  \n  :param shortColumnsData: (short[]...) - 2D array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by short[]...\n  \n*Overload 5*  \n  :param intVectors: (io.deephaven.vector.IntVector...) - array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by IntVector...\n  \n*Overload 6*  \n  :param intColumnsData: (int[]...) - 2D array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by int[]...\n  \n*Overload 7*  \n  :param floatVectors: (io.deephaven.vector.FloatVector...) - array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by FloatVector...\n  \n*Overload 8*  \n  :param floatColumnsData: (float[]...) - 2D array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by float[]...\n  \n*Overload 9*  \n  :param longVectors: (io.deephaven.vector.LongVector...) - array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by LongVector...\n  \n*Overload 10*  \n  :param longColumnsData: (long[]...) - 2D array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by long[]...\n  \n*Overload 11*  \n  :param doubleVectors: (io.deephaven.vector.DoubleVector...) - array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by DoubleVector...\n  \n*Overload 12*  \n  :param doubleColumnsData: (double[]...) - 2D array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by double[]...\n  \n*Overload 13*  \n  :param numberColumnsData: (java.lang.Number[]...) - 2D array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by Number[]...\n  \n*Overload 14*  \n  :param vectors: (io.deephaven.vector.Vector...) - array to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by Vector...\n  \n*Overload 15*  \n  Note: Java generics information - <T extends io.deephaven.vector.Vector>\n  \n  :param objectVector: (io.deephaven.vector.ObjectVector<T>) - vector to wrap\n  :return: (com.numericalmethod.suanshu.matrix.doubles.Matrix) Immutable Matrix backed by ObjectVector...",
  "ssVec": "**Incompatible overloads text - text from the first overload:**\n\nWraps ByteVector instance as Vector\n\n*Overload 1*  \n  :param byteVector: (io.deephaven.vector.ByteVector) - instance to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by ByteVector\n  \n*Overload 2*  \n  :param bytes: (java.lang.Byte...) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by byte[]\n  \n*Overload 3*  \n  :param bytes: (byte[]) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by byte[]\n  \n*Overload 4*  \n  :param shortVector: (io.deephaven.vector.ShortVector) - instance to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by ShortVector\n  \n*Overload 5*  \n  :param shorts: (java.lang.Short...) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by short[]\n  \n*Overload 6*  \n  :param shorts: (short[]) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by short[]\n  \n*Overload 7*  \n  :param intVector: (io.deephaven.vector.IntVector) - instance to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) ImmutableVector backed by IntVector\n  \n*Overload 8*  \n  :param ints: (int[]) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by int[]\n  \n*Overload 9*  \n  :param ints: (java.lang.Integer...) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by int[]\n  \n*Overload 10*  \n  :param floatVector: (io.deephaven.vector.FloatVector) - instance to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by FloatVector\n  \n*Overload 11*  \n  :param floats: (java.lang.Float...) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by float[]\n  \n*Overload 12*  \n  :param floats: (float[]) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by float[]\n  \n*Overload 13*  \n  :param longVector: (io.deephaven.vector.LongVector) - instance to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by LongVector\n  \n*Overload 14*  \n  :param longs: (java.lang.Long...) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by long[]\n  \n*Overload 15*  \n  :param longs: (long[]) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by long[]\n  \n*Overload 16*  \n  :param doubleVector: (io.deephaven.vector.DoubleVector) - instance to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by DoubleVector\n  \n*Overload 17*  \n  :param doubles: (java.lang.Double...) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by double[]\n  \n*Overload 18*  \n  :param doubles: (double[]) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by double[]\n  \n*Overload 19*  \n  :param numbers: (java.lang.Number...) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by Number[]\n  \n*Overload 20*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param vector: (io.deephaven.vector.ObjectVector<T>) - array to wrap\n  :return: (com.numericalmethod.suanshu.vector.doubles.Vector) Immutable Vector backed by ObjectVector"
 },
 "path": "io.deephaven.numerics.suanshu.SuanShuIntegration",
 "text": "Basic utility methods to convert Deephaven data-structures to Suanshu data-structures",
 "typeName": "class"
}