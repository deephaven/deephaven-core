{
 "className": "io.deephaven.numerics.suanshu.SuanShuIntegration$AbstractVector",
 "methods": {
  "ZERO": ":return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "add": "*Overload 1*  \n  :param vector: com.numericalmethod.suanshu.vector.doubles.Vector\n  :return: com.numericalmethod.suanshu.vector.doubles.Vector\n  \n*Overload 2*  \n  :param v: double\n  :return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "angle": ":param vector: com.numericalmethod.suanshu.vector.doubles.Vector\n:return: double",
  "deepCopy": ":return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "divide": ":param vector: com.numericalmethod.suanshu.vector.doubles.Vector\n:return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "get": "Gets the ith indexed (1-based) value from vector.\n\n:param i: (int) - 1-based index\n:return: (double) ith indexed (1-based) value",
  "innerProduct": ":param vector: com.numericalmethod.suanshu.vector.doubles.Vector\n:return: double",
  "minus": "*Overload 1*  \n  :param vector: com.numericalmethod.suanshu.vector.doubles.Vector\n  :return: com.numericalmethod.suanshu.vector.doubles.Vector\n  \n*Overload 2*  \n  :param v: double\n  :return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "multiply": ":param vector: com.numericalmethod.suanshu.vector.doubles.Vector\n:return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "norm": "*Overload 1*  \n  :return: double\n  \n*Overload 2*  \n  :param i: int\n  :return: double",
  "opposite": ":return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "pow": ":param v: double\n:return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "scaled": "*Overload 1*  \n  :param v: double\n  :return: com.numericalmethod.suanshu.vector.doubles.Vector\n  \n*Overload 2*  \n  :param real: com.numericalmethod.suanshu.number.Real\n  :return: com.numericalmethod.suanshu.vector.doubles.Vector",
  "set": ":param index: int\n:param value: double",
  "show": "Returns the String representation of whole Vector\n\n:return: (java.lang.String) String representation of Vector",
  "toArray": ":return: double[]",
  "toString": "Returns the compact String representation of\n Vector. If you want to have String representation of the\n whole Vector, please use show() method.\n\n:return: (java.lang.String) Compact string representation of Vector"
 },
 "path": "io.deephaven.numerics.suanshu.SuanShuIntegration.AbstractVector",
 "text": "The abstract implementation of Vector.",
 "typeName": "class"
}