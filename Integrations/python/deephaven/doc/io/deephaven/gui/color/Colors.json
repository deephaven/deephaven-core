{
 "className": "io.deephaven.gui.color.Colors",
 "methods": {
  "background": "**Incompatible overloads text - text from the first overload:**\n\nCreates a table format encoding with background color equal to the input RGB\n and unformatted foreground.\n\n*Overload 1*  \n  :param r: (long) - red component\n  :param g: (long) - green component\n  :param b: (long) - blue component\n  :return: (long) table format encoding the RGB background color and an unformatted foreground.\n  \n*Overload 2*  \n  :param color: (long) - color encoding\n  :return: (long) table format encoding with specified background color and unformatted foreground",
  "backgroundForeground": "Creates a table format encoding with specified foreground and background colors.\n\n:param bgr: (long) - red component of the background color\n:param bgg: (long) - green component of the background color\n:param bgb: (long) - blue component of the background color\n:param fgr: (long) - red component of the foreground color\n:param fgg: (long) - green component of the foreground color\n:param fgb: (long) - blue component of the foreground color\n:return: (long) table format encoding with specified foreground and background colors",
  "backgroundForegroundAuto": "Creates a table format encoding with specified background color\n and automatically chosen contrasting foreground color.\n\n:param bgr: (long) - red component of the background color\n:param bgg: (long) - green component of the background color\n:param bgb: (long) - blue component of the background color\n:return: (long) table format encoding with background color and auto-generated foreground color",
  "bg": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for background(long)\n\n*Overload 1*  \n  :param r: long\n  :param g: long\n  :param b: long\n  :return: long\n  \n*Overload 2*  \n  :param color: long\n  :return: long",
  "bgfg": "Convenience method for backgroundForeground(long, long, long, long, long, long)\n\n:param bgr: long\n:param bgg: long\n:param bgb: long\n:param fgr: long\n:param fgg: long\n:param fgb: long\n:return: long",
  "bgfga": "Convenience method for backgroundForegroundAuto(long, long, long)\n\n:param bgr: long\n:param bgg: long\n:param bgb: long\n:return: long",
  "color": "Gets this name's defined Color\n\n:return: (io.deephaven.gui.color.Color) this Color",
  "fg": "**Incompatible overloads text - text from the first overload:**\n\nConvenience method for foreground(long)\n\n*Overload 1*  \n  :param r: long\n  :param g: long\n  :param b: long\n  :return: long\n  \n*Overload 2*  \n  :param color: long\n  :return: long",
  "foreground": "**Incompatible overloads text - text from the first overload:**\n\nCreates a table format encoding with foreground color equal to the input RGB\n and unformatted background.\n\n*Overload 1*  \n  :param r: (long) - red component\n  :param g: (long) - green component\n  :param b: (long) - blue component\n  :return: (long) table format encoding the RGB foreground color and an unformatted background.\n  \n*Overload 2*  \n  :param color: (long) - color encoding\n  :return: (long) table format encoding with specified foreground color and unformatted background",
  "format": "Gets this name's defined column format value\n\n:return: (long) this column format",
  "heatmap": "Creates a table format encoding for the heat map at value.\n A contrasting foreground color is automatically chosen.\n\n:param value: (double) - determines the color used by its location in the heat map's range\n:param min: (double) - minimum value of the heat map range\n:param max: (double) - maximum value of the heat map range\n:param bg1: (long) - background color at or below the minimum value of the heat map\n:param bg2: (long) - background color at or above the maximum value of the heat map\n:return: (long) table format encoding with background color and auto-generated foreground color\n                  determined by a heat map",
  "heatmapFg": "Convenience method for heatmapForeground(double, double, double, long, long)\n\n:param value: double\n:param min: double\n:param max: double\n:param fg1: long\n:param fg2: long\n:return: long",
  "heatmapForeground": "Creates a table format encoding with specified foreground color\n and unformatted background.\n\n:param value: (double) - determines the color used by its location in the heat map's range\n:param min: (double) - minimum value of the heat map range\n:param max: (double) - maximum value of the heat map range\n:param fg1: (long) - foreground color at or below the minimum value of the heat map\n:param fg2: (long) - foreground color at or above the maximum value of the heat map\n:return: (long) table format encoding with foreground color determined by a heat map",
  "toLong": "Gets the formatting long of the input color\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Colors) - color\n  :return: (long) formatting long of the input color\n  \n*Overload 2*  \n  :param color: (long) - color\n  :return: (long) formatting long of the input color\n  \n*Overload 3*  \n  :param color: (io.deephaven.gui.color.Color) - color\n  :return: (long) formatting long of the input color\n  \n*Overload 4*  \n  :param color: (java.lang.String) - color\n  :return: (long) formatting long of the input color",
  "valueOf": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)\n\n:param name: (java.lang.String) - the name of the enum constant to be returned.\n:return: (io.deephaven.gui.color.Colors) the enum constant with the specified name",
  "values": "Returns an array containing the constants of this enum type, in\nthe order they are declared. This method may be used to iterate\nover the constants as follows:\n\nfor (Colors c : Colors.values())\n    System.out.println(c);\n\n\n:return: (io.deephaven.gui.color.Colors[]) an array containing the constants of this enum type, in the order they are declared"
 },
 "path": "io.deephaven.gui.color.Colors",
 "text": "Pre-defined Colors available by name.\n\n The colors are the named colors commonly supported by HTML browsers.\n\n Methods and colors moved from DBColorUtil to here. They are left in DBColorUtil\n for backward compatibility.\n TODO (deephaven/deephaven-core/issues/175): Move this to a new module and package",
 "typeName": "enum"
}