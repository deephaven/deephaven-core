{
 "className": "io.deephaven.plot.ChartImpl",
 "methods": {
  "axes": "Gets an axes.\n\n*Overload 1*  \n  :param id: (int) - axes id.\n  :return: (io.deephaven.plot.Axes) selected axes.\n  \n*Overload 2*  \n  :param name: (java.lang.String) - axes name.\n  :return: (io.deephaven.plot.Axes) selected axes.",
  "chartRemoveSeries": "Removes the series with the specified names from this Chart.\n\n:param removeSeriesNames: (java.lang.String...) - series names\n:return: (io.deephaven.plot.ChartImpl) this Chart",
  "chartTitle": "Sets the title of this Chart.\n\n*Overload 1*  \n  :param title: (java.lang.String) - title\n  :return: (io.deephaven.plot.ChartImpl) this Chart\n  \n*Overload 2*  \n  :param titleFormat: (java.lang.String) - a MessageFormat format string for the chart title\n  :param t: (io.deephaven.engine.table.Table) - table\n  :param titleColumns: (java.lang.String...) - columns to include in the chart title\n  :return: (io.deephaven.plot.ChartImpl) this Chart with the title set to display values from the table\n  \n*Overload 3*  \n  :param titleFormat: (java.lang.String) - a MessageFormat format string for the chart title\n  :param sds: (io.deephaven.plot.filters.SelectableDataSet) - selectable data set (e.g. OneClick table)\n  :param titleColumns: (java.lang.String...) - columns to include in the chart title\n  :return: (io.deephaven.plot.ChartImpl) this Chart with the title set to display values from the table",
  "chartTitleColor": "Sets the color of this Chart's title.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.plot.ChartImpl) this Chart\n  \n*Overload 2*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.plot.ChartImpl) this Chart",
  "chartTitleFont": "Sets the font of this Chart's title.\n\n*Overload 1*  \n  :param font: (io.deephaven.plot.Font) - font\n  :return: (io.deephaven.plot.ChartImpl) this Chart\n  \n*Overload 2*  \n  :param family: (java.lang.String) - font family; if null, set to Arial\n  :param style: (java.lang.String) - font style; if null, set to Font.FontStyle PLAIN\n  :param size: (int) - the point size of the Font\n  :return: (io.deephaven.plot.ChartImpl) this Chart",
  "colSpan": "**Incompatible overloads text - text from the first overload:**\n\nGets the width of this Chart inside the BaseFigure\n\n*Overload 1*  \n  :return: (int) width of this Chart inside the BaseFigure\n  \n*Overload 2*  \n  :param colSpan: (int) - how many columns wide\n  :return: (io.deephaven.plot.ChartImpl) this Chart",
  "column": ":return: int",
  "dimension": ":return: int",
  "figure": "Gets the BaseFigure this Chart is in.\n\n:return: (io.deephaven.plot.BaseFigureImpl) the BaseFigure containing this Chart",
  "getAxes": "Gets the AxesImpls in this Chart.\n\n:return: (java.util.List<io.deephaven.plot.AxesImpl>) AxesImpls in this Chart",
  "getAxis": "Gets the AxisImpls in this Chart.\n\n:return: (java.util.List<io.deephaven.plot.AxisImpl>[]) AxisImpl in this Chart",
  "getChartTitle": "Gets the ChartTitle instance\n\n:return: (io.deephaven.plot.ChartTitle) ChartTitle instance",
  "getChartType": "Gets the ChartType of this Chart.\n\n:return: (io.deephaven.plot.ChartType) ChartType of this Chart",
  "getLegendColor": "Gets the Paint of this Chart's legend.\n\n:return: (io.deephaven.gui.color.Paint) this Chart's legend's Paint",
  "getLegendFont": "Gets the Font of this Chart's legend.\n\n:return: (io.deephaven.plot.Font) this Chart's legend's Font",
  "getPlotInfo": ":return: io.deephaven.plot.errors.PlotInfo",
  "getPlotOrientation": "Gets the ChartImpl.PlotOrientation of this Chart.\n\n:return: (io.deephaven.plot.ChartImpl.PlotOrientation) ChartImpl.PlotOrientation of this Chart.",
  "getTitle": "Gets the title of this Chart.\n\n:return: (java.lang.String) this Chart's title",
  "getTitleColor": "Gets the Paint of this Chart's title.\n\n:return: (io.deephaven.gui.color.Paint) this Chart's title's Paint",
  "getTitleFont": "Gets the Font of this Chart's title.\n\n:return: (io.deephaven.plot.Font) this Chart's title's Font",
  "gridLinesVisible": "Sets whether the Chart has grid lines.\n\n:param gridVisible: (boolean) - whether the Chart's grid lines are drawn\n:return: (io.deephaven.plot.Chart) this Chart",
  "isDisplayXGridLines": "Whether the grid lines in the x direction will be drawn.\n\n:return: (java.lang.Boolean) true if this Chart's x grid lines will be drawn, else false",
  "isDisplayYGridLines": "Whether the grid lines in the y direction will be drawn.\n\n:return: (java.lang.Boolean) true if this Chart's y grid lines will be drawn, else false",
  "isShowLegend": "Whether this Chart's legend will be drawn.\n\n:return: (boolean) true if this Chart's legend will be drawn, false otherwise",
  "legendColor": "Sets the color of the text inside the Chart's legend.\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.plot.ChartImpl) this Chart\n  \n*Overload 2*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.plot.ChartImpl) this Chart",
  "legendFont": "Sets the font of this Chart's legend.\n\n*Overload 1*  \n  :param font: (io.deephaven.plot.Font) - font\n  :return: (io.deephaven.plot.ChartImpl) this Chart\n  \n*Overload 2*  \n  :param family: (java.lang.String) - font family; if null, set to Arial\n  :param style: (java.lang.String) - font style; if null, set to Font.FontStyle PLAIN\n  :param size: (int) - the point size of the Font\n  :return: (io.deephaven.plot.ChartImpl) this Chart",
  "legendVisible": "Sets whether the Chart's legend is shown or hidden.\n\n:param visible: (boolean) - whether the Chart's legend is shown or hidden\n:return: (io.deephaven.plot.ChartImpl) this Chart",
  "maxRowsInTitle": "Sets the maximum row values that will be shown in title.\n \n If total rows < maxRowsCount, then all the values will be shown separated by comma, otherwise just\n maxRowsCount values will be shown along with ellipsis. \n if maxRowsCount is < 0, all values will be shown. \n if maxRowsCount is 0, then just first value will be shown without ellipsis. \n The default is 0.\n\n:param maxTitleRows: (int) - maximum number of row values to show in chart title\n:return: (io.deephaven.plot.Chart) this Chart",
  "newAxes": "Creates new Axes on this Chart.\n\n*Overload 1*  \n  :return: (io.deephaven.plot.AxesImpl) newly created Axes with dimension 2 on this Chart\n  \n*Overload 2*  \n  :param name: (java.lang.String) - name for the axes\n  :return: (io.deephaven.plot.AxesImpl) newly created Axes with dimension 2 on this Chart\n  \n*Overload 3*  \n  :param dim: (int) - dimensions of the Axes\n  :return: (io.deephaven.plot.AxesImpl) newly created Axes with dimension dim on this Chart\n  \n*Overload 4*  \n  :param name: (java.lang.String) - name for the axes\n  :param dim: (int) - dimensions of the Axes\n  :return: (io.deephaven.plot.AxesImpl) newly created Axes with dimension dim on this Chart",
  "plotOrientation": "Sets the orientation of plots in this Chart.\n\n*Overload 1*  \n  :param orientation: io.deephaven.plot.ChartImpl.PlotOrientation\n  :return: io.deephaven.plot.ChartImpl\n  \n*Overload 2*  \n  :param orientation: (java.lang.String) - plot orientation\n  :return: (io.deephaven.plot.ChartImpl) this Chart",
  "row": ":return: int",
  "rowSpan": "**Incompatible overloads text - text from the first overload:**\n\nGets the height of this Chart inside the BaseFigure\n\n*Overload 1*  \n  :return: (int) height of this Chart inside the BaseFigure\n  \n*Overload 2*  \n  :param rowSpan: (int) - how many rows tall\n  :return: (io.deephaven.plot.ChartImpl) this Chart",
  "span": "Sets the size of this Chart within the grid of the figure.\n\n:param rowSpan: (int) - how many rows tall\n:param colSpan: (int) - how many columns wide\n:return: (io.deephaven.plot.ChartImpl) this Chart",
  "xGridLinesVisible": "Sets whether the Chart has grid lines in the x direction.\n\n:param xGridVisible: (boolean) - whether the Chart's x grid lines are drawn\n:return: (io.deephaven.plot.Chart) this Chart",
  "yGridLinesVisible": "Sets whether the Chart has grid lines in the y direction\n\n:param yGridVisible: (boolean) - whether the Chart's y grid lines are drawn\n:return: (io.deephaven.plot.Chart) this Chart"
 },
 "path": "io.deephaven.plot.ChartImpl",
 "text": "Represents a graph. Contains Axes objects.",
 "typeName": "class"
}