{
 "className": "io.deephaven.util.ArrayType",
 "methods": {
  "arrayCopy": "A strongly-typed equivalent to System.arraycopy(Object, int, Object, int, int).\n\n:param src: (ArrayType.T) - the source array.\n:param srcPos: (int) - starting position in the source array.\n:param dest: (ArrayType.T) - the destination array.\n:param destPos: (int) - starting position in the destination data.\n:param length: (int) - the number of array elements to be copied.",
  "copyOfRange": "A strongly-typed equivalent to Arrays.copyOfRange(Object[], int, int).\n\n:param src: (ArrayType.T) - the array from which a range is to be copied\n:param from: (int) - the initial index of the range to be copied, inclusive\n:param to: (int) - the final index of the range to be copied, exclusive\n:return: (ArrayType.T) a new array containing the specified range from the original array",
  "getArrayType": ":return: java.lang.Class<ArrayType.T>",
  "getLength": "A strongly-typed equivalent to Array.getLength(Object).\n\n:param array: (ArrayType.T) - the array\n:return: (int) the length of the array",
  "isAssignableFrom": ":param clazz: java.lang.Class<?>\n:return: boolean",
  "isAssignableFromObject": ":param o: java.lang.Object\n:return: boolean",
  "newInstance": "A strongly-typed equivalent to Array.newInstance(Class, int).\n\n:param len: (int) - the length of the new array\n:return: (ArrayType.T) the new array"
 },
 "path": "io.deephaven.util.ArrayType",
 "text": "A utility interface that allows strongly typed access to an array.",
 "typeName": "interface"
}