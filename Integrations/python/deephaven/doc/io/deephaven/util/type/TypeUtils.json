{
 "className": "io.deephaven.util.type.TypeUtils",
 "methods": {
  "box": "*Overload 1*  \n  :param value: java.lang.Boolean\n  :return: java.lang.Boolean\n  \n*Overload 2*  \n  :param value: byte\n  :return: java.lang.Byte\n  \n*Overload 3*  \n  :param value: char\n  :return: java.lang.Character\n  \n*Overload 4*  \n  :param value: double\n  :return: java.lang.Double\n  \n*Overload 5*  \n  :param value: float\n  :return: java.lang.Float\n  \n*Overload 6*  \n  :param value: int\n  :return: java.lang.Integer\n  \n*Overload 7*  \n  :param value: long\n  :return: java.lang.Long\n  \n*Overload 8*  \n  :param value: short\n  :return: java.lang.Short",
  "classForName": ":param className: java.lang.String\n:return: java.lang.Class<?>",
  "decode64Serializable": "Decodes a Serializable Object from a base64 encoded String.\n\n:param string: (java.lang.String) - the base64 encoded String\n:return: (java.lang.Object) the encoded Object",
  "encode64Serializable": "Encodes a Serializable Object into base64 String.\n\n:param serializable: (java.io.Serializable) - the object to encode\n:return: (java.lang.String) the base64 encoded string",
  "fromString": "Creates an Object from a String. This is meant to be used in conjunction with TypeUtils.objectToString\n Strings, Numbers, and primitives will all parse using their boxed type parsing methods. Serializable types will\n be decoded from base64. Returns null if the String fails to parse.\n\n*Overload 1*  \n  :param string: (java.lang.String) - the String to parse\n  :param typeString: (java.lang.String) - the Canonical Name of the class type\n  :return: (java.util.Optional<java.lang.Object>) an object parsed from the String\n  \n*Overload 2*  \n  :param string: (java.lang.String) - the String to parse\n  :param type: (java.lang.Class<?>) - the type of the object\n  :return: (java.lang.Object) an object parsed from the String",
  "getBoxedType": "Returns a reference type corresponding to the given type. If type is itself a reference type,\n then type is returned. If type is a primitive type, then the appropriate boxed type is returned.\n\n:param type: (java.lang.Class<?>) - The type\n:return: java.lang.Class<?>",
  "getErasedType": "Determine the Class from the Type.\n\n:param paramType: java.lang.reflect.Type\n:return: java.lang.Class<?>",
  "getTypeBoxer": "Note: Java generics information - <T>\n\n:param type: java.lang.Class<T>\n:return: io.deephaven.util.type.TypeUtils.TypeBoxer<T>",
  "getUnboxedType": "Returns the primitive type corresponding to the given type. If type is itself a primitive type,\n then type is returned. If type is neither a primitive type nor a boxed type, then null is\n returned.\n\n:param type: (java.lang.Class<?>) - The type\n:return: (java.lang.Class<?>) type's primitive equivalent, or null",
  "getUnboxedTypeIfBoxed": "Same as getUnboxedType(Class), but returns non-wrapper classes unmolested.\n\n:param type: (java.lang.Class<?>) - The type\n:return: (java.lang.Class<?>) type's unboxed equivalent, or type",
  "isBigNumeric": "Whether the class is a BigInteger or BigDecimal\n\n:param type: (java.lang.Class<?>) - the class\n:return: (boolean) true if the type is BigInteger or BigDecimal, false otherwise",
  "isBoxedArithmetic": "Whether the class is a boxed arithmetic type (Long, Integer, Short, Byte)\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if the class is a boxed arithmetic type, false otherwise",
  "isBoxedBoolean": "Whether the class is an instance of Boolean.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Boolean.class is assignable from c, false otherwise",
  "isBoxedByte": "Whether the class is an instance of Byte.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Byte.class is assignable from c, false otherwise",
  "isBoxedChar": "Whether the class is an instance of Character.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Character.class is assignable from c, false otherwise",
  "isBoxedDouble": "Whether the class is an instance of Double.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Double.class is assignable from c, false otherwise",
  "isBoxedFloat": "Whether the class is an instance of Float.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Float.class is assignable from c, false otherwise",
  "isBoxedInteger": "Whether the class is an instance of Integer.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Integer.class is assignable from c, false otherwise",
  "isBoxedLong": "Whether the class is an instance of Long.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Long.class is assignable from c, false otherwise",
  "isBoxedNumeric": "Whether the class is an instance of Number.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Number.class is assignable from c, false otherwise",
  "isBoxedShort": "Whether the class is an instance of Short.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Short.class is assignable from c, false otherwise",
  "isBoxedType": ":param exprType: java.lang.Class<?>\n:return: boolean",
  "isCharacter": "Whether the class equals char.class or Character.class is assignable from it.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if Character.class is assignable from c or c equals char.class",
  "isConvertibleToPrimitive": ":param type: java.lang.Class<?>\n:return: boolean",
  "isDateTime": "Whether the class is a DBDateTime or Date.\n\n:param type: (java.lang.Class<?>) - The class.\n:return: (boolean) true if the type is a DBDateTime or Date.",
  "isFloatType": "Checks if the type is a primitive or Boxed floate type (double or float).\n\n:param type: (java.lang.Class<?>) - the class\n:return: (boolean) true if it is a float type, false otherwise",
  "isNumeric": "Whether the class is isPrimitiveNumeric(Class) or isBoxedNumeric(Class)\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if c is numeric, false otherwise",
  "isPrimitiveChar": "Whether the class is equal to char.class.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if c equals char.class, false otherwise",
  "isPrimitiveNumeric": "Whether the class is equal to one of the six numeric primitives: float, double, int, long, short, or byte.\n\n:param c: (java.lang.Class<?>) - class\n:return: (boolean) true if c is a numeric primitive, false otherwise",
  "isPrimitiveOrSerializable": "Checks if a type is primitive or Serializable.\n\n:param type: (java.lang.Class<?>) - the class\n:return: (boolean) true if the type is primitive or Serializable",
  "isString": "Whether the class is a String\n\n:param type: (java.lang.Class<?>) - the class\n:return: (boolean) true if the type is a String, false otherwise",
  "nullConstantForType": ":param type: java.lang.Class<?>\n:return: java.lang.String",
  "objectToString": "Converts an Object to a String for writing to a workspace. This is meant to be used in conjunction with\n TypeUtils.fromString. Strings, Numbers, and primitives will all convert using Obect.toString.\n Serializable objects will be encoded in base64. All others will return null.\n\n:param o: (java.lang.Object) - the object to convert\n:return: (java.lang.String) a String representation of the object, null if it cannot be converted",
  "toByteArray": "*Overload 1*  \n  :param array: float[]\n  :return: byte[]\n  \n*Overload 2*  \n  :param array: int[]\n  :return: byte[]\n  \n*Overload 3*  \n  :param array: short[]\n  :return: byte[]\n  \n*Overload 4*  \n  :param array: long[]\n  :return: byte[]\n  \n*Overload 5*  \n  :param array: double[]\n  :return: byte[]",
  "toDoubleArray": "*Overload 1*  \n  :param array: float[]\n  :return: double[]\n  \n*Overload 2*  \n  :param array: int[]\n  :return: double[]\n  \n*Overload 3*  \n  :param array: short[]\n  :return: double[]\n  \n*Overload 4*  \n  :param array: long[]\n  :return: double[]\n  \n*Overload 5*  \n  :param array: double[]\n  :return: double[]",
  "toFloatArray": "*Overload 1*  \n  :param array: byte[]\n  :return: float[]\n  \n*Overload 2*  \n  :param array: int[]\n  :return: float[]\n  \n*Overload 3*  \n  :param array: short[]\n  :return: float[]\n  \n*Overload 4*  \n  :param array: long[]\n  :return: float[]\n  \n*Overload 5*  \n  :param array: double[]\n  :return: float[]",
  "toIntArray": "*Overload 1*  \n  :param array: float[]\n  :return: int[]\n  \n*Overload 2*  \n  :param array: byte[]\n  :return: int[]\n  \n*Overload 3*  \n  :param array: short[]\n  :return: int[]\n  \n*Overload 4*  \n  :param array: long[]\n  :return: int[]\n  \n*Overload 5*  \n  :param array: double[]\n  :return: int[]",
  "toLongArray": "*Overload 1*  \n  :param array: float[]\n  :return: long[]\n  \n*Overload 2*  \n  :param array: int[]\n  :return: long[]\n  \n*Overload 3*  \n  :param array: short[]\n  :return: long[]\n  \n*Overload 4*  \n  :param array: byte[]\n  :return: long[]\n  \n*Overload 5*  \n  :param array: double[]\n  :return: long[]",
  "toShortArray": "*Overload 1*  \n  :param array: float[]\n  :return: short[]\n  \n*Overload 2*  \n  :param array: int[]\n  :return: short[]\n  \n*Overload 3*  \n  :param array: byte[]\n  :return: short[]\n  \n*Overload 4*  \n  :param array: long[]\n  :return: short[]\n  \n*Overload 5*  \n  :param array: double[]\n  :return: short[]",
  "unbox": "*Overload 1*  \n  :param value: java.lang.Boolean\n  :return: boolean\n  \n*Overload 2*  \n  :param value: java.lang.Byte\n  :return: byte\n  \n*Overload 3*  \n  :param value: java.lang.Character\n  :return: char\n  \n*Overload 4*  \n  :param value: java.lang.Double\n  :return: double\n  \n*Overload 5*  \n  :param value: java.lang.Float\n  :return: float\n  \n*Overload 6*  \n  :param value: java.lang.Integer\n  :return: int\n  \n*Overload 7*  \n  :param value: java.lang.Long\n  :return: long\n  \n*Overload 8*  \n  :param value: java.lang.Short\n  :return: short"
 },
 "path": "io.deephaven.util.type.TypeUtils",
 "text": "Utility functions to convert primitive types.",
 "typeName": "class"
}