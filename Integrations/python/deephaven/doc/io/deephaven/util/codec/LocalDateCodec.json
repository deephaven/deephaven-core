{
 "className": "io.deephaven.util.codec.LocalDateCodec",
 "methods": {
  "decode": "Decode an object from an array of bytes.\n\n:param input: byte[]\n:param offset: int\n:param length: int\n:return: (java.time.LocalDate) The output object, possibly null",
  "encode": "Encode the specified input as an array of bytes.\n Note that it is up to the implementation how to encode null inputs. The use of a zero-length byte array\n (e.g. CollectionUtil.ZERO_LENGTH_BYTE_ARRAY) is strongly encouraged.\n\n:param input: java.time.LocalDate\n:return: (byte[]) The output byte array",
  "expectedObjectWidth": "What width byte array does this ObjectCodec expect to encode and decode?\n\n:return: (int) VARIABLE_WIDTH_SENTINEL if the codec  must encode and decode variable width columns, otherwise the fixed\n size of byte array that must be decoded and encoded.",
  "getPrecision": "If applicable, the maximum encodable precision. If precision is not applicable (i.e. for non-numeric types)\n this method should return zero.\n\n:return: (int) the numeric precision supported by this codec",
  "getScale": "If applicable, the maximum encodable scale. If scale is not applicable (i.e. for non-numeric types)\n this method should return zero.\n\n:return: (int) the numeric scale (digits after the decimal point) supported by this codec",
  "isNullable": "Does this codec support encoding of null values?\n\n:return: (boolean) if null values are supported"
 },
 "path": "io.deephaven.util.codec.LocalDateCodec",
 "text": "LocalDate codec, with support for \"full\" and \"compact\" encodings.\n\n The full (default) encoding is a 5-byte packed integer format that can represent the full range of dates that a\n LocalDate object can hold (years -999,999,999 to 999,999,999).\n\n The compact encoding is a 3-byte packed-integer. This format is constrained to represent dates in the range\n 0000-01-01 to 9999-01-01. This encoding covers the range supported by many SQL databases, so is often\n a good candidate for imported data sets.\n\n Both encodings are \"nullable\", indicated by setting the most significant byte to 0xFF (this can never represent a\n valid value in the ranges specified for each encoding).",
 "typeName": "class"
}