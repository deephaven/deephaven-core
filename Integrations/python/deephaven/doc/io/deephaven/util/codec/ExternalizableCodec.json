{
 "className": "io.deephaven.util.codec.ExternalizableCodec",
 "methods": {
  "decode": "Decode an object from an array of bytes.\n\n:param input: byte[]\n:param offset: int\n:param length: int\n:return: (ExternalizableCodec.T) The output object, possibly null",
  "encode": "Encode the specified input as an array of bytes.\n Note that it is up to the implementation how to encode null inputs. The use of a zero-length byte array\n (e.g. CollectionUtil.ZERO_LENGTH_BYTE_ARRAY) is strongly encouraged.\n\n:param input: ExternalizableCodec.T\n:return: (byte[]) The output byte array",
  "expectedObjectWidth": "What width byte array does this ObjectCodec expect to encode and decode?\n\n:return: (int) VARIABLE_WIDTH_SENTINEL if the codec  must encode and decode variable width columns, otherwise the fixed\n size of byte array that must be decoded and encoded.",
  "getPrecision": "If applicable, the maximum encodable precision. If precision is not applicable (i.e. for non-numeric types)\n this method should return zero.\n\n:return: (int) the numeric precision supported by this codec",
  "getScale": "If applicable, the maximum encodable scale. If scale is not applicable (i.e. for non-numeric types)\n this method should return zero.\n\n:return: (int) the numeric scale (digits after the decimal point) supported by this codec",
  "isNullable": "Does this codec support encoding of null values?\n\n:return: (boolean) if null values are supported"
 },
 "path": "io.deephaven.util.codec.ExternalizableCodec",
 "typeName": "class"
}