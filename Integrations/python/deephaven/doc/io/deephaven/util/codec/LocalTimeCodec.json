{
 "className": "io.deephaven.util.codec.LocalTimeCodec",
 "methods": {
  "decode": "Decode an object from an array of bytes.\n\n:param input: (byte[]) - The input byte array containing bytes to decode\n:param offset: (int) - The offset into the byte array to start decoding from\n:param length: (int) - The length of the byte array to decode from, starting at the offset\n:return: (java.time.LocalTime) The output object, possibly null",
  "encode": "Encode the specified input as an array of bytes.\n Note that it is up to the implementation how to encode null inputs. The use of a zero-length byte array\n (e.g. CollectionUtil.ZERO_LENGTH_BYTE_ARRAY) is strongly encouraged.\n\n:param input: (java.time.LocalTime) - The input object, possibly null\n:return: (byte[]) The output byte array",
  "expectedObjectWidth": "What width byte array does this ObjectCodec expect to encode and decode?\n\n:return: (int) VARIABLE_WIDTH_SENTINEL if the codec  must encode and decode variable width columns, otherwise the fixed\n size of byte array that must be decoded and encoded.",
  "getPrecision": "If applicable, the maximum encodable precision. If precision is not applicable (i.e. for non-numeric types)\n this method should return zero.\n\n:return: (int) the numeric precision supported by this codec",
  "getScale": "If applicable, the maximum encodable scale. If scale is not applicable (i.e. for non-numeric types)\n this method should return zero.\n\n:return: (int) the numeric scale (digits after the decimal point) supported by this codec",
  "isNullable": "Does this codec support encoding of null values?\n\n:return: (boolean) if null values are supported"
 },
 "path": "io.deephaven.util.codec.LocalTimeCodec",
 "text": "LocalTime codec, with support for nanosecond, millisecond, or second precision. This codec always uses a fixed-width\n encoding, the size of which depends on the desired precision.\n\n The Nanos (default) encoding is a 6-byte packed-integer format that can represent the full range of times that\n a LocalTime can represent.\n\n The Millis encoding is a 4-byte packed-integer format. Sub-millisecond values are truncated.\n\n The Seconds encoding is a 3-byte packed-integer format. Sub-second values are truncated.\n\n All encodings are \"nullable\". Since every encoding leaves room for at least one \"extra\" bit, the leading bit\n always indicates null - non-null values will always contain zero for the 1st bit.",
 "typeName": "class"
}