{
 "className": "io.deephaven.util.calendar.Calendar",
 "methods": {
  "currentDay": "Gets the current date.\n\n:return: (java.lang.String) the current day",
  "dayOfWeek": "**Incompatible overloads text - text from the first overload:**\n\nGets the day of the week for a time.\n\n*Overload 1*  \n  :return: (java.time.DayOfWeek) the day of the week of the current day\n  \n*Overload 2*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (java.time.DayOfWeek) the day of the week of time\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.time.DayOfWeek) the day of the week of date",
  "daysInRange": "Gets the days in a given range.\n\n*Overload 1*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start of a time range; if null, return empty array\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end of a time range; if null, return empty array\n  :return: (java.lang.String[]) the inclusive days between start and end\n  \n*Overload 2*  \n  :param start: (java.lang.String) - start of a time range; if null, return empty array\n  :param end: (java.lang.String) - end of a time range; if null, return empty array\n  :return: (java.lang.String[]) the inclusive days between start and end",
  "diffDay": "Returns the amount of time in days between start and end.\n\n:param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_LONG\n:return: (double) the amount of time in days between the start and end",
  "diffNanos": "Returns the amount of time in nanoseconds between start and end.\n\n:param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_LONG\n:return: (long) the amount of time in nanoseconds between the start and end",
  "diffYear": "Returns the number of years between start and end.\n\n:param start: (io.deephaven.db.tables.utils.DBDateTime) - start; if null, return null\n:param end: (io.deephaven.db.tables.utils.DBDateTime) - end; if null, return null\n:return: (double) the amount of time in years between the start and end",
  "name": "Gets the name of the calendar.\n\n:return: (java.lang.String) the name of the calendar",
  "nextDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the date days after the current day.\n\n*Overload 1*  \n  :return: (java.lang.String) the date after the current day\n  \n*Overload 2*  \n  :param days: (int) - number of days;\n  :return: (java.lang.String) the day after the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (java.lang.String) the day after time\n  \n*Overload 4*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days;\n  :return: (java.lang.String) the day after time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the date after time\n  \n*Overload 6*  \n  :param date: (java.lang.String) - time; if null, return null\n  :param days: (int) - number of days;\n  :return: (java.lang.String) the day after time",
  "numberOfDays": "**Incompatible overloads text - text from the first overload:**\n\nGets the number of days in a given range, end date exclusive.\n\n*Overload 1*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start of a time range; if null, return NULL_INT\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end of a time range; if null, return NULL_INT\n  :return: (int) the number days between start and end, inclusive and exclusive respectively.\n  \n*Overload 2*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start of a time range; if null, return NULL_INT\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end of a time range; if null, return NULL_INT\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) the number of days between start and end, inclusive and endInclusive\n           respectively.\n  \n*Overload 3*  \n  :param start: (java.lang.String) - start of a time range; if null, return NULL_INT\n  :param end: (java.lang.String) - end of a time range; if null, return NULL_INT\n  :return: (int) the number of days between start and end, inclusive and exclusive respectively.\n  \n*Overload 4*  \n  :param start: (java.lang.String) - start of a time range; if null, return NULL_INT\n  :param end: (java.lang.String) - end of a time range; if null, return NULL_INT\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) the number of days between start and end, inclusive and endInclusive\n           respectively.",
  "previousDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the date the specified number of days prior to the current day.\n\n*Overload 1*  \n  :return: (java.lang.String) the date before the current day\n  \n*Overload 2*  \n  :param days: (int) - number of days;\n  :return: (java.lang.String) the date days before the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (java.lang.String) the day before time\n  \n*Overload 4*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days;\n  :return: (java.lang.String) the date days before date\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the date before date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days;\n  :return: (java.lang.String) the date days before date",
  "timeZone": "Gets the timezone of the calendar.\n\n:return: (io.deephaven.db.tables.utils.DBTimeZone) the time zone of the calendar"
 },
 "path": "io.deephaven.util.calendar.Calendar",
 "text": "A calendar.\n\n\n To comply with the ISO-8601 standard for Dates, Strings should be of the form \"yyyy-MM-dd\",\n\n\n Methods on DBDateTime may not be precisely defined enough to return a DBDateTime, e.g nextDay(). In these cases, the\n method will return a String as discussed above.\n\n\n To maintain consistency, each calendar has two fields: a name, and a time zone. A calendar with the same schedule but\n a different time zone is considered a different calendar.\n\n\n Frequently, the default implementation for methods on DBDateTimes is to call the corresponding method on a String\n with DBDateTime.toDateString. This can be slower than methods written explicitly for DBDateTimes. If\n performance is an issue, consider overriding these methods with other behavior.",
 "typeName": "interface"
}