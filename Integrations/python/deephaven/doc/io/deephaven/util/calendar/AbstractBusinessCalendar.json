{
 "className": "io.deephaven.util.calendar.AbstractBusinessCalendar",
 "methods": {
  "businessDaysInRange": "Returns the business days between start and end,\n inclusive.\n\n Because no time information (e.g., hours, minutes, seconds) is returned,\n the corresponding days for start and end will be included\n if they are business days.\n\n*Overload 1*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return empty array\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive business days between start and end\n  \n*Overload 2*  \n  :param start: (java.lang.String) - start time; if null, return empty array\n  :param end: (java.lang.String) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive business days between start and end",
  "diffBusinessDay": "Returns the amount of business time in standard business days between start and end.\n\n:param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_LONG\n:return: (double) the amount of business time in standard business days between the start and end",
  "diffNonBusinessDay": "Returns the amount of non-business time in standard business days between start and end.\n\n:param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_LONG\n:return: (double) the amount of non-business time in standard business days between the start and end",
  "diffNonBusinessNanos": "Returns the amount of non-business time in nanoseconds between start and end.\n\n:param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_LONG\n:return: (long) the amount of non-business time in nanoseconds between the start and end",
  "fractionOfBusinessDayComplete": "Returns the fraction of the business day complete by the given time.\n\n:param time: (io.deephaven.db.tables.utils.DBDateTime) - time\n:return: (double) the fraction of the day complete by time; NULL_DOUBLE if time is null",
  "fractionOfBusinessDayRemaining": "Returns the fraction of the business day remaining after the given time.\n\n:param time: (io.deephaven.db.tables.utils.DBDateTime) - time\n:return: (double) the fraction of the day left after time; NULL_DOUBLE if time is null",
  "fractionOfStandardBusinessDay": "For the given date, returns the ratio of the business day length and the standard business day length.\n For example, a holiday has zero business time and will therefore return 0.0.  A normal business day will\n be of the standard length and will therefore return 1.0.  A half day holiday will return 0.5.\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return 0\n  :return: (double) ratio of the business day length and the standard business day length for the date\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date; if null, return 0\n  :return: (double) ratio of the business day length and the standard business day length for the date",
  "isBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nDoes time occur on a business day?\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time\n  :return: (boolean) true if the date is a business day; false otherwise.\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date\n  :return: (boolean) true if the date is a business day; false otherwise.\n  \n*Overload 3*  \n  :param date: (java.time.LocalDate) - date\n  :return: (boolean) true if the date is a business day; false otherwise.",
  "isBusinessTime": "Determines if the specified time is a business time.  If the time falls between business periods, false will be returned.\n\n:param time: (io.deephaven.db.tables.utils.DBDateTime) - time\n:return: (boolean) true if the specified time is a business time; otherwise, false.",
  "isLastBusinessDayOfMonth": "**Incompatible overloads text - text from the first overload:**\n\nIs the date the last business day of the month?\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time\n  :return: (boolean) true if time is on the last business day of the month with business time remaining; false otherwise.\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date\n  :return: (boolean) true if date is on the last business day of the month; false otherwise.",
  "isLastBusinessDayOfWeek": "**Incompatible overloads text - text from the first overload:**\n\nIs the date the last business day of the week?\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time\n  :return: (boolean) true if time is on the last business day of the week with business time remaining; false otherwise.\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date\n  :return: (boolean) true if date is on the last business day of the week; false otherwise.",
  "nextBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the business date days business days after input date.  If days\n is zero and the day is not a business day, null is returned.\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (java.lang.String) the next business day after time\n  \n*Overload 2*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the next business day after time\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the next business day after date\n  \n*Overload 4*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days after input date",
  "nextBusinessSchedule": "**Incompatible overloads text - text from the first overload:**\n\nGets the business schedule days days after input date.\n\n If date is null, assumes the implementation of getBusinessSchedule(null) returns null.\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (io.deephaven.util.calendar.BusinessSchedule) the next closest business schedule after time\n  \n*Overload 2*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (io.deephaven.util.calendar.BusinessSchedule) the business schedule days after time\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (io.deephaven.util.calendar.BusinessSchedule) the next closest business schedule after date\n  \n*Overload 4*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (io.deephaven.util.calendar.BusinessSchedule) the business schedule days after date",
  "nextNonBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the next non-business day.\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (java.lang.String) the next non-business day after time\n  \n*Overload 2*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days after input time\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the next non-business day after date\n  \n*Overload 4*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the most recent business day before time",
  "nonBusinessDaysInRange": "Returns the non-business days between start and end,\n inclusive.\n\n Because no time information (e.g., hours, minutes, seconds) is returned,\n the corresponding days for start and end will be included\n if they are non-business days.\n\n*Overload 1*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return empty array\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive non-business days between start and end\n  \n*Overload 2*  \n  :param start: (java.lang.String) - start time; if null, return empty array\n  :param end: (java.lang.String) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive non-business days between start and end",
  "numberOfBusinessDays": "Returns the number of business days between start and end.\n\n*Overload 1*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_INT\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_INT\n  :return: (int) number of business days between the start and end, inclusive and exclusive respectively.\n  \n*Overload 2*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_LONG\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_LONG\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of business days between the start and end, inclusive and endInclusive respectively.\n  \n*Overload 3*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :return: (int) number of business days between the start and end, inclusive and exclusive respectively.\n  \n*Overload 4*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of business days between the start and end, inclusive and endInclusive respectively.",
  "numberOfNonBusinessDays": "Returns the number of non-business days between start and end.\n\n*Overload 1*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_INT\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_INT\n  :return: (int) number of business days between the start and end, inclusive and exclusive respectively.\n  \n*Overload 2*  \n  :param start: (io.deephaven.db.tables.utils.DBDateTime) - start time; if null, return NULL_LONG\n  :param end: (io.deephaven.db.tables.utils.DBDateTime) - end time; if null, return NULL_LONG\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of business days between the start and end, inclusive and endInclusive respectively.\n  \n*Overload 3*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :return: (int) number of non-business days between the start and end, inclusive.\n  \n*Overload 4*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of non-business days between the start and end, inclusive and endInclusive respectively.",
  "previousBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the business date days business days before input date.  If days\n is zero and the day is not a business day, null is returned.\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (java.lang.String) the most recent business day before time\n  \n*Overload 2*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days before input time\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the most recent business day before date\n  \n*Overload 4*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days before input date",
  "previousBusinessSchedule": "**Incompatible overloads text - text from the first overload:**\n\nGets the business schedule before input date.\n\n Assumes implementation of getBusinessSchedule(null) returns null.\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (io.deephaven.util.calendar.BusinessSchedule) the most recent business schedule before time\n  \n*Overload 2*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: io.deephaven.util.calendar.BusinessSchedule\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (io.deephaven.util.calendar.BusinessSchedule) the most recent business schedule before date\n  \n*Overload 4*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (io.deephaven.util.calendar.BusinessSchedule) the business schedule days days before input date",
  "previousNonBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the non-business date days non-business days before input date.  If days\n is zero and the day is a business day, null is returned.\n\n*Overload 1*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :return: (java.lang.String) the most recent non-business day before time\n  \n*Overload 2*  \n  :param time: (io.deephaven.db.tables.utils.DBDateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before input time\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the most recent non-business day before date\n  \n*Overload 4*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before input date"
 },
 "path": "io.deephaven.util.calendar.AbstractBusinessCalendar",
 "typeName": "class"
}