{
 "className": "io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedNode$Adapter",
 "methods": {
  "getInstance": "Note: Java generics information - <NODE_TYPE extends io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedNode<NODE_TYPE>>\n\n:return: io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedStructureBase.Adapter<NODE_TYPE>",
  "getNext": "Get the next node after the input node.\n\n:param node: IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE\n:return: (IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE) The input node's next node",
  "getPrev": "Get the previous node before the input node.\n\n:param node: IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE\n:return: (IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE) The input node's previous node",
  "setNext": "Set the input node's next node.\n\n:param node: IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE\n:param other: IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE",
  "setPrev": "Set the input node's previous node.\n\n:param node: IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE\n:param other: IntrusiveDoublyLinkedNode.Adapter.NODE_TYPE"
 },
 "path": "io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedNode.Adapter",
 "text": "Generic IntrusiveDoublyLinkedStructureBase.Adapter usable with any implementing class.",
 "typeName": "class"
}