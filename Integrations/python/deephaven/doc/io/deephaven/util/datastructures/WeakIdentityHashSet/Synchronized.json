{
 "className": "io.deephaven.util.datastructures.WeakIdentityHashSet$Synchronized",
 "methods": {
  "add": "Add a value to the set if its not already present.\n\n*Overload 1*  \n  :param value: (WeakIdentityHashSet.Synchronized.TYPE) - The value to add\n  :return: (boolean) True if the value was added to the set\n  \n*Overload 2*  \n  :param value: (WeakIdentityHashSet.Synchronized.TYPE) - The value to add\n  :param valueReference: (java.lang.ref.WeakReference<? extendsWeakIdentityHashSet.Synchronized.TYPE>) - A re-usable WeakReference to value if already available, else null\n  :return: (boolean) True if the value was added to the set",
  "clear": "Clear the set.",
  "forEach": "Invoke an action on each member of the set.\n\n:param action: (java.util.function.Consumer<? superWeakIdentityHashSet.Synchronized.TYPE>) - The action to invoke"
 },
 "path": "io.deephaven.util.datastructures.WeakIdentityHashSet.Synchronized",
 "text": "Thread-safe implementation.",
 "typeName": "class"
}