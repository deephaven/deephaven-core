{
 "className": "io.deephaven.util.datastructures.SortedIndexableMapWrapper",
 "methods": {
  "compute": ":param key: SortedIndexableMapWrapper.K\n:param remappingFunction: java.util.function.BiFunction<? super SortedIndexableMapWrapper.K,? super SortedIndexableMapWrapper.V,? extends SortedIndexableMapWrapper.V>\n:return: SortedIndexableMapWrapper.V",
  "computeIfAbsent": ":param key: SortedIndexableMapWrapper.K\n:param mappingFunction: java.util.function.Function<? super SortedIndexableMapWrapper.K,? extends SortedIndexableMapWrapper.V>\n:return: SortedIndexableMapWrapper.V",
  "computeIfPresent": ":param key: SortedIndexableMapWrapper.K\n:param remappingFunction: java.util.function.BiFunction<? super SortedIndexableMapWrapper.K,? super SortedIndexableMapWrapper.V,? extends SortedIndexableMapWrapper.V>\n:return: SortedIndexableMapWrapper.V",
  "containsKey": ":param key: java.lang.Object\n:return: boolean",
  "containsValue": ":param value: java.lang.Object\n:return: boolean",
  "entrySet": ":return: java.util.Set<java.util.Map.Entry<SortedIndexableMapWrapper.K,SortedIndexableMapWrapper.V>>",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "forEach": ":param action: java.util.function.BiConsumer<? super SortedIndexableMapWrapper.K,? super SortedIndexableMapWrapper.V>",
  "get": ":param key: java.lang.Object\n:return: SortedIndexableMapWrapper.V",
  "getByIndex": ":param index: int\n:return: SortedIndexableMapWrapper.V",
  "getOrDefault": ":param key: java.lang.Object\n:param defaultValue: SortedIndexableMapWrapper.V\n:return: SortedIndexableMapWrapper.V",
  "hashCode": ":return: int",
  "isEmpty": ":return: boolean",
  "keySet": ":return: java.util.Set<SortedIndexableMapWrapper.K>",
  "merge": ":param key: SortedIndexableMapWrapper.K\n:param value: SortedIndexableMapWrapper.V\n:param remappingFunction: java.util.function.BiFunction<? super SortedIndexableMapWrapper.V,? super SortedIndexableMapWrapper.V,? extends SortedIndexableMapWrapper.V>\n:return: SortedIndexableMapWrapper.V",
  "put": ":param key: SortedIndexableMapWrapper.K\n:param value: SortedIndexableMapWrapper.V\n:return: SortedIndexableMapWrapper.V",
  "putAll": ":param m: java.util.Map<? extends SortedIndexableMapWrapper.K,? extends SortedIndexableMapWrapper.V>",
  "putIfAbsent": ":param key: SortedIndexableMapWrapper.K\n:param value: SortedIndexableMapWrapper.V\n:return: SortedIndexableMapWrapper.V",
  "remove": "*Overload 1*  \n  :param key: java.lang.Object\n  :return: SortedIndexableMapWrapper.V\n  \n*Overload 2*  \n  :param key: java.lang.Object\n  :param value: java.lang.Object\n  :return: boolean",
  "replace": "*Overload 1*  \n  :param key: SortedIndexableMapWrapper.K\n  :param oldValue: SortedIndexableMapWrapper.V\n  :param newValue: SortedIndexableMapWrapper.V\n  :return: boolean\n  \n*Overload 2*  \n  :param key: SortedIndexableMapWrapper.K\n  :param value: SortedIndexableMapWrapper.V\n  :return: SortedIndexableMapWrapper.V",
  "replaceAll": ":param function: java.util.function.BiFunction<? super SortedIndexableMapWrapper.K,? super SortedIndexableMapWrapper.V,? extends SortedIndexableMapWrapper.V>",
  "size": ":return: int",
  "values": ":return: java.util.Collection<SortedIndexableMapWrapper.V>"
 },
 "path": "io.deephaven.util.datastructures.SortedIndexableMapWrapper",
 "text": "This is a simple utility class that wraps a map, and presents it as an IndexableMap.\n\n The getByIndex() and values() method sort the values according the passed in Comparator.\n\n The other access methods (iteration, keySet etc. do not sort the results).\n\n Everything that touches the values list should be synchronized.",
 "typeName": "class"
}