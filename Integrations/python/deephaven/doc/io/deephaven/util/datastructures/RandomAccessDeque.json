{
 "className": "io.deephaven.util.datastructures.RandomAccessDeque",
 "methods": {
  "add": ":param t: RandomAccessDeque.T\n:return: boolean",
  "addAll": ":param c: java.util.Collection<? extendsRandomAccessDeque.T>\n:return: boolean",
  "addFirst": ":param vv: RandomAccessDeque.T",
  "addLast": ":param vv: RandomAccessDeque.T",
  "contains": ":param o: java.lang.Object\n:return: boolean",
  "containsAll": ":param c: java.util.Collection<?>\n:return: boolean",
  "get": ":param index: int\n:return: RandomAccessDeque.T",
  "isEmpty": ":return: boolean",
  "iterator": ":return: java.util.Iterator<RandomAccessDeque.T>",
  "parallelStream": ":return: java.util.stream.Stream<RandomAccessDeque.T>",
  "remove": ":param entry: java.lang.Object\n:return: boolean",
  "removeAll": ":param c: java.util.Collection<?>\n:return: boolean",
  "removeIf": ":param predicate: java.util.function.Predicate<? superRandomAccessDeque.T>\n:return: boolean",
  "retainAll": ":param c: java.util.Collection<?>\n:return: boolean",
  "size": ":return: int",
  "stream": ":return: java.util.stream.Stream<RandomAccessDeque.T>",
  "toArray": "*Overload 1*  \n  :return: java.lang.Object[]\n  \n*Overload 2*  \n  Note: Java generics information - <T1>\n  \n  :param a: T1[]\n  :return: T1[]"
 },
 "path": "io.deephaven.util.datastructures.RandomAccessDeque",
 "text": "A deque, which also supports get() to an arbitrary index.",
 "typeName": "class"
}