{
 "className": "io.deephaven.util.datastructures.SubscriptionSet",
 "methods": {
  "add": "Add a listener to the set, if it's not already present.  Clean up any GC'd subscriptions.\n See makeEntryFor(Object).\n\n:param listener: (SubscriptionSet.LISTENER_TYPE) - The listener to be added\n:param entry: (io.deephaven.util.datastructures.SubscriptionSet.Entry) - An entry for the listener to be added\n:return: (boolean) Whether this operation caused the set to become non-empty",
  "clear": "Remove all listeners.",
  "collect": "Clean up any GC'd subscriptions.\n\n:return: (boolean) Whether this operation caused the set to become empty",
  "deliverNotification": "**Incompatible overloads text - text from the first overload:**\n\nDispatch a nullary notification to all subscribers.  Clean up any GC'd subscriptions.\n\n*Overload 1*  \n  :param procedure: (io.deephaven.base.Procedure.Unary<SubscriptionSet.LISTENER_TYPE>) - The notification procedure to invoke\n  :param activeOnly: (boolean) - Whether to restrict this notification to active subscriptions only\n  :return: (boolean) Whether this operation caused the set to become empty\n  \n*Overload 2*  \n  Note: Java generics information - <NOTIFICATION_TYPE>\n  \n  :param procedure: (io.deephaven.base.Procedure.Binary<SubscriptionSet.LISTENER_TYPE,NOTIFICATION_TYPE>) - The notification procedure to invoke\n  :param notification: (NOTIFICATION_TYPE) - The notification to deliver\n  :param activeOnly: (boolean) - Whether to restrict this notification to active subscriptions only\n  :return: (boolean) Whether this operation caused the set to become empty",
  "isEmpty": "Check if this set is empty, without cleaning up existing subscriptions.\n\n:return: (boolean) Whether this set is empty",
  "makeEntryFor": "Make an entry for a listener, in order to pass it to #add(Object, Entry).\n May be called without holding any locks.\n\n:param listener: (SubscriptionSet.LISTENER_TYPE) - The listener\n:return: (io.deephaven.util.datastructures.SubscriptionSet.Entry) A new entry for the listener",
  "remove": "Remove a listener from the set, if it's present.  Clean up any GC'd subscriptions.\n\n:param listener: (SubscriptionSet.LISTENER_TYPE) - The listener to remove\n:return: (boolean) Whether this operation caused the set to become empty"
 },
 "path": "io.deephaven.util.datastructures.SubscriptionSet",
 "text": "Array-backed set that stores generic listener objects, only enforcing hard reachability on listeners that are\n SubstitutionWeakReferences.\n \nAll public operations (except clear and isEmpty) are O(n).  All comparisons are based on object reference\n equality.\n \nRequires external synchronization for thread safe usage, except where otherwise noted.",
 "typeName": "class"
}