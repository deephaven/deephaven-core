{
 "className": "io.deephaven.util.datastructures.intrusive.IntrusiveArraySet",
 "methods": {
  "add": ":param t: IntrusiveArraySet.T\n:return: boolean",
  "addAll": ":param c: java.util.Collection<? extendsIntrusiveArraySet.T>\n:return: boolean",
  "contains": ":param o: java.lang.Object\n:return: boolean",
  "containsAll": ":param collection: java.util.Collection<?>\n:return: boolean",
  "ensureCapacity": ":param capacity: int",
  "isEmpty": ":return: boolean",
  "iterator": ":return: java.util.Iterator<IntrusiveArraySet.T>",
  "remove": ":param o: java.lang.Object\n:return: boolean",
  "removeAll": ":param collection: java.util.Collection<?>\n:return: boolean",
  "retainAll": ":param collection: java.util.Collection<?>\n:return: boolean",
  "size": ":return: int",
  "toArray": "*Overload 1*  \n  :return: java.lang.Object[]\n  \n*Overload 2*  \n  Note: Java generics information - <T1>\n  \n  :param a: T1[]\n  :return: T1[]"
 },
 "path": "io.deephaven.util.datastructures.intrusive.IntrusiveArraySet",
 "text": "An intrusive set that uses an array for its backing storage.\n\n You can insert, remove, or check for existence in O(1) time. Clearing the set is O(n); as we need to null out\n references.\n\n If you attempt to perform an operation element which is not in this set, but is in another set with the same adapter;\n then you are going to have a bad time. Tread carefully.",
 "typeName": "class"
}