{
 "className": "io.deephaven.util.datastructures.cache.ReverseOffsetLookupCache",
 "methods": {
  "applyAsInt": "Get the index of value in reverse lookup cache.\n Be sure to call ensurePopulated(int, Supplier, Consumer) for the appropriate index bound, first.\n\n:param value: ReverseOffsetLookupCache.VALUE_TYPE\n:return: (int) The index of value in the cache, or NULL_INDEX (-1) if not found",
  "clear": "Release all resources held by the cache.",
  "ensurePopulated": "Ensure that the cache is populated for all indexes <= highestIndexNeeded.\n\n:param highestIndexNeeded: (int) - The highest index needed for this operation\n:param extraFactory: java.util.function.Supplier<ReverseOffsetLookupCache.EXTRA_INPUT_TYPE>\n:param extraCleanup: java.util.function.Consumer<ReverseOffsetLookupCache.EXTRA_INPUT_TYPE>"
 },
 "path": "io.deephaven.util.datastructures.cache.ReverseOffsetLookupCache",
 "text": "Caching data structure interface for caching Object to int (offset) mappings returned by an expensive, idempotent\n lookup function from int to Object.",
 "typeName": "class"
}