{
 "className": "io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedQueue",
 "methods": {
  "clear": "Remove and unlink all nodes in the queue.",
  "clearFast": "Remove all nodes in the queue, without unlinking anything. This is suitable for nodes that will be discarded.",
  "contains": "Determine if a node is currently in the queue.  Assumes that the node's prev/next pointers are only used\n in this queue.\n\n:param node: (IntrusiveDoublyLinkedQueue.VALUE_TYPE) - The node\n:return: (boolean) Whether the node is currently in the queue",
  "insert": "Add a node at the the specified offset into the queue. This is necessarily an O(n) operation.\n\n:param node: (IntrusiveDoublyLinkedQueue.VALUE_TYPE) - The node to add\n:param offset: (int) - The offset (in [0, size()] to add the node at",
  "isEmpty": "Test if the queue is empty.\n\n:return: (boolean) Whether the queue is empty",
  "iterator": ":return: java.util.Iterator<IntrusiveDoublyLinkedQueue.VALUE_TYPE>",
  "offer": "Add a node at the end of the queue.\n\n:param node: (IntrusiveDoublyLinkedQueue.VALUE_TYPE) - The node to add\n:return: (boolean) true",
  "peek": "Get the node at the front of the queue without modifying the queue.\n\n:return: (IntrusiveDoublyLinkedQueue.VALUE_TYPE) The current head of the queue, or null if the queue is empty",
  "poll": "Remove and get the node at the front of the queue.\n\n:return: (IntrusiveDoublyLinkedQueue.VALUE_TYPE) The node at the head of the queue (now removed)",
  "remove": "**Incompatible overloads text - text from the first overload:**\n\nRemove a node from the queue.\n\n*Overload 1*  \n  :return: (IntrusiveDoublyLinkedQueue.VALUE_TYPE) The node at the head of the queue (now removed)\n  \n*Overload 2*  \n  :param node: (IntrusiveDoublyLinkedQueue.VALUE_TYPE) - The node to remove\n  :return: (boolean) Whether the node was in the queue (and now removed)",
  "size": "Get the size of this queue.\n\n:return: (int) The size of the queue",
  "spliterator": ":return: java.util.Spliterator<IntrusiveDoublyLinkedQueue.VALUE_TYPE>",
  "stream": ":return: java.util.stream.Stream<IntrusiveDoublyLinkedQueue.VALUE_TYPE>",
  "transferAfterTailFrom": "Move all nodes from other to the back of this queue in O(1) time.\n\n:param other: (io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedQueue<IntrusiveDoublyLinkedQueue.VALUE_TYPE>) - The queue to transfer from",
  "transferBeforeHeadFrom": "Move all nodes from other to the front of this queue in O(1) time.\n\n:param other: (io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedQueue<IntrusiveDoublyLinkedQueue.VALUE_TYPE>) - The queue to transfer from"
 },
 "path": "io.deephaven.util.datastructures.linked.IntrusiveDoublyLinkedQueue",
 "text": "A simple queue based on circular intrusive doubly linked nodes (for O(1) random removal).",
 "typeName": "class"
}