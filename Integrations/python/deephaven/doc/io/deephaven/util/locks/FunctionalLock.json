{
 "className": "io.deephaven.util.locks.FunctionalLock",
 "methods": {
  "computeLocked": "Acquire the lock, invoke FunctionalInterfaces.ThrowingSupplier.get() while holding the lock, and release the lock before\n returning the result.\n\nNote: Java generics information - <RESULT_TYPE,\nEXCEPTION_TYPE extends java.lang.Exception>\n\n:param supplier: (io.deephaven.util.FunctionalInterfaces.ThrowingSupplier<RESULT_TYPE,EXCEPTION_TYPE>) - The FunctionalInterfaces.ThrowingSupplier to get\n:return: (RESULT_TYPE) The result of invoking supplier",
  "computeLockedInterruptibly": "Acquire the lock interruptibly, invoke FunctionalInterfaces.ThrowingSupplier.get() while holding the lock, and release the\n lock before returning the result.\n\nNote: Java generics information - <RESULT_TYPE,\nEXCEPTION_TYPE extends java.lang.Exception>\n\n:param supplier: (io.deephaven.util.FunctionalInterfaces.ThrowingSupplier<RESULT_TYPE,EXCEPTION_TYPE>) - The FunctionalInterfaces.ThrowingSupplier to get\n:return: (RESULT_TYPE) The result of invoking supplier",
  "doLocked": "Acquire the lock, invoke FunctionalInterfaces.ThrowingRunnable.run() while holding the lock, and release the lock before\n returning.\n\nNote: Java generics information - <EXCEPTION_TYPE extends java.lang.Exception>\n\n:param runnable: (io.deephaven.util.FunctionalInterfaces.ThrowingRunnable<EXCEPTION_TYPE>) - The FunctionalInterfaces.ThrowingRunnable to run",
  "doLockedInterruptibly": "Acquire the lock interruptibly, invoke FunctionalInterfaces.ThrowingRunnable.run() while holding the lock, and release the\n lock before returning.\n\nNote: Java generics information - <EXCEPTION_TYPE extends java.lang.Exception>\n\n:param runnable: (io.deephaven.util.FunctionalInterfaces.ThrowingRunnable<EXCEPTION_TYPE>) - The FunctionalInterfaces.ThrowingRunnable.run() to run",
  "testLocked": "Acquire the lock, invoke FunctionalInterfaces.ThrowingBooleanSupplier.get() while holding the lock, and release the lock\n before returning the result.\n\nNote: Java generics information - <EXCEPTION_TYPE extends java.lang.Exception>\n\n:param supplier: (io.deephaven.util.FunctionalInterfaces.ThrowingBooleanSupplier<EXCEPTION_TYPE>) - The FunctionalInterfaces.ThrowingBooleanSupplier to get\n:return: (boolean) The result of invoking supplier"
 },
 "path": "io.deephaven.util.locks.FunctionalLock",
 "text": "Extension to the Lock interface to enable locking for the duration of a lambda or other\n FunctionalInterface invocation.",
 "typeName": "interface"
}