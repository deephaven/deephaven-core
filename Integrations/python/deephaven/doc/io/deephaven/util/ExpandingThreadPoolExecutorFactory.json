{
 "className": "io.deephaven.util.ExpandingThreadPoolExecutorFactory",
 "methods": {
  "createThreadPoolExecutor": "Create a ThreadPoolExecutor with the characteristics defined in\n ExpandingThreadPoolExecutorFactory.\n\n:param log: (io.deephaven.io.logger.Logger) - a Logger to log messages\n:param corePoolSize: (int) - the core pool size (the executor will use this value for the initial core and maximum pool\n        sizes)\n:param keepAliveMinutes: (int) - the number of minutes to keep alive core threads\n:param executorName: (java.lang.String) - the name of the executor, used when logging dynamic thread creation\n:param poolThreadNamePrefix: (java.lang.String) - the prefix for thread pool threads\n:param dynamicThreadNamePrefix: (java.lang.String) - the prefix for dynamic (overflow) threads created when the maximum number of pool\n        threads is exceeded\n:return: java.util.concurrent.ThreadPoolExecutor"
 },
 "path": "io.deephaven.util.ExpandingThreadPoolExecutorFactory",
 "text": "Creates a ThreadPoolExecutor which can then be used to submit or execute tasks. This is intended for cases where a\n relatively small number of threads can handle most circumstances, but occasional abnormal events may exceed\n expectations. The executor has the following characteristics:\n \n* Starting core and maximum thread pool sizes defined at creation time\n* If an attempted execution exceeds the maximum number of allowed executor threads, a new Thread will be created\n dynamically instead of generating an exception\n\n If the executor has been shut down, any excess events will be discarded.\n\n To create one of these executors, use createThreadPoolExecutor(io.deephaven.io.logger.Logger, int, int, java.lang.String, java.lang.String, java.lang.String).",
 "typeName": "class"
}