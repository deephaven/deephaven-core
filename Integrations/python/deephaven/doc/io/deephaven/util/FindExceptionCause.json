{
 "className": "io.deephaven.util.FindExceptionCause",
 "methods": {
  "findCause": "**Incompatible overloads text - text from the first overload:**\n\nGiven a throwable and a list of expected throwable types, traverse the cause tree and return the first\n exception that matches the list of expected cause types.\n\n*Overload 1*  \n  Note: Java generics information - java.lang.@SafeVarargs\n  \n  :param original: java.lang.Exception\n  :param expectedTypes: java.lang.Class<? extends java.lang.Exception>...\n  :return: java.lang.Exception\n  \n*Overload 2*  \n  Note: Java generics information - java.lang.@SafeVarargs\n  \n  :param original: java.lang.Throwable\n  :param expectedTypes: java.lang.Class<? extends java.lang.Throwable>...\n  :return: java.lang.Throwable",
  "findLastCause": "Given a throwable and a list of expected throwable types, traverse the cause tree and return the last\n exception that matches the list of expected cause types.\n\nNote: Java generics information - java.lang.@SafeVarargs\n\n:param original: (java.lang.Throwable) - the original Throwable\n:param expectedTypes: (java.lang.Class<? extends java.lang.Throwable>...) - the list of expected types\n:return: (java.lang.Throwable) the last Throwable of one of the defined types, or the original Throwable if none were found",
  "shortCauses": "Given an exception, provide a short description of the causes.\n\n We take each cause and return a String separated by line separator and \"caused by\".\n\n:param throwable: (java.lang.Throwable) - the Throwable to get causes from\n:param lineSeparator: (java.lang.String) - a separation string (e.g., newline or <br>)\n:return: (java.lang.String) the causes formatted one per line"
 },
 "path": "io.deephaven.util.FindExceptionCause",
 "typeName": "class"
}