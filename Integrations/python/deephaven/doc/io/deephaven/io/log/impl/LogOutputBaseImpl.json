{
 "className": "io.deephaven.io.log.impl.LogOutputBaseImpl",
 "methods": {
  "acceptBuffer": "Dispose of the contents of the buffer b, probably by writing them to a channel, and return a new buffer in which\n writing can continue. The returned buffer must have at least need bytes of space remaining. The return value may\n be the same buffer, as long as it's remaining() value has been increased to be >= need.\n\n:param b: (java.nio.ByteBuffer) - the buffer whose contents need to be disposed of.\n:param need: int\n:return: (java.nio.ByteBuffer) the buffer in which further output should be written.",
  "clear": ":return: io.deephaven.base.log.LogOutput",
  "close": "Dispose of the contents of the final buffer in an output sequence, probably by writing them to a channel. Note\n that the argument buffer may be empty. Then do whatever it takes to release the resources of the sink, probably\n by closing a channel.\n\n*Overload 1*  \n  :param b: java.nio.ByteBuffer\n  \n*Overload 2*  \n  :return: io.deephaven.base.log.LogOutput",
  "getBuffer": ":param i: int\n:return: java.nio.ByteBuffer",
  "getBufferCount": ":return: int",
  "getEndOfHeaderOffset": ":return: int",
  "markEndOfHeader": ":return: io.deephaven.base.log.LogOutput",
  "relativeSize": ":return: int",
  "size": ":return: int",
  "start": ":return: io.deephaven.base.log.LogOutput"
 },
 "path": "io.deephaven.io.log.impl.LogOutputBaseImpl",
 "typeName": "class"
}