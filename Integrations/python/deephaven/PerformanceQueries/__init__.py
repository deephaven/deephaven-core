

#
# Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
#

##############################################################################
# This code is auto generated. DO NOT EDIT FILE!
# Run "./gradlew :Generators:generatePythonIntegrationStaticMethods" to generate
##############################################################################


import jpy
import wrapt


_java_type_ = None  # None until the first _defineSymbols() call


def _defineSymbols():
    """
    Defines appropriate java symbol, which requires that the jvm has been initialized through the :class:`jpy` module,
    for use throughout the module AT RUNTIME. This is versus static definition upon first import, which would lead to an
    exception if the jvm wasn't initialized BEFORE importing the module.
    """

    if not jpy.has_jvm():
        raise SystemError("No java functionality can be used until the JVM has been initialized through the jpy module")

    global _java_type_
    if _java_type_ is None:
        # This will raise an exception if the desired object is not the classpath
        _java_type_ = jpy.get_type("io.deephaven.db.v2.utils.PerformanceQueries")


# every module method should be decorated with @_passThrough
@wrapt.decorator
def _passThrough(wrapped, instance, args, kwargs):
    """
    For decoration of module methods, to define necessary symbols at runtime

    :param wrapped: the method to be decorated
    :param instance: the object to which the wrapped function was bound when it was called
    :param args: the argument list for `wrapped`
    :param kwargs: the keyword argument dictionary for `wrapped`
    :return: the decorated version of the method
    """

    _defineSymbols()
    return wrapped(*args, **kwargs)


# Define all of our functionality, if currently possible
try:
    _defineSymbols()
except Exception as e:
    pass


@_passThrough
def approxPct(v0, v1):
    """
    :param v0: long
    :param v1: long
    :return: float
    """
    
    return _java_type_.approxPct(v0, v1)


@_passThrough
def processInfo(processInfoId, type, key):
    """
    Gets the information for a process.
    
    :param processInfoId: (java.lang.String) - id
    :param type: (java.lang.String) - type
    :param key: (java.lang.String) - key
    :return: (java.lang.String) process information
    """
    
    return _java_type_.processInfo(processInfoId, type, key)


@_passThrough
def processMemory():
    """
    A user friendly view with basic memory and GC data samples for the current engine process.
    
    :return: (io.deephaven.db.tables.Table) a view on ProcessMemoryLog.
    """
    
    return _java_type_.processMemory()


@_passThrough
def queryOperationPerformance(evaluationNumber):
    """
    Takes in a query id and returns a view for that query's individual operations's performance data.
     
    
     The query operation performance log contains data on how long each individual operation of a query (where(),
     update(), naturalJoin(), etc., as well as internal functions) takes to execute, and the change in resource
     consumption while each was executing.
     
    
    :param evaluationNumber: (long) - evaluation number
    :return: (io.deephaven.db.tables.Table) query operation performance table.
    """
    
    return _java_type_.queryOperationPerformance(evaluationNumber)


@_passThrough
def queryPerformance(evaluationNumber):
    """
    Takes in a query id and returns a view for that query's performance data.
     
    
     The query performance log contains data on how long each query takes to run. Examples of what constitutes one
     individual query, for performance logging purposes, include:
     
    * A new command in the console (i.e. type something, then press the return key)
    * A sort, filter, or custom column generated by a UI
    * A call from a client API external application
    
    
    
    :param evaluationNumber: (long) - evaluation number
    :return: (io.deephaven.db.tables.Table) query performance table.
    """
    
    return _java_type_.queryPerformance(evaluationNumber)


@_passThrough
def queryUpdatePerformance(evaluationNumber):
    """
    Takes in a query id and returns a view for that query's update performance data.
    
    :param evaluationNumber: (long) - evaluation number
    :return: (io.deephaven.db.tables.Table) query update performance table.
    """
    
    return _java_type_.queryUpdatePerformance(evaluationNumber)


@_passThrough
def queryUpdatePerformanceMap(evaluationNumber):
    """
    Creates a map of query update performance tables.
    
    :param evaluationNumber: (long) - evaluation number
    :return: (java.util.Map<java.lang.String,io.deephaven.db.tables.Table>) map of query update performance tables.
    """
    
    return _java_type_.queryUpdatePerformanceMap(evaluationNumber)
