{
 "className": "io.deephaven.engine.util.TableTools",
 "methods": {
  "byteCol": "Creates a new ColumnHolder of type `byte` that can be used when creating in-memory tables.\n\n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\ndata structure:\n  * an int or list of ints\n  * a :class:`numpy.ndarray` of integer or floating point values. `NaN` values will be mapped to `NULL_BYTE`\n    constant values, and all other values simply cast.\n  * a :class:`pandas.Series` whose values are a numpy array described above",
  "charCol": "Creates a new ColumnHolder of type `char` that can be used when creating in-memory tables.\n\n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\n`data` structure:\n  * an int\n  * a string - will be interpreted as list of characters\n  * a :class:`numpy.ndarray` of integer or one-character string type\n  * a :class:`pandas.Series` whose values are a numpy array described above\n  * an iterable of integers or strings - if string, only the first character will be used",
  "col": "Returns a ColumnHolder that can be used when creating in-memory tables.\n\n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\ndata structure:\n  * an int, bool, float, datetime, date, string or iterable of (one) such\n  * :class:`numpy.ndarray` containing boolean, numerical, datetime64, object, or string data (type inferred)\n  * :class:`pandas.Series` object whose values are such a numpy array",
  "colSource": "Creates a column of appropriate type, used for creating in-memory tables.\n    \n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.sources.ColumnSource<T>) a Deephaven ColumnSource of inferred type\n\ndata structure:\n  * a java object, or list of java objects\n  * an int, bool, float, datetime, date, string or iterable of (one) such\n  * :class:`pandas.Series` object whose values are such a numpy array",
  "doubleCol": "Creates a new ColumnHolder of type `double` that can be used when creating in-memory tables.\n\n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\ndata structure:\n  * an int or float or list of ints or floats\n  * a :class:`numpy.ndarray` of integer or floating point values. `NaN` values will be mapped to `NULL_DOUBLE`\n     constant values, and all other values simply cast.\n  * a :class:`pandas.Series` whose values are a numpy array described above",
  "floatCol": "Creates a new ColumnHolder of type `float` that can be used when creating in-memory tables.\n\n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\ndata structure:\n  * a int or float or list of ints or floats\n  * a :class:`numpy.ndarray` of integer or floating point values. `NaN` values will be mapped to `NULL_FLOAT`\n    constant values, and all other values simply cast.\n  * a :class:`pandas.Series` whose values are a numpy array described above",
  "intCol": "Creates a new ColumnHolder of type `int` that can be used when creating in-memory tables.\n\n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\ndata structure:\n  * an int or list of ints\n  * a :class:`numpy.ndarray` of integer or floating point values. `NaN` values will be mapped to `NULL_INT`\n    constant values, and all other values simply cast.\n  * a :class:`pandas.Series` whose values are a numpy array described above",
  "longCol": "Creates a new ColumnHolder of type `long` that can be used when creating in-memory tables.\n\n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\ndata structure:\n  * an int or list of ints\n  * a :class:`numpy.ndarray` of integer or floating point values. `NaN` values will be mapped to `NULL_LONG`\n    constant values, and all other values simply cast.\n  * a :class:`pandas.Series` whose values are a numpy array described above",
  "objColSource": "Creates a column of appropriate object type, used for creating in-memory tables.\n\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.sources.ColumnSource) a Deephaven ColumnSource of inferred type\ndata structure:\n    * a java object, or list of java objects\n    * an int, bool, float, datetime, date, string or iterable of (one) such\n* :class:`numpy.ndarray` containing boolean, numerical, datetime64, object, or string data (type inferred)\n* :class:`pandas.Series` object whose values are such a numpy array",
  "shortCol": "Creates a new ColumnHolder of type `short` that can be used when creating in-memory tables.\n    \n:param name: name for the column\n:param data: variable argument for the data\n:return: (io.deephaven.engine.table.impl.util.ColumnHolder) a Deephaven ColumnHolder object\n\ndata structure:\n  * an int or list of ints\n  * a :class:`numpy.ndarray` of integer or floating point values. `NaN` values will be mapped to `NULL_SHORT`\n    constant values, and all other values simply cast.\n  * a :class:`pandas.Series` whose values are a numpy array described above"
 },
 "path": "io.deephaven.engine.util.TableTools",
 "text": "Tools for users to manipulate tables.",
 "typeName": "class"
}