{
 "className": "io.deephaven.util.process.ShutdownManager",
 "methods": {
  "addShutdownHookToRuntime": "Add a shutdown hook to the runtime that will invoke all registered shutdown tasks, if they haven't previously\n been invoked.",
  "deregisterTask": "Remove the most recent registration of task with orderingCategory. De-registration concurrent with invocation\n (that is, shutdown in progress) is not guaranteed to be effective.\n\n:param orderingCategory: (io.deephaven.util.process.ShutdownManager.OrderingCategory) - \n:param task: (io.deephaven.util.process.ShutdownManager.Task) -",
  "maybeInvokeTasks": "Invoke all registered shutdown tasks, if they haven't previously been invoked.\n\n:return: (boolean) True if shutdown task invocation was performed by this call",
  "registerTask": "Register task for shutdown invocation along with other tasks belonging to orderingCategory. Registration\n concurrent with invocation (that is, shutdown in progress) is not guaranteed to be effective.\n\n:param orderingCategory: (io.deephaven.util.process.ShutdownManager.OrderingCategory) - \n:param task: (io.deephaven.util.process.ShutdownManager.Task) -",
  "reset": "Clear all shutdown tasks and reset internal state. Useful for unit tests, not safe for production use cases.",
  "tasksInvoked": ":return: (boolean) True if shutdown tasks have been invoked (meaning shutdown is in progress)."
 },
 "path": "io.deephaven.util.process.ShutdownManager",
 "typeName": "interface"
}