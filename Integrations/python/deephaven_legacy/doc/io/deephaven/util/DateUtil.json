{
 "className": "io.deephaven.util.DateUtil",
 "methods": {
  "formatDateFromFormatToFormat": "Converts a date string into a date.\n\n:param date: (java.lang.String) - \n:param sourceDateFormat: (java.text.DateFormat) - \n:param resultDateFormat: (java.text.DateFormat) - \n:return: (java.lang.String) date",
  "formatDateFromStringToString": "Converts a date string into a date.\n\n:param date: (java.lang.String) - \n:param sourceFormat: (java.lang.String) - \n:param resultFormat: (java.lang.String) - \n:return: (java.lang.String) date",
  "formatIntervalMicros": "Returns a string in \"0d 0h 0m 0.000'000s\" format from a time interval in microseconds.\n\n:param tsInterval: long\n:return: java.lang.String",
  "formatIntervalMillis": "Returns a string in \"0d 0h 0m 0.000s\" format from a time interval in milliseconds.\n\n:param tsInterval: long\n:return: java.lang.String",
  "formatIntervalNanos": "Returns a string in \"0d 0h 0m 0.000'000'000s\" format from a time interval in nanoseconds.\n\n:param tsInterval: long\n:return: java.lang.String",
  "formatIsoAsMMsDDsYYYYString": "Converts a String in \"YYYY-MM-DD\" format into \"MM/DD/YYYY\" format.\n\n:param sDateYYYYdMMdDD: java.lang.String\n:return: java.lang.String",
  "formatMmddyyyyStringAsIso": "Converts a String in (M|MM)/(D|DD)/(YY|YYYY) format into \"YYYY-MM-DD\".\n\n:param sDateMmddyyyy: java.lang.String\n:return: java.lang.String",
  "formatMmddyyyyStringAsIsoAllowNull": "Converts a String in (M|MM)/(D|DD)/YYYY format into \"YYYY-MM-DD\".\n\n:param sDateMmddyyyy: java.lang.String\n:return: java.lang.String",
  "formatMmmddcYYYYStringAsIso": "Converts a String in \"Mmm dd, YYYY\" format int \"YYYY-MM-DD\".\n\n:param sDateMmmddcYYYY: java.lang.String\n:return: java.lang.String",
  "formatTrailingMicros": "Returns the last three digits of the given microsecond timestamp as a string, suitable for appending to a\n timestamp formatted to millisecond precision.\n\n:param nTimestampMicros: long\n:return: java.lang.String",
  "formatWithTrailingMicros": "Formats the given microsecond timestamp with the given date formatter and then appends the last three microsend\n digits.\n\n:param dateFormat: java.text.DateFormat\n:param nTimestampMicros: long\n:return: java.lang.String",
  "formatYyyymmddIntAsIso": "Converts an integer in YYYYMMDD format into \"YYYY-MM-DD\".\n\n:param nDateYyyymmdd: int\n:return: java.lang.String",
  "formatYyyymmddIntAsUs": "Converts an integer in YYYYMMDD format into \"MM/DD/YYYY\".\n\n:param nDateYyyymmdd: int\n:return: java.lang.String",
  "formatYyyymmddStringAsIso": "Converts a String in YYYYMMDD format into \"YYYY-MM-DD\".\n\n:param sDateYyyymmdd: java.lang.String\n:return: java.lang.String",
  "formatYyyymmddStringAsUs": "Converts a String in YYYYMMDD format into \"MM/DD/YYYY\".\n\n:param sDateYyyymmdd: java.lang.String\n:return: java.lang.String",
  "formatddM3UyyyyStringAsIso": "Converts a String in DDM3UYYYY format into \"YYYY-MM-DD\".\n\n:param sDateddM3Uyyyy: java.lang.String\n:return: java.lang.String",
  "formatddMMMyyStringAsIso": "Converts a String in DD-MMM-YY format into \"YYYY-MM-DD\".\n\n:param sDateddMMMyy: java.lang.String\n:return: java.lang.String",
  "formatddMMMyyyyStringAsIso": "Converts a String in DD-MMM-YYYY format into \"YYYY-MM-DD\".\n\n:param sDateddMMMyyyy: java.lang.String\n:return: java.lang.String",
  "getDateAsDD": "Converts the given date (local timezone) to a string in DD format.\n\n:param date: java.util.Date\n:return: java.lang.String",
  "getDateAsMM": "Converts the given date (local timezone) to a string in MM format.\n\n:param date: java.util.Date\n:return: java.lang.String",
  "getDateAsMMDD": "Converts the given date (local timezone) to a string in MMDD format.\n\n:param date: java.util.Date\n:return: java.lang.String",
  "getDateAsMMDDYYYY": "Converts the given date (local timezone) to a string in MMDDYYYY format.\n\n:param date: java.util.Date\n:return: java.lang.String",
  "getDateAsPath": "Converts the given date (local timezone) to a string in YYYY/YYYYMM/YYYYMMDD format.\n\n:param date: java.util.Date\n:return: java.lang.String",
  "getDateAsYYYYMM": "Converts the given date (local timezone) to a string in YYYYMM format.\n\n:param date: java.util.Date\n:return: java.lang.String",
  "getDateAsYYYYMMDD": "Converts the given date (local timezone) to a string in YYYYMMDD format.\n\n*Overload 1*  \n  :param date: java.util.Date\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param timeInMillis: long\n  :return: java.lang.String",
  "getDateAsYYYYdMMdDDTHHcMMcSS": "Converts the given date (local timezone) to a string in YYYYMMDDTHH:MM:SS format.\n\n*Overload 1*  \n  :param date: java.util.Date\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param timeInMillis: long\n  :return: java.lang.String",
  "getDateAsYyyymmddInt": "Gets the given date (local timezone) as an integer, in YYYYMMDD format.\n\n:param date: java.util.Date\n:return: int",
  "getDateDownloadPath": "Gets the download path, in [DownloadBaseDir]/sDataSubdir/YYYY/YYYYMM/YYYYMMDD format given a date (local\n timezone).\n\n:param configuration: io.deephaven.configuration.PropertyFile\n:param sDataSubdir: java.lang.String\n:param date: java.util.Date\n:return: java.lang.String",
  "getDateOfMostRecentDailyEvent": "**Incompatible overloads text - text from the first overload:**\n\nReturns a date (noon in the local time zone) which is the date of the most recent occurrence (before or exactly\n on the referenceTimestamp) of the specified event, in the event's timezone.\n\n*Overload 1*  \n  :param configuration: io.deephaven.configuration.PropertyFile\n  :param sPropertyNameRoot: java.lang.String\n  :param referenceTimestamp: java.util.Date\n  :return: java.util.Date\n  \n*Overload 2*  \n  :param configuration: io.deephaven.configuration.PropertyFile\n  :param sPropertyNameRoot: java.lang.String\n  :param referenceTimestamp: java.util.Date\n  :param sValidDaysMask: java.lang.String\n  :return: java.util.Date",
  "getDateTodayAsYyyymmddInt": "Gets the current date (local timezone) as an integer, in YYYYMMDD format.\n\n:return: int",
  "getDateYesterday": "Gets a date object representing the time 24 hours ago.\n\n:return: java.util.Date",
  "getDayOfWeek": "Gets the day of the week (Su == 0) for the given date (local timezone).\n\n:param date: java.util.Date\n:return: int",
  "getDayValidity": "Returns the validity flag from the mask for the given date (local timezone).\n \n See validateDayOfWeekMask(java.lang.String, boolean).\n\n:param date: java.util.Date\n:param sValidDaysMask: java.lang.String\n:return: int",
  "getDaysInMonth": ":param nMonth: int\n:param nYear: int\n:return: int",
  "getLocalTimeZone": "Gets the \"local\" time zone.\n\n:return: java.util.TimeZone",
  "getMostRecentValidDate": "Subtracts zero or more 24hr periods from the given date until the day of week for the resulting date (local\n timezone) is a valid day according to the mask. If the strict flag is true, optional days are not considered\n valid.\n \n See validateDayOfWeekMask(java.lang.String, boolean).\n\n:param date: java.util.Date\n:param sValidDaysMask: java.lang.String\n:param bStrict: boolean\n:return: java.util.Date",
  "getNextDaySameTime": "Gets a date object representing the next day at the same hour (which may not be exactly 24 hours in the future).\n\n:param baseline: java.util.Date\n:param zone: java.util.TimeZone\n:return: java.util.Date",
  "getNextValidDate": "Adds one or more 24hr periods from the given date until the day of week for the resulting date (local timezone)\n is a valid day according to the mask. If the strict flag is true, optional days are not considered valid.\n \n See validateDayOfWeekMask(java.lang.String, boolean).\n\n:param date: java.util.Date\n:param sValidDaysMask: java.lang.String\n:param bStrict: boolean\n:return: java.util.Date",
  "getTimeZoneOfEvent": "Gets the time zone associated with a particular daily event.\n\n:param configuration: io.deephaven.configuration.PropertyFile\n:param sPropertyNameRoot: java.lang.String\n:return: java.util.TimeZone",
  "getTimestampOfEvent": "**Incompatible overloads text - text from the first overload:**\n\nGets the timestamp of an event based upon a daily event and a date (retrieved from properties)\n\n*Overload 1*  \n  :param configuration: io.deephaven.configuration.PropertyFile\n  :param sEventPropertyRoot: java.lang.String\n  :param sDateProperty: java.lang.String\n  :return: java.util.Date\n  \n*Overload 2*  \n  :param configuration: io.deephaven.configuration.PropertyFile\n  :param sEventPropertyRoot: java.lang.String\n  :param nYear: int\n  :param nMonth: int\n  :param nDay: int\n  :return: java.util.Date\n  \n*Overload 3*  \n  :param configuration: io.deephaven.configuration.PropertyFile\n  :param sEventPropertyRoot: java.lang.String\n  :param nYYYYMMDD: int\n  :return: java.util.Date",
  "getTimestampOfEventToday": "Returns the absolute timestamp of the occurrence of a daily event that happens in the same \"day\" as right now.\n The time of day of the event is taken from sPropertyNameRoot.time in \"h:mm a\" format. The\n time zone for calculations (and for determining the boundaries of \"today\") is taken from\n sPropertyNameRoot.timeZone.\n\n*Overload 1*  \n  :param configuration: io.deephaven.configuration.PropertyFile\n  :param sPropertyNameRoot: java.lang.String\n  :return: java.util.Date\n  \n*Overload 2*  \n  :param configuration: io.deephaven.configuration.PropertyFile\n  :param sPropertyNameRoot: java.lang.String\n  :param nNowMillis: long\n  :return: java.util.Date",
  "getTimestampOfMostRecentDailyEvent": "Returns the absolute timestamp of the most recent occurrence (before or exactly on the\n referenceTimestamp) of a daily event. The time of day is taken from\n sPropertyNameRoot.time in \"h:mm a\" format. The time zone for calculations is taken from\n sPropertyNameRoot.timeZone.\n\n:param configuration: io.deephaven.configuration.PropertyFile\n:param sPropertyNameRoot: java.lang.String\n:param referenceTimestamp: java.util.Date\n:return: java.util.Date",
  "getYyyymmddIntAsPath": "Converts the given integer in YYYYMMDD format to a string in YYYY/YYYYMM/YYYYMMDD format.\n\n:param nDateYyyymmdd: int\n:return: java.lang.String",
  "getYyyymmddIntDownloadPath": "Gets the download path, in [DownloadBaseDir]/sDataSubdir/YYYY/YYYYMM/YYYYMMDD format given an integer in YYYYMMDD\n format.\n\n:param configuration: io.deephaven.configuration.PropertyFile\n:param sDataSubdir: java.lang.String\n:param nDateYyyymmdd: int\n:return: java.lang.String",
  "isLeapYear": ":param nYear: int\n:return: boolean",
  "isSameDay": "Determines if two dates are on the same calendar day.\n\n:param d1: (java.util.Date) - first date.\n:param d2: (java.util.Date) - second date.\n:param tz: (java.util.TimeZone) - timezone for the calendar.\n:return: (boolean) true if the dates are on the same calendar day, and false otherwise.",
  "parse": "Parse the given string into a date with the given format.\n\n:param sTime: java.lang.String\n:param sFormat: java.lang.String\n:return: long",
  "setLocalTimeZone": "Gets the \"local\" time zone.\n\n:param localTimeZone: java.util.TimeZone",
  "validateDayOfWeekMask": "Throws a requirement exception if the given day of week mask is not valid. There must be at least one valid day\n in the mask. If the strict flag is set, optional days are not considered valid.\n \n See DAY_VALID, DAY_INVALID, DAY_OPTIONAL, DAYMASK_STRICT,\n DAYMASK_NOT_STRICT\n\n:param sValidDaysMask: java.lang.String\n:param bStrict: boolean"
 },
 "path": "io.deephaven.util.DateUtil",
 "text": "Useful methods for working with dates. Not for use in the critical path.",
 "typeName": "class"
}