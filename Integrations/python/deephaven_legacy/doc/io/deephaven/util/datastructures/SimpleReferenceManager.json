{
 "className": "io.deephaven.util.datastructures.SimpleReferenceManager",
 "methods": {
  "add": "Add the specified item to the list.\n\n:param item: (SimpleReferenceManager.T) - the item to add.\n:return: SimpleReferenceManager.R",
  "clear": "Clear the list of references.",
  "forEach": "Execute the provided procedure on each reference, item pair whose item is still reachable, while removing any\n cleared references.\n\n:param consumer: (java.util.function.BiConsumer<SimpleReferenceManager.R,SimpleReferenceManager.T>) - The function to call with each reachable pair",
  "getFirstItem": "Retrieve the first valid item that satisfies a filter. Remove any encountered cleared references as a side\n effect.\n\n:param filter: (java.util.function.Predicate<SimpleReferenceManager.T>) - The filter to decide if a valid item should be returned\n:return: (SimpleReferenceManager.T) The first valid item that passed the filter, or null if no such item exists",
  "getFirstReference": "Retrieve the first valid reference whose item satisfies a filter. Remove any encountered cleared references as a\n side effect.\n\n:param filter: (java.util.function.Predicate<SimpleReferenceManager.T>) - The filter to decide if a valid item should be returned\n:return: (SimpleReferenceManager.R) The first valid item that passed the filter, or null if no such item exists",
  "isEmpty": "Return true if the list is empty. Does not check for cleared references.\n\n:return: (boolean) true if the list is empty.",
  "remove": "Remove item from the list if present according to reference equality (==), and also any cleared\n references.\n\n:param item: (SimpleReferenceManager.T) - the item to remove.\n:return: (SimpleReferenceManager.T) The item if it was removed, else null",
  "removeAll": "Remove items in the collection from the list, and also any cleared references.\n\n:param items: (java.util.Collection<SimpleReferenceManager.T>) - the items to remove.",
  "removeIf": "Retrieve all encountered items that satisfy a filter, while also removing any cleared references.\n\n:param filter: (java.util.function.Predicate<SimpleReferenceManager.T>) - The filter to decide if a valid item should be removed\n:return: (boolean) Whether we succeeded in removing anything",
  "size": "Return the number of valid references in the list.\n\n Note that each reference is checked for validity, making this operation linear in the number of references.\n\n:return: (int) the number of valid references in the list"
 },
 "path": "io.deephaven.util.datastructures.SimpleReferenceManager",
 "text": "A helper for manging a list of References. It hides the internal management of expired references and provides for\n iteration over the valid ones",
 "typeName": "class"
}