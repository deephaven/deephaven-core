{
 "className": "io.deephaven.jdbc.JdbcTypeMapper$Context",
 "methods": {
  "getArrayParser": "Get the array delimiter to use when encoding/decoding arrays as String values.\n\n:return: (io.deephaven.jdbc.util.ArrayParser) the delimiter",
  "getSourceCalendar": "Get the calendar to use when interpreting local date/time values.\n\n:return: (java.util.Calendar) the calendar",
  "isStrict": "Get the strict setting.\n\n:return: (boolean) if conversions should be strict",
  "of": "**Incompatible overloads text - text from the first overload:**\n\nCreate a new context with the given Calendar. Array delimiter will default to a comma, and strict true.\n\n*Overload 1*  \n  :param sourceTimeZone: (java.util.TimeZone) - necessary when dealing with many date/time related operations.\n  :param arrayDelimiter: (java.lang.String) - necessary when encoding/decoding arrays as strings\n  :param strict: (boolean) - indicates how forgiving to be with malformed/unexpected input data\n  :return: io.deephaven.jdbc.JdbcTypeMapper.Context\n  \n*Overload 2*  \n  :param calendar: (java.util.Calendar) - necessary when dealing with many date/time related operations.\n  :return: io.deephaven.jdbc.JdbcTypeMapper.Context"
 },
 "path": "io.deephaven.jdbc.JdbcTypeMapper.Context",
 "text": "A catch-all bucket for settings used when converting Deephaven column values to and from JDBC values. Storing\n per-import and per-session information here instead of in the mappers allows the mappers to remain static\n singletons.",
 "typeName": "class"
}