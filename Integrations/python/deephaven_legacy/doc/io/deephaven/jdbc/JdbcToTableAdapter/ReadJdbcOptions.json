{
 "className": "io.deephaven.jdbc.JdbcToTableAdapter$ReadJdbcOptions",
 "methods": {
  "arrayDelimiter": "Specify the delimiter to expect when mapping JDBC String columns to Deephaven arrays. Defaults to \",\".\n\n:param arrayDelimiter: (java.lang.String) - the delimiter\n:return: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) customized options object",
  "columnNameFormat": "An option that will convert source JDBC column names to an alternate style using the CasingStyle class. The\n default is to pass through column names as-is with a minimum of normalization. The source columns must\n consistently match the expected source format for the to function appropriately. See JdbcToTableAdapter.CasingStyle for\n more details.\n\n:param casingStyle: (io.deephaven.jdbc.JdbcToTableAdapter.CasingStyle) - if not null, CasingStyle to apply to column names - None or null = no change to casing\n:param replacement: (java.lang.String) - character, or empty String, to use for replacements of space or hyphen in source column\n        names\n:return: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) customized options object",
  "columnTargetType": "Specify the target type for the given column. For columns with multiple possible type mappings, this permits\n the user to specify which Deephaven type should be used. Any columns for which a type is not specified will\n receive the default type mapping.\n\n:param columnName: (java.lang.String) - the column name\n:param targetType: (java.lang.Class<?>) - the desired Deephaven column type\n:return: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) customized options object",
  "maxRows": "Maximum number of rows to read, defaults to no limit. A number less than zero means no limit. This is useful\n to read just a sample of a given query into memory, although depending on the JDBC driver used, it may be\n more efficient to apply a \"LIMIT\" operation in the query itself.\n\n:param maxRows: (int) - maximum number of rows to read\n:return: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) customized options object",
  "sourceTimeZone": "Specify the timezone to use when interpreting date-time/timestamp JDBC values. Defaults to the server\n time-zone, if discoverable. Otherwise, defaults to the local time zone.\n\n:param sourceTimeZone: (java.util.TimeZone) - the source time zone\n:return: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) customized options object",
  "strict": "Whether to apply strict mode when mapping from JDBC to Deephaven; for example throwing an exception if an\n out-of-range value is encountered instead of truncating. Defaults to true.\n\n:param strict: (boolean) - use strict mode\n:return: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) customized options object"
 },
 "path": "io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions",
 "text": "Options applicable when reading JDBC data into a Deephaven in-memory table. Designed to constructed in a \"fluent\"\n manner, with defaults applied if not specified by the user.",
 "typeName": "class"
}