{
 "className": "io.deephaven.jdbc.util.ArrayParser",
 "methods": {
  "encodeArray": "Convert the given array to a String.\n\n*Overload 1*  \n  :param array: (double[]) - the array\n  :return: (java.lang.String) array encoded as string\n  \n*Overload 2*  \n  :param array: (long[]) - the array\n  :return: (java.lang.String) array encoded as string",
  "getArray": "Create a properly typed array from the input string based upon the delimiter, given a supplier.\n\nNote: Java generics information - <T>\n\n:param value: (java.lang.String) - The array string value\n:param strict: (boolean) - fail if the pattern does not begin / end with: [], {}, or ()\n:param elementSupplier: (java.util.function.Function<java.util.stream.Stream<java.lang.String>,T>) - a supplier to convert a stream of element strings to items of the correct types\n:return: (T) an array of values of the specified type",
  "getDoubleArray": "Parse the given string as an array of doubles, based upon the delimiter.\n\n:param value: (java.lang.String) - string to parse\n:param strict: (boolean) - fail if the pattern does not begin / end with: [], {}, or ()\n:return: (double[]) array of parsed values",
  "getInstance": ":param delimiter: java.lang.String\n:return: io.deephaven.jdbc.util.ArrayParser",
  "getLongArray": "Parse the given string as an array of longs, based upon the delimiter.\n\n:param value: (java.lang.String) - string the to parse\n:param strict: (boolean) - fail if the pattern does not begin / end with: [], {}, or ()\n:return: (long[]) array of parsed values"
 },
 "path": "io.deephaven.jdbc.util.ArrayParser",
 "text": "A simple wrapper for string-to-array parsing. Parsers are kept in a cache per-delimiter so that we avoid recompiling\n the pattern regex.",
 "typeName": "class"
}