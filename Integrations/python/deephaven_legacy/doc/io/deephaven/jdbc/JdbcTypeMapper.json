{
 "className": "io.deephaven.jdbc.JdbcTypeMapper",
 "methods": {
  "getColumnTypeMapping": "Get type mapping for converting JDBC to/from Deephaven column type. If the target Deephaven type is not\n specified, a default will be used.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param rs: (java.sql.ResultSet) - a JDBC ResultSet object that will provide the SQL type information\n  :param columnIndex: (int) - the index of the JDBC ResultSet column\n  :param deephavenDataType: (java.lang.Class<T>) - if not null, the desired Deephaven target data type\n  :return: (io.deephaven.jdbc.JdbcTypeMapper.DataTypeMapping<T>) a mapping object that can be used to map SQL/JDBC ResultSet values to and from Deephaven column values\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param connection: (java.sql.Connection) - a JDBC Connection object, used to determine database-specific mappings\n  :param rs: (java.sql.ResultSetMetaData) - the JDBC ResultSet\n  :param columnIndex: (int) - the index of the JDBC ResultSet column\n  :param deephavenDataType: (java.lang.Class<T>) - if not null, the desired Deephaven target data type\n  :return: (io.deephaven.jdbc.JdbcTypeMapper.DataTypeMapping<T>) a mapping object that can be used to map SQL/JDBC ResultSet values to and from Deephaven column values\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param connClass: (java.lang.Class<? extendsjava.sql.Connection>) - a JDBC Connection subclass, used to determine database-specific mappings\n  :param type: (int) - the SQL type\n  :param extend: java.lang.Class<?\n  :return: (io.deephaven.jdbc.JdbcTypeMapper.DataTypeMapping<T>) a mapping object that can be used to map SQL/JDBC ResultSet values to and from Deephaven column values",
  "getDefaultColumnTypeMapping": "Get the default type mapping for converting JDBC/SQL values to/from a Deephaven column type.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param rs: (java.sql.ResultSet) - JDBC ResultSet from which to extract type information\n  :param columnIndex: (int) - the index of the JDBC ResultSet column\n  :return: (io.deephaven.jdbc.JdbcTypeMapper.DataTypeMapping<T>) The default mapping for the specified column\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param connection: (java.sql.Connection) - a JDBC Connection object, used to determine database-specific mappings\n  :param metaData: (java.sql.ResultSetMetaData) - a JDBC ResultSetMetaData object that will provide the SQL type information\n  :param columnIndex: (int) - the index of the JDBC ResultSet column\n  :return: (io.deephaven.jdbc.JdbcTypeMapper.DataTypeMapping<T>) a mapping object that can be used to map SQL/JDBC ResultSet values to and from Deephaven column values"
 },
 "path": "io.deephaven.jdbc.JdbcTypeMapper",
 "typeName": "class"
}