{
 "className": "io.deephaven.jdbc.JdbcToTableAdapter",
 "methods": {
  "readJdbc": "Returns a table that was populated from the provided result set.\n\n*Overload 1*  \n  :param rs: (java.sql.ResultSet) - result set to read, its cursor should be before the first row to import\n  :param origColumnNames: (java.lang.String...) - columns to include or all if none provided\n  :return: (io.deephaven.engine.table.Table) a deephaven static table\n  \n*Overload 2*  \n  :param rs: (java.sql.ResultSet) - result set to read, its cursor should be before the first row to import\n  :param options: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) - options to change the way readJdbc behaves\n  :param origColumnNames: (java.lang.String...) - columns to include or all if none provided\n  :return: (io.deephaven.engine.table.Table) a deephaven static table",
  "readJdbcOptions": "Returns a new options object that the user can use to customize a readJdbc operation.\n\n:return: (io.deephaven.jdbc.JdbcToTableAdapter.ReadJdbcOptions) a new ReadJdbcOptions object"
 },
 "path": "io.deephaven.jdbc.JdbcToTableAdapter",
 "text": "The JdbcToTableAdapter class provides a simple interface to convert a Java Database Connectivity (JDBC)\n ResultSet to a Deephaven Table.\n \n\n To use, first create a result set using your provided JDBC driver of choice:\n \n \n Connection connection = DriverManager.getConnection(\"jdbc:sqlite:/path/to/db.sqlite\");\n Statement statement = connection.createStatement();\n ResultSet resultSet = statement.executeQuery(\"SELECT * FROM Invoice\");\n \n \n Then convert the ResultSet to a Table:\n \n \n Table resultTable = JdbcToTableAdapter.readJdbc(resultSet);\n \n\n\n There are several options than can be set to change the behavior of the ingestion. Provide the customized options\n object to readJdbc(ResultSet, ReadJdbcOptions, String...) like this:\n\n \n JdbcToTableAdapter.ReadJdbcOptions options = JdbcToTableAdapter.readJdbcOptions();\n Table resultTable = JdbcToTableAdapter.readJdbc(resultSet, options);\n \n\n There are many supported mappings from JDBC type to Deephaven type. The default can be overridden by specifying the\n desired result type in the options. For example, convert BigDecimal to double on 'MyCol' via\n options.columnTargetType(\"MyCol\", double.class).",
 "typeName": "class"
}