{
 "className": "io.deephaven.api.agg.spec.AggSpec",
 "methods": {
  "absSum": ":return: (io.deephaven.api.agg.spec.AggSpecAbsSum) AggSpecAbsSum.of()",
  "aggregation": "**Incompatible overloads text - text from the first overload:**\n\nBuild a ColumnAggregation for this AggSpec.\n\n*Overload 1*  \n  :param pair: (io.deephaven.api.agg.Pair) - The input/output column name pair\n  :return: (io.deephaven.api.agg.ColumnAggregation) The aggregation\n  \n*Overload 2*  \n  :param pairs: (io.deephaven.api.agg.Pair...) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation\n  \n*Overload 3*  \n  :param pairs: (java.util.Collection<? extendsio.deephaven.api.agg.Pair>) - The input/output column name pairs\n  :return: (io.deephaven.api.agg.Aggregation) The aggregation",
  "approximatePercentile": "*Overload 1*  \n  :param percentile: double\n  :return: (io.deephaven.api.agg.spec.AggSpecApproximatePercentile) AggSpecApproximatePercentile.of(double) for percentile\n  \n*Overload 2*  \n  :param percentile: double\n  :param compression: double\n  :return: (io.deephaven.api.agg.spec.AggSpecApproximatePercentile) AggSpecApproximatePercentile.of(double, double) for percentile and compression",
  "avg": ":return: (io.deephaven.api.agg.spec.AggSpecAvg) AggSpecAvg.of()",
  "countDistinct": "*Overload 1*  \n  :return: io.deephaven.api.agg.spec.AggSpecCountDistinct\n  \n*Overload 2*  \n  :param countNulls: boolean\n  :return: (io.deephaven.api.agg.spec.AggSpecCountDistinct) AggSpecCountDistinct.of(boolean) for countNulls",
  "description": "Get a simple description for this AggSpec.\n\n:return: (java.lang.String) The description",
  "distinct": "*Overload 1*  \n  :return: (io.deephaven.api.agg.spec.AggSpecDistinct) AggSpecDistinct.of()\n  \n*Overload 2*  \n  :param includeNulls: boolean\n  :return: (io.deephaven.api.agg.spec.AggSpecDistinct) AggSpecDistinct.of(boolean) for includeNulls",
  "first": ":return: (io.deephaven.api.agg.spec.AggSpecFirst) AggSpecFirst.of()",
  "formula": "*Overload 1*  \n  :param formula: java.lang.String\n  :return: (io.deephaven.api.agg.spec.AggSpecFormula) AggSpecFormula.of(String) for formula\n  \n*Overload 2*  \n  :param formula: java.lang.String\n  :param paramToken: java.lang.String\n  :return: (io.deephaven.api.agg.spec.AggSpecFormula) AggSpecFormula.of(String, String) for formula and paramToken",
  "freeze": ":return: (io.deephaven.api.agg.spec.AggSpecFreeze) AggSpecFreeze.of()",
  "group": ":return: (io.deephaven.api.agg.spec.AggSpecGroup) AggSpecGroup.of()",
  "last": ":return: (io.deephaven.api.agg.spec.AggSpecLast) AggSpecLast.of()",
  "max": ":return: (io.deephaven.api.agg.spec.AggSpecMax) AggSpecMax.of()",
  "median": "*Overload 1*  \n  :return: (io.deephaven.api.agg.spec.AggSpecMedian) AggSpecMedian.of()\n  \n*Overload 2*  \n  :param averageEvenlyDivided: boolean\n  :return: (io.deephaven.api.agg.spec.AggSpecMedian) AggSpecMedian.of(boolean) for averageEvenlyDivided",
  "min": ":return: (io.deephaven.api.agg.spec.AggSpecMin) AggSpecMin.of()",
  "percentile": "*Overload 1*  \n  :param percentile: double\n  :return: (io.deephaven.api.agg.spec.AggSpecPercentile) AggSpecPercentile.of(double) for percentile\n  \n*Overload 2*  \n  :param percentile: double\n  :param averageEvenlyDivided: boolean\n  :return: (io.deephaven.api.agg.spec.AggSpecPercentile) AggSpecPercentile.of(double, boolean) for percentile and averageEvenlyDivided",
  "sortedFirst": "*Overload 1*  \n  :param columns: java.lang.String...\n  :return: (io.deephaven.api.agg.spec.AggSpecSortedFirst) AggSpecSortedFirst for the supplied sort columns\n  \n*Overload 2*  \n  :param columns: java.util.Collection<? extendsjava.lang.String>\n  :return: (io.deephaven.api.agg.spec.AggSpecSortedFirst) AggSpecSortedFirst for the supplied sort columns",
  "sortedLast": "*Overload 1*  \n  :param columns: java.lang.String...\n  :return: (io.deephaven.api.agg.spec.AggSpecSortedLast) AggSpecSortedLast for the supplied sort columns\n  \n*Overload 2*  \n  :param columns: java.util.Collection<? extendsjava.lang.String>\n  :return: (io.deephaven.api.agg.spec.AggSpecSortedLast) AggSpecSortedLast for the supplied sort columns",
  "std": ":return: (io.deephaven.api.agg.spec.AggSpecStd) AggSpecStd.of()",
  "sum": ":return: (io.deephaven.api.agg.spec.AggSpecSum) AggSpecSum.of()",
  "tDigest": "*Overload 1*  \n  :return: (io.deephaven.api.agg.spec.AggSpecTDigest) AggSpecTDigest.of()\n  \n*Overload 2*  \n  :param compression: double\n  :return: (io.deephaven.api.agg.spec.AggSpecTDigest) AggSpecTDigest.of(double) for compression",
  "unique": "*Overload 1*  \n  :return: (io.deephaven.api.agg.spec.AggSpecUnique) AggSpecUnique.of()\n  \n*Overload 2*  \n  :param includeNulls: boolean\n  :param nonUniqueSentinel: java.lang.Object\n  :return: (io.deephaven.api.agg.spec.AggSpecUnique) AggSpecUnique.of(boolean, Object) for includeNulls and nonUniqueSentinel",
  "var": ":return: (io.deephaven.api.agg.spec.AggSpecVar) AggSpecVar.of()",
  "walk": "Glue method to deliver this AggSpec to a AggSpec.Visitor.\n\nNote: Java generics information - <V extends io.deephaven.api.agg.spec.AggSpec.Visitor>\n\n:param visitor: (V) - The visitor\n:return: (V) The visitor",
  "wavg": ":param weightColumn: java.lang.String\n:return: (io.deephaven.api.agg.spec.AggSpecWAvg) AggSpecWAvg.of(ColumnName) for the supplied weightColumn",
  "wsum": ":param weightColumn: java.lang.String\n:return: (io.deephaven.api.agg.spec.AggSpecWSum) AggSpecWSum.of(ColumnName) for the supplied weightColumn"
 },
 "path": "io.deephaven.api.agg.spec.AggSpec",
 "text": "An aggregation specification represents the configurable options for singular and\n compound column aggregations.",
 "typeName": "interface"
}