{
 "className": "io.deephaven.plot.LineStyle",
 "methods": {
  "getDashPattern": "Gets the dash pattern of this LineStyle.\n\n:return: (float[]) this LineStyle's dash pattern",
  "getEndStyle": "Gets the LineStyle.LineEndStyle of this LineStyle.\n\n:return: (io.deephaven.plot.LineStyle.LineEndStyle) this LineStyle's LineStyle.LineEndStyle",
  "getJoinStyle": "Gets the LineStyle.LineJoinStyle of this LineStyle.\n\n:return: (io.deephaven.plot.LineStyle.LineJoinStyle) this LineStyle's LineStyle.LineJoinStyle",
  "getWidth": "Gets the width of this LineStyle.\n\n:return: (double) this LineStyle's width",
  "lineEndStyle": "Returns the shape drawn at the end of a line.\n\n:param style: (java.lang.String) - case insensitive style name.\n:return: (io.deephaven.plot.LineStyle.LineEndStyle) LineEndStyle specified by style",
  "lineEndStyleNames": "Returns the names of available shapes draw at the end of a line.\n\n:return: (java.lang.String[]) array of LineEndStyle names",
  "lineJoinStyle": "Returns the style for drawing connections between line segments.\n\n:param style: (java.lang.String) - case insensitive style name\n:return: (io.deephaven.plot.LineStyle.LineJoinStyle) LineJoinStyle specified by style",
  "lineJoinStyleNames": "Returns the names of available styles for drawing connections between line segments.\n\n:return: (java.lang.String[]) array of LineJoinStyle names",
  "lineStyle": "Returns a line style.\n\n*Overload 1*  \n  :param width: (double) - line thickness\n  :param endStyle: (io.deephaven.plot.LineStyle.LineEndStyle) - line end style\n  :param joinStyle: (io.deephaven.plot.LineStyle.LineJoinStyle) - line join style\n  :param dashPattern: (double...) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param width: (double) - line thickness\n  :param endStyle: (io.deephaven.plot.LineStyle.LineEndStyle) - line end style\n  :param joinStyle: (io.deephaven.plot.LineStyle.LineJoinStyle) - line join style\n  :param dashPattern: (java.util.List<T>) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style.\n  \n*Overload 3*  \n  :param width: (double) - line thickness\n  :param endStyle: (java.lang.String) - line end style descriptor\n  :param joinStyle: (java.lang.String) - line join style descriptor\n  :param dashPattern: (double...) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style.\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param width: (double) - line thickness\n  :param endStyle: (java.lang.String) - line end style descriptor\n  :param joinStyle: (java.lang.String) - line join style descriptor\n  :param dashPattern: (java.util.List<T>) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style.\n  \n*Overload 5*  \n  :param width: (double) - line thickness\n  :return: (io.deephaven.plot.LineStyle) line style with no dash pattern set.\n  \n*Overload 6*  \n  :param width: (double) - line thickness\n  :param dashPattern: (double[]) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND.\n  \n*Overload 7*  \n  :param width: (double) - line thickness\n  :param dashPattern: (int[]) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND.\n  \n*Overload 8*  \n  :param width: (double) - line thickness\n  :param dashPattern: (long[]) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND.\n  \n*Overload 9*  \n  :param width: (double) - line thickness\n  :param dashPattern: (float[]) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND.\n  \n*Overload 10*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param width: (double) - line thickness\n  :param dashPattern: (T[]) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND.\n  \n*Overload 11*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param width: (double) - line thickness\n  :param dashPattern: (java.util.List<T>) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND.\n  \n*Overload 12*  \n  :param dashPattern: (double...) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND, and the line width set to\n           1.0.\n  \n*Overload 13*  \n  Note: Java generics information - <T extends java.lang.Number>\n  \n  :param dashPattern: (java.util.List<T>) - dash pattern\n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND, and the line width set to\n           1.0.\n  \n*Overload 14*  \n  :param endStyle: (java.lang.String) - line end style\n  :param joinStyle: (java.lang.String) - line join style\n  :return: (io.deephaven.plot.LineStyle) line style with the line width set to 1.0.\n  \n*Overload 15*  \n  :return: (io.deephaven.plot.LineStyle) line style with the line end style and line join style set to ROUND, the line width set to 1.0,\n           and no dash pattern set.",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.plot.LineStyle",
 "text": "Specifications for the style of a line. These specifications include line thickness, dash patterns, end styles,\n segment join styles, and shapes.\n\n \n Line thickness is 1 by default. Larger numbers draw thicker lines.\n \n\n Dash pattern is defined by an array. If only one value is included in the array, the dash and the gap after the dash\n will be the same. If more than one value is used in the array, the first value represents the length of the first\n dash in the line. The next value represents the length of the gap between it and the next dash. Additional values can\n be added into the array for subsequent dash/gap combinations. For example, the array [20,5] creates a dash pattern\n with a 20 length dash and a 5 length gap. This pattern is repeated till the end of the line.",
 "typeName": "class"
}