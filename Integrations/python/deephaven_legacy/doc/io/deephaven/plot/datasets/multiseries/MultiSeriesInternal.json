{
 "className": "io.deephaven.plot.datasets.multiseries.MultiSeriesInternal",
 "methods": {
  "addSeries": "Add the given series to this MultiSeries\n\n:param series: (MultiSeriesInternal.T) - series\n:param key: (java.lang.Object) - key used to determine the name of the series",
  "applyTransform": "Calls a .update() on the underlying table with the given formula: underlyingTable.update(columnName = update)\n\n:param columnName: (java.lang.String) - the resulting column\n:param update: (java.lang.String) - the formula inside\n:param classesToImport: (java.lang.Class[]) - classes to import into the query scope\n:param params: (java.util.Map<java.lang.String,java.lang.Object>) - parameters to add to the query scope\n:param columnTypesPreserved: (boolean) - set to true if the update clause is 'add only' with respect to columns. This allows\n        the copying of ACLs",
  "axes": "Gets the axes on which this data will be plotted.\n\n:return: (io.deephaven.plot.AxesImpl) axes on which this data will be plotted",
  "chart": "Gets the chart on which this data will be plotted.\n\n:return: (io.deephaven.plot.ChartImpl) chart on which this data will be plotted",
  "copy": "Create a copy of the series on a different set of axes.\n\n:param axes: (io.deephaven.plot.AxesImpl) - new axes.\n:return: (io.deephaven.plot.datasets.multiseries.MultiSeriesInternal<MultiSeriesInternal.T>) copy of the series on a different set of axes.",
  "createSeries": "Creates a new series for this multi-series.\n\n*Overload 1*  \n  :param seriesName: (java.lang.String) - name for the series\n  :param t: (io.deephaven.engine.table.impl.BaseTable) - client side source table\n  :return: (MultiSeriesInternal.T) new series for this multi-series\n  \n*Overload 2*  \n  :param seriesName: (java.lang.String) - name for the series\n  :param t: (io.deephaven.engine.table.impl.BaseTable) - client side source table\n  :param dynamicSeriesNamer: (io.deephaven.plot.datasets.DynamicSeriesNamer) - creates the name for the newly generated series. Ensures unique names.\n  :return: (MultiSeriesInternal.T) new series for this multi-series",
  "get": "Gets the specified series from this multi-series.\n\n:param series: (int) - series index\n:return: (MultiSeriesInternal.T) specified series",
  "getByColumns": "Gets the by columns for the multi-series.\n\n:return: (java.lang.String[]) by columns for the multi-series.",
  "getDynamicSeriesNamer": "Gets a utility to make certain that all dynamic series have unique names.\n\n:return: (io.deephaven.plot.datasets.DynamicSeriesNamer) utility to make certain that all dynamic series have unique names.",
  "getPartitionedTable": ":return: (io.deephaven.engine.table.PartitionedTable) the underlying PartitionedTable",
  "getPlotInfo": ":return: io.deephaven.plot.errors.PlotInfo",
  "getSeriesCount": "Gets the number of series in this multi-series.\n\n:return: (int) number of series in this multi-series",
  "getX": ":return: (java.lang.String) the x-axis data column",
  "getY": ":return: (java.lang.String) the y-axis data column",
  "id": "Gets the id for the multi series.\n\n:return: int",
  "initializeSeries": "Assigns series modifiers, e.g. point color, to the given series\n\n:param series: (MultiSeriesInternal.T) - series to initialize",
  "name": "Gets the name of this data set.\n\n:return: (java.lang.Comparable) name of this data set",
  "setDynamicSeriesNamer": ":param seriesNamer: io.deephaven.plot.datasets.DynamicSeriesNamer"
 },
 "path": "io.deephaven.plot.datasets.multiseries.MultiSeriesInternal",
 "text": "A parent data series that spawns a DataSeries for each unique key in the parent series.",
 "typeName": "interface"
}