{
 "className": "io.deephaven.plot.BaseFigure",
 "methods": {
  "chart": "Returns a chart from this Figure's grid.\n\n*Overload 1*  \n  :param index: (int) - index from the Figure's grid. The index starts at 0 in the upper left hand corner of the grid and\n          increases going left to right, top to bottom. E.g. for a 2x2 Figure, the indices would be [0, 1] [2, 3].\n  :return: (io.deephaven.plot.Chart) selected Chart\n  \n*Overload 2*  \n  :param rowNum: (int) - row index in this Figure's grid. The row index starts at 0.\n  :param colNum: (int) - column index in this Figure's grid. The column index starts at 0.\n  :return: (io.deephaven.plot.Chart) selected Chart",
  "figureRemoveSeries": "Removes all series with names from this Figure.\n\n:param removeSeriesNames: (java.lang.String...) - series names\n:return: (io.deephaven.plot.BaseFigure) this Figure",
  "figureTitle": "Sets the title of this Figure\n\n:param title: (java.lang.String) - title\n:return: (io.deephaven.plot.BaseFigure) this Figure",
  "figureTitleColor": "Sets the color of this Figure's title\n\n*Overload 1*  \n  :param color: (io.deephaven.gui.color.Paint) - color\n  :return: (io.deephaven.plot.BaseFigure) this Figure\n  \n*Overload 2*  \n  :param color: (java.lang.String) - color\n  :return: (io.deephaven.plot.BaseFigure) this Figure",
  "figureTitleFont": "Sets the font of this Figure's title\n\n*Overload 1*  \n  :param font: (io.deephaven.plot.Font) - font\n  :return: (io.deephaven.plot.BaseFigure) this Figure\n  \n*Overload 2*  \n  :param family: (java.lang.String) - font family; if null, set to Arial\n  :param style: (java.lang.String) - font style; if null, set to Font.FontStyle PLAIN\n  :param size: (int) - the point size of the Font\n  :return: (io.deephaven.plot.BaseFigure) this Figure",
  "newChart": "Adds a new Chart to this figure.\n\n*Overload 1*  \n  :return: (io.deephaven.plot.Chart) the new Chart. The Chart is placed in the next available grid space, starting at the\n           upper left hand corner of the grid, going left to right, top to bottom. If no available space is found in\n           the grid:\n           \n  * if this Figure was created with no specified grid size, then the Figure will resize itself to add the\n           new Chart;\n  * if not, a RuntimeException will be thrown.\n  \n*Overload 2*  \n  :param index: (int) - index from the Figure's grid to remove. The index starts at 0 in the upper left hand corner of the\n          grid and increases going left to right, top to bottom. E.g. for a 2x2 Figure, the indices would be [0, 1]\n          [2, 3].\n  :return: (io.deephaven.plot.Chart) the new Chart. The Chart is placed at the grid space indicated by the index.\n  \n*Overload 3*  \n  :param rowNum: (int) - row index in this Figure's grid. The row index starts at 0.\n  :param colNum: (int) - column index in this Figure's grid. The column index starts at 0.\n  :return: (io.deephaven.plot.Chart) the new Chart. The Chart is placed at the grid space [rowNum, colNum.",
  "removeChart": "Removes a chart from the Figure's grid.\n\n*Overload 1*  \n  :param removeChartIndex: (int) - index from the Figure's grid to remove. The index starts at 0 in the upper left hand\n          corner of the grid and increases going left to right, top to bottom. E.g. for a 2x2 Figure, the indices\n          would be [0, 1] [2, 3].\n  :return: (io.deephaven.plot.BaseFigure) this Figure with the chart removed.\n  \n*Overload 2*  \n  :param removeChartRowNum: (int) - row index in this Figure's grid. The row index starts at 0.\n  :param removeChartColNum: (int) - column index in this Figure's grid. The column index starts at 0.\n  :return: (io.deephaven.plot.BaseFigure) this Figure with the chart removed.",
  "save": "Saves the Figure as an image.\n\n*Overload 1*  \n  :param path: (java.lang.String) - path where the figure is saved. Must not be null\n  :return: (io.deephaven.plot.BaseFigure) figure\n  \n*Overload 2*  \n  :param path: (java.lang.String) - path where the figure is saved. Must not be null\n  :param wait: (boolean) - whether to hold the calling thread until the file is written\n  :param timeoutSeconds: (long) - timeout in seconds to wait.\n  :return: (io.deephaven.plot.BaseFigure) figure\n  \n*Overload 3*  \n  :param path: (java.lang.String) - path where the figure is saved. Must not be null\n  :param width: (int) - image width\n  :param height: (int) - image height\n  :return: (io.deephaven.plot.BaseFigure) figure\n  \n*Overload 4*  \n  :param path: (java.lang.String) - path where the figure is saved. Must not be null\n  :param width: (int) - image width\n  :param height: (int) - image height\n  :param wait: (boolean) - whether to hold the calling thread until the file is written\n  :param timeoutSeconds: (long) - timeout in seconds to wait.\n  :return: (io.deephaven.plot.BaseFigure) figure",
  "updateInterval": "Sets the update interval of this Figure. The plot will be redrawn at this update interval.\n\n:param updateIntervalMillis: (long) - update interval, in milliseconds\n:return: (io.deephaven.plot.BaseFigure) this Figure"
 },
 "path": "io.deephaven.plot.BaseFigure",
 "text": "Container for Charts.",
 "typeName": "interface"
}