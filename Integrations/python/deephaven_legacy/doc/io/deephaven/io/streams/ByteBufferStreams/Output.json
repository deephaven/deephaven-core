{
 "className": "io.deephaven.io.streams.ByteBufferStreams$Output",
 "methods": {
  "appendBytes": "*Overload 1*  \n  :param s: java.lang.CharSequence\n  :return: io.deephaven.io.streams.ByteBufferStreams.Output\n  \n*Overload 2*  \n  :param s: java.lang.CharSequence\n  :param position: int\n  :param len: int\n  :return: io.deephaven.io.streams.ByteBufferStreams.Output",
  "appendChars": "*Overload 1*  \n  :param s: java.lang.CharSequence\n  :return: io.deephaven.io.streams.ByteBufferStreams.Output\n  \n*Overload 2*  \n  :param s: java.lang.CharSequence\n  :param position: int\n  :param len: int\n  :return: io.deephaven.io.streams.ByteBufferStreams.Output",
  "setBuffer": "Install a new buffer for all future writes.\n\n:param b: java.nio.ByteBuffer",
  "setSink": "Install a new sink for all future writes.\n\n:param sink: io.deephaven.io.streams.ByteBufferStreams.Sink",
  "write": "*Overload 1*  \n  :param b: int\n  \n*Overload 2*  \n  :param ba: byte[]\n  \n*Overload 3*  \n  :param ba: byte[]\n  :param off: int\n  :param len: int\n  \n*Overload 4*  \n  :param b: java.nio.ByteBuffer",
  "writeBoolean": ":param v: boolean",
  "writeByte": ":param v: int",
  "writeBytes": ":param s: java.lang.String",
  "writeChar": ":param v: int",
  "writeChars": ":param s: java.lang.String",
  "writeDouble": ":param d: double",
  "writeFloat": ":param f: float",
  "writeInt": ":param v: int",
  "writeLong": ":param v: long",
  "writeShort": ":param v: int",
  "writeUTF": ":param str: java.lang.String"
 },
 "path": "io.deephaven.io.streams.ByteBufferStreams.Output",
 "typeName": "class"
}