{
 "className": "io.deephaven.io.streams.CurrentByteBufferSink",
 "methods": {
  "close": "Convenience close method. Effectively the same as invoking ByteBufferSink.close(ByteBuffer) with the\n result of getBuffer().",
  "ensureSpace": "Return the current buffer, guaranteed to have sufficient space remaining to append the requested number of bytes.\n The existing current buffer may be accepted (see ByteBufferSink.acceptBuffer(ByteBuffer, int)) as a side\n effect of this operation.\n\n:param need: (int) - The number of bytes required to proceed\n:return: (java.nio.ByteBuffer) The current buffer for further output",
  "flush": "Cause the current buffer to be accepted if it has any contents that aren't yet accepted into the sink.",
  "getBuffer": "Access the current buffer for this sink. This is either the initial buffer, or the last one provided by\n ByteBufferSink.acceptBuffer(ByteBuffer, int)) or ensureSpace(int).\n\n:return: (java.nio.ByteBuffer) The current buffer for this sink"
 },
 "path": "io.deephaven.io.streams.CurrentByteBufferSink",
 "text": "A ByteBufferSink that knows and provides a getter for the last buffer it gave out, to avoid unnecessary state in code\n that uses the buffer.",
 "typeName": "interface"
}