{
 "className": "io.deephaven.io.streams.ByteBufferOutputStream",
 "methods": {
  "appendByte": ":param n: byte\n:return: io.deephaven.io.streams.ByteBufferOutputStream",
  "appendByteBuffer": ":param bb: java.nio.ByteBuffer\n:return: io.deephaven.io.streams.ByteBufferOutputStream",
  "appendBytes": "*Overload 1*  \n  :param s: java.lang.CharSequence\n  :return: io.deephaven.io.streams.ByteBufferOutputStream\n  \n*Overload 2*  \n  :param s: java.lang.CharSequence\n  :param position: int\n  :param len: int\n  :return: io.deephaven.io.streams.ByteBufferOutputStream",
  "appendChars": "*Overload 1*  \n  :param s: java.lang.CharSequence\n  :return: io.deephaven.io.streams.ByteBufferOutputStream\n  \n*Overload 2*  \n  :param s: java.lang.CharSequence\n  :param position: int\n  :param len: int\n  :return: io.deephaven.io.streams.ByteBufferOutputStream",
  "appendDouble": ":param p: double\n:return: io.deephaven.io.streams.ByteBufferOutputStream",
  "appendInt": ":param n: int\n:return: io.deephaven.io.streams.ByteBufferOutputStream",
  "appendLong": ":param n: long\n:return: io.deephaven.io.streams.ByteBufferOutputStream",
  "appendShort": ":param n: short\n:return: io.deephaven.io.streams.ByteBufferOutputStream",
  "getBuffer": ":return: java.nio.ByteBuffer",
  "setBuffer": "Install a new buffer for all future writes.\n\n:param b: java.nio.ByteBuffer",
  "setSink": "Install a new sink for all future writes.\n\n:param sink: io.deephaven.io.streams.ByteBufferSink",
  "write": "*Overload 1*  \n  :param b: int\n  \n*Overload 2*  \n  :param ba: byte[]\n  \n*Overload 3*  \n  :param ba: byte[]\n  :param off: int\n  :param len: int\n  \n*Overload 4*  \n  :param b: java.nio.ByteBuffer",
  "writeBoolean": ":param v: boolean",
  "writeByte": ":param v: int",
  "writeBytes": ":param s: java.lang.String",
  "writeChar": ":param v: int",
  "writeChars": ":param s: java.lang.String",
  "writeDouble": ":param d: double",
  "writeFloat": ":param f: float",
  "writeInt": ":param v: int",
  "writeLong": ":param v: long",
  "writeShort": ":param v: int",
  "writeUTF": "*Overload 1*  \n  :param str: java.lang.String\n  \n*Overload 2*  \n  :param str: java.lang.CharSequence"
 },
 "path": "io.deephaven.io.streams.ByteBufferOutputStream",
 "text": "This is an OutputStream implementation which places the output into a java.nio.ByteBuffer. The constructor accepts an\n initial buffer and an instance of ByteBufferSink. When an output operation would cause the buffer to overflow, it is\n handed to the sink's acceptBuffer() method, which is expected to dispose of the existing contents and return a buffer\n in which writing can continue.\n\n Note that the stream contains no state other than the buffer itself, so the buffer and/or the sink can be switched at\n any time by calling setBuffer() or setSink().",
 "typeName": "class"
}