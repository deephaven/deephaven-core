{
 "className": "io.deephaven.io.streams.ByteBufferStreams$Input",
 "methods": {
  "available": ":return: int",
  "mark": ":param readlimit: int",
  "markSupported": ":return: boolean",
  "read": "*Overload 1*  \n  :return: int\n  \n*Overload 2*  \n  :param b: byte[]\n  :return: int\n  \n*Overload 3*  \n  :param b: byte[]\n  :param off: int\n  :param len: int\n  :return: int",
  "readBoolean": ":return: boolean",
  "readByte": ":return: byte",
  "readChar": ":return: char",
  "readDouble": ":return: double",
  "readFloat": ":return: float",
  "readFully": "*Overload 1*  \n  :param b: byte[]\n  \n*Overload 2*  \n  :param b: byte[]\n  :param off: int\n  :param len: int",
  "readInt": ":return: int",
  "readLine": ":return: java.lang.String",
  "readLong": ":return: long",
  "readShort": ":return: short",
  "readUTF": ":return: java.lang.String",
  "readUnsignedByte": ":return: int",
  "readUnsignedShort": ":return: int",
  "setBuffer": "Set the buffer to be used for future read operations.\n\n:param buf: java.nio.ByteBuffer",
  "skip": ":param n: long\n:return: long",
  "skipBytes": ":param n: int\n:return: int"
 },
 "path": "io.deephaven.io.streams.ByteBufferStreams.Input",
 "typeName": "class"
}