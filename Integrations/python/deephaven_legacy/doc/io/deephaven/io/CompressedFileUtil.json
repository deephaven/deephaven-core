{
 "className": "io.deephaven.io.CompressedFileUtil",
 "methods": {
  "addCompressionExtensionIfNeeded": "If the given file doesn't exist, looks to see if a compressed version of the file exists. If no file is found,\n returns the original file name.\n\n:param sFileName: java.lang.String\n:return: java.lang.String",
  "bunzip2": "Unzip the file\n\n:param file: (java.io.File) - The file to bunzip2\n:return: int",
  "bzip2": "Files need to be in the same directory, otherwise Tar complains about windows paths\n\n:param archiveName: (java.lang.String) - \n:param baseDir: (java.lang.String) - the directory where the input files are located\n:param inputFiles: (java.lang.String[]) -",
  "createInputStreamFactoryForPossiblyCompressedStream": ":param inputStreamFactory: io.deephaven.io.InputStreamFactory\n:return: io.deephaven.io.InputStreamFactory",
  "createInputStreamFactoryForPossiblyTarredStream": ":param inputStreamFactory: io.deephaven.io.InputStreamFactory\n:return: io.deephaven.io.InputStreamFactory",
  "getMagic2": ":param testStream: java.io.InputStream\n:return: int",
  "getMagic4": ":param testStream: java.io.InputStream\n:param nMagic2: int\n:return: int",
  "getMagic6": ":param testStream: java.io.InputStream\n:param nMagic4: int\n:return: long",
  "openPossiblyCompressedFile": "**Incompatible overloads text - text from the first overload:**\n\nOpen the file, automatically determining if it has been zipped, GZipped, BZip2'd or not.\n\n*Overload 1*  \n  :param sFileName: java.lang.String\n  :param useMicrosPcapEmulation: java.lang.Boolean\n  :return: java.io.InputStream\n  \n*Overload 2*  \n  :param sFileName: java.lang.String\n  :return: java.io.InputStream\n  \n*Overload 3*  \n  :param sFileName: java.lang.String\n  :param bufferedSize: int\n  :param useMicrosPcapEmulation: java.lang.Boolean\n  :return: java.io.InputStream\n  \n*Overload 4*  \n  :param sFileName: java.lang.String\n  :param bufferedSize: int\n  :return: java.io.InputStream\n  \n*Overload 5*  \n  :param inputStreamFactory: io.deephaven.io.InputStreamFactory\n  :return: java.io.InputStream",
  "openPossiblyCompressedFiles": ":param fileNames: java.lang.String[]\n:return: java.io.InputStream",
  "unbzip2": ":param archive: java.io.File",
  "zipFile": ":param inputFile: java.io.File\n:param zipFilePath: java.io.File"
 },
 "path": "io.deephaven.io.CompressedFileUtil",
 "typeName": "class"
}