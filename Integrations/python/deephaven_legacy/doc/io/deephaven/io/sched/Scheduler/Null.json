{
 "className": "io.deephaven.io.sched.Scheduler$Null",
 "methods": {
  "cancelJob": "Cancel a job, making the scheduler forget it completely..\n\n:param job: io.deephaven.io.sched.Job",
  "close": "Shut down the scheduler, calling close() on the underlying Selector.",
  "currentTimeMillis": "Return the scheduler's idea of the current time.\n\n:return: long",
  "installJob": "**Incompatible overloads text - text from the first overload:**\n\nInstall a job in association with a channel and an interest set.\n\n*Overload 1*  \n  :param job: io.deephaven.io.sched.Job\n  :param deadline: long\n  :param channel: java.nio.channels.SelectableChannel\n  :param interest: int\n  \n*Overload 2*  \n  :param job: io.deephaven.io.sched.Job\n  :param deadline: long",
  "isClosed": "Return true if the scheduler is closing or closed.\n\n:return: boolean",
  "junitGetAllJobs": "Return all jobs known to the scheduler, in whatever state.\n\n:return: java.util.Set<io.deephaven.io.sched.Job>",
  "junitGetAllKeys": "Return the selection keys currently known to the scheduler.\n\n:return: java.util.ArrayList<java.nio.channels.SelectionKey>",
  "junitGetChannelsAndJobs": "Return a map containing all channels and the jobs to which they are associated.\n\n:return: java.util.Map<java.nio.channels.SelectableChannel,io.deephaven.io.sched.Job>",
  "junitGetReadyKeys": "Return the selection keys currently known to the scheduler.\n\n:return: java.util.ArrayList<java.nio.channels.SelectionKey>",
  "junitGetSelector": "Return a reference to the selector\n\n:return: java.nio.channels.Selector",
  "junitGetTimeoutQueue": "Return the contents of the timeout queue, in deadline order\n\n:return: (java.util.ArrayList<io.deephaven.io.sched.Job>) the jobs in the timeout queue",
  "junitTestTimeoutQueueInvariant": "Return true if the timeout queue invariant holds.\n\n:return: boolean",
  "work": "Wait for jobs to become ready, then invoke() them all. This method will form the core of the main loop of a\n scheduler-driven application. The method first waits until:\n\n -- the given timeout expires, -- the earliest job-specific timeout expires, or -- one or more jobs becomes ready\n\n If jobs have become ready, then the entire ready set will be invoked. If any job throws an uncaught exception,\n the job's terminated() method will be called and the job deregistered. This does not abort the invocation of the\n remaining jobs. The return value is then the number of jobs that were invoked.\n\n If no jobs are ready and any job-specific timeouts expire, the associated jobs' timedOut() methods are called.\n The return value is the negative of the number of expired timeouts.\n\n If the time given by the timeout argument expires, then zero is returned.\n\n Note that this method is not synchronized. The application must ensure that it is never called concurrently by\n more than one thread.\n\n:param timeout: long\n:param handoff: io.deephaven.base.Procedure.Nullary\n:return: (boolean) true, if some job was dispatched"
 },
 "path": "io.deephaven.io.sched.Scheduler.Null",
 "typeName": "class"
}