{
 "className": "io.deephaven.tablelogger.TableLoggerImpl2",
 "methods": {
  "close": "Close the logger and any writer in use. Users should quiesce all logging threads and invoke TableLogger.shutdown()\n first in order to guarantee that all pending rows have been written to storage.",
  "init": ":param tableWriter: io.deephaven.tablelogger.TableWriter\n:param queueSize: int",
  "isClosed": ":return: boolean",
  "shutdown": "Write all enqueued elements to the TableWriter and prevent further writes. This should be invoked before\n TableLogger.close(). This must not be invoked if any threads might still try to log additional items.",
  "waitDone": "Wait for all currently populated rows to be written.\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param millis: long\n  :return: boolean"
 },
 "path": "io.deephaven.tablelogger.TableLoggerImpl2",
 "text": "Common parts of the generated TableLoggers.\n\n It is \"2\" so that we can change the implementation details from TableLoggerImpl; and existing client code will still\n compile. Otherwise, there is a chicken and egg problem, with clients not being able to run the new TableLoggerFactory\n using modules that contain their logger classes.",
 "typeName": "class"
}