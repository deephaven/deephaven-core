{
 "className": "io.deephaven.tablelogger.TableWriter",
 "methods": {
  "close": "Closes the writer.",
  "flush": "Flushes data out.",
  "getColumnNames": "Gets the column names for the table.\n\n:return: (java.lang.String[]) column names for the table.",
  "getColumnTypes": "Gets the column types for the table.\n\n:return: (java.lang.Class[]) column types for the table.",
  "getRowWriter": "Get a writer for a Row entries. This is likely to be newly created, so callers should cache this value. In\n practice, TableWriter implementations generally cache the result of the first call to this method as a primary\n writer.\n\n:return: (TableWriter.R) a Row, likely newly created",
  "getSetter": "**Incompatible overloads text - text from the first overload:**\n\nGets a setter for a column.\n \n The implementation is likely to delegate to Row.getSetter(String) in a default Row instance.\n\n*Overload 1*  \n  :param name: (java.lang.String) - column name\n  :return: (io.deephaven.tablelogger.RowSetter) setter for the column.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: (java.lang.String) - column name\n  :param tClass: (java.lang.Class<T>) - the type for the typed RowSetter\n  :return: (io.deephaven.tablelogger.RowSetter<T>) setter for the column.",
  "setFlags": "The implementation is likely to delegate to Row.setFlags(Flags) in a default Row instance.\n\n:param flags: io.deephaven.tablelogger.Row.Flags",
  "writeRow": "Writes out a new row (values set using setters).\n \n The implementation is likely to delegate to Row.writeRow() in a default Row instance."
 },
 "path": "io.deephaven.tablelogger.TableWriter",
 "text": "Interface for writing table data out.",
 "typeName": "interface"
}