{
 "className": "io.deephaven.web.shared.data.TableHandle",
 "methods": {
  "compareTo": ":param o: io.deephaven.web.shared.data.TableHandle\n:return: int",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "getClientId": ":return: int",
  "getConnectionId": ":return: int",
  "getServerId": ":return: int",
  "hashCode": ":return: int",
  "isDisconnected": ":return: boolean",
  "isReleased": ":return: boolean",
  "isResolved": ":return: boolean",
  "isUnresolved": ":return: boolean",
  "setClientId": ":param clientId: int",
  "setConnectionId": ":param connectionId: int",
  "setServerId": ":param serverId: int\n:return: boolean",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.web.shared.data.TableHandle",
 "text": "In order to track tables sanely, we will force the client to choose an id to be used for tables _before_ they are\n created, and then map server table handles back to those ids.\n\n While this forces the server to do a little bending over to figure out where a table is expected by the client before\n sending messages, this allows the client to cancel an in-flight request, before it finishes and the server id is\n known.\n\n Note that this object uses object identity semantics in its equals method; we only consider the clientId in\n hashCode/equals, so we can safely use these as map keys before the serverId is known.",
 "typeName": "class"
}