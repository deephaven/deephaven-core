{
 "className": "io.deephaven.web.shared.batch.BatchTableResponse",
 "methods": {
  "addSuccess": ":param newId: io.deephaven.web.shared.data.TableHandle",
  "getFailedTableHandles": ":return: io.deephaven.web.shared.data.TableHandle[]",
  "getFailure": ":param handle: io.deephaven.web.shared.data.TableHandle\n:return: java.lang.String",
  "getFailureMessages": ":return: java.lang.String[]",
  "getSuccess": ":return: io.deephaven.web.shared.data.TableHandle[]",
  "hasFailures": "*Overload 1*  \n  :param handle: io.deephaven.web.shared.data.TableHandle\n  :return: boolean\n  \n*Overload 2*  \n  :param table: io.deephaven.web.shared.fu.JsFunction<io.deephaven.web.shared.data.TableHandle,java.lang.Boolean>\n  :return: boolean",
  "setFailedTableHandles": ":param failedTableHandles: io.deephaven.web.shared.data.TableHandle[]",
  "setFailureMessages": ":param failureMessages: java.lang.String[]",
  "setSuccess": ":param success: io.deephaven.web.shared.data.TableHandle[]",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.web.shared.batch.BatchTableResponse",
 "text": "A response object for batch requests; only contains failure messages, since successful results will be pushed\n directly the client as they come in (rather than waiting until entire batch is complete).\n\n Seems like we could do Callback<Void, BatchFailures> instead...",
 "typeName": "class"
}