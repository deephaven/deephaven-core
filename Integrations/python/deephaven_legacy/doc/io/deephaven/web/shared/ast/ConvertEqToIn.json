{
 "className": "io.deephaven.web.shared.ast.ConvertEqToIn",
 "methods": {
  "execute": ":param descriptor: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor",
  "onEqual": ":param descriptor: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor",
  "onEqualIgnoreCase": ":param descriptor: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor",
  "onNotEqual": ":param descriptor: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor",
  "onNotEqualIgnoreCase": ":param descriptor: io.deephaven.web.shared.data.FilterDescriptor\n:return: io.deephaven.web.shared.data.FilterDescriptor"
 },
 "path": "io.deephaven.web.shared.ast.ConvertEqToIn",
 "text": "IN-type expressions are more efficient at runtime than EQUALS, and also compile more quickly. However, they only work\n when comparing a column reference to a literal value, so this transformation looks for those and replaces the EQ-type\n node with its corresponding IN-type node.\n\n This is sort of the opposite of ConvertInvalidInExpressions, which converts EQs to INs when the types of the\n children are not appropriate for use in a MatchFilter.\n\n Has no apparent pre-requisites.",
 "typeName": "class"
}