{
 "className": "io.deephaven.web.shared.data.TableSubscriptionRequest",
 "methods": {
  "getColumns": ":return: java.util.BitSet",
  "getRows": ":return: io.deephaven.web.shared.data.RangeSet",
  "getSubscriptionId": ":return: int",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.web.shared.data.TableSubscriptionRequest",
 "text": "A class to encapsulate updates to a given table's subscription.\n\n Because the server is now managing the creation of a \"tail table\" to only subscribe to updates after all filters have\n run, we are giving the server a bit more rights w.r.t. subscription state management.\n\n The client will now send an array of ViewportSubscription, each containing a subscriptionId (JsTable id) and a\n Viewport object.\n\n The server will be responsible for merging ranges and columns to create flattened tables with the desired viewports.\n\n For now, we'll likely preserve \"bunch them all together\" semantics, but we should do performance testing to identify\n if we'll get better performance from having multiple tables of smaller viewport scope (more messages on the wire, but\n less work to do before sending messages).\n\n The columns must be non-null (and almost always non-empty), but rows may be null to indicate a\n non-viewport subscription.",
 "typeName": "class"
}