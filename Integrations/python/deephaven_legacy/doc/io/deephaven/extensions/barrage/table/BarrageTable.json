{
 "className": "io.deephaven.extensions.barrage.table.BarrageTable",
 "methods": {
  "getAttribute": "Get the value of the specified attribute.\n\n:param key: (java.lang.String) - the name of the attribute\n:return: (java.lang.Object) the value, or null if there was none.",
  "getServerColumns": ":return: java.util.BitSet",
  "getServerReverseViewport": ":return: boolean",
  "getServerViewport": ":return: io.deephaven.engine.rowset.RowSet",
  "getWireChunkTypes": ":return: io.deephaven.chunk.ChunkType[]",
  "getWireComponentTypes": ":return: java.lang.Class<?>[]",
  "getWireTypes": ":return: java.lang.Class<?>[]",
  "handleBarrageError": ":param t: java.lang.Throwable",
  "handleBarrageMessage": ":param update: io.deephaven.engine.table.impl.util.BarrageMessage",
  "make": "Set up a replicated table from the given proxy, id and columns. This is intended for internal use only.\n\n*Overload 1*  \n  :param tableDefinition: (io.deephaven.engine.table.TableDefinition) - the table definition\n  :param isViewPort: (boolean) - true if the table will be a viewport.\n  :return: (io.deephaven.extensions.barrage.table.BarrageTable) a properly initialized BarrageTable\n  \n*Overload 2*  \n  :param registrar: io.deephaven.engine.updategraph.UpdateSourceRegistrar\n  :param queue: io.deephaven.engine.updategraph.NotificationQueue\n  :param tableDefinition: io.deephaven.engine.table.TableDefinition\n  :param isViewPort: boolean\n  :return: io.deephaven.extensions.barrage.table.BarrageTable",
  "sealTable": "Invoke sealTable to prevent further updates from being processed and to mark this source table as static.\n\n:param onSealRunnable: (java.lang.Runnable) - pass a callback that gets invoked once the table has finished applying updates\n:param onSealFailure: (java.lang.Runnable) - pass a callback that gets invoked if the table fails to finish applying updates"
 },
 "path": "io.deephaven.extensions.barrage.table.BarrageTable",
 "text": "A client side Table that mirrors an upstream/server side Table.\n\n Note that viewports are defined in row positions of the upstream table.",
 "typeName": "class"
}