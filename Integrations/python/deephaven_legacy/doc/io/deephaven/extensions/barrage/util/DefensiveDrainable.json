{
 "className": "io.deephaven.extensions.barrage.util.DefensiveDrainable",
 "methods": {
  "available": "A defensive drainable needs to override available. As opposed to the generic InputStream, this method\n must return the exact amount available.\n\n:return: (int) the exact amount available",
  "capture": "Captures this drainable as a real InputStream.\n\n:return: (java.io.InputStream) a real input stream",
  "read": "*Overload 1*  \n  :param b: byte[]\n  :return: int\n  \n*Overload 2*  \n  :param b: byte[]\n  :param off: int\n  :param len: int\n  :return: int\n  \n*Overload 3*  \n  :return: int",
  "skip": ":param n: long\n:return: long"
 },
 "path": "io.deephaven.extensions.barrage.util.DefensiveDrainable",
 "text": "A defensive Drainable implementation that supports the non-read methods of InputStream. Callers\n should use Drainable.drainTo(OutputStream) when applicable. If handing off to external code that needs a real\n InputStream, use capture().",
 "typeName": "class"
}