{
 "className": "io.deephaven.jpy.JpyConfig",
 "methods": {
  "asSource": ":return: io.deephaven.jpy.JpyConfigSource",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "getExtraPaths": ":return: java.util.List<java.nio.file.Path>",
  "getFlags": ":return: java.util.EnumSet<io.deephaven.jpy.JpyConfig.Flag>",
  "getJdlLib": ":return: java.util.Optional<java.nio.file.Path>",
  "getJpyLib": ":return: java.util.Optional<java.nio.file.Path>",
  "getProgramName": ":return: java.util.Optional<java.nio.file.Path>",
  "getPythonHome": ":return: java.util.Optional<java.nio.file.Path>",
  "getPythonLib": ":return: java.util.Optional<java.nio.file.Path>",
  "hashCode": ":return: int",
  "isEmpty": ":return: boolean"
 },
 "path": "io.deephaven.jpy.JpyConfig",
 "text": "This class encapsulates the configuration data and invocation of {/@link PyLibInitializer#initPyLib(String, String,\n String)}, {/@link PyLib#setProgramName(String)}, {/@link PyLib#setPythonHome(String)}, and {/@link\n PyLib#startPython(int, String...)}.\n\n \n Note:\n \n We *don't* want JpyConfig to have an explicit dependency on jpy anymore - that way we can still configure jpy without\n having the unnecessary dependency. For example, the bootstrap kernel needs to be able to configure jpy, but it should\n not depend on jpy. It's still useful at this time to have fake @links to it though, as it gives useful context for\n developers. In a better world, the jpy project itself would be better configure-able (ie, not static), and this type\n of external configuration class wouldn't be necessary.",
 "typeName": "class"
}