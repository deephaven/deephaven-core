{
 "className": "io.deephaven.integrations.common.PrimitiveArrayConversionUtility",
 "methods": {
  "translateArrayBooleanToByte": "Translates a java.lang.Boolean array to a byte array. The mapping will be performed according to\n BooleanUtils.booleanAsByte(Boolean). This is the (psuedo)inverse of `translateArrayByteToBoolean`.\n\n:param array: (java.lang.Boolean[]) - - the Boolean array\n:return: (byte[]) the byte array",
  "translateArrayByteToBoolean": "Translates a byte array to a Boolean array. The mapping will be performed according to\n BooleanUtils.byteAsBoolean(byte). This is the (psuedo)inverse of `translateArrayBooleanToByte`.\n\n:param array: (byte[]) - - the byte array\n:return: (java.lang.Boolean[]) the Boolean array",
  "translateArrayDateTimeToLong": "Translates a DateTime array to a long array. The mapping will be performed according to\n DateTimeUtils.nanos(DateTime). This is the (psuedo)inverse of `translateArrayLongToDateTime`.\n\n:param array: (io.deephaven.time.DateTime[]) - - the DateTime array\n:return: (long[]) the corresponding long array",
  "translateArrayLongToDateTime": "Translates a long array to a DateTime array. The mapping will be performed according to\n DateTimeUtils.nanosToTime(long). This is the (psuedo)inverse of `translateArrayLongToDateTime`.\n\n:param array: (long[]) - - the long array\n:return: (io.deephaven.time.DateTime[]) the corresponding DateTime array"
 },
 "path": "io.deephaven.integrations.common.PrimitiveArrayConversionUtility",
 "text": "General purpose helper methods for array conversion methods from specific object types to/from primitive types. This\n is specifically intended to improve performance in integration with Python, where conversion of primitive type arrays\n involves direct copy of a memory buffer, and is much more performant than element-by-element inspection.",
 "typeName": "class"
}