{
 "className": "io.deephaven.parquet.base.PlainFixedLenChunkedWriter",
 "methods": {
  "getAllocatedSize": ":return: long",
  "getBufferedSize": ":return: long",
  "getByteBufferView": ":return: java.nio.ByteBuffer",
  "getBytes": ":return: org.apache.parquet.bytes.BytesInput",
  "getEncoding": ":return: org.apache.parquet.column.Encoding",
  "memUsageString": ":param prefix: java.lang.String\n:return: java.lang.String",
  "writeBulk": ":param bulkValues: java.nio.ByteBuffer\n:param rowCount: int",
  "writeBulkFilterNulls": "*Overload 1*  \n  :param bulkValues: java.nio.ByteBuffer\n  :param nullValue: org.apache.parquet.io.api.Binary\n  :param dlEncoder: org.apache.parquet.column.values.rle.RunLengthBitPackingHybridEncoder\n  :param rowCount: int\n  :return: io.deephaven.parquet.base.BulkWriter.WriteResult\n  \n*Overload 2*  \n  :param bulkValues: java.nio.ByteBuffer\n  :param nullValue: org.apache.parquet.io.api.Binary\n  :param rowCount: int\n  :return: io.deephaven.parquet.base.BulkWriter.WriteResult",
  "writeBytes": ":param v: org.apache.parquet.io.api.Binary"
 },
 "path": "io.deephaven.parquet.base.PlainFixedLenChunkedWriter",
 "text": "Plain encoding except for booleans",
 "typeName": "class"
}