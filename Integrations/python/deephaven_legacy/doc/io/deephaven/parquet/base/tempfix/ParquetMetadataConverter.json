{
 "className": "io.deephaven.parquet.base.tempfix.ParquetMetadataConverter",
 "methods": {
  "convertEncodingStats": "*Overload 1*  \n  :param stats: java.util.List<org.apache.parquet.format.PageEncodingStats>\n  :return: org.apache.parquet.column.EncodingStats\n  \n*Overload 2*  \n  :param stats: org.apache.parquet.column.EncodingStats\n  :return: java.util.List<org.apache.parquet.format.PageEncodingStats>",
  "fromParquetColumnIndex": ":param type: org.apache.parquet.schema.PrimitiveType\n:param parquetColumnIndex: org.apache.parquet.format.ColumnIndex\n:return: org.apache.parquet.internal.column.columnindex.ColumnIndex",
  "fromParquetMetadata": ":param parquetMetadata: org.apache.parquet.format.FileMetaData\n:return: org.apache.parquet.hadoop.metadata.ParquetMetadata",
  "fromParquetOffsetIndex": ":param parquetOffsetIndex: org.apache.parquet.format.OffsetIndex\n:return: org.apache.parquet.internal.column.columnindex.OffsetIndex",
  "fromParquetStatistics": "*Overload 1*  \n  :param statistics: (org.apache.parquet.format.Statistics) - parquet format statistics\n  :param type: (org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName) - a primitive type name\n  :return: (org.apache.parquet.column.statistics.Statistics) the statistics\n  \n*Overload 2*  \n  :param createdBy: (java.lang.String) - the created-by string from the file\n  :param statistics: (org.apache.parquet.format.Statistics) - parquet format statistics\n  :param type: (org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName) - a primitive type name\n  :return: (org.apache.parquet.column.statistics.Statistics) the statistics\n  \n*Overload 3*  \n  :param createdBy: java.lang.String\n  :param statistics: org.apache.parquet.format.Statistics\n  :param type: org.apache.parquet.schema.PrimitiveType\n  :return: org.apache.parquet.column.statistics.Statistics",
  "getEncoding": "*Overload 1*  \n  :param encoding: org.apache.parquet.format.Encoding\n  :return: org.apache.parquet.column.Encoding\n  \n*Overload 2*  \n  :param encoding: org.apache.parquet.column.Encoding\n  :return: org.apache.parquet.format.Encoding",
  "getPrimitive": ":param type: org.apache.parquet.format.Type\n:return: org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName",
  "offsets": ":param offsets: long...\n:return: io.deephaven.parquet.base.tempfix.ParquetMetadataConverter.MetadataFilter",
  "range": "[ startOffset, endOffset )\n\n:param startOffset: (long) - a start offset (inclusive)\n:param endOffset: (long) - an end offset (exclusive)\n:return: (io.deephaven.parquet.base.tempfix.ParquetMetadataConverter.MetadataFilter) a range filter from the offsets",
  "readParquetMetadata": "*Overload 1*  \n  :param from: java.io.InputStream\n  :return: org.apache.parquet.hadoop.metadata.ParquetMetadata\n  \n*Overload 2*  \n  :param from: java.io.InputStream\n  :param filter: io.deephaven.parquet.base.tempfix.ParquetMetadataConverter.MetadataFilter\n  :return: org.apache.parquet.hadoop.metadata.ParquetMetadata",
  "toParquetColumnIndex": ":param type: org.apache.parquet.schema.PrimitiveType\n:param columnIndex: org.apache.parquet.internal.column.columnindex.ColumnIndex\n:return: org.apache.parquet.format.ColumnIndex",
  "toParquetMetadata": ":param currentVersion: int\n:param parquetMetadata: org.apache.parquet.hadoop.metadata.ParquetMetadata\n:return: org.apache.parquet.format.FileMetaData",
  "toParquetOffsetIndex": ":param offsetIndex: org.apache.parquet.internal.column.columnindex.OffsetIndex\n:return: org.apache.parquet.format.OffsetIndex",
  "toParquetStatistics": ":param stats: org.apache.parquet.column.statistics.Statistics\n:return: org.apache.parquet.format.Statistics",
  "writeDataPageHeader": "*Overload 1*  \n  :param uncompressedSize: int\n  :param compressedSize: int\n  :param valueCount: int\n  :param rlEncoding: org.apache.parquet.column.Encoding\n  :param dlEncoding: org.apache.parquet.column.Encoding\n  :param valuesEncoding: org.apache.parquet.column.Encoding\n  :param to: java.io.OutputStream\n  \n*Overload 2*  \n  :param uncompressedSize: int\n  :param compressedSize: int\n  :param valueCount: int\n  :param statistics: org.apache.parquet.column.statistics.Statistics\n  :param rlEncoding: org.apache.parquet.column.Encoding\n  :param dlEncoding: org.apache.parquet.column.Encoding\n  :param valuesEncoding: org.apache.parquet.column.Encoding\n  :param to: java.io.OutputStream",
  "writeDataPageV1Header": ":param uncompressedSize: int\n:param compressedSize: int\n:param valueCount: int\n:param rlEncoding: org.apache.parquet.column.Encoding\n:param dlEncoding: org.apache.parquet.column.Encoding\n:param valuesEncoding: org.apache.parquet.column.Encoding\n:param to: java.io.OutputStream",
  "writeDataPageV2Header": "*Overload 1*  \n  :param uncompressedSize: int\n  :param compressedSize: int\n  :param valueCount: int\n  :param nullCount: int\n  :param rowCount: int\n  :param statistics: org.apache.parquet.column.statistics.Statistics\n  :param dataEncoding: org.apache.parquet.column.Encoding\n  :param rlByteLength: int\n  :param dlByteLength: int\n  :param to: java.io.OutputStream\n  \n*Overload 2*  \n  :param uncompressedSize: int\n  :param compressedSize: int\n  :param valueCount: int\n  :param nullCount: int\n  :param rowCount: int\n  :param dataEncoding: org.apache.parquet.column.Encoding\n  :param rlByteLength: int\n  :param dlByteLength: int\n  :param to: java.io.OutputStream",
  "writeDictionaryPageHeader": ":param uncompressedSize: int\n:param compressedSize: int\n:param valueCount: int\n:param valuesEncoding: org.apache.parquet.column.Encoding\n:param to: java.io.OutputStream"
 },
 "path": "io.deephaven.parquet.base.tempfix.ParquetMetadataConverter",
 "typeName": "class"
}