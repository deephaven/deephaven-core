{
 "className": "io.deephaven.parquet.table.ParquetTools",
 "methods": {
  "convertSchema": "Convert schema information from a ParquetMetadata into ColumnDefinitions.\n\n:param schema: (org.apache.parquet.schema.MessageType) - Parquet schema. DO NOT RELY ON ParquetMetadataConverter FOR THIS! USE\n        ParquetFileReader!\n:param keyValueMetadata: (java.util.Map<java.lang.String,java.lang.String>) - Parquet key-value metadata map\n:param readInstructionsIn: (io.deephaven.parquet.table.ParquetInstructions) - Input conversion ParquetInstructions\n:return: (io.deephaven.base.Pair<java.util.List<io.deephaven.engine.table.ColumnDefinition<?>>,io.deephaven.parquet.table.ParquetInstructions>) A Pair with ColumnDefinitions and adjusted ParquetInstructions",
  "deleteTable": "Deletes a table on disk.\n\n:param path: (java.io.File) - path to delete",
  "getParquetFileReader": "Make a ParquetFileReader for the supplied File.\n\n:param parquetFile: (java.io.File) - The File to read\n:return: (io.deephaven.parquet.base.ParquetFileReader) The new ParquetFileReader",
  "readParquetSchemaAndTable": ":param source: java.io.File\n:param readInstructionsIn: io.deephaven.parquet.table.ParquetInstructions\n:param instructionsOut: org.apache.commons.lang3.mutable.MutableObject<io.deephaven.parquet.table.ParquetInstructions>\n:return: io.deephaven.engine.table.Table",
  "readPartitionedTable": "Reads in a table from files discovered with locationKeyFinder using the provided table definition.\n\n:param locationKeyFinder: (io.deephaven.engine.table.impl.locations.impl.TableLocationKeyFinder<io.deephaven.parquet.table.location.ParquetTableLocationKey>) - The source of location keys to include\n:param readInstructions: (io.deephaven.parquet.table.ParquetInstructions) - Instructions for customizations while reading\n:param tableDefinition: (io.deephaven.engine.table.TableDefinition) - The table's definition\n:return: (io.deephaven.engine.table.Table) The table",
  "readPartitionedTableInferSchema": "Reads in a table from files discovered with locationKeyFinder using a definition built from the first\n location found, which must have non-null partition values for all partition keys.\n\n:param locationKeyFinder: (io.deephaven.engine.table.impl.locations.impl.TableLocationKeyFinder<io.deephaven.parquet.table.location.ParquetTableLocationKey>) - The source of location keys to include\n:param readInstructions: (io.deephaven.parquet.table.ParquetInstructions) - Instructions for customizations while reading\n:return: (io.deephaven.engine.table.Table) The table",
  "readPartitionedTableWithMetadata": "Reads in a table using metadata files found in the supplied directory.\n\n:param directory: (java.io.File) - The source of location keys to include\n:param readInstructions: (io.deephaven.parquet.table.ParquetInstructions) - Instructions for customizations while reading\n:return: (io.deephaven.engine.table.Table) The table",
  "readSingleFileTable": "Reads in a table from a single parquet file using the provided table definition.\n\n:param tableLocationKey: (io.deephaven.parquet.table.location.ParquetTableLocationKey) - The location keys to include\n:param readInstructions: (io.deephaven.parquet.table.ParquetInstructions) - Instructions for customizations while reading\n:param tableDefinition: (io.deephaven.engine.table.TableDefinition) - The table's definition\n:return: (io.deephaven.engine.table.Table) The table",
  "readTable": "Reads in a table from a single parquet, metadata file, or directory with recognized layout.\n\n*Overload 1*  \n  :param sourceFilePath: (java.lang.String) - The file or directory to examine\n  :return: (io.deephaven.engine.table.Table) table\n  \n*Overload 2*  \n  :param sourceFilePath: (java.lang.String) - The file or directory to examine\n  :param readInstructions: (io.deephaven.parquet.table.ParquetInstructions) - Instructions for customizations while reading\n  :return: (io.deephaven.engine.table.Table) table\n  \n*Overload 3*  \n  :param sourceFile: (java.io.File) - The file or directory to examine\n  :return: (io.deephaven.engine.table.Table) table\n  \n*Overload 4*  \n  :param sourceFile: (java.io.File) - The file or directory to examine\n  :param readInstructions: (io.deephaven.parquet.table.ParquetInstructions) - Instructions for customizations while reading\n  :return: (io.deephaven.engine.table.Table) table",
  "setDefaultCompressionCodecName": ":param compressionCodecName: java.lang.String",
  "writeParquetTables": "Writes tables to disk in parquet format to a supplied set of destinations. If you specify grouping columns, there\n must already be grouping information for those columns in the sources. This can be accomplished with\n .groupBy(<grouping columns>).ungroup() or .sort(<grouping column>).\n\n:param sources: (io.deephaven.engine.table.Table[]) - The tables to write\n:param tableDefinition: (io.deephaven.engine.table.TableDefinition) - The common schema for all the tables to write\n:param writeInstructions: (io.deephaven.parquet.table.ParquetInstructions) - Write instructions for customizations while writing\n:param destinations: (java.io.File[]) - The destinations paths. Any non existing directories in the paths provided are created. If\n        there is an error any intermediate directories previously created are removed; note this makes this method\n        unsafe for concurrent use\n:param groupingColumns: (java.lang.String[]) - List of columns the tables are grouped by (the write operation will store the grouping\n        info)",
  "writeTable": "Write a table to a file.\n\n*Overload 1*  \n  :param sourceTable: (io.deephaven.engine.table.Table) - source table\n  :param destPath: (java.lang.String) - destination file path; the file name should end in \".parquet\" extension If the path includes\n          non-existing directories they are created If there is an error any intermediate directories previously\n          created are removed; note this makes this method unsafe for concurrent use\n  \n*Overload 2*  \n  :param sourceTable: (io.deephaven.engine.table.Table) - source table\n  :param destFile: (java.io.File) - destination file; the file name should end in \".parquet\" extension If the path includes\n          non-existing directories they are created\n  \n*Overload 3*  \n  :param sourceTable: (io.deephaven.engine.table.Table) - source table\n  :param destFile: (java.io.File) - destination file; its path must end in \".parquet\". Any non existing directories in the path are\n          created If there is an error any intermediate directories previously created are removed; note this makes\n          this method unsafe for concurrent use\n  :param definition: (io.deephaven.engine.table.TableDefinition) - table definition to use (instead of the one implied by the table itself)\n  \n*Overload 4*  \n  :param sourceTable: (io.deephaven.engine.table.Table) - source table\n  :param destFile: (java.io.File) - destination file; its path must end in \".parquet\". Any non existing directories in the path are\n          created If there is an error any intermediate directories previously created are removed; note this makes\n          this method unsafe for concurrent use\n  :param writeInstructions: (io.deephaven.parquet.table.ParquetInstructions) - instructions for customizations while writing\n  \n*Overload 5*  \n  :param sourceTable: (io.deephaven.engine.table.Table) - source table\n  :param destPath: (java.lang.String) - destination path; it must end in \".parquet\". Any non existing directories in the path are created\n          If there is an error any intermediate directories previously created are removed; note this makes this\n          method unsafe for concurrent use\n  :param definition: (io.deephaven.engine.table.TableDefinition) - table definition to use (instead of the one implied by the table itself)\n  :param writeInstructions: (io.deephaven.parquet.table.ParquetInstructions) - instructions for customizations while writing\n  \n*Overload 6*  \n  :param sourceTable: (io.deephaven.engine.table.Table) - source table\n  :param destFile: (java.io.File) - destination file; its path must end in \".parquet\". Any non existing directories in the path are\n          created If there is an error any intermediate directories previously created are removed; note this makes\n          this method unsafe for concurrent use\n  :param definition: (io.deephaven.engine.table.TableDefinition) - table definition to use (instead of the one implied by the table itself)\n  :param writeInstructions: (io.deephaven.parquet.table.ParquetInstructions) - instructions for customizations while writing",
  "writeTables": "Write out tables to disk.\n\n:param sources: (io.deephaven.engine.table.Table[]) - source tables\n:param tableDefinition: (io.deephaven.engine.table.TableDefinition) - table definition\n:param destinations: (java.io.File[]) - destinations"
 },
 "path": "io.deephaven.parquet.table.ParquetTools",
 "text": "Tools for managing and manipulating tables on disk in parquet format.",
 "typeName": "class"
}