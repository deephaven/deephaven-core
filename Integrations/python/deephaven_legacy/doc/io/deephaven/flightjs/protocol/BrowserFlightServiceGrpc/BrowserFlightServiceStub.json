{
 "className": "io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc$BrowserFlightServiceStub",
 "methods": {
  "nextDoExchange": ":param request: org.apache.arrow.flight.impl.Flight.FlightData\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "nextDoPut": ":param request: org.apache.arrow.flight.impl.Flight.FlightData\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "nextHandshake": ":param request: org.apache.arrow.flight.impl.Flight.HandshakeRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.flightjs.protocol.BrowserFlight.BrowserNextResponse>",
  "openDoExchange": "Open a bidirectional data channel for a given descriptor. This\n allows clients to send and receive arbitrary Arrow data and\n application-specific metadata in a single logical stream. In\n contrast to DoGet/DoPut, this is more suited for clients\n offloading computation (rather than storage) to a Flight service.\n \n\n:param request: org.apache.arrow.flight.impl.Flight.FlightData\n:param responseObserver: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.FlightData>",
  "openDoPut": "Push a stream to the flight service associated with a particular\n flight stream. This allows a client of a flight service to upload a stream\n of data. Depending on the particular flight service, a client consumer\n could be allowed to upload a single stream per descriptor or an unlimited\n number. In the latter, the service might implement a 'seal' action that\n can be applied to a descriptor once all streams are uploaded.\n \n\n:param request: org.apache.arrow.flight.impl.Flight.FlightData\n:param responseObserver: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.PutResult>",
  "openHandshake": "Handshake between client and server. Depending on the server, the\n handshake may be required to determine the token that should be used for\n future operations. Both request and response are streams to allow multiple\n round-trips depending on auth mechanism.\n \n\n:param request: org.apache.arrow.flight.impl.Flight.HandshakeRequest\n:param responseObserver: io.grpc.stub.StreamObserver<org.apache.arrow.flight.impl.Flight.HandshakeResponse>"
 },
 "path": "io.deephaven.flightjs.protocol.BrowserFlightServiceGrpc.BrowserFlightServiceStub",
 "text": "A flight js service is a (non-proper) extension of arrow flight service\n that augments existing client-streaming (or bidirectional streaming) methods\n with a pair that can be used to simulate a client stream over unary requests.",
 "typeName": "class"
}