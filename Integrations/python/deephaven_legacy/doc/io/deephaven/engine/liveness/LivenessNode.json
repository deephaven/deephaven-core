{
 "className": "io.deephaven.engine.liveness.LivenessNode",
 "methods": {
  "tryUnmanage": "**Incompatible overloads text - text from the first overload:**\n\nFor each referent in referents, if this node is still live and manages referent one or more times, drop one such\n reference.\n\n*Overload 1*  \n  :param referent: (io.deephaven.engine.liveness.LivenessReferent) - The referent to drop\n  :return: (boolean) Whether this node was live and thus in fact tried to drop a reference\n  \n*Overload 2*  \n  :param referents: (java.util.stream.Stream<? extendsio.deephaven.engine.liveness.LivenessReferent>) - The referents to drop\n  :return: (boolean) Whether this node was live and thus in fact tried to drop a reference",
  "unmanage": "**Incompatible overloads text - text from the first overload:**\n\nFor each referent in referent, if this node manages referent one or more times, drop one such reference.\n This node must be live.\n\n*Overload 1*  \n  :param referent: (io.deephaven.engine.liveness.LivenessReferent) - The referent to drop\n  \n*Overload 2*  \n  :param referents: (java.util.stream.Stream<? extendsio.deephaven.engine.liveness.LivenessReferent>) - The referents to drop"
 },
 "path": "io.deephaven.engine.liveness.LivenessNode",
 "text": "A LivenessReferent that is also a LivenessManager, transitively enforcing liveness on its referents.",
 "typeName": "interface"
}