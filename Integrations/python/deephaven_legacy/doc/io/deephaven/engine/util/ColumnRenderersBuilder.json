{
 "className": "io.deephaven.engine.util.ColumnRenderersBuilder",
 "methods": {
  "applyToTable": "Helper method for validating, building, and applying column renderers to\n a Table.\n\n:param table: (io.deephaven.engine.table.Table) - The source Table\n:return: (io.deephaven.engine.table.Table) table.setColumnRenderers(buildDirective()), or table if isEmpty()",
  "buildDirective": "Builds the COLUMN_RENDERERS_ATTRIBUTE directive from the data in this ColumnRenderersBuilder.\n\n:return: (java.lang.String) a String representing the COLUMN_RENDERERS_ATTRIBUTE directive",
  "clear": "Clears all column renderers.\n\n:return: io.deephaven.engine.util.ColumnRenderersBuilder",
  "empty": ":return: io.deephaven.engine.util.ColumnRenderersBuilder",
  "fromDirective": "Creates a new ColumnRenderersBuilder from an existing COLUMN_RENDERERS_ATTRIBUTE directive.\n\n:param directive: (java.lang.String) - a valid COLUMN_RENDERERS_ATTRIBUTE directive\n:return: (io.deephaven.engine.util.ColumnRenderersBuilder) a ColumnRenderersBuilder represented by the directive",
  "get": "Gets a ColumnRenderersBuilder from the COLUMN_RENDERERS_ATTRIBUTE in a source Table.\n\n:param source: (io.deephaven.engine.table.Table) - the Table\n:return: (io.deephaven.engine.util.ColumnRenderersBuilder) the ColumnRenderersBuilder from the Table",
  "getColumnSet": "Returns a Set of column-names, which may be verified as valid prior to setting our directive as an attribute to\n the table\n\n:return: (java.util.Set<java.lang.String>) An iterable Set of column-names identified by this builder-instance",
  "getRenderClassForType": ":param type: io.deephaven.engine.util.ColumnRenderersBuilder.ColumnRendererType\n:return: java.lang.String",
  "getRenderClassName": "Gets the fully qualified class name for the renderer of a column.\n\n:param columnName: (java.lang.String) - the column name\n:return: (java.lang.String) the fully qualified class name of the renderer",
  "getRendererType": "Gets the column renderer type assigned to a given column name. Returns null if none is assigned.\n\n:param columnName: (java.lang.String) - the name of the column\n:return: (io.deephaven.engine.util.ColumnRenderersBuilder.ColumnRendererType) the renderer type, null if none is assigned",
  "isColumnRendererSet": "Indicates if a specific column has a renderer set in the builder.\n\n:param columnName: (java.lang.String) - the name of the column to check\n:return: (boolean) true if it is set, false otherwise",
  "isEmpty": "Identifies if this builder-instance contains any renderer-definitions. If not, then the calling method should not\n attempt to add our directive an an attribute to a table\n\n:return: (boolean) true if there are no renderers defined, else false",
  "removeRenderer": "Removes the renderer for a column of a given name.\n\n:param columnName: (java.lang.String) - the name of the column\n:return: io.deephaven.engine.util.ColumnRenderersBuilder",
  "setDefaultRenderClass": "Sets the default class name to use for the default render type.\n\n:param className: (java.lang.String) - the fully qualified class name of the column renderer\n:return: io.deephaven.engine.util.ColumnRenderersBuilder",
  "setRenderClass": "Sets the class name associated with a given render type.\n\n:param renderType: (io.deephaven.engine.util.ColumnRenderersBuilder.ColumnRendererType) - the render type to set\n:param className: (java.lang.String) - the fully qualified class name of the column renderer\n:return: io.deephaven.engine.util.ColumnRenderersBuilder",
  "setRenderer": "Sets a column renderer for a column of a given name.\n\n*Overload 1*  \n  :param columnName: java.lang.String\n  :param rendererName: java.lang.String\n  :return: io.deephaven.engine.util.ColumnRenderersBuilder\n  \n*Overload 2*  \n  :param columnName: (java.lang.String) - the name of the column\n  :param rendererType: (io.deephaven.engine.util.ColumnRenderersBuilder.ColumnRendererType) - the type of renderer\n  :return: io.deephaven.engine.util.ColumnRenderersBuilder\n  \n*Overload 3*  \n  :param columnName: java.lang.String\n  :param rendererClass: java.lang.Class<? extendsjavax.swing.table.TableCellRenderer>\n  :return: io.deephaven.engine.util.ColumnRenderersBuilder",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.engine.util.ColumnRenderersBuilder",
 "text": "Builds and parses the directive for Table.COLUMN_RENDERERS_ATTRIBUTE.",
 "typeName": "class"
}