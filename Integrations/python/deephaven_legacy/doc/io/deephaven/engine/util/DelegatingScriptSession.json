{
 "className": "io.deephaven.engine.util.DelegatingScriptSession",
 "methods": {
  "clearScriptPathLoader": "Removes the currently configured script path loader from this script.",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "evaluateScript": "Evaluates the script and manages liveness of objects that are exported to the user. This method should be called\n from the serial executor as it manipulates static state.\n\n*Overload 1*  \n  :param script: (java.lang.String) - the code to execute\n  :param scriptName: (java.lang.String) - an optional script name, which may be ignored by the implementation, or used improve error\n          messages or for other internal purposes\n  :return: (io.deephaven.engine.util.ScriptSession.Changes) the changes made to the exportable objects\n  \n*Overload 2*  \n  :param scriptPath: (java.nio.file.Path) - the path to the script to execute\n  :return: (io.deephaven.engine.util.ScriptSession.Changes) the changes made to the exportable objects",
  "getVariable": "**Incompatible overloads text - text from the first overload:**\n\nRetrieve a variable from the script session's bindings.\n \n Please use ScriptSession.getVariable(String, Object) if you expect the variable may not exist.\n\n*Overload 1*  \n  :param name: (java.lang.String) - the variable to retrieve\n  :return: (java.lang.Object) the variable\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: (java.lang.String) - the variable to retrieve\n  :param defaultValue: (T) - the value to use when no value is present in the session's scope\n  :return: (T) the value of the variable, or defaultValue if not present",
  "getVariableNames": "Retrieves all of the variable names present in the session's scope\n\n:return: (java.util.Set<java.lang.String>) an unmodifiable set of variable names",
  "getVariableProvider": "A VariableProvider instance, for services like autocomplete which may want a limited \"just the variables\"\n view of our session state.\n\n:return: (io.deephaven.engine.util.VariableProvider) a VariableProvider instance backed by the global/binding context of this script session.",
  "getVariables": "Retrieves all of the variables present in the session's scope (e.g., Groovy binding, Python globals()).\n\n:return: (java.util.Map<java.lang.String,java.lang.Object>) an unmodifiable map with variable names as the keys, and the Objects as the result",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.engine.liveness.LivenessReferent>) A new or cached reference to this referent",
  "hasVariableName": "Check if the scope has the given variable name\n\n:param name: (java.lang.String) - the variable name\n:return: (boolean) True iff the scope has the given variable name",
  "onApplicationInitializationBegin": "Called before Application initialization, should setup sourcing from the controller (as required).\n\n:param pathLoader: java.util.function.Supplier<io.deephaven.engine.util.scripts.ScriptPathLoader>\n:param scriptLoaderState: io.deephaven.engine.util.scripts.ScriptPathLoaderState",
  "onApplicationInitializationEnd": "Called after Application initialization.",
  "release": "Release ownership of this ReleasableLivenessManager, allowing any retained LivenessReferents to\n cleanup if they no longer have outstanding references.",
  "scriptType": ":return: (java.lang.String) a textual description of this script session's language for use in messages.",
  "setScriptPathLoader": "Sets the scriptPathLoader that is in use for this session.\n\n:param scriptPathLoader: (java.util.function.Supplier<io.deephaven.engine.util.scripts.ScriptPathLoader>) - a supplier of a script path loader\n:param caching: (boolean) - whether the source operation should cache results",
  "setUseOriginalScriptLoaderState": "Informs the session whether or not we should be using the original ScriptLoaderState for source commands.\n\n:param useOriginal: (boolean) - whether to use the script loader state at persistent query initialization\n:return: boolean",
  "setVariable": "Inserts a value into the script's scope.\n\n:param name: (java.lang.String) - the variable name to set\n:param value: (java.lang.Object) - the new value of the variable",
  "tryManage": "Attempt to add referent to this manager. Will succeed if referent is live and if this manager is\n not a LivenessReferent or is live.\n\n:param referent: (io.deephaven.engine.liveness.LivenessReferent) - The referent to add\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true. Otherwise, returns false rather\n than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise",
  "tryUnmanage": "**Incompatible overloads text - text from the first overload:**\n\nFor each referent in referents, if this node is still live and manages referent one or more times, drop one such\n reference.\n\n*Overload 1*  \n  :param referent: (io.deephaven.engine.liveness.LivenessReferent) - The referent to drop\n  :return: (boolean) Whether this node was live and thus in fact tried to drop a reference\n  \n*Overload 2*  \n  :param referents: (java.util.stream.Stream<? extendsio.deephaven.engine.liveness.LivenessReferent>) - The referents to drop\n  :return: (boolean) Whether this node was live and thus in fact tried to drop a reference"
 },
 "path": "io.deephaven.engine.util.DelegatingScriptSession",
 "text": "The delegating script session delegates all calls to another script session. When evaluating a script it massages the\n Changes to the QueryScope so that any modifications that are being seen for the first time by the api-client come\n across as new entries and not as modified entries.",
 "typeName": "class"
}