{
 "className": "io.deephaven.engine.util.ScriptSession",
 "methods": {
  "clearScriptPathLoader": "Removes the currently configured script path loader from this script.",
  "evaluateScript": "Evaluates the script and manages liveness of objects that are exported to the user. This method should be called\n from the serial executor as it manipulates static state.\n\n*Overload 1*  \n  :param script: (java.lang.String) - the code to execute\n  :return: (io.deephaven.engine.util.ScriptSession.Changes) the changes made to the exportable objects\n  \n*Overload 2*  \n  :param script: (java.lang.String) - the code to execute\n  :param scriptName: (java.lang.String) - an optional script name, which may be ignored by the implementation, or used improve error\n          messages or for other internal purposes\n  :return: (io.deephaven.engine.util.ScriptSession.Changes) the changes made to the exportable objects\n  \n*Overload 3*  \n  :param scriptPath: (java.nio.file.Path) - the path to the script to execute\n  :return: (io.deephaven.engine.util.ScriptSession.Changes) the changes made to the exportable objects",
  "getVariable": "**Incompatible overloads text - text from the first overload:**\n\nRetrieve a variable from the script session's bindings.\n \n Please use getVariable(String, Object) if you expect the variable may not exist.\n\n*Overload 1*  \n  :param name: (java.lang.String) - the variable to retrieve\n  :return: (java.lang.Object) the variable\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: (java.lang.String) - the variable to retrieve\n  :param defaultValue: (T) - the value to use when no value is present in the session's scope\n  :return: (T) the value of the variable, or defaultValue if not present",
  "getVariableNames": "Retrieves all of the variable names present in the session's scope\n\n:return: (java.util.Set<java.lang.String>) an unmodifiable set of variable names",
  "getVariableProvider": "A VariableProvider instance, for services like autocomplete which may want a limited \"just the variables\"\n view of our session state.\n\n:return: (io.deephaven.engine.util.VariableProvider) a VariableProvider instance backed by the global/binding context of this script session.",
  "getVariables": "Retrieves all of the variables present in the session's scope (e.g., Groovy binding, Python globals()).\n\n:return: (java.util.Map<java.lang.String,java.lang.Object>) an unmodifiable map with variable names as the keys, and the Objects as the result",
  "hasVariableName": "Check if the scope has the given variable name\n\n:param name: (java.lang.String) - the variable name\n:return: (boolean) True iff the scope has the given variable name",
  "onApplicationInitializationBegin": "Called before Application initialization, should setup sourcing from the controller (as required).\n\n:param pathLoader: java.util.function.Supplier<io.deephaven.engine.util.scripts.ScriptPathLoader>\n:param scriptLoaderState: io.deephaven.engine.util.scripts.ScriptPathLoaderState",
  "onApplicationInitializationEnd": "Called after Application initialization.",
  "sanitizeThrowable": "If this script session can throw unserializable exceptions, this method is responsible for turning those\n exceptions into something suitable for sending back to a client.\n\n:param e: (java.lang.Throwable) - the exception to (possibly) sanitize\n:return: (java.lang.Throwable) the sanitized exception",
  "scriptType": ":return: (java.lang.String) a textual description of this script session's language for use in messages.",
  "setScriptPathLoader": "Sets the scriptPathLoader that is in use for this session.\n\n:param scriptPathLoader: (java.util.function.Supplier<io.deephaven.engine.util.scripts.ScriptPathLoader>) - a supplier of a script path loader\n:param caching: (boolean) - whether the source operation should cache results",
  "setUseOriginalScriptLoaderState": "Informs the session whether or not we should be using the original ScriptLoaderState for source commands.\n\n:param useOriginal: (boolean) - whether to use the script loader state at persistent query initialization\n:return: boolean",
  "setVariable": "Inserts a value into the script's scope.\n\n:param name: (java.lang.String) - the variable name to set\n:param value: (java.lang.Object) - the new value of the variable",
  "snapshot": "**Incompatible overloads text - text from the first overload:**\n\nTracks changes in the script session bindings until the SnapshotScope is closed.\n\n*Overload 1*  \n  :return: (io.deephaven.engine.util.ScriptSession.SnapshotScope) a new SnapshotScope, so that the caller can control when to stop tracking changes to bindings.\n  \n*Overload 2*  \n  :param previousIfPresent: (io.deephaven.engine.util.ScriptSession.SnapshotScope) - if non-null, will be closed atomically with the new scope being opened.\n  :return: (io.deephaven.engine.util.ScriptSession.SnapshotScope) a new SnapshotScope, so that the caller can control when to stop tracking changes to bindings.",
  "unwrapObject": "Asks the session to remove any wrapping that exists on scoped objects so that clients can fetch them. Defaults to\n returning the object itself.\n\n:param object: (java.lang.Object) - the scoped object\n:return: (java.lang.Object) an obj which can be consumed by a client"
 },
 "path": "io.deephaven.engine.util.ScriptSession",
 "text": "Interface for interactive console script sessions.",
 "typeName": "interface"
}