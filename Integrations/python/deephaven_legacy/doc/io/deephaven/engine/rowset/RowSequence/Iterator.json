{
 "className": "io.deephaven.engine.rowset.RowSequence$Iterator",
 "methods": {
  "advance": "Advance this iterator's position to nextKey, or to the first present row key greater than\n nextKey if nextKey is not found. If nextKey is less than or equal to the row key at\n this iterator's current position, this method is a no-op.\n \n Subsequent calls to peekNextKey(), getNextRowSequenceThrough(long), or\n getNextRowSequenceWithLength(long) will begin with the row key advanced to.\n\n:param nextKey: (long) - The row key to advance to\n:return: (boolean) true If there are any row keys remaining to be iterated after the advance, false if this\n         RowSequence.Iterator is exhausted",
  "advanceAndGetPositionDistance": "Advance this iterator's position as in advance(long), returning the number of row keys thus\n consumed.\n\n:param nextKey: (long) - The row key to advance to\n:return: (long) The number of row keys consumed from the iterator",
  "close": "Free any resources associated with this iterator.\n \n Callers of RowSequence.getRowSequenceIterator() are responsible for ensuring that close() is\n called when they are done with resulting RowSequence.Iterator.\n \n Using any RowSequence.Iterator methods after close() is an error and may produce exceptions or undefined\n results.",
  "getNextRowSequenceThrough": "Get a RowSequence from the row key at the position of this iterator up to the maximum row key\n (inclusive). Advances the position of this iterator by the size of the result. If the maximum row key\n provided is smaller than the next row key (as would be returned by peekNextKey()), the empty\n RowSequence is returned.\n\n The returned RowSequence object is only borrowed by the caller from the RowSequence.Iterator, who owns it. It is\n guaranteed to be valid and not change only until a later call to another getNext* method. As the\n returned reference is owned by the RowSequence.Iterator, the caller should not call close() on it.\n\n:param maxKeyInclusive: (long) - The maximum row key to include.\n:return: (io.deephaven.engine.rowset.RowSequence) An RowSequence from the row key at the initial position up to the maximum row key\n         (inclusive).",
  "getNextRowSequenceWithLength": "Get a RowSequence from the row key at the position of this iterator up to the desired number of row\n keys. Advances the position of this iterator by the size of the result.\n\n The returned RowSequence object is only borrowed by the caller from the RowSequence.Iterator, who owns it. It is\n guaranteed to be valid and not change only until the next call to another getNext* method. As the\n returned reference is owned by the RowSequence.Iterator, the caller should not call close() on it.\n\n:param numberOfKeys: (long) - The desired number of row keys\n:return: (io.deephaven.engine.rowset.RowSequence) An RowSequence from the row key at the initial position up to the desired number of row keys",
  "getRelativePosition": "Taking the difference between values returned by this method at different positions in the iterator gives you\n the cardinality of the set of row keys between them, exclusive. Note a single value itself is not meaningful;\n like measuring elapsed time, it only makes sense to take the difference from absolute points.\n\n:return: (long) A relative position offset from some arbitrary initial point in the underlying row sequence.",
  "hasMore": "Poll whether there are more row keys available from this RowSequence.Iterator.\n\n:return: (boolean) True if there are more row keys available, else false",
  "peekNextKey": "Peek at the next row key that would be returned by getNextRowSequenceThrough(long) or\n getNextRowSequenceWithLength(long). Does not advance the position.\n\n:return: (long) The next row key that would be returned, or RowSequence.NULL_ROW_KEY if this\n         iterator is exhausted"
 },
 "path": "io.deephaven.engine.rowset.RowSequence.Iterator",
 "text": "Iterator for consuming an RowSequence by ordered subsets.",
 "typeName": "interface"
}