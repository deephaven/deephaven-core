{
 "className": "io.deephaven.engine.rowset.impl.rsp.container.RangeIterator",
 "methods": {
  "end": "End of the current range (exclusive).\n \n Calling end() without calling next() at least once results in undefined behavior.\n\n:return: (int) the end of the current range (exclusive).",
  "forEachRange": "Call accept on the provided AbortableRangeConsumer until it returns false or we run out of values.\n\n:param rc: (io.deephaven.engine.rowset.impl.rsp.container.AbortableRangeConsumer) - An AbortableRangeConsumer to feed ranges to.\n:return: (boolean) false if AbortableRangeConsumer returned false at any point, true otherwise.",
  "hasNext": "Checks if the iterator has more ranges. If hasNext() returns false, calling next thereafter results in undefined\n behavior.\n\n:return: (boolean) whether there is another range.",
  "next": "**Incompatible overloads text - text from the first overload:**\n\nAdvance the iterator to the next range. Only call after hasNext() has returned true.\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param buffer: (short[]) - a short array where consecutive pairs of (start, end-1) values will be stored.\n  :param offset: (int) - where in buffer to start storing range boundary values.\n  :param maxRanges: (int) - maximum number of ranges that can be written to buffer; buffer should have at least\n          space for 2*maxRanges shorts starting at offset.\n  :return: (int) how many ranges were written in buffer; this is two times the individual elements written.",
  "start": "Start of the current range.\n \n Calling start() without calling next() at least once results in undefined behavior.\n\n:return: (int) the start of the current range."
 },
 "path": "io.deephaven.engine.rowset.impl.rsp.container.RangeIterator",
 "typeName": "interface"
}