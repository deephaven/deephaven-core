{
 "className": "io.deephaven.engine.page.ChunkPage",
 "methods": {
  "getChunk": "Same as ChunkSource.getChunk(GetContext, RowSequence), except that you pass in the begin and last keys representing\n the begin and last (inclusive) keys of a single range rather than an RowSequence. Typically you want to\n call this only if you don't have an RowSequence, such as during an\n RowSequence.forAllRowKeyRanges(LongRangeConsumer) call. In this case, it allows you to avoid creating an\n intermediary RowSequence object.\n\n:param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n        the Context may be used to provide a Chunk data pool\n:param firstKey: (long) - The beginning key (inclusive) of the range to fetch in the chunk\n:param lastKey: (long) - The last key (inclusive) of the range to fetch in the chunk\n:return: io.deephaven.chunk.Chunk<? extends ChunkPage.ATTR>",
  "getChunkOffset": ":param row: long\n:return: (int) The offset into the chunk for this row.",
  "getChunkType": "Get the most suitable ChunkType for use with this ChunkSource.\n\n:return: (io.deephaven.chunk.ChunkType) The ChunkType",
  "lastRow": ":param row: (long) - Any row contained on this page.\n:return: (long) the last row of this page, located in the same way as row.",
  "maxRow": "The maxRow is the greatest possible row which may reference this ChunkSource. This method is used by\n PagingChunkSource.fillChunkAppend(FillContext, WritableChunk, RowSequence.Iterator) to determine which of its\n RowSequence are referencing this PagingChunkSource.\n \n\n The default implementation assumes that only one PagingChunkSource exits for each page reference. That\n is, there is only one PagingChunkSource for OrderedKeys with the same bits outside of\n PagingChunkSource.mask().\n \n\n It is also possible to pack multiple, non-overlapping PagingChunkSources into the same page reference. In\n this case, one typically will want to override maxRow. An example such implementation is\n ChunkPage.\n\n:param row: (long) - Any row contained on this page.\n:return: (long) the maximum last row of this page, located in the same way as row."
 },
 "path": "io.deephaven.engine.page.ChunkPage",
 "typeName": "interface"
}