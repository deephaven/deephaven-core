{
 "className": "io.deephaven.engine.table.impl.util.PerformanceQueries",
 "methods": {
  "approxRatio": ":param v0: long\n:param v1: long\n:return: float",
  "processInfo": "Gets the information for a process.\n\n:param processInfoId: (java.lang.String) - id\n:param type: (java.lang.String) - type\n:param key: (java.lang.String) - key\n:return: (java.lang.String) process information",
  "queryOperationPerformance": "Takes in a query evaluation number and returns a view for that query's individual operations's performance data.\n \n\n You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the\n QueryPerformance and QueryOperationPerformance tables, calling\n TableLoggers.queryPerformanceLog() or TableLoggers.queryOperationPerformanceLog().\n \n\n The query operation performance result contains data on how long each individual operation of a query (where(),\n update(), naturalJoin(), etc., as well as internal functions) takes to execute, and the change in resource\n consumption while each was executing.\n \n\n:param evaluationNumber: (long) - evaluation number\n:return: (io.deephaven.engine.table.Table) query operation performance table.",
  "queryPerformance": "Takes in a query evaluation number and returns a view for that query's performance data.\n \n\n You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the\n QueryPerformance and QueryOperationPerformance tables, calling\n TableLoggers.queryPerformanceLog() or TableLoggers.queryOperationPerformanceLog().\n \n\n The query performance log contains data on how long each query takes to run. Examples of what constitutes one\n individual query, for performance logging purposes, include:\n \n* A new command in the console (i.e. type something, then press the return key)\n* A sort, filter, or custom column generated by a UI\n* A call from a client API external application\n\n\n\n:param evaluationNumber: (long) - evaluation number\n:return: (io.deephaven.engine.table.Table) query performance table.",
  "queryUpdatePerformance": "Takes in a query evaluation number and returns a view for that query's update performance data.\n \n\n You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the\n QueryPerformance and QueryOperationPerformance tables, calling\n TableLoggers.queryPerformanceLog() or TableLoggers.queryOperationPerformanceLog().\n \n\n:param evaluationNumber: (long) - evaluation number\n:return: (io.deephaven.engine.table.Table) query update performance table.",
  "queryUpdatePerformanceMap": "Creates multiple tables with performance data for a given query identified by an evaluation number. The tables\n are returned in a map with the following String keys:\n \n\n* QueryUpdatePerformance (QUP) The table created by the method of the same name in this class\n* UpdateWorst Same table as above but sorted as to show slower updates (column Ratio)\n first\n* WorstInterval Show only operations in the slowest update interval in QUP\n* UpdateMostRecent Show only operations in the last update interval in QUP\n* UpdateAggregate Summary if update performance data per update interval\n* UpdateSummaryStats Percentiles and maximum for Ratio and QueryMemUsed columns per\n update interval\n\n\n You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the\n QueryPerformance and QueryOperationPerformance tables, calling\n TableLoggers.queryPerformanceLog() or TableLoggers.queryOperationPerformanceLog().\n \n\n:param evaluationNumber: (long) - evaluation number\n:return: (java.util.Map<java.lang.String,io.deephaven.engine.table.Table>) map of query update performance tables.",
  "serverState": "A user friendly view with basic memory, UGP and GC stats samples for the current engine process, collected on a\n periodic basis.\n\n:return: (io.deephaven.engine.table.Table) a view on ProcessMemoryLog."
 },
 "path": "io.deephaven.engine.table.impl.util.PerformanceQueries",
 "typeName": "class"
}