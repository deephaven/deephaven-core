{
 "className": "io.deephaven.engine.table.impl.asofjoin.StaticHashedAsOfJoinStateManager",
 "methods": {
  "buildFromLeftSide": ":param leftRowSet: io.deephaven.engine.rowset.RowSequence\n:param leftSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param addedSlots: io.deephaven.engine.table.impl.sources.LongArraySource\n:return: int",
  "buildFromRightSide": ":param rightRowSet: io.deephaven.engine.rowset.RowSequence\n:param rightSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param addedSlots: io.deephaven.engine.table.impl.sources.LongArraySource\n:return: int",
  "convertRightBuildersToIndex": ":param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param slotCount: int",
  "convertRightGrouping": ":param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param slotCount: int\n:param rowSetSource: io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.RowSet>",
  "getLeftIndex": ":param slot: long\n:return: io.deephaven.engine.rowset.RowSet",
  "getOverflowSize": ":return: int",
  "getRightIndex": ":param slot: long\n:return: io.deephaven.engine.rowset.RowSet",
  "getTableSize": ":return: int",
  "probeLeft": "*Overload 1*  \n  :param leftRowSet: io.deephaven.engine.rowset.RowSequence\n  :param leftSources: io.deephaven.engine.table.ColumnSource<?>[]\n  \n*Overload 2*  \n  :param leftRowSet: io.deephaven.engine.rowset.RowSequence\n  :param leftSources: io.deephaven.engine.table.ColumnSource<?>[]\n  :param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n  :param foundBuilder: io.deephaven.engine.rowset.RowSetBuilderRandom\n  :return: int",
  "probeRight": ":param rightRowSet: io.deephaven.engine.rowset.RowSequence\n:param rightSources: io.deephaven.engine.table.ColumnSource<?>[]"
 },
 "path": "io.deephaven.engine.table.impl.asofjoin.StaticHashedAsOfJoinStateManager",
 "typeName": "class"
}