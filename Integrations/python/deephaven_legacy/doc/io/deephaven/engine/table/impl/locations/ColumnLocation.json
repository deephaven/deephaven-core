{
 "className": "io.deephaven.engine.table.impl.locations.ColumnLocation",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "exists": "Check for existence of this ColumnLocation.\n\n:return: (boolean) True iff the ColumnLocation actually exists",
  "getMetadata": "Get the metadata object stored with this column, or null if no such data exists.\n \n This is typically a value to range map (grouping metadata). The value to range map, if non-null, is a map from\n unique (boxed) column values for this location to the associated ranges in which they occur. Ranges are either\n 2-element int[]s, or 2-element long[]s.\n\nNote: Java generics information - <METADATA_TYPE>\n\n:param columnDefinition: io.deephaven.engine.table.ColumnDefinition<?>\n:return: (METADATA_TYPE) The metadata stored with this column, or null if no such data exists",
  "getName": "Get the column name for this ColumnLocation.\n\n:return: (java.lang.String) the column name for this ColumnLocation",
  "getStringRepresentation": ":return: java.lang.String",
  "getTableLocation": "Get the TableLocation enclosing this ColumnLocation.\n\n:return: (io.deephaven.engine.table.impl.locations.TableLocation) the TableLocation enclosing this ColumnLocation",
  "makeColumnRegionByte": ":param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionByte<io.deephaven.chunk.attributes.Values>) A ColumnRegionByte for reading data from this ColumnLocation",
  "makeColumnRegionChar": ":param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionChar<io.deephaven.chunk.attributes.Values>) A ColumnRegionChar for reading data from this ColumnLocation",
  "makeColumnRegionDouble": ":param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionDouble<io.deephaven.chunk.attributes.Values>) A ColumnRegionDouble for reading data from this ColumnLocation",
  "makeColumnRegionFloat": ":param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionFloat<io.deephaven.chunk.attributes.Values>) A ColumnRegionFloat for reading data from this ColumnLocation",
  "makeColumnRegionInt": ":param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionInt<io.deephaven.chunk.attributes.Values>) A ColumnRegionInt for reading data from this ColumnLocation",
  "makeColumnRegionLong": ":param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionLong<io.deephaven.chunk.attributes.Values>) A ColumnRegionLong for reading data from this ColumnLocation",
  "makeColumnRegionObject": "Note: Java generics information - <TYPE>\n\n:param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<TYPE>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionObject<TYPE,io.deephaven.chunk.attributes.Values>) A ColumnRegionObject for reading data from this ColumnLocation",
  "makeColumnRegionShort": ":param columnDefinition: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition used to lookup type information\n:return: (io.deephaven.engine.table.impl.sources.regioned.ColumnRegionShort<io.deephaven.chunk.attributes.Values>) A ColumnRegionShort for reading data from this ColumnLocation",
  "toStringHelper": ":return: java.lang.String"
 },
 "path": "io.deephaven.engine.table.impl.locations.ColumnLocation",
 "text": "Per-TableLocation, per-column key, state, and factory object.",
 "typeName": "interface"
}