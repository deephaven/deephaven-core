{
 "className": "io.deephaven.engine.table.impl.DefaultChunkSource$SupportsContiguousGet",
 "methods": {
  "getChunk": "**Incompatible overloads text - text from the first overload:**\n\nReturns a chunk of data corresponding to the keys from the given RowSequence.\n\n*Overload 1*  \n  :param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n          the Context may be used to provide a Chunk data pool\n  :param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched\n  :return: (io.deephaven.chunk.Chunk<? extends DefaultChunkSource.SupportsContiguousGet.ATTR>) A chunk of data corresponding to the keys from the given RowSequence\n  \n*Overload 2*  \n  :param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n          the Context may be used to provide a Chunk data pool\n  :param firstKey: (long) - The beginning key (inclusive) of the range to fetch in the chunk\n  :param lastKey: (long) - The last key (inclusive) of the range to fetch in the chunk\n  :return: io.deephaven.chunk.Chunk<? extends DefaultChunkSource.SupportsContiguousGet.ATTR>"
 },
 "path": "io.deephaven.engine.table.impl.DefaultChunkSource.SupportsContiguousGet",
 "text": "An alternative set of defaults which may typically be used by ChunkSources which support a get method\n which only works for contiguous ranges. They should just implement getChunk(GetContext, long, long).",
 "typeName": "interface"
}