{
 "className": "io.deephaven.engine.table.impl.ReverseLookupListener",
 "methods": {
  "addParentReference": "Called on a dependent node to ensure that a strong reference is maintained to any parent object that is required\n for the proper maintenance and functioning of the dependent.\n\n In the most common case, the parent object is a child listener to a parent node. The parent node only keeps a\n weak reference to its child listener, but the listener maintains a strong reference to the parent node. In this\n scenario, the only strong reference to the listener (and thus indirectly to the parent node itself) is the\n reference kept by the dependent node.\n\n:param parent: (java.lang.Object) - A parent of this node",
  "get": "Gets the row key value where key exists in the table, or the no-entry-value if it is not found in the table.\n\n:param key: (java.lang.Object) - a single object for a single column, or a SmartKey for\n        multiple columns\n:return: (long) the row key where key exists in the table",
  "getKeyColumns": ":return: (java.lang.String[]) the key columns this reverse lookup is indexed on",
  "getLastNotificationStep": "Get the last logical clock step on which this element dispatched a notification.\n\n:return: (long) The last notification step",
  "getNoEntryValue": "Returns the value that will be returned from ReverseLookup.get(java.lang.Object) or if no entry exists for a given key.\n\n:return: long",
  "getPrev": "Gets the row key value where key previously in the table, or the no-entry-value if it is not found in the table.\n\n:param key: (java.lang.Object) - a single object for a single column, or a SmartKey for\n        multiple columns\n:return: (long) the row key where key previously existed in the table",
  "isRefreshing": "Is the node updating?\n\n:return: (boolean) true if the node is updating; false otherwise.",
  "makeReverseLookupListenerWithLock": ":param source: io.deephaven.engine.table.Table\n:param columns: java.lang.String...\n:return: io.deephaven.engine.table.impl.ReverseLookupListener",
  "makeReverseLookupListenerWithSnapshot": ":param source: io.deephaven.engine.table.impl.BaseTable\n:param columns: java.lang.String...\n:return: io.deephaven.engine.table.impl.ReverseLookupListener",
  "makeSmartKey": "Make a SmartKey appropriate for values.\n\n:param values: (java.lang.Object...) - The values to include\n:return: (io.deephaven.datastructures.util.SmartKey) A canonicalized CanonicalizedSmartKey if all values are canonicalizable, else a new SmartKey",
  "prepareForTree": "Prepare the parameter table for use with tree table\n\n:param preTree: (io.deephaven.engine.table.impl.BaseTable) - The tree to prepare\n:param idColumn: (java.lang.String) - The column that will be used as the id for Table.treeTable(String, String)",
  "satisfied": "Is this ancestor satisfied? Note that this method must be safe to call on any thread.\n\n:param step: (long) - The step for which we are testing satisfaction\n:return: (boolean) Whether the dependency is satisfied on step (and will not fire subsequent notifications)",
  "setRefreshing": "Change the node's run mode.\n\n:param refreshing: (boolean) - true to cause the node to update; false otherwise.\n:return: (boolean) new refreshing state",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.engine.table.impl.ReverseLookupListener",
 "text": "Maintains a map from key column values to their row key.\n\n This allows you to quickly find a row based on a unique key on a ticking table, without the need for searching the\n entire table.\n\n Note: The key column values must be unique.",
 "typeName": "class"
}