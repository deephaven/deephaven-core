{
 "className": "io.deephaven.engine.table.impl.by.alternatingcolumnsource.AlternatingColumnSource",
 "methods": {
  "allowsReinterpret": "Test if a reinterpret call will succeed.\n\nNote: Java generics information - <ALTERNATE_DATA_TYPE>\n\n:param alternateDataType: (java.lang.Class<ALTERNATE_DATA_TYPE>) - The alternative type to consider\n:return: (boolean) If a reinterpret on this column source with the supplied alternateDataType will succeed.",
  "fillChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made about\n        the size of the chunk shall be made. The chunk will be populated from position [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "fillChunkUnordered": "Populates a contiguous portion of the given destination chunk with data corresponding to the keys from the given\n LongChunk.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param dest: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to keys\n:param keys: (io.deephaven.chunk.LongChunk<? extendsio.deephaven.engine.rowset.chunkattributes.RowKeys>) - A chunk of individual, not assumed to be ordered keys to be fetched",
  "fillPrevChunk": "Populates the given destination chunk with data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param destination: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to rowSequence. No assumptions shall be made\n        about the size of the chunk shall be made. The chunk will be populated from position\n        [0,rowSequence.size()).\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched",
  "fillPrevChunkUnordered": "Populates a contiguous portion of the given destination chunk with prev data corresponding to the keys from the\n given LongChunk.\n\n:param context: (io.deephaven.engine.table.ChunkSource.FillContext) - A context containing all mutable/state related data used in retrieving the Chunk.\n:param dest: (io.deephaven.chunk.WritableChunk<? superio.deephaven.chunk.attributes.Values>) - The chunk to be populated according to keys\n:param keys: (io.deephaven.chunk.LongChunk<? extendsio.deephaven.engine.rowset.chunkattributes.RowKeys>) - A chunk of individual, not assumed to be ordered keys to be fetched",
  "get": ":param rowKey: long\n:return: AlternatingColumnSource.DATA_TYPE",
  "getBoolean": ":param rowKey: long\n:return: java.lang.Boolean",
  "getByte": ":param rowKey: long\n:return: byte",
  "getChar": ":param rowKey: long\n:return: char",
  "getChunk": "Returns a chunk of data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In particular,\n        the Context may be used to provide a Chunk data pool\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched\n:return: (io.deephaven.chunk.Chunk<? extends io.deephaven.chunk.attributes.Values>) A chunk of data corresponding to the keys from the given RowSequence",
  "getDouble": ":param rowKey: long\n:return: double",
  "getFloat": ":param rowKey: long\n:return: float",
  "getInt": ":param rowKey: long\n:return: int",
  "getLong": ":param rowKey: long\n:return: long",
  "getPrev": ":param rowKey: long\n:return: AlternatingColumnSource.DATA_TYPE",
  "getPrevBoolean": ":param rowKey: long\n:return: java.lang.Boolean",
  "getPrevByte": ":param rowKey: long\n:return: byte",
  "getPrevChar": ":param rowKey: long\n:return: char",
  "getPrevChunk": "Returns a chunk of previous data corresponding to the keys from the given RowSequence.\n\n:param context: (io.deephaven.engine.table.ChunkSource.GetContext) - A context containing all mutable/state related data used in retrieving the Chunk. In\n        particular, the Context may be used to provide a Chunk data pool\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be fetched\n:return: (io.deephaven.chunk.Chunk<? extends io.deephaven.chunk.attributes.Values>) A chunk of data corresponding to the keys from the given RowSequence",
  "getPrevDouble": ":param rowKey: long\n:return: double",
  "getPrevFloat": ":param rowKey: long\n:return: float",
  "getPrevInt": ":param rowKey: long\n:return: int",
  "getPrevLong": ":param rowKey: long\n:return: long",
  "getPrevShort": ":param rowKey: long\n:return: short",
  "getShort": ":param rowKey: long\n:return: short",
  "innerLocation": ":param hashSlot: long\n:return: int",
  "isAlternate": ":param index: long\n:return: boolean",
  "isImmutable": "Determine if this column source is immutable, meaning that the values at a given row key never change.\n\n:return: (boolean) true if the values at a given row key of the column source never change, false otherwise",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.engine.table.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.table.ChunkSource.FillContext) A context for use with fill operations",
  "makeGetContext": "Allocate a new ChunkSource.GetContext for retrieving chunks from this GetContextMaker, typically\n a ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size required for any WritableChunk allocated as part of the result.\n:param sharedContext: (io.deephaven.engine.table.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.table.ChunkSource.GetContext) A context for use with get operations",
  "providesFillUnordered": "Returns true if this column source can efficiently provide an unordered fill.\n\n If this method returns false, then fillChunkUnordered and fillPrevChunkUnordered may throw an\n UnsupportedOperationException.\n\n:return: (boolean) if this column source can provide an unordered fill",
  "setSources": ":param mainSource: io.deephaven.engine.table.ColumnSource<AlternatingColumnSource.DATA_TYPE>\n:param alternateSource: io.deephaven.engine.table.ColumnSource<AlternatingColumnSource.DATA_TYPE>",
  "startTrackingPrevValues": "ColumnSource implementations that track previous values have the option to not actually start tracking previous\n values until this method is called. This is an option, not an obligation: some simple ColumnSource\n implementations (like TSingleValueSource for various T) always track previous values; other implementations (like\n PrevColumnSource) never do; some (like TArrayColumnSource) only start tracking once this method is called.\n\n An immutable column source can not have distinct prev values; therefore it is implemented as a no-op."
 },
 "path": "io.deephaven.engine.table.impl.by.alternatingcolumnsource.AlternatingColumnSource",
 "text": "ColumnSource implementation that delegates to the main and alternate sources for our incremental open\n addressed hash table key columns that swap back and forth between a \"main\" and \"alternate\" source. Note that the main\n and alternate swap back and forth, from the perspective of this column source the main source is addressed by zero;\n and the alternate source is addressed starting at ALTERNATE_SWITCH_MASK. Neither source may have addresses\n greater than ALTERNATE_INNER_MASK.",
 "typeName": "class"
}