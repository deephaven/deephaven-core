{
 "className": "io.deephaven.engine.table.impl.util.SyncTableFilter$Builder",
 "methods": {
  "addTable": "**Incompatible overloads text - text from the first overload:**\n\nAdd a table to the set of tables to be synchronized, using this builder's default ID and key column names.\n\n*Overload 1*  \n  :param name: (java.lang.String) - the key of the Table in our output map.\n  :param table: (io.deephaven.engine.table.Table) - the Table to add\n  :param idColumn: (java.lang.String) - the name of the ID column in the table, must be a long\n  :param keyColumns: (java.lang.String...) - the key columns, each key is coordinated independently of the other keys\n  :return: (io.deephaven.engine.table.impl.util.SyncTableFilter.Builder) this builder\n  \n*Overload 2*  \n  :param name: (java.lang.String) - the key of the Table in our output map.\n  :param table: (io.deephaven.engine.table.Table) - the Table to add\n  :return: (io.deephaven.engine.table.impl.util.SyncTableFilter.Builder) this builder",
  "build": "Instantiate the map of synchronized tables.\n\n This must be called under the UpdateGraphProcessor lock.\n\n:return: (java.util.Map<java.lang.String,io.deephaven.engine.table.Table>) a map with one entry for each input table",
  "defaultId": "Set the default ID column name.\n\n:param id: (java.lang.String) - the new default ID column name\n:return: (io.deephaven.engine.table.impl.util.SyncTableFilter.Builder) this builder",
  "defaultKeys": "Set the default key column name.\n\n:param keys: (java.lang.String...) - the new default key column names\n:return: (io.deephaven.engine.table.impl.util.SyncTableFilter.Builder) this builder"
 },
 "path": "io.deephaven.engine.table.impl.util.SyncTableFilter.Builder",
 "text": "Produce a map of synchronized tables, keyed by the name assigned to each input table.",
 "typeName": "class"
}