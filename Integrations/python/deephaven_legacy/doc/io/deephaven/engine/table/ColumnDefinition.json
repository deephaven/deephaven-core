{
 "className": "io.deephaven.engine.table.ColumnDefinition",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "clone": ":return: io.deephaven.engine.table.ColumnDefinition<ColumnDefinition.TYPE>",
  "copyValues": ":param x: io.deephaven.engine.table.ColumnDefinition<ColumnDefinition.TYPE>",
  "describeDifferences": "Enumerate the differences between this ColumnDefinition, and another one. Lines will be of the form \"lhs\n attribute 'value' does not match rhs attribute 'value'.\n\n:param differences: (java.util.List<java.lang.String>) - an array to which differences can be added\n:param other: (io.deephaven.engine.table.ColumnDefinition<?>) - the ColumnDefinition under comparison\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:param prefix: (java.lang.String) - begin each difference with this string\n:param includeColumnType: (boolean) - whether to include columnType comparisons",
  "describeForCompatibility": "Describes the column definition with respect to the fields that are checked in\n isCompatible(ColumnDefinition).\n\n:return: (java.lang.String) the description for compatibility",
  "equals": ":param other: java.lang.Object\n:return: boolean",
  "from": ":param header: io.deephaven.qst.column.header.ColumnHeader<?>\n:return: io.deephaven.engine.table.ColumnDefinition<?>",
  "fromGenericType": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :return: io.deephaven.engine.table.ColumnDefinition<T>\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :param componentType: java.lang.Class<?>\n  :return: io.deephaven.engine.table.ColumnDefinition<T>\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param dataType: java.lang.Class<T>\n  :param columnType: int\n  :param componentType: java.lang.Class<?>\n  :return: io.deephaven.engine.table.ColumnDefinition<T>",
  "getColumnType": ":return: int",
  "getComponentType": ":return: java.lang.Class<?>",
  "getDataType": ":return: java.lang.Class<ColumnDefinition.TYPE>",
  "getName": ":return: java.lang.String",
  "hashCode": ":return: int",
  "isCompatible": "Compares two ColumnDefinitions somewhat more permissively than equals, disregarding matters of storage and\n derivation. Checks for equality of name, dataType, and componentType. As such, this\n method has an equivalence relation, ie A.isCompatible(B) == B.isCompatible(A).\n\n:param other: (io.deephaven.engine.table.ColumnDefinition<?>) - - The ColumnDefinition to compare to.\n:return: (boolean) True if the ColumnDefinition defines a column whose data is compatible with this ColumnDefinition.",
  "isDirect": ":return: boolean",
  "isGrouping": ":return: boolean",
  "isPartitioning": ":return: boolean",
  "of": "*Overload 1*  \n  :param name: java.lang.String\n  :param type: io.deephaven.qst.type.Type<?>\n  :return: io.deephaven.engine.table.ColumnDefinition<?>\n  \n*Overload 2*  \n  :param name: java.lang.String\n  :param type: io.deephaven.qst.type.PrimitiveType<?>\n  :return: io.deephaven.engine.table.ColumnDefinition<?>\n  \n*Overload 3*  \n  :param name: java.lang.String\n  :param type: io.deephaven.qst.type.GenericType<?>\n  :return: io.deephaven.engine.table.ColumnDefinition<?>",
  "ofBoolean": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Boolean>",
  "ofByte": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Byte>",
  "ofChar": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Character>",
  "ofDouble": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Double>",
  "ofFloat": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Float>",
  "ofInt": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Integer>",
  "ofLong": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Long>",
  "ofShort": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.Short>",
  "ofString": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<java.lang.String>",
  "ofTime": ":param name: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<io.deephaven.time.DateTime>",
  "ofVector": "Note: Java generics information - <T extends io.deephaven.vector.Vector<?>>\n\n:param name: java.lang.String\n:param vectorType: java.lang.Class<T>\n:return: io.deephaven.engine.table.ColumnDefinition<T>",
  "readExternal": ":param in: java.io.ObjectInput",
  "rename": ":param newName: java.lang.String\n:return: io.deephaven.engine.table.ColumnDefinition<?>",
  "safeClone": ":return: io.deephaven.engine.table.ColumnDefinition<ColumnDefinition.TYPE>",
  "toString": ":return: java.lang.String",
  "withDataType": "Note: Java generics information - <Other>\n\n:param dataType: java.lang.Class<Other>\n:return: io.deephaven.engine.table.ColumnDefinition<Other>",
  "withGrouping": ":return: io.deephaven.engine.table.ColumnDefinition<ColumnDefinition.TYPE>",
  "withNormal": ":return: io.deephaven.engine.table.ColumnDefinition<ColumnDefinition.TYPE>",
  "withPartitioning": ":return: io.deephaven.engine.table.ColumnDefinition<ColumnDefinition.TYPE>",
  "writeExternal": ":param out: java.io.ObjectOutput"
 },
 "path": "io.deephaven.engine.table.ColumnDefinition",
 "text": "Column definition for all Deephaven columns.",
 "typeName": "class"
}