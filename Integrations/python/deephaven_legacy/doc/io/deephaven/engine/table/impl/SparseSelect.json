{
 "className": "io.deephaven.engine.table.impl.SparseSelect",
 "methods": {
  "partialSparseSelect": "Create a copy of the source table with the specified columns materialized.\n\n Other columns are passed through to the output without changes.\n\n*Overload 1*  \n  :param source: (io.deephaven.engine.table.Table) - the input table\n  :param columnNames: (java.util.Collection<java.lang.String>) - the columns to materialize in the output\n  :return: (io.deephaven.engine.table.Table) a copy of the source table with materialized columns\n  \n*Overload 2*  \n  :param source: (io.deephaven.engine.table.Table) - the input table\n  :param columnNames: (java.lang.String...) - the columns to materialize in the output\n  :return: (io.deephaven.engine.table.Table) a copy of the source table with materialized columns",
  "sparseSelect": "**Incompatible overloads text - text from the first overload:**\n\nCreate a new table with all columns materialized.\n\n*Overload 1*  \n  :param source: (io.deephaven.engine.table.Table) - the input table\n  :return: (io.deephaven.engine.table.Table) a copy of the source table with materialized column\n  \n*Overload 2*  \n  :param source: (io.deephaven.engine.table.Table) - the input table\n  :param columnNames: (java.lang.String...) - the columns to copy to the output\n  :return: (io.deephaven.engine.table.Table) a copy of the source table with materialized column\n  \n*Overload 3*  \n  :param source: (io.deephaven.engine.table.Table) - the input table\n  :param columnNames: (java.util.Collection<java.lang.String>) - the columns to copy to the output\n  :return: (io.deephaven.engine.table.Table) a copy of the source table with materialized column"
 },
 "path": "io.deephaven.engine.table.impl.SparseSelect",
 "text": "A simpler version of Table.select(java.util.Collection<? extends io.deephaven.api.Selectable>) that is guaranteed to preserve the original table's RowSet.\n\n \n Like select, the sparseSelected table's columns will be materialized in memory. Unlike select(), sparseSelect\n guarantees the original Table's RowSet is preserved. Formula columns are not supported, only the names of columns to\n copy into the output table. This means that each output column is independent of every other output column, which\n enables column-level parallelism.",
 "typeName": "class"
}