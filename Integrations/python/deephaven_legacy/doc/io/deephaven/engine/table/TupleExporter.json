{
 "className": "io.deephaven.engine.table.TupleExporter",
 "methods": {
  "exportElement": "**Incompatible overloads text - text from the first overload:**\n\nExport a single element from the tuple, identified by its element index, to an Object\n \n \n For the empty tuple, this is unsupported.\n \n For singles, this will copy the sole element, possibly in boxed form.\n \n For doubles and longer, this will copy the specified element without any unnecessary boxing.\n\n*Overload 1*  \n  Note: Java generics information - <ELEMENT_TYPE>\n  \n  :param tuple: (TupleExporter.TUPLE_TYPE) - The tuple to export an element from\n  :param elementIndex: (int) - The element index to export\n  :param writableSource: (io.deephaven.engine.table.WritableColumnSource<ELEMENT_TYPE>) - The destination\n  :param destinationIndexKey: (long) - The destination row key\n  \n*Overload 2*  \n  :param tuple: (TupleExporter.TUPLE_TYPE) - The tuple to export an element from\n  :param elementIndex: (int) - The element index to export\n  :return: java.lang.Object",
  "exportElementReinterpreted": "Export a single element from the tuple, identified by its element index, to an Object. If the tuple has been\n internally reinterpreted, return the reinterpreted value.\n\n \n For the empty tuple, this is unsupported.\n \n For singles, this will copy the sole element, possibly in boxed form.\n \n For doubles and longer, this will copy the specified element without any unnecessary boxing.\n\n:param tuple: (TupleExporter.TUPLE_TYPE) - The tuple to export an element from\n:param elementIndex: (int) - The element index to export\n:return: java.lang.Object"
 },
 "path": "io.deephaven.engine.table.TupleExporter",
 "text": "Interface for classes that know how to export the elements of a given tuple type. Currently, supports element-wise\n export to a WritableColumnSource without unnecessary boxing.",
 "typeName": "interface"
}