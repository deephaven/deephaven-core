{
 "className": "io.deephaven.engine.table.impl.util.TailInitializationFilter",
 "methods": {
  "mostRecent": "Get the most recent rows from each partition in source table.\n\n*Overload 1*  \n  :param table: (io.deephaven.engine.table.Table) - the source table to filter\n  :param timestampName: (java.lang.String) - the name of the timestamp column\n  :param period: (java.lang.String) - interval between the last row in a partition (as converted by DateTimeUtils.expressionToNanos)\n  :return: (io.deephaven.engine.table.Table) a table with only the most recent values in each partition\n  \n*Overload 2*  \n  :param table: (io.deephaven.engine.table.Table) - the source table to filter\n  :param timestampName: (java.lang.String) - the name of the timestamp column\n  :param nanos: (long) - interval between the last row in a partition, in nanoseconds\n  :return: (io.deephaven.engine.table.Table) a table with only the most recent values in each partition"
 },
 "path": "io.deephaven.engine.table.impl.util.TailInitializationFilter",
 "text": "For an Intraday restart, we often know that all data of interest must take place within a fixed period of time.\n Rather than processing all of the data, we can binary search in each partition to find the relevant rows based on a\n Timestamp.\n\n This is only designed to operate against a source table, if any rows are modified or removed from the table, then the\n ShiftObliviousListener throws an IllegalStateException. Each contiguous range of indices is assumed to be a\n partition. If you filter or otherwise alter the source table before calling TailInitializationFilter, this assumption\n will be violated and the resulting table will not be filtered as desired.\n\n Once initialized, the filter returns all new rows, rows that have already been passed are not removed or modified.\n\n The input must be sorted by Timestamp, or the resulting table is undefined. Null timestamps are not permitted.\n\n For consistency, the last value of each partition is used to determine the threshold for that partition.",
 "typeName": "class"
}