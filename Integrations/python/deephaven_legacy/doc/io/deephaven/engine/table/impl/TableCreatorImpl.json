{
 "className": "io.deephaven.engine.table.impl.TableCreatorImpl",
 "methods": {
  "create": ":param table: io.deephaven.qst.table.TableSpec\n:return: io.deephaven.engine.table.Table",
  "merge": "Merges the given tables.\n\n*Overload 1*  \n  :param tables: (java.lang.Iterable<io.deephaven.engine.table.Table>) - the tables\n  :return: (io.deephaven.engine.table.Table) the merged results\n  \n*Overload 2*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 3*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 4*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 5*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 6*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 7*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 8*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :param t8: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 9*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :param t8: io.deephaven.engine.table.Table\n  :param t9: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 10*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :param t8: io.deephaven.engine.table.Table\n  :param t9: io.deephaven.engine.table.Table\n  :param remaining: io.deephaven.engine.table.Table...\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 11*  \n  :param tables: io.deephaven.engine.table.Table[]\n  :return: io.deephaven.engine.table.Table",
  "of": "**Incompatible overloads text - text from the first overload:**\n\nCreates a new table.\n\n*Overload 1*  \n  :param newTable: (io.deephaven.qst.table.NewTable) - the new table specification\n  :return: (io.deephaven.engine.table.Table) the new table\n  \n*Overload 2*  \n  :param emptyTable: (io.deephaven.qst.table.EmptyTable) - the empty table specification\n  :return: (io.deephaven.engine.table.Table) the empty table\n  \n*Overload 3*  \n  :param timeTable: (io.deephaven.qst.table.TimeTable) - the time table specifications\n  :return: (io.deephaven.engine.table.Table) the time table\n  \n*Overload 4*  \n  :param ticketTable: (io.deephaven.qst.table.TicketTable) - the ticket table\n  :return: (io.deephaven.engine.table.Table) the ticket table\n  \n*Overload 5*  \n  :param inputTable: (io.deephaven.qst.table.InputTable) - the input table specifications\n  :return: (io.deephaven.engine.table.impl.UpdatableTable) the input table",
  "valueOf": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)\n\n:param name: (java.lang.String) - the name of the enum constant to be returned.\n:return: (io.deephaven.engine.table.impl.TableCreatorImpl) the enum constant with the specified name",
  "values": "Returns an array containing the constants of this enum type, in\nthe order they are declared.\n\n:return: (io.deephaven.engine.table.impl.TableCreatorImpl[]) an array containing the constants of this enum type, in the order they are declared"
 },
 "path": "io.deephaven.engine.table.impl.TableCreatorImpl",
 "text": "Engine-specific implementation of TableCreator.",
 "typeName": "enum"
}