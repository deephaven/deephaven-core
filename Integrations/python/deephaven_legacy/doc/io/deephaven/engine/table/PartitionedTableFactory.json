{
 "className": "io.deephaven.engine.table.PartitionedTableFactory",
 "methods": {
  "of": "**Incompatible overloads text - text from the first overload:**\n\nConstruct a PartitionedTable as in\n of(Table, Collection, boolean, String, TableDefinition, boolean), inferring most parameters as follows:\n \nkeyColumnNames\nThe names of all columns with a non-Table data type\nuniqueKeys\nfalse\nconstituentColumnName\nThe name of the first column with a Table data type\nconstituentDefinition\nThe TableDefinition of the value at the first cell in the constituent column. Consequently,\n table must be non-empty.\nconstituentChangesPermitted\nThe value of !table.isRefreshing()\n\n*Overload 1*  \n  :param table: (io.deephaven.engine.table.Table) - The \"raw\" table of tables. Should be refreshing if any constituents are.\n  :param keyColumnNames: (java.util.Collection<java.lang.String>) - The \"key\" column names from table. Key columns are used in\n          PartitionedTable.transform(UnaryOperator) to validate the safety and correctness of join\n          operations and in PartitionedTable.partitionedTransform(PartitionedTable, BinaryOperator) to\n          correlate tables that should be transformed together. Passing an ordered set is highly recommended.\n  :param uniqueKeys: (boolean) - Whether the keys (key column values for a row considered as a tuple) in table are\n          guaranteed to be unique\n  :param constituentColumnName: (java.lang.String) - The \"constituent\" column name from table. The constituent column contains\n          the underlying non-null tables that make up the result PartitionedTable.\n  :param constituentDefinition: (io.deephaven.engine.table.TableDefinition) - A TableDefinition expected to be\n          mutually compatible with all values in\n          the \"constituent\" column of table\n  :param constituentChangesPermitted: (boolean) - Whether table is permitted to report changes that impact the\n          constituent column\n  :return: (io.deephaven.engine.table.PartitionedTable) A new PartitionedTable as described\n  \n*Overload 2*  \n  :param table: (io.deephaven.engine.table.Table) - The \"raw\" table of tables\n  :return: (io.deephaven.engine.table.PartitionedTable) A new PartitionedTable as described",
  "ofTables": "**Incompatible overloads text - text from the first overload:**\n\nConstruct a Table with a single column containing the non-null values in constituents,\n and then use that to construct a PartitionedTable as in\n of(Table, Collection, boolean, String, TableDefinition, boolean), inferring most parameters as follows:\n \nkeyColumnNames\nAn empty list\nuniqueKeys\nfalse\nconstituentColumnName\nThe single column containing non-null values from constituents\nconstituentChangesPermitted\nfalse\n\n*Overload 1*  \n  :param constituentDefinition: (io.deephaven.engine.table.TableDefinition) - A TableDefinition expected to be\n          mutually compatible with all values in\n          the \"constituent\" column of table\n  :param constituents: (io.deephaven.engine.table.Table...) - The constituent tables to include. null values will be ignored.\n  :return: (io.deephaven.engine.table.PartitionedTable) A new PartitionedTable as described\n  \n*Overload 2*  \n  :param constituents: (io.deephaven.engine.table.Table...) - The constituent tables to include. null values will be ignored. At least one\n          non-null constituent must be supplied.\n  :return: (io.deephaven.engine.table.PartitionedTable) A new PartitionedTable as described"
 },
 "path": "io.deephaven.engine.table.PartitionedTableFactory",
 "text": "Factory for producing Deephaven engine PartitionedTable instances.",
 "typeName": "class"
}