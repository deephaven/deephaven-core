{
 "className": "io.deephaven.engine.table.impl.asofjoin.StaticAsOfJoinStateManagerTypedBase",
 "methods": {
  "buildFromLeftSide": ":param leftRowSet: io.deephaven.engine.rowset.RowSequence\n:param leftSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param addedSlots: io.deephaven.engine.table.impl.sources.LongArraySource\n:return: int",
  "buildFromRightSide": ":param rightRowSet: io.deephaven.engine.rowset.RowSequence\n:param rightSources: io.deephaven.engine.table.ColumnSource<?>[]\n:param addedSlots: io.deephaven.engine.table.impl.sources.LongArraySource\n:return: int",
  "convertRightBuildersToIndex": ":param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param slotCount: int",
  "convertRightGrouping": ":param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n:param slotCount: int\n:param rowSetSource: io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.RowSet>",
  "doRehash": ":param nextChunkSize: int",
  "getLeftIndex": "When we get the left RowSet out of our source (after a build or probe); we do it by pulling a sequential builder\n and then calling build(). We also null out the value in the column source, thus freeing the builder's memory.\n\n This also results in clearing out the left hand side of the table between each probe phase for the left\n refreshing case.\n\n:param slot: (long) - the slot in the table\n:return: (io.deephaven.engine.rowset.RowSet) the RowSet for this slot",
  "getOverflowSize": ":return: int",
  "getRightIndex": ":param slot: long\n:return: io.deephaven.engine.rowset.RowSet",
  "getTableSize": ":return: int",
  "probeLeft": "*Overload 1*  \n  :param leftRowSet: io.deephaven.engine.rowset.RowSequence\n  :param leftSources: io.deephaven.engine.table.ColumnSource<?>[]\n  \n*Overload 2*  \n  :param leftRowSet: io.deephaven.engine.rowset.RowSequence\n  :param leftSources: io.deephaven.engine.table.ColumnSource<?>[]\n  :param slots: io.deephaven.engine.table.impl.sources.LongArraySource\n  :param foundBuilder: io.deephaven.engine.rowset.RowSetBuilderRandom\n  :return: int",
  "probeRight": ":param rightRowSet: io.deephaven.engine.rowset.RowSequence\n:param rightSources: io.deephaven.engine.table.ColumnSource<?>[]",
  "rehashRequired": ":param nextChunkSize: int\n:return: boolean"
 },
 "path": "io.deephaven.engine.table.impl.asofjoin.StaticAsOfJoinStateManagerTypedBase",
 "typeName": "class"
}