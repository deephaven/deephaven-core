{
 "className": "io.deephaven.engine.table.TableDefinition",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "checkCompatibility": "**Incompatible overloads text - text from the first overload:**\n\nTest compatibility of this definition with another. This definition must have all columns of the other, and the\n column definitions in common must be compatible, as defined by\n ColumnDefinition.isCompatible(ColumnDefinition).\n\n \n Note: unlike ColumnDefinition.isCompatible(ColumnDefinition), this method does not have an equivalence\n relation. For a stricter check, use checkMutualCompatibility(TableDefinition).\n\n*Overload 1*  \n  :param other: (io.deephaven.engine.table.TableDefinition) - comparison table definition\n  :return: (io.deephaven.engine.table.TableDefinition) the minimized compatible table definition, in the same order as other\n  \n*Overload 2*  \n  :param other: (io.deephaven.engine.table.TableDefinition) - comparison table definition\n  :param ignorePartitioningColumns: (boolean) - if true, other definition may contain partitioning columns not in this\n          definition\n  :return: (io.deephaven.engine.table.TableDefinition) the minimized compatible table definition, in the same order as other",
  "checkMutualCompatibility": "Tests mutual-compatibility of this and other. To be mutually compatible, they must have the same\n number of columns, each matched up with ColumnDefinition.isCompatible(io.deephaven.engine.table.ColumnDefinition<?>). As such, this method has an\n equivalence relation, ie A.checkMutualCompatibility(B) == B.checkMutualCompatibility(A).\n\n*Overload 1*  \n  :param other: (io.deephaven.engine.table.TableDefinition) - The other definition\n  :return: (io.deephaven.engine.table.TableDefinition) this table definition, but in the column order of other\n  \n*Overload 2*  \n  :param other: (io.deephaven.engine.table.TableDefinition) - The other definition\n  :param lhsName: (java.lang.String) - Name to use when describing this if an exception is thrown\n  :param rhsName: (java.lang.String) - Name to use when describing other if an exception is thrown\n  :return: (io.deephaven.engine.table.TableDefinition) this table definition, but in the column order of other",
  "describeCompatibilityDifferences": "Build a description of the difference between this definition and the other. Should correspond to\n checkMutualCompatibility(io.deephaven.engine.table.TableDefinition) logic.\n\n:param other: (io.deephaven.engine.table.TableDefinition) - another TableDefinition to compare\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:return: (java.util.List<java.lang.String>) a list of strings representing the difference between two table definitions",
  "describeDifferences": "Build a description of the difference between this definition and the other. Should correspond to\n equalsIgnoreOrder(io.deephaven.engine.table.TableDefinition) logic.\n\n:param other: (io.deephaven.engine.table.TableDefinition) - another TableDefinition to compare\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:return: (java.util.List<java.lang.String>) a list of strings representing the difference between two table definitions",
  "equals": "Strict comparison (column-wise only).\n\n:param other: (java.lang.Object) - - The object to compare with.\n:return: (boolean) True if other is a TableDefinition and contains equal ColumnDefinitions in the same order. False\n         otherwise.",
  "equalsIgnoreOrder": "Strict comparison (column-wise only).\n\n:param other: (io.deephaven.engine.table.TableDefinition) - - The other TableDefinition to compare with.\n:return: (boolean) True if other contains equal ColumnDefinitions in any order. False otherwise.",
  "from": "**Incompatible overloads text - text from the first overload:**\n\nConvenience factory method for use with parallel arrays of column names and data types. All\n column definitions will have default component\n type and normal column type.\n\n*Overload 1*  \n  :param headers: java.lang.Iterable<io.deephaven.qst.column.header.ColumnHeader<?>>\n  :return: io.deephaven.engine.table.TableDefinition\n  \n*Overload 2*  \n  :param columnNames: (java.lang.String[]) - An array of column names to use, parallel to columnDataTypes\n  :param columnDataTypes: (java.lang.Class<?>[]) - An array of column data types to use, parallel to columnNames\n  :return: (io.deephaven.engine.table.TableDefinition) The resulting TableDefinition\n  \n*Overload 3*  \n  :param columnNames: (java.lang.Iterable<java.lang.String>) - Column names to use, parallel to columnDataTypes\n  :param columnDataTypes: (java.lang.Iterable<java.lang.Class<?>>) - Column data types to use, parallel to columnNames\n  :return: (io.deephaven.engine.table.TableDefinition) The resulting TableDefinition",
  "getColumn": "Note: Java generics information - <T>\n\n:param columnName: (java.lang.String) - The column name to search for\n:return: (io.deephaven.engine.table.ColumnDefinition<T>) The ColumnDefinition for the supplied name, or null if no such column exists in this\n         table definition",
  "getColumnIndex": ":param column: (io.deephaven.engine.table.ColumnDefinition<?>) - The ColumnDefinition to search for\n:return: (int) The index of column, or -1 if no such column exists in this table definition",
  "getColumnNameMap": ":return: (java.util.Map<java.lang.String,io.deephaven.engine.table.ColumnDefinition<?>>) An unmodifiable map from column name to column definition",
  "getColumnNames": ":return: (java.util.List<java.lang.String>) The column names as a list in the same order as getColumns()",
  "getColumnNamesArray": ":return: (java.lang.String[]) The column names as an array in the same order as getColumns()",
  "getColumnNamesAsString": ":return: (java.lang.String) A String of column names joined with ','",
  "getColumnStream": ":return: (java.util.stream.Stream<io.deephaven.engine.table.ColumnDefinition<?>>) A stream of the column definitions for this table definition",
  "getColumnTypes": ":return: (java.util.List<java.lang.Class<?>>) The column data types as a list in the same order as\n         getColumns()",
  "getColumnTypesArray": ":return: (java.lang.Class<?>[]) The column data types as an array in the same order as\n         getColumns()",
  "getColumns": ":return: (java.util.List<io.deephaven.engine.table.ColumnDefinition<?>>) An unmodifiable list of the column definitions for this table definition",
  "getColumnsArray": ":return: (io.deephaven.engine.table.ColumnDefinition<?>[]) An array of the column definitions for this table definition",
  "getDifferenceDescription": "Build a description of the difference between this definition and the other. Should correspond to\n equalsIgnoreOrder logic.\n\n:param other: (io.deephaven.engine.table.TableDefinition) - another TableDefinition to compare\n:param lhs: (java.lang.String) - what to call \"this\" definition\n:param rhs: (java.lang.String) - what to call the other definition\n:param separator: (java.lang.String) - separate strings in the list of differences with this separator\n:return: (java.lang.String) A string in which the differences are enumerated, separated by the given separator",
  "getGroupingColumnNamesArray": ":return: (java.lang.String[]) An array containing the names of all grouping columns in the\n         same relative order as the column definitions list",
  "getGroupingColumns": ":return: (java.util.List<io.deephaven.engine.table.ColumnDefinition<?>>) A list of column definitions for all grouping columns in the same relative order as the column definitions list",
  "getPartitioningColumns": ":return: (java.util.List<io.deephaven.engine.table.ColumnDefinition<?>>) A list of column definitions for all\n         partitioning columns in the same relative order as the\n         column definitions list",
  "getWritable": "*Overload 1*  \n  :return: (io.deephaven.engine.table.TableDefinition) This definition if it's writable, or a freshly-allocated definition that is identical but for the columns\n           array, which will exclude all non-writable columns.\n  \n*Overload 2*  \n  :param partitioningToNormal: (boolean) - Whether partitioning columns should be preserved as normal columns, or excluded\n  :return: (io.deephaven.engine.table.TableDefinition) This definition if it's writable, or a freshly-allocated definition that is identical but for the columns\n           array, which will exclude all non-writable columns, optionally converting partitioning columns to normal\n           columns.",
  "hashCode": ":return: int",
  "inferFrom": ":param sources: java.util.Map<java.lang.String,? extendsio.deephaven.engine.table.ColumnSource<?>>\n:return: io.deephaven.engine.table.TableDefinition",
  "intern": "Intern this TableDefinition in order to avoid storing many identical instances. Useful (for example) in\n heavily partitioned workloads.\n\n:return: (io.deephaven.engine.table.TableDefinition) An interned TableDefinition that is equal to this",
  "numColumns": ":return: (int) The number of columns for this table definition",
  "of": "*Overload 1*  \n  :param columnDefinitions: io.deephaven.engine.table.ColumnDefinition<?>...\n  :return: io.deephaven.engine.table.TableDefinition\n  \n*Overload 2*  \n  :param columnDefinitions: java.util.Collection<io.deephaven.engine.table.ColumnDefinition<?>>\n  :return: io.deephaven.engine.table.TableDefinition",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.engine.table.TableDefinition",
 "text": "Table definition for all Deephaven tables.",
 "typeName": "class"
}