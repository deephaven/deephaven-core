{
 "className": "io.deephaven.engine.table.impl.GroupingUtils",
 "methods": {
  "forEachGroup": "Consume all groups in a group-to-RowSet map.\n\nNote: Java generics information - <TYPE>\n\n:param groupToRowSet: (java.util.Map<TYPE,io.deephaven.engine.rowset.RowSet>) - The group-to-RowSet map to consume\n:param groupConsumer: (java.util.function.BiConsumer<TYPE,io.deephaven.engine.rowset.WritableRowSet>) - Consumer for responsive groups",
  "forEachResponsiveGroup": "Consume all responsive groups in a group-to-RowSet map.\n\nNote: Java generics information - <TYPE>\n\n:param groupToRowSet: (java.util.Map<TYPE,io.deephaven.engine.rowset.RowSet>) - The group-to-RowSet map to consume\n:param intersect: (io.deephaven.engine.rowset.RowSet) - Limit indices to values contained within intersect, eliminating empty result groups\n:param groupConsumer: (java.util.function.BiConsumer<TYPE,io.deephaven.engine.rowset.WritableRowSet>) - Consumer for responsive groups",
  "getValueToRangeMap": "Get a map from unique, boxed values in this column to a long[2] range of keys.\n\nNote: Java generics information - <TYPE>\n\n:param rowSet: (io.deephaven.engine.rowset.TrackingRowSet) - The RowSet that defines the column along with the column source\n:param columnSource: (io.deephaven.engine.table.ColumnSource<TYPE>) - The column source that defines the column along with the RowSet\n:return: (java.util.Map<TYPE,long[]>) A new value to range map (i.e. grouping metadata)",
  "groupingToFlatSources": "Convert a group-to-RowSet map to a pair of flat in-memory column sources, one for the keys and one for the\n indexes.\n\n*Overload 1*  \n  Note: Java generics information - <TYPE>\n  \n  :param originalKeyColumnSource: (io.deephaven.engine.table.ColumnSource<TYPE>) - The key column source whose contents are reflected by the group-to-RowSet map\n          (used for typing, only)\n  :param groupToRowSet: (java.util.Map<TYPE,io.deephaven.engine.rowset.RowSet>) - The group-to-RowSet map to convert\n  :return: (io.deephaven.base.Pair<io.deephaven.engine.table.impl.sources.ArrayBackedColumnSource<TYPE>,io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.TrackingWritableRowSet>>) A pair of a flat key column source and a flat RowSet column source\n  \n*Overload 2*  \n  Note: Java generics information - <TYPE>\n  \n  :param originalKeyColumnSource: (io.deephaven.engine.table.ColumnSource<TYPE>) - The key column source whose contents are reflected by the group-to-RowSet map\n          (used for typing, only)\n  :param groupToRowSet: (java.util.Map<TYPE,io.deephaven.engine.rowset.RowSet>) - The group-to-RowSet map to convert\n  :param intersect: (io.deephaven.engine.rowset.RowSet) - Limit returned indices to values contained within intersect\n  :param responsiveGroups: (org.apache.commons.lang3.mutable.MutableInt) - Set to the number of responsive groups on exit\n  :return: (io.deephaven.base.Pair<io.deephaven.engine.table.impl.sources.ArrayBackedColumnSource<TYPE>,io.deephaven.engine.table.impl.sources.ObjectArraySource<io.deephaven.engine.rowset.TrackingWritableRowSet>>) A pair of a flat key column source and a flat rowSet column source"
 },
 "path": "io.deephaven.engine.table.impl.GroupingUtils",
 "text": "Utilities for creating or interacting with grouping information.",
 "typeName": "class"
}