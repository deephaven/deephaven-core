{
 "className": "io.deephaven.engine.table.impl.sources.regioned.RegionedPageStore",
 "methods": {
  "getPageContaining": ":param fillContext: io.deephaven.engine.table.ChunkSource.FillContext\n:param row: long\n:return: (RegionedPageStore.REGION_TYPE) The page containing row, after applying PagingChunkSource.mask().",
  "getRegion": "Map from a region rowSet to its corresponding region.\n\n:param regionIndex: (int) - The region index\n:return: (RegionedPageStore.REGION_TYPE) The region for the supplied region index",
  "getRegionCount": "Get the number of regions.\n\n:return: (int) The number of regions that have been added",
  "getRegionIndex": "Get the region index.\n\n:param elementIndex: long\n:return: (int) The region index for an element row key.",
  "lookupRegion": "Perform region lookup for an element row key.\n\n:param elementRowKey: (long) - The element row key to get the region for\n:return: (RegionedPageStore.REGION_TYPE) The appropriate region",
  "makeFillContext": "Allocate a new ChunkSource.FillContext for filling chunks from this FillContextMaker, typically a\n ChunkSource.\n\n:param chunkCapacity: (int) - The maximum size of any WritableChunk that will be filled with this context\n:param sharedContext: (io.deephaven.engine.table.SharedContext) - Shared store of intermediate results.\n:return: (io.deephaven.engine.table.ChunkSource.FillContext) A context for use with fill operations",
  "mask": "This mask is applied to RowSequence which are passed into\n ChunkSource.getChunk(ChunkSource.GetContext, RowSequence) and\n ChunkSource.fillChunk(ChunkSource.FillContext, WritableChunk, RowSequence). This allows the PagingChunkSources to be cached, and reused even if they are properly relocated in key space.\n\n:return: (long) the mask for this page, which must be a bitmask representing the some number of lower order bits of a\n         long.",
  "parameters": ":return: (io.deephaven.engine.table.impl.sources.regioned.RegionedPageStore.Parameters) The parameters object that describes this regioned page store",
  "regionMask": ":return: (long) The mask that should be applied to RowSequence indices when calculating their address within a\n         region",
  "regionMaskNumBits": ":return: (int) The number of bits masked by regionMask()"
 },
 "path": "io.deephaven.engine.table.impl.sources.regioned.RegionedPageStore",
 "typeName": "interface"
}