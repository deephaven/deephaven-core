{
 "className": "io.deephaven.engine.table.WritableColumnSource",
 "methods": {
  "ensureCapacity": "**Incompatible overloads text - text from the first overload:**\n\nEnsure that this WritableColumnSource can accept row keys in range [0, capacity).\n\n*Overload 1*  \n  :param capacity: long\n  \n*Overload 2*  \n  :param capacity: (long) - The new minimum capacity\n  :param nullFilled: (boolean) - Whether data should be \"null-filled\". If true, get operations at row keys that have not been\n          set will return the appropriate null value; otherwise such gets produce undefined results.",
  "fillFromChunk": "Our default, inefficient, implementation. Inheritors who care should provide a better implementation.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data rowSequence\n:param rowSequence: (io.deephaven.engine.rowset.RowSequence) - An RowSequence representing the keys to be written",
  "fillFromChunkUnordered": "Fills the ChunkSink with data from the source, with data corresponding to the keys from the given key chunk.\n\n:param context: (io.deephaven.engine.table.ChunkSink.FillFromContext) - A context containing all mutable/state related data used in writing the Chunk.\n:param src: (io.deephaven.chunk.Chunk<? extendsio.deephaven.chunk.attributes.Values>) - The source of the data RowSequence\n:param keys: (io.deephaven.chunk.LongChunk<io.deephaven.engine.rowset.chunkattributes.RowKeys>) - A LongChunk representing the keys to be written",
  "makeFillFromContext": "Provide a default, empty ChunkSink.FillFromContext for use with our default\n fillFromChunk(io.deephaven.engine.table.ChunkSink.FillFromContext, io.deephaven.chunk.Chunk<? extends io.deephaven.chunk.attributes.Values>, io.deephaven.engine.rowset.RowSequence).\n\n:param chunkCapacity: int\n:return: io.deephaven.engine.table.ChunkSink.FillFromContext",
  "set": "*Overload 1*  \n  :param key: long\n  :param value: WritableColumnSource.T\n  \n*Overload 2*  \n  :param key: long\n  :param value: byte\n  \n*Overload 3*  \n  :param key: long\n  :param value: char\n  \n*Overload 4*  \n  :param key: long\n  :param value: double\n  \n*Overload 5*  \n  :param key: long\n  :param value: float\n  \n*Overload 6*  \n  :param key: long\n  :param value: int\n  \n*Overload 7*  \n  :param key: long\n  :param value: long\n  \n*Overload 8*  \n  :param key: long\n  :param value: short"
 },
 "path": "io.deephaven.engine.table.WritableColumnSource",
 "typeName": "interface"
}