{
 "className": "io.deephaven.engine.table.impl.by.typed.HasherConfig$Builder",
 "methods": {
  "addBuild": ":param build: io.deephaven.engine.table.impl.by.typed.HasherConfig.BuildSpec\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "addExtraMethod": ":param methodProducer: java.util.function.BiFunction<io.deephaven.engine.table.impl.by.typed.HasherConfig<HasherConfig.Builder.T>,io.deephaven.chunk.ChunkType[],com.squareup.javapoet.MethodSpec>\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "addExtraPartialRehashParameter": ":param paramSpec: com.squareup.javapoet.ParameterSpec\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "addProbe": ":param probe: io.deephaven.engine.table.impl.by.typed.HasherConfig.ProbeSpec\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "alwaysMoveMain": ":param alwaysMoveMain: boolean\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "classPrefix": ":param classPrefix: java.lang.String\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "emptyStateName": ":param emptyStateName: java.lang.String\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "includeOriginalSources": ":param includeOriginalSources: boolean\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "mainStateName": ":param mainStateName: java.lang.String\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "moveMainAlternate": ":param moveMainAlternate: java.util.function.Consumer<com.squareup.javapoet.CodeBlock.Builder>\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "moveMainFull": ":param moveMainFull: java.util.function.Consumer<com.squareup.javapoet.CodeBlock.Builder>\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "openAddressed": ":param openAddressed: boolean\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "openAddressedAlternate": ":param openAddressedAlternate: boolean\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "overflowOrAlternateStateName": ":param overflowOrAlternateStateName: java.lang.String\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "packageGroup": ":param packageGroup: java.lang.String\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "packageMiddle": ":param packageMiddle: java.lang.String\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "rehashFullSetup": ":param rehashFullSetup: java.util.function.Consumer<com.squareup.javapoet.CodeBlock.Builder>\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "stateType": ":param stateType: java.lang.Class<?>\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>",
  "supportRehash": ":param supportRehash: boolean\n:return: io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder<HasherConfig.Builder.T>"
 },
 "path": "io.deephaven.engine.table.impl.by.typed.HasherConfig.Builder",
 "typeName": "class"
}