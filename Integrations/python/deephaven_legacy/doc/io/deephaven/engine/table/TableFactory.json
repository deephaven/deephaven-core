{
 "className": "io.deephaven.engine.table.TableFactory",
 "methods": {
  "emptyTable": "Equivalent to of(EmptyTable.of(size)).\n\n:param size: (long) - the size\n:return: (io.deephaven.engine.table.Table) the empty table",
  "merge": "Merges the given tables.\n\n*Overload 1*  \n  :param tables: (java.lang.Iterable<io.deephaven.engine.table.Table>) - the tables\n  :return: (io.deephaven.engine.table.Table) the merged results\n  \n*Overload 2*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 3*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 4*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 5*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 6*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 7*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 8*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :param t8: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 9*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :param t8: io.deephaven.engine.table.Table\n  :param t9: io.deephaven.engine.table.Table\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 10*  \n  :param t1: io.deephaven.engine.table.Table\n  :param t2: io.deephaven.engine.table.Table\n  :param t3: io.deephaven.engine.table.Table\n  :param t4: io.deephaven.engine.table.Table\n  :param t5: io.deephaven.engine.table.Table\n  :param t6: io.deephaven.engine.table.Table\n  :param t7: io.deephaven.engine.table.Table\n  :param t8: io.deephaven.engine.table.Table\n  :param t9: io.deephaven.engine.table.Table\n  :param remaining: io.deephaven.engine.table.Table...\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 11*  \n  :param tables: io.deephaven.engine.table.Table[]\n  :return: io.deephaven.engine.table.Table",
  "newTable": "Equivalent to of(NewTable.of(columns)).\n\n*Overload 1*  \n  :param columns: (io.deephaven.qst.column.Column<?>...) - the columns\n  :return: (io.deephaven.engine.table.Table) the new table\n  \n*Overload 2*  \n  :param columns: (java.lang.Iterable<io.deephaven.qst.column.Column<?>>) - the columns\n  :return: (io.deephaven.engine.table.Table) the new table",
  "of": "**Incompatible overloads text - text from the first overload:**\n\nCreates a new table.\n\n*Overload 1*  \n  :param newTable: (io.deephaven.qst.table.NewTable) - the new table specification\n  :return: (io.deephaven.engine.table.Table) the new table\n  \n*Overload 2*  \n  :param emptyTable: (io.deephaven.qst.table.EmptyTable) - the empty table specification\n  :return: (io.deephaven.engine.table.Table) the empty table\n  \n*Overload 3*  \n  :param timeTable: (io.deephaven.qst.table.TimeTable) - the time table specifications\n  :return: (io.deephaven.engine.table.Table) the time table\n  \n*Overload 4*  \n  :param ticketTable: (io.deephaven.qst.table.TicketTable) - the ticket table\n  :return: (io.deephaven.engine.table.Table) the ticket table",
  "ticket": "Equivalent to of(TicketTable.of(ticket)).\n\n*Overload 1*  \n  :param ticket: (java.lang.String) - the ticket string\n  :return: (io.deephaven.engine.table.Table) the ticket table\n  \n*Overload 2*  \n  :param ticket: (byte[]) - the ticket\n  :return: (io.deephaven.engine.table.Table) the ticket table",
  "timeTable": "**Incompatible overloads text - text from the first overload:**\n\nEquivalent to of(TimeTable.of(interval)).\n\n*Overload 1*  \n  :param interval: (java.time.Duration) - the interval\n  :return: (io.deephaven.engine.table.Table) the time table\n  \n*Overload 2*  \n  :param interval: (java.time.Duration) - the interval\n  :param startTime: (java.time.Instant) - the start time\n  :return: (io.deephaven.engine.table.Table) the time table"
 },
 "path": "io.deephaven.engine.table.TableFactory",
 "text": "Factory for producing Deephaven engine Table instances.",
 "typeName": "class"
}