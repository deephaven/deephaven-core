{
 "className": "io.deephaven.engine.table.impl.sources.chunkcolumnsource.ChunkColumnSource",
 "methods": {
  "addChunk": "Append a chunk of data to this column source.\n\n The chunk must not be empty (i.e., the size must be greater than zero).\n\n:param chunk: (io.deephaven.chunk.WritableChunk<? extendsio.deephaven.chunk.attributes.Values>) - the chunk of data to add",
  "clear": "Reset the column source to be ready for reuse.\n \n Clear will discard the currently held chunks. This should not be called if a table will continue to reference the\n column source; as it violates the immutability contract.",
  "getSize": "Get the size of this column source (one more than the last valid row key).\n\n:return: (long) the size of this column source",
  "make": "Create a new ChunkColumnSource for the given chunk type and data type.\n\n*Overload 1*  \n  :param chunkType: (io.deephaven.chunk.ChunkType) - the type of chunk\n  :param dataType: (java.lang.Class<?>) - the datatype for the newly created column source\n  :return: (io.deephaven.engine.table.impl.sources.chunkcolumnsource.ChunkColumnSource<?>) an empty ChunkColumnSource\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param chunkType: (io.deephaven.chunk.ChunkType) - the type of chunk\n  :param dataType: (java.lang.Class<T>) - the datatype for the newly created column source\n  :param componentType: (java.lang.Class<?>) - the component type for the newly created column source (only applies to Objects)\n  :return: (io.deephaven.engine.table.impl.sources.chunkcolumnsource.ChunkColumnSource<T>) an empty ChunkColumnSource\n  \n*Overload 3*  \n  :param chunkType: (io.deephaven.chunk.ChunkType) - the type of chunk\n  :param dataType: (java.lang.Class<?>) - the datatype for the newly created column source\n  :param sharedOffsetForData: (gnu.trove.list.array.TLongArrayList) - an array list representing the shared offsets for data across several\n          ChunkColumnSources\n  :return: (io.deephaven.engine.table.impl.sources.chunkcolumnsource.ChunkColumnSource<?>) an empty ChunkColumnSource\n  \n*Overload 4*  \n  :param chunkType: (io.deephaven.chunk.ChunkType) - the type of chunk\n  :param dataType: (java.lang.Class<?>) - the datatype for the newly created column source\n  :param componentType: (java.lang.Class<?>) - the component type for the newly created column source (only applies to Objects)\n  :param sharedOffsetForData: (gnu.trove.list.array.TLongArrayList) - an array list representing the shared offsets for data across several\n          ChunkColumnSources\n  :return: (io.deephaven.engine.table.impl.sources.chunkcolumnsource.ChunkColumnSource<?>) an empty ChunkColumnSource"
 },
 "path": "io.deephaven.engine.table.impl.sources.chunkcolumnsource.ChunkColumnSource",
 "text": "An immutable ColumnSource that is backed by chunks.\n \n The owner of the column source may append chunks to with the addChunk call.",
 "typeName": "interface"
}