{
 "className": "io.deephaven.engine.table.impl.IndexedDataColumn",
 "methods": {
  "get": "**Incompatible overloads text - text from the first overload:**\n\nReturn the column's values for the specified row range. Note that this will be a boxed array, for data columns of\n primitive types.\n\n*Overload 1*  \n  :param pos: (long) - - the row position for which the data is being retrieved\n  :return: (IndexedDataColumn.TYPE) the value in the column at the row designated by the row position\n  \n*Overload 2*  \n  :param startPosInclusive: (long) - The first position in the data column to include, inclusive\n  :param endPosExclusive: (long) - One more than the last position in the data column to include\n  :return: (IndexedDataColumn.TYPE[]) Return the column's values for the specified row range\n  \n*Overload 3*  \n  :param positions: (long...) - The row indexes to fetch\n  :return: (IndexedDataColumn.TYPE[]) Return the column's values for the specified rows\n  \n*Overload 4*  \n  :param positions: (int...) - The row indexes to fetch\n  :return: (IndexedDataColumn.TYPE[]) Return the column's values for the specified rows",
  "getBoolean": ":param pos: long\n:return: java.lang.Boolean",
  "getBooleans": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: java.lang.Boolean[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: java.lang.Boolean[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: java.lang.Boolean[]",
  "getByte": ":param pos: long\n:return: byte",
  "getBytes": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: byte[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: byte[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: byte[]",
  "getChar": ":param pos: long\n:return: char",
  "getChars": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: char[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: char[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: char[]",
  "getComponentType": "Get the array component type, or the type itself. For basic types, this is just the type. For example, if you\n have a column of java.lang.String, this also returns java.lang.String. For array types (java Arrays), or Vector\n (which would be returned by getType), you get the type that is contained within the array. For example, if a\n single row in this column contains a DoubleVector, getComponentType returns double.\n\n:return: (java.lang.Class) if type is an array, the type of object within the array. Otherwise type itself.",
  "getDouble": ":param pos: long\n:return: double",
  "getDoubles": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: double[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: double[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: double[]",
  "getFloat": ":param pos: long\n:return: float",
  "getFloats": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: float[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: float[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: float[]",
  "getInt": ":param pos: long\n:return: int",
  "getInts": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: int[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: int[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: int[]",
  "getLong": ":param pos: long\n:return: long",
  "getLongs": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: long[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: long[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: long[]",
  "getName": ":return: java.lang.String",
  "getShort": ":param pos: long\n:return: short",
  "getShorts": "*Overload 1*  \n  :param startPosInclusive: long\n  :param endPosExclusive: long\n  :return: short[]\n  \n*Overload 2*  \n  :param positions: long...\n  :return: short[]\n  \n*Overload 3*  \n  :param positions: int...\n  :return: short[]",
  "getType": ":return: (java.lang.Class<IndexedDataColumn.TYPE>) the type of object contained within this column.",
  "makePreviousColumn": "This is intended as a unit test helper. It is not recommended for inexpert use.\n\nNote: Java generics information - <TYPE>\n\n:param rowSet: (io.deephaven.engine.rowset.TrackingRowSet) - The RowSet\n:param columnSource: (io.deephaven.engine.table.ColumnSource<TYPE>) - The column source\n:return: (io.deephaven.engine.table.impl.IndexedDataColumn<TYPE>) A data column with previous values for the supplied column source, according to the previous version of\n         the RowSet",
  "set": ":param pos: long\n:param value: IndexedDataColumn.TYPE",
  "setArray": ":param startPos: long\n:param values: IndexedDataColumn.TYPE...",
  "setBoolean": ":param pos: long\n:param value: java.lang.Boolean",
  "setBooleans": ":param startPos: long\n:param values: java.lang.Boolean...",
  "setByte": ":param pos: long\n:param value: byte",
  "setBytes": ":param startPos: long\n:param values: byte...",
  "setChar": ":param pos: long\n:param value: char",
  "setChars": ":param startPos: long\n:param values: char...",
  "setDouble": ":param pos: long\n:param value: double",
  "setDoubles": ":param startPos: long\n:param values: double...",
  "setFloat": ":param pos: long\n:param value: float",
  "setFloats": ":param startPos: long\n:param values: float...",
  "setInt": ":param pos: long\n:param value: int",
  "setInts": ":param startPos: long\n:param values: int...",
  "setLong": ":param pos: long\n:param value: long",
  "setLongs": ":param startPos: long\n:param values: long...",
  "setShort": ":param pos: long\n:param value: short",
  "setShorts": ":param startPos: long\n:param values: short...",
  "size": "The size of this data structure.\n\n:return: (long) The size"
 },
 "path": "io.deephaven.engine.table.impl.IndexedDataColumn",
 "text": "DataColumn implementation backed by a ColumnSource and a RowSet.",
 "typeName": "class"
}