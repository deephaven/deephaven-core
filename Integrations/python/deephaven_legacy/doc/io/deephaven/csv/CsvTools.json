{
 "className": "io.deephaven.csv.CsvTools",
 "methods": {
  "builder": "Creates a CsvSpecs.Builder with CsvTools-specific values. Sets ColumnNameLegalizer.INSTANCE as\n CsvSpecs.Builder.headerLegalizer(Function) and CsvSpecs.Builder.headerValidator(Predicate); sets a new instance of\n DeephavenTimeZoneParser as CsvSpecs.Builder.customTimeZoneParser(CustomTimeZoneParser).\n\n:return: (io.deephaven.csv.CsvSpecs.Builder) the builder",
  "fromLegacyFormat": ":param format: java.lang.String\n:return: io.deephaven.csv.CsvSpecs",
  "readCsv": "**Incompatible overloads text - text from the first overload:**\n\nCreates an in-memory table by importing CSV data. The first row must be column names. Column data types are\n inferred from the data.\n\n*Overload 1*  \n  :param path: (java.lang.String) - the path\n  :return: (io.deephaven.engine.table.Table) the table\n  \n*Overload 2*  \n  :param stream: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :return: (io.deephaven.engine.table.Table) a Deephaven Table object\n  \n*Overload 3*  \n  :param url: (java.net.URL) - the url\n  :return: (io.deephaven.engine.table.Table) the table\n  \n*Overload 4*  \n  :param path: (java.nio.file.Path) - the file path\n  :return: (io.deephaven.engine.table.Table) the table\n  \n*Overload 5*  \n  :param path: (java.lang.String) - the path\n  :param specs: (io.deephaven.csv.CsvSpecs) - the csv specs\n  :return: (io.deephaven.engine.table.Table) the table\n  \n*Overload 6*  \n  :param stream: (java.io.InputStream) - The stream\n  :param specs: (io.deephaven.csv.CsvSpecs) - The CSV specs.\n  :return: (io.deephaven.engine.table.Table) The table.\n  \n*Overload 7*  \n  :param url: (java.net.URL) - the url\n  :param specs: (io.deephaven.csv.CsvSpecs) - the csv specs\n  :return: (io.deephaven.engine.table.Table) the table\n  \n*Overload 8*  \n  :param path: (java.nio.file.Path) - the path\n  :param specs: (io.deephaven.csv.CsvSpecs) - the csv specs\n  :return: (io.deephaven.engine.table.Table) the table\n  \n*Overload 9*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param format: (java.lang.String) - an Apache Commons CSV format name to be used to parse the CSV, or a single non-newline character to\n          use as a delimiter.\n  :return: (io.deephaven.engine.table.Table) a Deephaven Table object\n  \n*Overload 10*  \n  :param is: (java.io.InputStream) - an InputStream providing access to the CSV data.\n  :param separator: (char) - a char to use as the delimiter value when parsing the file.\n  :return: (io.deephaven.engine.table.Table) a Deephaven Table object",
  "readHeaderlessCsv": "Equivalent to\n CsvTools.readCsv(filePath, CsvTools.builder().hasHeaderRow(false).build()).renameColumns(renamesForHeaderless(columnNames));\n\n*Overload 1*  \n  :param filePath: java.lang.String\n  :param columnNames: java.util.Collection<java.lang.String>\n  :return: io.deephaven.engine.table.Table\n  \n*Overload 2*  \n  :param filePath: java.lang.String\n  :param columnNames: java.lang.String...\n  :return: io.deephaven.engine.table.Table",
  "renamesForHeaderless": "**Incompatible overloads text - text from the first overload:**\n\nConvert an array of column names to use for a result table into a series of rename pairs to\n pass to Table.renameColumns(MatchPair...).\n\n*Overload 1*  \n  :param columnNames: (java.util.Collection<java.lang.String>) - The column names\n  :return: (io.deephaven.engine.table.MatchPair[]) An array of rename columns\n  \n*Overload 2*  \n  :param columnNames: (java.lang.String...) - The column names\n  :return: (io.deephaven.engine.table.MatchPair[]) An array of rename columns",
  "writeCsv": "**Incompatible overloads text - text from the first overload:**\n\nWrites a table out as a CSV file.\n\n*Overload 1*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 2*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 3*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 4*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 5*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.PrintStream) - the stream to write to\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 6*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.PrintStream) - the stream to write to\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 7*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 8*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 9*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 10*  \n  :param sources: (io.deephaven.engine.table.Table[]) - an array of Deephaven table objects to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param tableSeparator: (java.lang.String) - a String (normally a single character) to be used as the table delimiter\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 11*  \n  :param sources: (io.deephaven.engine.table.Table[]) - an array of Deephaven table objects to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param tableSeparator: (java.lang.String) - a String (normally a single character) to be used as the table delimiter\n  :param nullsAsEmpty: boolean\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 12*  \n  :param sources: (io.deephaven.engine.table.Table[]) - an array of Deephaven table objects to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to compress (bz2) the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param tableSeparator: (java.lang.String) - a String (normally a single character) to be used as the table delimiter\n  :param fieldSeparator: (char) - the delimiter for the CSV files\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 13*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 14*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 15*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param destPath: (java.lang.String) - path to the CSV file to be written\n  :param compressed: (boolean) - whether to zip the file being written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 16*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.Writer) - Writer used to write the CSV\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param columns: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 17*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.Writer) - Writer used to write the CSV\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param columns: (java.lang.String...) - a list of columns to include in the export",
  "writeCsvContents": "Writes a table out as a CSV file.\n\n*Overload 1*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.Writer) - a Writer to which the header should be written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 2*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.Writer) - a Writer to which the header should be written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 3*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.Writer) - a Writer to which the header should be written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 4*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.Writer) - a Writer to which the header should be written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param colNames: (java.lang.String...) - a list of columns to include in the export\n  \n*Overload 5*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table object to be exported\n  :param out: (java.io.Writer) - a Writer to which the header should be written\n  :param timeZone: (io.deephaven.time.TimeZone) - a TimeZone constant relative to which DateTime data should be adjusted\n  :param progress: (io.deephaven.base.Procedure.Binary<java.lang.Long,java.lang.Long>) - a procedure that implements Procedure.Binary, and takes a progress Integer and a total size\n          Integer to update progress\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'\n  :param separator: (char) - the delimiter for the CSV\n  :param colNames: (java.lang.String...) - a list of columns to include in the export",
  "writeCsvHeader": "Writes the column name header row to a CSV file.\n\n*Overload 1*  \n  :param out: (java.io.Writer) - the Writer to which the header should be written\n  :param columns: (java.lang.String...) - a list of column names to be written\n  \n*Overload 2*  \n  :param out: (java.io.Writer) - the Writer to which the header should be written\n  :param separator: (char) - a char to use as the delimiter value when writing out the header\n  :param columns: (java.lang.String...) - a list of column names to be written",
  "writeCsvPaginate": "Writes a Deephaven table to one or more files, splitting it based on the MAX_CSV_LINE_COUNT setting.\n\n*Overload 1*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table to be exported\n  :param destPath: (java.lang.String) - the path in which the CSV file(s) should be written\n  :param filename: (java.lang.String) - the base file name to use for the files. A dash and starting line number will be concatenated to\n          each file.\n  \n*Overload 2*  \n  :param source: (io.deephaven.engine.table.Table) - a Deephaven table to be exported\n  :param destPath: (java.lang.String) - the path in which the CSV file(s) should be written\n  :param filename: (java.lang.String) - the base file name to use for the files. A dash and starting line number will be concatenated to\n          each file.\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'",
  "writeToMultipleFiles": "Writes a subset of rows from a Deephaven table to a CSV file.\n\n*Overload 1*  \n  :param table: (io.deephaven.engine.table.Table) - a Deephaven table from which rows should be exported\n  :param path: (java.lang.String) - the destination path in which the output CSV file should be created\n  :param filename: (java.lang.String) - the base file name to which a dash and starting line number will be concatenated for the file\n  :param startLine: (long) - the starting line number from the table to export; the ending line number will be startLine +\n          MAX_CSV_LINE_COUNT-1, or the end of the table\n  \n*Overload 2*  \n  :param table: (io.deephaven.engine.table.Table) - a Deephaven table from which rows should be exported\n  :param path: (java.lang.String) - the destination path in which the output CSV file should be created\n  :param filename: (java.lang.String) - the base file name to which a dash and starting line number will be concatenated for the file\n  :param startLine: (long) - the starting line number from the table to export; the ending line number will be startLine +\n          MAX_CSV_LINE_COUNT-1, or the end of the table\n  :param nullsAsEmpty: (boolean) - if nulls should be written as blank instead of '(null)'"
 },
 "path": "io.deephaven.csv.CsvTools",
 "text": "Utilities for reading and writing CSV files to and from Tables",
 "typeName": "class"
}