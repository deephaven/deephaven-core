{
 "className": "io.deephaven.proto.flight.util.FlightExportTicketHelper",
 "methods": {
  "descriptorToExportId": "Convenience method to convert from Flight.FlightDescriptor to export id.\n\n \n Descriptor must be a path.\n\n:param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - the grpc Ticket\n:param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n:return: (int) the export id that the Ticket wraps",
  "descriptorToFlightTicket": "Convenience method to convert from a Flight.Descriptor to a Flight.Ticket.\n\n:param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - the descriptor to convert\n:param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n:return: (org.apache.arrow.flight.impl.Flight.Ticket) a flight ticket that represents the descriptor",
  "descriptorToTicket": "Convenience method to convert from a Flight.Descriptor to a Flight.Ticket.\n\n:param descriptor: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) - the descriptor to convert\n:param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n:return: (io.deephaven.proto.backplane.grpc.Ticket) a flight ticket that represents the descriptor",
  "exportIdToDescriptor": "Convenience method to convert from export id to Flight.FlightDescriptor.\n\n:param exportId: (int) - the export id\n:return: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) a grpc Ticket wrapping the export id",
  "exportIdToFlightTicket": "Convenience method to convert from export id to Flight.Ticket.\n\n:param exportId: (int) - the export id\n:return: (org.apache.arrow.flight.impl.Flight.Ticket) a grpc Ticket wrapping the export id",
  "ticketToDescriptor": "Convenience method to convert from a Flight.Ticket to a Flight.FlightDescriptor.\n\n*Overload 1*  \n  :param ticket: (io.deephaven.proto.backplane.grpc.Ticket) - the ticket to convert\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) a flight descriptor that represents the ticket\n  \n*Overload 2*  \n  :param ticket: (org.apache.arrow.flight.impl.Flight.Ticket) - the ticket to convert\n  :param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n  :return: (org.apache.arrow.flight.impl.Flight.FlightDescriptor) a flight descriptor that represents the ticket",
  "ticketToExportId": "Convenience method to convert from Flight.Ticket to export id.\n\n \n Ticket's byte[0] must be ExportTicketHelper.TICKET_PREFIX, bytes[1-4] are a signed int export id in\n little-endian.\n\n:param ticket: (org.apache.arrow.flight.impl.Flight.Ticket) - the grpc Ticket\n:param logId: (java.lang.String) - an end-user friendly identification of the ticket should an error occur\n:return: (int) the export id that the Ticket wraps"
 },
 "path": "io.deephaven.proto.flight.util.FlightExportTicketHelper",
 "typeName": "class"
}