{
 "className": "io.deephaven.proto.backplane.grpc.SessionServiceGrpc$SessionServiceFutureStub",
 "methods": {
  "closeSession": "Proactively close an open session. Sessions will automatically close on timeout. When a session is closed, all\n unreleased exports will be automatically released.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HandshakeRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.CloseSessionResponse>",
  "exportFromTicket": "Makes a copy from a source ticket to a client managed result ticket. The source ticket does not need to be\n a client managed ticket.\n \n\n:param request: io.deephaven.proto.backplane.grpc.ExportRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ExportResponse>",
  "newSession": "Handshake between client and server to create a new session. The response includes a metadata header name and the\n token to send on every subsequent request. The auth mechanisms here are unary to best support grpc-web.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HandshakeRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.HandshakeResponse>",
  "refreshSessionToken": "Keep-alive a given token to ensure that a session is not cleaned prematurely. The response may include an updated\n token that should replace the existing token for subsequent requests.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HandshakeRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.HandshakeResponse>",
  "release": "Attempts to release an export by its ticket. Returns true if an existing export was found. It is the client's\n responsibility to release all resources they no longer want the server to hold on to. Proactively cancels work; do\n not release a ticket that is needed by dependent work that has not yet finished\n (i.e. the dependencies that are staying around should first be in EXPORTED state).\n \n\n:param request: io.deephaven.proto.backplane.grpc.ReleaseRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.ReleaseResponse>",
  "terminationNotification": "Receive a best-effort message on-exit indicating why this server is exiting. Reception of this message cannot be\n guaranteed.\n \n\n:param request: io.deephaven.proto.backplane.grpc.TerminationNotificationRequest\n:return: com.google.common.util.concurrent.ListenableFuture<io.deephaven.proto.backplane.grpc.TerminationNotificationResponse>"
 },
 "path": "io.deephaven.proto.backplane.grpc.SessionServiceGrpc.SessionServiceFutureStub",
 "text": "User supplied Flight.Ticket(s) should begin with 'e' byte followed by an signed little-endian int. The client is only\n allowed to use the positive exportId key-space (client generated exportIds should be greater than 0). The client is\n encouraged to use a packed ranges of ids as this yields the smallest footprint server side for long running sessions.\n The client is responsible for releasing all Flight.Tickets that they create or that were created for them via a gRPC\n call. The documentation for the gRPC call will indicate that the exports must be released. Exports that need to be\n released will always be communicated over the session's ExportNotification stream.\n When a session ends, either explicitly or due to timeout, all exported objects in that session are released\n automatically.\n Some parts of the API return a Flight.Ticket that does not need to be released. It is not an error to attempt to\n release them.",
 "typeName": "class"
}