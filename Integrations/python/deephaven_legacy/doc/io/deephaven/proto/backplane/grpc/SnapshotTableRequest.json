{
 "className": "io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
 "methods": {
  "equals": ":param obj: java.lang.Object\n:return: boolean",
  "getDefaultInstance": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
  "getDefaultInstanceForType": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
  "getDescriptor": ":return: com.google.protobuf.Descriptors.Descriptor",
  "getDoInitialSnapshot": "Whether to take an initial snapshot (passed to table.snapshot function).\n \nbool do_initial_snapshot = 4;\n\n:return: (boolean) The doInitialSnapshot.",
  "getLeftId": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: (io.deephaven.proto.backplane.grpc.TableReference) The leftId.",
  "getLeftIdOrBuilder": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.TableReferenceOrBuilder",
  "getParserForType": ":return: com.google.protobuf.Parser<io.deephaven.proto.backplane.grpc.SnapshotTableRequest>",
  "getResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (io.deephaven.proto.backplane.grpc.Ticket) The resultId.",
  "getResultIdOrBuilder": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.TicketOrBuilder",
  "getRightId": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: (io.deephaven.proto.backplane.grpc.TableReference) The rightId.",
  "getRightIdOrBuilder": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: io.deephaven.proto.backplane.grpc.TableReferenceOrBuilder",
  "getSerializedSize": ":return: int",
  "getStampColumns": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param index: (int) - The index of the element to return.\n:return: (java.lang.String) The stampColumns at the given index.",
  "getStampColumnsBytes": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:param index: (int) - The index of the value to return.\n:return: (com.google.protobuf.ByteString) The bytes of the stampColumns at the given index.",
  "getStampColumnsCount": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:return: (int) The count of stampColumns.",
  "getStampColumnsList": "Which columns to take from the left table (can be renamed if desired).\n \nrepeated string stamp_columns = 5;\n\n:return: (com.google.protobuf.ProtocolStringList) A list containing the stampColumns.",
  "getUnknownFields": ":return: com.google.protobuf.UnknownFieldSet",
  "hasLeftId": "The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.\n \n.io.deephaven.proto.backplane.grpc.TableReference left_id = 2;\n\n:return: (boolean) Whether the leftId field is set.",
  "hasResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (boolean) Whether the resultId field is set.",
  "hasRightId": "The table to pass into the snapshot function.\n \n.io.deephaven.proto.backplane.grpc.TableReference right_id = 3;\n\n:return: (boolean) Whether the rightId field is set.",
  "hashCode": ":return: int",
  "isInitialized": ":return: boolean",
  "newBuilder": "*Overload 1*  \n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder\n  \n*Overload 2*  \n  :param prototype: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "newBuilderForType": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "parseDelimitedFrom": "*Overload 1*  \n  :param input: java.io.InputStream\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 2*  \n  :param input: java.io.InputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
  "parseFrom": "*Overload 1*  \n  :param data: java.nio.ByteBuffer\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 2*  \n  :param data: java.nio.ByteBuffer\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 3*  \n  :param data: com.google.protobuf.ByteString\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 4*  \n  :param data: com.google.protobuf.ByteString\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 5*  \n  :param data: byte[]\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 6*  \n  :param data: byte[]\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 7*  \n  :param input: java.io.InputStream\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 8*  \n  :param input: java.io.InputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 9*  \n  :param input: com.google.protobuf.CodedInputStream\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest\n  \n*Overload 10*  \n  :param input: com.google.protobuf.CodedInputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
  "parser": ":return: com.google.protobuf.Parser<io.deephaven.proto.backplane.grpc.SnapshotTableRequest>",
  "toBuilder": ":return: io.deephaven.proto.backplane.grpc.SnapshotTableRequest.Builder",
  "writeTo": ":param output: com.google.protobuf.CodedOutputStream"
 },
 "path": "io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
 "text": "Protobuf type io.deephaven.proto.backplane.grpc.SnapshotTableRequest",
 "typeName": "class"
}