{
 "className": "io.deephaven.proto.backplane.grpc.ComboAggregateRequestOrBuilder",
 "methods": {
  "getAggregates": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:param index: int\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate",
  "getAggregatesCount": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: int",
  "getAggregatesList": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: java.util.List<io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate>",
  "getAggregatesOrBuilder": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:param index: int\n:return: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggregateOrBuilder",
  "getAggregatesOrBuilderList": "repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;\n\n:return: java.util.List<? extends io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggregateOrBuilder>",
  "getForceCombo": "don't use direct single-aggregate table operations even if there is only a single aggregate\n \nbool force_combo = 5;\n\n:return: (boolean) The forceCombo.",
  "getGroupByColumns": "repeated string group_by_columns = 4;\n\n:param index: (int) - The index of the element to return.\n:return: (java.lang.String) The groupByColumns at the given index.",
  "getGroupByColumnsBytes": "repeated string group_by_columns = 4;\n\n:param index: (int) - The index of the value to return.\n:return: (com.google.protobuf.ByteString) The bytes of the groupByColumns at the given index.",
  "getGroupByColumnsCount": "repeated string group_by_columns = 4;\n\n:return: (int) The count of groupByColumns.",
  "getGroupByColumnsList": "repeated string group_by_columns = 4;\n\n:return: (java.util.List<java.lang.String>) A list containing the groupByColumns.",
  "getResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (io.deephaven.proto.backplane.grpc.Ticket) The resultId.",
  "getResultIdOrBuilder": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: io.deephaven.proto.backplane.grpc.TicketOrBuilder",
  "getSourceId": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: (io.deephaven.proto.backplane.grpc.TableReference) The sourceId.",
  "getSourceIdOrBuilder": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: io.deephaven.proto.backplane.grpc.TableReferenceOrBuilder",
  "hasResultId": ".io.deephaven.proto.backplane.grpc.Ticket result_id = 1;\n\n:return: (boolean) Whether the resultId field is set.",
  "hasSourceId": ".io.deephaven.proto.backplane.grpc.TableReference source_id = 2;\n\n:return: (boolean) Whether the sourceId field is set."
 },
 "path": "io.deephaven.proto.backplane.grpc.ComboAggregateRequestOrBuilder",
 "typeName": "interface"
}