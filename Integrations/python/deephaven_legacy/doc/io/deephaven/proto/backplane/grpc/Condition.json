{
 "className": "io.deephaven.proto.backplane.grpc.Condition",
 "methods": {
  "equals": ":param obj: java.lang.Object\n:return: boolean",
  "getAnd": ".io.deephaven.proto.backplane.grpc.AndCondition and = 1;\n\n:return: (io.deephaven.proto.backplane.grpc.AndCondition) The and.",
  "getAndOrBuilder": ".io.deephaven.proto.backplane.grpc.AndCondition and = 1;\n\n:return: io.deephaven.proto.backplane.grpc.AndConditionOrBuilder",
  "getCompare": ".io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;\n\n:return: (io.deephaven.proto.backplane.grpc.CompareCondition) The compare.",
  "getCompareOrBuilder": ".io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;\n\n:return: io.deephaven.proto.backplane.grpc.CompareConditionOrBuilder",
  "getContains": ".io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;\n\n:return: (io.deephaven.proto.backplane.grpc.ContainsCondition) The contains.",
  "getContainsOrBuilder": ".io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;\n\n:return: io.deephaven.proto.backplane.grpc.ContainsConditionOrBuilder",
  "getDataCase": ":return: io.deephaven.proto.backplane.grpc.Condition.DataCase",
  "getDefaultInstance": ":return: io.deephaven.proto.backplane.grpc.Condition",
  "getDefaultInstanceForType": ":return: io.deephaven.proto.backplane.grpc.Condition",
  "getDescriptor": ":return: com.google.protobuf.Descriptors.Descriptor",
  "getIn": ".io.deephaven.proto.backplane.grpc.InCondition in = 5;\n\n:return: (io.deephaven.proto.backplane.grpc.InCondition) The in.",
  "getInOrBuilder": ".io.deephaven.proto.backplane.grpc.InCondition in = 5;\n\n:return: io.deephaven.proto.backplane.grpc.InConditionOrBuilder",
  "getInvoke": ".io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;\n\n:return: (io.deephaven.proto.backplane.grpc.InvokeCondition) The invoke.",
  "getInvokeOrBuilder": ".io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;\n\n:return: io.deephaven.proto.backplane.grpc.InvokeConditionOrBuilder",
  "getIsNull": ".io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;\n\n:return: (io.deephaven.proto.backplane.grpc.IsNullCondition) The isNull.",
  "getIsNullOrBuilder": ".io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;\n\n:return: io.deephaven.proto.backplane.grpc.IsNullConditionOrBuilder",
  "getMatches": ".io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;\n\n:return: (io.deephaven.proto.backplane.grpc.MatchesCondition) The matches.",
  "getMatchesOrBuilder": ".io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;\n\n:return: io.deephaven.proto.backplane.grpc.MatchesConditionOrBuilder",
  "getNot": ".io.deephaven.proto.backplane.grpc.NotCondition not = 3;\n\n:return: (io.deephaven.proto.backplane.grpc.NotCondition) The not.",
  "getNotOrBuilder": ".io.deephaven.proto.backplane.grpc.NotCondition not = 3;\n\n:return: io.deephaven.proto.backplane.grpc.NotConditionOrBuilder",
  "getOr": ".io.deephaven.proto.backplane.grpc.OrCondition or = 2;\n\n:return: (io.deephaven.proto.backplane.grpc.OrCondition) The or.",
  "getOrOrBuilder": ".io.deephaven.proto.backplane.grpc.OrCondition or = 2;\n\n:return: io.deephaven.proto.backplane.grpc.OrConditionOrBuilder",
  "getParserForType": ":return: com.google.protobuf.Parser<io.deephaven.proto.backplane.grpc.Condition>",
  "getSearch": ".io.deephaven.proto.backplane.grpc.SearchCondition search = 10;\n\n:return: (io.deephaven.proto.backplane.grpc.SearchCondition) The search.",
  "getSearchOrBuilder": ".io.deephaven.proto.backplane.grpc.SearchCondition search = 10;\n\n:return: io.deephaven.proto.backplane.grpc.SearchConditionOrBuilder",
  "getSerializedSize": ":return: int",
  "getUnknownFields": ":return: com.google.protobuf.UnknownFieldSet",
  "hasAnd": ".io.deephaven.proto.backplane.grpc.AndCondition and = 1;\n\n:return: (boolean) Whether the and field is set.",
  "hasCompare": ".io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;\n\n:return: (boolean) Whether the compare field is set.",
  "hasContains": ".io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;\n\n:return: (boolean) Whether the contains field is set.",
  "hasIn": ".io.deephaven.proto.backplane.grpc.InCondition in = 5;\n\n:return: (boolean) Whether the in field is set.",
  "hasInvoke": ".io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;\n\n:return: (boolean) Whether the invoke field is set.",
  "hasIsNull": ".io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;\n\n:return: (boolean) Whether the isNull field is set.",
  "hasMatches": ".io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;\n\n:return: (boolean) Whether the matches field is set.",
  "hasNot": ".io.deephaven.proto.backplane.grpc.NotCondition not = 3;\n\n:return: (boolean) Whether the not field is set.",
  "hasOr": ".io.deephaven.proto.backplane.grpc.OrCondition or = 2;\n\n:return: (boolean) Whether the or field is set.",
  "hasSearch": ".io.deephaven.proto.backplane.grpc.SearchCondition search = 10;\n\n:return: (boolean) Whether the search field is set.",
  "hashCode": ":return: int",
  "isInitialized": ":return: boolean",
  "newBuilder": "*Overload 1*  \n  :return: io.deephaven.proto.backplane.grpc.Condition.Builder\n  \n*Overload 2*  \n  :param prototype: io.deephaven.proto.backplane.grpc.Condition\n  :return: io.deephaven.proto.backplane.grpc.Condition.Builder",
  "newBuilderForType": ":return: io.deephaven.proto.backplane.grpc.Condition.Builder",
  "parseDelimitedFrom": "*Overload 1*  \n  :param input: java.io.InputStream\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 2*  \n  :param input: java.io.InputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.Condition",
  "parseFrom": "*Overload 1*  \n  :param data: java.nio.ByteBuffer\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 2*  \n  :param data: java.nio.ByteBuffer\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 3*  \n  :param data: com.google.protobuf.ByteString\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 4*  \n  :param data: com.google.protobuf.ByteString\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 5*  \n  :param data: byte[]\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 6*  \n  :param data: byte[]\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 7*  \n  :param input: java.io.InputStream\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 8*  \n  :param input: java.io.InputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 9*  \n  :param input: com.google.protobuf.CodedInputStream\n  :return: io.deephaven.proto.backplane.grpc.Condition\n  \n*Overload 10*  \n  :param input: com.google.protobuf.CodedInputStream\n  :param extensionRegistry: com.google.protobuf.ExtensionRegistryLite\n  :return: io.deephaven.proto.backplane.grpc.Condition",
  "parser": ":return: com.google.protobuf.Parser<io.deephaven.proto.backplane.grpc.Condition>",
  "toBuilder": ":return: io.deephaven.proto.backplane.grpc.Condition.Builder",
  "writeTo": ":param output: com.google.protobuf.CodedOutputStream"
 },
 "path": "io.deephaven.proto.backplane.grpc.Condition",
 "text": "Protobuf type io.deephaven.proto.backplane.grpc.Condition",
 "typeName": "class"
}