{
 "className": "io.deephaven.numerics.suanshu.SuanShuIntegration$AbstractMatrix",
 "methods": {
  "ONE": ":return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "ZERO": ":return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "add": ":param matrix: com.numericalmethod.suanshu.matrix.doubles.Matrix\n:return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "deepCopy": ":return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "get": "Gets the value at rowth indexed row (1-based) and columnth indexed (1-based) column\n from matrix.\n\n:param row: (int) - 1-based row-index\n:param column: (int) - 1-based column-index\n:return: (double) value at rowth indexed row (1-based) and columnth indexed (1-based) column",
  "getColumn": "Gets the columnth indexed (1-based) column-vector from matrix.\n\n:param column: (int) - 1-based index\n:return: (com.numericalmethod.suanshu.vector.doubles.Vector) vector at columnth indexed (1-based)",
  "getRow": "Gets the rowth indexed (1-based) row-vector from matrix.\n\n:param row: (int) - 1-based index\n:return: (com.numericalmethod.suanshu.vector.doubles.Vector) vector at rowth indexed (1-based)",
  "minus": ":param matrix: com.numericalmethod.suanshu.matrix.doubles.Matrix\n:return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "multiply": "*Overload 1*  \n  :param vector: com.numericalmethod.suanshu.vector.doubles.Vector\n  :return: com.numericalmethod.suanshu.vector.doubles.Vector\n  \n*Overload 2*  \n  :param matrix: com.numericalmethod.suanshu.matrix.doubles.Matrix\n  :return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "opposite": ":return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "scaled": ":param v: double\n:return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "set": ":param row: int\n:param column: int\n:param value: double",
  "show": "Returns the String representation of whole Matrix\n\n:return: (java.lang.String) String representation of Matrix",
  "t": ":return: com.numericalmethod.suanshu.matrix.doubles.Matrix",
  "toString": "Returns the compact String representation of Matrix. If you want to have String\n representation of the whole Matrix, please use show() method.\n\n:return: (java.lang.String) Compact string representation of Matrix"
 },
 "path": "io.deephaven.numerics.suanshu.SuanShuIntegration.AbstractMatrix",
 "text": "The abstract implementation of Matrix.",
 "typeName": "class"
}