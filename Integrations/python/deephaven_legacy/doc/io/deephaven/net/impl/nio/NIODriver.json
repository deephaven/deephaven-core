{
 "className": "io.deephaven.net.impl.nio.NIODriver",
 "methods": {
  "getLogger": "Return the scheduler used by the NIO driver\n\n:return: io.deephaven.io.logger.Logger",
  "getScheduler": "Return the scheduler used by the NIO driver\n\n:return: io.deephaven.io.sched.Scheduler",
  "init": "one-time initialization\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param log: io.deephaven.io.logger.Logger",
  "junit_getCreated": ":return: int",
  "junit_getDestroyed": ":return: int",
  "junit_getWaiting": ":return: int",
  "run": "the threads' run method just does an endless loop, trying to become the leader whenever it can",
  "shutdown": "Shut down, and wait for all threads to terminate. This method is really just for testing; it's a bad idea to do\n this in production because waiting for threads to terminate is prone to deadlocks. If desired, though, it can be\n called from an AbstractService shutdown hook installed in init().\n\n:param maxWait: long\n:return: boolean",
  "summary": "return a string telling how many threads are doing what\n\n:return: java.lang.String"
 },
 "path": "io.deephaven.net.impl.nio.NIODriver",
 "typeName": "class"
}