{
 "className": "io.deephaven.process.SystemCpuOshi",
 "methods": {
  "from": ":param centralProcessor: oshi.hardware.CentralProcessor\n:return: io.deephaven.process.SystemCpuOshi",
  "getFamily": ":return: (java.lang.String) the family",
  "getLogicalProcessorCount": "Get the number of logical CPUs available for processing. This value may be higher than physical CPUs if\n hyperthreading is enabled.\n\n:return: (int) The number of logical CPUs available.",
  "getModel": ":return: (java.lang.String) the model",
  "getName": "Name, eg. Intel(R) Core(TM)2 Duo CPU T7300 @ 2.00GHz\n\n:return: (java.lang.String) Processor name.",
  "getPhysicalPackageCount": "Get the number of packages/sockets in the system. A single package may contain multiple cores.\n\n:return: (int) The number of physical packages available.",
  "getPhysicalProcessorCount": "Get the number of physical CPUs/cores available for processing.\n\n:return: (int) The number of physical CPUs available.",
  "getProcessorID": "Gets the Processor ID. This is a hexidecimal string representing an 8-byte value, normally obtained using the\n CPUID opcode with the EAX register set to 1. The first four bytes are the resulting contents of the EAX register,\n which is the Processor signature, represented in human-readable form by #getIdentifier() . The remaining\n four bytes are the contents of the EDX register, containing feature flags.\n\n NOTE: The order of returned bytes is platform and software dependent. Values may be in either Big Endian or\n Little Endian order.\n\n:return: (java.lang.String) A string representing the Processor ID",
  "getStepping": ":return: (java.lang.String) the stepping",
  "getVendor": "Processor vendor.\n\n:return: (java.lang.String) vendor string.",
  "getVendorFreq": "Vendor frequency (in Hz), eg. for processor named Intel(R) Core(TM)2 Duo CPU T7300 @ 2.00GHz the vendor frequency\n is 2000000000.\n\n:return: (java.util.OptionalLong) Processor frequency, if known",
  "is64bit": "Is CPU 64bit?\n\n:return: (boolean) True if cpu is 64bit.",
  "traverse": "Traverse this property set and output the property key/values to the given visitor.\n \n Callers should typically prefer to call PropertyVisitor.visitProperties(PropertySet), as the inversion of\n logic allows the visitor (the more stateful object) to potentially perform initialization logic and traverse more\n efficiently.\n\n:param visitor: (io.deephaven.properties.PropertyVisitor) - the visitor"
 },
 "path": "io.deephaven.process.SystemCpuOshi",
 "text": "The Central Processing Unit (CPU) or the processor is the portion of a computer system that carries out the\n instructions of a computer program, and is the primary element carrying out the computer's functions.",
 "typeName": "class"
}