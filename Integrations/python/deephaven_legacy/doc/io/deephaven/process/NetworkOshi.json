{
 "className": "io.deephaven.process.NetworkOshi",
 "methods": {
  "from": ":param network: oshi.software.os.NetworkParams\n:return: io.deephaven.process.NetworkOshi",
  "getDnsServers": "getDnsServers.\n \n\n:return: (io.deephaven.process.DnsServers) Gets DNS servers",
  "getDomainName": "getDomainName.\n \n\n:return: (java.util.Optional<java.lang.String>) Gets domain name",
  "getHostName": "getHostName.\n \n\n:return: (java.lang.String) Gets host name",
  "getIpv4DefaultGateway": "getIpv4DefaultGateway.\n \n\n:return: (java.util.Optional<java.lang.String>) Gets default gateway(routing destination for 0.0.0.0/0) for IPv4",
  "getIpv6DefaultGateway": "getIpv6DefaultGateway.\n \n\n:return: (java.util.Optional<java.lang.String>) Gets default gateway(routing destination for ::/0) for IPv6",
  "traverse": "Traverse this property set and output the property key/values to the given visitor.\n \n Callers should typically prefer to call PropertyVisitor.visitProperties(PropertySet), as the inversion of\n logic allows the visitor (the more stateful object) to potentially perform initialization logic and traverse more\n efficiently.\n\n:param visitor: (io.deephaven.properties.PropertyVisitor) - the visitor"
 },
 "path": "io.deephaven.process.NetworkOshi",
 "text": "NetworkParams presents network parameters of running OS, such as DNS, host name etc.",
 "typeName": "class"
}