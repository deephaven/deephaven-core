{
 "className": "io.deephaven.server.session.SessionState$ExportBuilder",
 "methods": {
  "getExport": ":return: (io.deephaven.server.session.SessionState.ExportObject<SessionState.ExportBuilder.T>) the export object that this builder is building",
  "getExportId": ":return: (int) the export id of this export or SessionState.NON_EXPORT_ID if is a non-export",
  "onError": "**Incompatible overloads text - text from the first overload:**\n\nInvoke this method to set the error handler to be notified if this export fails. Only one error handler may\n be set.\n \n\n Not synchronized, it is expected that the provided callback handles thread safety itself.\n\n*Overload 1*  \n  :param errorHandler: (io.deephaven.server.session.SessionState.ExportErrorHandler) - the error handler to be notified\n  :return: (io.deephaven.server.session.SessionState.ExportBuilder<SessionState.ExportBuilder.T>) this builder\n  \n*Overload 2*  \n  :param streamObserver: (io.grpc.stub.StreamObserver<?>) - the streamObserver to be notified of any error\n  :return: (io.deephaven.server.session.SessionState.ExportBuilder<SessionState.ExportBuilder.T>) this builder",
  "onErrorHandler": "Invoke this method to set the error handler to be notified if this export fails. Only one error handler may\n be set.\n \n\n Not synchronized, it is expected that the provided callback handles thread safety itself.\n\n:param errorHandler: (io.deephaven.server.session.SessionState.ExportErrorGrpcHandler) - the error handler to be notified\n:return: (io.deephaven.server.session.SessionState.ExportBuilder<SessionState.ExportBuilder.T>) this builder",
  "require": "Invoke this method to set the required dependencies for this export. A parent may be null to simplify usage\n of optional export dependencies.\n\n*Overload 1*  \n  :param dependencies: (io.deephaven.server.session.SessionState.ExportObject<?>...) - the parent dependencies\n  :return: (io.deephaven.server.session.SessionState.ExportBuilder<SessionState.ExportBuilder.T>) this builder\n  \n*Overload 2*  \n  Note: Java generics information - <S>\n  \n  :param dependencies: (java.util.List<io.deephaven.server.session.SessionState.ExportObject<S>>) - the parent dependencies\n  :return: (io.deephaven.server.session.SessionState.ExportBuilder<SessionState.ExportBuilder.T>) this builder",
  "requiresSerialQueue": "Some exports must happen serially w.r.t. other exports. For example, an export that acquires the exclusive\n UGP lock. We enqueue these dependencies independently of the otherwise regularly concurrent exports.\n\n:return: (io.deephaven.server.session.SessionState.ExportBuilder<SessionState.ExportBuilder.T>) this builder",
  "submit": "**Incompatible overloads text - text from the first overload:**\n\nThis method is the final method for submitting an export to the session. The provided callable is enqueued on\n the scheduler when all dependencies have been satisfied. Only the dependencies supplied to the builder are\n guaranteed to be resolved when the exportMain is executing.\n\n Warning! It is the SessionState owner's responsibility to wait to release any dependency until after this\n exportMain callable/runnable has complete.\n\n*Overload 1*  \n  :param exportMain: (java.util.concurrent.Callable<SessionState.ExportBuilder.T>) - the callable that generates the export\n  :return: (io.deephaven.server.session.SessionState.ExportObject<SessionState.ExportBuilder.T>) the submitted export object\n  \n*Overload 2*  \n  :param exportMain: (java.lang.Runnable) - the runnable to execute once dependencies have resolved\n  :return: (io.deephaven.server.session.SessionState.ExportObject<SessionState.ExportBuilder.T>) the submitted export object"
 },
 "path": "io.deephaven.server.session.SessionState.ExportBuilder",
 "typeName": "class"
}