{
 "className": "io.deephaven.server.session.SessionServiceGrpcImpl",
 "methods": {
  "closeSession": "Proactively close an open session. Sessions will automatically close on timeout. When a session is closed, all\n unreleased exports will be automatically released.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HandshakeRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.CloseSessionResponse>",
  "exportFromTicket": "Makes a copy from a source ticket to a client managed result ticket. The source ticket does not need to be\n a client managed ticket.\n \n\n:param request: io.deephaven.proto.backplane.grpc.ExportRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.ExportResponse>",
  "exportNotifications": "Establish a stream to manage all session exports, including those lost due to partially complete rpc calls.\n New streams will flush notifications for all un-released exports, prior to seeing any new or updated exports\n for all live exports. After the refresh of existing state, subscribers will receive notifications of new and\n updated exports. An export id of zero will be sent to indicate all pre-existing exports have been sent.\n \n\n:param request: io.deephaven.proto.backplane.grpc.ExportNotificationRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.ExportNotification>",
  "newSession": "Handshake between client and server to create a new session. The response includes a metadata header name and the\n token to send on every subsequent request. The auth mechanisms here are unary to best support grpc-web.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HandshakeRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.HandshakeResponse>",
  "refreshSessionToken": "Keep-alive a given token to ensure that a session is not cleaned prematurely. The response may include an updated\n token that should replace the existing token for subsequent requests.\n \n\n:param request: io.deephaven.proto.backplane.grpc.HandshakeRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.HandshakeResponse>",
  "release": "Attempts to release an export by its ticket. Returns true if an existing export was found. It is the client's\n responsibility to release all resources they no longer want the server to hold on to. Proactively cancels work; do\n not release a ticket that is needed by dependent work that has not yet finished\n (i.e. the dependencies that are staying around should first be in EXPORTED state).\n \n\n:param request: io.deephaven.proto.backplane.grpc.ReleaseRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.ReleaseResponse>",
  "terminationNotification": "Receive a best-effort message on-exit indicating why this server is exiting. Reception of this message cannot be\n guaranteed.\n \n\n:param request: io.deephaven.proto.backplane.grpc.TerminationNotificationRequest\n:param responseObserver: io.grpc.stub.StreamObserver<io.deephaven.proto.backplane.grpc.TerminationNotificationResponse>"
 },
 "path": "io.deephaven.server.session.SessionServiceGrpcImpl",
 "typeName": "class"
}