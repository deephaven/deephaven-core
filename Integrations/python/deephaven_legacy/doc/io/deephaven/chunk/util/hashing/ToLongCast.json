{
 "className": "io.deephaven.chunk.util.hashing.ToLongCast",
 "methods": {
  "apply": "Apply this function to the input chunk, returning an output chunk.\n\n The result is owned by this ToLongFunctor.\n\n:param input: (io.deephaven.chunk.Chunk<ToLongCast.T>) - the chunk to transform\n:return: (io.deephaven.chunk.LongChunk<ToLongCast.T>) the result LongChunk",
  "makeToLongCast": "Create an LongFunctor that casts the values in an input chunk to an long.  An optional offset is applied to each\n value after the cast.\n\nNote: Java generics information - <T extends io.deephaven.chunk.attributes.Any>\n\n:param type: (io.deephaven.chunk.ChunkType) - the type of chunk, must be an integral primitive type\n:param size: (int) - the size of the largest chunk that can be cast by this functor\n:param offset: (long) - an offset to add to each casted result\n:return: (io.deephaven.chunk.util.hashing.ToLongFunctor<T>) a ToLongFunctor that can be applied to chunks of type in order to produce an LongChunk of values"
 },
 "path": "io.deephaven.chunk.util.hashing.ToLongCast",
 "typeName": "interface"
}