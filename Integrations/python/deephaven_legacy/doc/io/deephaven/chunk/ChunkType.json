{
 "className": "io.deephaven.chunk.ChunkType",
 "methods": {
  "chunkArrayBuilder": ":return: java.util.function.IntFunction<io.deephaven.chunk.Chunk[]>",
  "chunkChunkWrap": "*Overload 1*  \n  Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n  \n  :param array: io.deephaven.chunk.Chunk<ATTR>[]\n  :return: io.deephaven.chunk.ChunkChunk<ATTR>\n  \n*Overload 2*  \n  Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n  \n  :param array: io.deephaven.chunk.Chunk<ATTR>[]\n  :param offset: int\n  :param capacity: int\n  :return: io.deephaven.chunk.ChunkChunk<ATTR>",
  "chunkWrap": "*Overload 1*  \n  Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n  \n  :param array: java.lang.Object\n  :return: io.deephaven.chunk.Chunk<ATTR>\n  \n*Overload 2*  \n  Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n  \n  :param array: java.lang.Object\n  :param offset: int\n  :param capacity: int\n  :return: io.deephaven.chunk.Chunk<ATTR>",
  "fromElementType": ":param elementType: java.lang.Class\n:return: io.deephaven.chunk.ChunkType",
  "getEmptyChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:return: io.deephaven.chunk.Chunk<ATTR>",
  "getEmptyChunkChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:return: io.deephaven.chunk.ChunkChunk<ATTR>",
  "makeArray": ":param capacity: int\n:return: java.lang.Object",
  "makeChunkArray": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:param capacity: int\n:return: io.deephaven.chunk.Chunk<ATTR>[]",
  "makeResettableChunkChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:return: io.deephaven.chunk.ResettableChunkChunk<ATTR>",
  "makeResettableReadOnlyChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:return: io.deephaven.chunk.ResettableReadOnlyChunk<ATTR>",
  "makeResettableWritableChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:return: io.deephaven.chunk.ResettableWritableChunk<ATTR>",
  "makeResettableWritableChunkChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:return: io.deephaven.chunk.ResettableWritableChunkChunk<ATTR>",
  "makeWritableChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:param capacity: int\n:return: io.deephaven.chunk.WritableChunk<ATTR>",
  "makeWritableChunkChunk": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:param capacity: int\n:return: io.deephaven.chunk.WritableChunkChunk<ATTR>",
  "valueOf": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)\n\n:param name: (java.lang.String) - the name of the enum constant to be returned.\n:return: (io.deephaven.chunk.ChunkType) the enum constant with the specified name",
  "values": "Returns an array containing the constants of this enum type, in\nthe order they are declared.\n\n:return: (io.deephaven.chunk.ChunkType[]) an array containing the constants of this enum type, in the order they are declared",
  "writableChunkArrayBuilder": ":return: java.util.function.IntFunction<io.deephaven.chunk.WritableChunk[]>",
  "writableChunkChunkWrap": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:param array: io.deephaven.chunk.WritableChunk<ATTR>[]\n:param offset: int\n:param capacity: int\n:return: io.deephaven.chunk.WritableChunkChunk<ATTR>",
  "writableChunkWrap": "Note: Java generics information - <ATTR extends io.deephaven.chunk.attributes.Any>\n\n:param array: java.lang.Object\n:param offset: int\n:param capacity: int\n:return: io.deephaven.chunk.WritableChunk<ATTR>"
 },
 "path": "io.deephaven.chunk.ChunkType",
 "typeName": "enum"
}