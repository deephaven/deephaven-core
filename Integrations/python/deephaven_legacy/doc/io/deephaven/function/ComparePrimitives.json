{
 "className": "io.deephaven.function.ComparePrimitives",
 "methods": {
  "max": "**Incompatible overloads text - text from the first overload:**\n\nReturns the maximum. Null and NaN values are excluded.\n\n*Overload 1*  \n  :param v1: (byte) - first value.\n  :param v2: (byte) - second value.\n  :return: (byte) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 2*  \n  :param v1: (byte) - first value.\n  :param v2: (short) - second value.\n  :return: (short) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 3*  \n  :param v1: (byte) - first value.\n  :param v2: (int) - second value.\n  :return: (int) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 4*  \n  :param v1: (byte) - first value.\n  :param v2: (long) - second value.\n  :return: (long) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 5*  \n  :param v1: (byte) - first value.\n  :param v2: (float) - second value.\n  :return: (float) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 6*  \n  :param v1: (byte) - first value.\n  :param v2: (double) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 7*  \n  :param v1: (short) - first value.\n  :param v2: (byte) - second value.\n  :return: (short) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 8*  \n  :param v1: (short) - first value.\n  :param v2: (short) - second value.\n  :return: (short) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 9*  \n  :param v1: (short) - first value.\n  :param v2: (int) - second value.\n  :return: (int) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 10*  \n  :param v1: (short) - first value.\n  :param v2: (long) - second value.\n  :return: (long) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 11*  \n  :param v1: (short) - first value.\n  :param v2: (float) - second value.\n  :return: (float) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 12*  \n  :param v1: (short) - first value.\n  :param v2: (double) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 13*  \n  :param v1: (int) - first value.\n  :param v2: (byte) - second value.\n  :return: (int) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 14*  \n  :param v1: (int) - first value.\n  :param v2: (short) - second value.\n  :return: (int) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 15*  \n  :param v1: (int) - first value.\n  :param v2: (int) - second value.\n  :return: (int) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 16*  \n  :param v1: (int) - first value.\n  :param v2: (long) - second value.\n  :return: (long) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 17*  \n  :param v1: (int) - first value.\n  :param v2: (float) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 18*  \n  :param v1: (int) - first value.\n  :param v2: (double) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 19*  \n  :param v1: (long) - first value.\n  :param v2: (byte) - second value.\n  :return: (long) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 20*  \n  :param v1: (long) - first value.\n  :param v2: (long) - second value.\n  :return: (long) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 21*  \n  :param v1: (long) - first value.\n  :param v2: (int) - second value.\n  :return: (long) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 22*  \n  :param v1: (long) - first value.\n  :param v2: (short) - second value.\n  :return: (long) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 23*  \n  :param v1: (long) - first value.\n  :param v2: (float) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 24*  \n  :param v1: (long) - first value.\n  :param v2: (double) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 25*  \n  :param v1: (float) - first value.\n  :param v2: (byte) - second value.\n  :return: (float) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 26*  \n  :param v1: (float) - first value.\n  :param v2: (short) - second value.\n  :return: (float) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 27*  \n  :param v1: (float) - first value.\n  :param v2: (int) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 28*  \n  :param v1: (float) - first value.\n  :param v2: (long) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 29*  \n  :param v1: (float) - first value.\n  :param v2: (float) - second value.\n  :return: (float) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 30*  \n  :param v1: (float) - first value.\n  :param v2: (double) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 31*  \n  :param v1: (double) - first value.\n  :param v2: (byte) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 32*  \n  :param v1: (double) - first value.\n  :param v2: (short) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 33*  \n  :param v1: (double) - first value.\n  :param v2: (int) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 34*  \n  :param v1: (double) - first value.\n  :param v2: (long) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 35*  \n  :param v1: (double) - first value.\n  :param v2: (float) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 36*  \n  :param v1: (double) - first value.\n  :param v2: (double) - second value.\n  :return: (double) maximum of the valid input values. If both inputs are invalid, null is returned.",
  "min": "**Incompatible overloads text - text from the first overload:**\n\nReturns the maximum. Null and NaN values are excluded.\n\n*Overload 1*  \n  :param v1: (byte) - first value.\n  :param v2: (byte) - second value.\n  :return: (byte) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 2*  \n  :param v1: (byte) - first value.\n  :param v2: (short) - second value.\n  :return: (short) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 3*  \n  :param v1: (byte) - first value.\n  :param v2: (int) - second value.\n  :return: (int) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 4*  \n  :param v1: (byte) - first value.\n  :param v2: (long) - second value.\n  :return: (long) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 5*  \n  :param v1: (byte) - first value.\n  :param v2: (float) - second value.\n  :return: (float) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 6*  \n  :param v1: (byte) - first value.\n  :param v2: (double) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 7*  \n  :param v1: (short) - first value.\n  :param v2: (byte) - second value.\n  :return: (short) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 8*  \n  :param v1: (short) - first value.\n  :param v2: (short) - second value.\n  :return: (short) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 9*  \n  :param v1: (short) - first value.\n  :param v2: (int) - second value.\n  :return: (int) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 10*  \n  :param v1: (short) - first value.\n  :param v2: (long) - second value.\n  :return: (long) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 11*  \n  :param v1: (short) - first value.\n  :param v2: (float) - second value.\n  :return: (float) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 12*  \n  :param v1: (short) - first value.\n  :param v2: (double) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 13*  \n  :param v1: (int) - first value.\n  :param v2: (byte) - second value.\n  :return: (int) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 14*  \n  :param v1: (int) - first value.\n  :param v2: (short) - second value.\n  :return: (int) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 15*  \n  :param v1: (int) - first value.\n  :param v2: (int) - second value.\n  :return: (int) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 16*  \n  :param v1: (int) - first value.\n  :param v2: (long) - second value.\n  :return: (long) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 17*  \n  :param v1: (int) - first value.\n  :param v2: (float) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 18*  \n  :param v1: (int) - first value.\n  :param v2: (double) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 19*  \n  :param v1: (long) - first value.\n  :param v2: (byte) - second value.\n  :return: (long) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 20*  \n  :param v1: (long) - first value.\n  :param v2: (long) - second value.\n  :return: (long) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 21*  \n  :param v1: (long) - first value.\n  :param v2: (int) - second value.\n  :return: (long) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 22*  \n  :param v1: (long) - first value.\n  :param v2: (short) - second value.\n  :return: (long) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 23*  \n  :param v1: (long) - first value.\n  :param v2: (float) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 24*  \n  :param v1: (long) - first value.\n  :param v2: (double) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 25*  \n  :param v1: (float) - first value.\n  :param v2: (byte) - second value.\n  :return: (float) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 26*  \n  :param v1: (float) - first value.\n  :param v2: (short) - second value.\n  :return: (float) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 27*  \n  :param v1: (float) - first value.\n  :param v2: (int) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 28*  \n  :param v1: (float) - first value.\n  :param v2: (long) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 29*  \n  :param v1: (float) - first value.\n  :param v2: (float) - second value.\n  :return: (float) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 30*  \n  :param v1: (float) - first value.\n  :param v2: (double) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 31*  \n  :param v1: (double) - first value.\n  :param v2: (byte) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 32*  \n  :param v1: (double) - first value.\n  :param v2: (short) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 33*  \n  :param v1: (double) - first value.\n  :param v2: (int) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 34*  \n  :param v1: (double) - first value.\n  :param v2: (long) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 35*  \n  :param v1: (double) - first value.\n  :param v2: (double) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned.\n  \n*Overload 36*  \n  :param v1: (double) - first value.\n  :param v2: (float) - second value.\n  :return: (double) minimum of the valid input values. If both inputs are invalid, null is returned."
 },
 "path": "io.deephaven.function.ComparePrimitives",
 "text": "A set of commonly used functions for comparing primitive pairs.",
 "typeName": "class"
}