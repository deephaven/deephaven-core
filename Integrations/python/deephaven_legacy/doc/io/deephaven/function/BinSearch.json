{
 "className": "io.deephaven.function.BinSearch",
 "methods": {
  "binSearchIndex": "Performs a binary search to find a key.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T[]) - sorted values to search.  Null values are not supported.\n  :param key: (T) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - sorted values to search.  Null values are not supported.\n  :param key: (T) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 3*  \n  :param values: (char[]) - sorted values to search.  Null values are not supported.\n  :param key: (char) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index immediately before where the key would be inserted.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.CharVector) - sorted values to search.  Null values are not supported.\n  :param key: (char) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 5*  \n  :param values: (byte[]) - sorted values to search.  Null values are not supported.\n  :param key: (byte) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index immediately before where the key would be inserted.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ByteVector) - sorted values to search.  Null values are not supported.\n  :param key: (byte) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 7*  \n  :param values: (short[]) - sorted values to search.  Null values are not supported.\n  :param key: (short) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index immediately before where the key would be inserted.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ShortVector) - sorted values to search.  Null values are not supported.\n  :param key: (short) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 9*  \n  :param values: (int[]) - sorted values to search.  Null values are not supported.\n  :param key: (int) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index immediately before where the key would be inserted.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.IntVector) - sorted values to search.  Null values are not supported.\n  :param key: (int) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 11*  \n  :param values: (long[]) - sorted values to search.  Null values are not supported.\n  :param key: (long) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index immediately before where the key would be inserted.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - sorted values to search.  Null values are not supported.\n  :param key: (long) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 13*  \n  :param values: (float[]) - sorted values to search.  Null values are not supported.\n  :param key: (float) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index immediately before where the key would be inserted.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.FloatVector) - sorted values to search.  Null values are not supported.\n  :param key: (float) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.\n  \n*Overload 15*  \n  :param values: (double[]) - sorted values to search.  Null values are not supported.\n  :param key: (double) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index immediately before where the key would be inserted.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - sorted values to search.  Null values are not supported.\n  :param key: (double) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.",
  "rawBinSearchIndex": "Performs a binary search to find a key.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T[]) - sorted values to search.  Null values are not supported.\n  :param key: (T) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - sorted values to search.  Null values are not supported.\n  :param key: (T) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 3*  \n  :param values: (char[]) - sorted values to search.  Null values are not supported.\n  :param key: (char) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.CharVector) - sorted values to search.  Null values are not supported.\n  :param key: (char) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 5*  \n  :param values: (byte[]) - sorted values to search.  Null values are not supported.\n  :param key: (byte) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ByteVector) - sorted values to search.  Null values are not supported.\n  :param key: (byte) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 7*  \n  :param values: (short[]) - sorted values to search.  Null values are not supported.\n  :param key: (short) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ShortVector) - sorted values to search.  Null values are not supported.\n  :param key: (short) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 9*  \n  :param values: (int[]) - sorted values to search.  Null values are not supported.\n  :param key: (int) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.IntVector) - sorted values to search.  Null values are not supported.\n  :param key: (int) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 11*  \n  :param values: (long[]) - sorted values to search.  Null values are not supported.\n  :param key: (long) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - sorted values to search.  Null values are not supported.\n  :param key: (long) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 13*  \n  :param values: (float[]) - sorted values to search.  Null values are not supported.\n  :param key: (float) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.FloatVector) - sorted values to search.  Null values are not supported.\n  :param key: (float) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 15*  \n  :param values: (double[]) - sorted values to search.  Null values are not supported.\n  :param key: (double) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - sorted values to search.  Null values are not supported.\n  :param key: (double) - key to search for.  Null keys are not supported.\n  :param choiceWhenEquals: (io.deephaven.function.BinSearchAlgo) - algorithm used to resolve ties when performing a binary search.\n  :return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1)."
 },
 "path": "io.deephaven.function.BinSearch",
 "text": "Functions for performing binary searches.",
 "typeName": "class"
}