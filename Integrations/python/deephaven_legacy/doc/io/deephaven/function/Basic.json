{
 "className": "io.deephaven.function.Basic",
 "methods": {
  "array": "Converts a primitive array to a DB array.\n\n*Overload 1*  \n  :param values: (char...) - primitive array\n  :return: (io.deephaven.vector.CharVector) DB array.\n  \n*Overload 2*  \n  :param values: (byte...) - primitive array\n  :return: (io.deephaven.vector.ByteVector) DB array.\n  \n*Overload 3*  \n  :param values: (short...) - primitive array\n  :return: (io.deephaven.vector.ShortVector) DB array.\n  \n*Overload 4*  \n  :param values: (int...) - primitive array\n  :return: (io.deephaven.vector.IntVector) DB array.\n  \n*Overload 5*  \n  :param values: (long...) - primitive array\n  :return: (io.deephaven.vector.LongVector) DB array.\n  \n*Overload 6*  \n  :param values: (float...) - primitive array\n  :return: (io.deephaven.vector.FloatVector) DB array.\n  \n*Overload 7*  \n  :param values: (double...) - primitive array\n  :return: (io.deephaven.vector.DoubleVector) DB array.",
  "arrayObj": "Converts an array to a DB array.\n\nNote: Java generics information - <T>\n\n:param values: (T...) - primitive array\n:return: (io.deephaven.vector.ObjectVector<T>) DB array.",
  "concat": "Returns the concatenation of multiple arrays into a single array.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param values: (T[]...) - values.\n  :return: (T[]) concatenation of multiple arrays into a single array.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>...) - values.\n  :return: (T[]) concatenation of multiple arrays into a single array.\n  \n*Overload 3*  \n  :param values: (char[]...) - values.\n  :return: (char[]) concatenation of multiple arrays into a single array.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.CharVector...) - values.\n  :return: (char[]) concatenation of multiple arrays into a single array.\n  \n*Overload 5*  \n  :param values: (byte[]...) - values.\n  :return: (byte[]) concatenation of multiple arrays into a single array.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ByteVector...) - values.\n  :return: (byte[]) concatenation of multiple arrays into a single array.\n  \n*Overload 7*  \n  :param values: (short[]...) - values.\n  :return: (short[]) concatenation of multiple arrays into a single array.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ShortVector...) - values.\n  :return: (short[]) concatenation of multiple arrays into a single array.\n  \n*Overload 9*  \n  :param values: (int[]...) - values.\n  :return: (int[]) concatenation of multiple arrays into a single array.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.IntVector...) - values.\n  :return: (int[]) concatenation of multiple arrays into a single array.\n  \n*Overload 11*  \n  :param values: (long[]...) - values.\n  :return: (long[]) concatenation of multiple arrays into a single array.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector...) - values.\n  :return: (long[]) concatenation of multiple arrays into a single array.\n  \n*Overload 13*  \n  :param values: (float[]...) - values.\n  :return: (float[]) concatenation of multiple arrays into a single array.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.FloatVector...) - values.\n  :return: (float[]) concatenation of multiple arrays into a single array.\n  \n*Overload 15*  \n  :param values: (double[]...) - values.\n  :return: (double[]) concatenation of multiple arrays into a single array.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector...) - values.\n  :return: (double[]) concatenation of multiple arrays into a single array.",
  "count": "Counts the number of non-null values.\n\n*Overload 1*  \n  :param values: (char...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 3*  \n  :param values: (byte...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 7*  \n  :param values: (int...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 9*  \n  :param values: (long...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 11*  \n  :param values: (float...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 13*  \n  :param values: (double...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) number of non-null values.",
  "countDistinct": "Counts the number of distinct elements in the array.\n\n*Overload 1*  \n  :param values: (char...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 3*  \n  :param values: (char[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 5*  \n  :param values: (byte...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 7*  \n  :param values: (byte[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 9*  \n  :param values: (short...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 11*  \n  :param values: (short[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 13*  \n  :param values: (int...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 15*  \n  :param values: (int[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 17*  \n  :param values: (long...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 19*  \n  :param values: (long[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 21*  \n  :param values: (float...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 22*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 23*  \n  :param values: (float[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 25*  \n  :param values: (double...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 26*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 27*  \n  :param values: (double[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.",
  "countDistinctObj": "Counts the number of distinct elements in the array.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T...) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 3*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T[]) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.",
  "countObj": "Counts the number of non-null values.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (long) number of non-null values.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (long) number of non-null values.",
  "distinct": "Returns an array containing only the distinct values from the input.\n\n*Overload 1*  \n  :param values: (char...) - values.\n  :return: (char[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (char[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 3*  \n  :param values: (char[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (char[]) array containing only distinct items from arr.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (char[]) array containing only distinct items from arr.\n  \n*Overload 5*  \n  :param values: (byte...) - values.\n  :return: (byte[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 7*  \n  :param values: (byte[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (byte[]) array containing only distinct items from arr.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (byte[]) array containing only distinct items from arr.\n  \n*Overload 9*  \n  :param values: (short...) - values.\n  :return: (short[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 11*  \n  :param values: (short[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (short[]) array containing only distinct items from arr.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (short[]) array containing only distinct items from arr.\n  \n*Overload 13*  \n  :param values: (int...) - values.\n  :return: (int[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 15*  \n  :param values: (int[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (int[]) array containing only distinct items from arr.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (int[]) array containing only distinct items from arr.\n  \n*Overload 17*  \n  :param values: (long...) - values.\n  :return: (long[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 19*  \n  :param values: (long[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (long[]) array containing only distinct items from arr.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (long[]) array containing only distinct items from arr.\n  \n*Overload 21*  \n  :param values: (float...) - values.\n  :return: (float[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 22*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 23*  \n  :param values: (float[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (float[]) array containing only distinct items from arr.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (float[]) array containing only distinct items from arr.\n  \n*Overload 25*  \n  :param values: (double...) - values.\n  :return: (double[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 26*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 27*  \n  :param values: (double[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (double[]) array containing only distinct items from arr.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (double[]) array containing only distinct items from arr.",
  "distinctObj": "Returns an array containing only the distinct values from the input.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T...) - values.\n  :return: (T[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T[]) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 3*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T[]) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (T[]) array containing only distinct items from arr.\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :return: (T[]) array containing only distinct items from arr.",
  "enlist": "Returns a list containing its arguments.\n\n*Overload 1*  \n  :param values: (char...) - values.\n  :return: (char[]) list containing values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte[]) list containing values.\n  \n*Overload 3*  \n  :param values: (short...) - values.\n  :return: (short[]) list containing values.\n  \n*Overload 4*  \n  :param values: (int...) - values.\n  :return: (int[]) list containing values.\n  \n*Overload 5*  \n  :param values: (long...) - values.\n  :return: (long[]) list containing values.\n  \n*Overload 6*  \n  :param values: (float...) - values.\n  :return: (float[]) list containing values.\n  \n*Overload 7*  \n  :param values: (double...) - values.\n  :return: (double[]) list containing values.",
  "first": "Returns the first value from an array.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (char) first value from the array.\n  \n*Overload 2*  \n  :param values: (char...) - values.\n  :return: (char) first value from the array.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) first value from the array.\n  \n*Overload 4*  \n  :param values: (byte...) - values.\n  :return: (byte) first value from the array.\n  \n*Overload 5*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short) first value from the array.\n  \n*Overload 6*  \n  :param values: (short...) - values.\n  :return: (short) first value from the array.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int) first value from the array.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int) first value from the array.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) first value from the array.\n  \n*Overload 10*  \n  :param values: (long...) - values.\n  :return: (long) first value from the array.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float) first value from the array.\n  \n*Overload 12*  \n  :param values: (float...) - values.\n  :return: (float) first value from the array.\n  \n*Overload 13*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) first value from the array.\n  \n*Overload 14*  \n  :param values: (double...) - values.\n  :return: (double) first value from the array.",
  "firstIndexOf": "Returns the first index containing the value.\n\n*Overload 1*  \n  :param val: (char) - value to search for.\n  :param values: (char...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 2*  \n  :param val: (char) - value to search for.\n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 3*  \n  :param val: (byte) - value to search for.\n  :param values: (byte...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 4*  \n  :param val: (byte) - value to search for.\n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 5*  \n  :param val: (short) - value to search for.\n  :param values: (short...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 6*  \n  :param val: (short) - value to search for.\n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 7*  \n  :param val: (int) - value to search for.\n  :param values: (int...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 8*  \n  :param val: (int) - value to search for.\n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 9*  \n  :param val: (long) - value to search for.\n  :param values: (long...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 10*  \n  :param val: (long) - value to search for.\n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 11*  \n  :param val: (float) - value to search for.\n  :param values: (float...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 12*  \n  :param val: (float) - value to search for.\n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 13*  \n  :param val: (double) - value to search for.\n  :param values: (double...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 14*  \n  :param val: (double) - value to search for.\n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) first index containing the value or null, if the value is not present.",
  "firstIndexOfObj": "Returns the first index containing the value.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param val: (T) - value to search for.\n  :param values: (T...) - values.\n  :return: (long) first index containing the value or null, if the value is not present.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param val: (T) - value to search for.\n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (long) first index containing the value or null, if the value is not present.",
  "firstObj": "Returns the first value from an array.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (T) first value from the array.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T) first value from the array.",
  "in": "Checks if a value is within a discrete set of possible values.\n\n*Overload 1*  \n  :param testedValues: (char) - tested value.\n  :param possibleValues: (char...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.\n  \n*Overload 2*  \n  :param testedValues: (byte) - tested value.\n  :param possibleValues: (byte...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.\n  \n*Overload 3*  \n  :param testedValues: (short) - tested value.\n  :param possibleValues: (short...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.\n  \n*Overload 4*  \n  :param testedValues: (int) - tested value.\n  :param possibleValues: (int...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.\n  \n*Overload 5*  \n  :param testedValues: (long) - tested value.\n  :param possibleValues: (long...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.\n  \n*Overload 6*  \n  :param testedValues: (float) - tested value.\n  :param possibleValues: (float...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.\n  \n*Overload 7*  \n  :param testedValues: (double) - tested value.\n  :param possibleValues: (double...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.",
  "inObj": "Checks if a value is within a discrete set of possible values.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param testedValue: (T) - tested value.\n  :param possibleValues: (T...) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param testedValue: (T) - tested value.\n  :param possibleValues: (io.deephaven.vector.ObjectVector<T>) - possible values.\n  :return: (boolean) true if the tested value is contained in the possible values, and false otherwise.",
  "inRange": "Checks if a value is within a range.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param testedValue: (T) - tested value.\n  :param lowInclusiveValue: (T) - lower inclusive bound of the range.\n  :param highInclusiveValue: (T) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.\n  \n*Overload 2*  \n  :param testedValue: (char) - tested value.\n  :param lowInclusiveValue: (char) - lower inclusive bound of the range.\n  :param highInclusiveValue: (char) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.\n  \n*Overload 3*  \n  :param testedValue: (byte) - tested value.\n  :param lowInclusiveValue: (byte) - lower inclusive bound of the range.\n  :param highInclusiveValue: (byte) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.\n  \n*Overload 4*  \n  :param testedValue: (short) - tested value.\n  :param lowInclusiveValue: (short) - lower inclusive bound of the range.\n  :param highInclusiveValue: (short) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.\n  \n*Overload 5*  \n  :param testedValue: (int) - tested value.\n  :param lowInclusiveValue: (int) - lower inclusive bound of the range.\n  :param highInclusiveValue: (int) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.\n  \n*Overload 6*  \n  :param testedValue: (long) - tested value.\n  :param lowInclusiveValue: (long) - lower inclusive bound of the range.\n  :param highInclusiveValue: (long) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.\n  \n*Overload 7*  \n  :param testedValue: (float) - tested value.\n  :param lowInclusiveValue: (float) - lower inclusive bound of the range.\n  :param highInclusiveValue: (float) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.\n  \n*Overload 8*  \n  :param testedValue: (double) - tested value.\n  :param lowInclusiveValue: (double) - lower inclusive bound of the range.\n  :param highInclusiveValue: (double) - upper inclusive bound of the range.\n  :return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.",
  "isNull": "Determines if a value is considered by the Deephaven convention to be null. In the Deephaven convention, every\n simple type T has a special distinguished value NULL_T which is used to represent the null value for that type.\n These values are enumerated in the QueryConstants class.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param value: (T) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.\n  \n*Overload 2*  \n  :param value: (char) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.\n  \n*Overload 3*  \n  :param value: (byte) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.\n  \n*Overload 4*  \n  :param value: (short) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.\n  \n*Overload 5*  \n  :param value: (int) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.\n  \n*Overload 6*  \n  :param value: (long) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.\n  \n*Overload 7*  \n  :param value: (float) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.\n  \n*Overload 8*  \n  :param value: (double) - value.\n  :return: (boolean) true if the value is null according to the Deephaven convention, and false otherwise.",
  "last": "Returns the last value from an array.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (char) last value from the array.\n  \n*Overload 2*  \n  :param values: (char...) - values.\n  :return: (char) last value from the array.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) last value from the array.\n  \n*Overload 4*  \n  :param values: (byte...) - values.\n  :return: (byte) last value from the array.\n  \n*Overload 5*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short) last value from the array.\n  \n*Overload 6*  \n  :param values: (short...) - values.\n  :return: (short) last value from the array.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int) last value from the array.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int) last value from the array.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) last value from the array.\n  \n*Overload 10*  \n  :param values: (long...) - values.\n  :return: (long) last value from the array.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float) last value from the array.\n  \n*Overload 12*  \n  :param values: (float...) - values.\n  :return: (float) last value from the array.\n  \n*Overload 13*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) last value from the array.\n  \n*Overload 14*  \n  :param values: (double...) - values.\n  :return: (double) last value from the array.",
  "lastObj": "Returns the last value from an array.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (T) last value from the array.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T) last value from the array.",
  "nth": "Returns the nth value from an array.\n\n*Overload 1*  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (char) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 2*  \n  :param index: (long) - index of the value to return.\n  :param values: (char...) - values.\n  :return: (char) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 3*  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 4*  \n  :param index: (long) - index of the value to return.\n  :param values: (byte...) - values.\n  :return: (byte) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 5*  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 6*  \n  :param index: (long) - index of the value to return.\n  :param values: (short...) - values.\n  :return: (short) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 7*  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 8*  \n  :param index: (long) - index of the value to return.\n  :param values: (int...) - values.\n  :return: (int) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 9*  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 10*  \n  :param index: (long) - index of the value to return.\n  :param values: (long...) - values.\n  :return: (long) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 11*  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 12*  \n  :param index: (long) - index of the value to return.\n  :param values: (float...) - values.\n  :return: (float) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 13*  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 14*  \n  :param index: (long) - index of the value to return.\n  :param values: (double...) - values.\n  :return: (double) nth value from the array or null, if the index is outside of the array's index range.",
  "nthObj": "Returns the nth value from an array.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param index: (long) - index of the value to return.\n  :param values: (T...) - values.\n  :return: (T) nth value from the array or null, if the index is outside of the array's index range.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param index: (long) - index of the value to return.\n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T) nth value from the array or null, if the index is outside of the array's index range.",
  "nullValueFor": "Returns the null value in the Deephaven convention that corresponds to type T.\n\nNote: Java generics information - <T>\n\n:param clazz: (java.lang.Class<T>) - The type.\n:return: (T) The corresponding null value in the Deephaven convention if T is one of the\n   Deephaven types with a distinguished null value. Otherwise, null,",
  "repeat": "Returns an array with a value repeated.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param value: (T) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (T[]) array of repeated values.  If size is less than or equal to zero, an empty array is returned.\n  \n*Overload 2*  \n  :param value: (char) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (char[]) array of repeated values.  If size is less than zero, an empty array is returned.\n  \n*Overload 3*  \n  :param value: (byte) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (byte[]) array of repeated values.  If size is less than zero, an empty array is returned.\n  \n*Overload 4*  \n  :param value: (short) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (short[]) array of repeated values.  If size is less than zero, an empty array is returned.\n  \n*Overload 5*  \n  :param value: (int) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (int[]) array of repeated values.  If size is less than zero, an empty array is returned.\n  \n*Overload 6*  \n  :param value: (long) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (long[]) array of repeated values.  If size is less than zero, an empty array is returned.\n  \n*Overload 7*  \n  :param value: (float) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (float[]) array of repeated values.  If size is less than zero, an empty array is returned.\n  \n*Overload 8*  \n  :param value: (double) - value.\n  :param size: (int) - number of times to repeat the value.\n  :return: (double[]) array of repeated values.  If size is less than zero, an empty array is returned.",
  "replaceIfNull": "Replaces values that are null according to Deephaven convention with a specified value.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param value: (T) - value.\n  :param replacement: (T) - replacement to use when value is null according to Deephaven convention.\n  :return: (T) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: (T[]) - the values.\n  :param replacement: (T) - replacement to use when value is null according to Deephaven convention.\n  :return: (T[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - the values.\n  :param replacement: (T) - replacement to use when value is null according to Deephaven convention.\n  :return: (T[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 4*  \n  :param value: (char) - value.\n  :param replacement: (char) - replacement to use when value is null according to Deephaven convention.\n  :return: (char) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 5*  \n  :param values: (char[]) - the values.\n  :param replacement: (char) - replacement to use when value is null according to Deephaven convention.\n  :return: (char[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.CharVector) - the values.\n  :param replacement: (char) - replacement to use when value is null according to Deephaven convention.\n  :return: (char[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 7*  \n  :param value: (byte) - value.\n  :param replacement: (byte) - replacement to use when value is null according to Deephaven convention.\n  :return: (byte) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 8*  \n  :param values: (byte[]) - the values.\n  :param replacement: (byte) - replacement to use when value is null according to Deephaven convention.\n  :return: (byte[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.ByteVector) - the values.\n  :param replacement: (byte) - replacement to use when value is null according to Deephaven convention.\n  :return: (byte[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 10*  \n  :param value: (short) - value.\n  :param replacement: (short) - replacement to use when value is null according to Deephaven convention.\n  :return: (short) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 11*  \n  :param values: (short[]) - the values.\n  :param replacement: (short) - replacement to use when value is null according to Deephaven convention.\n  :return: (short[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ShortVector) - the values.\n  :param replacement: (short) - replacement to use when value is null according to Deephaven convention.\n  :return: (short[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 13*  \n  :param value: (int) - value.\n  :param replacement: (int) - replacement to use when value is null according to Deephaven convention.\n  :return: (int) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 14*  \n  :param values: (int[]) - the values.\n  :param replacement: (int) - replacement to use when value is null according to Deephaven convention.\n  :return: (int[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.IntVector) - the values.\n  :param replacement: (int) - replacement to use when value is null according to Deephaven convention.\n  :return: (int[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 16*  \n  :param value: (long) - value.\n  :param replacement: (long) - replacement to use when value is null according to Deephaven convention.\n  :return: (long) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 17*  \n  :param values: (long[]) - the values.\n  :param replacement: (long) - replacement to use when value is null according to Deephaven convention.\n  :return: (long[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.LongVector) - the values.\n  :param replacement: (long) - replacement to use when value is null according to Deephaven convention.\n  :return: (long[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 19*  \n  :param value: (float) - value.\n  :param replacement: (float) - replacement to use when value is null according to Deephaven convention.\n  :return: (float) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 20*  \n  :param values: (float[]) - the values.\n  :param replacement: (float) - replacement to use when value is null according to Deephaven convention.\n  :return: (float[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 21*  \n  :param values: (io.deephaven.vector.FloatVector) - the values.\n  :param replacement: (float) - replacement to use when value is null according to Deephaven convention.\n  :return: (float[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 22*  \n  :param value: (double) - value.\n  :param replacement: (double) - replacement to use when value is null according to Deephaven convention.\n  :return: (double) value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 23*  \n  :param values: (double[]) - the values.\n  :param replacement: (double) - replacement to use when value is null according to Deephaven convention.\n  :return: (double[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.DoubleVector) - the values.\n  :param replacement: (double) - replacement to use when value is null according to Deephaven convention.\n  :return: (double[]) array containing value, if value is not null according to Deephaven convention, replacement otherwise.",
  "reverse": "Returns an array with the values reversed.\n\n*Overload 1*  \n  :param values: (char...) - values.\n  :return: (char[]) array with the values reversed.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.CharVector) - values.\n  :return: (char[]) array with the values reversed.\n  \n*Overload 3*  \n  :param values: (byte...) - values.\n  :return: (byte[]) array with the values reversed.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte[]) array with the values reversed.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (short[]) array with the values reversed.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short[]) array with the values reversed.\n  \n*Overload 7*  \n  :param values: (int...) - values.\n  :return: (int[]) array with the values reversed.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int[]) array with the values reversed.\n  \n*Overload 9*  \n  :param values: (long...) - values.\n  :return: (long[]) array with the values reversed.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long[]) array with the values reversed.\n  \n*Overload 11*  \n  :param values: (float...) - values.\n  :return: (float[]) array with the values reversed.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float[]) array with the values reversed.\n  \n*Overload 13*  \n  :param values: (double...) - values.\n  :return: (double[]) array with the values reversed.\n  \n*Overload 14*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) array with the values reversed.",
  "reverseObj": "Returns an array with the values reversed.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (T[]) array with the values reversed.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T[]) array with the values reversed.",
  "unbox": "Unboxes an array of values.\n\n*Overload 1*  \n  :param values: (java.lang.Character...) - values.\n  :return: (char[]) unboxed array of values.\n  \n*Overload 2*  \n  :param values: (java.lang.Byte...) - values.\n  :return: (byte[]) unboxed array of values.\n  \n*Overload 3*  \n  :param values: (java.lang.Short...) - values.\n  :return: (short[]) unboxed array of values.\n  \n*Overload 4*  \n  :param values: (java.lang.Integer...) - values.\n  :return: (int[]) unboxed array of values.\n  \n*Overload 5*  \n  :param values: (java.lang.Long...) - values.\n  :return: (long[]) unboxed array of values.\n  \n*Overload 6*  \n  :param values: (java.lang.Float...) - values.\n  :return: (float[]) unboxed array of values.\n  \n*Overload 7*  \n  :param values: (java.lang.Double...) - values.\n  :return: (double[]) unboxed array of values.",
  "vec": "Converts a DB array to a primitive array.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.CharVector) - DB array\n  :return: (char[]) primitive array.\n  \n*Overload 2*  \n  :param values: (io.deephaven.vector.ByteVector) - DB array\n  :return: (byte[]) primitive array.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ShortVector) - DB array\n  :return: (short[]) primitive array.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.IntVector) - DB array\n  :return: (int[]) primitive array.\n  \n*Overload 5*  \n  :param values: (io.deephaven.vector.LongVector) - DB array\n  :return: (long[]) primitive array.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.FloatVector) - DB array\n  :return: (float[]) primitive array.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.DoubleVector) - DB array\n  :return: (double[]) primitive array.",
  "vecObj": "Converts a DB array to an array.\n\nNote: Java generics information - <T>\n\n:param values: (io.deephaven.vector.ObjectVector<T>) - DB array\n:return: (T[]) primitive array."
 },
 "path": "io.deephaven.function.Basic",
 "text": "Basic functions that can be applied to primitive types.",
 "typeName": "class"
}