{
 "className": "io.deephaven.function.ObjectPrimitives",
 "methods": {
  "binSearchIndex": "Performs a binary search to find a key.\n\nNote: Java generics information - <T extends java.lang.Comparable<? super T>>\n\n:param values: (io.deephaven.vector.ObjectVector<T>) - sorted values to search.\n:param key: (T) - key to search for.\n:param choiceWhenEquals: (io.deephaven.function.BinSearch) - algorithm used to resolve ties when performing a binary search.\n:return: (int) index of the search key, if it is contained in the array; otherwise, the index of where the key would be inserted.",
  "contains": "Returns true if a sequence is in the target string.\n\n:param target: (java.lang.String) - string to search for the sequence.\n:param sequence: (java.lang.CharSequence) - sequence to search for.\n:return: (boolean) true if target is not null and contains sequence; false otherwise.",
  "count": "Counts the number of non-null values.\n\nNote: Java generics information - <T>\n\n:param values: (io.deephaven.vector.ObjectVector<T>) - values.\n:return: (int) number of non-null values.",
  "countDistinct": "Counts the number of distinct elements in the array.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (long) number of distinct non-null values.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :param countNull: (boolean) - true to count null values, and false to exclude null values.\n  :return: (long) number of distinct values.",
  "distinct": "Returns an array containing only the distinct values from the input.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (io.deephaven.vector.ObjectVector<T>) unsorted array containing only distinct non-null items from arr.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :param includeNull: (boolean) - true to include null values, and false to exclude null values.\n  :param sort: (boolean) - true to sort the resultant array\n  :return: (io.deephaven.vector.ObjectVector<T>) array containing only distinct items from arr.",
  "first": "Returns the first value from an array.\n\nNote: Java generics information - <T>\n\n:param values: (io.deephaven.vector.ObjectVector<T>) - values.\n:return: (T) first value from the array.",
  "in": "Checks if a value is within a discrete set of possible values.\n\nNote: Java generics information - <T>\n\n:param testedValue: (T) - tested value.\n:param possibleValues: (T...) - possible values.\n:return: (boolean) true if the tested value is contained in the possible values, and false otherwise.",
  "inRange": "Checks if a value is within a range.\n\n:param testedValue: (java.lang.Comparable) - tested value.\n:param lowInclusiveValue: (java.lang.Comparable) - lower inclusive bound of the range.\n:param highInclusiveValue: (java.lang.Comparable) - upper inclusive bound of the range.\n:return: (boolean) true if the tested value is within the range, and false if the tested value is not in the range or is null.",
  "isDBNull": "Determines if a value is null.  Beyond checking for simple null values, this method checks to see if the input\n object is equal to a null value.  For example, if a boxed Long value is passed in, this method first\n checks to see if the value is null.  If the value is not null, it checks to see if the value is QueryConstants.NULL_LONG.\n\nNote: Java generics information - <T>\n\n:param value: (T) - value.\n:return: (boolean) true if the value is null, and false otherwise.",
  "isNull": "Determines if a value is null.\n\nNote: Java generics information - <T>\n\n:param value: (T) - value.\n:return: (boolean) true if the value is null, and false otherwise.",
  "last": "Returns the last value from an array.\n\nNote: Java generics information - <T>\n\n:param values: (io.deephaven.vector.ObjectVector<T>) - values.\n:return: (T) last value from the array.",
  "max": "Returns the maximum.  Null values are excluded.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T) maximum of non-null values.\n  \n*Overload 2*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: (NUM...) - values.\n  :return: (NUM) maximum of non-null values.\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (T) maximum of non-null values.",
  "min": "Returns the minimum.  Null values are excluded.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T) minimum of non-null values.\n  \n*Overload 2*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: (NUM...) - values.\n  :return: (NUM) minimum of non-null values.\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (T) minimum of non-null values.",
  "nth": "Returns the nth value from an array.\n\nNote: Java generics information - <T>\n\n:param index: (int) - index of the value to return.\n:param values: (io.deephaven.vector.ObjectVector<T>) - values.\n:return: (T) nth value from the array or null, if the index is outside of the array's index range.",
  "nullToValue": "Replaces null values with a default value.\n\n*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param value: (T) - value.\n  :param defaultValue: (T) - default value to return for null values.\n  :return: (T) value, if value is not null, and defaultValue if value is null.\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :param defaultValue: (T) - default value to return for null values.\n  :return: (T[]) value, if value is not null, and defaultValue if value is null.",
  "rawBinSearchIndex": "Performs a binary search to find a key.\n\nNote: Java generics information - <T extends java.lang.Comparable<? super T>>\n\n:param values: (io.deephaven.vector.ObjectVector<T>) - sorted values to search.\n:param key: (T) - key to search for.\n:param choiceWhenEquals: (io.deephaven.function.BinSearch) - algorithm used to resolve ties when performing a binary search.\n:return: (int) index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1).",
  "sort": "Returns sorted values from smallest to largest.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (io.deephaven.vector.ObjectVector<T>) sorted values.\n  \n*Overload 2*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: (NUM...) - values.\n  :return: (NUM[]) sorted values.\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (T[]) sorted values.",
  "sortDescending": "Returns sorted values from largest to smallest.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (io.deephaven.vector.ObjectVector<T>) sorted values.\n  \n*Overload 2*  \n  Note: Java generics information - <NUM extends java.lang.Number>\n  \n  :param values: (NUM...) - values.\n  :return: (NUM[]) sorted values.\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param values: (T...) - values.\n  :return: (T[]) sorted values.",
  "vec": "Converts a Vector to a primitive array.\n\nNote: Java generics information - <T>\n\n:param values: (io.deephaven.vector.ObjectVector<T>) - Vector\n:return: (T[]) primitive array."
 },
 "path": "io.deephaven.function.ObjectPrimitives",
 "text": "A set of commonly used functions that can be applied to Object types.",
 "typeName": "class"
}