{
 "className": "io.deephaven.function.Sort",
 "methods": {
  "sort": "Returns sorted values from smallest to largest.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte[]) sorted values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte[]) sorted values.\n  \n*Overload 3*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (byte[]) sorted values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short[]) sorted values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (short[]) sorted values.\n  \n*Overload 6*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (short[]) sorted values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int[]) sorted values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int[]) sorted values.\n  \n*Overload 9*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (int[]) sorted values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long[]) sorted values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long[]) sorted values.\n  \n*Overload 12*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long[]) sorted values.\n  \n*Overload 13*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float[]) sorted values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (float[]) sorted values.\n  \n*Overload 15*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (float[]) sorted values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) sorted values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double[]) sorted values.\n  \n*Overload 18*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double[]) sorted values.",
  "sortDescending": "Returns sorted values from largest to smallest.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte[]) sorted values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte[]) sorted values.\n  \n*Overload 3*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (byte[]) sorted values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short[]) sorted values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (short[]) sorted values.\n  \n*Overload 6*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (short[]) sorted values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int[]) sorted values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int[]) sorted values.\n  \n*Overload 9*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (int[]) sorted values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long[]) sorted values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long[]) sorted values.\n  \n*Overload 12*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long[]) sorted values.\n  \n*Overload 13*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float[]) sorted values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (float[]) sorted values.\n  \n*Overload 15*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (float[]) sorted values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) sorted values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double[]) sorted values.\n  \n*Overload 18*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double[]) sorted values.",
  "sortDescendingObj": "Returns sorted values from largest to smallest.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :param comparator: (java.util.Comparator<T>) - value comparator.\n  :return: (T[]) sorted values.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T[]) sorted values.\n  \n*Overload 3*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T[]) - values.\n  :param comparator: (java.util.Comparator<T>) - value comparator.\n  :return: (T[]) sorted values.\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T...) - values.\n  :return: (T[]) sorted values.",
  "sortObj": "Returns sorted values from smallest to largest.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :param comparator: (java.util.Comparator<T>) - value comparator.\n  :return: (T[]) sorted values.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T[]) sorted values.\n  \n*Overload 3*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T[]) - values.\n  :param comparator: (java.util.Comparator<T>) - value comparator.\n  :return: (T[]) sorted values.\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param values: (T...) - values.\n  :return: (T[]) sorted values."
 },
 "path": "io.deephaven.function.Sort",
 "text": "Functions for sorting primitive types.",
 "typeName": "class"
}