{
 "className": "io.deephaven.function.Numeric",
 "methods": {
  "abs": "Returns the absolute value.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (byte) absolute value.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (short) absolute value.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (int) absolute value.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (long) absolute value.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (float) absolute value.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) absolute value.",
  "absAvg": "Returns the mean of the absolute values of values.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) mean of the absolute value of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) mean of the absolute value of non-null values.",
  "acos": "Returns the arc cosine.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) arc cosine.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) arc cosine.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) arc cosine.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) arc cosine.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) arc cosine.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) arc cosine.",
  "asin": "Returns the arc sine.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) arc sine.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) arc sine.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) arc sine.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) arc sine.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) arc sine.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) arc sine.",
  "atan": "Returns the arc tangent.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) arc tangent.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) arc tangent.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) arc tangent.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) arc tangent.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) arc tangent.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) arc tangent.",
  "avg": "Returns the mean.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) mean of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) mean of non-null values.",
  "ceil": "Returns the ceiling.  This is the smallest integer, which is greater than or equal to the value.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) ceiling.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) ceiling.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) ceiling.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) ceiling.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) ceiling.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) ceiling.",
  "clamp": "Constrains the value to be on the [min,max] range.  If the value is less than min, min is returned.\n If the value is greater than max, max is returned.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :param min: (byte) - minimum value.\n  :param max: (byte) - maximum value.\n  :return: (byte) value constrained to be in the [min,max] range.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :param min: (short) - minimum value.\n  :param max: (short) - maximum value.\n  :return: (short) value constrained to be in the [min,max] range.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :param min: (int) - minimum value.\n  :param max: (int) - maximum value.\n  :return: (int) value constrained to be in the [min,max] range.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :param min: (long) - minimum value.\n  :param max: (long) - maximum value.\n  :return: (long) value constrained to be in the [min,max] range.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :param min: (float) - minimum value.\n  :param max: (float) - maximum value.\n  :return: (float) value constrained to be in the [min,max] range.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :param min: (double) - minimum value.\n  :param max: (double) - maximum value.\n  :return: (double) value constrained to be in the [min,max] range.",
  "containsNonFinite": "Returns true if the values contains any non-finite value, where \"finite\" is defined as\n not infinite, not NaN, and not null.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 3*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 4*  \n  :param values: (short...) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 5*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 6*  \n  :param values: (int...) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 7*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 8*  \n  :param values: (long...) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 9*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 10*  \n  :param values: (float...) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 11*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.\n  \n*Overload 12*  \n  :param values: (double...) - values.\n  :return: (boolean) true if any value is not finite; false otherwise.",
  "cor": "Returns the correlation.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 2*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 3*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 4*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 5*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 6*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 7*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 8*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 9*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 10*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 11*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 12*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 13*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 14*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 15*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 16*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 17*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 18*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 19*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 20*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 21*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 22*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 23*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 24*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 25*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 26*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 27*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 28*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 29*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 30*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 31*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 32*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 33*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 34*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 35*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 36*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 37*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 38*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 39*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 40*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 41*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 42*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 43*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 44*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 45*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 46*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 47*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 48*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 49*  \n  :param values0: (int[]) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) correlation of non-null values.\n  \n*Overload 50*  \n  :param values0: (int[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) correlation of non-null values.",
  "cos": "Returns the cosine.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) cosine.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) cosine.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) cosine.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) cosine.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) cosine.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) cosine.",
  "countNeg": "Counts the number of negative values.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (long) number of negative values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (long) number of negative values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) number of negative values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (long) number of negative values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (long) number of negative values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) number of negative values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (long) number of negative values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (long) number of negative values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) number of negative values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long) number of negative values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long) number of negative values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) number of negative values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (long) number of negative values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (long) number of negative values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) number of negative values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (long) number of negative values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (long) number of negative values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) number of negative values.",
  "countPos": "Counts the number of positive values.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (long) number of positive values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (long) number of positive values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) number of positive values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (long) number of positive values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (long) number of positive values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) number of positive values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (long) number of positive values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (long) number of positive values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) number of positive values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long) number of positive values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long) number of positive values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) number of positive values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (long) number of positive values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (long) number of positive values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) number of positive values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (long) number of positive values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (long) number of positive values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) number of positive values.",
  "countZero": "Counts the number of zero values.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (long) number of zero values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (long) number of zero values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) number of zero values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (long) number of zero values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (long) number of zero values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) number of zero values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (long) number of zero values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (long) number of zero values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) number of zero values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long) number of zero values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long) number of zero values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) number of zero values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (long) number of zero values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (long) number of zero values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) number of zero values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (long) number of zero values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (long) number of zero values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) number of zero values.",
  "cov": "Returns the covariance.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 2*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 3*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 4*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 5*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 6*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 7*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 8*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 9*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 10*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 11*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 12*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 13*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 14*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 15*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 16*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 17*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 18*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 19*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 20*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 21*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 22*  \n  :param values0: (byte[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 23*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 24*  \n  :param values0: (io.deephaven.vector.ByteVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 25*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 26*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 27*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 28*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 29*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 30*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 31*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (short[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 32*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.ShortVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 33*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 34*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 35*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (int[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 36*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.IntVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 37*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 38*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 39*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (long[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 40*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.LongVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 41*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 42*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 43*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (float[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 44*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.FloatVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 45*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 46*  \n  :param values0: (short[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 47*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (double[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 48*  \n  :param values0: (io.deephaven.vector.ShortVector) - 1st set of values.\n  :param values1: (io.deephaven.vector.DoubleVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 49*  \n  :param values0: (int[]) - 1st set of values.\n  :param values1: (byte[]) - 2nd set of values.\n  :return: (double) covariance of non-null values.\n  \n*Overload 50*  \n  :param values0: (int[]) - 1st set of values.\n  :param values1: (io.deephaven.vector.ByteVector) - 2nd set of values.\n  :return: (double) covariance of non-null values.",
  "cumprod": "Returns the cumulative product.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (byte[]) cumulative product of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte[]) cumulative product of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte[]) cumulative product of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (short[]) cumulative product of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (short[]) cumulative product of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short[]) cumulative product of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (int[]) cumulative product of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int[]) cumulative product of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int[]) cumulative product of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long[]) cumulative product of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long[]) cumulative product of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long[]) cumulative product of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (float[]) cumulative product of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (float[]) cumulative product of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float[]) cumulative product of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double[]) cumulative product of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double[]) cumulative product of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) cumulative product of non-null values.",
  "cumsum": "Returns the cumulative sum.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (byte[]) cumulative sum of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte[]) cumulative sum of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte[]) cumulative sum of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (short[]) cumulative sum of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (short[]) cumulative sum of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short[]) cumulative sum of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (int[]) cumulative sum of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int[]) cumulative sum of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int[]) cumulative sum of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long[]) cumulative sum of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long[]) cumulative sum of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long[]) cumulative sum of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (float[]) cumulative sum of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (float[]) cumulative sum of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float[]) cumulative sum of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double[]) cumulative sum of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double[]) cumulative sum of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double[]) cumulative sum of non-null values.",
  "exp": "Returns Euler's number e raised to a power.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) Euler's number e raised to a power.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) Euler's number e raised to a power.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) Euler's number e raised to a power.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) Euler's number e raised to a power.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) Euler's number e raised to a power.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) Euler's number e raised to a power.",
  "floor": "Returns the floor.  This is the largest integer, which is less than or equal to the value.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) floor.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) floor.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) floor.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) floor.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) floor.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) floor.",
  "indexOfMax": "Returns the index of the maximum value.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) index of the maximum value.",
  "indexOfMaxObj": "Returns the index of the maximum value.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (T...) - values.\n  :return: (long) index of the maximum value.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (long) index of the maximum value.",
  "indexOfMin": "Returns the index of the minimum value.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (long) index of the minimum value.",
  "indexOfMinObj": "Returns the index of the minimum value.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (T...) - values.\n  :return: (long) index of the minimum value.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (long) index of the minimum value.",
  "isFinite": "Returns true if the value is finite, where \"finite\" is defined as not infinite, not NaN, and not null.\n\n*Overload 1*  \n  :param value: (java.lang.Byte) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 2*  \n  :param value: (byte) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 3*  \n  :param value: (java.lang.Short) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 4*  \n  :param value: (short) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 5*  \n  :param value: (java.lang.Integer) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 6*  \n  :param value: (int) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 7*  \n  :param value: (java.lang.Long) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 8*  \n  :param value: (long) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 9*  \n  :param value: (java.lang.Float) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 10*  \n  :param value: (float) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 11*  \n  :param value: (java.lang.Double) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise\n  \n*Overload 12*  \n  :param value: (double) - value.\n  :return: (boolean) true if the value is not infinite, NaN, nor null; false otherwise",
  "isInf": "Returns true if the value is infinite and false otherwise.\n\n*Overload 1*  \n  :param value: (java.lang.Byte) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 2*  \n  :param value: (byte) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 3*  \n  :param value: (java.lang.Short) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 4*  \n  :param value: (short) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 5*  \n  :param value: (java.lang.Integer) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 6*  \n  :param value: (int) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 7*  \n  :param value: (java.lang.Long) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 8*  \n  :param value: (long) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 9*  \n  :param value: (java.lang.Float) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 10*  \n  :param value: (float) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 11*  \n  :param value: (java.lang.Double) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.\n  \n*Overload 12*  \n  :param value: (double) - value.\n  :return: (boolean) true if the value is infinite and false otherwise.",
  "isNaN": "Returns true if the value is NaN and false otherwise.\n\n*Overload 1*  \n  :param value: (java.lang.Byte) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 2*  \n  :param value: (byte) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 3*  \n  :param value: (java.lang.Short) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 4*  \n  :param value: (short) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 5*  \n  :param value: (java.lang.Integer) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 6*  \n  :param value: (int) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 7*  \n  :param value: (java.lang.Long) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 8*  \n  :param value: (long) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 9*  \n  :param value: (java.lang.Float) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 10*  \n  :param value: (float) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 11*  \n  :param value: (java.lang.Double) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.\n  \n*Overload 12*  \n  :param value: (double) - value.\n  :return: (boolean) true if the value is NaN and false otherwise.",
  "log": "Returns the natural logarithm (base e).\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) natural logarithm (base e).\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) natural logarithm (base e).\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) natural logarithm (base e).\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) natural logarithm (base e).\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) natural logarithm (base e).\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) natural logarithm (base e).",
  "lowerBin": "**Incompatible overloads text - text from the first overload:**\n\nReturns the lower bound of the bin containing the value.\n\n The lower bound of the bin containing the value is equal to interval * floor((value-offset) / interval) + offset.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :param interval: (byte) - bin width.\n  :return: (byte) lower bound of the bin containing the value.\n  \n*Overload 2*  \n  :param value: (byte) - value.\n  :param interval: (byte) - bin width.\n  :param offset: (byte) - interval offset\n  :return: (byte) lower bound of the bin containing the value.\n  \n*Overload 3*  \n  :param value: (short) - value.\n  :param interval: (short) - bin width.\n  :return: (short) lower bound of the bin containing the value.\n  \n*Overload 4*  \n  :param value: (short) - value.\n  :param interval: (short) - bin width.\n  :param offset: (short) - interval offset\n  :return: (short) lower bound of the bin containing the value.\n  \n*Overload 5*  \n  :param value: (int) - value.\n  :param interval: (int) - bin width.\n  :return: (int) lower bound of the bin containing the value.\n  \n*Overload 6*  \n  :param value: (int) - value.\n  :param interval: (int) - bin width.\n  :param offset: (int) - interval offset\n  :return: (int) lower bound of the bin containing the value.\n  \n*Overload 7*  \n  :param value: (long) - value.\n  :param interval: (long) - bin width.\n  :return: (long) lower bound of the bin containing the value.\n  \n*Overload 8*  \n  :param value: (long) - value.\n  :param interval: (long) - bin width.\n  :param offset: (long) - interval offset\n  :return: (long) lower bound of the bin containing the value.\n  \n*Overload 9*  \n  :param value: (float) - value.\n  :param interval: (float) - bin width.\n  :return: (float) lower bound of the bin containing the value.\n  \n*Overload 10*  \n  :param value: (float) - value.\n  :param interval: (float) - bin width.\n  :param offset: (float) - interval offset\n  :return: (float) lower bound of the bin containing the value.\n  \n*Overload 11*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :return: (double) lower bound of the bin containing the value.\n  \n*Overload 12*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :param offset: (double) - interval offset\n  :return: (double) lower bound of the bin containing the value.",
  "max": "Returns the maximum.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 3*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (byte) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (short) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 6*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (short) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 9*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (int) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 12*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 13*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (float) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 15*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (float) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 18*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) maximum of non-null values, or null if there are no non-null values.",
  "maxObj": "Returns the maximum.  Null values are excluded.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T) maximum of non-null values, or null if there are no non-null values.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (T...) - values.\n  :return: (T) maximum of non-null values, or null if there are no non-null values.",
  "median": "Returns the median.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (double) median.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (double) median.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) median.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (double) median.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (double) median.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) median.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (double) median.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (double) median.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) median.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (double) median.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (double) median.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) median.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (double) median.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (double) median.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) median.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) median.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) median.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) median.",
  "min": "Returns the minimum.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 3*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (byte) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (short) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 6*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (short) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (int) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 9*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (int) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 10*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (long) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 12*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (long) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 13*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (float) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 15*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (float) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 18*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) minimum of non-null values, or null if there are no non-null values.",
  "minObj": "Returns the minimum.  Null values are excluded.\n\n*Overload 1*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (io.deephaven.vector.ObjectVector<T>) - values.\n  :return: (T) minimum of non-null values, or null if there are no non-null values.\n  \n*Overload 2*  \n  Note: Java generics information - <T extends java.lang.Comparable<T>>\n  \n  :param values: (T...) - values.\n  :return: (T) minimum of non-null values, or null if there are no non-null values.",
  "percentile": "Returns the percentile.\n\n*Overload 1*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (byte...) - values.\n  :return: (double) percentile.\n  \n*Overload 2*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) percentile.\n  \n*Overload 3*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (short...) - values.\n  :return: (double) percentile.\n  \n*Overload 4*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) percentile.\n  \n*Overload 5*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (int...) - values.\n  :return: (double) percentile.\n  \n*Overload 6*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) percentile.\n  \n*Overload 7*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (long...) - values.\n  :return: (double) percentile.\n  \n*Overload 8*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) percentile.\n  \n*Overload 9*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (float...) - values.\n  :return: (double) percentile.\n  \n*Overload 10*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) percentile.\n  \n*Overload 11*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (double...) - values.\n  :return: (double) percentile.\n  \n*Overload 12*  \n  :param percentile: (double) - percentile to compute.\n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) percentile.",
  "pow": "Returns the value of the first argument raised to the second argument.\n\n*Overload 1*  \n  :param a: (byte) - the base.\n  :param b: (byte) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 2*  \n  :param a: (byte) - the base.\n  :param b: (short) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 3*  \n  :param a: (byte) - the base.\n  :param b: (int) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 4*  \n  :param a: (byte) - the base.\n  :param b: (long) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 5*  \n  :param a: (byte) - the base.\n  :param b: (float) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 6*  \n  :param a: (byte) - the base.\n  :param b: (double) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 7*  \n  :param a: (short) - the base.\n  :param b: (byte) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 8*  \n  :param a: (short) - the base.\n  :param b: (short) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 9*  \n  :param a: (short) - the base.\n  :param b: (int) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 10*  \n  :param a: (short) - the base.\n  :param b: (long) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 11*  \n  :param a: (short) - the base.\n  :param b: (float) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 12*  \n  :param a: (short) - the base.\n  :param b: (double) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 13*  \n  :param a: (int) - the base.\n  :param b: (byte) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 14*  \n  :param a: (int) - the base.\n  :param b: (short) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 15*  \n  :param a: (int) - the base.\n  :param b: (int) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 16*  \n  :param a: (int) - the base.\n  :param b: (long) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 17*  \n  :param a: (int) - the base.\n  :param b: (float) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 18*  \n  :param a: (int) - the base.\n  :param b: (double) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 19*  \n  :param a: (long) - the base.\n  :param b: (byte) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 20*  \n  :param a: (long) - the base.\n  :param b: (short) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 21*  \n  :param a: (long) - the base.\n  :param b: (int) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 22*  \n  :param a: (long) - the base.\n  :param b: (long) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 23*  \n  :param a: (long) - the base.\n  :param b: (float) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 24*  \n  :param a: (long) - the base.\n  :param b: (double) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 25*  \n  :param a: (float) - the base.\n  :param b: (byte) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 26*  \n  :param a: (float) - the base.\n  :param b: (short) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 27*  \n  :param a: (float) - the base.\n  :param b: (int) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 28*  \n  :param a: (float) - the base.\n  :param b: (long) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 29*  \n  :param a: (float) - the base.\n  :param b: (float) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 30*  \n  :param a: (float) - the base.\n  :param b: (double) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 31*  \n  :param a: (double) - the base.\n  :param b: (byte) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 32*  \n  :param a: (double) - the base.\n  :param b: (short) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 33*  \n  :param a: (double) - the base.\n  :param b: (int) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 34*  \n  :param a: (double) - the base.\n  :param b: (long) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 35*  \n  :param a: (double) - the base.\n  :param b: (float) - the exponent.\n  :return: (double) a raised to the b power.\n  \n*Overload 36*  \n  :param a: (double) - the base.\n  :param b: (double) - the exponent.\n  :return: (double) a raised to the b power.",
  "product": "Returns the product.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) product of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte) product of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short) product of non-null values.\n  \n*Overload 4*  \n  :param values: (short...) - values.\n  :return: (short) product of non-null values.\n  \n*Overload 5*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int) product of non-null values.\n  \n*Overload 6*  \n  :param values: (int...) - values.\n  :return: (int) product of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) product of non-null values.\n  \n*Overload 8*  \n  :param values: (long...) - values.\n  :return: (long) product of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float) product of non-null values.\n  \n*Overload 10*  \n  :param values: (float...) - values.\n  :return: (float) product of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) product of non-null values.\n  \n*Overload 12*  \n  :param values: (double...) - values.\n  :return: (double) product of non-null values.",
  "replaceIfNaN": "Replaces values that are NaN with a specified value.\n\n*Overload 1*  \n  :param value: (float) - value.\n  :param replacement: (float) - replacement to use when value is NaN.\n  :return: (float) value, if value is not NaN, replacement otherwise.\n  \n*Overload 2*  \n  :param values: (float[]) - the values.\n  :param replacement: (float) - replacement to use when value is NaN.\n  :return: (float[]) array containing value, if value is not NaN, replacement otherwise.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.FloatVector) - the values.\n  :param replacement: (float) - replacement to use when value is NaN.\n  :return: (float[]) array containing value, if value is not NaN, replacement otherwise.\n  \n*Overload 4*  \n  :param value: (double) - value.\n  :param replacement: (double) - replacement to use when value is NaN.\n  :return: (double) value, if value is not NaN, replacement otherwise.\n  \n*Overload 5*  \n  :param values: (double[]) - the values.\n  :param replacement: (double) - replacement to use when value is NaN.\n  :return: (double[]) array containing value, if value is not NaN, replacement otherwise.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - the values.\n  :param replacement: (double) - replacement to use when value is NaN.\n  :return: (double[]) array containing value, if value is not NaN, replacement otherwise.",
  "replaceIfNonFinite": "Replaces values that are not finite according to Deephaven convention with a specified value.\n\n*Overload 1*  \n  :param value: (float) - value.\n  :param replacement: (float) - replacement to use when value is not finite according to Deephaven convention.\n  :return: (float) value, if value is finite according to Deephaven convention, replacement otherwise.\n  \n*Overload 2*  \n  :param values: (float[]) - the values.\n  :param replacement: (float) - replacement to use when value is not finite according to Deephaven convention.\n  :return: (float[]) array containing value, if value is finite according to Deephaven convention, replacement otherwise.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.FloatVector) - the values.\n  :param replacement: (float) - replacement to use when value is not finite according to Deephaven convention.\n  :return: (float[]) array containing value, if value is finite according to Deephaven convention, replacement otherwise.\n  \n*Overload 4*  \n  :param value: (double) - value.\n  :param replacement: (double) - replacement to use when value is not finite according to Deephaven convention.\n  :return: (double) value, if value is finite according to Deephaven convention, replacement otherwise.\n  \n*Overload 5*  \n  :param values: (double[]) - the values.\n  :param replacement: (double) - replacement to use when value is not finite according to Deephaven convention.\n  :return: (double[]) array containing value, if value is finite according to Deephaven convention, replacement otherwise.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - the values.\n  :param replacement: (double) - replacement to use when value is not finite according to Deephaven convention.\n  :return: (double[]) array containing value, if value is finite according to Deephaven convention, replacement otherwise.",
  "replaceIfNullNaN": "Replaces values that are NaN or null according to Deephaven convention with a specified value.\n\n*Overload 1*  \n  :param value: (float) - value.\n  :param replacement: (float) - replacement to use when value is NaN or null according to Deephaven convention.\n  :return: (float) value, if value is neither NaN nor null according to Deephaven convention, replacement otherwise.\n  \n*Overload 2*  \n  :param values: (float[]) - the values.\n  :param replacement: (float) - replacement to use when value is NaN or null according to Deephaven convention.\n  :return: (float[]) array containing value, if value is neither NaN nor null according to Deephaven convention, replacement otherwise.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.FloatVector) - the values.\n  :param replacement: (float) - replacement to use when value is NaN or null according to Deephaven convention.\n  :return: (float[]) array containing value, if value is neither NaN nor null according to Deephaven convention, replacement otherwise.\n  \n*Overload 4*  \n  :param value: (double) - value.\n  :param replacement: (double) - replacement to use when value is NaN or null according to Deephaven convention.\n  :return: (double) value, if value is neither NaN nor null according to Deephaven convention, replacement otherwise.\n  \n*Overload 5*  \n  :param values: (double[]) - the values.\n  :param replacement: (double) - replacement to use when value is NaN or null according to Deephaven convention.\n  :return: (double[]) array containing value, if value is neither NaN nor null according to Deephaven convention, replacement otherwise.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.DoubleVector) - the values.\n  :param replacement: (double) - replacement to use when value is NaN or null according to Deephaven convention.\n  :return: (double[]) array containing value, if value is neither NaN nor null according to Deephaven convention, replacement otherwise.",
  "rint": "Returns the integer closest to the input value.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) integer closes to the input value.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) integer closes to the input value.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) integer closes to the input value.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) integer closes to the input value.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) integer closes to the input value.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) integer closes to the input value.",
  "round": "Returns the closest integer to the argument.  If the argument is NaN, the result is 0.  If the argument is greater\n than Integer.MIN_VALUE, Integer.MIN_VALUE is returned.  If the argument is less than Integer.MAX_VALUE,\n Integer.MAX_VALUE is returned.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: long\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: long\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: long\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: long\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: long\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: long",
  "sequence": "Returns a sequence of values.\n\n*Overload 1*  \n  :param start: (byte) - starting value.\n  :param end: (byte) - terminal value.\n  :param step: (byte) - step size.\n  :return: (byte[]) sequence of values from start to end.\n  \n*Overload 2*  \n  :param start: (short) - starting value.\n  :param end: (short) - terminal value.\n  :param step: (short) - step size.\n  :return: (short[]) sequence of values from start to end.\n  \n*Overload 3*  \n  :param start: (int) - starting value.\n  :param end: (int) - terminal value.\n  :param step: (int) - step size.\n  :return: (int[]) sequence of values from start to end.\n  \n*Overload 4*  \n  :param start: (long) - starting value.\n  :param end: (long) - terminal value.\n  :param step: (long) - step size.\n  :return: (long[]) sequence of values from start to end.\n  \n*Overload 5*  \n  :param start: (float) - starting value.\n  :param end: (float) - terminal value.\n  :param step: (float) - step size.\n  :return: (float[]) sequence of values from start to end.\n  \n*Overload 6*  \n  :param start: (double) - starting value.\n  :param end: (double) - terminal value.\n  :param step: (double) - step size.\n  :return: (double[]) sequence of values from start to end.",
  "signum": "Returns the signum function.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (int) signum function.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (int) signum function.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (int) signum function.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (int) signum function.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (int) signum function.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (int) signum function.",
  "sin": "Returns the sine.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) sine.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) sine.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) sine.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) sine.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) sine.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) sine.",
  "sqrt": "Returns the square root.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) square root.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) square root.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) square root.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) square root.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) square root.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) square root.",
  "std": "Returns the standard deviation.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) standard deviation of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) standard deviation of non-null values.",
  "ste": "Returns the standard error.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) standard error of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) standard error of non-null values.",
  "sum": "Returns the sum.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (byte) sum of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (byte) sum of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (short) sum of non-null values.\n  \n*Overload 4*  \n  :param values: (short...) - values.\n  :return: (short) sum of non-null values.\n  \n*Overload 5*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (int) sum of non-null values.\n  \n*Overload 6*  \n  :param values: (int...) - values.\n  :return: (int) sum of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (long) sum of non-null values.\n  \n*Overload 8*  \n  :param values: (long...) - values.\n  :return: (long) sum of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (float) sum of non-null values.\n  \n*Overload 10*  \n  :param values: (float...) - values.\n  :return: (float) sum of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) sum of non-null values.\n  \n*Overload 12*  \n  :param values: (double...) - values.\n  :return: (double) sum of non-null values.",
  "tan": "Returns the tangent.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :return: (double) tangent.\n  \n*Overload 2*  \n  :param value: (short) - value.\n  :return: (double) tangent.\n  \n*Overload 3*  \n  :param value: (int) - value.\n  :return: (double) tangent.\n  \n*Overload 4*  \n  :param value: (long) - value.\n  :return: (double) tangent.\n  \n*Overload 5*  \n  :param value: (float) - value.\n  :return: (double) tangent.\n  \n*Overload 6*  \n  :param value: (double) - value.\n  :return: (double) tangent.",
  "tstat": "Returns the t-statistic.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) t-statistic of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) t-statistic of non-null values.",
  "upperBin": "**Incompatible overloads text - text from the first overload:**\n\nReturns the upper bound of the bin containing the value.\n\n The upper bound of the bin containing the value is equal to interval * ceil((value-offset) / interval) + offset.\n\n*Overload 1*  \n  :param value: (byte) - value.\n  :param interval: (byte) - bin width.\n  :return: (byte) upper bound of the bin containing the value.\n  \n*Overload 2*  \n  :param value: (byte) - value.\n  :param interval: (byte) - bin width.\n  :param offset: (byte) - interval offset\n  :return: (byte) upper bound of the bin containing the value.\n  \n*Overload 3*  \n  :param value: (short) - value.\n  :param interval: (short) - bin width.\n  :return: (short) upper bound of the bin containing the value.\n  \n*Overload 4*  \n  :param value: (short) - value.\n  :param interval: (short) - bin width.\n  :param offset: (short) - interval offset\n  :return: (short) upper bound of the bin containing the value.\n  \n*Overload 5*  \n  :param value: (int) - value.\n  :param interval: (int) - bin width.\n  :return: (int) upper bound of the bin containing the value.\n  \n*Overload 6*  \n  :param value: (int) - value.\n  :param interval: (int) - bin width.\n  :param offset: (int) - interval offset\n  :return: (int) upper bound of the bin containing the value.\n  \n*Overload 7*  \n  :param value: (long) - value.\n  :param interval: (long) - bin width.\n  :return: (long) upper bound of the bin containing the value.\n  \n*Overload 8*  \n  :param value: (long) - value.\n  :param interval: (long) - bin width.\n  :param offset: (long) - interval offset\n  :return: (long) upper bound of the bin containing the value.\n  \n*Overload 9*  \n  :param value: (float) - value.\n  :param interval: (float) - bin width.\n  :return: (float) upper bound of the bin containing the value.\n  \n*Overload 10*  \n  :param value: (float) - value.\n  :param interval: (float) - bin width.\n  :param offset: (float) - interval offset\n  :return: (float) upper bound of the bin containing the value.\n  \n*Overload 11*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :return: (double) upper bound of the bin containing the value.\n  \n*Overload 12*  \n  :param value: (double) - value.\n  :param interval: (double) - bin width.\n  :param offset: (double) - interval offset\n  :return: (double) upper bound of the bin containing the value.",
  "var": "Returns the variance.  Null values are excluded.\n\n*Overload 1*  \n  :param values: (java.lang.Byte[]) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 2*  \n  :param values: (byte...) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 4*  \n  :param values: (java.lang.Short[]) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 5*  \n  :param values: (short...) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 6*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 7*  \n  :param values: (java.lang.Integer[]) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 8*  \n  :param values: (int...) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 9*  \n  :param values: (io.deephaven.vector.IntVector) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 10*  \n  :param values: (java.lang.Long[]) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 11*  \n  :param values: (long...) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.LongVector) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 13*  \n  :param values: (java.lang.Float[]) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 14*  \n  :param values: (float...) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.FloatVector) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 16*  \n  :param values: (java.lang.Double[]) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 17*  \n  :param values: (double...) - values.\n  :return: (double) variance of non-null values.\n  \n*Overload 18*  \n  :param values: (io.deephaven.vector.DoubleVector) - values.\n  :return: (double) variance of non-null values.",
  "wavg": "Returns the weighted average.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 5*  \n  :param values: (byte[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 6*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 9*  \n  :param values: (byte[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 10*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 13*  \n  :param values: (byte[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 14*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 17*  \n  :param values: (byte[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 18*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 19*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 21*  \n  :param values: (byte[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 22*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 23*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 25*  \n  :param values: (short[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 26*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 27*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 29*  \n  :param values: (short[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 30*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 31*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 32*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 33*  \n  :param values: (short[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 34*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 35*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 36*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 37*  \n  :param values: (short[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 38*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 39*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 40*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 41*  \n  :param values: (short[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 42*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 43*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 44*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 45*  \n  :param values: (short[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 46*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 47*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 48*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 49*  \n  :param values: (int[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted average of non-null values.\n  \n*Overload 50*  \n  :param values: (int[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted average of non-null values.",
  "wstd": "Returns the weighted standard deviation.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 5*  \n  :param values: (byte[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 6*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 9*  \n  :param values: (byte[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 10*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 13*  \n  :param values: (byte[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 14*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 17*  \n  :param values: (byte[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 18*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 19*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 21*  \n  :param values: (byte[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 22*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 23*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 25*  \n  :param values: (short[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 26*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 27*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 29*  \n  :param values: (short[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 30*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 31*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 32*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 33*  \n  :param values: (short[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 34*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 35*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 36*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 37*  \n  :param values: (short[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 38*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 39*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 40*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 41*  \n  :param values: (short[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 42*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 43*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 44*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 45*  \n  :param values: (short[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 46*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 47*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 48*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 49*  \n  :param values: (int[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard deviation of non-null values.\n  \n*Overload 50*  \n  :param values: (int[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard deviation of non-null values.",
  "wste": "Returns the weighted standard error.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 5*  \n  :param values: (byte[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 6*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 9*  \n  :param values: (byte[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 10*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 13*  \n  :param values: (byte[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 14*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 17*  \n  :param values: (byte[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 18*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 19*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 21*  \n  :param values: (byte[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 22*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 23*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 25*  \n  :param values: (short[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 26*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 27*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 29*  \n  :param values: (short[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 30*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 31*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 32*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 33*  \n  :param values: (short[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 34*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 35*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 36*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 37*  \n  :param values: (short[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 38*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 39*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 40*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 41*  \n  :param values: (short[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 42*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 43*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 44*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 45*  \n  :param values: (short[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 46*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 47*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 48*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 49*  \n  :param values: (int[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted standard error of non-null values.\n  \n*Overload 50*  \n  :param values: (int[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted standard error of non-null values.",
  "wsum": "Returns the weighted sum.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 5*  \n  :param values: (byte[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 6*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 9*  \n  :param values: (byte[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 10*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 13*  \n  :param values: (byte[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 14*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 17*  \n  :param values: (byte[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 18*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 19*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 21*  \n  :param values: (byte[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 22*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 23*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 25*  \n  :param values: (short[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 26*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 27*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 29*  \n  :param values: (short[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 30*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 31*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 32*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 33*  \n  :param values: (short[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 34*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 35*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 36*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 37*  \n  :param values: (short[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 38*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 39*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 40*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 41*  \n  :param values: (short[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 42*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 43*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 44*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 45*  \n  :param values: (short[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 46*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 47*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 48*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 49*  \n  :param values: (int[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted sum of non-null values.\n  \n*Overload 50*  \n  :param values: (int[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted sum of non-null values.",
  "wtstat": "Returns the weighted t-statistic.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 5*  \n  :param values: (byte[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 6*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 9*  \n  :param values: (byte[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 10*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 13*  \n  :param values: (byte[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 14*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 17*  \n  :param values: (byte[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 18*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 19*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 21*  \n  :param values: (byte[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 22*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 23*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 25*  \n  :param values: (short[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 26*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 27*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 29*  \n  :param values: (short[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 30*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 31*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 32*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 33*  \n  :param values: (short[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 34*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 35*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 36*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 37*  \n  :param values: (short[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 38*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 39*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 40*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 41*  \n  :param values: (short[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 42*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 43*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 44*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 45*  \n  :param values: (short[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 46*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 47*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 48*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 49*  \n  :param values: (int[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted t-statistic of non-null values.\n  \n*Overload 50*  \n  :param values: (int[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted t-statistic of non-null values.",
  "wvar": "Returns the weighted variance.  Null values are excluded.\n\nThere are 144 overloads, restricting signature summary to first 50:\n*Overload 1*  \n  :param values: (byte[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 2*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 3*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 4*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 5*  \n  :param values: (byte[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 6*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 7*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 8*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 9*  \n  :param values: (byte[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 10*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 11*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 12*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 13*  \n  :param values: (byte[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 14*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 15*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 16*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 17*  \n  :param values: (byte[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 18*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 19*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 20*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 21*  \n  :param values: (byte[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 22*  \n  :param values: (byte[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 23*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 24*  \n  :param values: (io.deephaven.vector.ByteVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 25*  \n  :param values: (short[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 26*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 27*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 28*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 29*  \n  :param values: (short[]) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 30*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 31*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (short[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 32*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.ShortVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 33*  \n  :param values: (short[]) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 34*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 35*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (int[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 36*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.IntVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 37*  \n  :param values: (short[]) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 38*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 39*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (long[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 40*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.LongVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 41*  \n  :param values: (short[]) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 42*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 43*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (float[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 44*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.FloatVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 45*  \n  :param values: (short[]) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 46*  \n  :param values: (short[]) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 47*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (double[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 48*  \n  :param values: (io.deephaven.vector.ShortVector) - values.\n  :param weights: (io.deephaven.vector.DoubleVector) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 49*  \n  :param values: (int[]) - values.\n  :param weights: (byte[]) - weights\n  :return: (double) weighted variance of non-null values.\n  \n*Overload 50*  \n  :param values: (int[]) - values.\n  :param weights: (io.deephaven.vector.ByteVector) - weights\n  :return: (double) weighted variance of non-null values."
 },
 "path": "io.deephaven.function.Numeric",
 "text": "A set of commonly used numeric functions that can be applied to numeric types.",
 "typeName": "class"
}