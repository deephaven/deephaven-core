{
 "className": "io.deephaven.lang.generated.BaseToken",
 "methods": {
  "addBackLinks": "*Overload 1*  \n  :return: io.deephaven.lang.generated.Token\n  \n*Overload 2*  \n  :param until: io.deephaven.lang.generated.Token\n  :return: io.deephaven.lang.generated.Token",
  "compareTo": ":param o: io.deephaven.lang.generated.BaseToken\n:return: int",
  "contains": ":param replaceRange: io.deephaven.proto.backplane.script.grpc.DocumentRangeOrBuilder\n:return: boolean",
  "containsIndex": ":param desired: int\n:return: boolean",
  "containsPosition": ":param pos: io.deephaven.proto.backplane.script.grpc.PositionOrBuilder\n:return: boolean",
  "copyToken": ":param token: io.deephaven.lang.generated.Token",
  "dump": ":return: java.lang.String",
  "getEndIndex": ":return: int",
  "getNextNonWhitespace": ":return: io.deephaven.lang.generated.Token",
  "getStartIndex": ":return: int",
  "next": ":return: io.deephaven.lang.generated.Token",
  "positionEnd": "**Incompatible overloads text - text from the first overload:**\n\nConverts our 1-indexed javacc end token to a 0-indexed LSP Position.\n\n*Overload 1*  \n  :return: io.deephaven.proto.backplane.script.grpc.Position.Builder\n  \n*Overload 2*  \n  :param considerEof: (boolean) - Whether or not to normalize javacc's weird EOF token handling.\n                      Normally false, which allows the position to exceed the document's size.\n                      This is acceptable to Monaco.\n  \n                      EOF is only considered during internal operations when we are looking up tokens\n                      from cursor positions (and can likely be refactored / deleted when we stop using\n                      absolute cursor positions).\n  :return: (io.deephaven.proto.backplane.script.grpc.Position.Builder) A 0-indexed Position describing the end of this token.",
  "positionStart": "Converts our 1-indexed javacc start token to a 0-indexed LSP Position\n\n:return: io.deephaven.proto.backplane.script.grpc.Position.Builder",
  "prev": ":return: io.deephaven.lang.generated.Token",
  "special": ":return: io.deephaven.lang.generated.Token",
  "specialTokenLength": ":return: int",
  "to": ":param end: io.deephaven.lang.generated.Token\n:return: io.deephaven.web.shared.fu.MappedIterable<io.deephaven.lang.generated.Token>",
  "toReverse": "Returns an iterable which runs backwards from this token.\n If you specify an end token, the iterator will include that token and stop.\n\n If an end token is not specified, the iterable will run backwards until the start token.\n\n:param end: (io.deephaven.lang.generated.Token) - optional end token, if specified, will be the last token returned by iterator.\n:return: io.deephaven.web.shared.fu.MappedIterable<io.deephaven.lang.generated.Token>"
 },
 "path": "io.deephaven.lang.generated.BaseToken",
 "text": "A supertype for our generated token class.\n\n This is cleaner than us maintaining a complete copy of Token",
 "typeName": "class"
}