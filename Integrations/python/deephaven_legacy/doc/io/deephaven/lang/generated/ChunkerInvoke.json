{
 "className": "io.deephaven.lang.generated.ChunkerInvoke",
 "methods": {
  "getName": ":return: java.lang.String",
  "indexOfArgument": ":param node: io.deephaven.lang.generated.Node\n:return: int",
  "isAutocompleteTerminal": "Overridden manually for nodes who can \"have a cursor on them\" with respect to autocomplete.\n\n If any part of an ast node collects tokens that are \"leaf nodes\" (i.e. there are cursor positions\n where your ast node will be the most derived child found), then it is a candidate to be a terminal autocomplete source.\n\n When encountering whitespace or . or , we might search left or right for interesting nodes,\n and those ast nodes who are autocomplete terminal will be preferred over their children.\n\n The normal search algorithm is a standard binary tree search, where the next-leftmost|rightmost leaf node is transversed.\n When an `isAutocompleteTerminal() == true` node is found, however, we stop there to continue searches.\n\n:return: (boolean) true for nodes that the visitor in ChunkerCompleter will visit and generate results.\n\n This is not needed for always-terminal nodes, like ChunkerNum or ChunkerIdent, but is needed by terminal-nodes-with-children,\n like ChunkerInvoke or ChunkerNew.",
  "isCursorInArguments": ":param offset: int\n:return: boolean",
  "isCursorOnName": ":param offset: int\n:return: boolean",
  "jjtAccept": "Accept the visitor.\n\n:param visitor: io.deephaven.lang.generated.ChunkerVisitor\n:param data: java.lang.Object\n:return: java.lang.Object",
  "jjtAddChild": "This method tells the node to add its argument to the node's\n     list of children.\n\n:param n: io.deephaven.lang.generated.Node\n:param i: int",
  "setName": ":param name: java.lang.String"
 },
 "path": "io.deephaven.lang.generated.ChunkerInvoke",
 "typeName": "class"
}