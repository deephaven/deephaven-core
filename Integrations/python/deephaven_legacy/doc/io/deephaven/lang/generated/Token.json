{
 "className": "io.deephaven.lang.generated.Token",
 "methods": {
  "getValue": "An optional attribute value of the Token.\n Tokens which are not used as syntactic sugar will often contain\n meaningful values that will be used later on by the compiler or\n interpreter. This attribute value is often different from the image.\n Any subclass of Token that actually wants to return a non-null value can\n override this method as appropriate.\n\n:return: java.lang.Object",
  "newToken": "Returns a new Token object, by default. However, if you want, you\n can create and return subclass objects based on the value of ofKind.\n Simply add the cases to the switch for all those special cases.\n For example, if you have a subclass of Token called IDToken that\n you want to create if ofKind is ID, simply add something like :\n\n    case MyParserConstants.ID : return new IDToken(ofKind, image);\n\n to the following switch statement. Then you can cast matchedToken\n variable to the appropriate type and use sit in your lexical actions.\n\n*Overload 1*  \n  :param ofKind: int\n  :param image: java.lang.String\n  :return: io.deephaven.lang.generated.Token\n  \n*Overload 2*  \n  :param ofKind: int\n  :return: io.deephaven.lang.generated.Token",
  "toString": "Returns the image.\n\n:return: java.lang.String"
 },
 "path": "io.deephaven.lang.generated.Token",
 "text": "Describes the input token stream.",
 "typeName": "class"
}