{
 "className": "io.deephaven.lang.generated.ChunkerMixin$PeekStream",
 "methods": {
  "assign": ":return: io.deephaven.lang.generated.ChunkerMixin.PeekStream",
  "eof": ":param cs: char...\n:return: io.deephaven.lang.generated.ChunkerMixin.PeekStream.EofChecker",
  "eofOr": ":param cs: char...\n:return: io.deephaven.lang.generated.ChunkerMixin.PeekStream",
  "exact": "*Overload 1*  \n  :param cs: char...\n  :return: io.deephaven.lang.generated.ChunkerMixin.PeekStream\n  \n*Overload 2*  \n  :param cs: java.lang.String\n  :return: io.deephaven.lang.generated.ChunkerMixin.PeekStream",
  "identifier": ":param allowedEndings: java.util.Set<java.lang.Character>\n:return: io.deephaven.lang.generated.ChunkerMixin.PeekStream",
  "is": "*Overload 1*  \n  :param cs: char...\n  :return: io.deephaven.lang.generated.ChunkerMixin.PeekStream.Checker\n  \n*Overload 2*  \n  :param s: java.lang.String\n  :return: io.deephaven.lang.generated.ChunkerMixin.PeekStream.Checker",
  "matches": ":param peeking: boolean\n:return: boolean",
  "whitespace": ":return: io.deephaven.lang.generated.ChunkerMixin.PeekStream",
  "ws": "*Overload 1*  \n  :return: io.deephaven.lang.generated.ChunkerMixin.PeekStream.Checker\n  \n*Overload 2*  \n  :param required: boolean\n  :return: io.deephaven.lang.generated.ChunkerMixin.PeekStream.Checker"
 },
 "path": "io.deephaven.lang.generated.ChunkerMixin.PeekStream",
 "text": "A stream specialized for \"peek ahead\" during semantic LOOKAHEAD.\n\n Normally, lookahead will assign tokens as it is looking ahead,\n but this can be problematic, as it can mis-identify and assign a token,\n causing the real match to be missed.\n\n We instead use direct access to tokens and underlying streams,\n so we can manually identify which paths to take; this can cause\n our peekaheads to be called multiple times at the same place\n (since we aren't assigning tokens for quick re-lookup),\n but we can ameliorate that performance with\n some light memoization on tokens (later).",
 "typeName": "class"
}