{
 "className": "io.deephaven.lang.generated.Chunker",
 "methods": {
  "Annotation": ":return: io.deephaven.lang.generated.ChunkerAnnotation",
  "Annotations": ":return: java.util.List<io.deephaven.lang.generated.ChunkerAnnotation>",
  "Array": ":return: io.deephaven.lang.generated.ChunkerArray",
  "Assign": ":return: io.deephaven.lang.generated.ChunkerAssign",
  "BinaryExpression": ":param left: io.deephaven.lang.generated.Node\n:return: io.deephaven.lang.generated.ChunkerBinaryExpression",
  "Closure": ":return: io.deephaven.lang.generated.ChunkerClosure",
  "ClosureParams": ":return: io.deephaven.lang.generated.Node",
  "Document": ":return: io.deephaven.lang.generated.ChunkerDocument",
  "EatStatements": ":param persistent: boolean\n:return: io.deephaven.lang.generated.Node",
  "Eof": ":return: io.deephaven.lang.generated.ChunkerEof",
  "Expression": ":return: io.deephaven.lang.generated.Node",
  "Ident": ":return: io.deephaven.lang.generated.ChunkerIdent",
  "Invoke": ":return: io.deephaven.lang.generated.ChunkerInvoke",
  "JavaClassDecl": ":return: io.deephaven.lang.generated.ChunkerJavaClassDecl",
  "MethodArg": ":return: io.deephaven.lang.generated.Node",
  "MethodArguments": ":param invokable: io.deephaven.lang.api.ChunkerInvokable",
  "MethodName": ":return: io.deephaven.lang.generated.ChunkerMethodName",
  "New": ":return: io.deephaven.lang.generated.ChunkerNew",
  "Newline": ":return: io.deephaven.lang.generated.ChunkerNewline",
  "Num": ":return: io.deephaven.lang.generated.ChunkerNum",
  "Param": ":return: io.deephaven.lang.generated.ChunkerParam",
  "ReInit": "Reinitialise.\n\n*Overload 1*  \n  :param s: java.lang.String\n  \n*Overload 2*  \n  :param stream: io.deephaven.lang.generated.Provider\n  \n*Overload 3*  \n  :param tm: io.deephaven.lang.generated.ChunkerTokenManager",
  "Scope": ":return: java.util.List<io.deephaven.lang.api.IsScope>",
  "Statement": ":return: io.deephaven.lang.generated.ChunkerStatement",
  "String": ":return: io.deephaven.lang.generated.ChunkerString",
  "TypeDecl": ":return: io.deephaven.lang.generated.ChunkerTypeDecl",
  "TypeParam": ":param canWildcard: boolean\n:return: io.deephaven.lang.generated.ChunkerTypeParam",
  "TypeParams": ":return: io.deephaven.lang.generated.ChunkerTypeParams",
  "TypedAssign": ":return: io.deephaven.lang.generated.ChunkerTypedAssign",
  "Values": ":return: io.deephaven.lang.generated.Node",
  "Whitespace": ":return: io.deephaven.lang.generated.ChunkerWhitespace",
  "back": ":param backup: int\n:param tokenBegin: int",
  "curToken": ":return: io.deephaven.lang.generated.Token",
  "disable_tracing": "Disable tracing.",
  "enable_tracing": "Enable tracing.",
  "generateParseException": "Generate ParseException.\n\n:return: io.deephaven.lang.generated.ParseException",
  "getMessenger": ":return: io.deephaven.lang.meta.Messenger",
  "getNextToken": "Get the next Token.\n\n:return: io.deephaven.lang.generated.Token",
  "getToken": "Get the specific Token.\n\n:param index: int\n:return: io.deephaven.lang.generated.Token",
  "isLookingAhead": ":return: boolean",
  "main": ":param args: java.lang.String[]",
  "maybeBin": ":param src: io.deephaven.lang.generated.Node\n:return: io.deephaven.lang.generated.Node",
  "next": ":return: char",
  "setMessenger": ":param messenger: io.deephaven.lang.meta.Messenger\n:return: io.deephaven.lang.meta.Messenger",
  "token": ":return: io.deephaven.lang.generated.Token",
  "trace_enabled": "Trace enabled.\n\n:return: boolean"
 },
 "path": "io.deephaven.lang.generated.Chunker",
 "typeName": "class"
}