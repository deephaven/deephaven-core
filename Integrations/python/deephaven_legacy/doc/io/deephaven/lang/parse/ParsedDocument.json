{
 "className": "io.deephaven.lang.parse.ParsedDocument",
 "methods": {
  "extendEnd": ":param item: io.deephaven.proto.backplane.script.grpc.CompletionItem.Builder\n:param requested: io.deephaven.proto.backplane.script.grpc.Position\n:param node: io.deephaven.lang.generated.Node",
  "findEditRange": ":param replaceRange: io.deephaven.proto.backplane.script.grpc.DocumentRange\n:return: io.deephaven.proto.backplane.script.grpc.Position.Builder",
  "findNode": ":param p: int\n:return: io.deephaven.lang.generated.Node",
  "getAssignments": ":return: java.util.Map<java.lang.String,java.util.List<io.deephaven.lang.generated.ChunkerAssign>>",
  "getDoc": ":return: io.deephaven.lang.generated.ChunkerDocument",
  "getLastGoodSource": ":return: java.lang.String",
  "getSource": ":return: java.lang.String",
  "isError": ":return: boolean",
  "logErrors": ":param log: io.deephaven.io.logger.Logger",
  "toString": ":return: java.lang.String",
  "withError": "When a parse fails, we do not throw away our last-good document.\n\n We do, however, record the failure information, which you should check via isError().\n\n:param src: (java.lang.String) - The source with an error\n:param e: (io.deephaven.lang.generated.ParseException) - The parse exception. May make this any exception type.\n:return: (io.deephaven.lang.parse.ParsedDocument) this, for chaining. We may need to make copies later, but for now, we'll use it as-is."
 },
 "path": "io.deephaven.lang.parse.ParsedDocument",
 "text": "Represents a parsed document.\n\n For now, we will be re-parsing the entire string document every time, but in the future, we would like to be able to\n update only ranges of changed code.",
 "typeName": "class"
}