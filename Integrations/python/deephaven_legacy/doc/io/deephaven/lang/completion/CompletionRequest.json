{
 "className": "io.deephaven.lang.completion.CompletionRequest",
 "methods": {
  "candidate": ":param index: int\n:return: io.deephaven.lang.completion.CompletionRequest",
  "getBeforeCursor": ":return: java.lang.String",
  "getCandidate": ":return: int",
  "getOffset": ":return: int",
  "getSource": ":return: java.lang.String",
  "getTableDefinition": ":param completer: io.deephaven.lang.completion.ChunkerCompleter\n:param doc: io.deephaven.lang.parse.ParsedDocument\n:param variables: io.deephaven.engine.util.VariableProvider\n:param name: java.lang.String\n:return: io.deephaven.engine.table.TableDefinition",
  "toString": ":return: java.lang.String"
 },
 "path": "io.deephaven.lang.completion.CompletionRequest",
 "text": "A stateful object to represent a document search at a given position.\n\n When we search left or right from an intermediate node like whitespace, dot, comma or EOF, we will create a new\n CompletionRequest at the new index.\n\n This currently uses absolute cursor positions, but we want this to be a line/column position instead, so we can\n completely remove consideration of absolute cursors.\n\n This mistake was made by trying to base V2 on V1 semantics which are not really relevant when considering Monaco, LSP\n and Javacc which all use line/column semantics.\n\n Absolute cursor positions are unfortunately deeply entwined in ChunkerCompleter, so we are leaving it in\n place for now.\n\n Note that this class also maintains a map of loaded table definitions, so that repeated completions will not pay to\n load the same table definition more than once.",
 "typeName": "class"
}