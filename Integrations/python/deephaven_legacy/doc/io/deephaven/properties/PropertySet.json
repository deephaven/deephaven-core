{
 "className": "io.deephaven.properties.PropertySet",
 "methods": {
  "of": "*Overload 1*  \n  :param properties: java.util.Properties\n  :return: io.deephaven.properties.PropertySet\n  \n*Overload 2*  \n  :param map: java.util.Map<java.lang.String,java.lang.String>\n  :return: io.deephaven.properties.PropertySet\n  \n*Overload 3*  \n  :param list: java.util.List<java.lang.String>\n  :return: io.deephaven.properties.PropertySet",
  "traverse": "Traverse this property set and output the property key/values to the given visitor.\n \n Callers should typically prefer to call PropertyVisitor.visitProperties(PropertySet), as the inversion of\n logic allows the visitor (the more stateful object) to potentially perform initialization logic and traverse more\n efficiently.\n\n:param visitor: (io.deephaven.properties.PropertyVisitor) - the visitor"
 },
 "path": "io.deephaven.properties.PropertySet",
 "text": "A property set represents a set of property keys and values. The key is a String type, and the value can be of type\n int, long, boolean, or String. (Note: we may use a stronger type in the future for a key, and may expand the types\n that a value can be.)\n\n \n A property set interface present read-only access to the keys and values via traverse(PropertyVisitor).",
 "typeName": "interface"
}