{
 "className": "io.deephaven.properties.PropertyVisitor",
 "methods": {
  "maybeVisit": "A helper method that makes PropertySet.traverse(PropertyVisitor) implementations cleaner. Equivalent to\n value.ifPresent(x -> visit(key, x)). Must not be overridden.\n\n*Overload 1*  \n  :param key: (java.lang.String) - the key\n  :param value: (java.util.Optional<java.lang.String>) - the optional value\n  \n*Overload 2*  \n  :param key: (java.lang.String) - the key\n  :param value: (java.util.OptionalInt) - the optional value\n  \n*Overload 3*  \n  :param key: (java.lang.String) - the key\n  :param value: (java.util.OptionalLong) - the optional value",
  "maybeVisitProperties": "A helper method that makes PropertySet.traverse(PropertyVisitor) implementations cleaner. Equivalent to\n properties.ifPresent(x -> visitProperties(key, x)). Must not be overridden.\n\n:param key: (java.lang.String) - the key\n:param properties: (java.util.Optional<? extendsio.deephaven.properties.PropertySet>) - the optional value",
  "of": "*Overload 1*  \n  :param out: java.io.PrintStream\n  :return: io.deephaven.properties.PropertyVisitor\n  \n*Overload 2*  \n  :param consumer: java.util.function.BiConsumer<java.lang.String,java.lang.String>\n  :return: io.deephaven.properties.PropertyVisitor",
  "stderr": ":return: io.deephaven.properties.PropertyVisitor",
  "stdout": ":return: io.deephaven.properties.PropertyVisitor",
  "toStringMap": ":param properties: io.deephaven.properties.PropertySet\n:return: java.util.Map<java.lang.String,java.lang.String>",
  "visit": "**Incompatible overloads text - text from the first overload:**\n\nPerforms this operation on the given key and String value.\n\n*Overload 1*  \n  :param key: (java.lang.String) - the key\n  :param value: (java.lang.String) - the value\n  \n*Overload 2*  \n  :param key: (java.lang.String) - the key\n  :param value: (int) - the value\n  \n*Overload 3*  \n  :param key: (java.lang.String) - the key\n  :param value: (long) - the value\n  \n*Overload 4*  \n  :param key: (java.lang.String) - the key\n  :param value: (boolean) - the value",
  "visitProperties": "**Incompatible overloads text - text from the first overload:**\n\nA helper method that recursively builds up the keys based on the provided key, and the keys of the property set.\n The majority of implementations should not override this.\n\n*Overload 1*  \n  :param properties: (io.deephaven.properties.PropertySet) - the property set\n  \n*Overload 2*  \n  :param key: (java.lang.String) - the key\n  :param properties: (io.deephaven.properties.PropertySet) - the property set"
 },
 "path": "io.deephaven.properties.PropertyVisitor",
 "text": "A property visitor is the generic interface for reading property keys and values from a PropertySet.",
 "typeName": "interface"
}