{
 "className": "io.deephaven.base.LockFreeArrayQueue",
 "methods": {
  "capacity": ":return: int",
  "consume": "This method should never block (but it may spin for a finite amount of time) Returns null when there is nothing\n to consume [may create new objects on the fly if necessary]\n\n:return: LockFreeArrayQueue.T",
  "dequeue": "Returns null when the queue is empty This method should never block (but it may spin for a finite amount of time)\n\n:return: LockFreeArrayQueue.T",
  "dequeueIf": ":param predicate: io.deephaven.base.Predicate.Unary<LockFreeArrayQueue.T>\n:return: LockFreeArrayQueue.T",
  "dequeueThisObject": ":param expected: LockFreeArrayQueue.T\n:return: LockFreeArrayQueue.T",
  "enqueue": "**Incompatible overloads text - text from the first overload:**\n\nReturns false when the queue is full This method should never block (but it may spin for a finite amount of time)\n\n*Overload 1*  \n  :param new_value: LockFreeArrayQueue.T\n  :return: boolean\n  \n*Overload 2*  \n  :param new_value: LockFreeArrayQueue.T\n  :param spins_between_yields: long\n  :return: boolean\n  \n*Overload 3*  \n  :param new_value: LockFreeArrayQueue.T\n  :param timeoutMicros: long\n  :param maxSpins: long\n  :return: boolean",
  "getMaxAllowedCapacity": "Get the maximum allowed queue capacity of this class.\n\n:return: (int) the minimum allowed capacity",
  "getMinAllowedCapacity": "Get the minimum allowed queue capacity of this class.\n\n:return: (int) the minimum allowed capacity",
  "peek": "Return the current next value, or null if the queue is empty.\n\n:return: LockFreeArrayQueue.T",
  "produce": "This method should never block (but it may spin for a finite amount of time) Returns true when t was successfully\n produced, else false\n\n:param t: LockFreeArrayQueue.T\n:return: boolean",
  "put": "Only return when enqueued. (Might spin continuously)\n\n:param new_value: LockFreeArrayQueue.T",
  "take": "Only return w/ a dequeued value. (Might spin continuously)\n\n:return: LockFreeArrayQueue.T"
 },
 "path": "io.deephaven.base.LockFreeArrayQueue",
 "text": "A Java implementation of the algorithm described in:\n\n Philippas Tsigas, Yi Zhang, \"A simple, fast and scalable non-blocking concurrent FIFO queue for shared memory\n multiprocessor systems\", Proceedings of the thirteenth annual ACM symposium on Parallel algorithms and architectures,\n p.134-143, July 2001, Crete Island, Greece\n\n This version modifies the way we choose which NULL to use when dequeuing: 1) We let the head and tail pointers range\n over the entire set of 32-bit unsigned values. We can convert a 32-bit unsigned integer into a node index with the\n mod operator (or a bit mask, if we limit the queue sizes to powers of two). 2) On each successive \"pass\" over the\n array, we want to alternate between NULL(0) and NULL(1), that is, the first time the head pointer goes from zero to\n cap, we replace dequeued values with NULL(0), then when head wraps back to zero we switch to using NULL(1). Since we\n allow head to range over all 32-bit values, we can compute which null to use a NULL((head / cap) % 2). If we are\n using powers of two, then the low-order bits [0,N] specify the index into the nodes array, and bit N+1 specifies\n whether to use NULL(0) or NULL(1) when dequeuing.",
 "typeName": "class"
}