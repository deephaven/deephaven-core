{
 "className": "io.deephaven.base.array.FastArray",
 "methods": {
  "add": "*Overload 1*  \n  :param t: FastArray.T\n  \n*Overload 2*  \n  :param t: FastArray.T[]\n  :param startIndex: int\n  :param len: int",
  "addUnique": ":param t: FastArray.T\n:return: boolean",
  "cloneDeep": "Note: Java generics information - <C extends io.deephaven.base.Copyable<C>>\n\n:param THIS: io.deephaven.base.array.FastArray<C>\n:return: io.deephaven.base.array.FastArray<C>",
  "cloneShallow": "Note: Java generics information - <C>\n\n:param THIS: io.deephaven.base.array.FastArray<C>\n:return: io.deephaven.base.array.FastArray<C>",
  "copyFullReset": "Note: Java generics information - <C extends io.deephaven.base.Copyable<C>>\n\n:param THIS: io.deephaven.base.array.FastArray<C>\n:param resetValue: C",
  "copyNormalReset": "Note: Java generics information - <C extends io.deephaven.base.Copyable<C>>\n\n:param THIS: io.deephaven.base.array.FastArray<C>\n:param resetValue: C",
  "copyValuesDeep": "Note: Java generics information - <C extends io.deephaven.base.Copyable<C>>\n\n:param THIS: (io.deephaven.base.array.FastArray<C>) - array will hold copies of right's content. Modified\n:param right: (io.deephaven.base.array.FastArray<C>) - content holder. Not-modified",
  "copyValuesShallow": "Note: Java generics information - <C>\n\n:param THIS: io.deephaven.base.array.FastArray<C>\n:param right: io.deephaven.base.array.FastArray<C>",
  "equals": ":param o: java.lang.Object\n:return: boolean",
  "fastAdd": "*Overload 1*  \n  :param t: FastArray.T\n  \n*Overload 2*  \n  :param t: FastArray.T[]\n  :param startIndex: int\n  :param len: int",
  "fullReset": "*Overload 1*  \n  \n  \n*Overload 2*  \n  :param resetValue: FastArray.T",
  "getLength": ":return: int",
  "getNewInstance": ":return: io.deephaven.base.Function.Nullary<? extends FastArray.T>",
  "getUnsafeArray": ":return: FastArray.T[]",
  "hashCode": ":return: int",
  "maybeCopyValuesDeep": "Note: Java generics information - <C extends io.deephaven.base.Copyable<C>>\n\n:param THIS: io.deephaven.base.array.FastArray<C>\n:param right: io.deephaven.base.array.FastArray<C>\n:return: boolean",
  "next": ":return: FastArray.T",
  "normalReset": "*Overload 1*  \n  \n  \n*Overload 2*  \n  :param resetValue: FastArray.T",
  "pop": ":return: FastArray.T",
  "readExternal": "*Overload 1*  \n  Note: Java generics information - <C extends java.io.Externalizable>\n  \n  :param THIS: io.deephaven.base.array.FastArray<C>\n  :param in: java.io.ObjectInput\n  \n*Overload 2*  \n  Note: Java generics information - <C>\n  \n  :param THIS: io.deephaven.base.array.FastArray<C>\n  :param in: java.io.ObjectInput\n  :param readExternalFunction: io.deephaven.base.array.FastArray.ReadExternalFunction<C>",
  "removeThisIndex": ":param index: int\n:return: FastArray.T",
  "removeThisIndexDontCareAboutOrder": ":param index: int\n:return: FastArray.T",
  "toString": ":return: java.lang.String",
  "toStringXml": ":param pre: java.lang.String\n:return: java.lang.String",
  "writeExternal": "*Overload 1*  \n  Note: Java generics information - <C extends java.io.Externalizable>\n  \n  :param THIS: io.deephaven.base.array.FastArray<C>\n  :param out: java.io.ObjectOutput\n  \n*Overload 2*  \n  Note: Java generics information - <C extends java.io.Externalizable>\n  \n  :param THIS: io.deephaven.base.array.FastArray<C>\n  :param out: java.io.ObjectOutput\n  :param maxToWrite: int\n  \n*Overload 3*  \n  Note: Java generics information - <C>\n  \n  :param THIS: io.deephaven.base.array.FastArray<C>\n  :param out: java.io.ObjectOutput\n  :param writeExternalFunction: io.deephaven.base.array.FastArray.WriteExternalFunction<C>"
 },
 "path": "io.deephaven.base.array.FastArray",
 "typeName": "class"
}