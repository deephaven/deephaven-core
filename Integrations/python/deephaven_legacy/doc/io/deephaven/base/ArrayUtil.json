{
 "className": "io.deephaven.base.ArrayUtil",
 "methods": {
  "addExactToArray": "Note: Java generics information - <T>\n\n:param e: T\n:param a: T[]\n:param c: java.lang.Class<T>\n:return: T[]",
  "addToArray": "*Overload 1*  \n  :param e: int\n  :param a: int[]\n  :return: int[]\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param e: T\n  :param a: T[]\n  :param c: java.lang.Class<T>\n  :return: T[]",
  "addUnless": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param c: java.lang.Class<T>\n  :param pred: io.deephaven.base.Predicate.Unary<T>\n  :param factory: io.deephaven.base.Function.Nullary<T>\n  :return: T[]\n  \n*Overload 2*  \n  Note: Java generics information - <T,\n  A>\n  \n  :param a: T[]\n  :param c: java.lang.Class<T>\n  :param pred: io.deephaven.base.Predicate.Binary<T,A>\n  :param factory: io.deephaven.base.Function.Unary<T,A>\n  :param arg: A\n  :return: T[]",
  "any": ":param a: int[]\n:param predicate: io.deephaven.base.Predicate.Int\n:return: boolean",
  "appendIntArray": ":param sb: java.lang.StringBuilder\n:param vs: int[]\n:param compact: boolean\n:return: java.lang.StringBuilder",
  "contains": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param value: T\n  :return: boolean\n  \n*Overload 2*  \n  :param a: int[]\n  :param value: int\n  :return: boolean\n  \n*Overload 3*  \n  :param a: long[]\n  :param value: long\n  :return: boolean",
  "containsExact": "Note: Java generics information - <T>\n\n:param a: T[]\n:param value: T\n:return: boolean",
  "copyArray": "*Overload 1*  \n  :param a: int[]\n  :param L: int\n  :return: int[]\n  \n*Overload 2*  \n  :param a: long[]\n  :param L: int\n  :return: long[]",
  "deleteArrayPos": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param i: int\n  :param a: T[]\n  :return: T[]\n  \n*Overload 2*  \n  :param i: int\n  :param a: double[]\n  :return: double[]\n  \n*Overload 3*  \n  :param i: int\n  :param a: int[]\n  :return: int[]",
  "deleteArrayRefValueIfPresent": "Note: Java generics information - <T>\n\n:param vref: T\n:param a: T[]\n:return: T[]",
  "ensureSize": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param len: int\n  :param extend: java.lang.Class<?\n  :return: T[]\n  \n*Overload 2*  \n  :param a: byte[]\n  :param len: int\n  :return: byte[]\n  \n*Overload 3*  \n  :param a: byte[]\n  :param len: int\n  :param fill: byte\n  :return: byte[]\n  \n*Overload 4*  \n  :param a: int[]\n  :param len: int\n  :return: int[]\n  \n*Overload 5*  \n  :param a: int[]\n  :param len: int\n  :param fill: int\n  :return: int[]\n  \n*Overload 6*  \n  :param a: long[]\n  :param len: int\n  :return: long[]\n  \n*Overload 7*  \n  :param a: long[]\n  :param len: int\n  :param fill: long\n  :return: long[]\n  \n*Overload 8*  \n  :param a: double[]\n  :param len: int\n  :return: double[]\n  \n*Overload 9*  \n  :param a: double[]\n  :param len: int\n  :param fill: double\n  :return: double[]\n  \n*Overload 10*  \n  :param a: boolean[]\n  :param len: int\n  :return: boolean[]\n  \n*Overload 11*  \n  :param a: boolean[]\n  :param len: int\n  :param fill: boolean\n  :return: boolean[]",
  "ensureSizeNoCopy": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param len: int\n  :param extend: java.lang.Class<?\n  :return: T[]\n  \n*Overload 2*  \n  :param a: char[]\n  :param len: int\n  :return: char[]\n  \n*Overload 3*  \n  :param a: short[]\n  :param len: int\n  :return: short[]\n  \n*Overload 4*  \n  :param a: int[]\n  :param len: int\n  :return: int[]\n  \n*Overload 5*  \n  :param a: long[]\n  :param len: int\n  :return: long[]\n  \n*Overload 6*  \n  :param a: float[]\n  :param len: int\n  :return: float[]\n  \n*Overload 7*  \n  :param a: double[]\n  :param len: int\n  :return: double[]\n  \n*Overload 8*  \n  :param a: boolean[]\n  :param len: int\n  :return: boolean[]\n  \n*Overload 9*  \n  :param a: byte[]\n  :param len: int\n  :return: byte[]",
  "equals": "*Overload 1*  \n  :param a: long[]\n  :param a2: long[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 2*  \n  :param a: int[]\n  :param a2: int[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 3*  \n  :param a: short[]\n  :param a2: short[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 4*  \n  :param a: char[]\n  :param a2: char[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 5*  \n  :param a: byte[]\n  :param a2: byte[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 6*  \n  :param a: boolean[]\n  :param a2: boolean[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 7*  \n  :param a: double[]\n  :param a2: double[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 8*  \n  :param a: float[]\n  :param a2: float[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean\n  \n*Overload 9*  \n  :param a: java.lang.Object[]\n  :param a2: java.lang.Object[]\n  :param start1: int\n  :param start2: int\n  :param length: int\n  :return: boolean",
  "extend": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param i: int\n  :param extend: java.lang.Class<?\n  :return: T[]\n  \n*Overload 2*  \n  :param a: byte[]\n  :param i: int\n  :return: byte[]\n  \n*Overload 3*  \n  :param a: byte[]\n  :param i: int\n  :param fill: byte\n  :return: byte[]\n  \n*Overload 4*  \n  :param a: char[]\n  :param i: int\n  :return: char[]\n  \n*Overload 5*  \n  :param a: char[]\n  :param i: int\n  :param fill: char\n  :return: char[]\n  \n*Overload 6*  \n  :param a: short[]\n  :param i: int\n  :return: short[]\n  \n*Overload 7*  \n  :param a: short[]\n  :param i: int\n  :param fill: short\n  :return: short[]\n  \n*Overload 8*  \n  :param a: int[]\n  :param i: int\n  :return: int[]\n  \n*Overload 9*  \n  :param a: int[]\n  :param i: int\n  :param fill: int\n  :return: int[]\n  \n*Overload 10*  \n  :param a: long[]\n  :param i: int\n  :return: long[]\n  \n*Overload 11*  \n  :param a: long[]\n  :param i: int\n  :param fill: long\n  :return: long[]\n  \n*Overload 12*  \n  :param a: float[]\n  :param i: int\n  :return: float[]\n  \n*Overload 13*  \n  :param a: float[]\n  :param i: int\n  :param fill: float\n  :return: float[]\n  \n*Overload 14*  \n  :param a: double[]\n  :param i: int\n  :return: double[]\n  \n*Overload 15*  \n  :param a: double[]\n  :param i: int\n  :param fill: double\n  :return: double[]\n  \n*Overload 16*  \n  :param a: boolean[]\n  :param i: int\n  :return: boolean[]\n  \n*Overload 17*  \n  :param a: boolean[]\n  :param i: int\n  :param fill: boolean\n  :return: boolean[]",
  "extendNoCopy": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param i: int\n  :param extend: java.lang.Class<?\n  :return: T[]\n  \n*Overload 2*  \n  :param a: char[]\n  :param i: int\n  :return: char[]\n  \n*Overload 3*  \n  :param a: short[]\n  :param i: int\n  :return: short[]\n  \n*Overload 4*  \n  :param a: int[]\n  :param i: int\n  :return: int[]\n  \n*Overload 5*  \n  :param a: long[]\n  :param i: int\n  :return: long[]\n  \n*Overload 6*  \n  :param a: float[]\n  :param i: int\n  :return: float[]\n  \n*Overload 7*  \n  :param a: double[]\n  :param i: int\n  :return: double[]\n  \n*Overload 8*  \n  :param a: boolean[]\n  :param i: int\n  :return: boolean[]\n  \n*Overload 9*  \n  :param a: byte[]\n  :param i: int\n  :return: byte[]",
  "find": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param predicate: io.deephaven.base.Predicate.Unary<T>\n  :return: T\n  \n*Overload 2*  \n  :param a: int[]\n  :param predicate: io.deephaven.base.Predicate.Int\n  :return: int\n  \n*Overload 3*  \n  :param a: int[]\n  :param predicate: io.deephaven.base.Predicate.Int\n  :param notFound: int\n  :return: int",
  "hashCode": "*Overload 1*  \n  :param a: long[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 2*  \n  :param a: int[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 3*  \n  :param a: short[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 4*  \n  :param a: char[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 5*  \n  :param a: byte[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 6*  \n  :param a: boolean[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 7*  \n  :param a: float[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 8*  \n  :param a: double[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 9*  \n  :param a: java.lang.Object[]\n  :param min: int\n  :param length: int\n  :return: int",
  "hashCodeAnyOrder": "*Overload 1*  \n  :param a: long[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 2*  \n  :param a: int[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 3*  \n  :param a: short[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 4*  \n  :param a: char[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 5*  \n  :param a: byte[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 6*  \n  :param a: boolean[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 7*  \n  :param a: float[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 8*  \n  :param a: double[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 9*  \n  :param a: java.lang.Object[]\n  :param min: int\n  :param length: int\n  :return: int",
  "hashCodeAnyOrderAnySign": "*Overload 1*  \n  :param a: long[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 2*  \n  :param a: int[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 3*  \n  :param a: short[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 4*  \n  :param a: float[]\n  :param min: int\n  :param length: int\n  :return: int\n  \n*Overload 5*  \n  :param a: double[]\n  :param min: int\n  :param length: int\n  :return: int",
  "indexOf": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param value: T\n  :return: int\n  \n*Overload 2*  \n  :param a: int[]\n  :param value: int\n  :return: int",
  "init": "Note: Java generics information - <T>\n\n:param array: T[]\n:param producer: io.deephaven.base.Function.Nullary<T>",
  "insert": "*Overload 1*  \n  :param a: int[]\n  :param i: int\n  :param v: int\n  :return: int[]\n  \n*Overload 2*  \n  :param a: double[]\n  :param i: int\n  :param v: double\n  :return: double[]\n  \n*Overload 3*  \n  :param a: long[]\n  :param i: int\n  :param v: long\n  :return: long[]\n  \n*Overload 4*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param i: int\n  :param v: T\n  :param extend: java.lang.Class<?\n  :return: T[]\n  \n*Overload 5*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param insertionPoint: int\n  :param numElements: int\n  :param v: T\n  :param extend: java.lang.Class<?\n  :return: T[]",
  "insertOrdered": "Note: Java generics information - <T>\n\n:param comp: java.util.Comparator<T>\n:param a: T[]\n:param v: T\n:param extend: java.lang.Class<?\n:return: T[]",
  "intArrayArrayArrayToString": ":param vs: int[][][]\n:return: java.lang.String",
  "intArrayArrayToString": ":param vs: int[][]\n:return: java.lang.String",
  "intArrayToString": "*Overload 1*  \n  :param vs: int[]\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param vs: int[]\n  :param compact: boolean\n  :return: java.lang.String",
  "intRangeArray": ":param min: int\n:param max: int\n:return: int[]",
  "isSorted": "*Overload 1*  \n  :param integers: int[]\n  :return: boolean\n  \n*Overload 2*  \n  :param longs: long[]\n  :return: boolean\n  \n*Overload 3*  \n  :param doubles: double[]\n  :return: boolean\n  \n*Overload 4*  \n  Note: Java generics information - <T extends java.lang.Comparable<? super T>>\n  \n  :param objects: T[]\n  :return: boolean",
  "mapFromArray": "Note: Java generics information - <K,\nV>\n\n:param keyType: java.lang.Class<K>\n:param valueType: java.lang.Class<V>\n:param data: java.lang.Object...\n:return: java.util.Map<K,V>",
  "merge": "*Overload 1*  \n  :param ss1: int[]\n  :param ss2: int[]\n  :return: int[]\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param ss1: T[]\n  :param ss2: T[]\n  :param c: java.lang.Class<T>\n  :return: T[]\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param c: java.lang.Class<T>\n  :param ss: T[]...\n  :return: T[]",
  "pushArray": "*Overload 1*  \n  :param e: int\n  :param a: int[]\n  :return: int[]\n  \n*Overload 2*  \n  :param e: double\n  :param a: double[]\n  :return: double[]\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param e: T\n  :param a: T[]\n  :param c: java.lang.Class<T>\n  :return: T[]",
  "put": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param i: int\n  :param v: T\n  :param extend: java.lang.Class<?\n  :return: T[]\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param i: int\n  :param vs: T[]\n  :param vi: int\n  :param vlen: int\n  :param extend: java.lang.Class<?\n  :return: T[]\n  \n*Overload 3*  \n  :param a: boolean[]\n  :param i: int\n  :param vs: boolean[]\n  :param vi: int\n  :param vlen: int\n  :return: boolean[]\n  \n*Overload 4*  \n  :param a: byte[]\n  :param i: int\n  :param vs: byte[]\n  :param vi: int\n  :param vlen: int\n  :return: byte[]\n  \n*Overload 5*  \n  :param a: char[]\n  :param i: int\n  :param vs: char[]\n  :param vi: int\n  :param vlen: int\n  :return: char[]\n  \n*Overload 6*  \n  :param a: short[]\n  :param i: int\n  :param vs: short[]\n  :param vi: int\n  :param vlen: int\n  :return: short[]\n  \n*Overload 7*  \n  :param a: int[]\n  :param i: int\n  :param vs: int[]\n  :param vi: int\n  :param vlen: int\n  :return: int[]\n  \n*Overload 8*  \n  :param a: long[]\n  :param i: int\n  :param vs: long[]\n  :param vi: int\n  :param vlen: int\n  :return: long[]\n  \n*Overload 9*  \n  :param a: float[]\n  :param i: int\n  :param vs: float[]\n  :param vi: int\n  :param vlen: int\n  :return: float[]\n  \n*Overload 10*  \n  :param a: double[]\n  :param i: int\n  :param vs: double[]\n  :param vi: int\n  :param vlen: int\n  :return: double[]\n  \n*Overload 11*  \n  :param a: byte[]\n  :param i: int\n  :param v: byte\n  :return: byte[]\n  \n*Overload 12*  \n  :param a: char[]\n  :param i: int\n  :param v: char\n  :return: char[]\n  \n*Overload 13*  \n  :param a: short[]\n  :param i: int\n  :param v: short\n  :return: short[]\n  \n*Overload 14*  \n  :param a: int[]\n  :param i: int\n  :param v: int\n  :return: int[]\n  \n*Overload 15*  \n  :param a: long[]\n  :param i: int\n  :param v: long\n  :return: long[]\n  \n*Overload 16*  \n  :param a: float[]\n  :param i: int\n  :param v: float\n  :return: float[]\n  \n*Overload 17*  \n  :param a: double[]\n  :param i: int\n  :param v: double\n  :return: double[]\n  \n*Overload 18*  \n  :param a: boolean[]\n  :param i: int\n  :param v: boolean\n  :return: boolean[]",
  "removeExactFromArray": "Note: Java generics information - <T>\n\n:param e: T\n:param a: T[]\n:return: T[]",
  "removeFromArray": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param e: T\n  :param a: T[]\n  :return: T[]\n  \n*Overload 2*  \n  :param e: int\n  :param a: int[]\n  :return: int[]\n  \n*Overload 3*  \n  :param e: double\n  :param a: double[]\n  :return: double[]",
  "removeIf": "*Overload 1*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param pred: io.deephaven.base.Predicate.Unary<T>\n  :return: T[]\n  \n*Overload 2*  \n  Note: Java generics information - <T,\n  A>\n  \n  :param a: T[]\n  :param pred: io.deephaven.base.Predicate.Binary<T,A>\n  :param arg: A\n  :return: T[]\n  \n*Overload 3*  \n  Note: Java generics information - <T,\n  A,\n  B>\n  \n  :param a: T[]\n  :param pred: io.deephaven.base.Predicate.Ternary<T,A,B>\n  :param arg1: A\n  :param arg2: B\n  :return: T[]",
  "replaceInArray": "Note: Java generics information - <T>\n\n:param e: T\n:param a: T[]\n:return: boolean",
  "replaceOrAdd": "Note: Java generics information - <T,\nA>\n\n:param a: T[]\n:param c: java.lang.Class<T>\n:param pred: io.deephaven.base.Predicate.Binary<T,A>\n:param factory: io.deephaven.base.Function.Unary<T,A>\n:param arg: A\n:return: T[]",
  "swap": "*Overload 1*  \n  :param a: int[]\n  :param i: int\n  :param j: int\n  \n*Overload 2*  \n  :param a: long[]\n  :param i: int\n  :param j: int\n  \n*Overload 3*  \n  :param a: double[]\n  :param i: int\n  :param j: int\n  \n*Overload 4*  \n  :param a: boolean[]\n  :param i: int\n  :param j: int\n  \n*Overload 5*  \n  Note: Java generics information - <T>\n  \n  :param a: T[]\n  :param i: int\n  :param j: int",
  "toString": "*Overload 1*  \n  :param doubles: double[]\n  :param nOffset: int\n  :param nLength: int\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param longs: long[]\n  :param nOffset: int\n  :param nLength: int\n  :return: java.lang.String"
 },
 "path": "io.deephaven.base.ArrayUtil",
 "typeName": "class"
}