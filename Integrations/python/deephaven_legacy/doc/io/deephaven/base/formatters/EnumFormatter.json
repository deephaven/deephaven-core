{
 "className": "io.deephaven.base.formatters.EnumFormatter",
 "methods": {
  "format": "Return a string representation of the enum bitset given by the index.\n\n*Overload 1*  \n  :param index: int\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param obj: java.lang.Object\n  :param toAppendTo: java.lang.StringBuffer\n  :param pos: java.text.FieldPosition\n  :return: java.lang.StringBuffer",
  "getPossibleValues": "Return a string representation of possible enum values.\n\n:return: java.lang.String",
  "parse": "Return a binary bitset representation of the comma-separated string s, with the i-th bit set for the\n corresponding occurrence of the i-th enum (and i ranging from 0 to the length of the enums passed at\n construction).\n \n If an enum in s is not recognized, it is silently ignored and contributes no bit to the result.\n\n:param s: java.lang.String\n:return: int",
  "parseErrorChecking": "Return a binary bitset representation of the coma-separate string s, with the i-th bit set for the\n corresponding occurrence of the i-th enum (and i ranging from 0 to the length of the enums passed at\n construction).\n \n If an enum in s is not recognized, an exception is thrown.\n\n:param s: java.lang.String\n:return: int",
  "parseObject": ":param source: java.lang.String\n:param pos: java.text.ParsePosition\n:return: java.lang.Object"
 },
 "path": "io.deephaven.base.formatters.EnumFormatter",
 "text": "This class provides a Format object that converts from and to a comma-separated list of String values\n and their binary masks. (The first string corresponds to the value 1, the second to 2, the third to 4, etc.) Because\n of the use of values of 2, this conversion can handle bitsets. It is however limited to 31 possible enum values.",
 "typeName": "class"
}