{
 "className": "io.deephaven.base.LongRingBuffer",
 "methods": {
  "add": ":param e: long\n:return: boolean",
  "addOverwrite": ":param e: long\n:param notFullResult: long\n:return: long",
  "back": ":return: long",
  "capacity": ":return: int",
  "element": ":return: long",
  "front": "*Overload 1*  \n  :return: long\n  \n*Overload 2*  \n  :param offset: int\n  :return: long",
  "getAll": ":return: long[]",
  "isEmpty": ":return: boolean",
  "isFull": ":return: boolean",
  "iterator": ":return: io.deephaven.base.LongRingBuffer.Iterator",
  "offer": ":param e: long\n:return: boolean",
  "peek": ":param onEmpty: long\n:return: long",
  "peekBack": ":param onEmpty: long\n:return: long",
  "poll": ":param onEmpty: long\n:return: long",
  "remaining": ":return: int",
  "remove": ":return: long",
  "size": ":return: int"
 },
 "path": "io.deephaven.base.LongRingBuffer",
 "text": "A trivial circular buffer for primitive longs, like java.util.concurrent.ArrayBlockingQueue but without all the\n synchronization and collection cruft. Storage is between head (incl.) and tail (excl.) wrapping around the end of the\n array. If the buffer is *not* growable, it will make room for a new element by dropping off the oldest element in the\n buffer instead.",
 "typeName": "class"
}