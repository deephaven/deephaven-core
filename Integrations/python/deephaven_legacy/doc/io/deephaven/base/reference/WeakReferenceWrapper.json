{
 "className": "io.deephaven.base.reference.WeakReferenceWrapper",
 "methods": {
  "clear": "Clear the referent.",
  "get": "Retrieve the current referent.\n\n:return: (WeakReferenceWrapper.T) The current referent, which may be null.",
  "maybeCreateWeakReference": "Note: Java generics information - <T>\n\n:param referent: T\n:return: io.deephaven.base.reference.SimpleReference<T>"
 },
 "path": "io.deephaven.base.reference.WeakReferenceWrapper",
 "text": "SimpleReference implementation created to interpose a strong/hard reference in place of a weak reference, with\n reachability subject to the continued reachability of the wrapped referent via the wrapped reference.\n\n \n In general, this only makes sense for concrete subclasses that are simultaneously T's and SimpleReferences to T's.\n The intended use case is for callback/listener registration chains that maintain reachability for all but the final\n link in the chain. Classes that wish to enable this functionality must construct their listener references with\n maybeCreateWeakReference in order to avoid rendering a WeakReferenceWrapper weakly reachable and thereby breaking the\n chain.",
 "typeName": "class"
}