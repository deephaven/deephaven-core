{
 "className": "io.deephaven.base.string.cache.OpenAddressedWeakUnboundedStringCache",
 "methods": {
  "capacity": "Get a hint about this cache's capacity and behavior.\n\n:return: (int) -1 : This is an unbounded cache. 0 : This \"cache\" doesn't actually perform any caching. >0 : Actual\n         capacity bound.",
  "getCachedString": "*Overload 1*  \n  :param protoString: (io.deephaven.base.string.cache.StringCompatible) - The string-like CharSequence to look up\n  :return: (OpenAddressedWeakUnboundedStringCache.STRING_LIKE_TYPE) A cached STRING_LIKE_TYPE that corresponds to the current value of the CharSequence expressed by\n           protoString\n  \n*Overload 2*  \n  :param string: (java.lang.String) - The String to look up\n  :return: (OpenAddressedWeakUnboundedStringCache.STRING_LIKE_TYPE) A cached STRING_LIKE_TYPE that corresponds to the CharSequence expressed by string",
  "getEmptyString": ":return: (OpenAddressedWeakUnboundedStringCache.STRING_LIKE_TYPE) A cached STRING_LIKE_TYPE that represents the empty string.",
  "getType": ":return: (java.lang.Class<OpenAddressedWeakUnboundedStringCache.STRING_LIKE_TYPE>) The type of the elements in this cache."
 },
 "path": "io.deephaven.base.string.cache.OpenAddressedWeakUnboundedStringCache",
 "text": "Unbounded StringCache built around a OpenAddressedCanonicalizationCache, which only enforces weak reachability on its\n STRING_LIKE_TYPE members.",
 "typeName": "class"
}