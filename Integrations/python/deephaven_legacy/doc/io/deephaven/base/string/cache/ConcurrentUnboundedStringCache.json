{
 "className": "io.deephaven.base.string.cache.ConcurrentUnboundedStringCache",
 "methods": {
  "capacity": "Get a hint about this cache's capacity and behavior.\n\n:return: (int) -1 : This is an unbounded cache. 0 : This \"cache\" doesn't actually perform any caching. >0 : Actual\n         capacity bound.",
  "getCachedString": "*Overload 1*  \n  :param protoString: (io.deephaven.base.string.cache.StringCompatible) - The string-like CharSequence to look up\n  :return: (ConcurrentUnboundedStringCache.STRING_LIKE_TYPE) A cached STRING_LIKE_TYPE that corresponds to the current value of the CharSequence expressed by\n           protoString\n  \n*Overload 2*  \n  :param string: (java.lang.String) - The String to look up\n  :return: (ConcurrentUnboundedStringCache.STRING_LIKE_TYPE) A cached STRING_LIKE_TYPE that corresponds to the CharSequence expressed by string",
  "getEmptyString": ":return: (ConcurrentUnboundedStringCache.STRING_LIKE_TYPE) A cached STRING_LIKE_TYPE that represents the empty string.",
  "getType": ":return: (java.lang.Class<ConcurrentUnboundedStringCache.STRING_LIKE_TYPE>) The type of the elements in this cache."
 },
 "path": "io.deephaven.base.string.cache.ConcurrentUnboundedStringCache",
 "text": "A very limited interface is specified, in order to decouple typeAdapter pooling and related concerns from the cache\n itself.\n\n StringCompatibles or Strings used as keys (or values) when probing/populating the cache are allowed to use their own\n hashCode() implementation. This is dangerous, because we rely on our key implementation to hash CharSequences\n identically to a String of the same characters. An assertion in the value factory should catch any cases where the\n built-in assumption breaks down, but we've deemed that unnecessary at this time. Specify \"debug\" in the constructor\n if you need this check. String.hashCode()'s implementation has been stable since JDK 1.2, and is specified in the\n JavaDocs.\n\n This implementation is thread-safe, and lock-free except for the insertion of new cached Strings on a cache miss.\n StringCompatible implementation thread-safety is a separate concern.",
 "typeName": "class"
}