{
 "className": "io.deephaven.base.string.EncodingInfo",
 "methods": {
  "append": ":param logOutput: io.deephaven.base.log.LogOutput\n:return: io.deephaven.base.log.LogOutput",
  "decode": "*Overload 1*  \n  :param value: byte[]\n  :return: java.lang.String\n  \n*Overload 2*  \n  :param value: byte[]\n  :param offset: int\n  :param length: int\n  :return: java.lang.String",
  "encode": ":param value: java.lang.String\n:return: byte[]",
  "getCharset": ":return: java.nio.charset.Charset",
  "getDecoder": "Get a thread local decoder for this encoding info.\n\n \n The decoder will be setup to replace malformed input or unmappable characters, and these settings should be\n restored if changed.\n\n:return: (java.nio.charset.CharsetDecoder) A thread local decoder for this encoding info",
  "getEncoder": "Get a thread local encoder for this encoding info.\n\n \n The encoder will be setup to replace malformed input or unmappable characters, and these settings should be\n restored if changed.\n\n:return: (java.nio.charset.CharsetEncoder) A thread local encoder for this encoding info",
  "getEncodingName": ":return: java.lang.String",
  "isSimple": "Can this encoding info's charset be encoded or decoded by simple linear assignment of char->byte or byte->char.\n\n:return: (boolean) Whether this encoding info's charset is simple",
  "valueOf": "Returns the enum constant of this type with the specified name.\nThe string must match exactly an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)\n\n:param name: (java.lang.String) - the name of the enum constant to be returned.\n:return: (io.deephaven.base.string.EncodingInfo) the enum constant with the specified name",
  "values": "Returns an array containing the constants of this enum type, in\nthe order they are declared.\n\n:return: (io.deephaven.base.string.EncodingInfo[]) an array containing the constants of this enum type, in the order they are declared"
 },
 "path": "io.deephaven.base.string.EncodingInfo",
 "text": "Encoding info enum, to help code determine what assumptions it can make about a CharSet, as well as simplification\n for encode/decode operations.",
 "typeName": "enum"
}