{
 "className": "io.deephaven.base.string.cache.AbstractCompressedString",
 "methods": {
  "charAt": ":param index: int\n:return: char",
  "codePointAt": ":param index: int\n:return: int",
  "codePointBefore": ":param index: int\n:return: int",
  "codePointCount": ":param beginIndex: int\n:param endIndex: int\n:return: int",
  "compareTo": "Implementations MUST compare StringCompatibles and Strings char-by-char.\n\n:param that: java.lang.CharSequence\n:return: (int) 0, <0, or >0 if that compares equal-to, less-than, or greater-than this.",
  "compareToIgnoreCase": ":param that: java.lang.CharSequence\n:return: int",
  "concat": "*Overload 1*  \n  :param other: java.lang.String\n  :return: AbstractCompressedString.TYPE\n  \n*Overload 2*  \n  :param other: AbstractCompressedString.TYPE\n  :return: AbstractCompressedString.TYPE",
  "contains": ":param cs: java.lang.CharSequence\n:return: boolean",
  "contentEquals": ":param cs: java.lang.CharSequence\n:return: boolean",
  "endsWith": ":param suffix: java.lang.CharSequence\n:return: boolean",
  "equals": ":param that: java.lang.Object\n:return: (boolean) true iff that is a StringCompatible of the same class with identical members.",
  "equalsIgnoreCase": ":param that: java.lang.CharSequence\n:return: boolean",
  "getBytes": ":return: byte[]",
  "getChars": ":param srcBegin: int\n:param srcEnd: int\n:param dst: char[]\n:param dstBegin: int",
  "getData": "Note: This is an API for trusted code to use. The data array must not be modified.\n\n:return: (byte[]) The internal data array for this instance.",
  "hashCode": "Implementations MUST match the current implementation of String.hashCode().\n\n:return: (int) A hashcode value for this StringCompatible that matches the value a String of the same chars.",
  "indexOf": "*Overload 1*  \n  :param ch: int\n  :param fromIndex: int\n  :return: int\n  \n*Overload 2*  \n  :param ch: int\n  :return: int\n  \n*Overload 3*  \n  :param cs: java.lang.CharSequence\n  :param fromIndex: int\n  :return: int\n  \n*Overload 4*  \n  :param cs: java.lang.CharSequence\n  :return: int",
  "intern": ":return: AbstractCompressedString.TYPE",
  "isEmpty": ":return: boolean",
  "lastIndexOf": "*Overload 1*  \n  :param ch: int\n  :param fromIndex: int\n  :return: int\n  \n*Overload 2*  \n  :param ch: int\n  :return: int\n  \n*Overload 3*  \n  :param cs: java.lang.CharSequence\n  :param fromIndex: int\n  :return: int\n  \n*Overload 4*  \n  :param cs: java.lang.CharSequence\n  :return: int",
  "length": ":return: int",
  "matches": ":param regex: java.lang.CharSequence\n:return: boolean",
  "regionMatches": ":param ignoreCase: boolean\n:param offset: int\n:param that: java.lang.CharSequence\n:param thatOffset: int\n:param length: int\n:return: boolean",
  "replace": "*Overload 1*  \n  :param oldChar: char\n  :param newChar: char\n  :return: AbstractCompressedString.TYPE\n  \n*Overload 2*  \n  :param target: java.lang.CharSequence\n  :param replacement: java.lang.CharSequence\n  :return: AbstractCompressedString.TYPE",
  "replaceAll": ":param regex: java.lang.CharSequence\n:param replacement: java.lang.CharSequence\n:return: AbstractCompressedString.TYPE",
  "replaceFirst": ":param regex: java.lang.CharSequence\n:param replacement: java.lang.CharSequence\n:return: AbstractCompressedString.TYPE",
  "split": "*Overload 1*  \n  :param regex: java.lang.CharSequence\n  :param limit: int\n  :return: AbstractCompressedString.TYPE[]\n  \n*Overload 2*  \n  :param regex: java.lang.CharSequence\n  :return: AbstractCompressedString.TYPE[]",
  "startsWith": "*Overload 1*  \n  :param prefix: java.lang.CharSequence\n  :param offset: int\n  :return: boolean\n  \n*Overload 2*  \n  :param prefix: java.lang.CharSequence\n  :return: boolean",
  "subSequence": ":param start: int\n:param end: int\n:return: java.lang.CharSequence",
  "substring": "*Overload 1*  \n  :param beginIndex: int\n  :param endIndex: int\n  :return: AbstractCompressedString.TYPE\n  \n*Overload 2*  \n  :param beginIndex: int\n  :return: AbstractCompressedString.TYPE",
  "toCharArray": ":return: char[]",
  "toLowerCase": "*Overload 1*  \n  :param locale: java.util.Locale\n  :return: AbstractCompressedString.TYPE\n  \n*Overload 2*  \n  :return: AbstractCompressedString.TYPE",
  "toString": "Convert this StringCompatible into a String. Implementations should not cache result Strings, in order to avoid\n inadvertently allowing promotion of short-lived objects under generational garbage collection.\n\n:return: (java.lang.String) A newly constructed String representing the same sequence of characters as this StringCompatible.",
  "toUpperCase": "*Overload 1*  \n  :param locale: java.util.Locale\n  :return: AbstractCompressedString.TYPE\n  \n*Overload 2*  \n  :return: AbstractCompressedString.TYPE",
  "trim": ":return: AbstractCompressedString.TYPE"
 },
 "path": "io.deephaven.base.string.cache.AbstractCompressedString",
 "text": "Base class for immutable byte[]-backed String replacements.",
 "typeName": "class"
}