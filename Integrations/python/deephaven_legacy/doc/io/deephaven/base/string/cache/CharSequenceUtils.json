{
 "className": "io.deephaven.base.string.cache.CharSequenceUtils",
 "methods": {
  "caseInsensitiveHashCode": "Calculate the hash code of a CharSequence as if it were an uppercase String.\n\n:param charSequence: (java.lang.CharSequence) - The CharSequence\n:return: (int) A hash code for the specified CharSequence.",
  "contentEquals": "Compare two CharSequences for equality, disregarding class.\n\n:param cs1: (java.lang.CharSequence) - The first CharSequence\n:param cs2: (java.lang.CharSequence) - The second CharSequence\n:return: (boolean) Whether the supplied CharSequences represent an equal sequence of chars.",
  "contentEqualsIgnoreCase": "Compare two CharSequences for case-insensitive equality, disregarding class.\n\n:param cs1: (java.lang.CharSequence) - The first CharSequence\n:param cs2: (java.lang.CharSequence) - The second CharSequence\n:return: (boolean) Whether the supplied CharSequences represent an equal sequence of chars, disregarding case.",
  "hashCode": "Calculate the hash code of a CharSequence as if it were a String.\n\n:param charSequence: (java.lang.CharSequence) - The CharSequence\n:return: (int) A hash code for the specified CharSequence.",
  "nullSafeContentEquals": "Compare two CharSequences for equality, disregarding class and allowing for nullity.\n\n:param cs1: (java.lang.CharSequence) - The first CharSequence\n:param cs2: (java.lang.CharSequence) - The second CharSequence\n:return: (boolean) Whether the supplied CharSequences represent an equal sequence of chars.",
  "nullSafeContentEqualsIgnoreCase": "Compare two CharSequences for case-insensitive equality, disregarding class and allowing for nullity.\n\n:param cs1: (java.lang.CharSequence) - The first CharSequence\n:param cs2: (java.lang.CharSequence) - The second CharSequence\n:return: (boolean) Whether the supplied CharSequences represent an equal sequence of chars.",
  "regionMatches": "Test content equality for two CharSequence sub-regions. See String.regionMatches(...).\n\n:param ignoreCase: (boolean) - Whether to use a case-insensitive comparison\n:param cs1: (java.lang.CharSequence) - The first CharSequence\n:param cs1Offset: (int) - The offset into the first CharSequence\n:param cs2: (java.lang.CharSequence) - The second CharSequence\n:param cs2Offset: (int) - The offset into the second CharSequence\n:param length: (int) - The number of characters to compare\n:return: (boolean) Whether the regions match"
 },
 "path": "io.deephaven.base.string.cache.CharSequenceUtils",
 "text": "Static helpers for hashCode, equality, and comparison of CharSequences.",
 "typeName": "class"
}