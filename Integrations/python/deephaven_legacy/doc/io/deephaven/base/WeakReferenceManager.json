{
 "className": "io.deephaven.base.WeakReferenceManager",
 "methods": {
  "add": "Add the specified item to the list.\n\n:param item: (WeakReferenceManager.T) - the item to add.",
  "clear": "Clear the list of references.",
  "forEachValidReference": "Execute the provided procedure on each listener that has not been GC'd. If a listener was GC'd the reference will\n be removed from the internal list of refs.\n\n:param proc: (java.util.function.Consumer<WeakReferenceManager.T>) - The procedure to call with each valid listener",
  "getFirst": "Retrieve the first valid ref that satisfies the test\n\n:param test: (java.util.function.Predicate<WeakReferenceManager.T>) - The test to decide if a valid ref should be returned\n:return: (WeakReferenceManager.T) The first valid ref that passed test",
  "isEmpty": "Return true if the list is empty. Does not check for expired references.\n\n:return: (boolean) true if the list is empty.",
  "remove": "Remove item from the list if present, and also any expired references.\n\n:param item: (WeakReferenceManager.T) - the item to remove.",
  "removeAll": "Remove items in the collection from the list, and also any expired references.\n\n:param items: (java.util.Collection<WeakReferenceManager.T>) - the items to remove."
 },
 "path": "io.deephaven.base.WeakReferenceManager",
 "text": "A helper for manging a list of WeakReferences. It hides the internal management of expired references and provides\n for iteration over the valid ones",
 "typeName": "class"
}