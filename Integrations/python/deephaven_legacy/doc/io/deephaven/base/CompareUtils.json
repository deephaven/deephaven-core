{
 "className": "io.deephaven.base.CompareUtils",
 "methods": {
  "EQ": "You can't do double1 == double2 because floating point numbers are not exact values. Just make sure that x-y is\n less than some allowable error factor.\n\n:param x: (double) - \n:param y: (double) - \n:return: (boolean) True if the two doubles are equal to each other (or so close that we don't care that they are different).",
  "EQ2": ":param x: double\n:param y: double\n:return: boolean",
  "GE": ":param x: double\n:param y: double\n:return: boolean",
  "GT": "You can't do double1 > double2 because floating point numbers are not exact values. Just make sure that x-y is\n greater than some allowable error factor for equality\n\n:param x: (double) - \n:param y: (double) - \n:return: (boolean) True if x is greater than y (including error factor for equality).",
  "LE": ":param x: double\n:param y: double\n:return: boolean",
  "LT": ":param x: double\n:param y: double\n:return: boolean",
  "NE": "Since logical comparison of double values considerig error is effectively a three-value logic, you can't really\n do !equals when you mean notEquals.\n\n:param x: (double) - \n:param y: (double) - \n:return: (boolean) True if two doubles are apart from each other enough that we consider them different. False if both of\n         them are NaN",
  "NE2": ":param x: double\n:param y: double\n:return: boolean",
  "compare": "*Overload 1*  \n  :param data1: java.lang.Object\n  :param data2: java.lang.Object\n  :return: int\n  \n*Overload 2*  \n  :param a: long\n  :param b: long\n  :return: int\n  \n*Overload 3*  \n  :param a: double\n  :param b: double\n  :return: int",
  "compareUnsigned": ":param a: long\n:param b: long\n:return: int",
  "doubleCompare": ":param d1: double\n:param d2: double\n:return: int",
  "doubleEquals": "You can't do double1 == double2 because floating point numbers are not exact values. Just make sure that x-y is\n less than some allowable error factor.\n\n*Overload 1*  \n  :param x: double\n  :param y: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: (double) - \n  :param y: (double) - \n  :param tolerance: double\n  :return: (boolean) True if the two doubles are equal to each other (or so close that we don't care that they are different).\n           Also true if both are NaN.",
  "doubleEquals2": "*Overload 1*  \n  :param x: double\n  :param y: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: double\n  :param y: double\n  :param tolerance: double\n  :return: boolean",
  "doubleEqualsZero": "*Overload 1*  \n  :param x: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: double\n  :param tolerance: double\n  :return: boolean",
  "doubleGreater": "*Overload 1*  \n  :param x: double\n  :param y: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: double\n  :param y: double\n  :param tolerance: double\n  :return: boolean",
  "doubleGreaterEqual": "*Overload 1*  \n  :param x: double\n  :param y: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: double\n  :param y: double\n  :param tolerance: double\n  :return: boolean",
  "doubleLess": "You can't do double1 < double2 because floating point numbers are not exact values. Just make sure that y - x is\n greater than some allowable error factor for equality\n\n*Overload 1*  \n  :param x: (double) - \n  :param y: (double) - \n  :param tolerance: double\n  :return: (boolean) True if x is less than y (including error factor for equality)\n  \n*Overload 2*  \n  :param x: double\n  :param y: double\n  :return: boolean",
  "doubleLessEqual": "*Overload 1*  \n  :param x: double\n  :param y: double\n  :param tolerance: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: double\n  :param y: double\n  :return: boolean",
  "doubleNotEquals": "*Overload 1*  \n  :param x: double\n  :param y: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: double\n  :param y: double\n  :param tolerance: double\n  :return: boolean",
  "doubleNotEquals2": "*Overload 1*  \n  :param x: double\n  :param y: double\n  :return: boolean\n  \n*Overload 2*  \n  :param x: double\n  :param y: double\n  :param tolerance: double\n  :return: boolean",
  "equals": ":param data1: java.lang.Object\n:param data2: java.lang.Object\n:return: boolean",
  "nullSafeEquals": "Returns true if the given objects are both null, or equal by the first object's equals(java.lang.Object, java.lang.Object) method.\n\n:param left: java.lang.Object\n:param right: java.lang.Object\n:return: boolean"
 },
 "path": "io.deephaven.base.CompareUtils",
 "typeName": "class"
}