{
 "className": "io.deephaven.time.calendar.BusinessCalendar",
 "methods": {
  "businessDaysInRange": "Returns the business days between start and end, inclusive.\n\n Because no time information (e.g., hours, minutes, seconds) is returned, the corresponding days for start\n and end will be included if they are business days.\n\n*Overload 1*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return empty array\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive business days between start and end\n  \n*Overload 2*  \n  :param start: (java.lang.String) - start time; if null, return empty array\n  :param end: (java.lang.String) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive business days between start and end",
  "currentBusinessSchedule": "Gets today's business schedule.\n\n:return: (io.deephaven.time.calendar.BusinessSchedule) today's business schedule",
  "diffBusinessDay": "Returns the amount of business time in standard business days between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n:return: (double) the amount of business time in standard business days between the start and end",
  "diffBusinessNanos": "Returns the amount of business time in nanoseconds between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n:return: (long) the amount of business time in nanoseconds between the start and end",
  "diffBusinessYear": "Returns the number of business years between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start; if null, return null\n:param end: (io.deephaven.time.DateTime) - end; if null, return null\n:return: (double) the amount of business time in business years between the start and end",
  "diffNonBusinessDay": "Returns the amount of non-business time in standard business days between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n:return: (double) the amount of non-business time in standard business days between the start and end",
  "diffNonBusinessNanos": "Returns the amount of non-business time in nanoseconds between start and end.\n\n:param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n:param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n:return: (long) the amount of non-business time in nanoseconds between the start and end",
  "fractionOfBusinessDayComplete": "Returns the fraction of the business day complete by the given time.\n\n:param time: (io.deephaven.time.DateTime) - time\n:return: (double) the fraction of the day complete by time; NULL_DOUBLE if time is null",
  "fractionOfBusinessDayRemaining": "Returns the fraction of the business day remaining after the given time.\n\n:param time: (io.deephaven.time.DateTime) - time\n:return: (double) the fraction of the day left after time; NULL_DOUBLE if time is null",
  "fractionOfStandardBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nFor the given date, returns the ratio of the business day length and the standard business day length. For\n example, a holiday has zero business time and will therefore return 0.0. A normal business day will be of the\n standard length and will therefore return 1.0. A half day holiday will return 0.5.\n\n*Overload 1*  \n  :return: (double) ratio of the business day length and the standard business day length for the current day\n  \n*Overload 2*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return 0\n  :return: (double) ratio of the business day length and the standard business day length for the date\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date; if null, return 0\n  :return: (double) ratio of the business day length and the standard business day length for the date",
  "getBusinessDay": "Gets the indicated business day.\n\n*Overload 1*  \n  :param time: (io.deephaven.time.DateTime) - time\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of time; null if time is null\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date\n  \n*Overload 3*  \n  :param date: (java.time.LocalDate) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date",
  "getBusinessSchedule": "Gets the indicated business day's schedule. getBusinessSchedule(null) returns null.\n\n*Overload 1*  \n  :param time: (io.deephaven.time.DateTime) - time\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of time; null if time is null\n  \n*Overload 2*  \n  :param date: (java.lang.String) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date\n  \n*Overload 3*  \n  :param date: (java.time.LocalDate) - date\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the corresponding BusinessSchedule of date",
  "getDefaultBusinessPeriods": "Gets the business periods for the default days.\n\n:return: (java.util.List<java.lang.String>) a list of strings with a comma separating open and close times",
  "getHolidays": "Gets business schedules for dates that are different from the defaults. This returns all dates that are defined\n as a holiday for the calendar.\n\n:return: (java.util.Map<java.time.LocalDate,io.deephaven.time.calendar.BusinessSchedule>) a map of dates and to their business periods",
  "isBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nDoes time occur on a business day?\n\n*Overload 1*  \n  :return: (boolean) true if the current day is a business day; false otherwise.\n  \n*Overload 2*  \n  :param day: (java.time.DayOfWeek) - a day of the week\n  :return: (boolean) true if the day is a business day; false otherwise.\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time\n  :return: (boolean) true if the date is a business day; false otherwise.\n  \n*Overload 4*  \n  :param date: (java.lang.String) - date\n  :return: (boolean) true if the date is a business day; false otherwise.\n  \n*Overload 5*  \n  :param date: (java.time.LocalDate) - date\n  :return: (boolean) true if the date is a business day; false otherwise.",
  "isBusinessTime": "Determines if the specified time is a business time. If the time falls between business periods, false will be\n returned.\n\n:param time: (io.deephaven.time.DateTime) - time\n:return: (boolean) true if the specified time is a business time; otherwise, false.",
  "isLastBusinessDayOfMonth": "**Incompatible overloads text - text from the first overload:**\n\nIs the current day the last business day of the month?\n\n*Overload 1*  \n  :param time: (io.deephaven.time.DateTime) - time\n  :return: (boolean) true if time is on the last business day of the month with business time remaining; false\n           otherwise.\n  \n*Overload 2*  \n  :return: (boolean) true if date is on the last business day of the month; false otherwise.\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date\n  :return: (boolean) true if date is on the last business day of the month; false otherwise.",
  "isLastBusinessDayOfWeek": "**Incompatible overloads text - text from the first overload:**\n\nIs the current day the last business day of the week?\n\n*Overload 1*  \n  :return: (boolean) true if date is on the last business day of the week; false otherwise.\n  \n*Overload 2*  \n  :param time: (io.deephaven.time.DateTime) - time\n  :return: (boolean) true if time is on the last business day of the week with business time remaining; false\n           otherwise.\n  \n*Overload 3*  \n  :param date: (java.lang.String) - date\n  :return: (boolean) true if date is on the last business day of the week; false otherwise.",
  "nextBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the business date days business days after input date. If days is zero and the day\n is not a business day, null is returned.\n\n*Overload 1*  \n  :return: (java.lang.String) next business day\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days after the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (java.lang.String) the next business day after time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the next business day after time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the next business day after date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days after input date",
  "nextBusinessSchedule": "**Incompatible overloads text - text from the first overload:**\n\nGets the business schedule days days after input date.\n\n If date is null, assumes the implementation of getBusinessSchedule(null) returns null.\n\n*Overload 1*  \n  :return: (io.deephaven.time.calendar.BusinessSchedule) next business schedule\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the next closest business schedule after the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the next closest business schedule after time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the business schedule days after time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the next closest business schedule after date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the business schedule days after date",
  "nextNonBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the next non-business day.\n\n*Overload 1*  \n  :return: (java.lang.String) the next non-business day after the current day\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days after the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (java.lang.String) the next non-business day after time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days after input time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the next non-business day after date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the most recent business day before time",
  "nonBusinessDaysInRange": "Returns the non-business days between start and end, inclusive.\n\n Because no time information (e.g., hours, minutes, seconds) is returned, the corresponding days for start\n and end will be included if they are non-business days.\n\n*Overload 1*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return empty array\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive non-business days between start and end\n  \n*Overload 2*  \n  :param start: (java.lang.String) - start time; if null, return empty array\n  :param end: (java.lang.String) - end time; if null, return empty array\n  :return: (java.lang.String[]) inclusive non-business days between start and end",
  "numberOfBusinessDays": "Returns the number of business days between start and end.\n\n*Overload 1*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_INT\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_INT\n  :return: (int) number of business days between the start and end, inclusive and exclusive respectively.\n  \n*Overload 2*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of business days between the start and end, inclusive and endInclusive\n           respectively.\n  \n*Overload 3*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :return: (int) number of business days between the start and end, inclusive and exclusive respectively.\n  \n*Overload 4*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of business days between the start and end, inclusive and endInclusive\n           respectively.",
  "numberOfNonBusinessDays": "Returns the number of non-business days between start and end.\n\n*Overload 1*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_INT\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_INT\n  :return: (int) number of business days between the start and end, inclusive and exclusive respectively.\n  \n*Overload 2*  \n  :param start: (io.deephaven.time.DateTime) - start time; if null, return NULL_LONG\n  :param end: (io.deephaven.time.DateTime) - end time; if null, return NULL_LONG\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of business days between the start and end, inclusive and endInclusive\n           respectively.\n  \n*Overload 3*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :return: (int) number of non-business days between the start and end, inclusive.\n  \n*Overload 4*  \n  :param start: (java.lang.String) - start time; if null, return NULL_INT\n  :param end: (java.lang.String) - end time; if null, return NULL_INT\n  :param endInclusive: (boolean) - whether to treat the end inclusive or exclusively\n  :return: (int) number of non-business days between the start and end, inclusive and endInclusive\n           respectively.",
  "previousBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the business date days business days before input date. If days is zero and the day\n is not a business day, null is returned.\n\n*Overload 1*  \n  :return: (java.lang.String) previous business day\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days before the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (java.lang.String) the most recent business day before time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days before input time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the most recent business day before date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the business date days business days before input date",
  "previousBusinessSchedule": "**Incompatible overloads text - text from the first overload:**\n\nGets the business schedule before input date.\n\n Assumes implementation of getBusinessSchedule(null) returns null.\n\n*Overload 1*  \n  :return: (io.deephaven.time.calendar.BusinessSchedule) previous business schedule\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the business schedule days days before the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the most recent business schedule before time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: io.deephaven.time.calendar.BusinessSchedule\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the most recent business schedule before date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (io.deephaven.time.calendar.BusinessSchedule) the business schedule days days before input date",
  "previousNonBusinessDay": "**Incompatible overloads text - text from the first overload:**\n\nGets the non-business date days non-business days before input date. If days is zero and\n the day is a business day, null is returned.\n\n*Overload 1*  \n  :return: (java.lang.String) the most recent non-business day before the current day\n  \n*Overload 2*  \n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before the current day\n  \n*Overload 3*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :return: (java.lang.String) the most recent non-business day before time\n  \n*Overload 4*  \n  :param time: (io.deephaven.time.DateTime) - time; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before input time\n  \n*Overload 5*  \n  :param date: (java.lang.String) - date; if null, return null\n  :return: (java.lang.String) the most recent non-business day before date\n  \n*Overload 6*  \n  :param date: (java.lang.String) - date; if null, return null\n  :param days: (int) - number of days\n  :return: (java.lang.String) the non-business date days non-business days before input date",
  "standardBusinessDayLengthNanos": "Returns the length of a standard business day in nanoseconds.\n\n:return: (long) length of a standard business day in nanoseconds."
 },
 "path": "io.deephaven.time.calendar.BusinessCalendar",
 "text": "A business calendar. Calendar is extended with the concept of business and non-business time.\n\n To comply with the ISO-8601 standard for dates, Strings should be of the form \"yyyy-MM-dd\",",
 "typeName": "interface"
}