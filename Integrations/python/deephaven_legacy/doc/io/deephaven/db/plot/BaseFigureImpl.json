{
 "className": "io.deephaven.db.plot.BaseFigureImpl",
 "methods": {
  "chart": "Returns a chart from this Figure's grid.\n\n*Overload 1*  \n  :param index: int\n  :return: (io.deephaven.db.plot.ChartImpl) selected Chart\n  \n*Overload 2*  \n  :param rowNum: int\n  :param colNum: int\n  :return: (io.deephaven.db.plot.ChartImpl) selected Chart",
  "copy": "Creates a copy of this Figure.\n\n:return: (io.deephaven.db.plot.BaseFigureImpl) copy of this Figure.",
  "figureRemoveSeries": "Removes all series with names from this Figure.\n\n:param names: java.lang.String...\n:return: (io.deephaven.db.plot.BaseFigureImpl) this Figure",
  "figureTitle": "Sets the title of this Figure\n\n:param title: java.lang.String\n:return: (io.deephaven.db.plot.BaseFigureImpl) this Figure",
  "figureTitleColor": "Sets the color of this Figure's title\n\n*Overload 1*  \n  :param color: io.deephaven.gui.color.Paint\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure\n  \n*Overload 2*  \n  :param color: java.lang.String\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure",
  "figureTitleFont": "Sets the font of this Figure's title\n\n*Overload 1*  \n  :param font: io.deephaven.db.plot.Font\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure\n  \n*Overload 2*  \n  :param family: java.lang.String\n  :param style: java.lang.String\n  :param size: int\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure",
  "getCharts": "Gets this Figure's Charts.\n\n:return: (io.deephaven.db.plot.ChartArray) this Figure's Charts",
  "getFigureFunctionList": ":return: java.util.List<io.deephaven.db.plot.util.functions.FigureImplFunction>",
  "getHeight": "Gets the numRows of this Figure.\n This is equal to the number of rows.\n\n:return: (int) this Figure's height",
  "getName": ":return: java.lang.String",
  "getPlotInfo": ":return: io.deephaven.db.plot.errors.PlotInfo",
  "getSessionId": ":return: int",
  "getTableFunctionMap": ":return: java.util.Map<io.deephaven.db.tables.Table,java.util.Set<java.util.function.Function<io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>>>",
  "getTableHandles": "Gets the table handles associated with this figure.\n\n:return: (java.util.Set<io.deephaven.db.plot.util.tables.TableHandle>) table handles associated with this figure.",
  "getTableMapFunctionMap": ":return: java.util.Map<io.deephaven.db.v2.TableMap,java.util.Set<java.util.function.Function<io.deephaven.db.v2.TableMap,io.deephaven.db.v2.TableMap>>>",
  "getTheme": "Gets the Theme of this Figure.\n\n:return: (io.deephaven.db.plot.Theme) this Figure's theme",
  "getTitle": "Gets the title of this Figure.\n\n:return: (java.lang.String) this Figure's title",
  "getTitleColor": "Gets the Paint of this Figure's title.\n\n:return: (io.deephaven.gui.color.Paint) this Figure's title's Paint",
  "getTitleFont": "Gets the Font of this Figure's title.\n\n:return: (io.deephaven.db.plot.Font) this Figure's title's Font",
  "getUpdateInterval": "Gets the updateInterval, in milliseconds, for this Figure.\n\n:return: (long) update interval of this Figure, in milliseconds",
  "getWidth": "Gets the width of this Figure.\n This is equal to the number of columns.\n\n:return: (int) this Figure's width",
  "isDefaultTheme": ":return: boolean",
  "isResizable": "Whether this Figure's height and width are changeable.\n\n:return: (boolean) true if this Figure's height and width are changeable, false otherwise",
  "newChart": "Adds a new Chart to this figure.\n\n*Overload 1*  \n  :return: (io.deephaven.db.plot.ChartImpl) the new Chart.  The Chart is placed in the next available grid space, starting at the upper left hand corner of the grid,\n           going left to right, top to bottom.  If no available space is found in the grid:\n          \n  * if this Figure was created with no specified grid size, then the Figure will resize itself to add the new Chart;\n  * if not, a RuntimeException will be thrown.\n  \n*Overload 2*  \n  :param index: int\n  :return: (io.deephaven.db.plot.ChartImpl) the new Chart.  The Chart is placed at the grid space indicated by the index.\n  \n*Overload 3*  \n  :param rowNum: int\n  :param colNum: int\n  :return: (io.deephaven.db.plot.ChartImpl) the new Chart.  The Chart is placed at the grid space [rowNum, colNum.",
  "registerFigureFunction": ":param function: io.deephaven.db.plot.util.functions.FigureImplFunction",
  "registerTableFunction": ":param t: io.deephaven.db.tables.Table\n:param function: java.util.function.Function<io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>",
  "registerTableMapFunction": ":param tableMapHandle: io.deephaven.db.plot.util.tables.TableMapHandle\n:param tableTransform: java.util.function.Function<io.deephaven.db.tables.Table,io.deephaven.db.tables.Table>",
  "removeChart": "Removes a chart from the Figure's grid.\n\n*Overload 1*  \n  :param index: int\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure with the chart removed.\n  \n*Overload 2*  \n  :param rowNum: int\n  :param colNum: int\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure with the chart removed.",
  "setName": ":param figureName: java.lang.String",
  "setSessionId": ":param sessionId: int",
  "theme": "Sets the Theme of this Figure\n\n*Overload 1*  \n  :param theme: io.deephaven.db.plot.Theme\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure\n  \n*Overload 2*  \n  :param theme: java.lang.String\n  :return: (io.deephaven.db.plot.BaseFigureImpl) this Figure",
  "updateInterval": "Sets the update interval of this Figure. The plot will be redrawn at this update interval.\n\n:param updateIntervalMillis: long\n:return: (io.deephaven.db.plot.BaseFigureImpl) this Figure",
  "validateInitialization": "Checks if the figure can be instantiated. Throws an error if not."
 },
 "path": "io.deephaven.db.plot.BaseFigureImpl",
 "text": "Container for Charts.",
 "typeName": "class"
}