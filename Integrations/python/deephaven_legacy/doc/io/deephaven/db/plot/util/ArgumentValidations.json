{
 "className": "io.deephaven.db.plot.util.ArgumentValidations",
 "methods": {
  "assertColumnsInTable": "**Incompatible overloads text - text from the first overload:**\n\nRequires all columns in cols be columns in the selectable dataset.\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :param cols: (java.lang.String...) - column names\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :param cols: (java.lang.String...) - column names\n  \n*Overload 3*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :param cols: (java.lang.String...) - column names\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.plot.util.tables.TableHandle) - table handle\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :param cols: (java.lang.String...) - column names",
  "assertGreaterThan0": "Requires the input object o to be non-null.\n\n:param d: (double) - value\n:param name: (java.lang.String) - variable name\n:param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertInstance": "**Incompatible overloads text - text from the first overload:**\n\nRequires Class c1 be an instance of Class c2.\n\n*Overload 1*  \n  :param c1: (java.lang.Class) - class\n  :param c2: (java.lang.Class) - class\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param c: (java.lang.Class) - class\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 3*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param c: (java.lang.Class) - class\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 4*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - swappable data set\n  :param column: (java.lang.String) - column\n  :param c: (java.lang.Class) - class\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertIsBoxedNumeric": "Requires the column's data type to be an instance of Number\n as defined in TypeUtils.isBoxedNumeric(Class)\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertIsNumeric": "Requires the column's data type to be a numeric instance\n as defined in TypeUtils.isNumeric(Class)\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 3*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 5*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertIsNumericOrTime": "Requires the column's data type to be a numeric or time instance\n as defined in isNumericOrTime(Class, PlotInfo)\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 3*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 5*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 6*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertIsNumericOrTimeOrCharOrComparableInstance": "Requires the column of be numeric, or an instance of time,\n char/Character, or Comparable.\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 3*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertIsPrimitiveNumeric": "Requires the column's data type to be a numeric primitive\n as defined in TypeUtils.isPrimitiveNumeric(Class)\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertIsTime": "Requires the column's data type to be a time instance\n as defined in isTime(Class, PlotInfo)\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 3*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param message: (java.lang.String) - error message\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertNotNull": "Requires the input object o to be non-null.\n\n:param o: (java.lang.Object) - object\n:param message: (java.lang.String) - error message\n:param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertNotNullAndNotEmpty": "Requires the input object o to be non-null.\n\nNote: Java generics information - <T>\n\n:param o: (T[]) - object\n:param message: (java.lang.String) - error message\n:param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "assertNull": ":param o: java.lang.Object\n:param message: java.lang.String\n:param plotInfo: io.deephaven.db.plot.errors.PlotInfo",
  "assertSameSize": "Requires data and dataNames\n 1. contain the same number of members.\n 2. contain no null members\n\n All members of data must be the same size.\n\n:param data: (io.deephaven.db.plot.datasets.data.IndexableNumericData[]) - array of IndexableNumericData\n:param dataNames: (java.lang.String[]) - names for each IndexableNumericData\n:param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception",
  "getColumnType": "Gets the data type of the column.\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (java.lang.Class) data type of column\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (java.lang.Class) data type of column\n  \n*Overload 3*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (java.lang.Class) data type of column",
  "isBoxedNumeric": "Whether the column's data type TypeUtils.isBoxedNumeric(Class).\n\n:param t: (io.deephaven.db.tables.Table) - table\n:param column: (java.lang.String) - column\n:param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n:return: (boolean) true if the column's data type is a boxed numeric, false otherwise",
  "isNumeric": "Whether the column's data type TypeUtils.isNumeric(Class).\n\n*Overload 1*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type is numeric, false otherwise\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type is numeric, false otherwise\n  \n*Overload 3*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type is numeric, false otherwise",
  "isNumericOrTime": "**Incompatible overloads text - text from the first overload:**\n\nWhether the class is TypeUtils.isNumeric(Class) or\n isTime(Class, PlotInfo)\n\n*Overload 1*  \n  :param c: (java.lang.Class) - class\n  :return: (boolean) true if c is a numeric or time class, false otherwise\n  \n*Overload 2*  \n  :param c: (java.lang.Class) - class\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if c is a numeric or time class, false otherwise\n  \n*Overload 3*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type is a numeric or time instance, false otherwise\n  \n*Overload 4*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type is a numeric or time instance, false otherwise\n  \n*Overload 5*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type is a numeric or time instance, false otherwise",
  "isPrimitiveNumeric": "Whether the column's data type TypeUtils.isPrimitiveNumeric(Class).\n\n:param t: (io.deephaven.db.tables.Table) - table\n:param column: (java.lang.String) - column\n:param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n:return: (boolean) true if the column's data type is a numeric primitive, false otherwise",
  "isTime": "**Incompatible overloads text - text from the first overload:**\n\nWhether the class is equal to Date.class or DBDateTime.class\n\n*Overload 1*  \n  :param c: (java.lang.Class) - class\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if c equals Date.class or DBDateTime.class, false otherwise\n  \n*Overload 2*  \n  :param t: (io.deephaven.db.tables.Table) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type equals Date.class or DBDateTime.class, false otherwise\n  \n*Overload 3*  \n  :param t: (io.deephaven.db.tables.TableDefinition) - table\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type equals Date.class or DBDateTime.class, false otherwise\n  \n*Overload 4*  \n  :param sds: (io.deephaven.db.plot.filters.SelectableDataSet) - selectable dataset\n  :param column: (java.lang.String) - column\n  :param plotInfo: (io.deephaven.db.plot.errors.PlotInfo) - source of the exception\n  :return: (boolean) true if the column's data type equals Date.class or DBDateTime.class, false otherwise",
  "nanSafeEquals": ":param x: double\n:param x1: double\n:return: boolean"
 },
 "path": "io.deephaven.db.plot.util.ArgumentValidations",
 "text": "Utilities for validating that plotting arguments are acceptable.",
 "typeName": "class"
}