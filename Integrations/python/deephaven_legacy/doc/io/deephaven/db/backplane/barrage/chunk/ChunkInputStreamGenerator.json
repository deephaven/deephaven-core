{
 "className": "io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator",
 "methods": {
  "asNativeArray": "Get an array based version of the backing chunk filtered using the provided index.\n\n:param subset: (io.deephaven.db.v2.utils.Index) - if provided, is a position-space filter of source data\n:return: (java.lang.Object) a typed object array ready for the web translation for open api",
  "extractChunkFromInputStream": "Note: Java generics information - <T>\n\n:param options: io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator.Options\n:param chunkType: io.deephaven.db.v2.sources.chunk.ChunkType\n:param type: java.lang.Class<T>\n:param fieldNodeIter: java.util.Iterator<io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator.FieldNodeInfo>\n:param bufferInfoIter: java.util.Iterator<io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator.BufferInfo>\n:param is: java.io.DataInput\n:return: io.deephaven.db.v2.sources.chunk.Chunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>",
  "getInputStream": "Get an input stream optionally position-space filtered using the provided index.\n\n:param options: (io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator.Options) - the serializable options for this subscription\n:param subset: (io.deephaven.db.v2.utils.Index) - if provided, is a position-space filter of source data\n:return: (io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator.DrainableColumn) a single-use DrainableColumn ready to be drained via grpc",
  "makeInputStreamGenerator": "Note: Java generics information - <T>\n\n:param chunkType: io.deephaven.db.v2.sources.chunk.ChunkType\n:param type: java.lang.Class<T>\n:param chunk: io.deephaven.db.v2.sources.chunk.WritableChunk<io.deephaven.db.v2.sources.chunk.Attributes.Values>\n:return: io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator"
 },
 "path": "io.deephaven.db.backplane.barrage.chunk.ChunkInputStreamGenerator",
 "typeName": "interface"
}