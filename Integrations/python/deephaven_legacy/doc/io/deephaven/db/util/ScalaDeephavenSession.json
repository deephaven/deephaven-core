{
 "className": "io.deephaven.db.util.ScalaDeephavenSession",
 "methods": {
  "clearScriptPathLoader": "Removes the currently configured script path loader from this script.",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getVariable": "**Incompatible overloads text - text from the first overload:**\n\nRetrieve a variable from the script session's bindings.\n\n*Overload 1*  \n  :param name: java.lang.String\n  :return: (java.lang.Object) the variable\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param name: java.lang.String\n  :param defaultValue: T\n  :return: (T) the value of the variable, or defaultValue if not present",
  "getVariableNames": "Retrieves all of the variable names present in the session's scope\n\n:return: (java.util.Set<java.lang.String>) an unmodifiable set of variable names",
  "getVariables": "Retrieves all of the variables present in the session's scope (e.g., Groovy binding, Python globals()).\n\n:return: (java.util.Map<java.lang.String,java.lang.Object>) an unmodifiable map with variable names as the keys, and the Objects as the result",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "hasVariableName": "Check if the scope has the given variable name\n\n:param name: java.lang.String\n:return: (boolean) True iff the scope has the given variable name",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "onApplicationInitializationBegin": "Called before Application initialization, should setup sourcing from the controller (as required).\n\n:param pathLoader: java.util.function.Supplier<io.deephaven.db.util.scripts.ScriptPathLoader>\n:param scriptLoaderState: io.deephaven.db.util.scripts.ScriptPathLoaderState",
  "onApplicationInitializationEnd": "Called after Application initialization.",
  "scriptType": ":return: (java.lang.String) a textual description of this script session's language for use in messages.",
  "setScriptPathLoader": "Sets the scriptPathLoader that is in use for this session.\n\n:param scriptPathLoader: java.util.function.Supplier<io.deephaven.db.util.scripts.ScriptPathLoader>\n:param caching: boolean",
  "setUseOriginalScriptLoaderState": "Informs the session whether or not we should be using the original ScriptLoaderState for source commands.\n\n:param useOriginal: boolean\n:return: boolean",
  "setVariable": "Inserts a value into the script's scope.\n\n:param name: java.lang.String\n:param value: java.lang.Object",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.util.ScalaDeephavenSession",
 "text": "Interactive Console Session using a Scala Interpreter",
 "typeName": "class"
}