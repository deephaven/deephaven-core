{
 "className": "io.deephaven.db.util.ToMapListener",
 "methods": {
  "containsKey": ":param key: java.lang.Object\n:return: boolean",
  "containsValue": ":param value: java.lang.Object\n:return: boolean",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "entrySet": ":return: java.util.Set<java.util.Map.Entry<ToMapListener.K,ToMapListener.V>>",
  "get": "Get but instead of applying the default value producer, use a custom value producer.\n\n The intention is that you can wrap the map up with several different value producers, e.g. one for bid and\n another for ask.\n\n*Overload 1*  \n  :param key: java.lang.Object\n  :return: ToMapListener.V\n  \n*Overload 2*  \n  Note: Java generics information - <T>\n  \n  :param key: ToMapListener.K\n  :param valueProducer: groovy.lang.Closure<T>\n  :param prevValueProducer: groovy.lang.Closure<T>\n  :return: T\n  \n*Overload 3*  \n  Note: Java generics information - <T>\n  \n  :param key: ToMapListener.K\n  :param cs: io.deephaven.db.v2.sources.ColumnSource<T>\n  :return: T\n  \n*Overload 4*  \n  Note: Java generics information - <T>\n  \n  :param key: ToMapListener.K\n  :param valueProducer: java.util.function.LongFunction<T>\n  :param prevValueProducer: java.util.function.LongFunction<T>\n  :return: (T) the value associated with key",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "isEmpty": ":return: boolean",
  "keySet": ":return: java.util.Set<ToMapListener.K>",
  "make": "*Overload 1*  \n  :param source: io.deephaven.db.v2.DynamicTable\n  :param keySourceName: java.lang.String\n  :return: io.deephaven.db.util.ToMapListener\n  \n*Overload 2*  \n  :param source: io.deephaven.db.v2.DynamicTable\n  :param keySourceName: java.lang.String\n  :param valueSourceName: java.lang.String\n  :return: io.deephaven.db.util.ToMapListener\n  \n*Overload 3*  \n  Note: Java generics information - <K1,V1>\n  \n  :param source: io.deephaven.db.v2.DynamicTable\n  :param keySource: io.deephaven.db.v2.sources.ColumnSource<K1>\n  :param valueSource: io.deephaven.db.v2.sources.ColumnSource<V1>\n  :return: io.deephaven.db.util.ToMapListener<K1,V1>\n  \n*Overload 4*  \n  Note: Java generics information - <K1,V1>\n  \n  :param source: io.deephaven.db.v2.DynamicTable\n  :param keyProducer: java.util.function.LongFunction<K1>\n  :param prevKeyProducer: java.util.function.LongFunction<K1>\n  :param valueProducer: java.util.function.LongFunction<V1>\n  :param prevValueProducer: java.util.function.LongFunction<V1>\n  :return: io.deephaven.db.util.ToMapListener<K1,V1>",
  "onUpdate": "Process notification of table changes.\n\n:param upstream: io.deephaven.db.v2.ShiftAwareListener.Update",
  "put": ":param key: ToMapListener.K\n:param value: ToMapListener.V\n:return: ToMapListener.V",
  "putAll": ":param m: java.util.Map<? extends ToMapListener.K,? extends ToMapListener.V>",
  "remove": ":param key: java.lang.Object\n:return: ToMapListener.V",
  "size": ":return: int",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise",
  "values": ":return: java.util.Collection<ToMapListener.V>"
 },
 "path": "io.deephaven.db.util.ToMapListener",
 "text": "Listens to a table, mapping keys to values.\n\n When you call get, we return the value as of the start of this clock cycle.",
 "typeName": "class"
}