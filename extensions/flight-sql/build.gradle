plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
}

description = 'The Deephaven Flight SQL library'

sourceSets {
    adbcTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    jdbcTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    adbcTestImplementation.extendsFrom implementation
    adbcTestRuntimeOnly.extendsFrom runtimeOnly

    jdbcTestImplementation.extendsFrom implementation
    jdbcTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    api project(':server')
    implementation project(':sql')
    implementation project(':engine-sql')
    // :sql does not expose calcite as a dependency (maybe it should?); in the meantime, we want to make sure we can
    // provide reasonable error messages to the client
    implementation libs.calcite.core

    implementation libs.dagger
    implementation libs.arrow.flight.sql

    // FlightSqlClient testing does not depend on a public port being bound (ie, does not require server-jetty) because
    // it can use io.grpc.inprocess.InProcessChannelBuilder (via io.deephaven.server.runner.ServerBuilderInProcessModule).

    testImplementation project(':authorization')
    testImplementation project(':server-test-utils')
    testAnnotationProcessor libs.dagger.compiler
    testImplementation libs.assertj
    testImplementation platform(libs.junit.bom)
    testImplementation libs.junit.jupiter
    testRuntimeOnly libs.junit.platform.launcher
    testRuntimeOnly libs.junit.vintage.engine
    testRuntimeOnly project(':log-to-slf4j')
    testRuntimeOnly libs.slf4j.simple

    // ADBC testing needs an actually server instance bound to a port because it can only connect over ADBC URIs like
    // grpc://localhost:10000
    adbcTestImplementation project(':server-jetty')
    adbcTestImplementation libs.adbc.flight.sql

    adbcTestImplementation project(':server-test-utils')
    adbcTestAnnotationProcessor libs.dagger.compiler
    adbcTestImplementation libs.assertj
    adbcTestImplementation platform(libs.junit.bom)
    adbcTestImplementation libs.junit.jupiter
    adbcTestRuntimeOnly libs.junit.platform.launcher
    adbcTestRuntimeOnly libs.junit.vintage.engine
    adbcTestRuntimeOnly project(':log-to-slf4j')
    adbcTestRuntimeOnly libs.slf4j.simple

    // JDBC testing needs an actually server instance bound to a port because it can only connect over JDBC URIs like
    // jdbc:arrow-flight-sql://localhost:10000.
    jdbcTestImplementation project(':server-jetty')
    jdbcTestRuntimeOnly libs.arrow.flight.sql.jdbc

    jdbcTestImplementation project(':server-test-utils')
    jdbcTestAnnotationProcessor libs.dagger.compiler
    jdbcTestImplementation libs.assertj
    jdbcTestImplementation platform(libs.junit.bom)
    jdbcTestImplementation libs.junit.jupiter
    jdbcTestRuntimeOnly libs.junit.platform.launcher
    jdbcTestRuntimeOnly libs.junit.vintage.engine
    jdbcTestRuntimeOnly project(':log-to-slf4j')
    jdbcTestRuntimeOnly libs.slf4j.simple
}

test {
    useJUnitPlatform()
}

def adbcTest = tasks.register('adbcTest', Test) {
    description = 'Runs ADBC tests.'
    group = 'verification'

    testClassesDirs = sourceSets.adbcTest.output.classesDirs
    classpath = sourceSets.adbcTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
}

def jdbcTest = tasks.register('jdbcTest', Test) {
    description = 'Runs JDBC tests.'
    group = 'verification'

    testClassesDirs = sourceSets.jdbcTest.output.classesDirs
    classpath = sourceSets.jdbcTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
}

check.dependsOn adbcTest
check.dependsOn jdbcTest

apply plugin: 'io.deephaven.java-open-nio'
