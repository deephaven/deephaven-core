plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
}

description 'Kafka: Integrating Engine tables with Kafka'

dependencies {
    api project(':engine-table')

    api project(':engine-processor')

    // Expose Avro to the users of this extension.
    api libs.avro

    // Using io.confluent dependencies requires code in the toplevel build.gradle to add their maven repository.
    // Note: the -ccs flavor is provided by confluent as their community edition. It is equivalent to the maven central
    // version, but has a different version to make it easier to keep confluent dependencies aligned.
    api libs.confluent.kafka.clients
    api libs.confluent.avro.serializer
    api libs.confluent.protobuf.serializer

    // When updating the kafka implementation, it may be useful to test out the minimum kafka version that our code
    // compiles, tests, and runs with. If we want to offer more strict guarantees in these regards in the future, at
    // that time we can setup explicit scaffolding to compile and test with other versions.
    // api 'org.apache.kafka:kafka-clients:5.5.15-ccs'
    // api 'io.confluent:kafka-avro-serializer:5.5.15'
    // api 'io.confluent:kafka-protobuf-serializer:5.5.15'

    api project(':extensions-protobuf')

    implementation project(':engine-processor-function')
    implementation project(':Configuration')
    implementation project(':log-factory')
    implementation libs.trove
    implementation libs.commons.lang3

    compileOnly project(':util-immutables')
    annotationProcessor libs.immutables.value

    testImplementation project(':engine-test-utils')
    testImplementation libs.junit4

    testRuntimeOnly project(':log-to-slf4j')
    testRuntimeOnly project(':configs')
    testRuntimeOnly project(':test-configs')
    testRuntimeOnly libs.slf4j.simple

    testImplementation libs.assertj
}
