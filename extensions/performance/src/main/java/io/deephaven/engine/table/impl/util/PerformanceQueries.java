//
// Copyright (c) 2016-2024 Deephaven Data Labs and Patent Pending
//
package io.deephaven.engine.table.impl.util;

import com.google.auto.service.AutoService;
import io.deephaven.engine.table.Table;

import io.deephaven.engine.table.hierarchical.TreeTable;
import io.deephaven.engine.util.GroovyDeephavenSession;
import io.deephaven.util.annotations.ScriptApi;

import java.util.Map;

public class PerformanceQueries {

    /**
     * <p>
     * Takes in a query evaluation number and returns a view for that query's performance data.
     * </p>
     *
     * <p>
     * You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the
     * {@code QueryPerformance} and {@code QueryOperationPerformance} tables, calling
     * {@code TableLoggers.queryPerformanceLog()} or {@code TableLoggers.queryOperationPerformanceLog()}.
     * </p>
     *
     * <p>
     * The query performance log contains data on how long each query takes to run. Examples of what constitutes one
     * individual query, for performance logging purposes, include:
     * <ul>
     * <li>A new command in the console (i.e. type something, then press the return key)</li>
     * <li>A sort, filter, or custom column generated by a UI</li>
     * <li>A call from a client API external application</li>
     * </ul>
     * </p>
     *
     * @param evaluationNumber evaluation number
     * @return query performance table.
     */
    @ScriptApi
    public static Table queryPerformance(final long evaluationNumber) {
        return PerformanceQueriesGeneral.queryPerformance(TableLoggers.queryPerformanceLog(), evaluationNumber);
    }

    /**
     * <p>
     * Takes in a query evaluation number and returns a view for that query's individual operations's performance data.
     * </p>
     *
     * <p>
     * You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the
     * {@code QueryPerformance} and {@code QueryOperationPerformance} tables, calling
     * {@code TableLoggers.queryPerformanceLog()} or {@code TableLoggers.queryOperationPerformanceLog()}.
     * </p>
     *
     * <p>
     * The query operation performance result contains data on how long each individual operation of a query (where(),
     * update(), naturalJoin(), etc., as well as internal functions) takes to execute, and the change in resource
     * consumption while each was executing.
     * </p>
     *
     * @param evaluationNumber evaluation number
     * @return query operation performance table.
     */
    @ScriptApi
    public static Table queryOperationPerformance(final long evaluationNumber) {
        return PerformanceQueriesGeneral.queryOperationPerformance(TableLoggers.queryOperationPerformanceLog(),
                evaluationNumber);
    }

    /**
     * Converts the query performance table into a tree table.
     *
     * @return query performance tree table.
     */
    @ScriptApi
    public static TreeTable queryPerformanceAsTreeTable() {
        return PerformanceQueriesGeneral.queryPerformanceAsTreeTable(TableLoggers.queryPerformanceLog());
    }

    /**
     * Merges the query performance and query operation performance tables into a single tree table.
     *
     * @return query operation performance tree table.
     */
    @ScriptApi
    public static TreeTable queryOperationPerformanceAsTreeTable() {
        return PerformanceQueriesGeneral.queryOperationPerformanceAsTreeTable(
                TableLoggers.queryPerformanceLog(), TableLoggers.queryOperationPerformanceLog());
    }

    /**
     * Gets the information for a process.
     *
     * @param processInfoId id
     * @param type type
     * @param key key
     * @return process information
     */
    public static String processInfo(final String processInfoId, final String type, final String key) {
        return PerformanceQueriesGeneral.processInfo(TableLoggers.processInfoLog(), processInfoId, type, key);
    }

    /**
     * <p>
     * Takes in a query evaluation number and returns a view for that query's update performance data.
     * </p>
     *
     * <p>
     * You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the
     * {@code QueryPerformance} and {@code QueryOperationPerformance} tables, calling
     * {@code TableLoggers.queryPerformanceLog()} or {@code TableLoggers.queryOperationPerformanceLog()}.
     * </p>
     *
     * @param evaluationNumber evaluation number
     * @return query update performance table.
     */
    @ScriptApi
    public static Table queryUpdatePerformance(final long evaluationNumber) {
        return PerformanceQueriesGeneral.queryUpdatePerformance(TableLoggers.updatePerformanceLog(), evaluationNumber,
                true);
    }

    /**
     * <p>
     * Creates multiple tables with performance data for a given query identified by an evaluation number. The tables
     * are returned in a map with the following String keys:
     * </p>
     *
     * <ul>
     * <li>{@code QueryUpdatePerformance} (QUP) The table created by the method of the same name in this class</li>
     * <li>{@code UpdateWorst} Same table as above but sorted as to show slower updates (column {@code Ratio})
     * first</li>
     * <li>{@code WorstInterval} Show only operations in the slowest update interval in QUP</li>
     * <li>{@code UpdateMostRecent} Show only operations in the last update interval in QUP</li>
     * <li>{@code UpdateAggregate} Summary if update performance data per update interval</li>
     * <li>{@code UpdateSummaryStats} Percentiles and maximum for {@code Ratio} and {@code QueryMemUsed} columns per
     * update interval</li>
     * </ul>
     *
     * <p>
     * You can obtain query evaluation numbers, which uniquely identify a query and its subqueries, via the
     * {@code QueryPerformance} and {@code QueryOperationPerformance} tables, calling
     * {@code TableLoggers.queryPerformanceLog()} or {@code TableLoggers.queryOperationPerformanceLog()}.
     * </p>
     *
     * @param evaluationNumber evaluation number
     * @return map of query update performance tables.
     */
    @ScriptApi
    public static Map<String, Table> queryUpdatePerformanceMap(final long evaluationNumber) {
        return PerformanceQueriesGeneral.queryUpdatePerformanceMap(TableLoggers.updatePerformanceLog(),
                evaluationNumber);
    }

    public static float approxRatio(final long v0, final long v1) {
        return PerformanceQueriesGeneral.approxRatio(v0, v1);
    }

    /**
     * A user friendly view with basic memory, UGP and GC stats samples for the current engine process, collected on a
     * periodic basis.
     *
     * @return a view on ProcessMemoryLog.
     */
    @ScriptApi
    public static Table serverState() {
        return PerformanceQueriesGeneral.serverState(TableLoggers.serverStateLog());
    }

    /**
     * User friendly table and widgets with basic memory, UGP and GC stats samples for the current engine process,
     * collected on a periodic basis.
     *
     * @return map of table and plots derived from the server state log
     */
    @ScriptApi
    public static Map<String, Object> serverStateWithPlots() {
        return PerformanceQueriesGeneral.serverStateWithPlots(TableLoggers.serverStateLog());
    }

    @AutoService(GroovyDeephavenSession.InitScript.class)
    public static class InitScript implements GroovyDeephavenSession.InitScript {
        @Override
        public String getScriptPath() {
            return "groovy/1-performance.groovy";
        }

        @Override
        public int priority() {
            return 1;
        }
    }
}
