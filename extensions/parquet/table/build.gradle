plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
}
import io.deephaven.tools.docker.Architecture

evaluationDependsOn Docker.registryProject('localstack')
evaluationDependsOn Docker.registryProject('minio')

description 'Parquet Table: Integrating Engine tables with Parquet'



sourceSets {
    brotliTest {}
}

// Order matters, declare configurations after sourceSets https://github.com/gradle/gradle/issues/26255
configurations {
    brotliTestImplementation.extendsFrom(testImplementation)
}

dependencies {
    api project(':engine-api')
    api project(':engine-stringset')
    api project(':engine-table')

    implementation project(':extensions-parquet-base')
    implementation libs.parquet.hadoop

    implementation project(':engine-base')
    implementation project(':extensions-csv')
    implementation project(':log-factory')
    implementation project(':Configuration')
    implementation libs.commons.lang3
    implementation project(':Util')

    implementation libs.commons.text
    implementation libs.commons.compress

    implementation platform(libs.jackson.bom)
    implementation libs.jackson.dataformat.yaml
    implementation libs.jackson.datatype.jdk8

    compileOnly project(':util-immutables')
    annotationProcessor libs.immutables

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation project(':base-test-utils')
    testImplementation project(':engine-test-utils')

    testImplementation TestTools.projectDependency(project, 'extensions-s3')
    testImplementation libs.junit4

    testImplementation libs.testcontainers
    testImplementation libs.testcontainers.junit.jupiter
    testImplementation libs.testcontainers.localstack
    testImplementation libs.testcontainers.minio

    testRuntimeOnly project(':log-to-slf4j'),
            project(path: ':configs'),
            project(path: ':test-configs')
    testRuntimeOnly libs.slf4j.simple

    runtimeOnly project(':extensions-trackedfile')

    brotliTestImplementation project(':extensions-parquet-table')
    brotliTestImplementation('com.github.rdblue:brotli-codec:0.1.1')
    brotliTestRuntimeOnly project(':log-to-slf4j'),
                         project(path: ':configs'),
                         project(path: ':test-configs')
}

// if architecture is x86, run the brotli test
if (Architecture.fromHost() == Architecture.AMD64) {
    check.dependsOn(tasks.register('brotliTest', Test) {
        classpath = sourceSets.brotliTest.runtimeClasspath
        testClassesDirs = sourceSets.brotliTest.output.classesDirs
    })
}

TestTools.addEngineOutOfBandTest(project)

testOutOfBand.dependsOn Docker.registryTask(project, 'localstack')
testOutOfBand.systemProperty 'testcontainers.localstack.image', Docker.localImageName('localstack')

testOutOfBand.dependsOn Docker.registryTask(project, 'minio')
testOutOfBand.systemProperty 'testcontainers.minio.image', Docker.localImageName('minio')
