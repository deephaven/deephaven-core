plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
}
import io.deephaven.tools.docker.Architecture

description 'Parquet Table: Integrating Engine tables with Parquet'



sourceSets {
    brotliTest {}
}

// Order matters, declare configurations after sourceSets https://github.com/gradle/gradle/issues/26255
configurations {
    brotliTestImplementation.extendsFrom(testImplementation)
}

dependencies {
    api project(':engine-api')
    api project(':engine-stringset')
    api project(':engine-table')

    implementation project(':extensions-parquet-base')
    Classpaths.inheritParquetHadoop(project)

    implementation project(':engine-base')
    implementation project(':extensions-csv')
    implementation project(':log-factory')
    implementation project(':Configuration')
    implementation depCommonsLang3

    Classpaths.inheritCommonsText(project, 'implementation')

    Classpaths.inheritJacksonPlatform(project)
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

    Classpaths.inheritImmutables(project)

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation project(':base-test-utils')
    testImplementation project(':engine-test-utils')

    testImplementation TestTools.projectDependency(project, 'extensions-s3')
    Classpaths.inheritJUnitClassic(project, 'testImplementation')

    testImplementation "org.testcontainers:testcontainers:1.19.4"
    testImplementation "org.testcontainers:localstack:1.19.4"
    testImplementation "org.testcontainers:minio:1.19.4"

    testRuntimeOnly project(':log-to-slf4j'),
            project(path: ':configs'),
            project(path: ':test-configs')
    Classpaths.inheritSlf4j(project, 'slf4j-simple', 'testRuntimeOnly')

    runtimeOnly project(':extensions-trackedfile')

    brotliTestImplementation project(':extensions-parquet-table')
    brotliTestImplementation('com.github.rdblue:brotli-codec:0.1.1')
    brotliTestRuntimeOnly project(':log-to-slf4j'),
                         project(path: ':configs'),
                         project(path: ':test-configs')
}

// if architecture is x86, run the brotli test
if (Architecture.fromHost() == Architecture.AMD64) {
    check.dependsOn(tasks.register('brotliTest', Test) {
        classpath = sourceSets.brotliTest.runtimeClasspath
        testClassesDirs = sourceSets.brotliTest.output.classesDirs
    })
}

TestTools.addEngineOutOfBandTest(project)

testOutOfBand.systemProperty 'testcontainers.localstack.image', project.property('testcontainers.localstack.image')
testOutOfBand.systemProperty 'testcontainers.minio.image', project.property('testcontainers.minio.image')
