plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
}
import io.deephaven.tools.docker.Architecture

description 'Parquet Table: Integrating Engine tables with Parquet'

configurations {
    brotliTestImplementation.extendsFrom(testImplementation)
}

sourceSets {
    brotliTest {}
}

dependencies {
    api project(':engine-api'),
            project(':engine-stringset')

    implementation project(':extensions-parquet-base'),
            project(':engine-base'),
            project(':engine-table'),
            project(':extensions-csv')

    Classpaths.inheritJacksonPlatform(project)
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

    Classpaths.inheritImmutables(project)

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation TestTools.projectDependency(project, 'engine-table')
    Classpaths.inheritJUnitClassic(project)

    testRuntimeOnly project(':log-to-slf4j'),
            project(path: ':configs'),
            project(path: ':test-configs')
    Classpaths.inheritSlf4j(project, 'slf4j-simple', 'testRuntimeOnly')

    brotliTestImplementation('com.github.rdblue:brotli-codec:0.1.1')
}

// if architecture is x86, run the brotli test
if (Architecture.fromHost() == Architecture.AMD64) {
    check.dependsOn(tasks.register('brotliTest', Test) {
        classpath = sourceSets.brotliTest.runtimeClasspath
        testClassesDirs = sourceSets.brotliTest.output.classesDirs
    })
}

spotless {
    java {
        targetExclude(
                '**/*Boolean*.java',
                '**/*Byte*.java',
                '**/*Char*.java',
                '**/*Short*.java',
                '**/*Int*.java',
                '**/*Long*.java',
                '**/*Float*.java',
                '**/*Double*.java',
                '**/*Object*.java',
        )
    }
}

TestTools.addEngineOutOfBandTest(project)
