plugins {
    id 'com.gradle.enterprise' version '3.5.2'
}

gradle.ext.buildStartTime = new Date()

rootProject.name='Deephaven Community Core'

String[] bins = ['configs', 'test-configs' ]

String[] mods = [ 'Util', 'Numerics', 'TableLogger', 'DB', 'Plot',
        'CompilerTools', 'Generators',
        'Integrations', 'ModelFarm', 'ClientSupport',
        'BenchmarkSupport', 'DB-test', 'DbTypes', 'DbTypesImpl', 'Parquet',
        'Kafka', 'grpc-api', 'table-api', 'qst']

        // new web projects; these modules are intended to form a complete, modular web application,
        // with heavy dependency isolation that should enable very fast rebuilds.
String[] webMods = [
        'web-client-api', // compiled javascript api client
        'web-client-ide', // IDE-only additions to open-api javascript client
        'web-client-ui', // React IDE client app
        'web-jupyter-grid', // React Jupyter grid client app
        'web-shared-beans', // shared data types and common interfaces
        'web-client-backplane', // shared data types and common interfaces
        'open-api-lang-parser', // a javacc generated general-purpose language parser.
        'open-api-lang-tools', // language processing tools that we want to be accessible to many modules
        'open-api-shared-fu', // general purpose tools and dtos for both client and server
        'open-api-shared-rpc', // contains the open api rpc interfaces, and all relevant dependencies
        'open-api-shared-ide', // ide-related dto and configuration objects for both client and server
]

Map<String, String> pyMods = [
        'deephaven-jpy' : 'py/jpy',
        'deephaven-jpy-config': 'py/jpy-config',
        'deephaven-jpy-ext': 'py/jpy-ext',
        'jpy-integration': 'py/jpy-integration',
        'py36': 'py/py36',
        'py37': 'py/py37',
        'sphinx': 'sphinx',
        'pyclient': 'pyclient',
]

// Include our modules
include bins
include webMods
include mods

pyMods.each {
    name, dir ->
        include(name)
        project(":$name").projectDir = file(dir)
}

include 'fishconfig-local'
include 'DHProcess'
include 'proto:proto-backplane-grpc'
include 'proto:proto-backplane-grpc-flight'
include 'proto:raw-js-openapi'
include 'protoc'

// logger
include 'log-factory'

include(':log-to-slf4j')
project(':log-to-slf4j').projectDir = file('log-factory/sinks/log-to-slf4j')

include(':log-to-stream')
project(':log-to-stream').projectDir = file('log-factory/sinks/log-to-stream')

include(':log-to-file')
project(':log-to-file').projectDir = file('log-factory/sinks/log-to-file')

include(':log-to-logbuffer')
project(':log-to-logbuffer').projectDir = file('log-factory/sinks/log-to-logbuffer')

include(':logback-print-stream-globals')
project(':logback-print-stream-globals').projectDir = file('log-factory/sinks/logback-print-stream-globals')

include(':logback-logbuffer')
project(':logback-logbuffer').projectDir = file('log-factory/sinks/logback-logbuffer')

include(':slf4j-to-log')
project(':slf4j-to-log').projectDir = file('log-factory/sources/slf4j-to-log')

include(':log-example-base')
project(':log-example-base').projectDir = file('log-factory/examples/example-base')

include(':log-example-slf4j')
project(':log-example-slf4j').projectDir = file('log-factory/examples/example-slf4j')

include(':log-example-logback')
project(':log-example-logback').projectDir = file('log-factory/examples/example-logback')

include(':log-example-stream')
project(':log-example-stream').projectDir = file('log-factory/examples/example-stream')

include(':log-example-file')
project(':log-example-file').projectDir = file('log-factory/examples/example-file')

include(':grpc-api-server-docker')
project(':grpc-api-server-docker').projectDir = file('grpc-api/server/docker')

include(':grpc-api-server-native')
project(':grpc-api-server-native').projectDir = file('grpc-api/server/native')

include(':grpc-api-client-console')
project(':grpc-api-client-console').projectDir = file('grpc-api-client/console')

include(':extensions-barrage')
project(':extensions-barrage').projectDir = file('extensions/barrage')

include(':extensions-classgraph')
project(':extensions-classgraph').projectDir = file('extensions/classgraph')

include(':extensions-suanshu')
project(':extensions-suanshu').projectDir = file('extensions/suanshu')

include(':Base')

include(':SevenZip')

include(':IO')

include(':DataStructures')

include(':Configuration')

include(':FishUtil')

include(':Net')

include(':Stats')

include(':Container')

include(':ParquetHadoop')

include(':envoy')

include(':grpc-proxy')

include(':uri')
project(':uri').projectDir = file('java-client/uri')

include(':java-client-session')
project(':java-client-session').projectDir = file('java-client/session')

include(':java-client-flight')
project(':java-client-flight').projectDir = file('java-client/flight')

include(':java-client-barrage')
project(':java-client-barrage').projectDir = file('java-client/barrage')

include(':java-client-session-dagger')
project(':java-client-session-dagger').projectDir = file('java-client/session-dagger')

include(':java-client-flight-dagger')
project(':java-client-flight-dagger').projectDir = file('java-client/flight-dagger')

include(':java-client-barrage-dagger')
project(':java-client-barrage-dagger').projectDir = file('java-client/barrage-dagger')

include(':java-client-session-examples')
project(':java-client-session-examples').projectDir = file('java-client/session-examples')

include(':java-client-flight-examples')
project(':java-client-flight-examples').projectDir = file('java-client/flight-examples')

include(':java-client-barrage-examples')
project(':java-client-barrage-examples').projectDir = file('java-client/barrage-examples')

include(':qst:graphviz')

include(':application-mode')

include(':util-immutables')
project(':util-immutables').projectDir = file('Util/util-immutables')

include(':deephaven-wheel')
project(':deephaven-wheel').projectDir = file('py/deephaven-wheel')

include(':deephaven2-wheel')
project(':deephaven2-wheel').projectDir = file('py/deephaven2-wheel')

include(':docker-java-and-python')
project(':docker-java-and-python').projectDir = file('docker/java-and-python')

include(':docker-runtime-base')
project(':docker-runtime-base').projectDir = file('docker/runtime-base')

// Apply "vanity naming" (look for .gradle files matching ProjectName/ProjectName.gradle)
File root = settings.rootDir
mods.each {
    String mod->
    def source = project(":$mod")
    File sourceDir = new File(root, mod)
    String main = "${mod}.gradle".toString() // try for ModuleName.gradle file
    if (new File(sourceDir, main).exists()) {
        source.buildFileName = "$main"
    } else {
        main = "build.gradle"// if no vanity name, check for build.gradle
        if (new File(sourceDir, main).exists()) {
            source.buildFileName = "$main"
        }
    }
    source.projectDir = sourceDir
}

// "bin modules" are projects with a single directory filled with static resources we put into jars.
// In order to use "separate modules per sourceset" option in IntelliJ, we must give these projects
// a different directory than their resource directory to use as the project root.
// We'll use "$rootDir/projects/bin" for the project root of the :bin project,
// with $rootDir/bin as the resource root, so IntelliJ doesn't blow up (a resource dir cannot contain project root dir).
bins.each {
    String mod->
    def source = project(":$mod")
    File sourceDir = new File(root, 'projects')
    source.projectDir = new File(sourceDir, mod)
    File buildscript = new File(source.projectDir, "${mod}.gradle".toString())
    if (buildscript.file) {
        source.buildFileName = buildscript.name
    }
}

Closure configureWebModule = {
    ProjectDescriptor p ->
        p.projectDir = file(p.name.replace('web-', "web$File.separator").replace('open-api-', "open-api$File.separator"))
        // trim out 'web-' or 'open-api-' prefixes
        p.buildFileName = "${p.name - 'web-' - 'open-api-'}.gradle"
}

webMods.collect({ project(":$it")}).each configureWebModule

Closure configurePyModule = {
    ProjectDescriptor p, String path ->
        File f = new File("$p.projectDir", "${p.name}.gradle")
        if (f.exists()) {
            p.buildFileName = "${p.name}.gradle".toString()
        }
}

pyMods.forEach {String k, String v -> configurePyModule(project(":$k"), v) }

buildCache {
    local {
        removeUnusedEntriesAfterDays = 4
    }
}

def isCiServer = System.getenv('CI') == 'true'
if (isCiServer) {
    gradleEnterprise {
        buildScan {
            termsOfServiceUrl = 'https://gradle.com/terms-of-service'
            termsOfServiceAgree = 'yes'
            tag('CI')
        }
    }
}
