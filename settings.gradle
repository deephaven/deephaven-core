plugins {
    id 'com.gradle.enterprise' version '3.5.2'
}

gradle.ext.buildStartTime = new Date()

rootProject.name='Deephaven Community Core'

String[] mods = [
        'Util',
        'Numerics',
        'TableLogger',
        'Plot',
        'Generators',
        'Integrations',
        'ModelFarm',
        'ClientSupport',
        'BenchmarkSupport',
        'python-engine-test',
        'server',
        'table-api',
        'qst',
        'go',
        'authentication',
]

        // new web projects; these modules are intended to form a complete, modular web application,
        // with heavy dependency isolation that should enable very fast rebuilds.
String[] webMods = [
        'web',
        'web-client-api', // compiled javascript api client
        'web-client-ide', // IDE-only additions to open-api javascript client
        'web-client-ui', // React IDE client app
        'web-shared-beans', // shared data types and common interfaces
        'web-client-backplane', // shared data types and common interfaces
        'open-api-lang-parser', // a javacc generated general-purpose language parser.
        'open-api-lang-tools', // language processing tools that we want to be accessible to many modules
        'open-api-shared-fu', // general purpose tools and dtos for both client and server
]

// Include our modules
include webMods
include mods

include 'bom'

include(':configs')
project(':configs').projectDir = file('props/configs')

include(':test-configs')
project(':test-configs').projectDir = file('props/test-configs')

include 'combined-javadoc'

include 'grpc-java:grpc-servlet-jakarta'
include 'grpc-java:grpc-servlet-websocket-jakarta'
include 'grpc-java:grpc-mtls'

include 'DHProcess'
include 'proto:proto-backplane-grpc'
include 'proto:proto-backplane-grpc-flight'
include 'proto:raw-js-openapi'

// logger
include 'log-factory'

include(':log-to-slf4j')
project(':log-to-slf4j').projectDir = file('log-factory/sinks/log-to-slf4j')

include(':log-to-stream')
project(':log-to-stream').projectDir = file('log-factory/sinks/log-to-stream')

include(':log-to-file')
project(':log-to-file').projectDir = file('log-factory/sinks/log-to-file')

include(':log-to-logbuffer')
project(':log-to-logbuffer').projectDir = file('log-factory/sinks/log-to-logbuffer')

include(':logback-print-stream-globals')
project(':logback-print-stream-globals').projectDir = file('log-factory/sinks/logback-print-stream-globals')

include(':logback-logbuffer')
project(':logback-logbuffer').projectDir = file('log-factory/sinks/logback-logbuffer')

include(':slf4j-to-log')
project(':slf4j-to-log').projectDir = file('log-factory/sources/slf4j-to-log')

include(':log-example-base')
project(':log-example-base').projectDir = file('log-factory/examples/example-base')

include(':log-example-slf4j')
project(':log-example-slf4j').projectDir = file('log-factory/examples/example-slf4j')

include(':log-example-logback')
project(':log-example-logback').projectDir = file('log-factory/examples/example-logback')

include(':log-example-stream')
project(':log-example-stream').projectDir = file('log-factory/examples/example-stream')

include(':log-example-file')
project(':log-example-file').projectDir = file('log-factory/examples/example-file')

include(':ssl-config')
project(':ssl-config').projectDir = file('ssl/config')

include(':ssl-kickstart')
project(':ssl-kickstart').projectDir = file('ssl/kickstart')

include(':server-test')
project(':server-test').projectDir = file('server/test')

include(':server-netty')
project(':server-netty').projectDir = file('server/netty')

include(':server-netty-app')
project(':server-netty-app').projectDir = file('server/netty-app')

include(':server-jetty')
project(':server-jetty').projectDir = file('server/jetty')

include(':server-jetty-app')
project(':server-jetty-app').projectDir = file('server/jetty-app')

include(':Base')

include(':SevenZip')

include(':IO')

include(':DataStructures')

include(':Configuration')

include(':FishUtil')

include(':Net')

include(':Stats')

include(':Container')

include(':ParquetHadoop')

include(':codegen')

include(':cpp-client')

include(':replication-util')
project(':replication-util').projectDir = file('replication/util')

include(':replication-static')
project(':replication-static').projectDir = file('replication/static')

include(':replication-reflective')
project(':replication-reflective').projectDir = file('replication/reflective')

include(':engine-chunk')
project(':engine-chunk').projectDir = file('engine/chunk')

include(':engine-context')
project(':engine-context').projectDir = file('engine/context')

include(':engine-vector')
project(':engine-vector').projectDir = file('engine/vector')

include(':engine-stringset')
project(':engine-stringset').projectDir = file('engine/stringset')

include(':engine-function')
project(':engine-function').projectDir = file('engine/function')

include(':engine-time')
project(':engine-time').projectDir = file('engine/time')

include(':engine-tuple')
project(':engine-tuple').projectDir = file('engine/tuple')

include(':engine-updategraph')
project(':engine-updategraph').projectDir = file('engine/updategraph')

include(':engine-api')
project(':engine-api').projectDir = file('engine/api')

include(':engine-rowset')
project(':engine-rowset').projectDir = file('engine/rowset')

include(':engine-base')
project(':engine-base').projectDir = file('engine/base')

include(':engine-tuplesource')
project(':engine-tuplesource').projectDir = file('engine/tuplesource')

include(':engine-table')
project(':engine-table').projectDir = file('engine/table')

include(':engine-benchmark')
project(':engine-benchmark').projectDir = file('engine/benchmark')

include(':extensions-csv')
project(':extensions-csv').projectDir = file('extensions/csv')

include(':extensions-kafka')
project(':extensions-kafka').projectDir = file('extensions/kafka')

include(':extensions-parquet-base')
project(':extensions-parquet-base').projectDir = file('extensions/parquet/base')

include(':extensions-parquet-compression')
project(':extensions-parquet-compression').projectDir = file('extensions/parquet/compression')

include(':extensions-parquet-table')
project(':extensions-parquet-table').projectDir = file('extensions/parquet/table')

include(':extensions-parquet-benchmark')
project(':extensions-parquet-benchmark').projectDir = file('extensions/parquet/benchmark')

include(':extensions-barrage')
project(':extensions-barrage').projectDir = file('extensions/barrage')

include(':extensions-classgraph')
project(':extensions-classgraph').projectDir = file('extensions/classgraph')

include(':extensions-jdbc')
project(':extensions-jdbc').projectDir = file('extensions/jdbc')

include(':extensions-suanshu')
project(':extensions-suanshu').projectDir = file('extensions/suanshu')

include(':plugin')

include(':plugin-dagger')
project(':plugin-dagger').projectDir = file('plugin/dagger')

include(':plugin-figure')
project(':plugin-figure').projectDir = file('plugin/figure')

include(':plugin-partitionedtable')
project(':plugin-partitionedtable').projectDir = file('plugin/partitionedtable')

include(':plugin-gc-app')
project(':plugin-gc-app').projectDir = file('plugin/gc-app')

include(':envoy')

include(':grpc-proxy')

include(':uri')
project(':uri').projectDir = file('java-client/uri')

include(':java-client-session')
project(':java-client-session').projectDir = file('java-client/session')

include(':java-client-flight')
project(':java-client-flight').projectDir = file('java-client/flight')

include(':java-client-barrage')
project(':java-client-barrage').projectDir = file('java-client/barrage')

include(':java-client-session-dagger')
project(':java-client-session-dagger').projectDir = file('java-client/session-dagger')

include(':java-client-flight-dagger')
project(':java-client-flight-dagger').projectDir = file('java-client/flight-dagger')

include(':java-client-barrage-dagger')
project(':java-client-barrage-dagger').projectDir = file('java-client/barrage-dagger')

include(':java-client-session-examples')
project(':java-client-session-examples').projectDir = file('java-client/session-examples')

include(':java-client-flight-examples')
project(':java-client-flight-examples').projectDir = file('java-client/flight-examples')

include(':java-client-barrage-examples')
project(':java-client-barrage-examples').projectDir = file('java-client/barrage-examples')

include(':java-client-example-utilities')
project(':java-client-example-utilities').projectDir = file('java-client/example-utilities')

include(':qst:graphviz')

include(':application-mode')

include(':util-immutables')
project(':util-immutables').projectDir = file('Util/util-immutables')

include(':deephaven-jpy-config')
project(':deephaven-jpy-config').projectDir = file('py/jpy-config')

include(':deephaven-jpy-ext')
project(':deephaven-jpy-ext').projectDir = file('py/jpy-ext')

include(':jpy-integration')
project(':jpy-integration').projectDir = file('py/jpy-integration')

include(':py-client')
project(':py-client').projectDir = file('py/client')

include(':py-server')
project(':py-server').projectDir = file('py/server')

include(':py-embedded-server')
project(':py-embedded-server').projectDir = file('py/embedded-server')

include(':py-embedded-server-java-runtime')
project(':py-embedded-server-java-runtime').projectDir = file('py/embedded-server/java-runtime')

include(':sphinx')
project(':sphinx').buildFileName = 'sphinx.gradle'

include(':docker-runtime-base')
project(':docker-runtime-base').projectDir = file('docker/runtime-base')

include(':docker-server')
project(':docker-server').projectDir = file('docker/server')

include(':docker-server-jetty')
project(':docker-server-jetty').projectDir = file('docker/server-jetty')

include(':docker-web')
project(':docker-web').projectDir = file('docker/web')

include(':docker-web-plugin-packager')
project(':docker-web-plugin-packager').projectDir = file('docker/web-plugin-packager')

include(':docker-server-slim')
project(':docker-server-slim').projectDir = file('docker/server-slim')

include(':hotspot')
project(':hotspot').projectDir = file('hotspot')

include(':hotspot-impl')
project(':hotspot-impl').projectDir = file('hotspot-impl')

include ':authentication'

file("${rootDir}/docker/registry").list().each { name ->
    if (file("${rootDir}/docker/registry/${name}/build.gradle").exists()) {
        include(":docker-${name}")
        project(":docker-${name}").projectDir = file("${rootDir}/docker/registry/${name}")
    }
}

// Apply "vanity naming" (look for .gradle files matching ProjectName/ProjectName.gradle)
File root = settings.rootDir
mods.each {
    String mod->
    def source = project(":$mod")
    File sourceDir = new File(root, mod)
    String main = "${mod}.gradle".toString() // try for ModuleName.gradle file
    if (new File(sourceDir, main).exists()) {
        source.buildFileName = "$main"
    } else {
        main = "build.gradle"// if no vanity name, check for build.gradle
        if (new File(sourceDir, main).exists()) {
            source.buildFileName = "$main"
        }
    }
    source.projectDir = sourceDir
}

Closure configureWebModule = {
    ProjectDescriptor p ->
        p.projectDir = file(p.name.replace('web-', "web$File.separator").replace('open-api-', "open-api$File.separator"))
        // trim out 'web-' or 'open-api-' prefixes
        p.buildFileName = "${p.name - 'web-' - 'open-api-'}.gradle"
}

webMods.collect({ project(":$it")}).each configureWebModule

buildCache {
    local {
        removeUnusedEntriesAfterDays = 4
    }
}

def isCiServer = System.getenv('CI') == 'true'
if (isCiServer) {
    gradleEnterprise {
        buildScan {
            termsOfServiceUrl = 'https://gradle.com/terms-of-service'
            termsOfServiceAgree = 'yes'
            tag('CI')
        }
    }
}

