plugins {
    id 'java'
    id 'application'
}

dependencies {
    implementation project(':java-client-flight-dagger')

    implementation 'info.picocli:picocli:4.6.1'

    Classpaths.inheritJUnitPlatform(project)
    Classpaths.inheritAssertJ(project)
    testImplementation 'org.junit.jupiter:junit-jupiter'

    Classpaths.inheritSlf4j(project, 'slf4j-api', 'implementation')
    Classpaths.inheritLogbackClassic(project)
}

test {
    useJUnitPlatform()
}

startScripts.enabled = false

def createApplication = { String name, String mainClass ->
    project.tasks.register("create-${name}", CreateStartScripts) {script ->
        script.mainClass.set mainClass
        script.applicationName = name
        script.outputDir = project.layout.buildDirectory.dir(name).get().asFile
        script.classpath = startScripts.classpath
        script.defaultJvmOpts = [
                '-server',
                '-XX:+UseG1GC',
                '-XX:MaxGCPauseMillis=100',
                '-XX:+UseStringDeduplication' ]
    }
}

applicationDistribution.into('bin') {
    from(createApplication('get-schema', 'io.deephaven.client.examples.GetSchema'))
    from(createApplication('get-tsv', 'io.deephaven.client.examples.GetTsv'))
    from(createApplication('poll-tsv', 'io.deephaven.client.examples.PollTsv'))
    from(createApplication('list-tables', 'io.deephaven.client.examples.ListTables'))
    from(createApplication('excessive', 'io.deephaven.client.examples.ExampleExcessive'))

    from(createApplication('do-put-new', 'io.deephaven.client.examples.DoPutNew'))
    from(createApplication('do-put-spray', 'io.deephaven.client.examples.DoPutSpray'))
    from(createApplication('do-put-table', 'io.deephaven.client.examples.DoPutTable'))

    from(createApplication('add-to-input-table', 'io.deephaven.client.examples.AddToInputTable'))
    from(createApplication('kv-input-table', 'io.deephaven.client.examples.KeyValueInputTable'))

    from(createApplication('get-ticket-table', 'io.deephaven.client.examples.GetTicketTable'))

    from(createApplication('get-application-schema', 'io.deephaven.client.examples.GetApplicationSchema'))
    from(createApplication('get-application-table', 'io.deephaven.client.examples.GetApplicationTable'))

    from(createApplication('get-scope-schema', 'io.deephaven.client.examples.GetScopeSchema'))
    from(createApplication('get-scope-table', 'io.deephaven.client.examples.GetScopeTable'))

    fileMode = 0755
}

apply plugin: 'io.deephaven.java-open-nio'
