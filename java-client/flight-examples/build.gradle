plugins {
    id 'java'
    id 'application'
}

dependencies {
    implementation project(':java-client-flight-dagger')

    implementation 'info.picocli:picocli:4.6.1'

    Classpaths.inheritJUnitPlatform(project)
    Classpaths.inheritAssertJ(project)
    testImplementation 'org.junit.jupiter:junit-jupiter'

    Classpaths.inheritSlf4j(project, 'slf4j-api', 'implementation')
    Classpaths.inheritLogbackClassic(project)
}

test {
    useJUnitPlatform()
}

startScripts.enabled = false

task createGetSchemaScripts(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.GetSchema'
    applicationName = 'get-schema'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createGetTsvScripts(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.GetTsv'
    applicationName = 'get-tsv'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createPollTsvScripts(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.PollTsv'
    applicationName = 'poll-tsv'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createListTablesScripts(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.ListTables'
    applicationName = 'list-tables'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createExcessiveScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.ExampleExcessive'
    applicationName = 'excessive'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createGetTicketTableScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.GetTicketTable'
    applicationName = 'get-ticket-table'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createDoPutNewScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.DoPutNew'
    applicationName = 'do-put-new'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createDoPutSprayScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.DoPutSpray'
    applicationName = 'do-put-spray'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createDoPutTableScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.DoPutTable'
    applicationName = 'do-put-table'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createAddToInputTableScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.AddToInputTable'
    applicationName = 'add-to-input-table'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createKeyValueInputTableScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.KeyValueInputTable'
    applicationName = 'kv-input-table'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createGetApplicationTableScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.GetApplicationTable'
    applicationName = 'get-application-table'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createGetScopeTableScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.GetScopeTable'
    applicationName = 'get-scope-table'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createGetApplicationSchemaScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.GetApplicationSchema'
    applicationName = 'get-application-schema'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

task createGetScopeSchemaScript(type: CreateStartScripts) {
    mainClassName = 'io.deephaven.client.examples.GetScopeSchema'
    applicationName = 'get-scope-schema'
    outputDir = new File(project.buildDir, name)
    classpath = startScripts.classpath
    defaultJvmOpts = [
            '-server',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=100',
            '-XX:+UseStringDeduplication' ]
}

applicationDistribution.into('bin') {
    from(createGetSchemaScripts)
    from(createGetTsvScripts)
    from(createPollTsvScripts)
    from(createListTablesScripts)
    from(createExcessiveScript)
    from(createGetTicketTableScript)
    from(createDoPutNewScript)
    from(createDoPutSprayScript)
    from(createDoPutTableScript)
    from(createAddToInputTableScript)
    from(createKeyValueInputTableScript)
    from(createGetApplicationTableScript)
    from(createGetScopeTableScript)
    from(createGetApplicationSchemaScript)
    from(createGetScopeSchemaScript)
    fileMode = 0755
}

apply plugin: 'io.deephaven.java-open-nio'
