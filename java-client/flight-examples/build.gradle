plugins {
    id 'application'
    id 'io.deephaven.project.register'
}

dependencies {
    implementation project(':java-client-flight-dagger')
    implementation project(':java-client-example-utilities')

    implementation "io.deephaven.barrage:barrage-format:0.6.0"

    Classpaths.inheritJUnitPlatform(project)
    Classpaths.inheritAssertJ(project)
    testImplementation 'org.junit.jupiter:junit-jupiter'

    Classpaths.inheritSlf4j(project, 'slf4j-api', 'implementation')
    Classpaths.inheritLogbackClassic(project)
}

test {
    useJUnitPlatform()
}

startScripts.enabled = false

def createApplication = { String name, String mainClass ->
    project.tasks.register("create-${name}", CreateStartScripts) {script ->
        script.mainClass.set mainClass
        script.applicationName = name
        script.outputDir = project.layout.buildDirectory.dir(name).get().asFile
        script.classpath = startScripts.classpath
        script.defaultJvmOpts = [
                '-server',
        ]
    }
}

application.applicationDistribution.into('bin') {
    from(createApplication('get-tsv', 'io.deephaven.client.examples.GetTsv'))
    from(createApplication('poll-tsv', 'io.deephaven.client.examples.PollTsv'))
    from(createApplication('list-tables', 'io.deephaven.client.examples.ListTables'))
    from(createApplication('excessive', 'io.deephaven.client.examples.ExampleExcessive'))
    from(createApplication('aggregate-all', 'io.deephaven.client.examples.AggregateAllExample'))
    from(createApplication('agg-by', 'io.deephaven.client.examples.AggByExample'))

    from(createApplication('do-exchange', 'io.deephaven.client.examples.DoExchange'))

    from(createApplication('do-put-new', 'io.deephaven.client.examples.DoPutNew'))
    from(createApplication('do-put-spray', 'io.deephaven.client.examples.DoPutSpray'))
    from(createApplication('do-put-table', 'io.deephaven.client.examples.DoPutTable'))

    from(createApplication('add-to-input-table', 'io.deephaven.client.examples.AddToInputTable'))
    from(createApplication('kv-input-table', 'io.deephaven.client.examples.KeyValueInputTable'))

    from(createApplication('get-table', 'io.deephaven.client.examples.GetDirectTable'))
    from(createApplication('get-schema', 'io.deephaven.client.examples.GetDirectSchema'))

    from(createApplication('convert-to-table', 'io.deephaven.client.examples.ConvertToTable'))

    fileMode = 0755
}

apply plugin: 'io.deephaven.java-open-nio'
