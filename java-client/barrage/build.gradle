plugins {
    id 'java-library'
}

configurations {
    compile.extendsFrom irisDb
    testCompile.extendsFrom irisDbTest
}

description = 'The Deephaven engine library plus client'

dependencies {
    api project(':client-flight')
    api project(':Base')
    api project(':DB')
    api project(':Util')
    api project(':proto:proto-backplane-grpc-flight')
    api project(':log-factory')
    api "com.google.flatbuffers:flatbuffers-java:1.12.0"
    api "io.deephaven.barrage:barrage-format:0.3.0"

    Classpaths.inheritArrow(project, 'arrow-vector', 'compile')
    Classpaths.inheritArrow(project, 'arrow-format', 'compile')

    annotationProcessor 'org.immutables:value:2.8.1'
    compileOnly project(':util-immutables')

    testCompile TestTools.projectDependency(project, 'DB'),
            TestTools.projectDependency(project, 'Util')

    Classpaths.inheritSlf4j(project, 'slf4j-api', 'implementation')
    Classpaths.inheritSlf4j(project, 'slf4j-simple', 'testRuntimeOnly')

    testImplementation(platform('org.junit:junit-bom:5.7.2'))
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.19.0'
}

def createMainExecTask = {
    taskName, mainClass -> tasks.create(taskName, JavaExec, { JavaExec task ->
        task.workingDir "$rootDir"
        task.classpath = sourceSets.main.runtimeClasspath
        task.main = mainClass
        return
    })
}

createMainExecTask('replicateBarrageUtils', 'io.deephaven.client.impl.chunk.ReplicateBarrageUtils')

task replicate {
    dependsOn 'replicateBarrageUtils'
}

spotless {
    java {
        targetExclude(
                '**/*ChunkInputStreamGenerator.java',
                '**/*ArrayExpansionKernel.java'
        )
    }
}
