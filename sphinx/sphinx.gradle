import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'com.bmuschko.docker-remote-api'
}

description = 'Generates docs for the python libraries provided in Deephaven Core'

evaluationDependsOn ':Integrations'
evaluationDependsOn ':pyclient'

def copyPyClientWhl = tasks.register('copyPyClientWhl', Sync) {
    from project(':pyclient').tasks.named('buildPyClient').get().outputs.files
    into layout.buildDirectory.file('sphinx-image/wheel/')
}

def copySphinxLib = tasks.register('copySphinxLib', Sync) {
    from "$rootDir/sphinx/lib/"
    into layout.buildDirectory.file('sphinx-image/lib')
}

def sphinxDockerfile = tasks.register('sphinxDockerfile', Dockerfile) {
    destFile.set layout.buildDirectory.file('sphinx-image/Dockerfile')
    // Deephaven server python API requires that the wheel be installed to build, so we share this image
    from 'deephaven/runtime-base:local-build'

    copyFile "./wheel", "/wheel"
    copyFile "./lib", "/usr/lib/python3/dist-packages/"

    runCommand '''set -eux; \\ 
                  pip3 install sphinx==4.0.3 sphinx-autodoc-typehints==1.12.0 pyarrow==5.0.0 protobuf==3.17.3 grpcio==1.39.0 bitstring==3.1.9 /wheel/*.whl breathe==4.31.0 furo==2021.9.8
                  '''
}

def sphinxImage = Docker.registerDockerImage(project, 'sphinx') {
    inputs.files sphinxDockerfile.get().outputs.files
    inputs.files copyPyClientWhl.get().outputs.files
    inputs.files copySphinxLib.get().outputs.files
    inputDir.set layout.buildDirectory.dir('sphinx-image')
    inputs.files project(':Integrations').tasks.findByName('buildDeephavenPython').outputs.files // deephaven/runtime-base
    images.add('deephaven/sphinx:local-build')
}

def makePyDocTask = { name, archiveBaseName, sourcePaths, outDirPath, Closure c = {} ->

    TaskProvider<? extends Task> pyDoc = Docker.registerDockerTask(project, name) { cfg ->
        cfg.copyIn {
            sourcePaths.each { entry ->
                from(entry.key) {
                    into entry.value
                }
            }
        }
        cfg.dockerfile {
            from 'deephaven/sphinx:local-build'

            copyFile('.', '/project')

            runCommand '''set -eux; \\
                       mkdir /build; \\
                       cd /project; \\
                       sphinx-build -n -b html source /build
                       '''
        }
        cfg.parentContainers = [sphinxImage.get()]
        cfg.containerOutPath = '/build'
        cfg.copyOut {
            into outDirPath
        }

        if (c) c(cfg)
    }


    project.tasks.register "${name}Tar", Tar, {
        Tar tar ->
            tar.from(outDirPath)
            tar.dependsOn(pyDoc)
            tar.archiveBaseName.set(archiveBaseName)
    }
}

def cppClientDoxygenTask = Docker.registerDockerTask(project, 'cppClientDoxygen') {
    copyIn {
        from "$rootDir/cpp-client"
    }
    dockerfile {
        // share the common base image to keep it simple
        from 'deephaven/runtime-base:local-build'

        runCommand('''set -eux; \\
                      apt-get -y install doxygen graphviz
                      ''')

        copyFile('.', '/project')

        runCommand('''set -eux; \\
                      cd /project/doc; \\
                      doxygen
                      ''')
    }
    parentContainers = [project(':Integrations').tasks.findByName('buildDeephavenPython')] // deephaven/runtime-base
    containerOutPath = '/project/doc/doxygenoutput'
    copyOut {
        into "$buildDir/cppClientDoxygen"
    }
}

def pythonDocs = makePyDocTask('pythonDocs', 'dh-python-docs', [("$projectDir/source".toString()):'source'], "$buildDir/docs")
//TODO why do docs depend on this, but the wheel itself doesn't? makes more sense to depend on assert, right?
project.tasks.named('pythonDocsPrepareDocker').configure {
    dependsOn ':Generators:generateFigureImmutable'
    dependsOn ':Generators:generatePythonFigureWrapper'
    dependsOn ':Generators:generatePythonIntegrationStaticMethods'
}

makePyDocTask('pydeephavenDocs', 'pydeephaven', [
        ("$rootDir/pyclient/docs/source".toString()):'source',
        ("$rootDir/pyclient/pydeephaven".toString()):'pydeephaven'
], "$buildDir/pyclient-docs")


def cppClientDocs = makePyDocTask('cppClientDocs', 'cpp-client', [
        ("$buildDir/cppClientDoxygen".toString()):'source/doxygenoutput',
        ("$rootDir/cpp-client/doc".toString()):'source',
        ("$rootDir/cpp-client/deephaven".toString()):'deephaven',
], "$buildDir/cppClientDocs")
tasks.named('cppClientDocsPrepareDocker').configure {
    dependsOn cppClientDoxygenTask
}

makePyDocTask('cppExamplesDocs', 'cpp-examples', [
        ("$rootDir/cpp-examples/doc".toString()):'source',
        ("$buildDir/cppClientDocs".toString()):'cpp'
], "$buildDir/cppExamplesDocs") {
    it.containerDependencies.dependsOn = cppClientDocs
}
