plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'io.deephaven.deephaven-in-docker'
}

configurations {
    pythonWheel
}

dependencies {
    pythonWheel project(':py-client')
}

evaluationDependsOn(':cpp-client')
evaluationDependsOn Docker.registryProject('fedora')
evaluationDependsOn Docker.registryProject('ubi-minimal')

def prefix = '/opt/deephaven'

// start a grpc-api server
String randomSuffix = UUID.randomUUID().toString();
deephavenDocker {
    envVars.set([
        'START_OPTS':'-Xmx512m -DAuthHandlers=io.deephaven.auth.AnonymousAuthenticationHandler'
    ])
    containerName.set "pydeephaven-test-container-${randomSuffix}"
    networkName.set "pydeephaven-network-${randomSuffix}"
}

def buildPyClientTickingManyLinux = { String wheelsSet, String taskName -> Docker.registerDockerTask(project, taskName) {
    // Only tested on x86-64, and we only build dependencies for x86-64
    platform = 'linux/amd64'

    copyIn {
        from(layout.projectDirectory) {
            include 'setup.py'
            include 'README.md'
            include 'src/**/py.typed'
            include 'src/**/*.py'
            include 'src/**/*.pyx'
            include 'src/**/*.pxd'
            include 'pyClientTickingWheels/entrypoint.sh'
        }
    }
    copyOut {
        into layout.buildDirectory.dir('wheel')
    }
    dockerfile {
        from('deephaven/cpp-client-py:local-build')
        runCommand("""mkdir -p \\
                        /out \\
                        '${prefix}/log' \\
                        '${prefix}/src/py-client-ticking/src' \\
                        '${prefix}/src/py-client-ticking/in-wheels'
                   """)
        copyFile('setup.py', "${prefix}/src/py-client-ticking")
        copyFile('README.md', "${prefix}/src/py-client-ticking")
        copyFile('src/', "${prefix}/src/py-client-ticking/src/")
        copyFile('pyClientTickingWheels/entrypoint.sh', '/entrypoint.sh')
        environmentVariable 'PREFIX', prefix
        environmentVariable 'WHEELS_SET', wheelsSet
        environmentVariable 'DEEPHAVEN_VERSION', project.version.toString()
        entrypoint = ['/entrypoint.sh']
    }
    parentContainers = [ project.tasks.getByPath(':cpp-client:cppClientPy') ]
}}

def testPyClientTickingManyLinux = { String wheelsSet, String taskName, TaskProvider<? extends Task> parentContainer, String image -> Docker.registerDockerTask(project, taskName) {
    // Only tested on x86-64, and we only build dependencies for x86-64
    platform = 'linux/amd64'
    copyIn {
        from(configurations.pythonWheel) {
            into 'dep-wheels'
        }
        from(layout.projectDirectory) {
            include 'tests/**'
            include 'testPyClientTicking/entrypoint.sh'
        }
        from(parentContainer.get().outputs) {
            into 'pyt-wheels'
        }
    }
    dockerfile {
        from("deephaven/${image}:local-build")
        runCommand("WHEELS_SET='${wheelsSet}'; PREFIX='${prefix}'; " +
                   '''set -eux ; \
                      DNF=`type microdnf >/dev/null 2>&1 && echo 'microdnf --disableplugin=subscription-manager' || echo 'dnf -q'`; \
                      $DNF -y update; \
                      $DNF -y install python3; \
                      $DNF -y install python3-pip; \
                      $DNF -y install python3-virtualenv; \
                      for spec in ${WHEELS_SET}; do \
                        pyver=`echo "$spec" | cut -d: -f 1`; \
                        $DNF -y install "python${pyver}"; \
                        "python$pyver" -m venv "/project/$pyver"; \
                        source "/project/$pyver/bin/activate"; \
                        pip install --upgrade pip; \
                        pip install unittest-xml-reporting; \
                        deactivate; \
                      done; \
                      $DNF clean all; \
                      rm -fr /out; \
                      mkdir -p \
                        /out/report \
                        /project/tests                      
                   ''')
        copyFile('tests/', '/project/tests/')
        copyFile('dep-wheels/', '/project/dep-wheels')
        copyFile('pyt-wheels/', '/project/pyt-wheels')
        copyFile('testPyClientTicking/entrypoint.sh', '/entrypoint.sh')
        workingDir('/project')
        //
        // Setup for test run.
        //
        environmentVariable 'DH_HOST', deephavenDocker.containerName.get()
        environmentVariable 'DH_PORT', '10000'
        environmentVariable 'PREFIX', prefix
        environmentVariable 'WHEELS_SET', wheelsSet
        environmentVariable 'DEEPHAVEN_VERSION', project.version.toString()
        entrypoint = ['/entrypoint.sh']
    }
    containerDependencies.dependsOn = [deephavenDocker.healthyTask]
    containerDependencies.finalizedBy = deephavenDocker.endTask
    network = deephavenDocker.networkName.get()
    parentContainers = [ parentContainer.get(), Docker.registryTask(project, image.toString()) ]
    copyOut {
        into layout.buildDirectory.dir("${taskName}-test-results")
    }
}}

def isCi = System.getenv().getOrDefault('CI', 'false') == 'true'

def assembleWheelsSet = isCi
        ? [ '3.8:cp38-cp38', '3.9:cp39-cp39', '3.10:cp310-cp310', '3.11:cp311-cp311', '3.12:cp312-cp312' ]
        : [ '3.9:cp39-cp39' ]

def pyClientTickingWheels = buildPyClientTickingManyLinux(
        String.join(' ', assembleWheelsSet),
        'pyClientTickingWheels')

def testPyClientTickingUbiMinimal = testPyClientTickingManyLinux(
        // image does not have python3.10, python3.12 package
        String.join(' ', assembleWheelsSet - [ '3.10:cp310-cp310', '3.12:cp312-cp312' ]),
        'testPyClientTickingUbiMinimal',
        pyClientTickingWheels,
        'ubi-minimal')

def testPyClientTickingFedora = testPyClientTickingManyLinux(
        String.join(' ', assembleWheelsSet),
        'testPyClientTickingFedora',
        pyClientTickingWheels,
        'fedora')

def testPyClientTicking = project.tasks.register('testPyClientTicking') {
    dependsOn testPyClientTickingUbiMinimal
    dependsOn testPyClientTickingFedora
    doLast {
        testPyClientTickingUbiMinimal.get().state.rethrowFailure()
        testPyClientTickingFedora.get().state.rethrowFailure()
    }
}

assemble.dependsOn pyClientTickingWheels

check.dependsOn testPyClientTicking

deephavenDocker.shouldLogIfTaskFails testPyClientTicking
