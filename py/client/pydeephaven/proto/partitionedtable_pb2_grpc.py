# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pydeephaven.proto import partitionedtable_pb2 as deephaven_dot_proto_dot_partitionedtable__pb2
from pydeephaven.proto import table_pb2 as deephaven_dot_proto_dot_table__pb2


class PartitionedTableServiceStub(object):
    """
    This service provides tools to create and query partitioned tables.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PartitionBy = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.PartitionedTableService/PartitionBy',
                request_serializer=deephaven_dot_proto_dot_partitionedtable__pb2.PartitionByRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_partitionedtable__pb2.PartitionByResponse.FromString,
                )
        self.Merge = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.PartitionedTableService/Merge',
                request_serializer=deephaven_dot_proto_dot_partitionedtable__pb2.MergeRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.FromString,
                )
        self.GetTable = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.PartitionedTableService/GetTable',
                request_serializer=deephaven_dot_proto_dot_partitionedtable__pb2.GetTableRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.FromString,
                )


class PartitionedTableServiceServicer(object):
    """
    This service provides tools to create and query partitioned tables.
    """

    def PartitionBy(self, request, context):
        """
        Transforms a table into a partitioned table, consisting of many separate table, each individually
        addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Merge(self, request, context):
        """
        Given a partitioned table, returns a table with the contents of all of the constituent tables.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTable(self, request, context):
        """
        Given a partitioned table and a row described by another table's contents, returns a table
        that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
        more than one is present, FAILED_PRECONDITION will be sent in response.

        If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
        sent in response.

        The simplest way to generally use this is to subscribe to the key columns of the underlying
        table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
        desired keys, and pass that ticket to this service. After that request is sent (note that it
        is not required to wait for it to complete), that new table ticket can be used to make this
        GetTable request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PartitionedTableServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PartitionBy': grpc.unary_unary_rpc_method_handler(
                    servicer.PartitionBy,
                    request_deserializer=deephaven_dot_proto_dot_partitionedtable__pb2.PartitionByRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_partitionedtable__pb2.PartitionByResponse.SerializeToString,
            ),
            'Merge': grpc.unary_unary_rpc_method_handler(
                    servicer.Merge,
                    request_deserializer=deephaven_dot_proto_dot_partitionedtable__pb2.MergeRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.SerializeToString,
            ),
            'GetTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTable,
                    request_deserializer=deephaven_dot_proto_dot_partitionedtable__pb2.GetTableRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.deephaven.proto.backplane.grpc.PartitionedTableService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PartitionedTableService(object):
    """
    This service provides tools to create and query partitioned tables.
    """

    @staticmethod
    def PartitionBy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.deephaven.proto.backplane.grpc.PartitionedTableService/PartitionBy',
            deephaven_dot_proto_dot_partitionedtable__pb2.PartitionByRequest.SerializeToString,
            deephaven_dot_proto_dot_partitionedtable__pb2.PartitionByResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Merge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.deephaven.proto.backplane.grpc.PartitionedTableService/Merge',
            deephaven_dot_proto_dot_partitionedtable__pb2.MergeRequest.SerializeToString,
            deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.deephaven.proto.backplane.grpc.PartitionedTableService/GetTable',
            deephaven_dot_proto_dot_partitionedtable__pb2.GetTableRequest.SerializeToString,
            deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
