# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from pydeephaven.proto import hierarchicaltable_pb2 as deephaven_dot_proto_dot_hierarchicaltable__pb2
from pydeephaven.proto import table_pb2 as deephaven_dot_proto_dot_table__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in deephaven/proto/hierarchicaltable_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class HierarchicalTableServiceStub(object):
    """This service provides tools to create and view hierarchical tables (rollups and trees).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Rollup = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Rollup',
                request_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.RollupRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.RollupResponse.FromString,
                _registered_method=True)
        self.Tree = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Tree',
                request_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.TreeRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.TreeResponse.FromString,
                _registered_method=True)
        self.Apply = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Apply',
                request_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableApplyRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableApplyResponse.FromString,
                _registered_method=True)
        self.View = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/View',
                request_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableViewRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableViewResponse.FromString,
                _registered_method=True)
        self.ExportSource = channel.unary_unary(
                '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/ExportSource',
                request_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableSourceExportRequest.SerializeToString,
                response_deserializer=deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.FromString,
                _registered_method=True)


class HierarchicalTableServiceServicer(object):
    """This service provides tools to create and view hierarchical tables (rollups and trees).
    """

    def Rollup(self, request, context):
        """Applies a rollup operation to a Table and exports the resulting RollupTable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tree(self, request, context):
        """Applies a tree operation to a Table and exports the resulting TreeTable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Apply(self, request, context):
        """Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
        HierarchicalTable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def View(self, request, context):
        """Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
        the resulting HierarchicalTableView for subsequent snapshot or subscription requests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportSource(self, request, context):
        """Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HierarchicalTableServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Rollup': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollup,
                    request_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.RollupRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.RollupResponse.SerializeToString,
            ),
            'Tree': grpc.unary_unary_rpc_method_handler(
                    servicer.Tree,
                    request_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.TreeRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.TreeResponse.SerializeToString,
            ),
            'Apply': grpc.unary_unary_rpc_method_handler(
                    servicer.Apply,
                    request_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableApplyRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableApplyResponse.SerializeToString,
            ),
            'View': grpc.unary_unary_rpc_method_handler(
                    servicer.View,
                    request_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableViewRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableViewResponse.SerializeToString,
            ),
            'ExportSource': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportSource,
                    request_deserializer=deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableSourceExportRequest.FromString,
                    response_serializer=deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.deephaven.proto.backplane.grpc.HierarchicalTableService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HierarchicalTableService(object):
    """This service provides tools to create and view hierarchical tables (rollups and trees).
    """

    @staticmethod
    def Rollup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Rollup',
            deephaven_dot_proto_dot_hierarchicaltable__pb2.RollupRequest.SerializeToString,
            deephaven_dot_proto_dot_hierarchicaltable__pb2.RollupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Tree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Tree',
            deephaven_dot_proto_dot_hierarchicaltable__pb2.TreeRequest.SerializeToString,
            deephaven_dot_proto_dot_hierarchicaltable__pb2.TreeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Apply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Apply',
            deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableApplyRequest.SerializeToString,
            deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableApplyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def View(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/View',
            deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableViewRequest.SerializeToString,
            deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableViewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExportSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.deephaven.proto.backplane.grpc.HierarchicalTableService/ExportSource',
            deephaven_dot_proto_dot_hierarchicaltable__pb2.HierarchicalTableSourceExportRequest.SerializeToString,
            deephaven_dot_proto_dot_table__pb2.ExportedTableCreationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
