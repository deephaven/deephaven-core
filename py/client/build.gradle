import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork
import io.deephaven.tools.docker.WaitForHealthyContainer

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.python-wheel'
}

// Start up a docker container for the grpc server, then run pydeephaven test
evaluationDependsOn(':docker-server')
String randomSuffix = UUID.randomUUID().toString();
String dockerContainerName = "pydeephaven-test-container-${randomSuffix}"
String dockerNetworkName = "pydeephaven-network-${randomSuffix}"
def createDeephavenGrpcApiNetwork = tasks.register('createDeephavenGrpcApiNetwork', DockerCreateNetwork) {
    networkName.set dockerNetworkName
}
def removeDeephavenGrpcApiNetwork = tasks.register('removeDeephavenGrpcApiNetwork', DockerRemoveNetwork) {
    networkId.set dockerNetworkName
}

def createDeephavenGrpcApi = tasks.register('createDeephavenGrpcApi', DockerCreateContainer) {
    def grpcApiImage = project(':docker-server').tasks.findByName('buildDocker-server')//docker-server-netty
    dependsOn grpcApiImage, createDeephavenGrpcApiNetwork
    targetImageId grpcApiImage.getImageId()
    containerName.set dockerContainerName
    hostConfig.network.set dockerNetworkName
}
def startDeephavenGrpcApi = tasks.register('startDeephavenGrpcApi', DockerStartContainer) {
    dependsOn createDeephavenGrpcApi
    containerId.set dockerContainerName
}
def waitForHealthy = tasks.register('waitForHealthy', WaitForHealthyContainer) {
    dependsOn startDeephavenGrpcApi

    awaitStatusTimeout.set 20
    checkInterval.set 100

    containerId.set dockerContainerName
}
def stopDeephavenGrpcApi = tasks.register('stopDeephavenGrpcApi', DockerRemoveContainer) {
    dependsOn createDeephavenGrpcApi
    finalizedBy removeDeephavenGrpcApiNetwork

    targetContainerId dockerContainerName
    force.set true
    removeVolumes.set true

//    onError { t ->
//        // ignore, container might not exist
//    }
}
tasks.getByName('check').dependsOn(Docker.registerDockerTask(project, 'testPyClient') {
    copyIn {
        from('pydeephaven') {
            into 'project/pydeephaven'
        }
        from('tests') {
            into 'project/tests'
        }
    }
//    parentContainers = [  ]
    containerDependencies.dependsOn = [waitForHealthy, createDeephavenGrpcApiNetwork]
    containerDependencies.finalizedBy = stopDeephavenGrpcApi
    network = dockerNetworkName
    dockerfile {
        from('deephaven/python:local-build')
        runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4 pyarrow==6.0.1 protobuf==3.17.3 grpcio==1.39.0 bitstring==3.1.9 pandas==1.2.5;\\
                      mkdir -p /out/report'''
        environmentVariable 'DH_HOST', dockerContainerName
        environmentVariable 'DH_PORT', '8080'

        copyFile('project', '/project')
        workingDir('/project')
    }
    parentContainers = [ Docker.registryTask(project, 'python') ]
    entrypoint = ['python', '-m', 'xmlrunner', 'discover', 'tests', '-v', '-o', '/out/report']
    copyOut {
        into layout.buildDirectory.dir('test-results')
    }
})
