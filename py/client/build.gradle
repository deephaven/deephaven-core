import io.deephaven.tools.docker.DiffTask

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.python-wheel'
    id 'io.deephaven.deephaven-in-docker'
}

evaluationDependsOn Docker.registryProject('python')

wheel {
    src 'pydeephaven'
    src 'examples'
    src 'tests'
}

configurations {
    python {}
}

dependencies {
    python project(path: ':proto:proto-backplane-grpc', configuration: 'python')
}

def generatedProtoDir = layout.buildDirectory.dir('generatedProto')

def updatePyNamespaces = tasks.register('updatePyNamespaces', Sync) {
    from(configurations.python) {
        // change directory from deephaven to pydeephaven
        eachFile { it.path = 'pydeephaven/' + it.path.substring('deephaven/'.length()) }
        // rewrite specific imports/namespaces from deephaven to pydeephaven
        filter { contents ->
            def scanner = new Scanner(contents)
            def lines = []
            while (scanner.hasNextLine()) {
                def line = scanner.nextLine();
                if (line.trim().startsWith('\'__module__\' :')) {
                    line = line.replace('\'deephaven.', '\'pydeephaven.')
                } else if (line.startsWith('from deephaven.proto')) {
                    line = line.replace('from deephaven.proto', 'from pydeephaven.proto')
                }
                lines.add(line)
            }
            return lines.join(System.lineSeparator());
        }
    }

    into generatedProtoDir
}

def compare = tasks.register('compareProtobuf', DiffTask) {
    dependsOn updatePyNamespaces

    expectedContents.set generatedProtoDir.get().dir('pydeephaven/proto')
    actualContents.set layout.projectDirectory.dir('pydeephaven/proto')
    generateTask.set ':py-client:updateProto'
    ignore {
        include '__init__.py'
    }
}
// fail a "check" build if these are out of date
tasks.getByName('quick').dependsOn(compare)

tasks.register('updateProtobuf', Sync) {
    dependsOn(updatePyNamespaces)
    finalizedBy compare
    from generatedProtoDir.get().dir('pydeephaven/proto')
    into layout.projectDirectory.dir('pydeephaven/proto')
    preserve {
        include '__init__.py'
    }
}

// Start up a docker container for the grpc server, then run pydeephaven test
String randomSuffix = UUID.randomUUID().toString();
deephavenDocker {
    containerName.set "pydeephaven-test-container-${randomSuffix}"
    networkName.set "pydeephaven-network-${randomSuffix}"
}

tasks.getByName('check').dependsOn(Docker.registerDockerTask(project, 'testPyClient') {
    copyIn {
        from('pydeephaven') {
            into 'project/pydeephaven'
        }
        from('tests') {
            into 'project/tests'
        }
    }
    containerDependencies.dependsOn = [deephavenDocker.healthyTask]
    containerDependencies.finalizedBy = deephavenDocker.endTask
    network = deephavenDocker.networkName.get()
    dockerfile {
        from('deephaven/python:local-build')
        runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4 pyarrow==7.0.0 protobuf==3.20.1 grpcio==1.46.0 bitstring==3.1.9 pandas==1.2.5 timeout-decorator==0.5.0;\\
                      mkdir -p /out/report'''
        copyFile('project', '/project')
        workingDir('/project')
        environmentVariable 'DH_HOST', deephavenDocker.containerName.get()
        environmentVariable 'DH_PORT', '8080'
    }
    parentContainers = [ Docker.registryTask(project, 'python') ]
    entrypoint = ['python', '-m', 'xmlrunner', 'discover', 'tests', '-v', '-o', '/out/report']
    copyOut {
        into layout.buildDirectory.dir('test-results')
    }
})
