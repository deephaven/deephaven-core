"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class AuthenticationConstantsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___AuthenticationConstantsRequest = AuthenticationConstantsRequest

@typing.final
class ConfigurationConstantsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ConfigurationConstantsRequest = ConfigurationConstantsRequest

@typing.final
class AuthenticationConstantsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ConfigValuesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ConfigValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ConfigValue | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["value", b"value"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    CONFIG_VALUES_FIELD_NUMBER: builtins.int
    @property
    def config_values(
        self,
    ) -> google.protobuf.internal.containers.MessageMap[
        builtins.str, global___ConfigValue
    ]: ...
    def __init__(
        self,
        *,
        config_values: collections.abc.Mapping[builtins.str, global___ConfigValue]
        | None = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing.Literal["config_values", b"config_values"]
    ) -> None: ...

global___AuthenticationConstantsResponse = AuthenticationConstantsResponse

@typing.final
class ConfigurationConstantsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ConfigValuesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ConfigValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ConfigValue | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["value", b"value"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    CONFIG_VALUES_FIELD_NUMBER: builtins.int
    @property
    def config_values(
        self,
    ) -> google.protobuf.internal.containers.MessageMap[
        builtins.str, global___ConfigValue
    ]: ...
    def __init__(
        self,
        *,
        config_values: collections.abc.Mapping[builtins.str, global___ConfigValue]
        | None = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing.Literal["config_values", b"config_values"]
    ) -> None: ...

global___ConfigurationConstantsResponse = ConfigurationConstantsResponse

@typing.final
class ConfigValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRING_VALUE_FIELD_NUMBER: builtins.int
    string_value: builtins.str
    def __init__(
        self,
        *,
        string_value: builtins.str = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal["kind", b"kind", "string_value", b"string_value"],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal["kind", b"kind", "string_value", b"string_value"],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["kind", b"kind"]
    ) -> typing.Literal["string_value"] | None: ...

global___ConfigValue = ConfigValue
