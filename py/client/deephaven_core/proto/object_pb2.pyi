"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending
"""

import builtins
import collections.abc
import deephaven_core.proto.ticket_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class FetchObjectRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_ID_FIELD_NUMBER: builtins.int
    @property
    def source_id(self) -> deephaven_core.proto.ticket_pb2.TypedTicket: ...
    def __init__(
        self,
        *,
        source_id: deephaven_core.proto.ticket_pb2.TypedTicket | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["source_id", b"source_id"]) -> None: ...

global___FetchObjectRequest = FetchObjectRequest

@typing.final
class FetchObjectResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    TYPED_EXPORT_IDS_FIELD_NUMBER: builtins.int
    type: builtins.str
    data: builtins.bytes
    @property
    def typed_export_ids(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[deephaven_core.proto.ticket_pb2.TypedTicket]: ...
    def __init__(
        self,
        *,
        type: builtins.str = ...,
        data: builtins.bytes = ...,
        typed_export_ids: collections.abc.Iterable[deephaven_core.proto.ticket_pb2.TypedTicket] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "type", b"type", "typed_export_ids", b"typed_export_ids"]) -> None: ...

global___FetchObjectResponse = FetchObjectResponse

@typing.final
class ConnectRequest(google.protobuf.message.Message):
    """
    First payload to send on a MessageStream, indicating the object to connect to
    on the server.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_ID_FIELD_NUMBER: builtins.int
    @property
    def source_id(self) -> deephaven_core.proto.ticket_pb2.TypedTicket: ...
    def __init__(
        self,
        *,
        source_id: deephaven_core.proto.ticket_pb2.TypedTicket | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["source_id", b"source_id"]) -> None: ...

global___ConnectRequest = ConnectRequest

@typing.final
class ClientData(google.protobuf.message.Message):
    """
    A generic payload sent from the client to the server. The specific requirements and
    guarantees are defined by the specific plugin.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PAYLOAD_FIELD_NUMBER: builtins.int
    REFERENCES_FIELD_NUMBER: builtins.int
    payload: builtins.bytes
    """The payload, may be empty."""
    @property
    def references(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[deephaven_core.proto.ticket_pb2.TypedTicket]:
        """
        The typed references, may be empty.

        These references may be any ticket, resolved or not. This lets the client reference
        objects that already exist on the server or are still pending. Note that pending
        tickets require the server to wait until that object exists before passing this request
        to the server plugin, and since messages are always processed in order, later requests
        will also be delayed.
        """

    def __init__(
        self,
        *,
        payload: builtins.bytes = ...,
        references: collections.abc.Iterable[deephaven_core.proto.ticket_pb2.TypedTicket] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["payload", b"payload", "references", b"references"]) -> None: ...

global___ClientData = ClientData

@typing.final
class ServerData(google.protobuf.message.Message):
    """
    A generic payload sent from the server to the client. The specific requirements and
    guarantees of this are defined by the specific plugin.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PAYLOAD_FIELD_NUMBER: builtins.int
    EXPORTED_REFERENCES_FIELD_NUMBER: builtins.int
    payload: builtins.bytes
    """The payload, may be empty."""
    @property
    def exported_references(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[deephaven_core.proto.ticket_pb2.TypedTicket]:
        """
        The exported references, may be empty.

        To correctly free up unused server resources, clients must take care to release
        these exports when they will no longer be used. A reference may be missing a type,
        meaning that the object cannot be used as the source_id for a ConnectRequest, but
        it may still be passed back to the server as part of ClientData references, and
        it still needs to be released when no longer used.
        """

    def __init__(
        self,
        *,
        payload: builtins.bytes = ...,
        exported_references: collections.abc.Iterable[deephaven_core.proto.ticket_pb2.TypedTicket] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["exported_references", b"exported_references", "payload", b"payload"]) -> None: ...

global___ServerData = ServerData

@typing.final
class StreamRequest(google.protobuf.message.Message):
    """
    Client payload for the MessageStream.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONNECT_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    @property
    def connect(self) -> global___ConnectRequest:
        """Indicates that this is the first request of the stream, asking to connect to
        a specific object on the server.
        """

    @property
    def data(self) -> global___ClientData:
        """Data to pass to the object on the server."""

    def __init__(
        self,
        *,
        connect: global___ConnectRequest | None = ...,
        data: global___ClientData | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["connect", b"connect", "data", b"data", "message", b"message"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["connect", b"connect", "data", b"data", "message", b"message"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["message", b"message"]) -> typing.Literal["connect", "data"] | None: ...

global___StreamRequest = StreamRequest

@typing.final
class StreamResponse(google.protobuf.message.Message):
    """
    Server responses to the client. Currently can only be ServerData messages.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    @property
    def data(self) -> global___ServerData:
        """Data to pass to the client about the object on the server."""

    def __init__(
        self,
        *,
        data: global___ServerData | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "message", b"message"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "message", b"message"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["message", b"message"]) -> typing.Literal["data"] | None: ...

global___StreamResponse = StreamResponse

@typing.final
class BrowserNextResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___BrowserNextResponse = BrowserNextResponse
