"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending
"""

import builtins
import collections.abc
import deephaven_core.proto.ticket_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _BadDataBehavior:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _BadDataBehaviorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BadDataBehavior.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    BAD_DATA_BEHAVIOR_NOT_SPECIFIED: _BadDataBehavior.ValueType  # 0
    """When not specified will use the server default."""
    THROW: _BadDataBehavior.ValueType  # 1
    """Throw an exception and abort processing when bad data is encountered."""
    RESET: _BadDataBehavior.ValueType  # 2
    """Reset the state for the bucket to {@code null} when invalid data is encountered."""
    SKIP: _BadDataBehavior.ValueType  # 3
    """Skip and do not process the invalid data without changing state."""
    POISON: _BadDataBehavior.ValueType  # 4
    """Allow the bad data to poison the result. This is only valid for use with NaN."""

class BadDataBehavior(_BadDataBehavior, metaclass=_BadDataBehaviorEnumTypeWrapper):
    """Directives for how to handle {@code null} and {@code NaN} values"""

BAD_DATA_BEHAVIOR_NOT_SPECIFIED: BadDataBehavior.ValueType  # 0
"""When not specified will use the server default."""
THROW: BadDataBehavior.ValueType  # 1
"""Throw an exception and abort processing when bad data is encountered."""
RESET: BadDataBehavior.ValueType  # 2
"""Reset the state for the bucket to {@code null} when invalid data is encountered."""
SKIP: BadDataBehavior.ValueType  # 3
"""Skip and do not process the invalid data without changing state."""
POISON: BadDataBehavior.ValueType  # 4
"""Allow the bad data to poison the result. This is only valid for use with NaN."""
global___BadDataBehavior = BadDataBehavior

class _UpdateByNullBehavior:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _UpdateByNullBehaviorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_UpdateByNullBehavior.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    NULL_BEHAVIOR_NOT_SPECIFIED: _UpdateByNullBehavior.ValueType  # 0
    """When not specified will use the server default."""
    NULL_DOMINATES: _UpdateByNullBehavior.ValueType  # 1
    """In the case of Current - null, the null dominates so Column[i] - null = null"""
    VALUE_DOMINATES: _UpdateByNullBehavior.ValueType  # 2
    """In the case of Current - null, the current value dominates so Column[i] - null = Column[i]"""
    ZERO_DOMINATES: _UpdateByNullBehavior.ValueType  # 3
    """In the case of Current - null, return zero so Column[i] - null = 0"""

class UpdateByNullBehavior(_UpdateByNullBehavior, metaclass=_UpdateByNullBehaviorEnumTypeWrapper):
    """Directives for how to handle {@code null} and {@code NaN} values"""

NULL_BEHAVIOR_NOT_SPECIFIED: UpdateByNullBehavior.ValueType  # 0
"""When not specified will use the server default."""
NULL_DOMINATES: UpdateByNullBehavior.ValueType  # 1
"""In the case of Current - null, the null dominates so Column[i] - null = null"""
VALUE_DOMINATES: UpdateByNullBehavior.ValueType  # 2
"""In the case of Current - null, the current value dominates so Column[i] - null = Column[i]"""
ZERO_DOMINATES: UpdateByNullBehavior.ValueType  # 3
"""In the case of Current - null, return zero so Column[i] - null = 0"""
global___UpdateByNullBehavior = UpdateByNullBehavior

class _NullValue:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _NullValueEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_NullValue.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    NULL_VALUE: _NullValue.ValueType  # 0

class NullValue(_NullValue, metaclass=_NullValueEnumTypeWrapper): ...

NULL_VALUE: NullValue.ValueType  # 0
global___NullValue = NullValue

class _CaseSensitivity:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CaseSensitivityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CaseSensitivity.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    MATCH_CASE: _CaseSensitivity.ValueType  # 0
    IGNORE_CASE: _CaseSensitivity.ValueType  # 1

class CaseSensitivity(_CaseSensitivity, metaclass=_CaseSensitivityEnumTypeWrapper): ...

MATCH_CASE: CaseSensitivity.ValueType  # 0
IGNORE_CASE: CaseSensitivity.ValueType  # 1
global___CaseSensitivity = CaseSensitivity

class _MatchType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _MatchTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MatchType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    REGULAR: _MatchType.ValueType  # 0
    INVERTED: _MatchType.ValueType  # 1

class MatchType(_MatchType, metaclass=_MatchTypeEnumTypeWrapper): ...

REGULAR: MatchType.ValueType  # 0
INVERTED: MatchType.ValueType  # 1
global___MatchType = MatchType

@typing.final
class TableReference(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TICKET_FIELD_NUMBER: builtins.int
    BATCH_OFFSET_FIELD_NUMBER: builtins.int
    batch_offset: builtins.int
    """An offset into a BatchRequest's ops field, used to reference an intermediate operation which may not have been
    exported. Only valid to set when used in the context of a BatchRequest.
    """
    @property
    def ticket(self) -> deephaven_core.proto.ticket_pb2.Ticket:
        """A ticket to resolve to get the table. It's preferable to use export tickets in order to avoid races that are
        possible with tickets controlled by the server, but any ticket type will suffice as long as it resolves to a
        table.
        """

    def __init__(
        self,
        *,
        ticket: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        batch_offset: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["batch_offset", b"batch_offset", "ref", b"ref", "ticket", b"ticket"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["batch_offset", b"batch_offset", "ref", b"ref", "ticket", b"ticket"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["ref", b"ref"]) -> typing.Literal["ticket", "batch_offset"] | None: ...

global___TableReference = TableReference

@typing.final
class ExportedTableCreationResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SUCCESS_FIELD_NUMBER: builtins.int
    ERROR_INFO_FIELD_NUMBER: builtins.int
    SCHEMA_HEADER_FIELD_NUMBER: builtins.int
    IS_STATIC_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    success: builtins.bool
    """If this is part of a batch, you may receive creation messages that indicate the sub-operation failed."""
    error_info: builtins.str
    """If this is part of a batch, this errorInfo will be the message provided"""
    schema_header: builtins.bytes
    """Schema as described in Arrow Message.fbs::Message."""
    is_static: builtins.bool
    """Whether or not this table might change."""
    size: builtins.int
    """The current number of rows for this table. If this is negative, the table isn't coalesced, meaning the
    size isn't known without scanning partitions. Typically, the client should filter the data by the
    partitioning columns first.
    """
    @property
    def result_id(self) -> global___TableReference: ...
    def __init__(
        self,
        *,
        result_id: global___TableReference | None = ...,
        success: builtins.bool = ...,
        error_info: builtins.str = ...,
        schema_header: builtins.bytes = ...,
        is_static: builtins.bool = ...,
        size: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error_info", b"error_info", "is_static", b"is_static", "result_id", b"result_id", "schema_header", b"schema_header", "size", b"size", "success", b"success"]) -> None: ...

global___ExportedTableCreationResponse = ExportedTableCreationResponse

@typing.final
class FetchTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_ID_FIELD_NUMBER: builtins.int
    RESULT_ID_FIELD_NUMBER: builtins.int
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    def __init__(
        self,
        *,
        source_id: global___TableReference | None = ...,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___FetchTableRequest = FetchTableRequest

@typing.final
class ApplyPreviewColumnsRequest(google.protobuf.message.Message):
    """Transforms the source table to avoid complex objects in columns. If no unpreviewed types are defined, this
    defaults to legacy behavior of:
     - Limiting string columns to a server-defined max length
     - Converting arrays/vectors to comma separated strings of the first N elements (again, server defined)
     - Converting all non-string, non-number, non-date types to their string representation
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_ID_FIELD_NUMBER: builtins.int
    RESULT_ID_FIELD_NUMBER: builtins.int
    CONVERT_ARRAYS_FIELD_NUMBER: builtins.int
    UNPREVIEWED_TYPES_FIELD_NUMBER: builtins.int
    convert_arrays: builtins.bool
    """True to convert all arrays to strings, limiting to a server-defined max length. Expected to be unset if
    unpreviewed_types is empty.
    """
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def unpreviewed_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Java types to leave unconverted - all other types will be converted to strings. If empty, the server's
        legacy behavior will be used.
        """

    def __init__(
        self,
        *,
        source_id: global___TableReference | None = ...,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        convert_arrays: builtins.bool = ...,
        unpreviewed_types: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["convert_arrays", b"convert_arrays", "result_id", b"result_id", "source_id", b"source_id", "unpreviewed_types", b"unpreviewed_types"]) -> None: ...

global___ApplyPreviewColumnsRequest = ApplyPreviewColumnsRequest

@typing.final
class ExportedTableUpdatesRequest(google.protobuf.message.Message):
    """Intentionally empty and is here for backwards compatibility should this API change."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ExportedTableUpdatesRequest = ExportedTableUpdatesRequest

@typing.final
class ExportedTableUpdateMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPORT_ID_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    UPDATE_FAILURE_MESSAGE_FIELD_NUMBER: builtins.int
    size: builtins.int
    update_failure_message: builtins.str
    @property
    def export_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    def __init__(
        self,
        *,
        export_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        size: builtins.int = ...,
        update_failure_message: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["export_id", b"export_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["export_id", b"export_id", "size", b"size", "update_failure_message", b"update_failure_message"]) -> None: ...

global___ExportedTableUpdateMessage = ExportedTableUpdateMessage

@typing.final
class EmptyTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    size: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        size: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["result_id", b"result_id", "size", b"size"]) -> None: ...

global___EmptyTableRequest = EmptyTableRequest

@typing.final
class TimeTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    START_TIME_NANOS_FIELD_NUMBER: builtins.int
    START_TIME_STRING_FIELD_NUMBER: builtins.int
    PERIOD_NANOS_FIELD_NUMBER: builtins.int
    PERIOD_STRING_FIELD_NUMBER: builtins.int
    BLINK_TABLE_FIELD_NUMBER: builtins.int
    start_time_nanos: builtins.int
    start_time_string: builtins.str
    period_nanos: builtins.int
    period_string: builtins.str
    blink_table: builtins.bool
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        start_time_nanos: builtins.int = ...,
        start_time_string: builtins.str = ...,
        period_nanos: builtins.int = ...,
        period_string: builtins.str = ...,
        blink_table: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["period", b"period", "period_nanos", b"period_nanos", "period_string", b"period_string", "result_id", b"result_id", "start_time", b"start_time", "start_time_nanos", b"start_time_nanos", "start_time_string", b"start_time_string"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["blink_table", b"blink_table", "period", b"period", "period_nanos", b"period_nanos", "period_string", b"period_string", "result_id", b"result_id", "start_time", b"start_time", "start_time_nanos", b"start_time_nanos", "start_time_string", b"start_time_string"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["period", b"period"]) -> typing.Literal["period_nanos", "period_string"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["start_time", b"start_time"]) -> typing.Literal["start_time_nanos", "start_time_string"] | None: ...

global___TimeTableRequest = TimeTableRequest

@typing.final
class SelectOrUpdateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    COLUMN_SPECS_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def column_specs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        column_specs: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["column_specs", b"column_specs", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___SelectOrUpdateRequest = SelectOrUpdateRequest

@typing.final
class Selectable(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RAW_FIELD_NUMBER: builtins.int
    raw: builtins.str
    """ColumnExpression column_expression = 2;"""
    def __init__(
        self,
        *,
        raw: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["raw", b"raw", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["raw", b"raw", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["raw"] | None: ...

global___Selectable = Selectable

@typing.final
class MathContext(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _RoundingMode:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _RoundingModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[MathContext._RoundingMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ROUNDING_MODE_NOT_SPECIFIED: MathContext._RoundingMode.ValueType  # 0
        UP: MathContext._RoundingMode.ValueType  # 1
        DOWN: MathContext._RoundingMode.ValueType  # 2
        CEILING: MathContext._RoundingMode.ValueType  # 3
        FLOOR: MathContext._RoundingMode.ValueType  # 4
        HALF_UP: MathContext._RoundingMode.ValueType  # 5
        HALF_DOWN: MathContext._RoundingMode.ValueType  # 6
        HALF_EVEN: MathContext._RoundingMode.ValueType  # 7
        UNNECESSARY: MathContext._RoundingMode.ValueType  # 8

    class RoundingMode(_RoundingMode, metaclass=_RoundingModeEnumTypeWrapper): ...
    ROUNDING_MODE_NOT_SPECIFIED: MathContext.RoundingMode.ValueType  # 0
    UP: MathContext.RoundingMode.ValueType  # 1
    DOWN: MathContext.RoundingMode.ValueType  # 2
    CEILING: MathContext.RoundingMode.ValueType  # 3
    FLOOR: MathContext.RoundingMode.ValueType  # 4
    HALF_UP: MathContext.RoundingMode.ValueType  # 5
    HALF_DOWN: MathContext.RoundingMode.ValueType  # 6
    HALF_EVEN: MathContext.RoundingMode.ValueType  # 7
    UNNECESSARY: MathContext.RoundingMode.ValueType  # 8

    PRECISION_FIELD_NUMBER: builtins.int
    ROUNDING_MODE_FIELD_NUMBER: builtins.int
    precision: builtins.int
    rounding_mode: global___MathContext.RoundingMode.ValueType
    def __init__(
        self,
        *,
        precision: builtins.int = ...,
        rounding_mode: global___MathContext.RoundingMode.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["precision", b"precision", "rounding_mode", b"rounding_mode"]) -> None: ...

global___MathContext = MathContext

@typing.final
class UpdateByWindowScale(google.protobuf.message.Message):
    """Reusable window scale message for the UpdateBy rolling operations."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class UpdateByWindowTicks(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TICKS_FIELD_NUMBER: builtins.int
        ticks: builtins.float
        def __init__(
            self,
            *,
            ticks: builtins.float = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["ticks", b"ticks"]) -> None: ...

    @typing.final
    class UpdateByWindowTime(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COLUMN_FIELD_NUMBER: builtins.int
        NANOS_FIELD_NUMBER: builtins.int
        DURATION_STRING_FIELD_NUMBER: builtins.int
        column: builtins.str
        nanos: builtins.int
        duration_string: builtins.str
        def __init__(
            self,
            *,
            column: builtins.str = ...,
            nanos: builtins.int = ...,
            duration_string: builtins.str = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["duration_string", b"duration_string", "nanos", b"nanos", "window", b"window"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["column", b"column", "duration_string", b"duration_string", "nanos", b"nanos", "window", b"window"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["window", b"window"]) -> typing.Literal["nanos", "duration_string"] | None: ...

    TICKS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    @property
    def ticks(self) -> global___UpdateByWindowScale.UpdateByWindowTicks: ...
    @property
    def time(self) -> global___UpdateByWindowScale.UpdateByWindowTime: ...
    def __init__(
        self,
        *,
        ticks: global___UpdateByWindowScale.UpdateByWindowTicks | None = ...,
        time: global___UpdateByWindowScale.UpdateByWindowTime | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ticks", b"ticks", "time", b"time", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ticks", b"ticks", "time", b"time", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["ticks", "time"] | None: ...

global___UpdateByWindowScale = UpdateByWindowScale

@typing.final
class UpdateByEmOptions(google.protobuf.message.Message):
    """Reusable options for the UpdateBy exponential moving operations."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ON_NULL_VALUE_FIELD_NUMBER: builtins.int
    ON_NAN_VALUE_FIELD_NUMBER: builtins.int
    ON_NULL_TIME_FIELD_NUMBER: builtins.int
    ON_NEGATIVE_DELTA_TIME_FIELD_NUMBER: builtins.int
    ON_ZERO_DELTA_TIME_FIELD_NUMBER: builtins.int
    BIG_VALUE_CONTEXT_FIELD_NUMBER: builtins.int
    on_null_value: global___BadDataBehavior.ValueType
    on_nan_value: global___BadDataBehavior.ValueType
    on_null_time: global___BadDataBehavior.ValueType
    on_negative_delta_time: global___BadDataBehavior.ValueType
    on_zero_delta_time: global___BadDataBehavior.ValueType
    @property
    def big_value_context(self) -> global___MathContext: ...
    def __init__(
        self,
        *,
        on_null_value: global___BadDataBehavior.ValueType = ...,
        on_nan_value: global___BadDataBehavior.ValueType = ...,
        on_null_time: global___BadDataBehavior.ValueType = ...,
        on_negative_delta_time: global___BadDataBehavior.ValueType = ...,
        on_zero_delta_time: global___BadDataBehavior.ValueType = ...,
        big_value_context: global___MathContext | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["big_value_context", b"big_value_context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["big_value_context", b"big_value_context", "on_nan_value", b"on_nan_value", "on_negative_delta_time", b"on_negative_delta_time", "on_null_time", b"on_null_time", "on_null_value", b"on_null_value", "on_zero_delta_time", b"on_zero_delta_time"]) -> None: ...

global___UpdateByEmOptions = UpdateByEmOptions

@typing.final
class UpdateByDeltaOptions(google.protobuf.message.Message):
    """Reusable options for the UpdateBy delta operation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NULL_BEHAVIOR_FIELD_NUMBER: builtins.int
    null_behavior: global___UpdateByNullBehavior.ValueType
    def __init__(
        self,
        *,
        null_behavior: global___UpdateByNullBehavior.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["null_behavior", b"null_behavior"]) -> None: ...

global___UpdateByDeltaOptions = UpdateByDeltaOptions

@typing.final
class UpdateByRequest(google.protobuf.message.Message):
    """Create a table with the same rowset as its parent that will perform the specified set of row
    based operations to it. As opposed to {@link #update(String...)} these operations are more restricted but are
    capable of processing state between rows. This operation will group the table by the specified set of keys if
    provided before applying the operation.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class UpdateByOptions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        USE_REDIRECTION_FIELD_NUMBER: builtins.int
        CHUNK_CAPACITY_FIELD_NUMBER: builtins.int
        MAX_STATIC_SPARSE_MEMORY_OVERHEAD_FIELD_NUMBER: builtins.int
        INITIAL_HASH_TABLE_SIZE_FIELD_NUMBER: builtins.int
        MAXIMUM_LOAD_FACTOR_FIELD_NUMBER: builtins.int
        TARGET_LOAD_FACTOR_FIELD_NUMBER: builtins.int
        MATH_CONTEXT_FIELD_NUMBER: builtins.int
        use_redirection: builtins.bool
        """If redirections should be used for output sources instead of sparse array sources.
        If unset, defaults to server-provided defaults.
        """
        chunk_capacity: builtins.int
        """The maximum chunk capacity.
        If unset, defaults to server-provided defaults.
        """
        max_static_sparse_memory_overhead: builtins.float
        """The maximum fractional memory overhead allowable for sparse redirections as a fraction (e.g. 1.1 is 10%
        overhead). Values less than zero disable overhead checking, and result in always using the sparse structure. A
        value of zero results in never using the sparse structure.
        If unset, defaults to server-provided defaults.
        """
        initial_hash_table_size: builtins.int
        """The initial hash table size.
        If unset, defaults to server-provided defaults.
        """
        maximum_load_factor: builtins.float
        """The maximum load factor for the hash table.
        If unset, defaults to server-provided defaults.
        """
        target_load_factor: builtins.float
        """The target load factor for the hash table.
        If unset, defaults to server-provided defaults.
        """
        @property
        def math_context(self) -> global___MathContext:
            """The math context."""

        def __init__(
            self,
            *,
            use_redirection: builtins.bool | None = ...,
            chunk_capacity: builtins.int | None = ...,
            max_static_sparse_memory_overhead: builtins.float | None = ...,
            initial_hash_table_size: builtins.int | None = ...,
            maximum_load_factor: builtins.float | None = ...,
            target_load_factor: builtins.float | None = ...,
            math_context: global___MathContext | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_chunk_capacity", b"_chunk_capacity", "_initial_hash_table_size", b"_initial_hash_table_size", "_max_static_sparse_memory_overhead", b"_max_static_sparse_memory_overhead", "_maximum_load_factor", b"_maximum_load_factor", "_target_load_factor", b"_target_load_factor", "_use_redirection", b"_use_redirection", "chunk_capacity", b"chunk_capacity", "initial_hash_table_size", b"initial_hash_table_size", "math_context", b"math_context", "max_static_sparse_memory_overhead", b"max_static_sparse_memory_overhead", "maximum_load_factor", b"maximum_load_factor", "target_load_factor", b"target_load_factor", "use_redirection", b"use_redirection"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_chunk_capacity", b"_chunk_capacity", "_initial_hash_table_size", b"_initial_hash_table_size", "_max_static_sparse_memory_overhead", b"_max_static_sparse_memory_overhead", "_maximum_load_factor", b"_maximum_load_factor", "_target_load_factor", b"_target_load_factor", "_use_redirection", b"_use_redirection", "chunk_capacity", b"chunk_capacity", "initial_hash_table_size", b"initial_hash_table_size", "math_context", b"math_context", "max_static_sparse_memory_overhead", b"max_static_sparse_memory_overhead", "maximum_load_factor", b"maximum_load_factor", "target_load_factor", b"target_load_factor", "use_redirection", b"use_redirection"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_chunk_capacity", b"_chunk_capacity"]) -> typing.Literal["chunk_capacity"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_initial_hash_table_size", b"_initial_hash_table_size"]) -> typing.Literal["initial_hash_table_size"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_max_static_sparse_memory_overhead", b"_max_static_sparse_memory_overhead"]) -> typing.Literal["max_static_sparse_memory_overhead"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_maximum_load_factor", b"_maximum_load_factor"]) -> typing.Literal["maximum_load_factor"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_target_load_factor", b"_target_load_factor"]) -> typing.Literal["target_load_factor"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_use_redirection", b"_use_redirection"]) -> typing.Literal["use_redirection"] | None: ...

    @typing.final
    class UpdateByOperation(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class UpdateByColumn(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            @typing.final
            class UpdateBySpec(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                @typing.final
                class UpdateByCumulativeSum(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    def __init__(
                        self,
                    ) -> None: ...

                @typing.final
                class UpdateByCumulativeMin(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    def __init__(
                        self,
                    ) -> None: ...

                @typing.final
                class UpdateByCumulativeMax(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    def __init__(
                        self,
                    ) -> None: ...

                @typing.final
                class UpdateByCumulativeProduct(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    def __init__(
                        self,
                    ) -> None: ...

                @typing.final
                class UpdateByFill(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    def __init__(
                        self,
                    ) -> None: ...

                @typing.final
                class UpdateByEma(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    OPTIONS_FIELD_NUMBER: builtins.int
                    WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def options(self) -> global___UpdateByEmOptions: ...
                    @property
                    def window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        options: global___UpdateByEmOptions | None = ...,
                        window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> None: ...

                @typing.final
                class UpdateByEms(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    OPTIONS_FIELD_NUMBER: builtins.int
                    WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def options(self) -> global___UpdateByEmOptions: ...
                    @property
                    def window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        options: global___UpdateByEmOptions | None = ...,
                        window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> None: ...

                @typing.final
                class UpdateByEmMin(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    OPTIONS_FIELD_NUMBER: builtins.int
                    WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def options(self) -> global___UpdateByEmOptions: ...
                    @property
                    def window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        options: global___UpdateByEmOptions | None = ...,
                        window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> None: ...

                @typing.final
                class UpdateByEmMax(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    OPTIONS_FIELD_NUMBER: builtins.int
                    WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def options(self) -> global___UpdateByEmOptions: ...
                    @property
                    def window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        options: global___UpdateByEmOptions | None = ...,
                        window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> None: ...

                @typing.final
                class UpdateByEmStd(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    OPTIONS_FIELD_NUMBER: builtins.int
                    WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def options(self) -> global___UpdateByEmOptions: ...
                    @property
                    def window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        options: global___UpdateByEmOptions | None = ...,
                        window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["options", b"options", "window_scale", b"window_scale"]) -> None: ...

                @typing.final
                class UpdateByDelta(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    OPTIONS_FIELD_NUMBER: builtins.int
                    @property
                    def options(self) -> global___UpdateByDeltaOptions: ...
                    def __init__(
                        self,
                        *,
                        options: global___UpdateByDeltaOptions | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["options", b"options"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["options", b"options"]) -> None: ...

                @typing.final
                class UpdateByRollingSum(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingGroup(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingAvg(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingMin(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingMax(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingProduct(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingCount(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingStd(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingWAvg(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    WEIGHT_COLUMN_FIELD_NUMBER: builtins.int
                    weight_column: builtins.str
                    """Column name for the source of input weights."""
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                        weight_column: builtins.str = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale", "weight_column", b"weight_column"]) -> None: ...

                @typing.final
                class UpdateByRollingFormula(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORMULA_FIELD_NUMBER: builtins.int
                    PARAM_TOKEN_FIELD_NUMBER: builtins.int
                    formula: builtins.str
                    param_token: builtins.str
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale: ...
                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale: ...
                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                        formula: builtins.str = ...,
                        param_token: builtins.str = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["formula", b"formula", "forward_window_scale", b"forward_window_scale", "param_token", b"param_token", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByRollingCountWhere(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    REVERSE_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    FORWARD_WINDOW_SCALE_FIELD_NUMBER: builtins.int
                    RESULT_COLUMN_FIELD_NUMBER: builtins.int
                    FILTERS_FIELD_NUMBER: builtins.int
                    result_column: builtins.str
                    """The output column name"""
                    @property
                    def reverse_window_scale(self) -> global___UpdateByWindowScale:
                        """The reverse window for the rolling operation, may be in ticks or time-based."""

                    @property
                    def forward_window_scale(self) -> global___UpdateByWindowScale:
                        """The forward window for the rolling operation, may be in ticks or time-based."""

                    @property
                    def filters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
                        """The filters tp apply before counting"""

                    def __init__(
                        self,
                        *,
                        reverse_window_scale: global___UpdateByWindowScale | None = ...,
                        forward_window_scale: global___UpdateByWindowScale | None = ...,
                        result_column: builtins.str = ...,
                        filters: collections.abc.Iterable[builtins.str] | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: typing.Literal["forward_window_scale", b"forward_window_scale", "reverse_window_scale", b"reverse_window_scale"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing.Literal["filters", b"filters", "forward_window_scale", b"forward_window_scale", "result_column", b"result_column", "reverse_window_scale", b"reverse_window_scale"]) -> None: ...

                @typing.final
                class UpdateByCumulativeCountWhere(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    RESULT_COLUMN_FIELD_NUMBER: builtins.int
                    FILTERS_FIELD_NUMBER: builtins.int
                    result_column: builtins.str
                    """The output column name"""
                    @property
                    def filters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
                        """The filters tp apply before counting"""

                    def __init__(
                        self,
                        *,
                        result_column: builtins.str = ...,
                        filters: collections.abc.Iterable[builtins.str] | None = ...,
                    ) -> None: ...
                    def ClearField(self, field_name: typing.Literal["filters", b"filters", "result_column", b"result_column"]) -> None: ...

                SUM_FIELD_NUMBER: builtins.int
                MIN_FIELD_NUMBER: builtins.int
                MAX_FIELD_NUMBER: builtins.int
                PRODUCT_FIELD_NUMBER: builtins.int
                FILL_FIELD_NUMBER: builtins.int
                EMA_FIELD_NUMBER: builtins.int
                ROLLING_SUM_FIELD_NUMBER: builtins.int
                ROLLING_GROUP_FIELD_NUMBER: builtins.int
                ROLLING_AVG_FIELD_NUMBER: builtins.int
                ROLLING_MIN_FIELD_NUMBER: builtins.int
                ROLLING_MAX_FIELD_NUMBER: builtins.int
                ROLLING_PRODUCT_FIELD_NUMBER: builtins.int
                DELTA_FIELD_NUMBER: builtins.int
                EMS_FIELD_NUMBER: builtins.int
                EM_MIN_FIELD_NUMBER: builtins.int
                EM_MAX_FIELD_NUMBER: builtins.int
                EM_STD_FIELD_NUMBER: builtins.int
                ROLLING_COUNT_FIELD_NUMBER: builtins.int
                ROLLING_STD_FIELD_NUMBER: builtins.int
                ROLLING_WAVG_FIELD_NUMBER: builtins.int
                ROLLING_FORMULA_FIELD_NUMBER: builtins.int
                ROLLING_COUNT_WHERE_FIELD_NUMBER: builtins.int
                COUNT_WHERE_FIELD_NUMBER: builtins.int
                @property
                def sum(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum: ...
                @property
                def min(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin: ...
                @property
                def max(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax: ...
                @property
                def product(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct: ...
                @property
                def fill(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill: ...
                @property
                def ema(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma: ...
                @property
                def rolling_sum(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum: ...
                @property
                def rolling_group(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup: ...
                @property
                def rolling_avg(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg: ...
                @property
                def rolling_min(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin: ...
                @property
                def rolling_max(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax: ...
                @property
                def rolling_product(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct: ...
                @property
                def delta(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta: ...
                @property
                def ems(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms: ...
                @property
                def em_min(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin: ...
                @property
                def em_max(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax: ...
                @property
                def em_std(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd: ...
                @property
                def rolling_count(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount: ...
                @property
                def rolling_std(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd: ...
                @property
                def rolling_wavg(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg: ...
                @property
                def rolling_formula(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula: ...
                @property
                def rolling_count_where(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere: ...
                @property
                def count_where(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere: ...
                def __init__(
                    self,
                    *,
                    sum: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum | None = ...,
                    min: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin | None = ...,
                    max: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax | None = ...,
                    product: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct | None = ...,
                    fill: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill | None = ...,
                    ema: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma | None = ...,
                    rolling_sum: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum | None = ...,
                    rolling_group: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup | None = ...,
                    rolling_avg: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg | None = ...,
                    rolling_min: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin | None = ...,
                    rolling_max: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax | None = ...,
                    rolling_product: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct | None = ...,
                    delta: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta | None = ...,
                    ems: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms | None = ...,
                    em_min: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin | None = ...,
                    em_max: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax | None = ...,
                    em_std: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd | None = ...,
                    rolling_count: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount | None = ...,
                    rolling_std: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd | None = ...,
                    rolling_wavg: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg | None = ...,
                    rolling_formula: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula | None = ...,
                    rolling_count_where: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere | None = ...,
                    count_where: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere | None = ...,
                ) -> None: ...
                def HasField(self, field_name: typing.Literal["count_where", b"count_where", "delta", b"delta", "em_max", b"em_max", "em_min", b"em_min", "em_std", b"em_std", "ema", b"ema", "ems", b"ems", "fill", b"fill", "max", b"max", "min", b"min", "product", b"product", "rolling_avg", b"rolling_avg", "rolling_count", b"rolling_count", "rolling_count_where", b"rolling_count_where", "rolling_formula", b"rolling_formula", "rolling_group", b"rolling_group", "rolling_max", b"rolling_max", "rolling_min", b"rolling_min", "rolling_product", b"rolling_product", "rolling_std", b"rolling_std", "rolling_sum", b"rolling_sum", "rolling_wavg", b"rolling_wavg", "sum", b"sum", "type", b"type"]) -> builtins.bool: ...
                def ClearField(self, field_name: typing.Literal["count_where", b"count_where", "delta", b"delta", "em_max", b"em_max", "em_min", b"em_min", "em_std", b"em_std", "ema", b"ema", "ems", b"ems", "fill", b"fill", "max", b"max", "min", b"min", "product", b"product", "rolling_avg", b"rolling_avg", "rolling_count", b"rolling_count", "rolling_count_where", b"rolling_count_where", "rolling_formula", b"rolling_formula", "rolling_group", b"rolling_group", "rolling_max", b"rolling_max", "rolling_min", b"rolling_min", "rolling_product", b"rolling_product", "rolling_std", b"rolling_std", "rolling_sum", b"rolling_sum", "rolling_wavg", b"rolling_wavg", "sum", b"sum", "type", b"type"]) -> None: ...
                def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["sum", "min", "max", "product", "fill", "ema", "rolling_sum", "rolling_group", "rolling_avg", "rolling_min", "rolling_max", "rolling_product", "delta", "ems", "em_min", "em_max", "em_std", "rolling_count", "rolling_std", "rolling_wavg", "rolling_formula", "rolling_count_where", "count_where"] | None: ...

            SPEC_FIELD_NUMBER: builtins.int
            MATCH_PAIRS_FIELD_NUMBER: builtins.int
            @property
            def spec(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec: ...
            @property
            def match_pairs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
            def __init__(
                self,
                *,
                spec: global___UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec | None = ...,
                match_pairs: collections.abc.Iterable[builtins.str] | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["spec", b"spec"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["match_pairs", b"match_pairs", "spec", b"spec"]) -> None: ...

        COLUMN_FIELD_NUMBER: builtins.int
        @property
        def column(self) -> global___UpdateByRequest.UpdateByOperation.UpdateByColumn: ...
        def __init__(
            self,
            *,
            column: global___UpdateByRequest.UpdateByOperation.UpdateByColumn | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["column", b"column", "type", b"type"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["column", b"column", "type", b"type"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["column"] | None: ...

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    OPTIONS_FIELD_NUMBER: builtins.int
    OPERATIONS_FIELD_NUMBER: builtins.int
    GROUP_BY_COLUMNS_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def options(self) -> global___UpdateByRequest.UpdateByOptions: ...
    @property
    def operations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UpdateByRequest.UpdateByOperation]: ...
    @property
    def group_by_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        options: global___UpdateByRequest.UpdateByOptions | None = ...,
        operations: collections.abc.Iterable[global___UpdateByRequest.UpdateByOperation] | None = ...,
        group_by_columns: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["options", b"options", "result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["group_by_columns", b"group_by_columns", "operations", b"operations", "options", b"options", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___UpdateByRequest = UpdateByRequest

@typing.final
class SelectDistinctRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    COLUMN_NAMES_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def column_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        column_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["column_names", b"column_names", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___SelectDistinctRequest = SelectDistinctRequest

@typing.final
class DropColumnsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    COLUMN_NAMES_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def column_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        column_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["column_names", b"column_names", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___DropColumnsRequest = DropColumnsRequest

@typing.final
class UnstructuredFilterTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        filters: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___UnstructuredFilterTableRequest = UnstructuredFilterTableRequest

@typing.final
class HeadOrTailRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    NUM_ROWS_FIELD_NUMBER: builtins.int
    num_rows: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        num_rows: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["num_rows", b"num_rows", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___HeadOrTailRequest = HeadOrTailRequest

@typing.final
class HeadOrTailByRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    NUM_ROWS_FIELD_NUMBER: builtins.int
    GROUP_BY_COLUMN_SPECS_FIELD_NUMBER: builtins.int
    num_rows: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def group_by_column_specs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        num_rows: builtins.int = ...,
        group_by_column_specs: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["group_by_column_specs", b"group_by_column_specs", "num_rows", b"num_rows", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___HeadOrTailByRequest = HeadOrTailByRequest

@typing.final
class UngroupRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    NULL_FILL_FIELD_NUMBER: builtins.int
    COLUMNS_TO_UNGROUP_FIELD_NUMBER: builtins.int
    null_fill: builtins.bool
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def columns_to_ungroup(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        null_fill: builtins.bool = ...,
        columns_to_ungroup: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns_to_ungroup", b"columns_to_ungroup", "null_fill", b"null_fill", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___UngroupRequest = UngroupRequest

@typing.final
class MergeTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_IDS_FIELD_NUMBER: builtins.int
    KEY_COLUMN_FIELD_NUMBER: builtins.int
    key_column: builtins.str
    """if specified, the result will be sorted by this column"""
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_ids(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TableReference]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_ids: collections.abc.Iterable[global___TableReference] | None = ...,
        key_column: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key_column", b"key_column", "result_id", b"result_id", "source_ids", b"source_ids"]) -> None: ...

global___MergeTablesRequest = MergeTablesRequest

@typing.final
class SnapshotTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___SnapshotTableRequest = SnapshotTableRequest

@typing.final
class SnapshotWhenTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    BASE_ID_FIELD_NUMBER: builtins.int
    TRIGGER_ID_FIELD_NUMBER: builtins.int
    INITIAL_FIELD_NUMBER: builtins.int
    INCREMENTAL_FIELD_NUMBER: builtins.int
    HISTORY_FIELD_NUMBER: builtins.int
    STAMP_COLUMNS_FIELD_NUMBER: builtins.int
    initial: builtins.bool
    """Whether the results should contain an initial snapshot."""
    incremental: builtins.bool
    """Whether the results should be incremental."""
    history: builtins.bool
    """Whether the results should keep history."""
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def base_id(self) -> global___TableReference:
        """The base table."""

    @property
    def trigger_id(self) -> global___TableReference:
        """The trigger table."""

    @property
    def stamp_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Which columns to stamp from the trigger table. If empty, all columns from the trigger table are stamped. Allows renaming columns."""

    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        base_id: global___TableReference | None = ...,
        trigger_id: global___TableReference | None = ...,
        initial: builtins.bool = ...,
        incremental: builtins.bool = ...,
        history: builtins.bool = ...,
        stamp_columns: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["base_id", b"base_id", "result_id", b"result_id", "trigger_id", b"trigger_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["base_id", b"base_id", "history", b"history", "incremental", b"incremental", "initial", b"initial", "result_id", b"result_id", "stamp_columns", b"stamp_columns", "trigger_id", b"trigger_id"]) -> None: ...

global___SnapshotWhenTableRequest = SnapshotWhenTableRequest

@typing.final
class CrossJoinTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    COLUMNS_TO_MATCH_FIELD_NUMBER: builtins.int
    COLUMNS_TO_ADD_FIELD_NUMBER: builtins.int
    RESERVE_BITS_FIELD_NUMBER: builtins.int
    reserve_bits: builtins.int
    """the number of bits of key-space to initially reserve per group; default is 10"""
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def columns_to_match(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def columns_to_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        columns_to_match: collections.abc.Iterable[builtins.str] | None = ...,
        columns_to_add: collections.abc.Iterable[builtins.str] | None = ...,
        reserve_bits: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns_to_add", b"columns_to_add", "columns_to_match", b"columns_to_match", "left_id", b"left_id", "reserve_bits", b"reserve_bits", "result_id", b"result_id", "right_id", b"right_id"]) -> None: ...

global___CrossJoinTablesRequest = CrossJoinTablesRequest

@typing.final
class NaturalJoinTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _JoinType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _JoinTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[NaturalJoinTablesRequest._JoinType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        JOIN_TYPE_NOT_SPECIFIED: NaturalJoinTablesRequest._JoinType.ValueType  # 0
        ERROR_ON_DUPLICATE: NaturalJoinTablesRequest._JoinType.ValueType  # 1
        """Throw an error if a duplicate right hand table row is found."""
        FIRST_MATCH: NaturalJoinTablesRequest._JoinType.ValueType  # 2
        """Match the first right hand table row and ignore later duplicates."""
        LAST_MATCH: NaturalJoinTablesRequest._JoinType.ValueType  # 3
        """Match the last right hand table row and ignore earlier duplicates."""
        EXACTLY_ONE_MATCH: NaturalJoinTablesRequest._JoinType.ValueType  # 4
        """Match exactly one right hand table row; throw an error if there are zero or more than one matches. Equivalent
        to an ExactJoinTablesRequest
        """

    class JoinType(_JoinType, metaclass=_JoinTypeEnumTypeWrapper): ...
    JOIN_TYPE_NOT_SPECIFIED: NaturalJoinTablesRequest.JoinType.ValueType  # 0
    ERROR_ON_DUPLICATE: NaturalJoinTablesRequest.JoinType.ValueType  # 1
    """Throw an error if a duplicate right hand table row is found."""
    FIRST_MATCH: NaturalJoinTablesRequest.JoinType.ValueType  # 2
    """Match the first right hand table row and ignore later duplicates."""
    LAST_MATCH: NaturalJoinTablesRequest.JoinType.ValueType  # 3
    """Match the last right hand table row and ignore earlier duplicates."""
    EXACTLY_ONE_MATCH: NaturalJoinTablesRequest.JoinType.ValueType  # 4
    """Match exactly one right hand table row; throw an error if there are zero or more than one matches. Equivalent
    to an ExactJoinTablesRequest
    """

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    COLUMNS_TO_MATCH_FIELD_NUMBER: builtins.int
    COLUMNS_TO_ADD_FIELD_NUMBER: builtins.int
    JOIN_TYPE_FIELD_NUMBER: builtins.int
    join_type: global___NaturalJoinTablesRequest.JoinType.ValueType
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def columns_to_match(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def columns_to_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        columns_to_match: collections.abc.Iterable[builtins.str] | None = ...,
        columns_to_add: collections.abc.Iterable[builtins.str] | None = ...,
        join_type: global___NaturalJoinTablesRequest.JoinType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns_to_add", b"columns_to_add", "columns_to_match", b"columns_to_match", "join_type", b"join_type", "left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> None: ...

global___NaturalJoinTablesRequest = NaturalJoinTablesRequest

@typing.final
class ExactJoinTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    COLUMNS_TO_MATCH_FIELD_NUMBER: builtins.int
    COLUMNS_TO_ADD_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def columns_to_match(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def columns_to_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        columns_to_match: collections.abc.Iterable[builtins.str] | None = ...,
        columns_to_add: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns_to_add", b"columns_to_add", "columns_to_match", b"columns_to_match", "left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> None: ...

global___ExactJoinTablesRequest = ExactJoinTablesRequest

@typing.final
class LeftJoinTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    COLUMNS_TO_MATCH_FIELD_NUMBER: builtins.int
    COLUMNS_TO_ADD_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def columns_to_match(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def columns_to_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        columns_to_match: collections.abc.Iterable[builtins.str] | None = ...,
        columns_to_add: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns_to_add", b"columns_to_add", "columns_to_match", b"columns_to_match", "left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> None: ...

global___LeftJoinTablesRequest = LeftJoinTablesRequest

@typing.final
class AsOfJoinTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _MatchRule:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _MatchRuleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[AsOfJoinTablesRequest._MatchRule.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        LESS_THAN_EQUAL: AsOfJoinTablesRequest._MatchRule.ValueType  # 0
        LESS_THAN: AsOfJoinTablesRequest._MatchRule.ValueType  # 1
        GREATER_THAN_EQUAL: AsOfJoinTablesRequest._MatchRule.ValueType  # 2
        GREATER_THAN: AsOfJoinTablesRequest._MatchRule.ValueType  # 3

    class MatchRule(_MatchRule, metaclass=_MatchRuleEnumTypeWrapper): ...
    LESS_THAN_EQUAL: AsOfJoinTablesRequest.MatchRule.ValueType  # 0
    LESS_THAN: AsOfJoinTablesRequest.MatchRule.ValueType  # 1
    GREATER_THAN_EQUAL: AsOfJoinTablesRequest.MatchRule.ValueType  # 2
    GREATER_THAN: AsOfJoinTablesRequest.MatchRule.ValueType  # 3

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    COLUMNS_TO_MATCH_FIELD_NUMBER: builtins.int
    COLUMNS_TO_ADD_FIELD_NUMBER: builtins.int
    AS_OF_MATCH_RULE_FIELD_NUMBER: builtins.int
    as_of_match_rule: global___AsOfJoinTablesRequest.MatchRule.ValueType
    """Direction to search to find a match. LESS_THAN_EQUAL and LESS_THAN will be used to make a
    Table.aj() call, and GREATER_THAN_EQUAL and GREATER_THAN will be used to make a Table.raj() call.
    """
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def columns_to_match(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def columns_to_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        columns_to_match: collections.abc.Iterable[builtins.str] | None = ...,
        columns_to_add: collections.abc.Iterable[builtins.str] | None = ...,
        as_of_match_rule: global___AsOfJoinTablesRequest.MatchRule.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["as_of_match_rule", b"as_of_match_rule", "columns_to_add", b"columns_to_add", "columns_to_match", b"columns_to_match", "left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> None: ...

global___AsOfJoinTablesRequest = AsOfJoinTablesRequest

@typing.final
class AjRajTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    EXACT_MATCH_COLUMNS_FIELD_NUMBER: builtins.int
    AS_OF_COLUMN_FIELD_NUMBER: builtins.int
    COLUMNS_TO_ADD_FIELD_NUMBER: builtins.int
    as_of_column: builtins.str
    """This is a comparison expression for the inexact as-of join match. In the case of an as-of join (aj), the comparison
    operator can be either ">=" or ">"; for example, "Foo>=Bar" or "Foo>Bar". In the case of a reverse-as-of join (raj),
    the comparison operator can be either "<=" or "<"; for example, "Foo<=Bar" or "Foo<Bar". In the case where the
    column name exists in both tables, the single column name can be used and it will inherit the default comparison
    operator: in the aj case, "Foo" is equivalent to "Foo>=Foo"; in the raj case, "Foo" is equivalent to "Foo<=Foo".
    """
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def exact_match_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def columns_to_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        exact_match_columns: collections.abc.Iterable[builtins.str] | None = ...,
        as_of_column: builtins.str = ...,
        columns_to_add: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["as_of_column", b"as_of_column", "columns_to_add", b"columns_to_add", "exact_match_columns", b"exact_match_columns", "left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> None: ...

global___AjRajTablesRequest = AjRajTablesRequest

@typing.final
class MultiJoinInput(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_ID_FIELD_NUMBER: builtins.int
    COLUMNS_TO_MATCH_FIELD_NUMBER: builtins.int
    COLUMNS_TO_ADD_FIELD_NUMBER: builtins.int
    @property
    def source_id(self) -> global___TableReference:
        """The source table to include in the multi-join output table."""

    @property
    def columns_to_match(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The key columns to match; may be renamed to match other source table key columns."""

    @property
    def columns_to_add(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The columns from the source table to include; if not provided, all columns are included."""

    def __init__(
        self,
        *,
        source_id: global___TableReference | None = ...,
        columns_to_match: collections.abc.Iterable[builtins.str] | None = ...,
        columns_to_add: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns_to_add", b"columns_to_add", "columns_to_match", b"columns_to_match", "source_id", b"source_id"]) -> None: ...

global___MultiJoinInput = MultiJoinInput

@typing.final
class MultiJoinTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    MULTI_JOIN_INPUTS_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def multi_join_inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MultiJoinInput]:
        """The source table input specifications. One or more must be provided."""

    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        multi_join_inputs: collections.abc.Iterable[global___MultiJoinInput] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["multi_join_inputs", b"multi_join_inputs", "result_id", b"result_id"]) -> None: ...

global___MultiJoinTablesRequest = MultiJoinTablesRequest

@typing.final
class RangeJoinTablesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _RangeStartRule:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _RangeStartRuleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RangeJoinTablesRequest._RangeStartRule.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        START_UNSPECIFIED: RangeJoinTablesRequest._RangeStartRule.ValueType  # 0
        LESS_THAN: RangeJoinTablesRequest._RangeStartRule.ValueType  # 1
        LESS_THAN_OR_EQUAL: RangeJoinTablesRequest._RangeStartRule.ValueType  # 2
        LESS_THAN_OR_EQUAL_ALLOW_PRECEDING: RangeJoinTablesRequest._RangeStartRule.ValueType  # 3

    class RangeStartRule(_RangeStartRule, metaclass=_RangeStartRuleEnumTypeWrapper): ...
    START_UNSPECIFIED: RangeJoinTablesRequest.RangeStartRule.ValueType  # 0
    LESS_THAN: RangeJoinTablesRequest.RangeStartRule.ValueType  # 1
    LESS_THAN_OR_EQUAL: RangeJoinTablesRequest.RangeStartRule.ValueType  # 2
    LESS_THAN_OR_EQUAL_ALLOW_PRECEDING: RangeJoinTablesRequest.RangeStartRule.ValueType  # 3

    class _RangeEndRule:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _RangeEndRuleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RangeJoinTablesRequest._RangeEndRule.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        END_UNSPECIFIED: RangeJoinTablesRequest._RangeEndRule.ValueType  # 0
        GREATER_THAN: RangeJoinTablesRequest._RangeEndRule.ValueType  # 1
        GREATER_THAN_OR_EQUAL: RangeJoinTablesRequest._RangeEndRule.ValueType  # 2
        GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING: RangeJoinTablesRequest._RangeEndRule.ValueType  # 3

    class RangeEndRule(_RangeEndRule, metaclass=_RangeEndRuleEnumTypeWrapper): ...
    END_UNSPECIFIED: RangeJoinTablesRequest.RangeEndRule.ValueType  # 0
    GREATER_THAN: RangeJoinTablesRequest.RangeEndRule.ValueType  # 1
    GREATER_THAN_OR_EQUAL: RangeJoinTablesRequest.RangeEndRule.ValueType  # 2
    GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING: RangeJoinTablesRequest.RangeEndRule.ValueType  # 3

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    EXACT_MATCH_COLUMNS_FIELD_NUMBER: builtins.int
    LEFT_START_COLUMN_FIELD_NUMBER: builtins.int
    RANGE_START_RULE_FIELD_NUMBER: builtins.int
    RIGHT_RANGE_COLUMN_FIELD_NUMBER: builtins.int
    RANGE_END_RULE_FIELD_NUMBER: builtins.int
    LEFT_END_COLUMN_FIELD_NUMBER: builtins.int
    AGGREGATIONS_FIELD_NUMBER: builtins.int
    RANGE_MATCH_FIELD_NUMBER: builtins.int
    left_start_column: builtins.str
    """Provide detailed range match parameters for the range join (alternative to providing `range_match`)"""
    range_start_rule: global___RangeJoinTablesRequest.RangeStartRule.ValueType
    right_range_column: builtins.str
    range_end_rule: global___RangeJoinTablesRequest.RangeEndRule.ValueType
    left_end_column: builtins.str
    range_match: builtins.str
    """Specifies the range match parameters as a parseable string. Providing `range_match` in the GRPC call is the
    alternative to detailed range match parameters provided in the `left_start_column`, `range_start_rule`,
    `right_range_column`, `range_end_rule`, and `left_end_column` fields.
    """
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def exact_match_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def aggregations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Aggregation]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        exact_match_columns: collections.abc.Iterable[builtins.str] | None = ...,
        left_start_column: builtins.str = ...,
        range_start_rule: global___RangeJoinTablesRequest.RangeStartRule.ValueType = ...,
        right_range_column: builtins.str = ...,
        range_end_rule: global___RangeJoinTablesRequest.RangeEndRule.ValueType = ...,
        left_end_column: builtins.str = ...,
        aggregations: collections.abc.Iterable[global___Aggregation] | None = ...,
        range_match: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aggregations", b"aggregations", "exact_match_columns", b"exact_match_columns", "left_end_column", b"left_end_column", "left_id", b"left_id", "left_start_column", b"left_start_column", "range_end_rule", b"range_end_rule", "range_match", b"range_match", "range_start_rule", b"range_start_rule", "result_id", b"result_id", "right_id", b"right_id", "right_range_column", b"right_range_column"]) -> None: ...

global___RangeJoinTablesRequest = RangeJoinTablesRequest

@typing.final
class ComboAggregateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _AggType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _AggTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ComboAggregateRequest._AggType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        SUM: ComboAggregateRequest._AggType.ValueType  # 0
        ABS_SUM: ComboAggregateRequest._AggType.ValueType  # 1
        GROUP: ComboAggregateRequest._AggType.ValueType  # 2
        AVG: ComboAggregateRequest._AggType.ValueType  # 3
        COUNT: ComboAggregateRequest._AggType.ValueType  # 4
        FIRST: ComboAggregateRequest._AggType.ValueType  # 5
        LAST: ComboAggregateRequest._AggType.ValueType  # 6
        MIN: ComboAggregateRequest._AggType.ValueType  # 7
        MAX: ComboAggregateRequest._AggType.ValueType  # 8
        MEDIAN: ComboAggregateRequest._AggType.ValueType  # 9
        PERCENTILE: ComboAggregateRequest._AggType.ValueType  # 10
        STD: ComboAggregateRequest._AggType.ValueType  # 11
        VAR: ComboAggregateRequest._AggType.ValueType  # 12
        WEIGHTED_AVG: ComboAggregateRequest._AggType.ValueType  # 13

    class AggType(_AggType, metaclass=_AggTypeEnumTypeWrapper): ...
    SUM: ComboAggregateRequest.AggType.ValueType  # 0
    ABS_SUM: ComboAggregateRequest.AggType.ValueType  # 1
    GROUP: ComboAggregateRequest.AggType.ValueType  # 2
    AVG: ComboAggregateRequest.AggType.ValueType  # 3
    COUNT: ComboAggregateRequest.AggType.ValueType  # 4
    FIRST: ComboAggregateRequest.AggType.ValueType  # 5
    LAST: ComboAggregateRequest.AggType.ValueType  # 6
    MIN: ComboAggregateRequest.AggType.ValueType  # 7
    MAX: ComboAggregateRequest.AggType.ValueType  # 8
    MEDIAN: ComboAggregateRequest.AggType.ValueType  # 9
    PERCENTILE: ComboAggregateRequest.AggType.ValueType  # 10
    STD: ComboAggregateRequest.AggType.ValueType  # 11
    VAR: ComboAggregateRequest.AggType.ValueType  # 12
    WEIGHTED_AVG: ComboAggregateRequest.AggType.ValueType  # 13

    @typing.final
    class Aggregate(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TYPE_FIELD_NUMBER: builtins.int
        MATCH_PAIRS_FIELD_NUMBER: builtins.int
        COLUMN_NAME_FIELD_NUMBER: builtins.int
        PERCENTILE_FIELD_NUMBER: builtins.int
        AVG_MEDIAN_FIELD_NUMBER: builtins.int
        type: global___ComboAggregateRequest.AggType.ValueType
        column_name: builtins.str
        """countBy result (output) column OR weighted avg weight (input) column, otherwise unused"""
        percentile: builtins.float
        """required by percentileBy aggregates, otherwise unused"""
        avg_median: builtins.bool
        """used in percentileBy only"""
        @property
        def match_pairs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """used in all aggregates except countBy"""

        def __init__(
            self,
            *,
            type: global___ComboAggregateRequest.AggType.ValueType = ...,
            match_pairs: collections.abc.Iterable[builtins.str] | None = ...,
            column_name: builtins.str = ...,
            percentile: builtins.float = ...,
            avg_median: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["avg_median", b"avg_median", "column_name", b"column_name", "match_pairs", b"match_pairs", "percentile", b"percentile", "type", b"type"]) -> None: ...

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    AGGREGATES_FIELD_NUMBER: builtins.int
    GROUP_BY_COLUMNS_FIELD_NUMBER: builtins.int
    FORCE_COMBO_FIELD_NUMBER: builtins.int
    force_combo: builtins.bool
    """don't use direct single-aggregate table operations even if there is only a single aggregate"""
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def aggregates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ComboAggregateRequest.Aggregate]: ...
    @property
    def group_by_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        aggregates: collections.abc.Iterable[global___ComboAggregateRequest.Aggregate] | None = ...,
        group_by_columns: collections.abc.Iterable[builtins.str] | None = ...,
        force_combo: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aggregates", b"aggregates", "force_combo", b"force_combo", "group_by_columns", b"group_by_columns", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___ComboAggregateRequest = ComboAggregateRequest

@typing.final
class AggregateAllRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    GROUP_BY_COLUMNS_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def spec(self) -> global___AggSpec: ...
    @property
    def group_by_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        spec: global___AggSpec | None = ...,
        group_by_columns: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id", "spec", b"spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["group_by_columns", b"group_by_columns", "result_id", b"result_id", "source_id", b"source_id", "spec", b"spec"]) -> None: ...

global___AggregateAllRequest = AggregateAllRequest

@typing.final
class AggSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class AggSpecApproximatePercentile(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PERCENTILE_FIELD_NUMBER: builtins.int
        COMPRESSION_FIELD_NUMBER: builtins.int
        percentile: builtins.float
        """Percentile. Must be in range [0.0, 1.0]."""
        compression: builtins.float
        """T-Digest compression factor. Must be greater than or equal to 1. 1000 is extremely large.
        When not specified, the server will choose a compression value.
        """
        def __init__(
            self,
            *,
            percentile: builtins.float = ...,
            compression: builtins.float | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_compression", b"_compression", "compression", b"compression"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_compression", b"_compression", "compression", b"compression", "percentile", b"percentile"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["_compression", b"_compression"]) -> typing.Literal["compression"] | None: ...

    @typing.final
    class AggSpecCountDistinct(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COUNT_NULLS_FIELD_NUMBER: builtins.int
        count_nulls: builtins.bool
        """Whether null input values should be included when counting the distinct input values."""
        def __init__(
            self,
            *,
            count_nulls: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["count_nulls", b"count_nulls"]) -> None: ...

    @typing.final
    class AggSpecDistinct(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        INCLUDE_NULLS_FIELD_NUMBER: builtins.int
        include_nulls: builtins.bool
        """Whether null input values should be included in the distinct output values."""
        def __init__(
            self,
            *,
            include_nulls: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["include_nulls", b"include_nulls"]) -> None: ...

    @typing.final
    class AggSpecFormula(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        FORMULA_FIELD_NUMBER: builtins.int
        PARAM_TOKEN_FIELD_NUMBER: builtins.int
        formula: builtins.str
        """The formula to use to calculate output values from grouped input values."""
        param_token: builtins.str
        """The formula parameter token to be replaced with the input column name for evaluation."""
        def __init__(
            self,
            *,
            formula: builtins.str = ...,
            param_token: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["formula", b"formula", "param_token", b"param_token"]) -> None: ...

    @typing.final
    class AggSpecMedian(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        AVERAGE_EVENLY_DIVIDED_FIELD_NUMBER: builtins.int
        average_evenly_divided: builtins.bool
        """Whether to average the highest low-bucket value and lowest high-bucket value, when the low-bucket and high-bucket
        are of equal size. Only applies to numeric types.
        """
        def __init__(
            self,
            *,
            average_evenly_divided: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["average_evenly_divided", b"average_evenly_divided"]) -> None: ...

    @typing.final
    class AggSpecPercentile(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PERCENTILE_FIELD_NUMBER: builtins.int
        AVERAGE_EVENLY_DIVIDED_FIELD_NUMBER: builtins.int
        percentile: builtins.float
        """The percentile to calculate. Must be in the range [0.0, 1.0]."""
        average_evenly_divided: builtins.bool
        """Whether to average the highest low-bucket value and lowest high-bucket value, when the low-bucket and high-bucket
        are of equal size. Only applies to numeric types.
        """
        def __init__(
            self,
            *,
            percentile: builtins.float = ...,
            average_evenly_divided: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["average_evenly_divided", b"average_evenly_divided", "percentile", b"percentile"]) -> None: ...

    @typing.final
    class AggSpecSorted(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COLUMNS_FIELD_NUMBER: builtins.int
        @property
        def columns(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AggSpec.AggSpecSortedColumn]:
            """Using a message instead of string to support backwards-compatibility in the future"""

        def __init__(
            self,
            *,
            columns: collections.abc.Iterable[global___AggSpec.AggSpecSortedColumn] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["columns", b"columns"]) -> None: ...

    @typing.final
    class AggSpecSortedColumn(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COLUMN_NAME_FIELD_NUMBER: builtins.int
        column_name: builtins.str
        """TODO(deephaven-core#821): SortedFirst / SortedLast aggregations with sort direction"""
        def __init__(
            self,
            *,
            column_name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["column_name", b"column_name"]) -> None: ...

    @typing.final
    class AggSpecTDigest(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COMPRESSION_FIELD_NUMBER: builtins.int
        compression: builtins.float
        """T-Digest compression factor. Must be greater than or equal to 1. 1000 is extremely large.
        When not specified, the server will choose a compression value.
        """
        def __init__(
            self,
            *,
            compression: builtins.float | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_compression", b"_compression", "compression", b"compression"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_compression", b"_compression", "compression", b"compression"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["_compression", b"_compression"]) -> typing.Literal["compression"] | None: ...

    @typing.final
    class AggSpecUnique(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        INCLUDE_NULLS_FIELD_NUMBER: builtins.int
        NON_UNIQUE_SENTINEL_FIELD_NUMBER: builtins.int
        include_nulls: builtins.bool
        """Whether to include null values as a distinct value for determining if there is only one unique value to output"""
        @property
        def non_unique_sentinel(self) -> global___AggSpec.AggSpecNonUniqueSentinel:
            """The output value to use for groups that don't have a single unique input value"""

        def __init__(
            self,
            *,
            include_nulls: builtins.bool = ...,
            non_unique_sentinel: global___AggSpec.AggSpecNonUniqueSentinel | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["non_unique_sentinel", b"non_unique_sentinel"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["include_nulls", b"include_nulls", "non_unique_sentinel", b"non_unique_sentinel"]) -> None: ...

    @typing.final
    class AggSpecNonUniqueSentinel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NULL_VALUE_FIELD_NUMBER: builtins.int
        STRING_VALUE_FIELD_NUMBER: builtins.int
        INT_VALUE_FIELD_NUMBER: builtins.int
        LONG_VALUE_FIELD_NUMBER: builtins.int
        FLOAT_VALUE_FIELD_NUMBER: builtins.int
        DOUBLE_VALUE_FIELD_NUMBER: builtins.int
        BOOL_VALUE_FIELD_NUMBER: builtins.int
        BYTE_VALUE_FIELD_NUMBER: builtins.int
        SHORT_VALUE_FIELD_NUMBER: builtins.int
        CHAR_VALUE_FIELD_NUMBER: builtins.int
        null_value: global___NullValue.ValueType
        string_value: builtins.str
        int_value: builtins.int
        long_value: builtins.int
        float_value: builtins.float
        double_value: builtins.float
        bool_value: builtins.bool
        byte_value: builtins.int
        """Expected to be in range [Byte.MIN_VALUE, Byte.MAX_VALUE]"""
        short_value: builtins.int
        """Expected to be in range [Short.MIN_VALUE, Short.MAX_VALUE]"""
        char_value: builtins.int
        """Expected to be in range [0x0000, 0xFFFF]
        TODO(deephaven-core#3212): Expand AggSpecNonUniqueSentinel types
        """
        def __init__(
            self,
            *,
            null_value: global___NullValue.ValueType = ...,
            string_value: builtins.str = ...,
            int_value: builtins.int = ...,
            long_value: builtins.int = ...,
            float_value: builtins.float = ...,
            double_value: builtins.float = ...,
            bool_value: builtins.bool = ...,
            byte_value: builtins.int = ...,
            short_value: builtins.int = ...,
            char_value: builtins.int = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["bool_value", b"bool_value", "byte_value", b"byte_value", "char_value", b"char_value", "double_value", b"double_value", "float_value", b"float_value", "int_value", b"int_value", "long_value", b"long_value", "null_value", b"null_value", "short_value", b"short_value", "string_value", b"string_value", "type", b"type"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["bool_value", b"bool_value", "byte_value", b"byte_value", "char_value", b"char_value", "double_value", b"double_value", "float_value", b"float_value", "int_value", b"int_value", "long_value", b"long_value", "null_value", b"null_value", "short_value", b"short_value", "string_value", b"string_value", "type", b"type"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["null_value", "string_value", "int_value", "long_value", "float_value", "double_value", "bool_value", "byte_value", "short_value", "char_value"] | None: ...

    @typing.final
    class AggSpecWeighted(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        WEIGHT_COLUMN_FIELD_NUMBER: builtins.int
        weight_column: builtins.str
        """Column name for the source of input weights."""
        def __init__(
            self,
            *,
            weight_column: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["weight_column", b"weight_column"]) -> None: ...

    @typing.final
    class AggSpecAbsSum(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecAvg(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecFirst(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecFreeze(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecGroup(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecLast(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecMax(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecMin(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecStd(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecSum(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    @typing.final
    class AggSpecVar(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    ABS_SUM_FIELD_NUMBER: builtins.int
    APPROXIMATE_PERCENTILE_FIELD_NUMBER: builtins.int
    AVG_FIELD_NUMBER: builtins.int
    COUNT_DISTINCT_FIELD_NUMBER: builtins.int
    DISTINCT_FIELD_NUMBER: builtins.int
    FIRST_FIELD_NUMBER: builtins.int
    FORMULA_FIELD_NUMBER: builtins.int
    FREEZE_FIELD_NUMBER: builtins.int
    GROUP_FIELD_NUMBER: builtins.int
    LAST_FIELD_NUMBER: builtins.int
    MAX_FIELD_NUMBER: builtins.int
    MEDIAN_FIELD_NUMBER: builtins.int
    MIN_FIELD_NUMBER: builtins.int
    PERCENTILE_FIELD_NUMBER: builtins.int
    SORTED_FIRST_FIELD_NUMBER: builtins.int
    SORTED_LAST_FIELD_NUMBER: builtins.int
    STD_FIELD_NUMBER: builtins.int
    SUM_FIELD_NUMBER: builtins.int
    T_DIGEST_FIELD_NUMBER: builtins.int
    UNIQUE_FIELD_NUMBER: builtins.int
    WEIGHTED_AVG_FIELD_NUMBER: builtins.int
    WEIGHTED_SUM_FIELD_NUMBER: builtins.int
    VAR_FIELD_NUMBER: builtins.int
    @property
    def abs_sum(self) -> global___AggSpec.AggSpecAbsSum: ...
    @property
    def approximate_percentile(self) -> global___AggSpec.AggSpecApproximatePercentile: ...
    @property
    def avg(self) -> global___AggSpec.AggSpecAvg: ...
    @property
    def count_distinct(self) -> global___AggSpec.AggSpecCountDistinct: ...
    @property
    def distinct(self) -> global___AggSpec.AggSpecDistinct: ...
    @property
    def first(self) -> global___AggSpec.AggSpecFirst: ...
    @property
    def formula(self) -> global___AggSpec.AggSpecFormula: ...
    @property
    def freeze(self) -> global___AggSpec.AggSpecFreeze: ...
    @property
    def group(self) -> global___AggSpec.AggSpecGroup: ...
    @property
    def last(self) -> global___AggSpec.AggSpecLast: ...
    @property
    def max(self) -> global___AggSpec.AggSpecMax: ...
    @property
    def median(self) -> global___AggSpec.AggSpecMedian: ...
    @property
    def min(self) -> global___AggSpec.AggSpecMin: ...
    @property
    def percentile(self) -> global___AggSpec.AggSpecPercentile: ...
    @property
    def sorted_first(self) -> global___AggSpec.AggSpecSorted: ...
    @property
    def sorted_last(self) -> global___AggSpec.AggSpecSorted: ...
    @property
    def std(self) -> global___AggSpec.AggSpecStd: ...
    @property
    def sum(self) -> global___AggSpec.AggSpecSum: ...
    @property
    def t_digest(self) -> global___AggSpec.AggSpecTDigest: ...
    @property
    def unique(self) -> global___AggSpec.AggSpecUnique: ...
    @property
    def weighted_avg(self) -> global___AggSpec.AggSpecWeighted: ...
    @property
    def weighted_sum(self) -> global___AggSpec.AggSpecWeighted: ...
    @property
    def var(self) -> global___AggSpec.AggSpecVar: ...
    def __init__(
        self,
        *,
        abs_sum: global___AggSpec.AggSpecAbsSum | None = ...,
        approximate_percentile: global___AggSpec.AggSpecApproximatePercentile | None = ...,
        avg: global___AggSpec.AggSpecAvg | None = ...,
        count_distinct: global___AggSpec.AggSpecCountDistinct | None = ...,
        distinct: global___AggSpec.AggSpecDistinct | None = ...,
        first: global___AggSpec.AggSpecFirst | None = ...,
        formula: global___AggSpec.AggSpecFormula | None = ...,
        freeze: global___AggSpec.AggSpecFreeze | None = ...,
        group: global___AggSpec.AggSpecGroup | None = ...,
        last: global___AggSpec.AggSpecLast | None = ...,
        max: global___AggSpec.AggSpecMax | None = ...,
        median: global___AggSpec.AggSpecMedian | None = ...,
        min: global___AggSpec.AggSpecMin | None = ...,
        percentile: global___AggSpec.AggSpecPercentile | None = ...,
        sorted_first: global___AggSpec.AggSpecSorted | None = ...,
        sorted_last: global___AggSpec.AggSpecSorted | None = ...,
        std: global___AggSpec.AggSpecStd | None = ...,
        sum: global___AggSpec.AggSpecSum | None = ...,
        t_digest: global___AggSpec.AggSpecTDigest | None = ...,
        unique: global___AggSpec.AggSpecUnique | None = ...,
        weighted_avg: global___AggSpec.AggSpecWeighted | None = ...,
        weighted_sum: global___AggSpec.AggSpecWeighted | None = ...,
        var: global___AggSpec.AggSpecVar | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["abs_sum", b"abs_sum", "approximate_percentile", b"approximate_percentile", "avg", b"avg", "count_distinct", b"count_distinct", "distinct", b"distinct", "first", b"first", "formula", b"formula", "freeze", b"freeze", "group", b"group", "last", b"last", "max", b"max", "median", b"median", "min", b"min", "percentile", b"percentile", "sorted_first", b"sorted_first", "sorted_last", b"sorted_last", "std", b"std", "sum", b"sum", "t_digest", b"t_digest", "type", b"type", "unique", b"unique", "var", b"var", "weighted_avg", b"weighted_avg", "weighted_sum", b"weighted_sum"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["abs_sum", b"abs_sum", "approximate_percentile", b"approximate_percentile", "avg", b"avg", "count_distinct", b"count_distinct", "distinct", b"distinct", "first", b"first", "formula", b"formula", "freeze", b"freeze", "group", b"group", "last", b"last", "max", b"max", "median", b"median", "min", b"min", "percentile", b"percentile", "sorted_first", b"sorted_first", "sorted_last", b"sorted_last", "std", b"std", "sum", b"sum", "t_digest", b"t_digest", "type", b"type", "unique", b"unique", "var", b"var", "weighted_avg", b"weighted_avg", "weighted_sum", b"weighted_sum"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["abs_sum", "approximate_percentile", "avg", "count_distinct", "distinct", "first", "formula", "freeze", "group", "last", "max", "median", "min", "percentile", "sorted_first", "sorted_last", "std", "sum", "t_digest", "unique", "weighted_avg", "weighted_sum", "var"] | None: ...

global___AggSpec = AggSpec

@typing.final
class AggregateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    INITIAL_GROUPS_ID_FIELD_NUMBER: builtins.int
    PRESERVE_EMPTY_FIELD_NUMBER: builtins.int
    AGGREGATIONS_FIELD_NUMBER: builtins.int
    GROUP_BY_COLUMNS_FIELD_NUMBER: builtins.int
    preserve_empty: builtins.bool
    """Whether to keep result rows for groups that are initially empty or become empty as a result
    of updates. Each aggregation operator defines its own value for empty groups.
    """
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def initial_groups_id(self) -> global___TableReference:
        """A table whose distinct combinations of values for the group_by_columns should be used
        to create an initial set of aggregation groups. All other columns are ignored. This is useful in
        combination with preserve_empty == true to ensure that particular groups appear in the result
        table, or with preserve_empty == false to control the encounter order for a collection of groups
        and thus their relative order in the result. Changes to initial_group_ids are not expected or handled;
        if initial_groups_id is a refreshing table, only its contents at instantiation time will be used. If
        initial_groups_id is not present, the result will be the same as if a table with no rows was supplied.
        """

    @property
    def aggregations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Aggregation]: ...
    @property
    def group_by_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        initial_groups_id: global___TableReference | None = ...,
        preserve_empty: builtins.bool = ...,
        aggregations: collections.abc.Iterable[global___Aggregation] | None = ...,
        group_by_columns: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["initial_groups_id", b"initial_groups_id", "result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aggregations", b"aggregations", "group_by_columns", b"group_by_columns", "initial_groups_id", b"initial_groups_id", "preserve_empty", b"preserve_empty", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___AggregateRequest = AggregateRequest

@typing.final
class Aggregation(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class AggregationColumns(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SPEC_FIELD_NUMBER: builtins.int
        MATCH_PAIRS_FIELD_NUMBER: builtins.int
        @property
        def spec(self) -> global___AggSpec: ...
        @property
        def match_pairs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        def __init__(
            self,
            *,
            spec: global___AggSpec | None = ...,
            match_pairs: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["spec", b"spec"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["match_pairs", b"match_pairs", "spec", b"spec"]) -> None: ...

    @typing.final
    class AggregationCount(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COLUMN_NAME_FIELD_NUMBER: builtins.int
        column_name: builtins.str
        """The output column name"""
        def __init__(
            self,
            *,
            column_name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["column_name", b"column_name"]) -> None: ...

    @typing.final
    class AggregationCountWhere(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COLUMN_NAME_FIELD_NUMBER: builtins.int
        FILTERS_FIELD_NUMBER: builtins.int
        column_name: builtins.str
        """The output column name"""
        @property
        def filters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        def __init__(
            self,
            *,
            column_name: builtins.str = ...,
            filters: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["column_name", b"column_name", "filters", b"filters"]) -> None: ...

    @typing.final
    class AggregationRowKey(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COLUMN_NAME_FIELD_NUMBER: builtins.int
        column_name: builtins.str
        def __init__(
            self,
            *,
            column_name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["column_name", b"column_name"]) -> None: ...

    @typing.final
    class AggregationPartition(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        COLUMN_NAME_FIELD_NUMBER: builtins.int
        INCLUDE_GROUP_BY_COLUMNS_FIELD_NUMBER: builtins.int
        column_name: builtins.str
        include_group_by_columns: builtins.bool
        def __init__(
            self,
            *,
            column_name: builtins.str = ...,
            include_group_by_columns: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["column_name", b"column_name", "include_group_by_columns", b"include_group_by_columns"]) -> None: ...

    @typing.final
    class AggregationFormula(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SELECTABLE_FIELD_NUMBER: builtins.int
        @property
        def selectable(self) -> global___Selectable: ...
        def __init__(
            self,
            *,
            selectable: global___Selectable | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["selectable", b"selectable"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["selectable", b"selectable"]) -> None: ...

    COLUMNS_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    FIRST_ROW_KEY_FIELD_NUMBER: builtins.int
    LAST_ROW_KEY_FIELD_NUMBER: builtins.int
    PARTITION_FIELD_NUMBER: builtins.int
    FORMULA_FIELD_NUMBER: builtins.int
    COUNT_WHERE_FIELD_NUMBER: builtins.int
    @property
    def columns(self) -> global___Aggregation.AggregationColumns: ...
    @property
    def count(self) -> global___Aggregation.AggregationCount: ...
    @property
    def first_row_key(self) -> global___Aggregation.AggregationRowKey: ...
    @property
    def last_row_key(self) -> global___Aggregation.AggregationRowKey: ...
    @property
    def partition(self) -> global___Aggregation.AggregationPartition: ...
    @property
    def formula(self) -> global___Aggregation.AggregationFormula: ...
    @property
    def count_where(self) -> global___Aggregation.AggregationCountWhere: ...
    def __init__(
        self,
        *,
        columns: global___Aggregation.AggregationColumns | None = ...,
        count: global___Aggregation.AggregationCount | None = ...,
        first_row_key: global___Aggregation.AggregationRowKey | None = ...,
        last_row_key: global___Aggregation.AggregationRowKey | None = ...,
        partition: global___Aggregation.AggregationPartition | None = ...,
        formula: global___Aggregation.AggregationFormula | None = ...,
        count_where: global___Aggregation.AggregationCountWhere | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["columns", b"columns", "count", b"count", "count_where", b"count_where", "first_row_key", b"first_row_key", "formula", b"formula", "last_row_key", b"last_row_key", "partition", b"partition", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns", b"columns", "count", b"count", "count_where", b"count_where", "first_row_key", b"first_row_key", "formula", b"formula", "last_row_key", b"last_row_key", "partition", b"partition", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["type", b"type"]) -> typing.Literal["columns", "count", "first_row_key", "last_row_key", "partition", "formula", "count_where"] | None: ...

global___Aggregation = Aggregation

@typing.final
class SortDescriptor(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _SortDirection:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _SortDirectionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[SortDescriptor._SortDirection.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: SortDescriptor._SortDirection.ValueType  # 0
        DESCENDING: SortDescriptor._SortDirection.ValueType  # -1
        ASCENDING: SortDescriptor._SortDirection.ValueType  # 1
        REVERSE: SortDescriptor._SortDirection.ValueType  # 2

    class SortDirection(_SortDirection, metaclass=_SortDirectionEnumTypeWrapper): ...
    UNKNOWN: SortDescriptor.SortDirection.ValueType  # 0
    DESCENDING: SortDescriptor.SortDirection.ValueType  # -1
    ASCENDING: SortDescriptor.SortDirection.ValueType  # 1
    REVERSE: SortDescriptor.SortDirection.ValueType  # 2

    COLUMN_NAME_FIELD_NUMBER: builtins.int
    IS_ABSOLUTE_FIELD_NUMBER: builtins.int
    DIRECTION_FIELD_NUMBER: builtins.int
    column_name: builtins.str
    is_absolute: builtins.bool
    direction: global___SortDescriptor.SortDirection.ValueType
    def __init__(
        self,
        *,
        column_name: builtins.str = ...,
        is_absolute: builtins.bool = ...,
        direction: global___SortDescriptor.SortDirection.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["column_name", b"column_name", "direction", b"direction", "is_absolute", b"is_absolute"]) -> None: ...

global___SortDescriptor = SortDescriptor

@typing.final
class SortTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    SORTS_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def sorts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SortDescriptor]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        sorts: collections.abc.Iterable[global___SortDescriptor] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["result_id", b"result_id", "sorts", b"sorts", "source_id", b"source_id"]) -> None: ...

global___SortTableRequest = SortTableRequest

@typing.final
class FilterTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Condition]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        filters: collections.abc.Iterable[global___Condition] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___FilterTableRequest = FilterTableRequest

@typing.final
class SeekRowRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_ID_FIELD_NUMBER: builtins.int
    STARTING_ROW_FIELD_NUMBER: builtins.int
    COLUMN_NAME_FIELD_NUMBER: builtins.int
    SEEK_VALUE_FIELD_NUMBER: builtins.int
    INSENSITIVE_FIELD_NUMBER: builtins.int
    CONTAINS_FIELD_NUMBER: builtins.int
    IS_BACKWARD_FIELD_NUMBER: builtins.int
    starting_row: builtins.int
    column_name: builtins.str
    insensitive: builtins.bool
    contains: builtins.bool
    is_backward: builtins.bool
    @property
    def source_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def seek_value(self) -> global___Literal: ...
    def __init__(
        self,
        *,
        source_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        starting_row: builtins.int = ...,
        column_name: builtins.str = ...,
        seek_value: global___Literal | None = ...,
        insensitive: builtins.bool = ...,
        contains: builtins.bool = ...,
        is_backward: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["seek_value", b"seek_value", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["column_name", b"column_name", "contains", b"contains", "insensitive", b"insensitive", "is_backward", b"is_backward", "seek_value", b"seek_value", "source_id", b"source_id", "starting_row", b"starting_row"]) -> None: ...

global___SeekRowRequest = SeekRowRequest

@typing.final
class SeekRowResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ROW_FIELD_NUMBER: builtins.int
    result_row: builtins.int
    def __init__(
        self,
        *,
        result_row: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["result_row", b"result_row"]) -> None: ...

global___SeekRowResponse = SeekRowResponse

@typing.final
class Reference(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLUMN_NAME_FIELD_NUMBER: builtins.int
    column_name: builtins.str
    def __init__(
        self,
        *,
        column_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["column_name", b"column_name"]) -> None: ...

global___Reference = Reference

@typing.final
class Literal(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRING_VALUE_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    LONG_VALUE_FIELD_NUMBER: builtins.int
    NANO_TIME_VALUE_FIELD_NUMBER: builtins.int
    string_value: builtins.str
    double_value: builtins.float
    bool_value: builtins.bool
    long_value: builtins.int
    nano_time_value: builtins.int
    """nanos since the epoch"""
    def __init__(
        self,
        *,
        string_value: builtins.str = ...,
        double_value: builtins.float = ...,
        bool_value: builtins.bool = ...,
        long_value: builtins.int = ...,
        nano_time_value: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["bool_value", b"bool_value", "double_value", b"double_value", "long_value", b"long_value", "nano_time_value", b"nano_time_value", "string_value", b"string_value", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["bool_value", b"bool_value", "double_value", b"double_value", "long_value", b"long_value", "nano_time_value", b"nano_time_value", "string_value", b"string_value", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["string_value", "double_value", "bool_value", "long_value", "nano_time_value"] | None: ...

global___Literal = Literal

@typing.final
class Value(google.protobuf.message.Message):
    """could also inline this to each place that uses it"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFERENCE_FIELD_NUMBER: builtins.int
    LITERAL_FIELD_NUMBER: builtins.int
    @property
    def reference(self) -> global___Reference: ...
    @property
    def literal(self) -> global___Literal: ...
    def __init__(
        self,
        *,
        reference: global___Reference | None = ...,
        literal: global___Literal | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "literal", b"literal", "reference", b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "literal", b"literal", "reference", b"reference"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["data", b"data"]) -> typing.Literal["reference", "literal"] | None: ...

global___Value = Value

@typing.final
class Condition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AND_FIELD_NUMBER: builtins.int
    OR_FIELD_NUMBER: builtins.int
    NOT_FIELD_NUMBER: builtins.int
    COMPARE_FIELD_NUMBER: builtins.int
    IN_FIELD_NUMBER: builtins.int
    INVOKE_FIELD_NUMBER: builtins.int
    IS_NULL_FIELD_NUMBER: builtins.int
    MATCHES_FIELD_NUMBER: builtins.int
    CONTAINS_FIELD_NUMBER: builtins.int
    SEARCH_FIELD_NUMBER: builtins.int
    @property
    def compare(self) -> global___CompareCondition: ...
    @property
    def invoke(self) -> global___InvokeCondition: ...
    @property
    def is_null(self) -> global___IsNullCondition: ...
    @property
    def matches(self) -> global___MatchesCondition: ...
    @property
    def contains(self) -> global___ContainsCondition: ...
    @property
    def search(self) -> global___SearchCondition: ...
    def __init__(
        self,
        *,
        compare: global___CompareCondition | None = ...,
        invoke: global___InvokeCondition | None = ...,
        is_null: global___IsNullCondition | None = ...,
        matches: global___MatchesCondition | None = ...,
        contains: global___ContainsCondition | None = ...,
        search: global___SearchCondition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["and", b"and", "compare", b"compare", "contains", b"contains", "data", b"data", "in", b"in", "invoke", b"invoke", "is_null", b"is_null", "matches", b"matches", "not", b"not", "or", b"or", "search", b"search"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["and", b"and", "compare", b"compare", "contains", b"contains", "data", b"data", "in", b"in", "invoke", b"invoke", "is_null", b"is_null", "matches", b"matches", "not", b"not", "or", b"or", "search", b"search"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["data", b"data"]) -> typing.Literal["and", "or", "not", "compare", "in", "invoke", "is_null", "matches", "contains", "search"] | None: ...

global___Condition = Condition

@typing.final
class AndCondition(google.protobuf.message.Message):
    """merge AND and OR into one and give them an "operation"?"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Condition]: ...
    def __init__(
        self,
        *,
        filters: collections.abc.Iterable[global___Condition] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters"]) -> None: ...

global___AndCondition = AndCondition

@typing.final
class OrCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Condition]: ...
    def __init__(
        self,
        *,
        filters: collections.abc.Iterable[global___Condition] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters"]) -> None: ...

global___OrCondition = OrCondition

@typing.final
class NotCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTER_FIELD_NUMBER: builtins.int
    @property
    def filter(self) -> global___Condition: ...
    def __init__(
        self,
        *,
        filter: global___Condition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter"]) -> None: ...

global___NotCondition = NotCondition

@typing.final
class CompareCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _CompareOperation:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _CompareOperationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CompareCondition._CompareOperation.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        LESS_THAN: CompareCondition._CompareOperation.ValueType  # 0
        LESS_THAN_OR_EQUAL: CompareCondition._CompareOperation.ValueType  # 1
        GREATER_THAN: CompareCondition._CompareOperation.ValueType  # 2
        GREATER_THAN_OR_EQUAL: CompareCondition._CompareOperation.ValueType  # 3
        EQUALS: CompareCondition._CompareOperation.ValueType  # 4
        NOT_EQUALS: CompareCondition._CompareOperation.ValueType  # 5

    class CompareOperation(_CompareOperation, metaclass=_CompareOperationEnumTypeWrapper): ...
    LESS_THAN: CompareCondition.CompareOperation.ValueType  # 0
    LESS_THAN_OR_EQUAL: CompareCondition.CompareOperation.ValueType  # 1
    GREATER_THAN: CompareCondition.CompareOperation.ValueType  # 2
    GREATER_THAN_OR_EQUAL: CompareCondition.CompareOperation.ValueType  # 3
    EQUALS: CompareCondition.CompareOperation.ValueType  # 4
    NOT_EQUALS: CompareCondition.CompareOperation.ValueType  # 5

    OPERATION_FIELD_NUMBER: builtins.int
    CASE_SENSITIVITY_FIELD_NUMBER: builtins.int
    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    operation: global___CompareCondition.CompareOperation.ValueType
    case_sensitivity: global___CaseSensitivity.ValueType
    @property
    def lhs(self) -> global___Value: ...
    @property
    def rhs(self) -> global___Value: ...
    def __init__(
        self,
        *,
        operation: global___CompareCondition.CompareOperation.ValueType = ...,
        case_sensitivity: global___CaseSensitivity.ValueType = ...,
        lhs: global___Value | None = ...,
        rhs: global___Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["case_sensitivity", b"case_sensitivity", "lhs", b"lhs", "operation", b"operation", "rhs", b"rhs"]) -> None: ...

global___CompareCondition = CompareCondition

@typing.final
class InCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TARGET_FIELD_NUMBER: builtins.int
    CANDIDATES_FIELD_NUMBER: builtins.int
    CASE_SENSITIVITY_FIELD_NUMBER: builtins.int
    MATCH_TYPE_FIELD_NUMBER: builtins.int
    case_sensitivity: global___CaseSensitivity.ValueType
    match_type: global___MatchType.ValueType
    @property
    def target(self) -> global___Value: ...
    @property
    def candidates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Value]: ...
    def __init__(
        self,
        *,
        target: global___Value | None = ...,
        candidates: collections.abc.Iterable[global___Value] | None = ...,
        case_sensitivity: global___CaseSensitivity.ValueType = ...,
        match_type: global___MatchType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["target", b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["candidates", b"candidates", "case_sensitivity", b"case_sensitivity", "match_type", b"match_type", "target", b"target"]) -> None: ...

global___InCondition = InCondition

@typing.final
class InvokeCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METHOD_FIELD_NUMBER: builtins.int
    TARGET_FIELD_NUMBER: builtins.int
    ARGUMENTS_FIELD_NUMBER: builtins.int
    method: builtins.str
    @property
    def target(self) -> global___Value: ...
    @property
    def arguments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Value]: ...
    def __init__(
        self,
        *,
        method: builtins.str = ...,
        target: global___Value | None = ...,
        arguments: collections.abc.Iterable[global___Value] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["target", b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["arguments", b"arguments", "method", b"method", "target", b"target"]) -> None: ...

global___InvokeCondition = InvokeCondition

@typing.final
class IsNullCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFERENCE_FIELD_NUMBER: builtins.int
    @property
    def reference(self) -> global___Reference: ...
    def __init__(
        self,
        *,
        reference: global___Reference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reference", b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["reference", b"reference"]) -> None: ...

global___IsNullCondition = IsNullCondition

@typing.final
class MatchesCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFERENCE_FIELD_NUMBER: builtins.int
    REGEX_FIELD_NUMBER: builtins.int
    CASE_SENSITIVITY_FIELD_NUMBER: builtins.int
    MATCH_TYPE_FIELD_NUMBER: builtins.int
    regex: builtins.str
    case_sensitivity: global___CaseSensitivity.ValueType
    match_type: global___MatchType.ValueType
    @property
    def reference(self) -> global___Reference: ...
    def __init__(
        self,
        *,
        reference: global___Reference | None = ...,
        regex: builtins.str = ...,
        case_sensitivity: global___CaseSensitivity.ValueType = ...,
        match_type: global___MatchType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reference", b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["case_sensitivity", b"case_sensitivity", "match_type", b"match_type", "reference", b"reference", "regex", b"regex"]) -> None: ...

global___MatchesCondition = MatchesCondition

@typing.final
class ContainsCondition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REFERENCE_FIELD_NUMBER: builtins.int
    SEARCH_STRING_FIELD_NUMBER: builtins.int
    CASE_SENSITIVITY_FIELD_NUMBER: builtins.int
    MATCH_TYPE_FIELD_NUMBER: builtins.int
    search_string: builtins.str
    case_sensitivity: global___CaseSensitivity.ValueType
    match_type: global___MatchType.ValueType
    @property
    def reference(self) -> global___Reference: ...
    def __init__(
        self,
        *,
        reference: global___Reference | None = ...,
        search_string: builtins.str = ...,
        case_sensitivity: global___CaseSensitivity.ValueType = ...,
        match_type: global___MatchType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reference", b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["case_sensitivity", b"case_sensitivity", "match_type", b"match_type", "reference", b"reference", "search_string", b"search_string"]) -> None: ...

global___ContainsCondition = ContainsCondition

@typing.final
class SearchCondition(google.protobuf.message.Message):
    """search"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SEARCH_STRING_FIELD_NUMBER: builtins.int
    OPTIONAL_REFERENCES_FIELD_NUMBER: builtins.int
    search_string: builtins.str
    @property
    def optional_references(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Reference]: ...
    def __init__(
        self,
        *,
        search_string: builtins.str = ...,
        optional_references: collections.abc.Iterable[global___Reference] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["optional_references", b"optional_references", "search_string", b"search_string"]) -> None: ...

global___SearchCondition = SearchCondition

@typing.final
class FlattenRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___FlattenRequest = FlattenRequest

@typing.final
class MetaTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___MetaTableRequest = MetaTableRequest

@typing.final
class RunChartDownsampleRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ZoomRange(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MIN_DATE_NANOS_FIELD_NUMBER: builtins.int
        MAX_DATE_NANOS_FIELD_NUMBER: builtins.int
        min_date_nanos: builtins.int
        max_date_nanos: builtins.int
        def __init__(
            self,
            *,
            min_date_nanos: builtins.int | None = ...,
            max_date_nanos: builtins.int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_max_date_nanos", b"_max_date_nanos", "_min_date_nanos", b"_min_date_nanos", "max_date_nanos", b"max_date_nanos", "min_date_nanos", b"min_date_nanos"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_max_date_nanos", b"_max_date_nanos", "_min_date_nanos", b"_min_date_nanos", "max_date_nanos", b"max_date_nanos", "min_date_nanos", b"min_date_nanos"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_max_date_nanos", b"_max_date_nanos"]) -> typing.Literal["max_date_nanos"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_min_date_nanos", b"_min_date_nanos"]) -> typing.Literal["min_date_nanos"] | None: ...

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    PIXEL_COUNT_FIELD_NUMBER: builtins.int
    ZOOM_RANGE_FIELD_NUMBER: builtins.int
    X_COLUMN_NAME_FIELD_NUMBER: builtins.int
    Y_COLUMN_NAMES_FIELD_NUMBER: builtins.int
    pixel_count: builtins.int
    x_column_name: builtins.str
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    @property
    def zoom_range(self) -> global___RunChartDownsampleRequest.ZoomRange: ...
    @property
    def y_column_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        pixel_count: builtins.int = ...,
        zoom_range: global___RunChartDownsampleRequest.ZoomRange | None = ...,
        x_column_name: builtins.str = ...,
        y_column_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id", "zoom_range", b"zoom_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["pixel_count", b"pixel_count", "result_id", b"result_id", "source_id", b"source_id", "x_column_name", b"x_column_name", "y_column_names", b"y_column_names", "zoom_range", b"zoom_range"]) -> None: ...

global___RunChartDownsampleRequest = RunChartDownsampleRequest

@typing.final
class CreateInputTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class InputTableKind(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class InMemoryAppendOnly(google.protobuf.message.Message):
            """Creates an in-memory append-only table - rows cannot be modified or deleted."""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            def __init__(
                self,
            ) -> None: ...

        @typing.final
        class InMemoryKeyBacked(google.protobuf.message.Message):
            """Creates an in-memory table that supports updates and deletes by keys."""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_COLUMNS_FIELD_NUMBER: builtins.int
            @property
            def key_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
            def __init__(
                self,
                *,
                key_columns: collections.abc.Iterable[builtins.str] | None = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing.Literal["key_columns", b"key_columns"]) -> None: ...

        @typing.final
        class Blink(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            def __init__(
                self,
            ) -> None: ...

        IN_MEMORY_APPEND_ONLY_FIELD_NUMBER: builtins.int
        IN_MEMORY_KEY_BACKED_FIELD_NUMBER: builtins.int
        BLINK_FIELD_NUMBER: builtins.int
        @property
        def in_memory_append_only(self) -> global___CreateInputTableRequest.InputTableKind.InMemoryAppendOnly: ...
        @property
        def in_memory_key_backed(self) -> global___CreateInputTableRequest.InputTableKind.InMemoryKeyBacked: ...
        @property
        def blink(self) -> global___CreateInputTableRequest.InputTableKind.Blink: ...
        def __init__(
            self,
            *,
            in_memory_append_only: global___CreateInputTableRequest.InputTableKind.InMemoryAppendOnly | None = ...,
            in_memory_key_backed: global___CreateInputTableRequest.InputTableKind.InMemoryKeyBacked | None = ...,
            blink: global___CreateInputTableRequest.InputTableKind.Blink | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["blink", b"blink", "in_memory_append_only", b"in_memory_append_only", "in_memory_key_backed", b"in_memory_key_backed", "kind", b"kind"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["blink", b"blink", "in_memory_append_only", b"in_memory_append_only", "in_memory_key_backed", b"in_memory_key_backed", "kind", b"kind"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["kind", b"kind"]) -> typing.Literal["in_memory_append_only", "in_memory_key_backed", "blink"] | None: ...

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_TABLE_ID_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    schema: builtins.bytes
    """Schema as described in Arrow Message.fbs::Message. Optional, either this or source_table_id must be specified."""
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_table_id(self) -> global___TableReference:
        """Optional, either this or schema must be specified, not both."""

    @property
    def kind(self) -> global___CreateInputTableRequest.InputTableKind:
        """Specifies what type of input table to create."""

    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_table_id: global___TableReference | None = ...,
        schema: builtins.bytes = ...,
        kind: global___CreateInputTableRequest.InputTableKind | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["definition", b"definition", "kind", b"kind", "result_id", b"result_id", "schema", b"schema", "source_table_id", b"source_table_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["definition", b"definition", "kind", b"kind", "result_id", b"result_id", "schema", b"schema", "source_table_id", b"source_table_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["definition", b"definition"]) -> typing.Literal["source_table_id", "schema"] | None: ...

global___CreateInputTableRequest = CreateInputTableRequest

@typing.final
class WhereInRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    LEFT_ID_FIELD_NUMBER: builtins.int
    RIGHT_ID_FIELD_NUMBER: builtins.int
    INVERTED_FIELD_NUMBER: builtins.int
    COLUMNS_TO_MATCH_FIELD_NUMBER: builtins.int
    inverted: builtins.bool
    """When true, becomes a "where not in" request"""
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def left_id(self) -> global___TableReference: ...
    @property
    def right_id(self) -> global___TableReference: ...
    @property
    def columns_to_match(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        left_id: global___TableReference | None = ...,
        right_id: global___TableReference | None = ...,
        inverted: builtins.bool = ...,
        columns_to_match: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns_to_match", b"columns_to_match", "inverted", b"inverted", "left_id", b"left_id", "result_id", b"result_id", "right_id", b"right_id"]) -> None: ...

global___WhereInRequest = WhereInRequest

@typing.final
class ColumnStatisticsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    COLUMN_NAME_FIELD_NUMBER: builtins.int
    UNIQUE_VALUE_LIMIT_FIELD_NUMBER: builtins.int
    column_name: builtins.str
    """The name of the column in the source table to read when generating statistics."""
    unique_value_limit: builtins.int
    """For non-numeric, non-date types, specify the max number of unique values to return, sorted by popularity.
    Leave unset to use server default, specify zero to skip.
    """
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        column_name: builtins.str = ...,
        unique_value_limit: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_unique_value_limit", b"_unique_value_limit", "result_id", b"result_id", "source_id", b"source_id", "unique_value_limit", b"unique_value_limit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_unique_value_limit", b"_unique_value_limit", "column_name", b"column_name", "result_id", b"result_id", "source_id", b"source_id", "unique_value_limit", b"unique_value_limit"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_unique_value_limit", b"_unique_value_limit"]) -> typing.Literal["unique_value_limit"] | None: ...

global___ColumnStatisticsRequest = ColumnStatisticsRequest

@typing.final
class SliceRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_ID_FIELD_NUMBER: builtins.int
    SOURCE_ID_FIELD_NUMBER: builtins.int
    FIRST_POSITION_INCLUSIVE_FIELD_NUMBER: builtins.int
    LAST_POSITION_EXCLUSIVE_FIELD_NUMBER: builtins.int
    first_position_inclusive: builtins.int
    last_position_exclusive: builtins.int
    @property
    def result_id(self) -> deephaven_core.proto.ticket_pb2.Ticket: ...
    @property
    def source_id(self) -> global___TableReference: ...
    def __init__(
        self,
        *,
        result_id: deephaven_core.proto.ticket_pb2.Ticket | None = ...,
        source_id: global___TableReference | None = ...,
        first_position_inclusive: builtins.int = ...,
        last_position_exclusive: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result_id", b"result_id", "source_id", b"source_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["first_position_inclusive", b"first_position_inclusive", "last_position_exclusive", b"last_position_exclusive", "result_id", b"result_id", "source_id", b"source_id"]) -> None: ...

global___SliceRequest = SliceRequest

@typing.final
class BatchTableRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Operation(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EMPTY_TABLE_FIELD_NUMBER: builtins.int
        TIME_TABLE_FIELD_NUMBER: builtins.int
        DROP_COLUMNS_FIELD_NUMBER: builtins.int
        UPDATE_FIELD_NUMBER: builtins.int
        LAZY_UPDATE_FIELD_NUMBER: builtins.int
        VIEW_FIELD_NUMBER: builtins.int
        UPDATE_VIEW_FIELD_NUMBER: builtins.int
        SELECT_FIELD_NUMBER: builtins.int
        SELECT_DISTINCT_FIELD_NUMBER: builtins.int
        FILTER_FIELD_NUMBER: builtins.int
        UNSTRUCTURED_FILTER_FIELD_NUMBER: builtins.int
        SORT_FIELD_NUMBER: builtins.int
        HEAD_FIELD_NUMBER: builtins.int
        TAIL_FIELD_NUMBER: builtins.int
        HEAD_BY_FIELD_NUMBER: builtins.int
        TAIL_BY_FIELD_NUMBER: builtins.int
        UNGROUP_FIELD_NUMBER: builtins.int
        MERGE_FIELD_NUMBER: builtins.int
        COMBO_AGGREGATE_FIELD_NUMBER: builtins.int
        FLATTEN_FIELD_NUMBER: builtins.int
        RUN_CHART_DOWNSAMPLE_FIELD_NUMBER: builtins.int
        CROSS_JOIN_FIELD_NUMBER: builtins.int
        NATURAL_JOIN_FIELD_NUMBER: builtins.int
        EXACT_JOIN_FIELD_NUMBER: builtins.int
        LEFT_JOIN_FIELD_NUMBER: builtins.int
        AS_OF_JOIN_FIELD_NUMBER: builtins.int
        FETCH_TABLE_FIELD_NUMBER: builtins.int
        APPLY_PREVIEW_COLUMNS_FIELD_NUMBER: builtins.int
        CREATE_INPUT_TABLE_FIELD_NUMBER: builtins.int
        UPDATE_BY_FIELD_NUMBER: builtins.int
        WHERE_IN_FIELD_NUMBER: builtins.int
        AGGREGATE_ALL_FIELD_NUMBER: builtins.int
        AGGREGATE_FIELD_NUMBER: builtins.int
        SNAPSHOT_FIELD_NUMBER: builtins.int
        SNAPSHOT_WHEN_FIELD_NUMBER: builtins.int
        META_TABLE_FIELD_NUMBER: builtins.int
        RANGE_JOIN_FIELD_NUMBER: builtins.int
        AJ_FIELD_NUMBER: builtins.int
        RAJ_FIELD_NUMBER: builtins.int
        COLUMN_STATISTICS_FIELD_NUMBER: builtins.int
        MULTI_JOIN_FIELD_NUMBER: builtins.int
        SLICE_FIELD_NUMBER: builtins.int
        @property
        def empty_table(self) -> global___EmptyTableRequest: ...
        @property
        def time_table(self) -> global___TimeTableRequest: ...
        @property
        def drop_columns(self) -> global___DropColumnsRequest: ...
        @property
        def update(self) -> global___SelectOrUpdateRequest: ...
        @property
        def lazy_update(self) -> global___SelectOrUpdateRequest: ...
        @property
        def view(self) -> global___SelectOrUpdateRequest: ...
        @property
        def update_view(self) -> global___SelectOrUpdateRequest: ...
        @property
        def select(self) -> global___SelectOrUpdateRequest: ...
        @property
        def select_distinct(self) -> global___SelectDistinctRequest: ...
        @property
        def filter(self) -> global___FilterTableRequest: ...
        @property
        def unstructured_filter(self) -> global___UnstructuredFilterTableRequest: ...
        @property
        def sort(self) -> global___SortTableRequest: ...
        @property
        def head(self) -> global___HeadOrTailRequest: ...
        @property
        def tail(self) -> global___HeadOrTailRequest: ...
        @property
        def head_by(self) -> global___HeadOrTailByRequest: ...
        @property
        def tail_by(self) -> global___HeadOrTailByRequest: ...
        @property
        def ungroup(self) -> global___UngroupRequest: ...
        @property
        def merge(self) -> global___MergeTablesRequest: ...
        @property
        def combo_aggregate(self) -> global___ComboAggregateRequest: ...
        @property
        def flatten(self) -> global___FlattenRequest: ...
        @property
        def run_chart_downsample(self) -> global___RunChartDownsampleRequest: ...
        @property
        def cross_join(self) -> global___CrossJoinTablesRequest: ...
        @property
        def natural_join(self) -> global___NaturalJoinTablesRequest: ...
        @property
        def exact_join(self) -> global___ExactJoinTablesRequest: ...
        @property
        def left_join(self) -> global___LeftJoinTablesRequest: ...
        @property
        def as_of_join(self) -> global___AsOfJoinTablesRequest: ...
        @property
        def fetch_table(self) -> global___FetchTableRequest: ...
        @property
        def apply_preview_columns(self) -> global___ApplyPreviewColumnsRequest: ...
        @property
        def create_input_table(self) -> global___CreateInputTableRequest: ...
        @property
        def update_by(self) -> global___UpdateByRequest: ...
        @property
        def where_in(self) -> global___WhereInRequest: ...
        @property
        def aggregate_all(self) -> global___AggregateAllRequest: ...
        @property
        def aggregate(self) -> global___AggregateRequest: ...
        @property
        def snapshot(self) -> global___SnapshotTableRequest: ...
        @property
        def snapshot_when(self) -> global___SnapshotWhenTableRequest: ...
        @property
        def meta_table(self) -> global___MetaTableRequest: ...
        @property
        def range_join(self) -> global___RangeJoinTablesRequest: ...
        @property
        def aj(self) -> global___AjRajTablesRequest: ...
        @property
        def raj(self) -> global___AjRajTablesRequest: ...
        @property
        def column_statistics(self) -> global___ColumnStatisticsRequest: ...
        @property
        def multi_join(self) -> global___MultiJoinTablesRequest: ...
        @property
        def slice(self) -> global___SliceRequest: ...
        def __init__(
            self,
            *,
            empty_table: global___EmptyTableRequest | None = ...,
            time_table: global___TimeTableRequest | None = ...,
            drop_columns: global___DropColumnsRequest | None = ...,
            update: global___SelectOrUpdateRequest | None = ...,
            lazy_update: global___SelectOrUpdateRequest | None = ...,
            view: global___SelectOrUpdateRequest | None = ...,
            update_view: global___SelectOrUpdateRequest | None = ...,
            select: global___SelectOrUpdateRequest | None = ...,
            select_distinct: global___SelectDistinctRequest | None = ...,
            filter: global___FilterTableRequest | None = ...,
            unstructured_filter: global___UnstructuredFilterTableRequest | None = ...,
            sort: global___SortTableRequest | None = ...,
            head: global___HeadOrTailRequest | None = ...,
            tail: global___HeadOrTailRequest | None = ...,
            head_by: global___HeadOrTailByRequest | None = ...,
            tail_by: global___HeadOrTailByRequest | None = ...,
            ungroup: global___UngroupRequest | None = ...,
            merge: global___MergeTablesRequest | None = ...,
            combo_aggregate: global___ComboAggregateRequest | None = ...,
            flatten: global___FlattenRequest | None = ...,
            run_chart_downsample: global___RunChartDownsampleRequest | None = ...,
            cross_join: global___CrossJoinTablesRequest | None = ...,
            natural_join: global___NaturalJoinTablesRequest | None = ...,
            exact_join: global___ExactJoinTablesRequest | None = ...,
            left_join: global___LeftJoinTablesRequest | None = ...,
            as_of_join: global___AsOfJoinTablesRequest | None = ...,
            fetch_table: global___FetchTableRequest | None = ...,
            apply_preview_columns: global___ApplyPreviewColumnsRequest | None = ...,
            create_input_table: global___CreateInputTableRequest | None = ...,
            update_by: global___UpdateByRequest | None = ...,
            where_in: global___WhereInRequest | None = ...,
            aggregate_all: global___AggregateAllRequest | None = ...,
            aggregate: global___AggregateRequest | None = ...,
            snapshot: global___SnapshotTableRequest | None = ...,
            snapshot_when: global___SnapshotWhenTableRequest | None = ...,
            meta_table: global___MetaTableRequest | None = ...,
            range_join: global___RangeJoinTablesRequest | None = ...,
            aj: global___AjRajTablesRequest | None = ...,
            raj: global___AjRajTablesRequest | None = ...,
            column_statistics: global___ColumnStatisticsRequest | None = ...,
            multi_join: global___MultiJoinTablesRequest | None = ...,
            slice: global___SliceRequest | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["aggregate", b"aggregate", "aggregate_all", b"aggregate_all", "aj", b"aj", "apply_preview_columns", b"apply_preview_columns", "as_of_join", b"as_of_join", "column_statistics", b"column_statistics", "combo_aggregate", b"combo_aggregate", "create_input_table", b"create_input_table", "cross_join", b"cross_join", "drop_columns", b"drop_columns", "empty_table", b"empty_table", "exact_join", b"exact_join", "fetch_table", b"fetch_table", "filter", b"filter", "flatten", b"flatten", "head", b"head", "head_by", b"head_by", "lazy_update", b"lazy_update", "left_join", b"left_join", "merge", b"merge", "meta_table", b"meta_table", "multi_join", b"multi_join", "natural_join", b"natural_join", "op", b"op", "raj", b"raj", "range_join", b"range_join", "run_chart_downsample", b"run_chart_downsample", "select", b"select", "select_distinct", b"select_distinct", "slice", b"slice", "snapshot", b"snapshot", "snapshot_when", b"snapshot_when", "sort", b"sort", "tail", b"tail", "tail_by", b"tail_by", "time_table", b"time_table", "ungroup", b"ungroup", "unstructured_filter", b"unstructured_filter", "update", b"update", "update_by", b"update_by", "update_view", b"update_view", "view", b"view", "where_in", b"where_in"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["aggregate", b"aggregate", "aggregate_all", b"aggregate_all", "aj", b"aj", "apply_preview_columns", b"apply_preview_columns", "as_of_join", b"as_of_join", "column_statistics", b"column_statistics", "combo_aggregate", b"combo_aggregate", "create_input_table", b"create_input_table", "cross_join", b"cross_join", "drop_columns", b"drop_columns", "empty_table", b"empty_table", "exact_join", b"exact_join", "fetch_table", b"fetch_table", "filter", b"filter", "flatten", b"flatten", "head", b"head", "head_by", b"head_by", "lazy_update", b"lazy_update", "left_join", b"left_join", "merge", b"merge", "meta_table", b"meta_table", "multi_join", b"multi_join", "natural_join", b"natural_join", "op", b"op", "raj", b"raj", "range_join", b"range_join", "run_chart_downsample", b"run_chart_downsample", "select", b"select", "select_distinct", b"select_distinct", "slice", b"slice", "snapshot", b"snapshot", "snapshot_when", b"snapshot_when", "sort", b"sort", "tail", b"tail", "tail_by", b"tail_by", "time_table", b"time_table", "ungroup", b"ungroup", "unstructured_filter", b"unstructured_filter", "update", b"update", "update_by", b"update_by", "update_view", b"update_view", "view", b"view", "where_in", b"where_in"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["op", b"op"]) -> typing.Literal["empty_table", "time_table", "drop_columns", "update", "lazy_update", "view", "update_view", "select", "select_distinct", "filter", "unstructured_filter", "sort", "head", "tail", "head_by", "tail_by", "ungroup", "merge", "combo_aggregate", "flatten", "run_chart_downsample", "cross_join", "natural_join", "exact_join", "left_join", "as_of_join", "fetch_table", "apply_preview_columns", "create_input_table", "update_by", "where_in", "aggregate_all", "aggregate", "snapshot", "snapshot_when", "meta_table", "range_join", "aj", "raj", "column_statistics", "multi_join", "slice"] | None: ...

    OPS_FIELD_NUMBER: builtins.int
    @property
    def ops(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___BatchTableRequest.Operation]: ...
    def __init__(
        self,
        *,
        ops: collections.abc.Iterable[global___BatchTableRequest.Operation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ops", b"ops"]) -> None: ...

global___BatchTableRequest = BatchTableRequest
