plugins {
  id 'com.bmuschko.docker-remote-api'
  id 'io.deephaven.project.register'
  id 'idea'
}

evaluationDependsOn ':docker-runtime-base'

sourceSets {
  // All sourcesets here are used for testing; we'll inform the idea{} plugin, below
  test {
    java {
      srcDirs = ['src/test/java']
    }
    resources {
      srcDirs = ['src/test/python']
    }
  }

  javaToPython {
    java {
      srcDirs = ['src/javaToPython/java']
    }
    resources {
      srcDirs = ['src/javaToPython/python']
    }
    compileClasspath += sourceSets.test.output
    runtimeClasspath += sourceSets.test.output
  }

  pythonToJava {
    java {
      srcDirs = ['src/pythonToJava/java']
    }
    resources {
      srcDirs = ['src/pythonToJava/python']
    }
    compileClasspath += sourceSets.test.output
    runtimeClasspath += sourceSets.test.output
  }
}

configurations {
  javaToPythonJar

  testImplementation.extendsFrom junit

  javaToPythonImplementation.extendsFrom testImplementation
  pythonToJavaImplementation.extendsFrom testImplementation

  javaToPythonRuntimeOnly.extendsFrom testRuntimeOnly
  pythonToJavaRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
  // todo: consider running tests where JPY is *not* on the classpath, which is a completely acceptable use case
  testImplementation project(':deephaven-jpy-ext')
  javaToPythonImplementation sourceSets.test.output
  pythonToJavaImplementation sourceSets.test.output
}

test {
  onlyIf { false } // don't run tests, we'll set up ones for each python env
}

// To be able to re-use some of the jpy-integration javaToPython code in other places,
// we need to first create a publishable output (a jar)
task javaToPythonJar(type: Jar) {
  from sourceSets.javaToPython.output
}

// And then we need to attach it to the appropriate configuration
artifacts {
  javaToPythonJar tasks.javaToPythonJar
}

// must be explicit about marking these as test source directories in IntelliJ when not delegating builds to gradle
idea {
  module {
    sourceDirs = []
    resourceDirs = []
    testSourceDirs += project.sourceSets.javaToPython.java.srcDirs
    testSourceDirs += project.sourceSets.pythonToJava.java.srcDirs
    testResourceDirs += project.sourceSets.javaToPython.resources.srcDirs
    testResourceDirs += project.sourceSets.pythonToJava.resources.srcDirs
  }
}

Task testJavaToPython = tasks.create 'testJavaToPython', {
  Task t ->
    t.group = 'python'
    t.description = 'Run the java test suite that depends on deephaven-jpy (org.jpy.PyLib, etc)'
    check.dependsOn t
}

tasks.create 'debugJavaToPython', {
  Task t ->
    t.group = 'python'
    t.description = 'Run the java exec io.deephaven.jpy.integration.PyDebug which is a sanity test for all JavaExec tasks'
}

tasks.create 'pathJavaToPython', {
  Task t ->
    t.group = 'python'
    t.description = 'Run the java exec io.deephaven.jpy.integration.PySysPath which prints java properties and python paths'
}

Task pythonToJava = tasks.create 'unittestPythonToJava', {
  Task t ->
    t.group = 'python'
    t.description = 'Run "python -m xmlrunner discover" in src/python-to-java/python'
    check.dependsOn t
}

Closure<TaskProvider<Task>> gradleTestInDocker = { String taskName, SourceSet sourceSet ->

  def gradleWrapper = tasks.register("${taskName}GradleInit", Wrapper.class) { wrapper ->
    wrapper.scriptFile "${buildDir}/template-project/gradlew"
    wrapper.jarFile "${buildDir}/template-project/gradle/wrapper/gradle-wrapper.jar"
    wrapper.gradleVersion '8.4'
  }
  return Docker.registerDockerTask(project, taskName) {
    copyIn {
      dependsOn gradleWrapper
      from ("${buildDir}/template-project") {
        into 'project'
      }
      from(project.file('src/javaToPython/build.gradle.template')) {
        into 'project'
        rename { file -> 'build.gradle' }
      }
      from (sourceSet.runtimeClasspath) {
        into 'classpath'
      }
      from (sourceSet.output.getClassesDirs()) {
        into 'classes'
      }
    }
    parentContainers = [project(':docker-runtime-base').tasks.findByName('buildDocker')] // deephaven/runtime-base
    dockerfile {
      // base image with default java, python, wheels
      from 'deephaven/runtime-base:local-build'

      // set up the project
      copyFile 'project', '/project'
      workingDir '/project'
      // run once with no actual classes, so that gradle is preinstalled and cached
      runCommand '/project/gradlew --version'
      copyFile 'classpath', '/classpath'
      copyFile 'classes', '/classes'
    }
    entrypoint = ['/project/gradlew', 'test', '--info']
    containerOutPath = '/project/build/test-results/test/'
    copyOut {
      into "${buildDir}/test-results/${taskName}"
    }
  }
}
testJavaToPython.dependsOn gradleTestInDocker('java-to-python-test', sourceSets.javaToPython)

//  Task testTask = venvTest.javaTest(project, "java-to-python-test-${pv.name}", installWheels, sourceSets.javaToPython)
//  testJavaToPython.dependsOn testTask

Closure<TaskProvider<Task>> javaMainInDocker = { String taskName, String javaMain, SourceSet sourceSet, List<String> jvmArgs = [] ->
  return Docker.registerDockerTask(project, taskName) {
    copyIn {
      from(sourceSet.runtimeClasspath) {
        into 'classpath'
      }
    }
    parentContainers = [project(':docker-runtime-base').tasks.findByName('buildDocker')] // deephaven/runtime-base
    imageName = 'deephaven/jpy-integration-java-to-python-tests:local-build'
    dockerfile {
      from 'deephaven/runtime-base:local-build'

      copyFile 'classpath', '/classpath'
    }
    entrypoint = ['java', '-cp', '/classpath:/classpath/*',
                  '-Djpy.jpyLib=/opt/deephaven/venv/lib/python3.10/site-packages/jpy.cpython-310-x86_64-linux-gnu.so',
                  '-Djpy.jdlLib=/opt/deephaven/venv/lib/python3.10/site-packages/jdl.cpython-310-x86_64-linux-gnu.so',
                  '-Djpy.pythonLib=/usr/lib/python3.10/config-3.10-x86_64-linux-gnu/libpython3.10.so'
    ] + jvmArgs + javaMain

    showLogsOnSuccess = true
  }
}

debugJavaToPython.dependsOn javaMainInDocker('java-to-python-debug', 'io.deephaven.jpy.integration.PyDebug', sourceSets.javaToPython, ["-Djpy.debug=true"])

pathJavaToPython.dependsOn javaMainInDocker('java-to-python-path', 'io.deephaven.jpy.integration.PySysPath', sourceSets.javaToPython)


Sync jpyConfigTask = tasks.create 'createPythonToJavaConfig', Sync, {
  // if the classpath changes, we need to rebuild this
  inputs.files sourceSets.pythonToJava.runtimeClasspath
  from('src/pythonToJava/jpyconfig.py.template')
  into "${buildDir}/jpyConfig"
  rename { file -> 'jpyconfig.py' }
  doFirst {
    expand(
            jvmMaxMem:'32m',
            jvmClasspath:'/classpath:' + sourceSets.pythonToJava.runtimeClasspath.asList().collect { '/classpath/' + it.name }.join(':')
    )
  }
}

Closure<TaskProvider<Task>> pyExec = { String taskName, List<String> command, boolean showLogs = false ->
  File reportDir = project.file("${buildDir}/test-results/${taskName}")
  return Docker.registerDockerTask(project, taskName) {
    copyIn {
      from ('src/pythonToJava/python') {
        into 'python'
      }
      from (sourceSets.pythonToJava.runtimeClasspath) {
        into 'classpath'
      }
      from(jpyConfigTask.outputs.files) {
        into 'python'
      }
    }
    parentContainers = [project(':docker-runtime-base').tasks.findByName('buildDocker')] // deephaven/runtime-base
    imageName = 'deephaven/jpy-integration-python-to-java-tests:local-build'
    dockerfile {
      // set up the container, env vars - things that aren't likely to change
      from 'deephaven/runtime-base:local-build'
      runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4;\\
                      mkdir /out;'''
      environmentVariable 'JAVA_VERSION', '1.8'
      environmentVariable 'JPY_PY_CONFIG', '/python/jpyconfig.py'

      workingDir '/python'

      // copy in the contents that we do expect to change as the project updates
      copyFile 'python', '/python'
      copyFile 'classpath', '/classpath'
    }
    entrypoint = command

    copyOut {
      into reportDir
    }
    showLogsOnSuccess = showLogs
  }
}

pythonToJava.dependsOn pyExec('unittest-python-to-java', ['python3', '-m', 'xmlrunner', 'discover', '-v', '-o', '/out/'])

// These tests need to run in their own process, since jpy can only start up a jvm once per process.
pythonToJava.dependsOn pyExec('unittest-single-jpy-python-to-java', ['python3', '-m', 'xmlrunner', '-v', '-o', '/out/', 'test.main_single_jpy_create_destroy_jvm'])
pythonToJava.dependsOn pyExec('unittest-multiple-jpy-python-to-java', ['python3', '-m', 'xmlrunner', '-v', '-o', '/out/', 'test.main_multiple_jpy_create_destroy_jvm'])

pythonToJava.dependsOn pyExec('debugPythonToJava', ['python3', 'java_debug.py'], true)
