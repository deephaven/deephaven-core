// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BarrageSubscriptionOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsBarrageSubscriptionOptions(buf []byte, offset flatbuffers.UOffsetT) *BarrageSubscriptionOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BarrageSubscriptionOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BarrageSubscriptionOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BarrageSubscriptionOptions) Table() flatbuffers.Table {
	return rcv._tab
}

/// see enum for details
func (rcv *BarrageSubscriptionOptions) ColumnConversionMode() ColumnConversionMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ColumnConversionMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// see enum for details
func (rcv *BarrageSubscriptionOptions) MutateColumnConversionMode(n ColumnConversionMode) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// Deephaven reserves a value in the range of primitives as a custom NULL value. This enables more efficient transmission
/// by eliminating the additional complexity of the validity buffer.
func (rcv *BarrageSubscriptionOptions) UseDeephavenNulls() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Deephaven reserves a value in the range of primitives as a custom NULL value. This enables more efficient transmission
/// by eliminating the additional complexity of the validity buffer.
func (rcv *BarrageSubscriptionOptions) MutateUseDeephavenNulls(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// Explicitly set the update interval for this subscription. Note that subscriptions with different update intervals
/// cannot share intermediary state with other subscriptions and greatly increases the footprint of the non-conforming subscription.
///
/// Note: if not supplied (default of zero) then the server uses a consistent value to be efficient and fair to all clients
func (rcv *BarrageSubscriptionOptions) MinUpdateIntervalMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Explicitly set the update interval for this subscription. Note that subscriptions with different update intervals
/// cannot share intermediary state with other subscriptions and greatly increases the footprint of the non-conforming subscription.
///
/// Note: if not supplied (default of zero) then the server uses a consistent value to be efficient and fair to all clients
func (rcv *BarrageSubscriptionOptions) MutateMinUpdateIntervalMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Specify a preferred batch size. Server is allowed to be configured to restrict possible values. Too small of a
/// batch size may be dominated with header costs as each batch is wrapped into a separate RecordBatch. Too large of
/// a payload and it may not fit within the maximum payload size. A good default might be 4096.
func (rcv *BarrageSubscriptionOptions) BatchSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Specify a preferred batch size. Server is allowed to be configured to restrict possible values. Too small of a
/// batch size may be dominated with header costs as each batch is wrapped into a separate RecordBatch. Too large of
/// a payload and it may not fit within the maximum payload size. A good default might be 4096.
func (rcv *BarrageSubscriptionOptions) MutateBatchSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func BarrageSubscriptionOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func BarrageSubscriptionOptionsAddColumnConversionMode(builder *flatbuffers.Builder, columnConversionMode ColumnConversionMode) {
	builder.PrependInt8Slot(0, int8(columnConversionMode), 1)
}
func BarrageSubscriptionOptionsAddUseDeephavenNulls(builder *flatbuffers.Builder, useDeephavenNulls bool) {
	builder.PrependBoolSlot(1, useDeephavenNulls, false)
}
func BarrageSubscriptionOptionsAddMinUpdateIntervalMs(builder *flatbuffers.Builder, minUpdateIntervalMs int32) {
	builder.PrependInt32Slot(2, minUpdateIntervalMs, 0)
}
func BarrageSubscriptionOptionsAddBatchSize(builder *flatbuffers.Builder, batchSize int32) {
	builder.PrependInt32Slot(3, batchSize, 0)
}
func BarrageSubscriptionOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
