// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Establish a new session.
type NewSessionRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsNewSessionRequest(buf []byte, offset flatbuffers.UOffsetT) *NewSessionRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NewSessionRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NewSessionRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NewSessionRequest) Table() flatbuffers.Table {
	return rcv._tab
}

/// A nested protocol version (gets delegated to handshake)
func (rcv *NewSessionRequest) ProtocolVersion() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// A nested protocol version (gets delegated to handshake)
func (rcv *NewSessionRequest) MutateProtocolVersion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Arbitrary auth/handshake info.
func (rcv *NewSessionRequest) Payload(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *NewSessionRequest) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Arbitrary auth/handshake info.
func (rcv *NewSessionRequest) MutatePayload(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func NewSessionRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func NewSessionRequestAddProtocolVersion(builder *flatbuffers.Builder, protocolVersion uint32) {
	builder.PrependUint32Slot(0, protocolVersion, 0)
}
func NewSessionRequestAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(payload), 0)
}
func NewSessionRequestStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func NewSessionRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
