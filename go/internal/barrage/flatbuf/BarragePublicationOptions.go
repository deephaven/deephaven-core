// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BarragePublicationOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsBarragePublicationOptions(buf []byte, offset flatbuffers.UOffsetT) *BarragePublicationOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BarragePublicationOptions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BarragePublicationOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BarragePublicationOptions) Table() flatbuffers.Table {
	return rcv._tab
}

/// Deephaven reserves a value in the range of primitives as a custom NULL value. This enables more efficient transmission
/// by eliminating the additional complexity of the validity buffer.
func (rcv *BarragePublicationOptions) UseDeephavenNulls() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Deephaven reserves a value in the range of primitives as a custom NULL value. This enables more efficient transmission
/// by eliminating the additional complexity of the validity buffer.
func (rcv *BarragePublicationOptions) MutateUseDeephavenNulls(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func BarragePublicationOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func BarragePublicationOptionsAddUseDeephavenNulls(builder *flatbuffers.Builder, useDeephavenNulls bool) {
	builder.PrependBoolSlot(0, useDeephavenNulls, false)
}
func BarragePublicationOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
