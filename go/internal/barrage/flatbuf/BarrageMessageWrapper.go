// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The message wrapper used for all barrage app_metadata fields.
type BarrageMessageWrapper struct {
	_tab flatbuffers.Table
}

func GetRootAsBarrageMessageWrapper(buf []byte, offset flatbuffers.UOffsetT) *BarrageMessageWrapper {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BarrageMessageWrapper{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BarrageMessageWrapper) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BarrageMessageWrapper) Table() flatbuffers.Table {
	return rcv._tab
}

/// Used to identify this type of app_metadata vs other applications.
/// The magic value is '0x6E687064'. It is the numerical representation of the ASCII "dphn".
func (rcv *BarrageMessageWrapper) Magic() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Used to identify this type of app_metadata vs other applications.
/// The magic value is '0x6E687064'. It is the numerical representation of the ASCII "dphn".
func (rcv *BarrageMessageWrapper) MutateMagic(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// The msg type being sent.
func (rcv *BarrageMessageWrapper) MsgType() BarrageMessageType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return BarrageMessageType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The msg type being sent.
func (rcv *BarrageMessageWrapper) MutateMsgType(n BarrageMessageType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// The msg payload.
func (rcv *BarrageMessageWrapper) MsgPayload(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *BarrageMessageWrapper) MsgPayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The msg payload.
func (rcv *BarrageMessageWrapper) MutateMsgPayload(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func BarrageMessageWrapperStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BarrageMessageWrapperAddMagic(builder *flatbuffers.Builder, magic uint32) {
	builder.PrependUint32Slot(0, magic, 0)
}
func BarrageMessageWrapperAddMsgType(builder *flatbuffers.Builder, msgType BarrageMessageType) {
	builder.PrependInt8Slot(1, int8(msgType), 0)
}
func BarrageMessageWrapperAddMsgPayload(builder *flatbuffers.Builder, msgPayload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(msgPayload), 0)
}
func BarrageMessageWrapperStartMsgPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func BarrageMessageWrapperEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
