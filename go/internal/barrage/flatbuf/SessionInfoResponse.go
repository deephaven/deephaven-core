// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Information about the current session state.
type SessionInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSessionInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *SessionInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SessionInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SessionInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SessionInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

/// this is the metadata header to identify this session with future requests; it must be lower-case and remain static for the life of the session
func (rcv *SessionInfoResponse) MetadataHeader(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *SessionInfoResponse) MetadataHeaderLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// this is the metadata header to identify this session with future requests; it must be lower-case and remain static for the life of the session
func (rcv *SessionInfoResponse) MutateMetadataHeader(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

/// this is the session_token; note that it may rotate
func (rcv *SessionInfoResponse) SessionToken(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *SessionInfoResponse) SessionTokenLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// this is the session_token; note that it may rotate
func (rcv *SessionInfoResponse) MutateSessionToken(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

/// a suggested time for the user to refresh the session if they do not do so earlier; value is denoted in milliseconds since epoch
func (rcv *SessionInfoResponse) TokenRefreshDeadlineMs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// a suggested time for the user to refresh the session if they do not do so earlier; value is denoted in milliseconds since epoch
func (rcv *SessionInfoResponse) MutateTokenRefreshDeadlineMs(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func SessionInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SessionInfoResponseAddMetadataHeader(builder *flatbuffers.Builder, metadataHeader flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(metadataHeader), 0)
}
func SessionInfoResponseStartMetadataHeaderVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SessionInfoResponseAddSessionToken(builder *flatbuffers.Builder, sessionToken flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(sessionToken), 0)
}
func SessionInfoResponseStartSessionTokenVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SessionInfoResponseAddTokenRefreshDeadlineMs(builder *flatbuffers.Builder, tokenRefreshDeadlineMs int64) {
	builder.PrependInt64Slot(2, tokenRefreshDeadlineMs, 0)
}
func SessionInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
