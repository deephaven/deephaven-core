// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import "strconv"

/// There will always be types that cannot be easily supported over IPC. These are the options:
///   Stringify (default) - Pretend the column is a string when sending over Arrow Flight (default)
///   JavaSerialization   - Use java serialization; the client is responsible for the deserialization
///   ThrowError          - Refuse to send the column and throw an internal error sharing as much detail as possible
type ColumnConversionMode int8

const (
	ColumnConversionModeStringify         ColumnConversionMode = 1
	ColumnConversionModeJavaSerialization ColumnConversionMode = 2
	ColumnConversionModeThrowError        ColumnConversionMode = 3
)

var EnumNamesColumnConversionMode = map[ColumnConversionMode]string{
	ColumnConversionModeStringify:         "Stringify",
	ColumnConversionModeJavaSerialization: "JavaSerialization",
	ColumnConversionModeThrowError:        "ThrowError",
}

var EnumValuesColumnConversionMode = map[string]ColumnConversionMode{
	"Stringify":         ColumnConversionModeStringify,
	"JavaSerialization": ColumnConversionModeJavaSerialization,
	"ThrowError":        ColumnConversionModeThrowError,
}

func (v ColumnConversionMode) String() string {
	if s, ok := EnumNamesColumnConversionMode[v]; ok {
		return s
	}
	return "ColumnConversionMode(" + strconv.FormatInt(int64(v), 10) + ")"
}
