// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Describes the table update stream the client would like to push to. This is similar to a DoPut but the client
/// will send BarrageUpdateMetadata to explicitly describe the row key space. The updates sent adhere to the table
/// update model semantics; thus BarragePublication enables the client to upload a ticking table.
type BarragePublicationRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsBarragePublicationRequest(buf []byte, offset flatbuffers.UOffsetT) *BarragePublicationRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BarragePublicationRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BarragePublicationRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BarragePublicationRequest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The destination Ticket.
func (rcv *BarragePublicationRequest) Ticket(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *BarragePublicationRequest) TicketLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The destination Ticket.
func (rcv *BarragePublicationRequest) MutateTicket(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

/// Options to configure your request.
func (rcv *BarragePublicationRequest) PublishOptions(obj *BarragePublicationOptions) *BarragePublicationOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(BarragePublicationOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Options to configure your request.
func BarragePublicationRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BarragePublicationRequestAddTicket(builder *flatbuffers.Builder, ticket flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ticket), 0)
}
func BarragePublicationRequestStartTicketVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func BarragePublicationRequestAddPublishOptions(builder *flatbuffers.Builder, publishOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(publishOptions), 0)
}
func BarragePublicationRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
