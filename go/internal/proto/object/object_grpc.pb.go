// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: deephaven/proto/object.proto

package object

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectServiceClient interface {
	// Deprecated: Do not use.
	//
	// Fetches a server-side object as a binary payload and assorted other tickets pointing at
	// other server-side objects that may need to be read to properly use this payload. The binary
	// format is implementation specific, but the implementation should be specified by the "type"
	// identifier in the typed ticket.
	//
	// Deprecated in favor of MessageStream, which is able to handle the same content.
	FetchObject(ctx context.Context, in *FetchObjectRequest, opts ...grpc.CallOption) (*FetchObjectResponse, error)
	//
	// Provides a generic stream feature for Deephaven instances to use to add arbitrary functionality.
	// Presently these take the form of "object type plugins", where server-side code can specify how
	// an object could be serialized and/or communicate with a client. This gRPC stream is somewhat lower level
	// than the plugin API, giving the server and client APIs features to correctly establish and
	// control the stream. At this time, this is limited to a "ConnectRequest" to start the call.
	//
	// The first message sent to the server is expected to have a ConnectRequest, indicating which
	// export ticket to connect to. It is an error for the client to attempt to connect to an object
	// that has no plugin for its object type installed.
	//
	// The first request sent by the client should be a ConnectRequest. No other client message should
	// be sent until the server responds. The server will respond with Data as soon as it is able (i.e.
	// once the object in question has been resolved and the plugin has responded), indicating that the
	// request was successful. After that point, the client may send Data requests.
	//
	// All replies from the server to the client contain Data instances. When sent from the server to
	// the client, Data contains a bytes payload created by the server implementation of the plugin,
	// and server-created export tickets containing any object references specified to be sent by the
	// server-side plugin. As server-created exports, they are already resolved, and can be fetched or
	// otherwise referenced right away. The client API is expected to wrap those tickets in appropriate
	// objects, and the client is expected to release those tickets as appropriate, according to the
	// plugin's use case. Note that it is possible for the "type" field to be null, indicating that
	// there is no corresponding ObjectType plugin for these exported objects. This limits the client
	// to specifying those tickets in a subsequent request, or releasing the ticket to let the object
	// be garbage collected on the server.
	//
	// All Data instances sent from the client likewise contain a bytes payload, and may contain
	// references to objects that already exist or may soon exist on the server, not just tickets sent
	// by this same plugin. Note however that if those tickets are not yet resolved, neither the current
	// Data nor subsequent requests can be processed by the plugin, as the required references can't be
	// resolved.
	//
	// Presently there is no explicit "close" message to send, but plugin implementations can devise
	// their own "half-close" protocol if they so choose. For now, if one end closes the connection,
	// the other is expected to follow suit by closing their end too. At present, if there is an error
	// with the stream, it is conveyed to the client in the usual gRPC fashion, but the server plugin
	// will only be informed that the stream closed.
	//
	MessageStream(ctx context.Context, opts ...grpc.CallOption) (ObjectService_MessageStreamClient, error)
	//
	// Half of the browser-based (browser's can't do bidirectional streams without websockets)
	// implementation for MessageStream.
	OpenMessageStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ObjectService_OpenMessageStreamClient, error)
	//
	// Other half of the browser-based implementation for MessageStream.
	NextMessageStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*BrowserNextResponse, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

// Deprecated: Do not use.
func (c *objectServiceClient) FetchObject(ctx context.Context, in *FetchObjectRequest, opts ...grpc.CallOption) (*FetchObjectResponse, error) {
	out := new(FetchObjectResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.ObjectService/FetchObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) MessageStream(ctx context.Context, opts ...grpc.CallOption) (ObjectService_MessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectService_ServiceDesc.Streams[0], "/io.deephaven.proto.backplane.grpc.ObjectService/MessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceMessageStreamClient{stream}
	return x, nil
}

type ObjectService_MessageStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type objectServiceMessageStreamClient struct {
	grpc.ClientStream
}

func (x *objectServiceMessageStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectServiceMessageStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) OpenMessageStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ObjectService_OpenMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectService_ServiceDesc.Streams[1], "/io.deephaven.proto.backplane.grpc.ObjectService/OpenMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceOpenMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectService_OpenMessageStreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type objectServiceOpenMessageStreamClient struct {
	grpc.ClientStream
}

func (x *objectServiceOpenMessageStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) NextMessageStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*BrowserNextResponse, error) {
	out := new(BrowserNextResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.ObjectService/NextMessageStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations must embed UnimplementedObjectServiceServer
// for forward compatibility
type ObjectServiceServer interface {
	// Deprecated: Do not use.
	//
	// Fetches a server-side object as a binary payload and assorted other tickets pointing at
	// other server-side objects that may need to be read to properly use this payload. The binary
	// format is implementation specific, but the implementation should be specified by the "type"
	// identifier in the typed ticket.
	//
	// Deprecated in favor of MessageStream, which is able to handle the same content.
	FetchObject(context.Context, *FetchObjectRequest) (*FetchObjectResponse, error)
	//
	// Provides a generic stream feature for Deephaven instances to use to add arbitrary functionality.
	// Presently these take the form of "object type plugins", where server-side code can specify how
	// an object could be serialized and/or communicate with a client. This gRPC stream is somewhat lower level
	// than the plugin API, giving the server and client APIs features to correctly establish and
	// control the stream. At this time, this is limited to a "ConnectRequest" to start the call.
	//
	// The first message sent to the server is expected to have a ConnectRequest, indicating which
	// export ticket to connect to. It is an error for the client to attempt to connect to an object
	// that has no plugin for its object type installed.
	//
	// The first request sent by the client should be a ConnectRequest. No other client message should
	// be sent until the server responds. The server will respond with Data as soon as it is able (i.e.
	// once the object in question has been resolved and the plugin has responded), indicating that the
	// request was successful. After that point, the client may send Data requests.
	//
	// All replies from the server to the client contain Data instances. When sent from the server to
	// the client, Data contains a bytes payload created by the server implementation of the plugin,
	// and server-created export tickets containing any object references specified to be sent by the
	// server-side plugin. As server-created exports, they are already resolved, and can be fetched or
	// otherwise referenced right away. The client API is expected to wrap those tickets in appropriate
	// objects, and the client is expected to release those tickets as appropriate, according to the
	// plugin's use case. Note that it is possible for the "type" field to be null, indicating that
	// there is no corresponding ObjectType plugin for these exported objects. This limits the client
	// to specifying those tickets in a subsequent request, or releasing the ticket to let the object
	// be garbage collected on the server.
	//
	// All Data instances sent from the client likewise contain a bytes payload, and may contain
	// references to objects that already exist or may soon exist on the server, not just tickets sent
	// by this same plugin. Note however that if those tickets are not yet resolved, neither the current
	// Data nor subsequent requests can be processed by the plugin, as the required references can't be
	// resolved.
	//
	// Presently there is no explicit "close" message to send, but plugin implementations can devise
	// their own "half-close" protocol if they so choose. For now, if one end closes the connection,
	// the other is expected to follow suit by closing their end too. At present, if there is an error
	// with the stream, it is conveyed to the client in the usual gRPC fashion, but the server plugin
	// will only be informed that the stream closed.
	//
	MessageStream(ObjectService_MessageStreamServer) error
	//
	// Half of the browser-based (browser's can't do bidirectional streams without websockets)
	// implementation for MessageStream.
	OpenMessageStream(*StreamRequest, ObjectService_OpenMessageStreamServer) error
	//
	// Other half of the browser-based implementation for MessageStream.
	NextMessageStream(context.Context, *StreamRequest) (*BrowserNextResponse, error)
	mustEmbedUnimplementedObjectServiceServer()
}

// UnimplementedObjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectServiceServer struct {
}

func (UnimplementedObjectServiceServer) FetchObject(context.Context, *FetchObjectRequest) (*FetchObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchObject not implemented")
}
func (UnimplementedObjectServiceServer) MessageStream(ObjectService_MessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageStream not implemented")
}
func (UnimplementedObjectServiceServer) OpenMessageStream(*StreamRequest, ObjectService_OpenMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenMessageStream not implemented")
}
func (UnimplementedObjectServiceServer) NextMessageStream(context.Context, *StreamRequest) (*BrowserNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextMessageStream not implemented")
}
func (UnimplementedObjectServiceServer) mustEmbedUnimplementedObjectServiceServer() {}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_FetchObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).FetchObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.ObjectService/FetchObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).FetchObject(ctx, req.(*FetchObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_MessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectServiceServer).MessageStream(&objectServiceMessageStreamServer{stream})
}

type ObjectService_MessageStreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type objectServiceMessageStreamServer struct {
	grpc.ServerStream
}

func (x *objectServiceMessageStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectServiceMessageStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectService_OpenMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectServiceServer).OpenMessageStream(m, &objectServiceOpenMessageStreamServer{stream})
}

type ObjectService_OpenMessageStreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type objectServiceOpenMessageStreamServer struct {
	grpc.ServerStream
}

func (x *objectServiceOpenMessageStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectService_NextMessageStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).NextMessageStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.ObjectService/NextMessageStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).NextMessageStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.deephaven.proto.backplane.grpc.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchObject",
			Handler:    _ObjectService_FetchObject_Handler,
		},
		{
			MethodName: "NextMessageStream",
			Handler:    _ObjectService_NextMessageStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageStream",
			Handler:       _ObjectService_MessageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OpenMessageStream",
			Handler:       _ObjectService_OpenMessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deephaven/proto/object.proto",
}
