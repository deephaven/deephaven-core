//
// Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.2
// source: deephaven/proto/partitionedtable.proto

package partitionedtable

import (
	table "github.com/deephaven/deephaven-core/go/internal/proto/table"
	ticket "github.com/deephaven/deephaven-core/go/internal/proto/ticket"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId        *ticket.Ticket `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ResultId       *ticket.Ticket `protobuf:"bytes,2,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	KeyColumnNames []string       `protobuf:"bytes,3,rep,name=key_column_names,json=keyColumnNames,proto3" json:"key_column_names,omitempty"`
	DropKeys       bool           `protobuf:"varint,4,opt,name=drop_keys,json=dropKeys,proto3" json:"drop_keys,omitempty"`
}

func (x *PartitionByRequest) Reset() {
	*x = PartitionByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionByRequest) ProtoMessage() {}

func (x *PartitionByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionByRequest.ProtoReflect.Descriptor instead.
func (*PartitionByRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_partitionedtable_proto_rawDescGZIP(), []int{0}
}

func (x *PartitionByRequest) GetTableId() *ticket.Ticket {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PartitionByRequest) GetResultId() *ticket.Ticket {
	if x != nil {
		return x.ResultId
	}
	return nil
}

func (x *PartitionByRequest) GetKeyColumnNames() []string {
	if x != nil {
		return x.KeyColumnNames
	}
	return nil
}

func (x *PartitionByRequest) GetDropKeys() bool {
	if x != nil {
		return x.DropKeys
	}
	return false
}

type PartitionByResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartitionByResponse) Reset() {
	*x = PartitionByResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionByResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionByResponse) ProtoMessage() {}

func (x *PartitionByResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionByResponse.ProtoReflect.Descriptor instead.
func (*PartitionByResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_partitionedtable_proto_rawDescGZIP(), []int{1}
}

type MergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ticket for the PartitionedTable object to merge.
	PartitionedTable *ticket.Ticket `protobuf:"bytes,1,opt,name=partitioned_table,json=partitionedTable,proto3" json:"partitioned_table,omitempty"`
	// The ticket to use to hold the results of the merge operation.
	ResultId *ticket.Ticket `protobuf:"bytes,2,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *MergeRequest) Reset() {
	*x = MergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequest) ProtoMessage() {}

func (x *MergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequest.ProtoReflect.Descriptor instead.
func (*MergeRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_partitionedtable_proto_rawDescGZIP(), []int{2}
}

func (x *MergeRequest) GetPartitionedTable() *ticket.Ticket {
	if x != nil {
		return x.PartitionedTable
	}
	return nil
}

func (x *MergeRequest) GetResultId() *ticket.Ticket {
	if x != nil {
		return x.ResultId
	}
	return nil
}

type GetTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ticket for the PartitionedTable object to query.
	PartitionedTable *ticket.Ticket `protobuf:"bytes,1,opt,name=partitioned_table,json=partitionedTable,proto3" json:"partitioned_table,omitempty"`
	// The ticket for the table containing the key to fetch from the partitioned table.
	KeyTableTicket *ticket.Ticket `protobuf:"bytes,2,opt,name=key_table_ticket,json=keyTableTicket,proto3" json:"key_table_ticket,omitempty"`
	// The ticket to use to hold the newly returned table.
	ResultId *ticket.Ticket `protobuf:"bytes,4,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *GetTableRequest) Reset() {
	*x = GetTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRequest) ProtoMessage() {}

func (x *GetTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRequest.ProtoReflect.Descriptor instead.
func (*GetTableRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_partitionedtable_proto_rawDescGZIP(), []int{3}
}

func (x *GetTableRequest) GetPartitionedTable() *ticket.Ticket {
	if x != nil {
		return x.PartitionedTable
	}
	return nil
}

func (x *GetTableRequest) GetKeyTableTicket() *ticket.Ticket {
	if x != nil {
		return x.KeyTableTicket
	}
	return nil
}

func (x *GetTableRequest) GetResultId() *ticket.Ticket {
	if x != nil {
		return x.ResultId
	}
	return nil
}

//
// A message that describes a partitioned table, able to be sent as a plugin object to a client.
// This object will also come with a ticket to the underlying table that can be used to get the
// constituent tables by key.
type PartitionedTableDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of the key columns. The underlying table will contain these columns - a client can
	// subscribe to these columns to see what keys are present.
	KeyColumnNames []string `protobuf:"bytes,1,rep,name=key_column_names,json=keyColumnNames,proto3" json:"key_column_names,omitempty"`
	// The name of the column in the underlying table that contains the table represented by that row.
	ConstituentColumnName string `protobuf:"bytes,4,opt,name=constituent_column_name,json=constituentColumnName,proto3" json:"constituent_column_name,omitempty"`
	// True if the keys will be unique, so any set of known keys can be queried using GetTable.
	UniqueKeys bool `protobuf:"varint,2,opt,name=unique_keys,json=uniqueKeys,proto3" json:"unique_keys,omitempty"`
	// Returns a flight Messsage wrapping a Schema that will describe every table contained in this
	// PartitionedTable.
	ConstituentDefinitionSchema []byte `protobuf:"bytes,3,opt,name=constituent_definition_schema,json=constituentDefinitionSchema,proto3" json:"constituent_definition_schema,omitempty"`
	// True if the underlying table may tick with updates. See PartitionedTable.constituentChangesPermitted()
	// for more details.
	ConstituentChangesPermitted bool `protobuf:"varint,5,opt,name=constituent_changes_permitted,json=constituentChangesPermitted,proto3" json:"constituent_changes_permitted,omitempty"`
}

func (x *PartitionedTableDescriptor) Reset() {
	*x = PartitionedTableDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionedTableDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionedTableDescriptor) ProtoMessage() {}

func (x *PartitionedTableDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_partitionedtable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionedTableDescriptor.ProtoReflect.Descriptor instead.
func (*PartitionedTableDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_partitionedtable_proto_rawDescGZIP(), []int{4}
}

func (x *PartitionedTableDescriptor) GetKeyColumnNames() []string {
	if x != nil {
		return x.KeyColumnNames
	}
	return nil
}

func (x *PartitionedTableDescriptor) GetConstituentColumnName() string {
	if x != nil {
		return x.ConstituentColumnName
	}
	return ""
}

func (x *PartitionedTableDescriptor) GetUniqueKeys() bool {
	if x != nil {
		return x.UniqueKeys
	}
	return false
}

func (x *PartitionedTableDescriptor) GetConstituentDefinitionSchema() []byte {
	if x != nil {
		return x.ConstituentDefinitionSchema
	}
	return nil
}

func (x *PartitionedTableDescriptor) GetConstituentChangesPermitted() bool {
	if x != nil {
		return x.ConstituentChangesPermitted
	}
	return false
}

var File_deephaven_proto_partitionedtable_proto protoreflect.FileDescriptor

var file_deephaven_proto_partitionedtable_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6b,
	0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0e, 0x6b, 0x65, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65,
	0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x32, 0x96, 0x03,
	0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x12, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4c, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deephaven_proto_partitionedtable_proto_rawDescOnce sync.Once
	file_deephaven_proto_partitionedtable_proto_rawDescData = file_deephaven_proto_partitionedtable_proto_rawDesc
)

func file_deephaven_proto_partitionedtable_proto_rawDescGZIP() []byte {
	file_deephaven_proto_partitionedtable_proto_rawDescOnce.Do(func() {
		file_deephaven_proto_partitionedtable_proto_rawDescData = protoimpl.X.CompressGZIP(file_deephaven_proto_partitionedtable_proto_rawDescData)
	})
	return file_deephaven_proto_partitionedtable_proto_rawDescData
}

var file_deephaven_proto_partitionedtable_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_deephaven_proto_partitionedtable_proto_goTypes = []interface{}{
	(*PartitionByRequest)(nil),                  // 0: io.deephaven.proto.backplane.grpc.PartitionByRequest
	(*PartitionByResponse)(nil),                 // 1: io.deephaven.proto.backplane.grpc.PartitionByResponse
	(*MergeRequest)(nil),                        // 2: io.deephaven.proto.backplane.grpc.MergeRequest
	(*GetTableRequest)(nil),                     // 3: io.deephaven.proto.backplane.grpc.GetTableRequest
	(*PartitionedTableDescriptor)(nil),          // 4: io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor
	(*ticket.Ticket)(nil),                       // 5: io.deephaven.proto.backplane.grpc.Ticket
	(*table.ExportedTableCreationResponse)(nil), // 6: io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse
}
var file_deephaven_proto_partitionedtable_proto_depIdxs = []int32{
	5,  // 0: io.deephaven.proto.backplane.grpc.PartitionByRequest.table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	5,  // 1: io.deephaven.proto.backplane.grpc.PartitionByRequest.result_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	5,  // 2: io.deephaven.proto.backplane.grpc.MergeRequest.partitioned_table:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	5,  // 3: io.deephaven.proto.backplane.grpc.MergeRequest.result_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	5,  // 4: io.deephaven.proto.backplane.grpc.GetTableRequest.partitioned_table:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	5,  // 5: io.deephaven.proto.backplane.grpc.GetTableRequest.key_table_ticket:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	5,  // 6: io.deephaven.proto.backplane.grpc.GetTableRequest.result_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	0,  // 7: io.deephaven.proto.backplane.grpc.PartitionedTableService.PartitionBy:input_type -> io.deephaven.proto.backplane.grpc.PartitionByRequest
	2,  // 8: io.deephaven.proto.backplane.grpc.PartitionedTableService.Merge:input_type -> io.deephaven.proto.backplane.grpc.MergeRequest
	3,  // 9: io.deephaven.proto.backplane.grpc.PartitionedTableService.GetTable:input_type -> io.deephaven.proto.backplane.grpc.GetTableRequest
	1,  // 10: io.deephaven.proto.backplane.grpc.PartitionedTableService.PartitionBy:output_type -> io.deephaven.proto.backplane.grpc.PartitionByResponse
	6,  // 11: io.deephaven.proto.backplane.grpc.PartitionedTableService.Merge:output_type -> io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse
	6,  // 12: io.deephaven.proto.backplane.grpc.PartitionedTableService.GetTable:output_type -> io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_deephaven_proto_partitionedtable_proto_init() }
func file_deephaven_proto_partitionedtable_proto_init() {
	if File_deephaven_proto_partitionedtable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deephaven_proto_partitionedtable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_partitionedtable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionByResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_partitionedtable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_partitionedtable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_partitionedtable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionedTableDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deephaven_proto_partitionedtable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deephaven_proto_partitionedtable_proto_goTypes,
		DependencyIndexes: file_deephaven_proto_partitionedtable_proto_depIdxs,
		MessageInfos:      file_deephaven_proto_partitionedtable_proto_msgTypes,
	}.Build()
	File_deephaven_proto_partitionedtable_proto = out.File
	file_deephaven_proto_partitionedtable_proto_rawDesc = nil
	file_deephaven_proto_partitionedtable_proto_goTypes = nil
	file_deephaven_proto_partitionedtable_proto_depIdxs = nil
}
