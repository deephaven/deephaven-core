//
// Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: deephaven/proto/hierarchicaltable.proto

package hierarchicaltable

import (
	table "github.com/deephaven/deephaven-core/go/internal/proto/table"
	ticket "github.com/deephaven/deephaven-core/go/internal/proto/ticket"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RollupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold the result RollupTable from the rollup operation
	ResultRollupTableId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_rollup_table_id,json=resultRollupTableId,proto3" json:"result_rollup_table_id,omitempty"`
	// Ticket for the source Table to rollup
	SourceTableId *ticket.Ticket `protobuf:"bytes,2,opt,name=source_table_id,json=sourceTableId,proto3" json:"source_table_id,omitempty"`
	// The aggregations that should be applied at each level of the rollup
	Aggregations []*table.Aggregation `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	// Whether to include the leaf-level constituents in the result
	IncludeConstituents bool `protobuf:"varint,4,opt,name=include_constituents,json=includeConstituents,proto3" json:"include_constituents,omitempty"`
	// The names of the columns to rollup by
	GroupByColumns []string `protobuf:"bytes,5,rep,name=group_by_columns,json=groupByColumns,proto3" json:"group_by_columns,omitempty"`
}

func (x *RollupRequest) Reset() {
	*x = RollupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupRequest) ProtoMessage() {}

func (x *RollupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupRequest.ProtoReflect.Descriptor instead.
func (*RollupRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{0}
}

func (x *RollupRequest) GetResultRollupTableId() *ticket.Ticket {
	if x != nil {
		return x.ResultRollupTableId
	}
	return nil
}

func (x *RollupRequest) GetSourceTableId() *ticket.Ticket {
	if x != nil {
		return x.SourceTableId
	}
	return nil
}

func (x *RollupRequest) GetAggregations() []*table.Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *RollupRequest) GetIncludeConstituents() bool {
	if x != nil {
		return x.IncludeConstituents
	}
	return false
}

func (x *RollupRequest) GetGroupByColumns() []string {
	if x != nil {
		return x.GroupByColumns
	}
	return nil
}

type RollupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollupResponse) Reset() {
	*x = RollupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupResponse) ProtoMessage() {}

func (x *RollupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupResponse.ProtoReflect.Descriptor instead.
func (*RollupResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{1}
}

type TreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold the result TreeTable from the tree operation
	ResultTreeTableId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_tree_table_id,json=resultTreeTableId,proto3" json:"result_tree_table_id,omitempty"`
	// Ticket for the source Table to tree
	SourceTableId *ticket.Ticket `protobuf:"bytes,2,opt,name=source_table_id,json=sourceTableId,proto3" json:"source_table_id,omitempty"`
	// The name of the column containing the unique identifier for each row in the source table
	IdentifierColumn string `protobuf:"bytes,3,opt,name=identifier_column,json=identifierColumn,proto3" json:"identifier_column,omitempty"`
	// The name of the column containing the parent row's unique identifier for each row in the source table
	ParentIdentifierColumn string `protobuf:"bytes,4,opt,name=parent_identifier_column,json=parentIdentifierColumn,proto3" json:"parent_identifier_column,omitempty"`
	// Whether to promote "orphaned" nodes to be children of the root node. Orphans are nodes whose parent identifiers do
	// not occur as identifiers for any row in the source Table.
	PromoteOrphans bool `protobuf:"varint,5,opt,name=promote_orphans,json=promoteOrphans,proto3" json:"promote_orphans,omitempty"`
}

func (x *TreeRequest) Reset() {
	*x = TreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeRequest) ProtoMessage() {}

func (x *TreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeRequest.ProtoReflect.Descriptor instead.
func (*TreeRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{2}
}

func (x *TreeRequest) GetResultTreeTableId() *ticket.Ticket {
	if x != nil {
		return x.ResultTreeTableId
	}
	return nil
}

func (x *TreeRequest) GetSourceTableId() *ticket.Ticket {
	if x != nil {
		return x.SourceTableId
	}
	return nil
}

func (x *TreeRequest) GetIdentifierColumn() string {
	if x != nil {
		return x.IdentifierColumn
	}
	return ""
}

func (x *TreeRequest) GetParentIdentifierColumn() string {
	if x != nil {
		return x.ParentIdentifierColumn
	}
	return ""
}

func (x *TreeRequest) GetPromoteOrphans() bool {
	if x != nil {
		return x.PromoteOrphans
	}
	return false
}

type TreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TreeResponse) Reset() {
	*x = TreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeResponse) ProtoMessage() {}

func (x *TreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeResponse.ProtoReflect.Descriptor instead.
func (*TreeResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{3}
}

type HierarchicalTableApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold the result HierarchicalTable (RollupTable or TreeTable) from the applying the operations
	ResultHierarchicalTableId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_hierarchical_table_id,json=resultHierarchicalTableId,proto3" json:"result_hierarchical_table_id,omitempty"`
	// Ticket for the input HierarchicalTable (RollupTable or TreeTable) to apply operations to
	InputHierarchicalTableId *ticket.Ticket `protobuf:"bytes,2,opt,name=input_hierarchical_table_id,json=inputHierarchicalTableId,proto3" json:"input_hierarchical_table_id,omitempty"`
	// Filters to apply to the input HierarchicalTable to produce the result HierarchicalTable. Never expressed against
	// the "structural" columns included in the a HierarchicalTableDescriptor's snapshot_schema.
	// For RollupTables, only the group-by columns may be filtered. The names are always expressed as they appear
	// in aggregated node columns (and in the group-by columns). The filtering will result in a complete or partial
	// new Table.rollup operation.
	// For TreeTables, these may be variously applied to the source (resulting in a new Table.tree operation) or to the
	// nodes (resulting in filtering at snapshot time).
	Filters []*table.Condition `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Sorts to apply to the input HierarchicalTable to produce the result HierarchicalTable. Never expressed against
	// the "structural" columns included in the a HierarchicalTableDescriptor's snapshot_schema.
	// For TreeTables, these are simply applied to the nodes at snapshot time.
	// For RollupTables, these are expressed against the aggregated node columns, and will be applied to the appropriate
	// input (constituent) columns as well. The appropriate (aggregated or constituent) sorts are applied to the nodes at
	// snapshot time.
	Sorts []*table.SortDescriptor `protobuf:"bytes,4,rep,name=sorts,proto3" json:"sorts,omitempty"`
}

func (x *HierarchicalTableApplyRequest) Reset() {
	*x = HierarchicalTableApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableApplyRequest) ProtoMessage() {}

func (x *HierarchicalTableApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableApplyRequest.ProtoReflect.Descriptor instead.
func (*HierarchicalTableApplyRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{4}
}

func (x *HierarchicalTableApplyRequest) GetResultHierarchicalTableId() *ticket.Ticket {
	if x != nil {
		return x.ResultHierarchicalTableId
	}
	return nil
}

func (x *HierarchicalTableApplyRequest) GetInputHierarchicalTableId() *ticket.Ticket {
	if x != nil {
		return x.InputHierarchicalTableId
	}
	return nil
}

func (x *HierarchicalTableApplyRequest) GetFilters() []*table.Condition {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *HierarchicalTableApplyRequest) GetSorts() []*table.SortDescriptor {
	if x != nil {
		return x.Sorts
	}
	return nil
}

type HierarchicalTableApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HierarchicalTableApplyResponse) Reset() {
	*x = HierarchicalTableApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableApplyResponse) ProtoMessage() {}

func (x *HierarchicalTableApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableApplyResponse.ProtoReflect.Descriptor instead.
func (*HierarchicalTableApplyResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{5}
}

type HierarchicalTableDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schema to be used for snapshot or subscription requests as described in Arrow Message.fbs::Message.
	// Field metadata is used to convey additional information about the structure of the HierarchicalTable, the
	// special roles some columns play, and the relationships between columns.
	//
	// "hierarchicalTable.isStructuralColumn" is always "true" if set, and is set on columns that should be included on
	// every snapshot or subscription request, but should not be directly user-visible.
	//
	// "hierarchicalTable.isExpandByColumn" is always "true" if set, and is set on all the columns that must be included
	// in a HierarchicalTableViewRequest's key table, if a key table is specified. These columns are generally
	// user-visible and displayed before other columns, unless they also have "hierarchicalTable.isStructuralColumn" set.
	//
	// "hierarchicalTable.isRowDepthColumn" is always "true" if set, and is set on a single column that specifies the
	// depth of a row. That column will always have "hierarchicalTable.isExpandByColumn" set for RollupTables, but never
	// for TreeTables.
	//
	// "hierarchicalTable.isRowExpandedColumn" is always "true" if set, and is set on a single nullable column of
	// booleans that specifies whether a row is expandable or expanded. Values will be null for rows that are not
	// expandable, true for expanded rows, false for rows that are not expanded (but expandable). Leaf rows have no
	// children to expand, and hence will always have a null value for this column.
	//
	// "rollupTable.isAggregatedNodeColumn" is always "true" if set, and is set on all columns of a RollupTable that
	// belong to the aggregated nodes.
	//
	// "rollupTable.isConstituentNodeColumn" is always "true" if set, and is set on all columns of a RollupTable that
	// belong to the constituent nodes. No such columns will be present if constituents are not included in the
	// RollupTable.
	//
	// "rollupTable.isGroupByColumn" is always "true" if set, and is set on all columns of a RollupTable that are
	// "group-by columns", whether the node is aggregated or constituent. All nodes have the same names and types for
	// columns labeled in this way. Such columns will always have "hierarchicalTable.isExpandByColumn" set if and only if
	// they also have "rollupTable.isAggregatedNodeColumn" set.
	//
	// "rollupTable.aggregationInputColumnName" is set to the (string) name of the corresponding constituent column that
	// was used as input to this aggregation node column. May have an empty value, because some aggregations take no
	// input columns, for example "Count". This is only ever present on columns with "rollupTable.isAggregatedNodeColumn"
	// set.
	//
	// "treeTable.isNodeColumn" is always "true" if set, and is set on all columns of a TreeTable that nodes inherit from
	// the source Table.
	//
	// "treeTable.isIdentifierColumn" is always "true" if set, and is set on the single column that uniquely identifies a
	// TreeTable row and links it to its children. Such columns will always have "hierarchicalTable.isExpandByColumn"
	// set.
	//
	// "treeTable.isParentIdentifierColumn" is always "true" if set, and is set on the single column that links a
	// TreeTable row to its parent row.
	SnapshotSchema []byte `protobuf:"bytes,1,opt,name=snapshot_schema,json=snapshotSchema,proto3" json:"snapshot_schema,omitempty"`
	// Whether or not this table might change.
	IsStatic bool `protobuf:"varint,2,opt,name=is_static,json=isStatic,proto3" json:"is_static,omitempty"`
}

func (x *HierarchicalTableDescriptor) Reset() {
	*x = HierarchicalTableDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableDescriptor) ProtoMessage() {}

func (x *HierarchicalTableDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableDescriptor.ProtoReflect.Descriptor instead.
func (*HierarchicalTableDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{6}
}

func (x *HierarchicalTableDescriptor) GetSnapshotSchema() []byte {
	if x != nil {
		return x.SnapshotSchema
	}
	return nil
}

func (x *HierarchicalTableDescriptor) GetIsStatic() bool {
	if x != nil {
		return x.IsStatic
	}
	return false
}

type HierarchicalTableViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold the result HierarchicalTableView
	ResultViewId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_view_id,json=resultViewId,proto3" json:"result_view_id,omitempty"`
	// Types that are assignable to Target:
	//	*HierarchicalTableViewRequest_HierarchicalTableId
	//	*HierarchicalTableViewRequest_ExistingViewId
	Target isHierarchicalTableViewRequest_Target `protobuf_oneof:"target"`
	// Description for the expansions that define this view of the HierarchicalTable. If not present, the result will
	// have default expansions, For RollupTables this will be the root (single row, top-level aggregation) and the next
	// level if one exists (that is, if there are one or more group-by columns, or constituents are included). For
	// TreeTables, this will be the root (one row for each child of the "null" parent identifier).
	Expansions *HierarchicalTableViewKeyTableDescriptor `protobuf:"bytes,4,opt,name=expansions,proto3" json:"expansions,omitempty"`
}

func (x *HierarchicalTableViewRequest) Reset() {
	*x = HierarchicalTableViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableViewRequest) ProtoMessage() {}

func (x *HierarchicalTableViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableViewRequest.ProtoReflect.Descriptor instead.
func (*HierarchicalTableViewRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{7}
}

func (x *HierarchicalTableViewRequest) GetResultViewId() *ticket.Ticket {
	if x != nil {
		return x.ResultViewId
	}
	return nil
}

func (m *HierarchicalTableViewRequest) GetTarget() isHierarchicalTableViewRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *HierarchicalTableViewRequest) GetHierarchicalTableId() *ticket.Ticket {
	if x, ok := x.GetTarget().(*HierarchicalTableViewRequest_HierarchicalTableId); ok {
		return x.HierarchicalTableId
	}
	return nil
}

func (x *HierarchicalTableViewRequest) GetExistingViewId() *ticket.Ticket {
	if x, ok := x.GetTarget().(*HierarchicalTableViewRequest_ExistingViewId); ok {
		return x.ExistingViewId
	}
	return nil
}

func (x *HierarchicalTableViewRequest) GetExpansions() *HierarchicalTableViewKeyTableDescriptor {
	if x != nil {
		return x.Expansions
	}
	return nil
}

type isHierarchicalTableViewRequest_Target interface {
	isHierarchicalTableViewRequest_Target()
}

type HierarchicalTableViewRequest_HierarchicalTableId struct {
	// Ticket for the HierarchicalTable (RollupTable or TreeTable) to expand
	HierarchicalTableId *ticket.Ticket `protobuf:"bytes,2,opt,name=hierarchical_table_id,json=hierarchicalTableId,proto3,oneof"`
}

type HierarchicalTableViewRequest_ExistingViewId struct {
	// Ticket for an existing HierarchicalTableView. The result view will inherit the HierarchicalTable from the
	// existing view. The two views will share state used for caching snapshot data, but the server implementation may
	// limit parallelism when performing snapshots for either view.
	// Use this field when you intend to stop using the existing view and instead begin to use the result view.
	ExistingViewId *ticket.Ticket `protobuf:"bytes,3,opt,name=existing_view_id,json=existingViewId,proto3,oneof"`
}

func (*HierarchicalTableViewRequest_HierarchicalTableId) isHierarchicalTableViewRequest_Target() {}

func (*HierarchicalTableViewRequest_ExistingViewId) isHierarchicalTableViewRequest_Target() {}

type HierarchicalTableViewKeyTableDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket that represents a Table of expanded or contracted keys from a HierarchicalTable (RollupTable or TreeTable).
	// The format for the key Table is dictated by the schema from the corresponding HierarchicalTableDescriptor. It is
	// expected to have one column for each "expand-by column", including the "row depth column" for RollupTables only,
	// and (optionally) an "action" column whose name is specified in the key_table_action_column field.
	// If the Table is empty the result will have only default nodes expanded.
	KeyTableId *ticket.Ticket `protobuf:"bytes,1,opt,name=key_table_id,json=keyTableId,proto3" json:"key_table_id,omitempty"`
	// The name of a column of bytes found in the key table that specifies the action desired for the node selected by
	// the other columns for each row. Takes on the value 1 for nodes that should be expanded, 3 for nodes that should be
	// expanded along with their descendants, and 4 for nodes that should be contracted.
	// If this column name is not present, all nodes in the key table will be expanded without their descendants.
	KeyTableActionColumn *string `protobuf:"bytes,2,opt,name=key_table_action_column,json=keyTableActionColumn,proto3,oneof" json:"key_table_action_column,omitempty"`
}

func (x *HierarchicalTableViewKeyTableDescriptor) Reset() {
	*x = HierarchicalTableViewKeyTableDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableViewKeyTableDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableViewKeyTableDescriptor) ProtoMessage() {}

func (x *HierarchicalTableViewKeyTableDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableViewKeyTableDescriptor.ProtoReflect.Descriptor instead.
func (*HierarchicalTableViewKeyTableDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{8}
}

func (x *HierarchicalTableViewKeyTableDescriptor) GetKeyTableId() *ticket.Ticket {
	if x != nil {
		return x.KeyTableId
	}
	return nil
}

func (x *HierarchicalTableViewKeyTableDescriptor) GetKeyTableActionColumn() string {
	if x != nil && x.KeyTableActionColumn != nil {
		return *x.KeyTableActionColumn
	}
	return ""
}

type HierarchicalTableViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HierarchicalTableViewResponse) Reset() {
	*x = HierarchicalTableViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableViewResponse) ProtoMessage() {}

func (x *HierarchicalTableViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableViewResponse.ProtoReflect.Descriptor instead.
func (*HierarchicalTableViewResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{9}
}

type HierarchicalTableSourceExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold an export of the HierarchicalTable's source Table
	ResultTableId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_table_id,json=resultTableId,proto3" json:"result_table_id,omitempty"`
	// Ticket for the (existing) HierarchicalTable (RollupTable or TreeTable) to export the source Table for
	HierarchicalTableId *ticket.Ticket `protobuf:"bytes,2,opt,name=hierarchical_table_id,json=hierarchicalTableId,proto3" json:"hierarchical_table_id,omitempty"`
}

func (x *HierarchicalTableSourceExportRequest) Reset() {
	*x = HierarchicalTableSourceExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableSourceExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableSourceExportRequest) ProtoMessage() {}

func (x *HierarchicalTableSourceExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableSourceExportRequest.ProtoReflect.Descriptor instead.
func (*HierarchicalTableSourceExportRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{10}
}

func (x *HierarchicalTableSourceExportRequest) GetResultTableId() *ticket.Ticket {
	if x != nil {
		return x.ResultTableId
	}
	return nil
}

func (x *HierarchicalTableSourceExportRequest) GetHierarchicalTableId() *ticket.Ticket {
	if x != nil {
		return x.HierarchicalTableId
	}
	return nil
}

var File_deephaven_proto_hierarchicaltable_proto protoreflect.FileDescriptor

var file_deephaven_proto_hierarchicaltable_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x02, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0c,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x10, 0x0a,
	0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcc, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x73, 0x22, 0x0e,
	0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86,
	0x03, 0x0a, 0x1d, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6a, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x19, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x1b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x18, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47,
	0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x1b, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0x9d,
	0x03, 0x0a, 0x1c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x12, 0x5f, 0x0a, 0x15, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x68, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xce,
	0x01, 0x0a, 0x27, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x6b, 0x65, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x17, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x6b, 0x65, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22,
	0x1f, 0x0a, 0x1d, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd8, 0x01, 0x0a, 0x24, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x15,
	0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x32, 0xa9, 0x05, 0x0a, 0x18,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x12, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x2e, 0x69, 0x6f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x89, 0x01, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x0c,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4d, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x47, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61,
	0x6c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deephaven_proto_hierarchicaltable_proto_rawDescOnce sync.Once
	file_deephaven_proto_hierarchicaltable_proto_rawDescData = file_deephaven_proto_hierarchicaltable_proto_rawDesc
)

func file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP() []byte {
	file_deephaven_proto_hierarchicaltable_proto_rawDescOnce.Do(func() {
		file_deephaven_proto_hierarchicaltable_proto_rawDescData = protoimpl.X.CompressGZIP(file_deephaven_proto_hierarchicaltable_proto_rawDescData)
	})
	return file_deephaven_proto_hierarchicaltable_proto_rawDescData
}

var file_deephaven_proto_hierarchicaltable_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_deephaven_proto_hierarchicaltable_proto_goTypes = []interface{}{
	(*RollupRequest)(nil),                           // 0: io.deephaven.proto.backplane.grpc.RollupRequest
	(*RollupResponse)(nil),                          // 1: io.deephaven.proto.backplane.grpc.RollupResponse
	(*TreeRequest)(nil),                             // 2: io.deephaven.proto.backplane.grpc.TreeRequest
	(*TreeResponse)(nil),                            // 3: io.deephaven.proto.backplane.grpc.TreeResponse
	(*HierarchicalTableApplyRequest)(nil),           // 4: io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest
	(*HierarchicalTableApplyResponse)(nil),          // 5: io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse
	(*HierarchicalTableDescriptor)(nil),             // 6: io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor
	(*HierarchicalTableViewRequest)(nil),            // 7: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest
	(*HierarchicalTableViewKeyTableDescriptor)(nil), // 8: io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor
	(*HierarchicalTableViewResponse)(nil),           // 9: io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse
	(*HierarchicalTableSourceExportRequest)(nil),    // 10: io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest
	(*ticket.Ticket)(nil),                           // 11: io.deephaven.proto.backplane.grpc.Ticket
	(*table.Aggregation)(nil),                       // 12: io.deephaven.proto.backplane.grpc.Aggregation
	(*table.Condition)(nil),                         // 13: io.deephaven.proto.backplane.grpc.Condition
	(*table.SortDescriptor)(nil),                    // 14: io.deephaven.proto.backplane.grpc.SortDescriptor
	(*table.ExportedTableCreationResponse)(nil),     // 15: io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse
}
var file_deephaven_proto_hierarchicaltable_proto_depIdxs = []int32{
	11, // 0: io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 1: io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	12, // 2: io.deephaven.proto.backplane.grpc.RollupRequest.aggregations:type_name -> io.deephaven.proto.backplane.grpc.Aggregation
	11, // 3: io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 4: io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 5: io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 6: io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	13, // 7: io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters:type_name -> io.deephaven.proto.backplane.grpc.Condition
	14, // 8: io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts:type_name -> io.deephaven.proto.backplane.grpc.SortDescriptor
	11, // 9: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 10: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 11: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	8,  // 12: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions:type_name -> io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor
	11, // 13: io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 14: io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 15: io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	0,  // 16: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Rollup:input_type -> io.deephaven.proto.backplane.grpc.RollupRequest
	2,  // 17: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Tree:input_type -> io.deephaven.proto.backplane.grpc.TreeRequest
	4,  // 18: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Apply:input_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest
	7,  // 19: io.deephaven.proto.backplane.grpc.HierarchicalTableService.View:input_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest
	10, // 20: io.deephaven.proto.backplane.grpc.HierarchicalTableService.ExportSource:input_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest
	1,  // 21: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Rollup:output_type -> io.deephaven.proto.backplane.grpc.RollupResponse
	3,  // 22: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Tree:output_type -> io.deephaven.proto.backplane.grpc.TreeResponse
	5,  // 23: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Apply:output_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse
	9,  // 24: io.deephaven.proto.backplane.grpc.HierarchicalTableService.View:output_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse
	15, // 25: io.deephaven.proto.backplane.grpc.HierarchicalTableService.ExportSource:output_type -> io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_deephaven_proto_hierarchicaltable_proto_init() }
func file_deephaven_proto_hierarchicaltable_proto_init() {
	if File_deephaven_proto_hierarchicaltable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableViewKeyTableDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableSourceExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_deephaven_proto_hierarchicaltable_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HierarchicalTableViewRequest_HierarchicalTableId)(nil),
		(*HierarchicalTableViewRequest_ExistingViewId)(nil),
	}
	file_deephaven_proto_hierarchicaltable_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deephaven_proto_hierarchicaltable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deephaven_proto_hierarchicaltable_proto_goTypes,
		DependencyIndexes: file_deephaven_proto_hierarchicaltable_proto_depIdxs,
		MessageInfos:      file_deephaven_proto_hierarchicaltable_proto_msgTypes,
	}.Build()
	File_deephaven_proto_hierarchicaltable_proto = out.File
	file_deephaven_proto_hierarchicaltable_proto_rawDesc = nil
	file_deephaven_proto_hierarchicaltable_proto_goTypes = nil
	file_deephaven_proto_hierarchicaltable_proto_depIdxs = nil
}
