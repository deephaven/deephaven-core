//
// Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: deephaven/proto/hierarchicaltable.proto

package hierarchicaltable

import (
	table "github.com/deephaven/deephaven-core/go/internal/proto/table"
	ticket "github.com/deephaven/deephaven-core/go/internal/proto/ticket"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RollupLeafType int32

const (
	RollupLeafType_UNDEFINED   RollupLeafType = 0
	RollupLeafType_NORMAL      RollupLeafType = 1
	RollupLeafType_CONSTITUENT RollupLeafType = 2
)

// Enum value maps for RollupLeafType.
var (
	RollupLeafType_name = map[int32]string{
		0: "UNDEFINED",
		1: "NORMAL",
		2: "CONSTITUENT",
	}
	RollupLeafType_value = map[string]int32{
		"UNDEFINED":   0,
		"NORMAL":      1,
		"CONSTITUENT": 2,
	}
)

func (x RollupLeafType) Enum() *RollupLeafType {
	p := new(RollupLeafType)
	*p = x
	return p
}

func (x RollupLeafType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RollupLeafType) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_hierarchicaltable_proto_enumTypes[0].Descriptor()
}

func (RollupLeafType) Type() protoreflect.EnumType {
	return &file_deephaven_proto_hierarchicaltable_proto_enumTypes[0]
}

func (x RollupLeafType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RollupLeafType.Descriptor instead.
func (RollupLeafType) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{0}
}

type RollupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold a default view of the results of the rollup operation
	ResultViewId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_view_id,json=resultViewId,proto3" json:"result_view_id,omitempty"`
	// Ticket for the source Table object to rollup
	SourceId *ticket.Ticket `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The aggregations that should be applied at each level of the rollup
	Aggregations []*table.ComboAggregateRequest_Aggregate `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	// Whether to include the leaf-level constituents in the result
	IncludeConstituents bool `protobuf:"varint,4,opt,name=include_constituents,json=includeConstituents,proto3" json:"include_constituents,omitempty"`
	// The names of the columns to rollup by
	GroupByColumns []string `protobuf:"bytes,5,rep,name=group_by_columns,json=groupByColumns,proto3" json:"group_by_columns,omitempty"`
}

func (x *RollupRequest) Reset() {
	*x = RollupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupRequest) ProtoMessage() {}

func (x *RollupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupRequest.ProtoReflect.Descriptor instead.
func (*RollupRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{0}
}

func (x *RollupRequest) GetResultViewId() *ticket.Ticket {
	if x != nil {
		return x.ResultViewId
	}
	return nil
}

func (x *RollupRequest) GetSourceId() *ticket.Ticket {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *RollupRequest) GetAggregations() []*table.ComboAggregateRequest_Aggregate {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *RollupRequest) GetIncludeConstituents() bool {
	if x != nil {
		return x.IncludeConstituents
	}
	return false
}

func (x *RollupRequest) GetGroupByColumns() []string {
	if x != nil {
		return x.GroupByColumns
	}
	return nil
}

type RollupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollupResponse) Reset() {
	*x = RollupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupResponse) ProtoMessage() {}

func (x *RollupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupResponse.ProtoReflect.Descriptor instead.
func (*RollupResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{1}
}

type TreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold a default view of the results of the tree operation
	ResultViewId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_view_id,json=resultViewId,proto3" json:"result_view_id,omitempty"`
	// Ticket for the source Table object to tree
	SourceId *ticket.Ticket `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The name of the column containing the unique identifier for each row in the source table
	IdentifierColumn string `protobuf:"bytes,3,opt,name=identifier_column,json=identifierColumn,proto3" json:"identifier_column,omitempty"`
	// The name of the column containing the parent row's unique identifier for each row in the source table
	ParentIdentifierColumn string `protobuf:"bytes,4,opt,name=parent_identifier_column,json=parentIdentifierColumn,proto3" json:"parent_identifier_column,omitempty"`
}

func (x *TreeRequest) Reset() {
	*x = TreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeRequest) ProtoMessage() {}

func (x *TreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeRequest.ProtoReflect.Descriptor instead.
func (*TreeRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{2}
}

func (x *TreeRequest) GetResultViewId() *ticket.Ticket {
	if x != nil {
		return x.ResultViewId
	}
	return nil
}

func (x *TreeRequest) GetSourceId() *ticket.Ticket {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *TreeRequest) GetIdentifierColumn() string {
	if x != nil {
		return x.IdentifierColumn
	}
	return ""
}

func (x *TreeRequest) GetParentIdentifierColumn() string {
	if x != nil {
		return x.ParentIdentifierColumn
	}
	return ""
}

type TreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TreeResponse) Reset() {
	*x = TreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeResponse) ProtoMessage() {}

func (x *TreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeResponse.ProtoReflect.Descriptor instead.
func (*TreeResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{3}
}

type HierarchicalTableSourceExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket to use to hold an export of the hierarchical table view's source table
	ResultId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// Ticket for the (existing) hierarchical table view
	ViewId *ticket.Ticket `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (x *HierarchicalTableSourceExportRequest) Reset() {
	*x = HierarchicalTableSourceExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableSourceExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableSourceExportRequest) ProtoMessage() {}

func (x *HierarchicalTableSourceExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableSourceExportRequest.ProtoReflect.Descriptor instead.
func (*HierarchicalTableSourceExportRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{4}
}

func (x *HierarchicalTableSourceExportRequest) GetResultId() *ticket.Ticket {
	if x != nil {
		return x.ResultId
	}
	return nil
}

func (x *HierarchicalTableSourceExportRequest) GetViewId() *ticket.Ticket {
	if x != nil {
		return x.ViewId
	}
	return nil
}

type HierarchicalTableSourceExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HierarchicalTableSourceExportResponse) Reset() {
	*x = HierarchicalTableSourceExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableSourceExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableSourceExportResponse) ProtoMessage() {}

func (x *HierarchicalTableSourceExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableSourceExportResponse.ProtoReflect.Descriptor instead.
func (*HierarchicalTableSourceExportResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{5}
}

type HierarchicalTableViewDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column names to expand by
	// Implementation notes:
	//   - Rollups: The group-by columns
	//   - Trees: The single identifier column
	ExpandByColumns []string `protobuf:"bytes,1,rep,name=expand_by_columns,json=expandByColumns,proto3" json:"expand_by_columns,omitempty"`
	// The name of a column that signifies the "width" (in defined columns) for a rollup key. Must be included along
	// with expanded columns in a rollup key table.
	RollupKeyWidthColumn *string `protobuf:"bytes,2,opt,name=rollup_key_width_column,json=rollupKeyWidthColumn,proto3,oneof" json:"rollup_key_width_column,omitempty"`
	// Whether this rollup's leaf nodes are "normal" first level aggregations or constituents
	RollupLeafType *RollupLeafType `protobuf:"varint,3,opt,name=rollup_leaf_type,json=rollupLeafType,proto3,enum=io.deephaven.proto.backplane.grpc.RollupLeafType,oneof" json:"rollup_leaf_type,omitempty"`
	// '='-delimited pairs from output (aggregation) column name to input (constituent) column name
	RollupOutputInputColumnPairs []string `protobuf:"bytes,4,rep,name=rollup_output_input_column_pairs,json=rollupOutputInputColumnPairs,proto3" json:"rollup_output_input_column_pairs,omitempty"`
	// Schema as described in Arrow Message.fbs::Message.
	SchemaHeader []byte `protobuf:"bytes,5,opt,name=schema_header,json=schemaHeader,proto3" json:"schema_header,omitempty"`
}

func (x *HierarchicalTableViewDescriptor) Reset() {
	*x = HierarchicalTableViewDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableViewDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableViewDescriptor) ProtoMessage() {}

func (x *HierarchicalTableViewDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableViewDescriptor.ProtoReflect.Descriptor instead.
func (*HierarchicalTableViewDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{6}
}

func (x *HierarchicalTableViewDescriptor) GetExpandByColumns() []string {
	if x != nil {
		return x.ExpandByColumns
	}
	return nil
}

func (x *HierarchicalTableViewDescriptor) GetRollupKeyWidthColumn() string {
	if x != nil && x.RollupKeyWidthColumn != nil {
		return *x.RollupKeyWidthColumn
	}
	return ""
}

func (x *HierarchicalTableViewDescriptor) GetRollupLeafType() RollupLeafType {
	if x != nil && x.RollupLeafType != nil {
		return *x.RollupLeafType
	}
	return RollupLeafType_UNDEFINED
}

func (x *HierarchicalTableViewDescriptor) GetRollupOutputInputColumnPairs() []string {
	if x != nil {
		return x.RollupOutputInputColumnPairs
	}
	return nil
}

func (x *HierarchicalTableViewDescriptor) GetSchemaHeader() []byte {
	if x != nil {
		return x.SchemaHeader
	}
	return nil
}

type HierarchicalTableViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket for the resulting hierarchical table view
	ResultViewId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_view_id,json=resultViewId,proto3" json:"result_view_id,omitempty"`
	// Ticket for the existing view to inherit the hierarchical table (TODO-RWC: and other fields?) from
	ExistingViewId *ticket.Ticket `protobuf:"bytes,2,opt,name=existing_view_id,json=existingViewId,proto3" json:"existing_view_id,omitempty"`
	// Ticket that represents expanded or contracted keys from a hierarchical (rollup or tree) table.
	// If empty or not present, the result will have all nodes collapsed.
	KeyTable *ticket.Ticket `protobuf:"bytes,3,opt,name=key_table,json=keyTable,proto3" json:"key_table,omitempty"`
	// Filters to apply to the hierarchical table nodes
	Filters []*table.Condition `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	// Sorts to apply to the hierarchical table nodes
	Sorts []*table.SortDescriptor `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts,omitempty"`
}

func (x *HierarchicalTableViewRequest) Reset() {
	*x = HierarchicalTableViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableViewRequest) ProtoMessage() {}

func (x *HierarchicalTableViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableViewRequest.ProtoReflect.Descriptor instead.
func (*HierarchicalTableViewRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{7}
}

func (x *HierarchicalTableViewRequest) GetResultViewId() *ticket.Ticket {
	if x != nil {
		return x.ResultViewId
	}
	return nil
}

func (x *HierarchicalTableViewRequest) GetExistingViewId() *ticket.Ticket {
	if x != nil {
		return x.ExistingViewId
	}
	return nil
}

func (x *HierarchicalTableViewRequest) GetKeyTable() *ticket.Ticket {
	if x != nil {
		return x.KeyTable
	}
	return nil
}

func (x *HierarchicalTableViewRequest) GetFilters() []*table.Condition {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *HierarchicalTableViewRequest) GetSorts() []*table.SortDescriptor {
	if x != nil {
		return x.Sorts
	}
	return nil
}

type HierarchicalTableViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HierarchicalTableViewResponse) Reset() {
	*x = HierarchicalTableViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalTableViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalTableViewResponse) ProtoMessage() {}

func (x *HierarchicalTableViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_hierarchicaltable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalTableViewResponse.ProtoReflect.Descriptor instead.
func (*HierarchicalTableViewResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP(), []int{8}
}

var File_deephaven_proto_hierarchicaltable_proto protoreflect.FileDescriptor

var file_deephaven_proto_hierarchicaltable_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0b, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x24, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x27,
	0x0a, 0x25, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x1f, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x42, 0x79,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x72, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x72, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x64, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x6c, 0x65,
	0x61, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x01, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x1c, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x1c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x6f,
	0x72, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x3c, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c, 0x65,
	0x61, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x49, 0x54, 0x55, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x32, 0xa2, 0x04, 0x0a, 0x18, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6d, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x12, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x48, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x04,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4d, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x47, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61,
	0x6c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deephaven_proto_hierarchicaltable_proto_rawDescOnce sync.Once
	file_deephaven_proto_hierarchicaltable_proto_rawDescData = file_deephaven_proto_hierarchicaltable_proto_rawDesc
)

func file_deephaven_proto_hierarchicaltable_proto_rawDescGZIP() []byte {
	file_deephaven_proto_hierarchicaltable_proto_rawDescOnce.Do(func() {
		file_deephaven_proto_hierarchicaltable_proto_rawDescData = protoimpl.X.CompressGZIP(file_deephaven_proto_hierarchicaltable_proto_rawDescData)
	})
	return file_deephaven_proto_hierarchicaltable_proto_rawDescData
}

var file_deephaven_proto_hierarchicaltable_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_deephaven_proto_hierarchicaltable_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_deephaven_proto_hierarchicaltable_proto_goTypes = []interface{}{
	(RollupLeafType)(0),                           // 0: io.deephaven.proto.backplane.grpc.RollupLeafType
	(*RollupRequest)(nil),                         // 1: io.deephaven.proto.backplane.grpc.RollupRequest
	(*RollupResponse)(nil),                        // 2: io.deephaven.proto.backplane.grpc.RollupResponse
	(*TreeRequest)(nil),                           // 3: io.deephaven.proto.backplane.grpc.TreeRequest
	(*TreeResponse)(nil),                          // 4: io.deephaven.proto.backplane.grpc.TreeResponse
	(*HierarchicalTableSourceExportRequest)(nil),  // 5: io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest
	(*HierarchicalTableSourceExportResponse)(nil), // 6: io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportResponse
	(*HierarchicalTableViewDescriptor)(nil),       // 7: io.deephaven.proto.backplane.grpc.HierarchicalTableViewDescriptor
	(*HierarchicalTableViewRequest)(nil),          // 8: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest
	(*HierarchicalTableViewResponse)(nil),         // 9: io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse
	(*ticket.Ticket)(nil),                         // 10: io.deephaven.proto.backplane.grpc.Ticket
	(*table.ComboAggregateRequest_Aggregate)(nil), // 11: io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate
	(*table.Condition)(nil),                       // 12: io.deephaven.proto.backplane.grpc.Condition
	(*table.SortDescriptor)(nil),                  // 13: io.deephaven.proto.backplane.grpc.SortDescriptor
}
var file_deephaven_proto_hierarchicaltable_proto_depIdxs = []int32{
	10, // 0: io.deephaven.proto.backplane.grpc.RollupRequest.result_view_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	10, // 1: io.deephaven.proto.backplane.grpc.RollupRequest.source_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	11, // 2: io.deephaven.proto.backplane.grpc.RollupRequest.aggregations:type_name -> io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate
	10, // 3: io.deephaven.proto.backplane.grpc.TreeRequest.result_view_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	10, // 4: io.deephaven.proto.backplane.grpc.TreeRequest.source_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	10, // 5: io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	10, // 6: io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.view_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	0,  // 7: io.deephaven.proto.backplane.grpc.HierarchicalTableViewDescriptor.rollup_leaf_type:type_name -> io.deephaven.proto.backplane.grpc.RollupLeafType
	10, // 8: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	10, // 9: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	10, // 10: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.key_table:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	12, // 11: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.filters:type_name -> io.deephaven.proto.backplane.grpc.Condition
	13, // 12: io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.sorts:type_name -> io.deephaven.proto.backplane.grpc.SortDescriptor
	1,  // 13: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Rollup:input_type -> io.deephaven.proto.backplane.grpc.RollupRequest
	3,  // 14: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Tree:input_type -> io.deephaven.proto.backplane.grpc.TreeRequest
	5,  // 15: io.deephaven.proto.backplane.grpc.HierarchicalTableService.ExportSource:input_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest
	8,  // 16: io.deephaven.proto.backplane.grpc.HierarchicalTableService.View:input_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest
	2,  // 17: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Rollup:output_type -> io.deephaven.proto.backplane.grpc.RollupResponse
	4,  // 18: io.deephaven.proto.backplane.grpc.HierarchicalTableService.Tree:output_type -> io.deephaven.proto.backplane.grpc.TreeResponse
	6,  // 19: io.deephaven.proto.backplane.grpc.HierarchicalTableService.ExportSource:output_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportResponse
	9,  // 20: io.deephaven.proto.backplane.grpc.HierarchicalTableService.View:output_type -> io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_deephaven_proto_hierarchicaltable_proto_init() }
func file_deephaven_proto_hierarchicaltable_proto_init() {
	if File_deephaven_proto_hierarchicaltable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableSourceExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableSourceExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableViewDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_hierarchicaltable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalTableViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_deephaven_proto_hierarchicaltable_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deephaven_proto_hierarchicaltable_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deephaven_proto_hierarchicaltable_proto_goTypes,
		DependencyIndexes: file_deephaven_proto_hierarchicaltable_proto_depIdxs,
		EnumInfos:         file_deephaven_proto_hierarchicaltable_proto_enumTypes,
		MessageInfos:      file_deephaven_proto_hierarchicaltable_proto_msgTypes,
	}.Build()
	File_deephaven_proto_hierarchicaltable_proto = out.File
	file_deephaven_proto_hierarchicaltable_proto_rawDesc = nil
	file_deephaven_proto_hierarchicaltable_proto_goTypes = nil
	file_deephaven_proto_hierarchicaltable_proto_depIdxs = nil
}
