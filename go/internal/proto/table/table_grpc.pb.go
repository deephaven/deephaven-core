// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: deephaven/proto/table.proto

package table

import (
	context "context"
	ticket "github.com/deephaven/deephaven-core/go/internal/proto/ticket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableServiceClient interface {
	// Request an ETCR for this ticket. Ticket must reference a Table.
	GetExportedTableCreationResponse(ctx context.Context, in *ticket.Ticket, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Fetches a Table from an existing source ticket and exports it to the local session result ticket.
	FetchTable(ctx context.Context, in *FetchTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Fetches a pandas table from an existing source ticket and exports it to the local session result ticket.
	FetchPandasTable(ctx context.Context, in *FetchPandasTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Create a table that has preview columns applied to an existing source table.
	ApplyPreviewColumns(ctx context.Context, in *ApplyPreviewColumnsRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Create an empty table with the given column names and types.
	EmptyTable(ctx context.Context, in *EmptyTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Create a time table with the given start time and period.
	TimeTable(ctx context.Context, in *TimeTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Drop columns from the parent table.
	DropColumns(ctx context.Context, in *DropColumnsRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the update table operation.
	Update(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the lazyUpdate table operation.
	LazyUpdate(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the view table operation.
	View(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the updateView table operation.
	UpdateView(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Select the given columns from the given table.
	Select(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns the result of an updateBy table operation.
	UpdateBy(ctx context.Context, in *UpdateByRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns a new table definition with the unique tuples of the specified columns
	SelectDistinct(ctx context.Context, in *SelectDistinctRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Filter parent table with structured filters.
	Filter(ctx context.Context, in *FilterTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Filter parent table with unstructured filters.
	UnstructuredFilter(ctx context.Context, in *UnstructuredFilterTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Sort parent table via the provide sort descriptors.
	Sort(ctx context.Context, in *SortTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Extract rows from the head of the parent table.
	Head(ctx context.Context, in *HeadOrTailRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Extract rows from the tail of the parent table.
	Tail(ctx context.Context, in *HeadOrTailRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Run the headBy table operation for the given group by columns on the given table.
	HeadBy(ctx context.Context, in *HeadOrTailByRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Run the tailBy operation for the given group by columns on the given table.
	TailBy(ctx context.Context, in *HeadOrTailByRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Ungroup the given columns (all columns will be ungrouped if columnsToUngroup is empty or unspecified).
	Ungroup(ctx context.Context, in *UngroupRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Create a merged table from the given input tables. If a key column is provided (not null), a sorted
	// merged will be performed using that column.
	MergeTables(ctx context.Context, in *MergeTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns the result of a cross join operation. Also known as the cartesian product.
	CrossJoinTables(ctx context.Context, in *CrossJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns the result of a natural join operation.
	NaturalJoinTables(ctx context.Context, in *NaturalJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns the result of an exact join operation.
	ExactJoinTables(ctx context.Context, in *ExactJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns the result of a left join operation.
	LeftJoinTables(ctx context.Context, in *LeftJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns the result of an as of join operation.
	AsOfJoinTables(ctx context.Context, in *AsOfJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns the result of an aggregate table operation.
	ComboAggregate(ctx context.Context, in *ComboAggregateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Snapshot rightId, triggered by leftId, and export the resulting new Table.
	// The left table's change events cause a new snapshot to be taken. The result table includes a
	// "snapshot key" which is a subset (possibly all) of the left table's columns. The
	// remaining columns in the result table come from right table, the table being snapshotted.
	Snapshot(ctx context.Context, in *SnapshotTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Returns a new table with a flattened row set.
	Flatten(ctx context.Context, in *FlattenRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// *
	// Downsamples a table assume its contents will be rendered in a run chart, with each subsequent row holding a later
	// X value (i.e., sorted on that column). Multiple Y columns can be specified, as can a range of values for the X
	// column to support zooming in.
	RunChartDownsample(ctx context.Context, in *RunChartDownsampleRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// *
	// Creates a new Table based on the provided configuration. This can be used as a regular table from the other methods
	// in this interface, or can be interacted with via the InputTableService to modify its contents.
	CreateInputTable(ctx context.Context, in *CreateInputTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// *
	// Filters the left table based on the set of values in the right table.
	//
	// Note that when the right table ticks, all of the rows in the left table are going to be re-evaluated,
	// thus the intention is that the right table is fairly slow moving compared with the left table.
	WhereIn(ctx context.Context, in *WhereInRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error)
	// Batch a series of requests and send them all at once. This enables the user to create intermediate tables without
	// requiring them to be exported and managed by the client. The server will automatically release any tables when they
	// are no longer depended upon.
	Batch(ctx context.Context, in *BatchTableRequest, opts ...grpc.CallOption) (TableService_BatchClient, error)
	// Establish a stream of table updates for cheap notifications of table size updates.
	//
	// New streams will flush updates for all existing table exports. An export id of zero will be sent to indicate all
	// exports have sent their refresh update. Table updates may be intermingled with initial refresh updates after their
	// initial update had been sent.
	ExportedTableUpdates(ctx context.Context, in *ExportedTableUpdatesRequest, opts ...grpc.CallOption) (TableService_ExportedTableUpdatesClient, error)
}

type tableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableServiceClient(cc grpc.ClientConnInterface) TableServiceClient {
	return &tableServiceClient{cc}
}

func (c *tableServiceClient) GetExportedTableCreationResponse(ctx context.Context, in *ticket.Ticket, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/GetExportedTableCreationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) FetchTable(ctx context.Context, in *FetchTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/FetchTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) FetchPandasTable(ctx context.Context, in *FetchPandasTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/FetchPandasTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) ApplyPreviewColumns(ctx context.Context, in *ApplyPreviewColumnsRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/ApplyPreviewColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) EmptyTable(ctx context.Context, in *EmptyTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/EmptyTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) TimeTable(ctx context.Context, in *TimeTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/TimeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) DropColumns(ctx context.Context, in *DropColumnsRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/DropColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Update(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) LazyUpdate(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/LazyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) View(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) UpdateView(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/UpdateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Select(ctx context.Context, in *SelectOrUpdateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) UpdateBy(ctx context.Context, in *UpdateByRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/UpdateBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) SelectDistinct(ctx context.Context, in *SelectDistinctRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/SelectDistinct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Filter(ctx context.Context, in *FilterTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) UnstructuredFilter(ctx context.Context, in *UnstructuredFilterTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/UnstructuredFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Sort(ctx context.Context, in *SortTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Sort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Head(ctx context.Context, in *HeadOrTailRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Head", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Tail(ctx context.Context, in *HeadOrTailRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Tail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) HeadBy(ctx context.Context, in *HeadOrTailByRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/HeadBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) TailBy(ctx context.Context, in *HeadOrTailByRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/TailBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Ungroup(ctx context.Context, in *UngroupRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Ungroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) MergeTables(ctx context.Context, in *MergeTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/MergeTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) CrossJoinTables(ctx context.Context, in *CrossJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/CrossJoinTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) NaturalJoinTables(ctx context.Context, in *NaturalJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/NaturalJoinTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) ExactJoinTables(ctx context.Context, in *ExactJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/ExactJoinTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) LeftJoinTables(ctx context.Context, in *LeftJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/LeftJoinTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) AsOfJoinTables(ctx context.Context, in *AsOfJoinTablesRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/AsOfJoinTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) ComboAggregate(ctx context.Context, in *ComboAggregateRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/ComboAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Snapshot(ctx context.Context, in *SnapshotTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Flatten(ctx context.Context, in *FlattenRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/Flatten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) RunChartDownsample(ctx context.Context, in *RunChartDownsampleRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/RunChartDownsample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) CreateInputTable(ctx context.Context, in *CreateInputTableRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/CreateInputTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) WhereIn(ctx context.Context, in *WhereInRequest, opts ...grpc.CallOption) (*ExportedTableCreationResponse, error) {
	out := new(ExportedTableCreationResponse)
	err := c.cc.Invoke(ctx, "/io.deephaven.proto.backplane.grpc.TableService/WhereIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Batch(ctx context.Context, in *BatchTableRequest, opts ...grpc.CallOption) (TableService_BatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TableService_ServiceDesc.Streams[0], "/io.deephaven.proto.backplane.grpc.TableService/Batch", opts...)
	if err != nil {
		return nil, err
	}
	x := &tableServiceBatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TableService_BatchClient interface {
	Recv() (*ExportedTableCreationResponse, error)
	grpc.ClientStream
}

type tableServiceBatchClient struct {
	grpc.ClientStream
}

func (x *tableServiceBatchClient) Recv() (*ExportedTableCreationResponse, error) {
	m := new(ExportedTableCreationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tableServiceClient) ExportedTableUpdates(ctx context.Context, in *ExportedTableUpdatesRequest, opts ...grpc.CallOption) (TableService_ExportedTableUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TableService_ServiceDesc.Streams[1], "/io.deephaven.proto.backplane.grpc.TableService/ExportedTableUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &tableServiceExportedTableUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TableService_ExportedTableUpdatesClient interface {
	Recv() (*ExportedTableUpdateMessage, error)
	grpc.ClientStream
}

type tableServiceExportedTableUpdatesClient struct {
	grpc.ClientStream
}

func (x *tableServiceExportedTableUpdatesClient) Recv() (*ExportedTableUpdateMessage, error) {
	m := new(ExportedTableUpdateMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TableServiceServer is the server API for TableService service.
// All implementations must embed UnimplementedTableServiceServer
// for forward compatibility
type TableServiceServer interface {
	// Request an ETCR for this ticket. Ticket must reference a Table.
	GetExportedTableCreationResponse(context.Context, *ticket.Ticket) (*ExportedTableCreationResponse, error)
	// Fetches a Table from an existing source ticket and exports it to the local session result ticket.
	FetchTable(context.Context, *FetchTableRequest) (*ExportedTableCreationResponse, error)
	// Fetches a pandas table from an existing source ticket and exports it to the local session result ticket.
	FetchPandasTable(context.Context, *FetchPandasTableRequest) (*ExportedTableCreationResponse, error)
	// Create a table that has preview columns applied to an existing source table.
	ApplyPreviewColumns(context.Context, *ApplyPreviewColumnsRequest) (*ExportedTableCreationResponse, error)
	// Create an empty table with the given column names and types.
	EmptyTable(context.Context, *EmptyTableRequest) (*ExportedTableCreationResponse, error)
	// Create a time table with the given start time and period.
	TimeTable(context.Context, *TimeTableRequest) (*ExportedTableCreationResponse, error)
	// Drop columns from the parent table.
	DropColumns(context.Context, *DropColumnsRequest) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the update table operation.
	Update(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the lazyUpdate table operation.
	LazyUpdate(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the view table operation.
	View(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error)
	// Add columns to the given table using the given column specifications and the updateView table operation.
	UpdateView(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error)
	// Select the given columns from the given table.
	Select(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error)
	// Returns the result of an updateBy table operation.
	UpdateBy(context.Context, *UpdateByRequest) (*ExportedTableCreationResponse, error)
	// Returns a new table definition with the unique tuples of the specified columns
	SelectDistinct(context.Context, *SelectDistinctRequest) (*ExportedTableCreationResponse, error)
	// Filter parent table with structured filters.
	Filter(context.Context, *FilterTableRequest) (*ExportedTableCreationResponse, error)
	// Filter parent table with unstructured filters.
	UnstructuredFilter(context.Context, *UnstructuredFilterTableRequest) (*ExportedTableCreationResponse, error)
	// Sort parent table via the provide sort descriptors.
	Sort(context.Context, *SortTableRequest) (*ExportedTableCreationResponse, error)
	// Extract rows from the head of the parent table.
	Head(context.Context, *HeadOrTailRequest) (*ExportedTableCreationResponse, error)
	// Extract rows from the tail of the parent table.
	Tail(context.Context, *HeadOrTailRequest) (*ExportedTableCreationResponse, error)
	// Run the headBy table operation for the given group by columns on the given table.
	HeadBy(context.Context, *HeadOrTailByRequest) (*ExportedTableCreationResponse, error)
	// Run the tailBy operation for the given group by columns on the given table.
	TailBy(context.Context, *HeadOrTailByRequest) (*ExportedTableCreationResponse, error)
	// Ungroup the given columns (all columns will be ungrouped if columnsToUngroup is empty or unspecified).
	Ungroup(context.Context, *UngroupRequest) (*ExportedTableCreationResponse, error)
	// Create a merged table from the given input tables. If a key column is provided (not null), a sorted
	// merged will be performed using that column.
	MergeTables(context.Context, *MergeTablesRequest) (*ExportedTableCreationResponse, error)
	// Returns the result of a cross join operation. Also known as the cartesian product.
	CrossJoinTables(context.Context, *CrossJoinTablesRequest) (*ExportedTableCreationResponse, error)
	// Returns the result of a natural join operation.
	NaturalJoinTables(context.Context, *NaturalJoinTablesRequest) (*ExportedTableCreationResponse, error)
	// Returns the result of an exact join operation.
	ExactJoinTables(context.Context, *ExactJoinTablesRequest) (*ExportedTableCreationResponse, error)
	// Returns the result of a left join operation.
	LeftJoinTables(context.Context, *LeftJoinTablesRequest) (*ExportedTableCreationResponse, error)
	// Returns the result of an as of join operation.
	AsOfJoinTables(context.Context, *AsOfJoinTablesRequest) (*ExportedTableCreationResponse, error)
	// Returns the result of an aggregate table operation.
	ComboAggregate(context.Context, *ComboAggregateRequest) (*ExportedTableCreationResponse, error)
	// Snapshot rightId, triggered by leftId, and export the resulting new Table.
	// The left table's change events cause a new snapshot to be taken. The result table includes a
	// "snapshot key" which is a subset (possibly all) of the left table's columns. The
	// remaining columns in the result table come from right table, the table being snapshotted.
	Snapshot(context.Context, *SnapshotTableRequest) (*ExportedTableCreationResponse, error)
	// Returns a new table with a flattened row set.
	Flatten(context.Context, *FlattenRequest) (*ExportedTableCreationResponse, error)
	// *
	// Downsamples a table assume its contents will be rendered in a run chart, with each subsequent row holding a later
	// X value (i.e., sorted on that column). Multiple Y columns can be specified, as can a range of values for the X
	// column to support zooming in.
	RunChartDownsample(context.Context, *RunChartDownsampleRequest) (*ExportedTableCreationResponse, error)
	// *
	// Creates a new Table based on the provided configuration. This can be used as a regular table from the other methods
	// in this interface, or can be interacted with via the InputTableService to modify its contents.
	CreateInputTable(context.Context, *CreateInputTableRequest) (*ExportedTableCreationResponse, error)
	// *
	// Filters the left table based on the set of values in the right table.
	//
	// Note that when the right table ticks, all of the rows in the left table are going to be re-evaluated,
	// thus the intention is that the right table is fairly slow moving compared with the left table.
	WhereIn(context.Context, *WhereInRequest) (*ExportedTableCreationResponse, error)
	// Batch a series of requests and send them all at once. This enables the user to create intermediate tables without
	// requiring them to be exported and managed by the client. The server will automatically release any tables when they
	// are no longer depended upon.
	Batch(*BatchTableRequest, TableService_BatchServer) error
	// Establish a stream of table updates for cheap notifications of table size updates.
	//
	// New streams will flush updates for all existing table exports. An export id of zero will be sent to indicate all
	// exports have sent their refresh update. Table updates may be intermingled with initial refresh updates after their
	// initial update had been sent.
	ExportedTableUpdates(*ExportedTableUpdatesRequest, TableService_ExportedTableUpdatesServer) error
	mustEmbedUnimplementedTableServiceServer()
}

// UnimplementedTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTableServiceServer struct {
}

func (UnimplementedTableServiceServer) GetExportedTableCreationResponse(context.Context, *ticket.Ticket) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExportedTableCreationResponse not implemented")
}
func (UnimplementedTableServiceServer) FetchTable(context.Context, *FetchTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTable not implemented")
}
func (UnimplementedTableServiceServer) FetchPandasTable(context.Context, *FetchPandasTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPandasTable not implemented")
}
func (UnimplementedTableServiceServer) ApplyPreviewColumns(context.Context, *ApplyPreviewColumnsRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPreviewColumns not implemented")
}
func (UnimplementedTableServiceServer) EmptyTable(context.Context, *EmptyTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyTable not implemented")
}
func (UnimplementedTableServiceServer) TimeTable(context.Context, *TimeTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeTable not implemented")
}
func (UnimplementedTableServiceServer) DropColumns(context.Context, *DropColumnsRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropColumns not implemented")
}
func (UnimplementedTableServiceServer) Update(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTableServiceServer) LazyUpdate(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LazyUpdate not implemented")
}
func (UnimplementedTableServiceServer) View(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedTableServiceServer) UpdateView(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateView not implemented")
}
func (UnimplementedTableServiceServer) Select(context.Context, *SelectOrUpdateRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedTableServiceServer) UpdateBy(context.Context, *UpdateByRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBy not implemented")
}
func (UnimplementedTableServiceServer) SelectDistinct(context.Context, *SelectDistinctRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDistinct not implemented")
}
func (UnimplementedTableServiceServer) Filter(context.Context, *FilterTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedTableServiceServer) UnstructuredFilter(context.Context, *UnstructuredFilterTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstructuredFilter not implemented")
}
func (UnimplementedTableServiceServer) Sort(context.Context, *SortTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sort not implemented")
}
func (UnimplementedTableServiceServer) Head(context.Context, *HeadOrTailRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Head not implemented")
}
func (UnimplementedTableServiceServer) Tail(context.Context, *HeadOrTailRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedTableServiceServer) HeadBy(context.Context, *HeadOrTailByRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadBy not implemented")
}
func (UnimplementedTableServiceServer) TailBy(context.Context, *HeadOrTailByRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TailBy not implemented")
}
func (UnimplementedTableServiceServer) Ungroup(context.Context, *UngroupRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ungroup not implemented")
}
func (UnimplementedTableServiceServer) MergeTables(context.Context, *MergeTablesRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeTables not implemented")
}
func (UnimplementedTableServiceServer) CrossJoinTables(context.Context, *CrossJoinTablesRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossJoinTables not implemented")
}
func (UnimplementedTableServiceServer) NaturalJoinTables(context.Context, *NaturalJoinTablesRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NaturalJoinTables not implemented")
}
func (UnimplementedTableServiceServer) ExactJoinTables(context.Context, *ExactJoinTablesRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExactJoinTables not implemented")
}
func (UnimplementedTableServiceServer) LeftJoinTables(context.Context, *LeftJoinTablesRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftJoinTables not implemented")
}
func (UnimplementedTableServiceServer) AsOfJoinTables(context.Context, *AsOfJoinTablesRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsOfJoinTables not implemented")
}
func (UnimplementedTableServiceServer) ComboAggregate(context.Context, *ComboAggregateRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComboAggregate not implemented")
}
func (UnimplementedTableServiceServer) Snapshot(context.Context, *SnapshotTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedTableServiceServer) Flatten(context.Context, *FlattenRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flatten not implemented")
}
func (UnimplementedTableServiceServer) RunChartDownsample(context.Context, *RunChartDownsampleRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunChartDownsample not implemented")
}
func (UnimplementedTableServiceServer) CreateInputTable(context.Context, *CreateInputTableRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInputTable not implemented")
}
func (UnimplementedTableServiceServer) WhereIn(context.Context, *WhereInRequest) (*ExportedTableCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhereIn not implemented")
}
func (UnimplementedTableServiceServer) Batch(*BatchTableRequest, TableService_BatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedTableServiceServer) ExportedTableUpdates(*ExportedTableUpdatesRequest, TableService_ExportedTableUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportedTableUpdates not implemented")
}
func (UnimplementedTableServiceServer) mustEmbedUnimplementedTableServiceServer() {}

// UnsafeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServiceServer will
// result in compilation errors.
type UnsafeTableServiceServer interface {
	mustEmbedUnimplementedTableServiceServer()
}

func RegisterTableServiceServer(s grpc.ServiceRegistrar, srv TableServiceServer) {
	s.RegisterService(&TableService_ServiceDesc, srv)
}

func _TableService_GetExportedTableCreationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ticket.Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).GetExportedTableCreationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/GetExportedTableCreationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).GetExportedTableCreationResponse(ctx, req.(*ticket.Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_FetchTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).FetchTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/FetchTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).FetchTable(ctx, req.(*FetchTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_FetchPandasTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPandasTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).FetchPandasTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/FetchPandasTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).FetchPandasTable(ctx, req.(*FetchPandasTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_ApplyPreviewColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPreviewColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).ApplyPreviewColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/ApplyPreviewColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).ApplyPreviewColumns(ctx, req.(*ApplyPreviewColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_EmptyTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).EmptyTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/EmptyTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).EmptyTable(ctx, req.(*EmptyTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_TimeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).TimeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/TimeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).TimeTable(ctx, req.(*TimeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_DropColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).DropColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/DropColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).DropColumns(ctx, req.(*DropColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Update(ctx, req.(*SelectOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_LazyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).LazyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/LazyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).LazyUpdate(ctx, req.(*SelectOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).View(ctx, req.(*SelectOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_UpdateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).UpdateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/UpdateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).UpdateView(ctx, req.(*SelectOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Select(ctx, req.(*SelectOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_UpdateBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).UpdateBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/UpdateBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).UpdateBy(ctx, req.(*UpdateByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_SelectDistinct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDistinctRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).SelectDistinct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/SelectDistinct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).SelectDistinct(ctx, req.(*SelectDistinctRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Filter(ctx, req.(*FilterTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_UnstructuredFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnstructuredFilterTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).UnstructuredFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/UnstructuredFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).UnstructuredFilter(ctx, req.(*UnstructuredFilterTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Sort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Sort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Sort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Sort(ctx, req.(*SortTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Head_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadOrTailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Head(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Head",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Head(ctx, req.(*HeadOrTailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Tail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadOrTailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Tail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Tail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Tail(ctx, req.(*HeadOrTailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_HeadBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadOrTailByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).HeadBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/HeadBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).HeadBy(ctx, req.(*HeadOrTailByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_TailBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadOrTailByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).TailBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/TailBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).TailBy(ctx, req.(*HeadOrTailByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Ungroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UngroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Ungroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Ungroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Ungroup(ctx, req.(*UngroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_MergeTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).MergeTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/MergeTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).MergeTables(ctx, req.(*MergeTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_CrossJoinTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossJoinTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).CrossJoinTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/CrossJoinTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).CrossJoinTables(ctx, req.(*CrossJoinTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_NaturalJoinTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaturalJoinTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).NaturalJoinTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/NaturalJoinTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).NaturalJoinTables(ctx, req.(*NaturalJoinTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_ExactJoinTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExactJoinTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).ExactJoinTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/ExactJoinTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).ExactJoinTables(ctx, req.(*ExactJoinTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_LeftJoinTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftJoinTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).LeftJoinTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/LeftJoinTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).LeftJoinTables(ctx, req.(*LeftJoinTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_AsOfJoinTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsOfJoinTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).AsOfJoinTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/AsOfJoinTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).AsOfJoinTables(ctx, req.(*AsOfJoinTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_ComboAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComboAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).ComboAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/ComboAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).ComboAggregate(ctx, req.(*ComboAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Snapshot(ctx, req.(*SnapshotTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Flatten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlattenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Flatten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/Flatten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Flatten(ctx, req.(*FlattenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_RunChartDownsample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunChartDownsampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).RunChartDownsample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/RunChartDownsample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).RunChartDownsample(ctx, req.(*RunChartDownsampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_CreateInputTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInputTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).CreateInputTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/CreateInputTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).CreateInputTable(ctx, req.(*CreateInputTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_WhereIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhereInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).WhereIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.deephaven.proto.backplane.grpc.TableService/WhereIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).WhereIn(ctx, req.(*WhereInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Batch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchTableRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TableServiceServer).Batch(m, &tableServiceBatchServer{stream})
}

type TableService_BatchServer interface {
	Send(*ExportedTableCreationResponse) error
	grpc.ServerStream
}

type tableServiceBatchServer struct {
	grpc.ServerStream
}

func (x *tableServiceBatchServer) Send(m *ExportedTableCreationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TableService_ExportedTableUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportedTableUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TableServiceServer).ExportedTableUpdates(m, &tableServiceExportedTableUpdatesServer{stream})
}

type TableService_ExportedTableUpdatesServer interface {
	Send(*ExportedTableUpdateMessage) error
	grpc.ServerStream
}

type tableServiceExportedTableUpdatesServer struct {
	grpc.ServerStream
}

func (x *tableServiceExportedTableUpdatesServer) Send(m *ExportedTableUpdateMessage) error {
	return x.ServerStream.SendMsg(m)
}

// TableService_ServiceDesc is the grpc.ServiceDesc for TableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.deephaven.proto.backplane.grpc.TableService",
	HandlerType: (*TableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExportedTableCreationResponse",
			Handler:    _TableService_GetExportedTableCreationResponse_Handler,
		},
		{
			MethodName: "FetchTable",
			Handler:    _TableService_FetchTable_Handler,
		},
		{
			MethodName: "FetchPandasTable",
			Handler:    _TableService_FetchPandasTable_Handler,
		},
		{
			MethodName: "ApplyPreviewColumns",
			Handler:    _TableService_ApplyPreviewColumns_Handler,
		},
		{
			MethodName: "EmptyTable",
			Handler:    _TableService_EmptyTable_Handler,
		},
		{
			MethodName: "TimeTable",
			Handler:    _TableService_TimeTable_Handler,
		},
		{
			MethodName: "DropColumns",
			Handler:    _TableService_DropColumns_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TableService_Update_Handler,
		},
		{
			MethodName: "LazyUpdate",
			Handler:    _TableService_LazyUpdate_Handler,
		},
		{
			MethodName: "View",
			Handler:    _TableService_View_Handler,
		},
		{
			MethodName: "UpdateView",
			Handler:    _TableService_UpdateView_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _TableService_Select_Handler,
		},
		{
			MethodName: "UpdateBy",
			Handler:    _TableService_UpdateBy_Handler,
		},
		{
			MethodName: "SelectDistinct",
			Handler:    _TableService_SelectDistinct_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _TableService_Filter_Handler,
		},
		{
			MethodName: "UnstructuredFilter",
			Handler:    _TableService_UnstructuredFilter_Handler,
		},
		{
			MethodName: "Sort",
			Handler:    _TableService_Sort_Handler,
		},
		{
			MethodName: "Head",
			Handler:    _TableService_Head_Handler,
		},
		{
			MethodName: "Tail",
			Handler:    _TableService_Tail_Handler,
		},
		{
			MethodName: "HeadBy",
			Handler:    _TableService_HeadBy_Handler,
		},
		{
			MethodName: "TailBy",
			Handler:    _TableService_TailBy_Handler,
		},
		{
			MethodName: "Ungroup",
			Handler:    _TableService_Ungroup_Handler,
		},
		{
			MethodName: "MergeTables",
			Handler:    _TableService_MergeTables_Handler,
		},
		{
			MethodName: "CrossJoinTables",
			Handler:    _TableService_CrossJoinTables_Handler,
		},
		{
			MethodName: "NaturalJoinTables",
			Handler:    _TableService_NaturalJoinTables_Handler,
		},
		{
			MethodName: "ExactJoinTables",
			Handler:    _TableService_ExactJoinTables_Handler,
		},
		{
			MethodName: "LeftJoinTables",
			Handler:    _TableService_LeftJoinTables_Handler,
		},
		{
			MethodName: "AsOfJoinTables",
			Handler:    _TableService_AsOfJoinTables_Handler,
		},
		{
			MethodName: "ComboAggregate",
			Handler:    _TableService_ComboAggregate_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _TableService_Snapshot_Handler,
		},
		{
			MethodName: "Flatten",
			Handler:    _TableService_Flatten_Handler,
		},
		{
			MethodName: "RunChartDownsample",
			Handler:    _TableService_RunChartDownsample_Handler,
		},
		{
			MethodName: "CreateInputTable",
			Handler:    _TableService_CreateInputTable_Handler,
		},
		{
			MethodName: "WhereIn",
			Handler:    _TableService_WhereIn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Batch",
			Handler:       _TableService_Batch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportedTableUpdates",
			Handler:       _TableService_ExportedTableUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deephaven/proto/table.proto",
}
