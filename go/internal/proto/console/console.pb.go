//
// Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: deephaven/proto/console.proto

package console

import (
	application "github.com/deephaven/deephaven-core/go/internal/proto/application"
	ticket "github.com/deephaven/deephaven-core/go/internal/proto/ticket"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Diagnostic_DiagnosticSeverity int32

const (
	Diagnostic_NOT_SET_SEVERITY Diagnostic_DiagnosticSeverity = 0
	Diagnostic_ERROR            Diagnostic_DiagnosticSeverity = 1
	Diagnostic_WARNING          Diagnostic_DiagnosticSeverity = 2
	Diagnostic_INFORMATION      Diagnostic_DiagnosticSeverity = 3
	Diagnostic_HINT             Diagnostic_DiagnosticSeverity = 4
)

// Enum value maps for Diagnostic_DiagnosticSeverity.
var (
	Diagnostic_DiagnosticSeverity_name = map[int32]string{
		0: "NOT_SET_SEVERITY",
		1: "ERROR",
		2: "WARNING",
		3: "INFORMATION",
		4: "HINT",
	}
	Diagnostic_DiagnosticSeverity_value = map[string]int32{
		"NOT_SET_SEVERITY": 0,
		"ERROR":            1,
		"WARNING":          2,
		"INFORMATION":      3,
		"HINT":             4,
	}
)

func (x Diagnostic_DiagnosticSeverity) Enum() *Diagnostic_DiagnosticSeverity {
	p := new(Diagnostic_DiagnosticSeverity)
	*p = x
	return p
}

func (x Diagnostic_DiagnosticSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Diagnostic_DiagnosticSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[0].Descriptor()
}

func (Diagnostic_DiagnosticSeverity) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[0]
}

func (x Diagnostic_DiagnosticSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Diagnostic_DiagnosticSeverity.Descriptor instead.
func (Diagnostic_DiagnosticSeverity) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{42, 0}
}

type Diagnostic_DiagnosticTag int32

const (
	Diagnostic_NOT_SET_TAG Diagnostic_DiagnosticTag = 0
	Diagnostic_UNNECESSARY Diagnostic_DiagnosticTag = 1
	Diagnostic_DEPRECATED  Diagnostic_DiagnosticTag = 2
)

// Enum value maps for Diagnostic_DiagnosticTag.
var (
	Diagnostic_DiagnosticTag_name = map[int32]string{
		0: "NOT_SET_TAG",
		1: "UNNECESSARY",
		2: "DEPRECATED",
	}
	Diagnostic_DiagnosticTag_value = map[string]int32{
		"NOT_SET_TAG": 0,
		"UNNECESSARY": 1,
		"DEPRECATED":  2,
	}
)

func (x Diagnostic_DiagnosticTag) Enum() *Diagnostic_DiagnosticTag {
	p := new(Diagnostic_DiagnosticTag)
	*p = x
	return p
}

func (x Diagnostic_DiagnosticTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Diagnostic_DiagnosticTag) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[1].Descriptor()
}

func (Diagnostic_DiagnosticTag) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[1]
}

func (x Diagnostic_DiagnosticTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Diagnostic_DiagnosticTag.Descriptor instead.
func (Diagnostic_DiagnosticTag) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{42, 1}
}

type FigureDescriptor_SeriesPlotStyle int32

const (
	FigureDescriptor_BAR          FigureDescriptor_SeriesPlotStyle = 0
	FigureDescriptor_STACKED_BAR  FigureDescriptor_SeriesPlotStyle = 1
	FigureDescriptor_LINE         FigureDescriptor_SeriesPlotStyle = 2
	FigureDescriptor_AREA         FigureDescriptor_SeriesPlotStyle = 3
	FigureDescriptor_STACKED_AREA FigureDescriptor_SeriesPlotStyle = 4
	FigureDescriptor_PIE          FigureDescriptor_SeriesPlotStyle = 5
	FigureDescriptor_HISTOGRAM    FigureDescriptor_SeriesPlotStyle = 6
	FigureDescriptor_OHLC         FigureDescriptor_SeriesPlotStyle = 7
	FigureDescriptor_SCATTER      FigureDescriptor_SeriesPlotStyle = 8
	FigureDescriptor_STEP         FigureDescriptor_SeriesPlotStyle = 9
	FigureDescriptor_ERROR_BAR    FigureDescriptor_SeriesPlotStyle = 10
	FigureDescriptor_TREEMAP      FigureDescriptor_SeriesPlotStyle = 11
)

// Enum value maps for FigureDescriptor_SeriesPlotStyle.
var (
	FigureDescriptor_SeriesPlotStyle_name = map[int32]string{
		0:  "BAR",
		1:  "STACKED_BAR",
		2:  "LINE",
		3:  "AREA",
		4:  "STACKED_AREA",
		5:  "PIE",
		6:  "HISTOGRAM",
		7:  "OHLC",
		8:  "SCATTER",
		9:  "STEP",
		10: "ERROR_BAR",
		11: "TREEMAP",
	}
	FigureDescriptor_SeriesPlotStyle_value = map[string]int32{
		"BAR":          0,
		"STACKED_BAR":  1,
		"LINE":         2,
		"AREA":         3,
		"STACKED_AREA": 4,
		"PIE":          5,
		"HISTOGRAM":    6,
		"OHLC":         7,
		"SCATTER":      8,
		"STEP":         9,
		"ERROR_BAR":    10,
		"TREEMAP":      11,
	}
)

func (x FigureDescriptor_SeriesPlotStyle) Enum() *FigureDescriptor_SeriesPlotStyle {
	p := new(FigureDescriptor_SeriesPlotStyle)
	*p = x
	return p
}

func (x FigureDescriptor_SeriesPlotStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FigureDescriptor_SeriesPlotStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[2].Descriptor()
}

func (FigureDescriptor_SeriesPlotStyle) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[2]
}

func (x FigureDescriptor_SeriesPlotStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FigureDescriptor_SeriesPlotStyle.Descriptor instead.
func (FigureDescriptor_SeriesPlotStyle) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 0}
}

type FigureDescriptor_SourceType int32

const (
	FigureDescriptor_X          FigureDescriptor_SourceType = 0
	FigureDescriptor_Y          FigureDescriptor_SourceType = 1
	FigureDescriptor_Z          FigureDescriptor_SourceType = 2
	FigureDescriptor_X_LOW      FigureDescriptor_SourceType = 3
	FigureDescriptor_X_HIGH     FigureDescriptor_SourceType = 4
	FigureDescriptor_Y_LOW      FigureDescriptor_SourceType = 5
	FigureDescriptor_Y_HIGH     FigureDescriptor_SourceType = 6
	FigureDescriptor_TIME       FigureDescriptor_SourceType = 7
	FigureDescriptor_OPEN       FigureDescriptor_SourceType = 8
	FigureDescriptor_HIGH       FigureDescriptor_SourceType = 9
	FigureDescriptor_LOW        FigureDescriptor_SourceType = 10
	FigureDescriptor_CLOSE      FigureDescriptor_SourceType = 11
	FigureDescriptor_SHAPE      FigureDescriptor_SourceType = 12
	FigureDescriptor_SIZE       FigureDescriptor_SourceType = 13
	FigureDescriptor_LABEL      FigureDescriptor_SourceType = 14
	FigureDescriptor_COLOR      FigureDescriptor_SourceType = 15
	FigureDescriptor_PARENT     FigureDescriptor_SourceType = 16
	FigureDescriptor_HOVER_TEXT FigureDescriptor_SourceType = 17
	FigureDescriptor_TEXT       FigureDescriptor_SourceType = 18
)

// Enum value maps for FigureDescriptor_SourceType.
var (
	FigureDescriptor_SourceType_name = map[int32]string{
		0:  "X",
		1:  "Y",
		2:  "Z",
		3:  "X_LOW",
		4:  "X_HIGH",
		5:  "Y_LOW",
		6:  "Y_HIGH",
		7:  "TIME",
		8:  "OPEN",
		9:  "HIGH",
		10: "LOW",
		11: "CLOSE",
		12: "SHAPE",
		13: "SIZE",
		14: "LABEL",
		15: "COLOR",
		16: "PARENT",
		17: "HOVER_TEXT",
		18: "TEXT",
	}
	FigureDescriptor_SourceType_value = map[string]int32{
		"X":          0,
		"Y":          1,
		"Z":          2,
		"X_LOW":      3,
		"X_HIGH":     4,
		"Y_LOW":      5,
		"Y_HIGH":     6,
		"TIME":       7,
		"OPEN":       8,
		"HIGH":       9,
		"LOW":        10,
		"CLOSE":      11,
		"SHAPE":      12,
		"SIZE":       13,
		"LABEL":      14,
		"COLOR":      15,
		"PARENT":     16,
		"HOVER_TEXT": 17,
		"TEXT":       18,
	}
)

func (x FigureDescriptor_SourceType) Enum() *FigureDescriptor_SourceType {
	p := new(FigureDescriptor_SourceType)
	*p = x
	return p
}

func (x FigureDescriptor_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FigureDescriptor_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[3].Descriptor()
}

func (FigureDescriptor_SourceType) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[3]
}

func (x FigureDescriptor_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FigureDescriptor_SourceType.Descriptor instead.
func (FigureDescriptor_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 1}
}

type FigureDescriptor_ChartDescriptor_ChartType int32

const (
	FigureDescriptor_ChartDescriptor_XY  FigureDescriptor_ChartDescriptor_ChartType = 0
	FigureDescriptor_ChartDescriptor_PIE FigureDescriptor_ChartDescriptor_ChartType = 1
	// Deprecated: Do not use.
	FigureDescriptor_ChartDescriptor_OHLC        FigureDescriptor_ChartDescriptor_ChartType = 2
	FigureDescriptor_ChartDescriptor_CATEGORY    FigureDescriptor_ChartDescriptor_ChartType = 3
	FigureDescriptor_ChartDescriptor_XYZ         FigureDescriptor_ChartDescriptor_ChartType = 4
	FigureDescriptor_ChartDescriptor_CATEGORY_3D FigureDescriptor_ChartDescriptor_ChartType = 5
	FigureDescriptor_ChartDescriptor_TREEMAP     FigureDescriptor_ChartDescriptor_ChartType = 6
)

// Enum value maps for FigureDescriptor_ChartDescriptor_ChartType.
var (
	FigureDescriptor_ChartDescriptor_ChartType_name = map[int32]string{
		0: "XY",
		1: "PIE",
		2: "OHLC",
		3: "CATEGORY",
		4: "XYZ",
		5: "CATEGORY_3D",
		6: "TREEMAP",
	}
	FigureDescriptor_ChartDescriptor_ChartType_value = map[string]int32{
		"XY":          0,
		"PIE":         1,
		"OHLC":        2,
		"CATEGORY":    3,
		"XYZ":         4,
		"CATEGORY_3D": 5,
		"TREEMAP":     6,
	}
)

func (x FigureDescriptor_ChartDescriptor_ChartType) Enum() *FigureDescriptor_ChartDescriptor_ChartType {
	p := new(FigureDescriptor_ChartDescriptor_ChartType)
	*p = x
	return p
}

func (x FigureDescriptor_ChartDescriptor_ChartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FigureDescriptor_ChartDescriptor_ChartType) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[4].Descriptor()
}

func (FigureDescriptor_ChartDescriptor_ChartType) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[4]
}

func (x FigureDescriptor_ChartDescriptor_ChartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FigureDescriptor_ChartDescriptor_ChartType.Descriptor instead.
func (FigureDescriptor_ChartDescriptor_ChartType) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 0, 0}
}

type FigureDescriptor_AxisDescriptor_AxisFormatType int32

const (
	FigureDescriptor_AxisDescriptor_CATEGORY FigureDescriptor_AxisDescriptor_AxisFormatType = 0
	FigureDescriptor_AxisDescriptor_NUMBER   FigureDescriptor_AxisDescriptor_AxisFormatType = 1
)

// Enum value maps for FigureDescriptor_AxisDescriptor_AxisFormatType.
var (
	FigureDescriptor_AxisDescriptor_AxisFormatType_name = map[int32]string{
		0: "CATEGORY",
		1: "NUMBER",
	}
	FigureDescriptor_AxisDescriptor_AxisFormatType_value = map[string]int32{
		"CATEGORY": 0,
		"NUMBER":   1,
	}
)

func (x FigureDescriptor_AxisDescriptor_AxisFormatType) Enum() *FigureDescriptor_AxisDescriptor_AxisFormatType {
	p := new(FigureDescriptor_AxisDescriptor_AxisFormatType)
	*p = x
	return p
}

func (x FigureDescriptor_AxisDescriptor_AxisFormatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FigureDescriptor_AxisDescriptor_AxisFormatType) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[5].Descriptor()
}

func (FigureDescriptor_AxisDescriptor_AxisFormatType) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[5]
}

func (x FigureDescriptor_AxisDescriptor_AxisFormatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FigureDescriptor_AxisDescriptor_AxisFormatType.Descriptor instead.
func (FigureDescriptor_AxisDescriptor_AxisFormatType) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 6, 0}
}

type FigureDescriptor_AxisDescriptor_AxisType int32

const (
	FigureDescriptor_AxisDescriptor_X     FigureDescriptor_AxisDescriptor_AxisType = 0
	FigureDescriptor_AxisDescriptor_Y     FigureDescriptor_AxisDescriptor_AxisType = 1
	FigureDescriptor_AxisDescriptor_SHAPE FigureDescriptor_AxisDescriptor_AxisType = 2
	FigureDescriptor_AxisDescriptor_SIZE  FigureDescriptor_AxisDescriptor_AxisType = 3
	FigureDescriptor_AxisDescriptor_LABEL FigureDescriptor_AxisDescriptor_AxisType = 4
	FigureDescriptor_AxisDescriptor_COLOR FigureDescriptor_AxisDescriptor_AxisType = 5
)

// Enum value maps for FigureDescriptor_AxisDescriptor_AxisType.
var (
	FigureDescriptor_AxisDescriptor_AxisType_name = map[int32]string{
		0: "X",
		1: "Y",
		2: "SHAPE",
		3: "SIZE",
		4: "LABEL",
		5: "COLOR",
	}
	FigureDescriptor_AxisDescriptor_AxisType_value = map[string]int32{
		"X":     0,
		"Y":     1,
		"SHAPE": 2,
		"SIZE":  3,
		"LABEL": 4,
		"COLOR": 5,
	}
)

func (x FigureDescriptor_AxisDescriptor_AxisType) Enum() *FigureDescriptor_AxisDescriptor_AxisType {
	p := new(FigureDescriptor_AxisDescriptor_AxisType)
	*p = x
	return p
}

func (x FigureDescriptor_AxisDescriptor_AxisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FigureDescriptor_AxisDescriptor_AxisType) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[6].Descriptor()
}

func (FigureDescriptor_AxisDescriptor_AxisType) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[6]
}

func (x FigureDescriptor_AxisDescriptor_AxisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FigureDescriptor_AxisDescriptor_AxisType.Descriptor instead.
func (FigureDescriptor_AxisDescriptor_AxisType) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 6, 1}
}

type FigureDescriptor_AxisDescriptor_AxisPosition int32

const (
	FigureDescriptor_AxisDescriptor_TOP    FigureDescriptor_AxisDescriptor_AxisPosition = 0
	FigureDescriptor_AxisDescriptor_BOTTOM FigureDescriptor_AxisDescriptor_AxisPosition = 1
	FigureDescriptor_AxisDescriptor_LEFT   FigureDescriptor_AxisDescriptor_AxisPosition = 2
	FigureDescriptor_AxisDescriptor_RIGHT  FigureDescriptor_AxisDescriptor_AxisPosition = 3
	FigureDescriptor_AxisDescriptor_NONE   FigureDescriptor_AxisDescriptor_AxisPosition = 4
)

// Enum value maps for FigureDescriptor_AxisDescriptor_AxisPosition.
var (
	FigureDescriptor_AxisDescriptor_AxisPosition_name = map[int32]string{
		0: "TOP",
		1: "BOTTOM",
		2: "LEFT",
		3: "RIGHT",
		4: "NONE",
	}
	FigureDescriptor_AxisDescriptor_AxisPosition_value = map[string]int32{
		"TOP":    0,
		"BOTTOM": 1,
		"LEFT":   2,
		"RIGHT":  3,
		"NONE":   4,
	}
)

func (x FigureDescriptor_AxisDescriptor_AxisPosition) Enum() *FigureDescriptor_AxisDescriptor_AxisPosition {
	p := new(FigureDescriptor_AxisDescriptor_AxisPosition)
	*p = x
	return p
}

func (x FigureDescriptor_AxisDescriptor_AxisPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FigureDescriptor_AxisDescriptor_AxisPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[7].Descriptor()
}

func (FigureDescriptor_AxisDescriptor_AxisPosition) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[7]
}

func (x FigureDescriptor_AxisDescriptor_AxisPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FigureDescriptor_AxisDescriptor_AxisPosition.Descriptor instead.
func (FigureDescriptor_AxisDescriptor_AxisPosition) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 6, 2}
}

type FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek int32

const (
	FigureDescriptor_BusinessCalendarDescriptor_SUNDAY    FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek = 0
	FigureDescriptor_BusinessCalendarDescriptor_MONDAY    FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek = 1
	FigureDescriptor_BusinessCalendarDescriptor_TUESDAY   FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek = 2
	FigureDescriptor_BusinessCalendarDescriptor_WEDNESDAY FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek = 3
	FigureDescriptor_BusinessCalendarDescriptor_THURSDAY  FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek = 4
	FigureDescriptor_BusinessCalendarDescriptor_FRIDAY    FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek = 5
	FigureDescriptor_BusinessCalendarDescriptor_SATURDAY  FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek = 6
)

// Enum value maps for FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek.
var (
	FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_name = map[int32]string{
		0: "SUNDAY",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
	}
	FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_value = map[string]int32{
		"SUNDAY":    0,
		"MONDAY":    1,
		"TUESDAY":   2,
		"WEDNESDAY": 3,
		"THURSDAY":  4,
		"FRIDAY":    5,
		"SATURDAY":  6,
	}
)

func (x FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek) Enum() *FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek {
	p := new(FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek)
	*p = x
	return p
}

func (x FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_deephaven_proto_console_proto_enumTypes[8].Descriptor()
}

func (FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek) Type() protoreflect.EnumType {
	return &file_deephaven_proto_console_proto_enumTypes[8]
}

func (x FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek.Descriptor instead.
func (FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 7, 0}
}

type GetConsoleTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConsoleTypesRequest) Reset() {
	*x = GetConsoleTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsoleTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsoleTypesRequest) ProtoMessage() {}

func (x *GetConsoleTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsoleTypesRequest.ProtoReflect.Descriptor instead.
func (*GetConsoleTypesRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{0}
}

type GetConsoleTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleTypes []string `protobuf:"bytes,1,rep,name=console_types,json=consoleTypes,proto3" json:"console_types,omitempty"`
}

func (x *GetConsoleTypesResponse) Reset() {
	*x = GetConsoleTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsoleTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsoleTypesResponse) ProtoMessage() {}

func (x *GetConsoleTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsoleTypesResponse.ProtoReflect.Descriptor instead.
func (*GetConsoleTypesResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{1}
}

func (x *GetConsoleTypesResponse) GetConsoleTypes() []string {
	if x != nil {
		return x.ConsoleTypes
	}
	return nil
}

type StartConsoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultId    *ticket.Ticket `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	SessionType string         `protobuf:"bytes,2,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
}

func (x *StartConsoleRequest) Reset() {
	*x = StartConsoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartConsoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConsoleRequest) ProtoMessage() {}

func (x *StartConsoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConsoleRequest.ProtoReflect.Descriptor instead.
func (*StartConsoleRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{2}
}

func (x *StartConsoleRequest) GetResultId() *ticket.Ticket {
	if x != nil {
		return x.ResultId
	}
	return nil
}

func (x *StartConsoleRequest) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

type StartConsoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultId *ticket.Ticket `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *StartConsoleResponse) Reset() {
	*x = StartConsoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartConsoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConsoleResponse) ProtoMessage() {}

func (x *StartConsoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConsoleResponse.ProtoReflect.Descriptor instead.
func (*StartConsoleResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{3}
}

func (x *StartConsoleResponse) GetResultId() *ticket.Ticket {
	if x != nil {
		return x.ResultId
	}
	return nil
}

type GetHeapInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHeapInfoRequest) Reset() {
	*x = GetHeapInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeapInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeapInfoRequest) ProtoMessage() {}

func (x *GetHeapInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeapInfoRequest.ProtoReflect.Descriptor instead.
func (*GetHeapInfoRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{4}
}

type GetHeapInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns the maximum amount of memory that the Java virtual machine will attempt to use.
	// If there is no inherent limit then the value Long.MAX_VALUE will be returned.
	// the maximum amount of memory that the virtual machine will attempt to use, measured in bytes
	MaxMemory int64 `protobuf:"varint,1,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"`
	// Returns the total amount of memory in the Java virtual machine. The value returned by this method may vary over time, depending on the host environment.
	// Note that the amount of memory required to hold an object of any given type may be implementation-dependent.
	// the total amount of memory currently available for current and future objects, measured in bytes.
	TotalMemory int64 `protobuf:"varint,2,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	// Returns the amount of free memory in the Java Virtual Machine. Calling the gc method may result in increasing the value returned by freeMemory.
	// an approximation to the total amount of memory currently available for future allocated objects, measured in bytes.
	FreeMemory int64 `protobuf:"varint,3,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"`
}

func (x *GetHeapInfoResponse) Reset() {
	*x = GetHeapInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeapInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeapInfoResponse) ProtoMessage() {}

func (x *GetHeapInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeapInfoResponse.ProtoReflect.Descriptor instead.
func (*GetHeapInfoResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{5}
}

func (x *GetHeapInfoResponse) GetMaxMemory() int64 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *GetHeapInfoResponse) GetTotalMemory() int64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *GetHeapInfoResponse) GetFreeMemory() int64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

// Presently you get _all_ logs, not just your console. A future version might take a specific console_id to
// restrict this to a single console.
type LogSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	Ticket console_id = 1;
	//
	// If a non-zero value is specified, represents the timestamp in microseconds since the unix epoch when
	// the client last saw a message. Technically this might skip messages if more than one message was
	// logged at the same microsecond that connection was lost - to avoid this, subtract one from the last
	// seen message's micros, and expect to receive some messages that have already been seen.
	LastSeenLogTimestamp int64    `protobuf:"varint,1,opt,name=last_seen_log_timestamp,json=lastSeenLogTimestamp,proto3" json:"last_seen_log_timestamp,omitempty"`
	Levels               []string `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"`
}

func (x *LogSubscriptionRequest) Reset() {
	*x = LogSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSubscriptionRequest) ProtoMessage() {}

func (x *LogSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*LogSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{6}
}

func (x *LogSubscriptionRequest) GetLastSeenLogTimestamp() int64 {
	if x != nil {
		return x.LastSeenLogTimestamp
	}
	return 0
}

func (x *LogSubscriptionRequest) GetLevels() []string {
	if x != nil {
		return x.Levels
	}
	return nil
}

type LogSubscriptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Micros   int64  `protobuf:"varint,1,opt,name=micros,proto3" json:"micros,omitempty"`
	LogLevel string `protobuf:"bytes,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogSubscriptionData) Reset() {
	*x = LogSubscriptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSubscriptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSubscriptionData) ProtoMessage() {}

func (x *LogSubscriptionData) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSubscriptionData.ProtoReflect.Descriptor instead.
func (*LogSubscriptionData) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{7}
}

func (x *LogSubscriptionData) GetMicros() int64 {
	if x != nil {
		return x.Micros
	}
	return 0
}

func (x *LogSubscriptionData) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *LogSubscriptionData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExecuteCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleId *ticket.Ticket `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	Code      string         `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExecuteCommandRequest) Reset() {
	*x = ExecuteCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommandRequest) ProtoMessage() {}

func (x *ExecuteCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommandRequest.ProtoReflect.Descriptor instead.
func (*ExecuteCommandRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{8}
}

func (x *ExecuteCommandRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *ExecuteCommandRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ExecuteCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string                          `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Changes      *application.FieldsChangeUpdate `protobuf:"bytes,2,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ExecuteCommandResponse) Reset() {
	*x = ExecuteCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommandResponse) ProtoMessage() {}

func (x *ExecuteCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommandResponse.ProtoReflect.Descriptor instead.
func (*ExecuteCommandResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{9}
}

func (x *ExecuteCommandResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ExecuteCommandResponse) GetChanges() *application.FieldsChangeUpdate {
	if x != nil {
		return x.Changes
	}
	return nil
}

type BindTableToVariableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleId    *ticket.Ticket `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	VariableName string         `protobuf:"bytes,3,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	TableId      *ticket.Ticket `protobuf:"bytes,4,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *BindTableToVariableRequest) Reset() {
	*x = BindTableToVariableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindTableToVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindTableToVariableRequest) ProtoMessage() {}

func (x *BindTableToVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindTableToVariableRequest.ProtoReflect.Descriptor instead.
func (*BindTableToVariableRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{10}
}

func (x *BindTableToVariableRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *BindTableToVariableRequest) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *BindTableToVariableRequest) GetTableId() *ticket.Ticket {
	if x != nil {
		return x.TableId
	}
	return nil
}

type BindTableToVariableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindTableToVariableResponse) Reset() {
	*x = BindTableToVariableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindTableToVariableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindTableToVariableResponse) ProtoMessage() {}

func (x *BindTableToVariableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindTableToVariableResponse.ProtoReflect.Descriptor instead.
func (*BindTableToVariableResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{11}
}

type CancelCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleId *ticket.Ticket `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	CommandId *ticket.Ticket `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
}

func (x *CancelCommandRequest) Reset() {
	*x = CancelCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCommandRequest) ProtoMessage() {}

func (x *CancelCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCommandRequest.ProtoReflect.Descriptor instead.
func (*CancelCommandRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{12}
}

func (x *CancelCommandRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *CancelCommandRequest) GetCommandId() *ticket.Ticket {
	if x != nil {
		return x.CommandId
	}
	return nil
}

type CancelCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelCommandResponse) Reset() {
	*x = CancelCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCommandResponse) ProtoMessage() {}

func (x *CancelCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCommandResponse.ProtoReflect.Descriptor instead.
func (*CancelCommandResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{13}
}

type CancelAutoCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleId *ticket.Ticket `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	RequestId int32          `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CancelAutoCompleteRequest) Reset() {
	*x = CancelAutoCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAutoCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAutoCompleteRequest) ProtoMessage() {}

func (x *CancelAutoCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAutoCompleteRequest.ProtoReflect.Descriptor instead.
func (*CancelAutoCompleteRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{14}
}

func (x *CancelAutoCompleteRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *CancelAutoCompleteRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type CancelAutoCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelAutoCompleteResponse) Reset() {
	*x = CancelAutoCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAutoCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAutoCompleteResponse) ProtoMessage() {}

func (x *CancelAutoCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAutoCompleteResponse.ProtoReflect.Descriptor instead.
func (*CancelAutoCompleteResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{15}
}

type AutoCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleId *ticket.Ticket `protobuf:"bytes,5,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	RequestId int32          `protobuf:"varint,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are assignable to Request:
	//
	//	*AutoCompleteRequest_OpenDocument
	//	*AutoCompleteRequest_ChangeDocument
	//	*AutoCompleteRequest_GetCompletionItems
	//	*AutoCompleteRequest_GetSignatureHelp
	//	*AutoCompleteRequest_GetHover
	//	*AutoCompleteRequest_GetDiagnostic
	//	*AutoCompleteRequest_CloseDocument
	Request isAutoCompleteRequest_Request `protobuf_oneof:"request"`
}

func (x *AutoCompleteRequest) Reset() {
	*x = AutoCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoCompleteRequest) ProtoMessage() {}

func (x *AutoCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoCompleteRequest.ProtoReflect.Descriptor instead.
func (*AutoCompleteRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{16}
}

func (x *AutoCompleteRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *AutoCompleteRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *AutoCompleteRequest) GetRequest() isAutoCompleteRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *AutoCompleteRequest) GetOpenDocument() *OpenDocumentRequest {
	if x, ok := x.GetRequest().(*AutoCompleteRequest_OpenDocument); ok {
		return x.OpenDocument
	}
	return nil
}

func (x *AutoCompleteRequest) GetChangeDocument() *ChangeDocumentRequest {
	if x, ok := x.GetRequest().(*AutoCompleteRequest_ChangeDocument); ok {
		return x.ChangeDocument
	}
	return nil
}

func (x *AutoCompleteRequest) GetGetCompletionItems() *GetCompletionItemsRequest {
	if x, ok := x.GetRequest().(*AutoCompleteRequest_GetCompletionItems); ok {
		return x.GetCompletionItems
	}
	return nil
}

func (x *AutoCompleteRequest) GetGetSignatureHelp() *GetSignatureHelpRequest {
	if x, ok := x.GetRequest().(*AutoCompleteRequest_GetSignatureHelp); ok {
		return x.GetSignatureHelp
	}
	return nil
}

func (x *AutoCompleteRequest) GetGetHover() *GetHoverRequest {
	if x, ok := x.GetRequest().(*AutoCompleteRequest_GetHover); ok {
		return x.GetHover
	}
	return nil
}

func (x *AutoCompleteRequest) GetGetDiagnostic() *GetDiagnosticRequest {
	if x, ok := x.GetRequest().(*AutoCompleteRequest_GetDiagnostic); ok {
		return x.GetDiagnostic
	}
	return nil
}

func (x *AutoCompleteRequest) GetCloseDocument() *CloseDocumentRequest {
	if x, ok := x.GetRequest().(*AutoCompleteRequest_CloseDocument); ok {
		return x.CloseDocument
	}
	return nil
}

type isAutoCompleteRequest_Request interface {
	isAutoCompleteRequest_Request()
}

type AutoCompleteRequest_OpenDocument struct {
	// Starts a document in a given console - to end, just close the stream, the server will hang up right away
	OpenDocument *OpenDocumentRequest `protobuf:"bytes,1,opt,name=open_document,json=openDocument,proto3,oneof"`
}

type AutoCompleteRequest_ChangeDocument struct {
	// Modifies the document that autocomplete can be requested on
	ChangeDocument *ChangeDocumentRequest `protobuf:"bytes,2,opt,name=change_document,json=changeDocument,proto3,oneof"`
}

type AutoCompleteRequest_GetCompletionItems struct {
	// Requests that a response be sent back with completion items
	GetCompletionItems *GetCompletionItemsRequest `protobuf:"bytes,3,opt,name=get_completion_items,json=getCompletionItems,proto3,oneof"`
}

type AutoCompleteRequest_GetSignatureHelp struct {
	// Request for help about the method signature at the cursor
	GetSignatureHelp *GetSignatureHelpRequest `protobuf:"bytes,7,opt,name=get_signature_help,json=getSignatureHelp,proto3,oneof"`
}

type AutoCompleteRequest_GetHover struct {
	// Request for help about what the user is hovering over
	GetHover *GetHoverRequest `protobuf:"bytes,8,opt,name=get_hover,json=getHover,proto3,oneof"`
}

type AutoCompleteRequest_GetDiagnostic struct {
	// Request to perform file diagnostics
	GetDiagnostic *GetDiagnosticRequest `protobuf:"bytes,9,opt,name=get_diagnostic,json=getDiagnostic,proto3,oneof"`
}

type AutoCompleteRequest_CloseDocument struct {
	// Closes the document, indicating that it will not be referenced again
	CloseDocument *CloseDocumentRequest `protobuf:"bytes,4,opt,name=close_document,json=closeDocument,proto3,oneof"`
}

func (*AutoCompleteRequest_OpenDocument) isAutoCompleteRequest_Request() {}

func (*AutoCompleteRequest_ChangeDocument) isAutoCompleteRequest_Request() {}

func (*AutoCompleteRequest_GetCompletionItems) isAutoCompleteRequest_Request() {}

func (*AutoCompleteRequest_GetSignatureHelp) isAutoCompleteRequest_Request() {}

func (*AutoCompleteRequest_GetHover) isAutoCompleteRequest_Request() {}

func (*AutoCompleteRequest_GetDiagnostic) isAutoCompleteRequest_Request() {}

func (*AutoCompleteRequest_CloseDocument) isAutoCompleteRequest_Request() {}

type AutoCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Success   bool  `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are assignable to Response:
	//
	//	*AutoCompleteResponse_CompletionItems
	//	*AutoCompleteResponse_Signatures
	//	*AutoCompleteResponse_Hover
	//	*AutoCompleteResponse_Diagnostic
	//	*AutoCompleteResponse_DiagnosticPublish
	Response isAutoCompleteResponse_Response `protobuf_oneof:"response"`
}

func (x *AutoCompleteResponse) Reset() {
	*x = AutoCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoCompleteResponse) ProtoMessage() {}

func (x *AutoCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoCompleteResponse.ProtoReflect.Descriptor instead.
func (*AutoCompleteResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{17}
}

func (x *AutoCompleteResponse) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *AutoCompleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (m *AutoCompleteResponse) GetResponse() isAutoCompleteResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AutoCompleteResponse) GetCompletionItems() *GetCompletionItemsResponse {
	if x, ok := x.GetResponse().(*AutoCompleteResponse_CompletionItems); ok {
		return x.CompletionItems
	}
	return nil
}

func (x *AutoCompleteResponse) GetSignatures() *GetSignatureHelpResponse {
	if x, ok := x.GetResponse().(*AutoCompleteResponse_Signatures); ok {
		return x.Signatures
	}
	return nil
}

func (x *AutoCompleteResponse) GetHover() *GetHoverResponse {
	if x, ok := x.GetResponse().(*AutoCompleteResponse_Hover); ok {
		return x.Hover
	}
	return nil
}

func (x *AutoCompleteResponse) GetDiagnostic() *GetPullDiagnosticResponse {
	if x, ok := x.GetResponse().(*AutoCompleteResponse_Diagnostic); ok {
		return x.Diagnostic
	}
	return nil
}

func (x *AutoCompleteResponse) GetDiagnosticPublish() *GetPublishDiagnosticResponse {
	if x, ok := x.GetResponse().(*AutoCompleteResponse_DiagnosticPublish); ok {
		return x.DiagnosticPublish
	}
	return nil
}

type isAutoCompleteResponse_Response interface {
	isAutoCompleteResponse_Response()
}

type AutoCompleteResponse_CompletionItems struct {
	CompletionItems *GetCompletionItemsResponse `protobuf:"bytes,1,opt,name=completion_items,json=completionItems,proto3,oneof"`
}

type AutoCompleteResponse_Signatures struct {
	Signatures *GetSignatureHelpResponse `protobuf:"bytes,4,opt,name=signatures,proto3,oneof"`
}

type AutoCompleteResponse_Hover struct {
	Hover *GetHoverResponse `protobuf:"bytes,5,opt,name=hover,proto3,oneof"`
}

type AutoCompleteResponse_Diagnostic struct {
	Diagnostic *GetPullDiagnosticResponse `protobuf:"bytes,6,opt,name=diagnostic,proto3,oneof"`
}

type AutoCompleteResponse_DiagnosticPublish struct {
	DiagnosticPublish *GetPublishDiagnosticResponse `protobuf:"bytes,7,opt,name=diagnostic_publish,json=diagnosticPublish,proto3,oneof"`
}

func (*AutoCompleteResponse_CompletionItems) isAutoCompleteResponse_Response() {}

func (*AutoCompleteResponse_Signatures) isAutoCompleteResponse_Response() {}

func (*AutoCompleteResponse_Hover) isAutoCompleteResponse_Response() {}

func (*AutoCompleteResponse_Diagnostic) isAutoCompleteResponse_Response() {}

func (*AutoCompleteResponse_DiagnosticPublish) isAutoCompleteResponse_Response() {}

type BrowserNextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BrowserNextResponse) Reset() {
	*x = BrowserNextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserNextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserNextResponse) ProtoMessage() {}

func (x *BrowserNextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserNextResponse.ProtoReflect.Descriptor instead.
func (*BrowserNextResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{18}
}

type OpenDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	ConsoleId    *ticket.Ticket    `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	TextDocument *TextDocumentItem `protobuf:"bytes,2,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *OpenDocumentRequest) Reset() {
	*x = OpenDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDocumentRequest) ProtoMessage() {}

func (x *OpenDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDocumentRequest.ProtoReflect.Descriptor instead.
func (*OpenDocumentRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{19}
}

// Deprecated: Do not use.
func (x *OpenDocumentRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *OpenDocumentRequest) GetTextDocument() *TextDocumentItem {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

type TextDocumentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri        string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	LanguageId string `protobuf:"bytes,2,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Version    int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Text       string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextDocumentItem) Reset() {
	*x = TextDocumentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentItem) ProtoMessage() {}

func (x *TextDocumentItem) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentItem.ProtoReflect.Descriptor instead.
func (*TextDocumentItem) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{20}
}

func (x *TextDocumentItem) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *TextDocumentItem) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *TextDocumentItem) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TextDocumentItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CloseDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	ConsoleId    *ticket.Ticket                   `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	TextDocument *VersionedTextDocumentIdentifier `protobuf:"bytes,2,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *CloseDocumentRequest) Reset() {
	*x = CloseDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseDocumentRequest) ProtoMessage() {}

func (x *CloseDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseDocumentRequest.ProtoReflect.Descriptor instead.
func (*CloseDocumentRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{21}
}

// Deprecated: Do not use.
func (x *CloseDocumentRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *CloseDocumentRequest) GetTextDocument() *VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

type ChangeDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	ConsoleId      *ticket.Ticket                                          `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	TextDocument   *VersionedTextDocumentIdentifier                        `protobuf:"bytes,2,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	ContentChanges []*ChangeDocumentRequest_TextDocumentContentChangeEvent `protobuf:"bytes,3,rep,name=content_changes,json=contentChanges,proto3" json:"content_changes,omitempty"`
}

func (x *ChangeDocumentRequest) Reset() {
	*x = ChangeDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDocumentRequest) ProtoMessage() {}

func (x *ChangeDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDocumentRequest.ProtoReflect.Descriptor instead.
func (*ChangeDocumentRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{22}
}

// Deprecated: Do not use.
func (x *ChangeDocumentRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *ChangeDocumentRequest) GetTextDocument() *VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *ChangeDocumentRequest) GetContentChanges() []*ChangeDocumentRequest_TextDocumentContentChangeEvent {
	if x != nil {
		return x.ContentChanges
	}
	return nil
}

type DocumentRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *Position `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *Position `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DocumentRange) Reset() {
	*x = DocumentRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRange) ProtoMessage() {}

func (x *DocumentRange) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRange.ProtoReflect.Descriptor instead.
func (*DocumentRange) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{23}
}

func (x *DocumentRange) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DocumentRange) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

type VersionedTextDocumentIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri     string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionedTextDocumentIdentifier) Reset() {
	*x = VersionedTextDocumentIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedTextDocumentIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedTextDocumentIdentifier) ProtoMessage() {}

func (x *VersionedTextDocumentIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedTextDocumentIdentifier.ProtoReflect.Descriptor instead.
func (*VersionedTextDocumentIdentifier) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{24}
}

func (x *VersionedTextDocumentIdentifier) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *VersionedTextDocumentIdentifier) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line      int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Character int32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{25}
}

func (x *Position) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetCharacter() int32 {
	if x != nil {
		return x.Character
	}
	return 0
}

type MarkupContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MarkupContent) Reset() {
	*x = MarkupContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkupContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkupContent) ProtoMessage() {}

func (x *MarkupContent) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkupContent.ProtoReflect.Descriptor instead.
func (*MarkupContent) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{26}
}

func (x *MarkupContent) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *MarkupContent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetCompletionItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	ConsoleId    *ticket.Ticket                   `protobuf:"bytes,1,opt,name=console_id,json=consoleId,proto3" json:"console_id,omitempty"`
	Context      *CompletionContext               `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	TextDocument *VersionedTextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	Position     *Position                        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// Deprecated: Do not use.
	RequestId int32 `protobuf:"varint,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetCompletionItemsRequest) Reset() {
	*x = GetCompletionItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletionItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletionItemsRequest) ProtoMessage() {}

func (x *GetCompletionItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletionItemsRequest.ProtoReflect.Descriptor instead.
func (*GetCompletionItemsRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{27}
}

// Deprecated: Do not use.
func (x *GetCompletionItemsRequest) GetConsoleId() *ticket.Ticket {
	if x != nil {
		return x.ConsoleId
	}
	return nil
}

func (x *GetCompletionItemsRequest) GetContext() *CompletionContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetCompletionItemsRequest) GetTextDocument() *VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *GetCompletionItemsRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// Deprecated: Do not use.
func (x *GetCompletionItemsRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type CompletionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerKind      int32  `protobuf:"varint,1,opt,name=trigger_kind,json=triggerKind,proto3" json:"trigger_kind,omitempty"`
	TriggerCharacter string `protobuf:"bytes,2,opt,name=trigger_character,json=triggerCharacter,proto3" json:"trigger_character,omitempty"`
}

func (x *CompletionContext) Reset() {
	*x = CompletionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionContext) ProtoMessage() {}

func (x *CompletionContext) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionContext.ProtoReflect.Descriptor instead.
func (*CompletionContext) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{28}
}

func (x *CompletionContext) GetTriggerKind() int32 {
	if x != nil {
		return x.TriggerKind
	}
	return 0
}

func (x *CompletionContext) GetTriggerCharacter() string {
	if x != nil {
		return x.TriggerCharacter
	}
	return ""
}

type GetCompletionItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CompletionItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Maintained for backwards compatibility. Use the same field on AutoCompleteResponse instead
	//
	// Deprecated: Do not use.
	RequestId int32 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Maintained for backwards compatibility. Use the same field on AutoCompleteResponse instead
	//
	// Deprecated: Do not use.
	Success bool `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GetCompletionItemsResponse) Reset() {
	*x = GetCompletionItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletionItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletionItemsResponse) ProtoMessage() {}

func (x *GetCompletionItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletionItemsResponse.ProtoReflect.Descriptor instead.
func (*GetCompletionItemsResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{29}
}

func (x *GetCompletionItemsResponse) GetItems() []*CompletionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Deprecated: Do not use.
func (x *GetCompletionItemsResponse) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

// Deprecated: Do not use.
func (x *GetCompletionItemsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CompletionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start               int32          `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Length              int32          `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Label               string         `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Kind                int32          `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Detail              string         `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Deprecated          bool           `protobuf:"varint,7,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	Preselect           bool           `protobuf:"varint,8,opt,name=preselect,proto3" json:"preselect,omitempty"`
	TextEdit            *TextEdit      `protobuf:"bytes,9,opt,name=text_edit,json=textEdit,proto3" json:"text_edit,omitempty"`
	SortText            string         `protobuf:"bytes,10,opt,name=sort_text,json=sortText,proto3" json:"sort_text,omitempty"`
	FilterText          string         `protobuf:"bytes,11,opt,name=filter_text,json=filterText,proto3" json:"filter_text,omitempty"`
	InsertTextFormat    int32          `protobuf:"varint,12,opt,name=insert_text_format,json=insertTextFormat,proto3" json:"insert_text_format,omitempty"`
	AdditionalTextEdits []*TextEdit    `protobuf:"bytes,13,rep,name=additional_text_edits,json=additionalTextEdits,proto3" json:"additional_text_edits,omitempty"`
	CommitCharacters    []string       `protobuf:"bytes,14,rep,name=commit_characters,json=commitCharacters,proto3" json:"commit_characters,omitempty"`
	Documentation       *MarkupContent `protobuf:"bytes,15,opt,name=documentation,proto3" json:"documentation,omitempty"`
}

func (x *CompletionItem) Reset() {
	*x = CompletionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionItem) ProtoMessage() {}

func (x *CompletionItem) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionItem.ProtoReflect.Descriptor instead.
func (*CompletionItem) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{30}
}

func (x *CompletionItem) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CompletionItem) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CompletionItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CompletionItem) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *CompletionItem) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CompletionItem) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *CompletionItem) GetPreselect() bool {
	if x != nil {
		return x.Preselect
	}
	return false
}

func (x *CompletionItem) GetTextEdit() *TextEdit {
	if x != nil {
		return x.TextEdit
	}
	return nil
}

func (x *CompletionItem) GetSortText() string {
	if x != nil {
		return x.SortText
	}
	return ""
}

func (x *CompletionItem) GetFilterText() string {
	if x != nil {
		return x.FilterText
	}
	return ""
}

func (x *CompletionItem) GetInsertTextFormat() int32 {
	if x != nil {
		return x.InsertTextFormat
	}
	return 0
}

func (x *CompletionItem) GetAdditionalTextEdits() []*TextEdit {
	if x != nil {
		return x.AdditionalTextEdits
	}
	return nil
}

func (x *CompletionItem) GetCommitCharacters() []string {
	if x != nil {
		return x.CommitCharacters
	}
	return nil
}

func (x *CompletionItem) GetDocumentation() *MarkupContent {
	if x != nil {
		return x.Documentation
	}
	return nil
}

type TextEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *DocumentRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Text  string         `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextEdit) Reset() {
	*x = TextEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEdit) ProtoMessage() {}

func (x *TextEdit) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEdit.ProtoReflect.Descriptor instead.
func (*TextEdit) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{31}
}

func (x *TextEdit) GetRange() *DocumentRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *TextEdit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GetSignatureHelpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context      *SignatureHelpContext            `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TextDocument *VersionedTextDocumentIdentifier `protobuf:"bytes,2,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	Position     *Position                        `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GetSignatureHelpRequest) Reset() {
	*x = GetSignatureHelpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignatureHelpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignatureHelpRequest) ProtoMessage() {}

func (x *GetSignatureHelpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignatureHelpRequest.ProtoReflect.Descriptor instead.
func (*GetSignatureHelpRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{32}
}

func (x *GetSignatureHelpRequest) GetContext() *SignatureHelpContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetSignatureHelpRequest) GetTextDocument() *VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *GetSignatureHelpRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type SignatureHelpContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerKind         int32                     `protobuf:"varint,1,opt,name=trigger_kind,json=triggerKind,proto3" json:"trigger_kind,omitempty"`
	TriggerCharacter    *string                   `protobuf:"bytes,2,opt,name=trigger_character,json=triggerCharacter,proto3,oneof" json:"trigger_character,omitempty"`
	IsRetrigger         bool                      `protobuf:"varint,3,opt,name=is_retrigger,json=isRetrigger,proto3" json:"is_retrigger,omitempty"`
	ActiveSignatureHelp *GetSignatureHelpResponse `protobuf:"bytes,4,opt,name=active_signature_help,json=activeSignatureHelp,proto3" json:"active_signature_help,omitempty"`
}

func (x *SignatureHelpContext) Reset() {
	*x = SignatureHelpContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpContext) ProtoMessage() {}

func (x *SignatureHelpContext) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpContext.ProtoReflect.Descriptor instead.
func (*SignatureHelpContext) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{33}
}

func (x *SignatureHelpContext) GetTriggerKind() int32 {
	if x != nil {
		return x.TriggerKind
	}
	return 0
}

func (x *SignatureHelpContext) GetTriggerCharacter() string {
	if x != nil && x.TriggerCharacter != nil {
		return *x.TriggerCharacter
	}
	return ""
}

func (x *SignatureHelpContext) GetIsRetrigger() bool {
	if x != nil {
		return x.IsRetrigger
	}
	return false
}

func (x *SignatureHelpContext) GetActiveSignatureHelp() *GetSignatureHelpResponse {
	if x != nil {
		return x.ActiveSignatureHelp
	}
	return nil
}

type GetSignatureHelpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures      []*SignatureInformation `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	ActiveSignature *int32                  `protobuf:"varint,2,opt,name=active_signature,json=activeSignature,proto3,oneof" json:"active_signature,omitempty"`
	ActiveParameter *int32                  `protobuf:"varint,3,opt,name=active_parameter,json=activeParameter,proto3,oneof" json:"active_parameter,omitempty"`
}

func (x *GetSignatureHelpResponse) Reset() {
	*x = GetSignatureHelpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignatureHelpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignatureHelpResponse) ProtoMessage() {}

func (x *GetSignatureHelpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignatureHelpResponse.ProtoReflect.Descriptor instead.
func (*GetSignatureHelpResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{34}
}

func (x *GetSignatureHelpResponse) GetSignatures() []*SignatureInformation {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *GetSignatureHelpResponse) GetActiveSignature() int32 {
	if x != nil && x.ActiveSignature != nil {
		return *x.ActiveSignature
	}
	return 0
}

func (x *GetSignatureHelpResponse) GetActiveParameter() int32 {
	if x != nil && x.ActiveParameter != nil {
		return *x.ActiveParameter
	}
	return 0
}

type SignatureInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           string                  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Documentation   *MarkupContent          `protobuf:"bytes,2,opt,name=documentation,proto3" json:"documentation,omitempty"`
	Parameters      []*ParameterInformation `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ActiveParameter *int32                  `protobuf:"varint,4,opt,name=active_parameter,json=activeParameter,proto3,oneof" json:"active_parameter,omitempty"`
}

func (x *SignatureInformation) Reset() {
	*x = SignatureInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInformation) ProtoMessage() {}

func (x *SignatureInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInformation.ProtoReflect.Descriptor instead.
func (*SignatureInformation) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{35}
}

func (x *SignatureInformation) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SignatureInformation) GetDocumentation() *MarkupContent {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *SignatureInformation) GetParameters() []*ParameterInformation {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SignatureInformation) GetActiveParameter() int32 {
	if x != nil && x.ActiveParameter != nil {
		return *x.ActiveParameter
	}
	return 0
}

type ParameterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string         `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Documentation *MarkupContent `protobuf:"bytes,2,opt,name=documentation,proto3" json:"documentation,omitempty"`
}

func (x *ParameterInformation) Reset() {
	*x = ParameterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterInformation) ProtoMessage() {}

func (x *ParameterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterInformation.ProtoReflect.Descriptor instead.
func (*ParameterInformation) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{36}
}

func (x *ParameterInformation) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ParameterInformation) GetDocumentation() *MarkupContent {
	if x != nil {
		return x.Documentation
	}
	return nil
}

type GetHoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextDocument *VersionedTextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	Position     *Position                        `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GetHoverRequest) Reset() {
	*x = GetHoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoverRequest) ProtoMessage() {}

func (x *GetHoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoverRequest.ProtoReflect.Descriptor instead.
func (*GetHoverRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{37}
}

func (x *GetHoverRequest) GetTextDocument() *VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *GetHoverRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type GetHoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents *MarkupContent `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Range    *DocumentRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *GetHoverResponse) Reset() {
	*x = GetHoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoverResponse) ProtoMessage() {}

func (x *GetHoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoverResponse.ProtoReflect.Descriptor instead.
func (*GetHoverResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{38}
}

func (x *GetHoverResponse) GetContents() *MarkupContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *GetHoverResponse) GetRange() *DocumentRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type GetDiagnosticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextDocument     *VersionedTextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	Identifier       *string                          `protobuf:"bytes,2,opt,name=identifier,proto3,oneof" json:"identifier,omitempty"`
	PreviousResultId *string                          `protobuf:"bytes,3,opt,name=previous_result_id,json=previousResultId,proto3,oneof" json:"previous_result_id,omitempty"`
}

func (x *GetDiagnosticRequest) Reset() {
	*x = GetDiagnosticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticRequest) ProtoMessage() {}

func (x *GetDiagnosticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosticRequest) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{39}
}

func (x *GetDiagnosticRequest) GetTextDocument() *VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *GetDiagnosticRequest) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *GetDiagnosticRequest) GetPreviousResultId() string {
	if x != nil && x.PreviousResultId != nil {
		return *x.PreviousResultId
	}
	return ""
}

type GetPullDiagnosticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     string        `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	ResultId *string       `protobuf:"bytes,2,opt,name=result_id,json=resultId,proto3,oneof" json:"result_id,omitempty"`
	Items    []*Diagnostic `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetPullDiagnosticResponse) Reset() {
	*x = GetPullDiagnosticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPullDiagnosticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPullDiagnosticResponse) ProtoMessage() {}

func (x *GetPullDiagnosticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPullDiagnosticResponse.ProtoReflect.Descriptor instead.
func (*GetPullDiagnosticResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{40}
}

func (x *GetPullDiagnosticResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetPullDiagnosticResponse) GetResultId() string {
	if x != nil && x.ResultId != nil {
		return *x.ResultId
	}
	return ""
}

func (x *GetPullDiagnosticResponse) GetItems() []*Diagnostic {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetPublishDiagnosticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri         string        `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Version     *int32        `protobuf:"varint,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Diagnostics []*Diagnostic `protobuf:"bytes,3,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *GetPublishDiagnosticResponse) Reset() {
	*x = GetPublishDiagnosticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishDiagnosticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishDiagnosticResponse) ProtoMessage() {}

func (x *GetPublishDiagnosticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishDiagnosticResponse.ProtoReflect.Descriptor instead.
func (*GetPublishDiagnosticResponse) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{41}
}

func (x *GetPublishDiagnosticResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GetPublishDiagnosticResponse) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *GetPublishDiagnosticResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range           *DocumentRange                `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Severity        Diagnostic_DiagnosticSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=io.deephaven.proto.backplane.script.grpc.Diagnostic_DiagnosticSeverity" json:"severity,omitempty"`
	Code            *string                       `protobuf:"bytes,3,opt,name=code,proto3,oneof" json:"code,omitempty"`
	CodeDescription *Diagnostic_CodeDescription   `protobuf:"bytes,4,opt,name=code_description,json=codeDescription,proto3,oneof" json:"code_description,omitempty"`
	Source          *string                       `protobuf:"bytes,5,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Message         string                        `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Tags            []Diagnostic_DiagnosticTag    `protobuf:"varint,7,rep,packed,name=tags,proto3,enum=io.deephaven.proto.backplane.script.grpc.Diagnostic_DiagnosticTag" json:"tags,omitempty"`
	Data            []byte                        `protobuf:"bytes,9,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{42}
}

func (x *Diagnostic) GetRange() *DocumentRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Diagnostic) GetSeverity() Diagnostic_DiagnosticSeverity {
	if x != nil {
		return x.Severity
	}
	return Diagnostic_NOT_SET_SEVERITY
}

func (x *Diagnostic) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Diagnostic) GetCodeDescription() *Diagnostic_CodeDescription {
	if x != nil {
		return x.CodeDescription
	}
	return nil
}

func (x *Diagnostic) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic) GetTags() []Diagnostic_DiagnosticTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Diagnostic) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type FigureDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          *string                             `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	TitleFont      string                              `protobuf:"bytes,2,opt,name=title_font,json=titleFont,proto3" json:"title_font,omitempty"`
	TitleColor     string                              `protobuf:"bytes,3,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`
	UpdateInterval int64                               `protobuf:"varint,7,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
	Cols           int32                               `protobuf:"varint,8,opt,name=cols,proto3" json:"cols,omitempty"`
	Rows           int32                               `protobuf:"varint,9,opt,name=rows,proto3" json:"rows,omitempty"`
	Charts         []*FigureDescriptor_ChartDescriptor `protobuf:"bytes,10,rep,name=charts,proto3" json:"charts,omitempty"`
	Errors         []string                            `protobuf:"bytes,13,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *FigureDescriptor) Reset() {
	*x = FigureDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor) ProtoMessage() {}

func (x *FigureDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43}
}

func (x *FigureDescriptor) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FigureDescriptor) GetTitleFont() string {
	if x != nil {
		return x.TitleFont
	}
	return ""
}

func (x *FigureDescriptor) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *FigureDescriptor) GetUpdateInterval() int64 {
	if x != nil {
		return x.UpdateInterval
	}
	return 0
}

func (x *FigureDescriptor) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *FigureDescriptor) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *FigureDescriptor) GetCharts() []*FigureDescriptor_ChartDescriptor {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *FigureDescriptor) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ChangeDocumentRequest_TextDocumentContentChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range       *DocumentRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	RangeLength int32          `protobuf:"varint,2,opt,name=range_length,json=rangeLength,proto3" json:"range_length,omitempty"`
	Text        string         `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ChangeDocumentRequest_TextDocumentContentChangeEvent) Reset() {
	*x = ChangeDocumentRequest_TextDocumentContentChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDocumentRequest_TextDocumentContentChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDocumentRequest_TextDocumentContentChangeEvent) ProtoMessage() {}

func (x *ChangeDocumentRequest_TextDocumentContentChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDocumentRequest_TextDocumentContentChangeEvent.ProtoReflect.Descriptor instead.
func (*ChangeDocumentRequest_TextDocumentContentChangeEvent) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ChangeDocumentRequest_TextDocumentContentChangeEvent) GetRange() *DocumentRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ChangeDocumentRequest_TextDocumentContentChangeEvent) GetRangeLength() int32 {
	if x != nil {
		return x.RangeLength
	}
	return 0
}

func (x *ChangeDocumentRequest_TextDocumentContentChangeEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Diagnostic_CodeDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
}

func (x *Diagnostic_CodeDescription) Reset() {
	*x = Diagnostic_CodeDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic_CodeDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic_CodeDescription) ProtoMessage() {}

func (x *Diagnostic_CodeDescription) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic_CodeDescription.ProtoReflect.Descriptor instead.
func (*Diagnostic_CodeDescription) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{42, 0}
}

func (x *Diagnostic_CodeDescription) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

type FigureDescriptor_ChartDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colspan     int32                                      `protobuf:"varint,1,opt,name=colspan,proto3" json:"colspan,omitempty"`
	Rowspan     int32                                      `protobuf:"varint,2,opt,name=rowspan,proto3" json:"rowspan,omitempty"`
	Series      []*FigureDescriptor_SeriesDescriptor       `protobuf:"bytes,3,rep,name=series,proto3" json:"series,omitempty"`
	MultiSeries []*FigureDescriptor_MultiSeriesDescriptor  `protobuf:"bytes,4,rep,name=multi_series,json=multiSeries,proto3" json:"multi_series,omitempty"`
	Axes        []*FigureDescriptor_AxisDescriptor         `protobuf:"bytes,5,rep,name=axes,proto3" json:"axes,omitempty"`
	ChartType   FigureDescriptor_ChartDescriptor_ChartType `protobuf:"varint,6,opt,name=chart_type,json=chartType,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_ChartDescriptor_ChartType" json:"chart_type,omitempty"`
	Title       *string                                    `protobuf:"bytes,7,opt,name=title,proto3,oneof" json:"title,omitempty"`
	TitleFont   string                                     `protobuf:"bytes,8,opt,name=title_font,json=titleFont,proto3" json:"title_font,omitempty"`
	TitleColor  string                                     `protobuf:"bytes,9,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`
	ShowLegend  bool                                       `protobuf:"varint,10,opt,name=show_legend,json=showLegend,proto3" json:"show_legend,omitempty"`
	LegendFont  string                                     `protobuf:"bytes,11,opt,name=legend_font,json=legendFont,proto3" json:"legend_font,omitempty"`
	LegendColor string                                     `protobuf:"bytes,12,opt,name=legend_color,json=legendColor,proto3" json:"legend_color,omitempty"`
	Is3D        bool                                       `protobuf:"varint,13,opt,name=is3d,proto3" json:"is3d,omitempty"`
	Column      int32                                      `protobuf:"varint,14,opt,name=column,proto3" json:"column,omitempty"`
	Row         int32                                      `protobuf:"varint,15,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *FigureDescriptor_ChartDescriptor) Reset() {
	*x = FigureDescriptor_ChartDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_ChartDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_ChartDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_ChartDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_ChartDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_ChartDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 0}
}

func (x *FigureDescriptor_ChartDescriptor) GetColspan() int32 {
	if x != nil {
		return x.Colspan
	}
	return 0
}

func (x *FigureDescriptor_ChartDescriptor) GetRowspan() int32 {
	if x != nil {
		return x.Rowspan
	}
	return 0
}

func (x *FigureDescriptor_ChartDescriptor) GetSeries() []*FigureDescriptor_SeriesDescriptor {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *FigureDescriptor_ChartDescriptor) GetMultiSeries() []*FigureDescriptor_MultiSeriesDescriptor {
	if x != nil {
		return x.MultiSeries
	}
	return nil
}

func (x *FigureDescriptor_ChartDescriptor) GetAxes() []*FigureDescriptor_AxisDescriptor {
	if x != nil {
		return x.Axes
	}
	return nil
}

func (x *FigureDescriptor_ChartDescriptor) GetChartType() FigureDescriptor_ChartDescriptor_ChartType {
	if x != nil {
		return x.ChartType
	}
	return FigureDescriptor_ChartDescriptor_XY
}

func (x *FigureDescriptor_ChartDescriptor) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FigureDescriptor_ChartDescriptor) GetTitleFont() string {
	if x != nil {
		return x.TitleFont
	}
	return ""
}

func (x *FigureDescriptor_ChartDescriptor) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *FigureDescriptor_ChartDescriptor) GetShowLegend() bool {
	if x != nil {
		return x.ShowLegend
	}
	return false
}

func (x *FigureDescriptor_ChartDescriptor) GetLegendFont() string {
	if x != nil {
		return x.LegendFont
	}
	return ""
}

func (x *FigureDescriptor_ChartDescriptor) GetLegendColor() string {
	if x != nil {
		return x.LegendColor
	}
	return ""
}

func (x *FigureDescriptor_ChartDescriptor) GetIs3D() bool {
	if x != nil {
		return x.Is3D
	}
	return false
}

func (x *FigureDescriptor_ChartDescriptor) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *FigureDescriptor_ChartDescriptor) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

type FigureDescriptor_SeriesDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlotStyle        FigureDescriptor_SeriesPlotStyle     `protobuf:"varint,1,opt,name=plot_style,json=plotStyle,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_SeriesPlotStyle" json:"plot_style,omitempty"`
	Name             string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LinesVisible     *bool                                `protobuf:"varint,3,opt,name=lines_visible,json=linesVisible,proto3,oneof" json:"lines_visible,omitempty"`
	ShapesVisible    *bool                                `protobuf:"varint,4,opt,name=shapes_visible,json=shapesVisible,proto3,oneof" json:"shapes_visible,omitempty"`
	GradientVisible  bool                                 `protobuf:"varint,5,opt,name=gradient_visible,json=gradientVisible,proto3" json:"gradient_visible,omitempty"`
	LineColor        string                               `protobuf:"bytes,6,opt,name=line_color,json=lineColor,proto3" json:"line_color,omitempty"`
	PointLabelFormat *string                              `protobuf:"bytes,8,opt,name=point_label_format,json=pointLabelFormat,proto3,oneof" json:"point_label_format,omitempty"`
	XToolTipPattern  *string                              `protobuf:"bytes,9,opt,name=x_tool_tip_pattern,json=xToolTipPattern,proto3,oneof" json:"x_tool_tip_pattern,omitempty"`
	YToolTipPattern  *string                              `protobuf:"bytes,10,opt,name=y_tool_tip_pattern,json=yToolTipPattern,proto3,oneof" json:"y_tool_tip_pattern,omitempty"`
	ShapeLabel       string                               `protobuf:"bytes,11,opt,name=shape_label,json=shapeLabel,proto3" json:"shape_label,omitempty"`
	ShapeSize        *float64                             `protobuf:"fixed64,12,opt,name=shape_size,json=shapeSize,proto3,oneof" json:"shape_size,omitempty"`
	ShapeColor       string                               `protobuf:"bytes,13,opt,name=shape_color,json=shapeColor,proto3" json:"shape_color,omitempty"`
	Shape            string                               `protobuf:"bytes,14,opt,name=shape,proto3" json:"shape,omitempty"`
	DataSources      []*FigureDescriptor_SourceDescriptor `protobuf:"bytes,15,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *FigureDescriptor_SeriesDescriptor) Reset() {
	*x = FigureDescriptor_SeriesDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_SeriesDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_SeriesDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_SeriesDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_SeriesDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_SeriesDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 1}
}

func (x *FigureDescriptor_SeriesDescriptor) GetPlotStyle() FigureDescriptor_SeriesPlotStyle {
	if x != nil {
		return x.PlotStyle
	}
	return FigureDescriptor_BAR
}

func (x *FigureDescriptor_SeriesDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetLinesVisible() bool {
	if x != nil && x.LinesVisible != nil {
		return *x.LinesVisible
	}
	return false
}

func (x *FigureDescriptor_SeriesDescriptor) GetShapesVisible() bool {
	if x != nil && x.ShapesVisible != nil {
		return *x.ShapesVisible
	}
	return false
}

func (x *FigureDescriptor_SeriesDescriptor) GetGradientVisible() bool {
	if x != nil {
		return x.GradientVisible
	}
	return false
}

func (x *FigureDescriptor_SeriesDescriptor) GetLineColor() string {
	if x != nil {
		return x.LineColor
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetPointLabelFormat() string {
	if x != nil && x.PointLabelFormat != nil {
		return *x.PointLabelFormat
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetXToolTipPattern() string {
	if x != nil && x.XToolTipPattern != nil {
		return *x.XToolTipPattern
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetYToolTipPattern() string {
	if x != nil && x.YToolTipPattern != nil {
		return *x.YToolTipPattern
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetShapeLabel() string {
	if x != nil {
		return x.ShapeLabel
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetShapeSize() float64 {
	if x != nil && x.ShapeSize != nil {
		return *x.ShapeSize
	}
	return 0
}

func (x *FigureDescriptor_SeriesDescriptor) GetShapeColor() string {
	if x != nil {
		return x.ShapeColor
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *FigureDescriptor_SeriesDescriptor) GetDataSources() []*FigureDescriptor_SourceDescriptor {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type FigureDescriptor_MultiSeriesDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlotStyle        FigureDescriptor_SeriesPlotStyle                `protobuf:"varint,1,opt,name=plot_style,json=plotStyle,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_SeriesPlotStyle" json:"plot_style,omitempty"`
	Name             string                                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LineColor        *FigureDescriptor_StringMapWithDefault          `protobuf:"bytes,3,opt,name=line_color,json=lineColor,proto3" json:"line_color,omitempty"`
	PointColor       *FigureDescriptor_StringMapWithDefault          `protobuf:"bytes,4,opt,name=point_color,json=pointColor,proto3" json:"point_color,omitempty"`
	LinesVisible     *FigureDescriptor_BoolMapWithDefault            `protobuf:"bytes,5,opt,name=lines_visible,json=linesVisible,proto3" json:"lines_visible,omitempty"`
	PointsVisible    *FigureDescriptor_BoolMapWithDefault            `protobuf:"bytes,6,opt,name=points_visible,json=pointsVisible,proto3" json:"points_visible,omitempty"`
	GradientVisible  *FigureDescriptor_BoolMapWithDefault            `protobuf:"bytes,7,opt,name=gradient_visible,json=gradientVisible,proto3" json:"gradient_visible,omitempty"`
	PointLabelFormat *FigureDescriptor_StringMapWithDefault          `protobuf:"bytes,8,opt,name=point_label_format,json=pointLabelFormat,proto3" json:"point_label_format,omitempty"`
	XToolTipPattern  *FigureDescriptor_StringMapWithDefault          `protobuf:"bytes,9,opt,name=x_tool_tip_pattern,json=xToolTipPattern,proto3" json:"x_tool_tip_pattern,omitempty"`
	YToolTipPattern  *FigureDescriptor_StringMapWithDefault          `protobuf:"bytes,10,opt,name=y_tool_tip_pattern,json=yToolTipPattern,proto3" json:"y_tool_tip_pattern,omitempty"`
	PointLabel       *FigureDescriptor_StringMapWithDefault          `protobuf:"bytes,11,opt,name=point_label,json=pointLabel,proto3" json:"point_label,omitempty"`
	PointSize        *FigureDescriptor_DoubleMapWithDefault          `protobuf:"bytes,12,opt,name=point_size,json=pointSize,proto3" json:"point_size,omitempty"`
	PointShape       *FigureDescriptor_StringMapWithDefault          `protobuf:"bytes,13,opt,name=point_shape,json=pointShape,proto3" json:"point_shape,omitempty"`
	DataSources      []*FigureDescriptor_MultiSeriesSourceDescriptor `protobuf:"bytes,14,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *FigureDescriptor_MultiSeriesDescriptor) Reset() {
	*x = FigureDescriptor_MultiSeriesDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_MultiSeriesDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_MultiSeriesDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_MultiSeriesDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_MultiSeriesDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_MultiSeriesDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 2}
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetPlotStyle() FigureDescriptor_SeriesPlotStyle {
	if x != nil {
		return x.PlotStyle
	}
	return FigureDescriptor_BAR
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetLineColor() *FigureDescriptor_StringMapWithDefault {
	if x != nil {
		return x.LineColor
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetPointColor() *FigureDescriptor_StringMapWithDefault {
	if x != nil {
		return x.PointColor
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetLinesVisible() *FigureDescriptor_BoolMapWithDefault {
	if x != nil {
		return x.LinesVisible
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetPointsVisible() *FigureDescriptor_BoolMapWithDefault {
	if x != nil {
		return x.PointsVisible
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetGradientVisible() *FigureDescriptor_BoolMapWithDefault {
	if x != nil {
		return x.GradientVisible
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetPointLabelFormat() *FigureDescriptor_StringMapWithDefault {
	if x != nil {
		return x.PointLabelFormat
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetXToolTipPattern() *FigureDescriptor_StringMapWithDefault {
	if x != nil {
		return x.XToolTipPattern
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetYToolTipPattern() *FigureDescriptor_StringMapWithDefault {
	if x != nil {
		return x.YToolTipPattern
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetPointLabel() *FigureDescriptor_StringMapWithDefault {
	if x != nil {
		return x.PointLabel
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetPointSize() *FigureDescriptor_DoubleMapWithDefault {
	if x != nil {
		return x.PointSize
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetPointShape() *FigureDescriptor_StringMapWithDefault {
	if x != nil {
		return x.PointShape
	}
	return nil
}

func (x *FigureDescriptor_MultiSeriesDescriptor) GetDataSources() []*FigureDescriptor_MultiSeriesSourceDescriptor {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type FigureDescriptor_StringMapWithDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultString *string  `protobuf:"bytes,1,opt,name=default_string,json=defaultString,proto3,oneof" json:"default_string,omitempty"`
	Keys          []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Values        []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FigureDescriptor_StringMapWithDefault) Reset() {
	*x = FigureDescriptor_StringMapWithDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_StringMapWithDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_StringMapWithDefault) ProtoMessage() {}

func (x *FigureDescriptor_StringMapWithDefault) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_StringMapWithDefault.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_StringMapWithDefault) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 3}
}

func (x *FigureDescriptor_StringMapWithDefault) GetDefaultString() string {
	if x != nil && x.DefaultString != nil {
		return *x.DefaultString
	}
	return ""
}

func (x *FigureDescriptor_StringMapWithDefault) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *FigureDescriptor_StringMapWithDefault) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FigureDescriptor_DoubleMapWithDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultDouble *float64  `protobuf:"fixed64,1,opt,name=default_double,json=defaultDouble,proto3,oneof" json:"default_double,omitempty"`
	Keys          []string  `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Values        []float64 `protobuf:"fixed64,3,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FigureDescriptor_DoubleMapWithDefault) Reset() {
	*x = FigureDescriptor_DoubleMapWithDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_DoubleMapWithDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_DoubleMapWithDefault) ProtoMessage() {}

func (x *FigureDescriptor_DoubleMapWithDefault) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_DoubleMapWithDefault.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_DoubleMapWithDefault) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 4}
}

func (x *FigureDescriptor_DoubleMapWithDefault) GetDefaultDouble() float64 {
	if x != nil && x.DefaultDouble != nil {
		return *x.DefaultDouble
	}
	return 0
}

func (x *FigureDescriptor_DoubleMapWithDefault) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *FigureDescriptor_DoubleMapWithDefault) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FigureDescriptor_BoolMapWithDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultBool *bool    `protobuf:"varint,1,opt,name=default_bool,json=defaultBool,proto3,oneof" json:"default_bool,omitempty"`
	Keys        []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Values      []bool   `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FigureDescriptor_BoolMapWithDefault) Reset() {
	*x = FigureDescriptor_BoolMapWithDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_BoolMapWithDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_BoolMapWithDefault) ProtoMessage() {}

func (x *FigureDescriptor_BoolMapWithDefault) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_BoolMapWithDefault.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_BoolMapWithDefault) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 5}
}

func (x *FigureDescriptor_BoolMapWithDefault) GetDefaultBool() bool {
	if x != nil && x.DefaultBool != nil {
		return *x.DefaultBool
	}
	return false
}

func (x *FigureDescriptor_BoolMapWithDefault) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *FigureDescriptor_BoolMapWithDefault) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type FigureDescriptor_AxisDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FormatType                 FigureDescriptor_AxisDescriptor_AxisFormatType `protobuf:"varint,2,opt,name=format_type,json=formatType,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_AxisDescriptor_AxisFormatType" json:"format_type,omitempty"`
	Type                       FigureDescriptor_AxisDescriptor_AxisType       `protobuf:"varint,3,opt,name=type,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_AxisDescriptor_AxisType" json:"type,omitempty"`
	Position                   FigureDescriptor_AxisDescriptor_AxisPosition   `protobuf:"varint,4,opt,name=position,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_AxisDescriptor_AxisPosition" json:"position,omitempty"`
	Log                        bool                                           `protobuf:"varint,5,opt,name=log,proto3" json:"log,omitempty"`
	Label                      string                                         `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	LabelFont                  string                                         `protobuf:"bytes,7,opt,name=label_font,json=labelFont,proto3" json:"label_font,omitempty"`
	TicksFont                  string                                         `protobuf:"bytes,8,opt,name=ticks_font,json=ticksFont,proto3" json:"ticks_font,omitempty"`
	FormatPattern              *string                                        `protobuf:"bytes,9,opt,name=format_pattern,json=formatPattern,proto3,oneof" json:"format_pattern,omitempty"`
	Color                      string                                         `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	MinRange                   float64                                        `protobuf:"fixed64,11,opt,name=min_range,json=minRange,proto3" json:"min_range,omitempty"`
	MaxRange                   float64                                        `protobuf:"fixed64,12,opt,name=max_range,json=maxRange,proto3" json:"max_range,omitempty"`
	MinorTicksVisible          bool                                           `protobuf:"varint,13,opt,name=minor_ticks_visible,json=minorTicksVisible,proto3" json:"minor_ticks_visible,omitempty"`
	MajorTicksVisible          bool                                           `protobuf:"varint,14,opt,name=major_ticks_visible,json=majorTicksVisible,proto3" json:"major_ticks_visible,omitempty"`
	MinorTickCount             int32                                          `protobuf:"varint,15,opt,name=minor_tick_count,json=minorTickCount,proto3" json:"minor_tick_count,omitempty"`
	GapBetweenMajorTicks       *float64                                       `protobuf:"fixed64,16,opt,name=gap_between_major_ticks,json=gapBetweenMajorTicks,proto3,oneof" json:"gap_between_major_ticks,omitempty"`
	MajorTickLocations         []float64                                      `protobuf:"fixed64,17,rep,packed,name=major_tick_locations,json=majorTickLocations,proto3" json:"major_tick_locations,omitempty"`
	TickLabelAngle             float64                                        `protobuf:"fixed64,18,opt,name=tick_label_angle,json=tickLabelAngle,proto3" json:"tick_label_angle,omitempty"`
	Invert                     bool                                           `protobuf:"varint,19,opt,name=invert,proto3" json:"invert,omitempty"`
	IsTimeAxis                 bool                                           `protobuf:"varint,20,opt,name=is_time_axis,json=isTimeAxis,proto3" json:"is_time_axis,omitempty"`
	BusinessCalendarDescriptor *FigureDescriptor_BusinessCalendarDescriptor   `protobuf:"bytes,21,opt,name=business_calendar_descriptor,json=businessCalendarDescriptor,proto3" json:"business_calendar_descriptor,omitempty"`
}

func (x *FigureDescriptor_AxisDescriptor) Reset() {
	*x = FigureDescriptor_AxisDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_AxisDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_AxisDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_AxisDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_AxisDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_AxisDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 6}
}

func (x *FigureDescriptor_AxisDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FigureDescriptor_AxisDescriptor) GetFormatType() FigureDescriptor_AxisDescriptor_AxisFormatType {
	if x != nil {
		return x.FormatType
	}
	return FigureDescriptor_AxisDescriptor_CATEGORY
}

func (x *FigureDescriptor_AxisDescriptor) GetType() FigureDescriptor_AxisDescriptor_AxisType {
	if x != nil {
		return x.Type
	}
	return FigureDescriptor_AxisDescriptor_X
}

func (x *FigureDescriptor_AxisDescriptor) GetPosition() FigureDescriptor_AxisDescriptor_AxisPosition {
	if x != nil {
		return x.Position
	}
	return FigureDescriptor_AxisDescriptor_TOP
}

func (x *FigureDescriptor_AxisDescriptor) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *FigureDescriptor_AxisDescriptor) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FigureDescriptor_AxisDescriptor) GetLabelFont() string {
	if x != nil {
		return x.LabelFont
	}
	return ""
}

func (x *FigureDescriptor_AxisDescriptor) GetTicksFont() string {
	if x != nil {
		return x.TicksFont
	}
	return ""
}

func (x *FigureDescriptor_AxisDescriptor) GetFormatPattern() string {
	if x != nil && x.FormatPattern != nil {
		return *x.FormatPattern
	}
	return ""
}

func (x *FigureDescriptor_AxisDescriptor) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *FigureDescriptor_AxisDescriptor) GetMinRange() float64 {
	if x != nil {
		return x.MinRange
	}
	return 0
}

func (x *FigureDescriptor_AxisDescriptor) GetMaxRange() float64 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *FigureDescriptor_AxisDescriptor) GetMinorTicksVisible() bool {
	if x != nil {
		return x.MinorTicksVisible
	}
	return false
}

func (x *FigureDescriptor_AxisDescriptor) GetMajorTicksVisible() bool {
	if x != nil {
		return x.MajorTicksVisible
	}
	return false
}

func (x *FigureDescriptor_AxisDescriptor) GetMinorTickCount() int32 {
	if x != nil {
		return x.MinorTickCount
	}
	return 0
}

func (x *FigureDescriptor_AxisDescriptor) GetGapBetweenMajorTicks() float64 {
	if x != nil && x.GapBetweenMajorTicks != nil {
		return *x.GapBetweenMajorTicks
	}
	return 0
}

func (x *FigureDescriptor_AxisDescriptor) GetMajorTickLocations() []float64 {
	if x != nil {
		return x.MajorTickLocations
	}
	return nil
}

func (x *FigureDescriptor_AxisDescriptor) GetTickLabelAngle() float64 {
	if x != nil {
		return x.TickLabelAngle
	}
	return 0
}

func (x *FigureDescriptor_AxisDescriptor) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

func (x *FigureDescriptor_AxisDescriptor) GetIsTimeAxis() bool {
	if x != nil {
		return x.IsTimeAxis
	}
	return false
}

func (x *FigureDescriptor_AxisDescriptor) GetBusinessCalendarDescriptor() *FigureDescriptor_BusinessCalendarDescriptor {
	if x != nil {
		return x.BusinessCalendarDescriptor
	}
	return nil
}

type FigureDescriptor_BusinessCalendarDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TimeZone        string                                                        `protobuf:"bytes,2,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	BusinessDays    []FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek       `protobuf:"varint,3,rep,packed,name=business_days,json=businessDays,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek" json:"business_days,omitempty"`
	BusinessPeriods []*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod `protobuf:"bytes,4,rep,name=business_periods,json=businessPeriods,proto3" json:"business_periods,omitempty"`
	Holidays        []*FigureDescriptor_BusinessCalendarDescriptor_Holiday        `protobuf:"bytes,5,rep,name=holidays,proto3" json:"holidays,omitempty"`
}

func (x *FigureDescriptor_BusinessCalendarDescriptor) Reset() {
	*x = FigureDescriptor_BusinessCalendarDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_BusinessCalendarDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_BusinessCalendarDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_BusinessCalendarDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_BusinessCalendarDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 7}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FigureDescriptor_BusinessCalendarDescriptor) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *FigureDescriptor_BusinessCalendarDescriptor) GetBusinessDays() []FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek {
	if x != nil {
		return x.BusinessDays
	}
	return nil
}

func (x *FigureDescriptor_BusinessCalendarDescriptor) GetBusinessPeriods() []*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod {
	if x != nil {
		return x.BusinessPeriods
	}
	return nil
}

func (x *FigureDescriptor_BusinessCalendarDescriptor) GetHolidays() []*FigureDescriptor_BusinessCalendarDescriptor_Holiday {
	if x != nil {
		return x.Holidays
	}
	return nil
}

type FigureDescriptor_MultiSeriesSourceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisId             string                      `protobuf:"bytes,1,opt,name=axis_id,json=axisId,proto3" json:"axis_id,omitempty"`
	Type               FigureDescriptor_SourceType `protobuf:"varint,2,opt,name=type,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_SourceType" json:"type,omitempty"`
	PartitionedTableId int32                       `protobuf:"varint,3,opt,name=partitioned_table_id,json=partitionedTableId,proto3" json:"partitioned_table_id,omitempty"`
	ColumnName         string                      `protobuf:"bytes,4,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
}

func (x *FigureDescriptor_MultiSeriesSourceDescriptor) Reset() {
	*x = FigureDescriptor_MultiSeriesSourceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_MultiSeriesSourceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_MultiSeriesSourceDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_MultiSeriesSourceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_MultiSeriesSourceDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_MultiSeriesSourceDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 8}
}

func (x *FigureDescriptor_MultiSeriesSourceDescriptor) GetAxisId() string {
	if x != nil {
		return x.AxisId
	}
	return ""
}

func (x *FigureDescriptor_MultiSeriesSourceDescriptor) GetType() FigureDescriptor_SourceType {
	if x != nil {
		return x.Type
	}
	return FigureDescriptor_X
}

func (x *FigureDescriptor_MultiSeriesSourceDescriptor) GetPartitionedTableId() int32 {
	if x != nil {
		return x.PartitionedTableId
	}
	return 0
}

func (x *FigureDescriptor_MultiSeriesSourceDescriptor) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

type FigureDescriptor_SourceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisId             string                               `protobuf:"bytes,1,opt,name=axis_id,json=axisId,proto3" json:"axis_id,omitempty"`
	Type               FigureDescriptor_SourceType          `protobuf:"varint,2,opt,name=type,proto3,enum=io.deephaven.proto.backplane.script.grpc.FigureDescriptor_SourceType" json:"type,omitempty"`
	TableId            int32                                `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	PartitionedTableId int32                                `protobuf:"varint,4,opt,name=partitioned_table_id,json=partitionedTableId,proto3" json:"partitioned_table_id,omitempty"`
	ColumnName         string                               `protobuf:"bytes,5,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnType         string                               `protobuf:"bytes,6,opt,name=column_type,json=columnType,proto3" json:"column_type,omitempty"`
	OneClick           *FigureDescriptor_OneClickDescriptor `protobuf:"bytes,7,opt,name=one_click,json=oneClick,proto3" json:"one_click,omitempty"`
}

func (x *FigureDescriptor_SourceDescriptor) Reset() {
	*x = FigureDescriptor_SourceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_SourceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_SourceDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_SourceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_SourceDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_SourceDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 9}
}

func (x *FigureDescriptor_SourceDescriptor) GetAxisId() string {
	if x != nil {
		return x.AxisId
	}
	return ""
}

func (x *FigureDescriptor_SourceDescriptor) GetType() FigureDescriptor_SourceType {
	if x != nil {
		return x.Type
	}
	return FigureDescriptor_X
}

func (x *FigureDescriptor_SourceDescriptor) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *FigureDescriptor_SourceDescriptor) GetPartitionedTableId() int32 {
	if x != nil {
		return x.PartitionedTableId
	}
	return 0
}

func (x *FigureDescriptor_SourceDescriptor) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *FigureDescriptor_SourceDescriptor) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *FigureDescriptor_SourceDescriptor) GetOneClick() *FigureDescriptor_OneClickDescriptor {
	if x != nil {
		return x.OneClick
	}
	return nil
}

type FigureDescriptor_OneClickDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns                    []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	ColumnTypes                []string `protobuf:"bytes,2,rep,name=column_types,json=columnTypes,proto3" json:"column_types,omitempty"`
	RequireAllFiltersToDisplay bool     `protobuf:"varint,3,opt,name=require_all_filters_to_display,json=requireAllFiltersToDisplay,proto3" json:"require_all_filters_to_display,omitempty"`
}

func (x *FigureDescriptor_OneClickDescriptor) Reset() {
	*x = FigureDescriptor_OneClickDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_OneClickDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_OneClickDescriptor) ProtoMessage() {}

func (x *FigureDescriptor_OneClickDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_OneClickDescriptor.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_OneClickDescriptor) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 10}
}

func (x *FigureDescriptor_OneClickDescriptor) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *FigureDescriptor_OneClickDescriptor) GetColumnTypes() []string {
	if x != nil {
		return x.ColumnTypes
	}
	return nil
}

func (x *FigureDescriptor_OneClickDescriptor) GetRequireAllFiltersToDisplay() bool {
	if x != nil {
		return x.RequireAllFiltersToDisplay
	}
	return false
}

type FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open  string `protobuf:"bytes,1,opt,name=open,proto3" json:"open,omitempty"`
	Close string `protobuf:"bytes,2,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod) Reset() {
	*x = FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod) ProtoMessage() {}

func (x *FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 7, 0}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod) GetOpen() string {
	if x != nil {
		return x.Open
	}
	return ""
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod) GetClose() string {
	if x != nil {
		return x.Close
	}
	return ""
}

type FigureDescriptor_BusinessCalendarDescriptor_Holiday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *FigureDescriptor_BusinessCalendarDescriptor_LocalDate        `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	BusinessPeriods []*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod `protobuf:"bytes,2,rep,name=business_periods,json=businessPeriods,proto3" json:"business_periods,omitempty"`
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_Holiday) Reset() {
	*x = FigureDescriptor_BusinessCalendarDescriptor_Holiday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_Holiday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_BusinessCalendarDescriptor_Holiday) ProtoMessage() {}

func (x *FigureDescriptor_BusinessCalendarDescriptor_Holiday) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_BusinessCalendarDescriptor_Holiday.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_BusinessCalendarDescriptor_Holiday) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 7, 1}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_Holiday) GetDate() *FigureDescriptor_BusinessCalendarDescriptor_LocalDate {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_Holiday) GetBusinessPeriods() []*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod {
	if x != nil {
		return x.BusinessPeriods
	}
	return nil
}

type FigureDescriptor_BusinessCalendarDescriptor_LocalDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_LocalDate) Reset() {
	*x = FigureDescriptor_BusinessCalendarDescriptor_LocalDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deephaven_proto_console_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_LocalDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureDescriptor_BusinessCalendarDescriptor_LocalDate) ProtoMessage() {}

func (x *FigureDescriptor_BusinessCalendarDescriptor_LocalDate) ProtoReflect() protoreflect.Message {
	mi := &file_deephaven_proto_console_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureDescriptor_BusinessCalendarDescriptor_LocalDate.ProtoReflect.Descriptor instead.
func (*FigureDescriptor_BusinessCalendarDescriptor_LocalDate) Descriptor() ([]byte, []int) {
	return file_deephaven_proto_console_proto_rawDescGZIP(), []int{43, 7, 2}
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_LocalDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_LocalDate) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *FigureDescriptor_BusinessCalendarDescriptor_LocalDate) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

var File_deephaven_proto_console_proto protoreflect.FileDescriptor

var file_deephaven_proto_console_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x28, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1c, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x22, 0x6b, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x4c, 0x6f, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x22, 0x6e, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x7b, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x8e,
	0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0xd7, 0x01, 0x0a, 0x1a, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf3, 0x06, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x71, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x67, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65,
	0x6c, 0x70, 0x12, 0x58, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x67, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe8, 0x04, 0x0a, 0x14, 0x41, 0x75,
	0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x64,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x77, 0x0a, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x13,
	0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x5f, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x73, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6e,
	0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x88,
	0x04, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x1a, 0xa6, 0x01, 0x0a, 0x1e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x4d, 0x0a, 0x1f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0xad,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf5,
	0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x4f, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x66, 0x0a, 0x15,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x6d, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x12, 0x4d, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x74,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x14,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x15,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x65, 0x6c, 0x70, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x84, 0x02, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x22, 0xb0, 0x02, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x5d, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x5d, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4d, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x84, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x6c, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x05, 0x0a, 0x0a, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x4d, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x69, 0x6f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x1a, 0x25, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x22, 0x5d, 0x0a, 0x12, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x22, 0x41, 0x0a, 0x0d, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x54, 0x61, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb1, 0x3a, 0x0a, 0x10, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x62, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0xdc, 0x06, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x63, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x73, 0x0a,
	0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x5d, 0x0a, 0x04, 0x61, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x78, 0x69,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x61, 0x78, 0x65,
	0x73, 0x12, 0x73, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x67, 0x65,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x46,
	0x6f, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x33, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x33, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x22, 0x5f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x58, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x04, 0x4f, 0x48, 0x4c, 0x43, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x58, 0x59, 0x5a, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x33, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x45, 0x45,
	0x4d, 0x41, 0x50, 0x10, 0x06, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x1a,
	0xb3, 0x06, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x69, 0x0a, 0x0a, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6c, 0x6f, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x70, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x78, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x74, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x78, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x79, 0x5f, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x05, 0x52, 0x09, 0x73, 0x68, 0x61, 0x70, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x6e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x78, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69,
	0x70, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x79, 0x5f,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x1a, 0xa6, 0x0c, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x69, 0x0a, 0x0a, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x09, 0x70, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x70,
	0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x72, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x74, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x78, 0x0a, 0x10, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x7c, 0x0a, 0x12, 0x78, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69,
	0x70, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x0f, 0x78, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x7c, 0x0a, 0x12, 0x79, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0f,
	0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x70, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61,
	0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x6e, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x70, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x81,
	0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x81, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x1a, 0x79, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x6f, 0x6f,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x1a, 0xb3, 0x0a, 0x0a, 0x0e, 0x41, 0x78, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x79, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x66, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e,
	0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x72, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x6f,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x66, 0x6f, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x46, 0x6f, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x17, 0x67, 0x61, 0x70, 0x5f, 0x62,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x14, 0x67, 0x61, 0x70, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x12, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x74, 0x69, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x78, 0x69, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x1c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x1a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x0e, 0x41, 0x78, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x22,
	0x43, 0x0a, 0x08, 0x41, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x58,
	0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41,
	0x50, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x10, 0x05, 0x22, 0x42, 0x0a, 0x0c, 0x41, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x67, 0x61, 0x70, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x1a, 0xe2, 0x07, 0x0a, 0x1a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x5f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x73, 0x12, 0x8f,
	0x01, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73,
	0x12, 0x79, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x1a, 0x3a, 0x0a, 0x0e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x1a, 0x90, 0x02, 0x0a, 0x07, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x73, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x1a, 0x47, 0x0a, 0x09, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x22, 0x67, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53,
	0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44,
	0x41, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x1a, 0xe4, 0x01, 0x0a,
	0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x78, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x78, 0x69, 0x73, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x81, 0x03, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x78, 0x69, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x78, 0x69, 0x73, 0x49,
	0x64, 0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x45, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x6f,
	0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x6e, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x1a, 0x95, 0x01, 0x0a, 0x12, 0x4f, 0x6e, 0x65, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22,
	0xa6, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x52, 0x45, 0x41, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x48, 0x4c, 0x43, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x45, 0x50, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x52, 0x45, 0x45, 0x4d, 0x41, 0x50, 0x10, 0x0b, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x58, 0x10, 0x00, 0x12, 0x05,
	0x0a, 0x01, 0x59, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x5a, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x58, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10,
	0x0a, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x48, 0x41, 0x50, 0x45, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x0d, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x45, 0x4e,
	0x54, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x12, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08,
	0x0c, 0x10, 0x0d, 0x32, 0xb2, 0x0d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x2e, 0x69, 0x6f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69,
	0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x0e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3f,
	0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x99, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x12,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9b, 0x01, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x98, 0x01,
	0x0a, 0x16, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x43, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x3d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68,
	0x61, 0x76, 0x65, 0x6e, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x68, 0x61, 0x76, 0x65, 0x6e, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deephaven_proto_console_proto_rawDescOnce sync.Once
	file_deephaven_proto_console_proto_rawDescData = file_deephaven_proto_console_proto_rawDesc
)

func file_deephaven_proto_console_proto_rawDescGZIP() []byte {
	file_deephaven_proto_console_proto_rawDescOnce.Do(func() {
		file_deephaven_proto_console_proto_rawDescData = protoimpl.X.CompressGZIP(file_deephaven_proto_console_proto_rawDescData)
	})
	return file_deephaven_proto_console_proto_rawDescData
}

var file_deephaven_proto_console_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_deephaven_proto_console_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_deephaven_proto_console_proto_goTypes = []interface{}{
	(Diagnostic_DiagnosticSeverity)(0),                                 // 0: io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity
	(Diagnostic_DiagnosticTag)(0),                                      // 1: io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag
	(FigureDescriptor_SeriesPlotStyle)(0),                              // 2: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle
	(FigureDescriptor_SourceType)(0),                                   // 3: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType
	(FigureDescriptor_ChartDescriptor_ChartType)(0),                    // 4: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType
	(FigureDescriptor_AxisDescriptor_AxisFormatType)(0),                // 5: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType
	(FigureDescriptor_AxisDescriptor_AxisType)(0),                      // 6: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType
	(FigureDescriptor_AxisDescriptor_AxisPosition)(0),                  // 7: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition
	(FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek)(0),         // 8: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek
	(*GetConsoleTypesRequest)(nil),                                     // 9: io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest
	(*GetConsoleTypesResponse)(nil),                                    // 10: io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse
	(*StartConsoleRequest)(nil),                                        // 11: io.deephaven.proto.backplane.script.grpc.StartConsoleRequest
	(*StartConsoleResponse)(nil),                                       // 12: io.deephaven.proto.backplane.script.grpc.StartConsoleResponse
	(*GetHeapInfoRequest)(nil),                                         // 13: io.deephaven.proto.backplane.script.grpc.GetHeapInfoRequest
	(*GetHeapInfoResponse)(nil),                                        // 14: io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse
	(*LogSubscriptionRequest)(nil),                                     // 15: io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest
	(*LogSubscriptionData)(nil),                                        // 16: io.deephaven.proto.backplane.script.grpc.LogSubscriptionData
	(*ExecuteCommandRequest)(nil),                                      // 17: io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest
	(*ExecuteCommandResponse)(nil),                                     // 18: io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse
	(*BindTableToVariableRequest)(nil),                                 // 19: io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest
	(*BindTableToVariableResponse)(nil),                                // 20: io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse
	(*CancelCommandRequest)(nil),                                       // 21: io.deephaven.proto.backplane.script.grpc.CancelCommandRequest
	(*CancelCommandResponse)(nil),                                      // 22: io.deephaven.proto.backplane.script.grpc.CancelCommandResponse
	(*CancelAutoCompleteRequest)(nil),                                  // 23: io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest
	(*CancelAutoCompleteResponse)(nil),                                 // 24: io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteResponse
	(*AutoCompleteRequest)(nil),                                        // 25: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest
	(*AutoCompleteResponse)(nil),                                       // 26: io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse
	(*BrowserNextResponse)(nil),                                        // 27: io.deephaven.proto.backplane.script.grpc.BrowserNextResponse
	(*OpenDocumentRequest)(nil),                                        // 28: io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest
	(*TextDocumentItem)(nil),                                           // 29: io.deephaven.proto.backplane.script.grpc.TextDocumentItem
	(*CloseDocumentRequest)(nil),                                       // 30: io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest
	(*ChangeDocumentRequest)(nil),                                      // 31: io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest
	(*DocumentRange)(nil),                                              // 32: io.deephaven.proto.backplane.script.grpc.DocumentRange
	(*VersionedTextDocumentIdentifier)(nil),                            // 33: io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier
	(*Position)(nil),                                                   // 34: io.deephaven.proto.backplane.script.grpc.Position
	(*MarkupContent)(nil),                                              // 35: io.deephaven.proto.backplane.script.grpc.MarkupContent
	(*GetCompletionItemsRequest)(nil),                                  // 36: io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest
	(*CompletionContext)(nil),                                          // 37: io.deephaven.proto.backplane.script.grpc.CompletionContext
	(*GetCompletionItemsResponse)(nil),                                 // 38: io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse
	(*CompletionItem)(nil),                                             // 39: io.deephaven.proto.backplane.script.grpc.CompletionItem
	(*TextEdit)(nil),                                                   // 40: io.deephaven.proto.backplane.script.grpc.TextEdit
	(*GetSignatureHelpRequest)(nil),                                    // 41: io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest
	(*SignatureHelpContext)(nil),                                       // 42: io.deephaven.proto.backplane.script.grpc.SignatureHelpContext
	(*GetSignatureHelpResponse)(nil),                                   // 43: io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse
	(*SignatureInformation)(nil),                                       // 44: io.deephaven.proto.backplane.script.grpc.SignatureInformation
	(*ParameterInformation)(nil),                                       // 45: io.deephaven.proto.backplane.script.grpc.ParameterInformation
	(*GetHoverRequest)(nil),                                            // 46: io.deephaven.proto.backplane.script.grpc.GetHoverRequest
	(*GetHoverResponse)(nil),                                           // 47: io.deephaven.proto.backplane.script.grpc.GetHoverResponse
	(*GetDiagnosticRequest)(nil),                                       // 48: io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest
	(*GetPullDiagnosticResponse)(nil),                                  // 49: io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse
	(*GetPublishDiagnosticResponse)(nil),                               // 50: io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse
	(*Diagnostic)(nil),                                                 // 51: io.deephaven.proto.backplane.script.grpc.Diagnostic
	(*FigureDescriptor)(nil),                                           // 52: io.deephaven.proto.backplane.script.grpc.FigureDescriptor
	(*ChangeDocumentRequest_TextDocumentContentChangeEvent)(nil),       // 53: io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent
	(*Diagnostic_CodeDescription)(nil),                                 // 54: io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription
	(*FigureDescriptor_ChartDescriptor)(nil),                           // 55: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor
	(*FigureDescriptor_SeriesDescriptor)(nil),                          // 56: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor
	(*FigureDescriptor_MultiSeriesDescriptor)(nil),                     // 57: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor
	(*FigureDescriptor_StringMapWithDefault)(nil),                      // 58: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	(*FigureDescriptor_DoubleMapWithDefault)(nil),                      // 59: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault
	(*FigureDescriptor_BoolMapWithDefault)(nil),                        // 60: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault
	(*FigureDescriptor_AxisDescriptor)(nil),                            // 61: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor
	(*FigureDescriptor_BusinessCalendarDescriptor)(nil),                // 62: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor
	(*FigureDescriptor_MultiSeriesSourceDescriptor)(nil),               // 63: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor
	(*FigureDescriptor_SourceDescriptor)(nil),                          // 64: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor
	(*FigureDescriptor_OneClickDescriptor)(nil),                        // 65: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor
	(*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod)(nil), // 66: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod
	(*FigureDescriptor_BusinessCalendarDescriptor_Holiday)(nil),        // 67: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday
	(*FigureDescriptor_BusinessCalendarDescriptor_LocalDate)(nil),      // 68: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate
	(*ticket.Ticket)(nil),                                              // 69: io.deephaven.proto.backplane.grpc.Ticket
	(*application.FieldsChangeUpdate)(nil),                             // 70: io.deephaven.proto.backplane.grpc.FieldsChangeUpdate
}
var file_deephaven_proto_console_proto_depIdxs = []int32{
	69,  // 0: io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.result_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	69,  // 1: io.deephaven.proto.backplane.script.grpc.StartConsoleResponse.result_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	69,  // 2: io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	70,  // 3: io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.changes:type_name -> io.deephaven.proto.backplane.grpc.FieldsChangeUpdate
	69,  // 4: io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	69,  // 5: io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.table_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	69,  // 6: io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	69,  // 7: io.deephaven.proto.backplane.script.grpc.CancelCommandRequest.command_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	69,  // 8: io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	69,  // 9: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	28,  // 10: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.open_document:type_name -> io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest
	31,  // 11: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.change_document:type_name -> io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest
	36,  // 12: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_completion_items:type_name -> io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest
	41,  // 13: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_signature_help:type_name -> io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest
	46,  // 14: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_hover:type_name -> io.deephaven.proto.backplane.script.grpc.GetHoverRequest
	48,  // 15: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_diagnostic:type_name -> io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest
	30,  // 16: io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.close_document:type_name -> io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest
	38,  // 17: io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.completion_items:type_name -> io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse
	43,  // 18: io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.signatures:type_name -> io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse
	47,  // 19: io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.hover:type_name -> io.deephaven.proto.backplane.script.grpc.GetHoverResponse
	49,  // 20: io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.diagnostic:type_name -> io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse
	50,  // 21: io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.diagnostic_publish:type_name -> io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse
	69,  // 22: io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	29,  // 23: io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest.text_document:type_name -> io.deephaven.proto.backplane.script.grpc.TextDocumentItem
	69,  // 24: io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	33,  // 25: io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest.text_document:type_name -> io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier
	69,  // 26: io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	33,  // 27: io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.text_document:type_name -> io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier
	53,  // 28: io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.content_changes:type_name -> io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent
	34,  // 29: io.deephaven.proto.backplane.script.grpc.DocumentRange.start:type_name -> io.deephaven.proto.backplane.script.grpc.Position
	34,  // 30: io.deephaven.proto.backplane.script.grpc.DocumentRange.end:type_name -> io.deephaven.proto.backplane.script.grpc.Position
	69,  // 31: io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.console_id:type_name -> io.deephaven.proto.backplane.grpc.Ticket
	37,  // 32: io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.context:type_name -> io.deephaven.proto.backplane.script.grpc.CompletionContext
	33,  // 33: io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.text_document:type_name -> io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier
	34,  // 34: io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest.position:type_name -> io.deephaven.proto.backplane.script.grpc.Position
	39,  // 35: io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse.items:type_name -> io.deephaven.proto.backplane.script.grpc.CompletionItem
	40,  // 36: io.deephaven.proto.backplane.script.grpc.CompletionItem.text_edit:type_name -> io.deephaven.proto.backplane.script.grpc.TextEdit
	40,  // 37: io.deephaven.proto.backplane.script.grpc.CompletionItem.additional_text_edits:type_name -> io.deephaven.proto.backplane.script.grpc.TextEdit
	35,  // 38: io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation:type_name -> io.deephaven.proto.backplane.script.grpc.MarkupContent
	32,  // 39: io.deephaven.proto.backplane.script.grpc.TextEdit.range:type_name -> io.deephaven.proto.backplane.script.grpc.DocumentRange
	42,  // 40: io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest.context:type_name -> io.deephaven.proto.backplane.script.grpc.SignatureHelpContext
	33,  // 41: io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest.text_document:type_name -> io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier
	34,  // 42: io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest.position:type_name -> io.deephaven.proto.backplane.script.grpc.Position
	43,  // 43: io.deephaven.proto.backplane.script.grpc.SignatureHelpContext.active_signature_help:type_name -> io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse
	44,  // 44: io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse.signatures:type_name -> io.deephaven.proto.backplane.script.grpc.SignatureInformation
	35,  // 45: io.deephaven.proto.backplane.script.grpc.SignatureInformation.documentation:type_name -> io.deephaven.proto.backplane.script.grpc.MarkupContent
	45,  // 46: io.deephaven.proto.backplane.script.grpc.SignatureInformation.parameters:type_name -> io.deephaven.proto.backplane.script.grpc.ParameterInformation
	35,  // 47: io.deephaven.proto.backplane.script.grpc.ParameterInformation.documentation:type_name -> io.deephaven.proto.backplane.script.grpc.MarkupContent
	33,  // 48: io.deephaven.proto.backplane.script.grpc.GetHoverRequest.text_document:type_name -> io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier
	34,  // 49: io.deephaven.proto.backplane.script.grpc.GetHoverRequest.position:type_name -> io.deephaven.proto.backplane.script.grpc.Position
	35,  // 50: io.deephaven.proto.backplane.script.grpc.GetHoverResponse.contents:type_name -> io.deephaven.proto.backplane.script.grpc.MarkupContent
	32,  // 51: io.deephaven.proto.backplane.script.grpc.GetHoverResponse.range:type_name -> io.deephaven.proto.backplane.script.grpc.DocumentRange
	33,  // 52: io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest.text_document:type_name -> io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier
	51,  // 53: io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse.items:type_name -> io.deephaven.proto.backplane.script.grpc.Diagnostic
	51,  // 54: io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse.diagnostics:type_name -> io.deephaven.proto.backplane.script.grpc.Diagnostic
	32,  // 55: io.deephaven.proto.backplane.script.grpc.Diagnostic.range:type_name -> io.deephaven.proto.backplane.script.grpc.DocumentRange
	0,   // 56: io.deephaven.proto.backplane.script.grpc.Diagnostic.severity:type_name -> io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity
	54,  // 57: io.deephaven.proto.backplane.script.grpc.Diagnostic.code_description:type_name -> io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription
	1,   // 58: io.deephaven.proto.backplane.script.grpc.Diagnostic.tags:type_name -> io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag
	55,  // 59: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.charts:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor
	32,  // 60: io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.range:type_name -> io.deephaven.proto.backplane.script.grpc.DocumentRange
	56,  // 61: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.series:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor
	57,  // 62: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.multi_series:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor
	61,  // 63: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.axes:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor
	4,   // 64: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.chart_type:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType
	2,   // 65: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.plot_style:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle
	64,  // 66: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.data_sources:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor
	2,   // 67: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.plot_style:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle
	58,  // 68: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.line_color:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	58,  // 69: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.point_color:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	60,  // 70: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.lines_visible:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault
	60,  // 71: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.points_visible:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault
	60,  // 72: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.gradient_visible:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault
	58,  // 73: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.point_label_format:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	58,  // 74: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.x_tool_tip_pattern:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	58,  // 75: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.y_tool_tip_pattern:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	58,  // 76: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.point_label:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	59,  // 77: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.point_size:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault
	58,  // 78: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.point_shape:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault
	63,  // 79: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.data_sources:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor
	5,   // 80: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.format_type:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType
	6,   // 81: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.type:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType
	7,   // 82: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.position:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition
	62,  // 83: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.business_calendar_descriptor:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor
	8,   // 84: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.business_days:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek
	66,  // 85: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.business_periods:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod
	67,  // 86: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.holidays:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday
	3,   // 87: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.type:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType
	3,   // 88: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.type:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType
	65,  // 89: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.one_click:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor
	68,  // 90: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday.date:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate
	66,  // 91: io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday.business_periods:type_name -> io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod
	9,   // 92: io.deephaven.proto.backplane.script.grpc.ConsoleService.GetConsoleTypes:input_type -> io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest
	11,  // 93: io.deephaven.proto.backplane.script.grpc.ConsoleService.StartConsole:input_type -> io.deephaven.proto.backplane.script.grpc.StartConsoleRequest
	13,  // 94: io.deephaven.proto.backplane.script.grpc.ConsoleService.GetHeapInfo:input_type -> io.deephaven.proto.backplane.script.grpc.GetHeapInfoRequest
	15,  // 95: io.deephaven.proto.backplane.script.grpc.ConsoleService.SubscribeToLogs:input_type -> io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest
	17,  // 96: io.deephaven.proto.backplane.script.grpc.ConsoleService.ExecuteCommand:input_type -> io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest
	21,  // 97: io.deephaven.proto.backplane.script.grpc.ConsoleService.CancelCommand:input_type -> io.deephaven.proto.backplane.script.grpc.CancelCommandRequest
	19,  // 98: io.deephaven.proto.backplane.script.grpc.ConsoleService.BindTableToVariable:input_type -> io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest
	25,  // 99: io.deephaven.proto.backplane.script.grpc.ConsoleService.AutoCompleteStream:input_type -> io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest
	23,  // 100: io.deephaven.proto.backplane.script.grpc.ConsoleService.CancelAutoComplete:input_type -> io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest
	25,  // 101: io.deephaven.proto.backplane.script.grpc.ConsoleService.OpenAutoCompleteStream:input_type -> io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest
	25,  // 102: io.deephaven.proto.backplane.script.grpc.ConsoleService.NextAutoCompleteStream:input_type -> io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest
	10,  // 103: io.deephaven.proto.backplane.script.grpc.ConsoleService.GetConsoleTypes:output_type -> io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse
	12,  // 104: io.deephaven.proto.backplane.script.grpc.ConsoleService.StartConsole:output_type -> io.deephaven.proto.backplane.script.grpc.StartConsoleResponse
	14,  // 105: io.deephaven.proto.backplane.script.grpc.ConsoleService.GetHeapInfo:output_type -> io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse
	16,  // 106: io.deephaven.proto.backplane.script.grpc.ConsoleService.SubscribeToLogs:output_type -> io.deephaven.proto.backplane.script.grpc.LogSubscriptionData
	18,  // 107: io.deephaven.proto.backplane.script.grpc.ConsoleService.ExecuteCommand:output_type -> io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse
	22,  // 108: io.deephaven.proto.backplane.script.grpc.ConsoleService.CancelCommand:output_type -> io.deephaven.proto.backplane.script.grpc.CancelCommandResponse
	20,  // 109: io.deephaven.proto.backplane.script.grpc.ConsoleService.BindTableToVariable:output_type -> io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse
	26,  // 110: io.deephaven.proto.backplane.script.grpc.ConsoleService.AutoCompleteStream:output_type -> io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse
	24,  // 111: io.deephaven.proto.backplane.script.grpc.ConsoleService.CancelAutoComplete:output_type -> io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteResponse
	26,  // 112: io.deephaven.proto.backplane.script.grpc.ConsoleService.OpenAutoCompleteStream:output_type -> io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse
	27,  // 113: io.deephaven.proto.backplane.script.grpc.ConsoleService.NextAutoCompleteStream:output_type -> io.deephaven.proto.backplane.script.grpc.BrowserNextResponse
	103, // [103:114] is the sub-list for method output_type
	92,  // [92:103] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_deephaven_proto_console_proto_init() }
func file_deephaven_proto_console_proto_init() {
	if File_deephaven_proto_console_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deephaven_proto_console_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsoleTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsoleTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartConsoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartConsoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeapInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeapInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSubscriptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindTableToVariableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindTableToVariableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAutoCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAutoCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserNextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedTextDocumentIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkupContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletionItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletionItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignatureHelpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignatureHelpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPullDiagnosticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishDiagnosticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDocumentRequest_TextDocumentContentChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostic_CodeDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_ChartDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_SeriesDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_MultiSeriesDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_StringMapWithDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_DoubleMapWithDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_BoolMapWithDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_AxisDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_BusinessCalendarDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_MultiSeriesSourceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_SourceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_OneClickDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_BusinessCalendarDescriptor_Holiday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deephaven_proto_console_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FigureDescriptor_BusinessCalendarDescriptor_LocalDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_deephaven_proto_console_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*AutoCompleteRequest_OpenDocument)(nil),
		(*AutoCompleteRequest_ChangeDocument)(nil),
		(*AutoCompleteRequest_GetCompletionItems)(nil),
		(*AutoCompleteRequest_GetSignatureHelp)(nil),
		(*AutoCompleteRequest_GetHover)(nil),
		(*AutoCompleteRequest_GetDiagnostic)(nil),
		(*AutoCompleteRequest_CloseDocument)(nil),
	}
	file_deephaven_proto_console_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*AutoCompleteResponse_CompletionItems)(nil),
		(*AutoCompleteResponse_Signatures)(nil),
		(*AutoCompleteResponse_Hover)(nil),
		(*AutoCompleteResponse_Diagnostic)(nil),
		(*AutoCompleteResponse_DiagnosticPublish)(nil),
	}
	file_deephaven_proto_console_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_deephaven_proto_console_proto_msgTypes[52].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deephaven_proto_console_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deephaven_proto_console_proto_goTypes,
		DependencyIndexes: file_deephaven_proto_console_proto_depIdxs,
		EnumInfos:         file_deephaven_proto_console_proto_enumTypes,
		MessageInfos:      file_deephaven_proto_console_proto_msgTypes,
	}.Build()
	File_deephaven_proto_console_proto = out.File
	file_deephaven_proto_console_proto_rawDesc = nil
	file_deephaven_proto_console_proto_goTypes = nil
	file_deephaven_proto_console_proto_depIdxs = nil
}
