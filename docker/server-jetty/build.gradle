import io.deephaven.tools.docker.Architecture
import io.deephaven.tools.License

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
}

def targetArch = Architecture.targetArchitecture(project)

def baseMapAmd64 = [
        'server-base': 'server-jetty',
        'all-ai-base': 'server-all-ai-jetty',
]

// Only the server image is supported on arm64
// TODO(deephaven-core#1702): Support arm64 builds for applicable extended images
def baseMapArm64 = baseMapAmd64.findAll { key, value -> value == 'server-jetty' }

def baseMap = targetArch == Architecture.AMD64 ? baseMapAmd64 : baseMapArm64

baseMap.keySet().each {base ->
    evaluationDependsOn Docker.registryProject(base)
}

configurations {
    serverApplicationDist
    pythonWheel
}

dependencies {
    serverApplicationDist project(path: ':server-jetty-app', configuration: 'applicationDist')

    pythonWheel project(':py-server')
}

def dockerLicenses = License.createFrom(project).syncDockerLicense().get()

def context= project.layout.buildDirectory.dir('context')

def prepareDocker = project.tasks.register('prepareDocker', Sync) {

    from 'src/main/docker'
    baseMap.values().each { server ->
        from("src/main/${server}") {
            into server
        }
    }
    from ('src/main/configure') {
        into 'configure'
    }

    from(configurations.pythonWheel) {
        into 'wheels'
    }

    from(configurations.serverApplicationDist) {
        into 'serverApplicationDist'
    }
    from(dockerLicenses.outputs) {
        into 'licenses'
    }
    into context
}

def buildDockerClosure = { String base, String server ->
    Docker.registerDockerTwoPhaseImage(project, server, 'install') {
        dependsOn prepareDocker
        inputDir.set context
        inputs.files Docker.registryFiles(project, base)
        buildArgs.put('BASE', "deephaven/${base}:local-build")
        buildArgs.put('SERVER', server)
        buildArgs.put('DEEPHAVEN_VERSION', project.version)
    }
}

assemble.dependsOn baseMap.collect { base, server -> buildDockerClosure(base, server) }
