import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

plugins {
    id 'com.bmuschko.docker-remote-api'
}

evaluationDependsOn ':grpc-api-server-docker'

def dockerfileDir = project.layout.buildDirectory.dir('prepareDocker')
def imageIdFile = project.layout.buildDirectory.file('.docker/imageId.txt').get().asFile
def imageId = imageIdFile.exists() ? imageIdFile.text : null
def image = project.property('image') as String

def prepareDocker = project.tasks.register('prepareDocker', Sync) {
    it.from 'src/main/docker'
    it.into dockerfileDir
}

def buildImage = project.tasks.register('buildImage', DockerBuildImage) {
    def grpcApiImage = project(':grpc-api-server-docker').tasks.findByName('dockerBuildImage')
    it.dependsOn prepareDocker, grpcApiImage
    it.inputs.files grpcApiImage.outputs.files
    it.inputDir.set dockerfileDir
    it.imageIdFile.set imageIdFile
    it.images.add(image)
}

def deleteImage = project.tasks.register('deleteImage', DockerRemoveImage) {
    it.onlyIf { imageId != null }
    it.imageId.set imageId
    it.force.set true
    it.onError { exception ->
        if (!exception.message.contains('No such image'))
            throw exception
    }
    it.doLast {
        imageIdFile.delete()
    }
}

// Create a simple file for docker/build-push-action to reference, tag, and publish
tasks.register('publishDockerfile', Dockerfile) {
    def input = buildImage.get().imageIdFile
    def output = layout.buildDirectory.file('publish/Dockerfile')

    it.dependsOn buildImage
    it.inputs.file input
    it.outputs.file output

    it.destFile.set output
    it.from new Dockerfile.From(image)
}

// TODO(deephaven-core#xyz)
// Note: the below would be *better*, but docker/build-push-action currently errors out when trying to reference the sha
/*
tasks.register('publishDockerfile') {
    def input = buildImage.get().imageIdFile
    def output = layout.buildDirectory.file('publish/Dockerfile')
    it.inputs.file input
    it.outputs.file output
    it.doLast {
        output.get().asFile.write("FROM ${input.get().asFile.text}")
    }
}
*/

assemble.dependsOn buildImage