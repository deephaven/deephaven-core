/*
 * Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/table.proto

#include "deephaven/proto/table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
constexpr TableReference::TableReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TableReferenceDefaultTypeInternal {
  constexpr TableReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableReferenceDefaultTypeInternal() {}
  union {
    TableReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableReferenceDefaultTypeInternal _TableReference_default_instance_;
constexpr ExportedTableCreationResponse::ExportedTableCreationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(nullptr)
  , size_(int64_t{0})
  , success_(false)
  , is_static_(false){}
struct ExportedTableCreationResponseDefaultTypeInternal {
  constexpr ExportedTableCreationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedTableCreationResponseDefaultTypeInternal() {}
  union {
    ExportedTableCreationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedTableCreationResponseDefaultTypeInternal _ExportedTableCreationResponse_default_instance_;
constexpr FetchTableRequest::FetchTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_id_(nullptr)
  , result_id_(nullptr){}
struct FetchTableRequestDefaultTypeInternal {
  constexpr FetchTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchTableRequestDefaultTypeInternal() {}
  union {
    FetchTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchTableRequestDefaultTypeInternal _FetchTableRequest_default_instance_;
constexpr ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_id_(nullptr)
  , result_id_(nullptr){}
struct ApplyPreviewColumnsRequestDefaultTypeInternal {
  constexpr ApplyPreviewColumnsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyPreviewColumnsRequestDefaultTypeInternal() {}
  union {
    ApplyPreviewColumnsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyPreviewColumnsRequestDefaultTypeInternal _ApplyPreviewColumnsRequest_default_instance_;
constexpr FetchPandasTableRequest::FetchPandasTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_id_(nullptr)
  , result_id_(nullptr){}
struct FetchPandasTableRequestDefaultTypeInternal {
  constexpr FetchPandasTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchPandasTableRequestDefaultTypeInternal() {}
  union {
    FetchPandasTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchPandasTableRequestDefaultTypeInternal _FetchPandasTableRequest_default_instance_;
constexpr FetchTableMapRequest::FetchTableMapRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_id_(nullptr)
  , result_id_(nullptr){}
struct FetchTableMapRequestDefaultTypeInternal {
  constexpr FetchTableMapRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchTableMapRequestDefaultTypeInternal() {}
  union {
    FetchTableMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchTableMapRequestDefaultTypeInternal _FetchTableMapRequest_default_instance_;
constexpr FetchTableMapResponse::FetchTableMapResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FetchTableMapResponseDefaultTypeInternal {
  constexpr FetchTableMapResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchTableMapResponseDefaultTypeInternal() {}
  union {
    FetchTableMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchTableMapResponseDefaultTypeInternal _FetchTableMapResponse_default_instance_;
constexpr ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExportedTableUpdatesRequestDefaultTypeInternal {
  constexpr ExportedTableUpdatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedTableUpdatesRequestDefaultTypeInternal() {}
  union {
    ExportedTableUpdatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedTableUpdatesRequestDefaultTypeInternal _ExportedTableUpdatesRequest_default_instance_;
constexpr ExportedTableUpdateMessage::ExportedTableUpdateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_failure_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , export_id_(nullptr)
  , size_(int64_t{0}){}
struct ExportedTableUpdateMessageDefaultTypeInternal {
  constexpr ExportedTableUpdateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportedTableUpdateMessageDefaultTypeInternal() {}
  union {
    ExportedTableUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportedTableUpdateMessageDefaultTypeInternal _ExportedTableUpdateMessage_default_instance_;
constexpr EmptyTableRequest::EmptyTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , size_(int64_t{0}){}
struct EmptyTableRequestDefaultTypeInternal {
  constexpr EmptyTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyTableRequestDefaultTypeInternal() {}
  union {
    EmptyTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyTableRequestDefaultTypeInternal _EmptyTableRequest_default_instance_;
constexpr TimeTableRequest::TimeTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , start_time_nanos_(int64_t{0})
  , period_nanos_(int64_t{0}){}
struct TimeTableRequestDefaultTypeInternal {
  constexpr TimeTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeTableRequestDefaultTypeInternal() {}
  union {
    TimeTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeTableRequestDefaultTypeInternal _TimeTableRequest_default_instance_;
constexpr SelectOrUpdateRequest::SelectOrUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_specs_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct SelectOrUpdateRequestDefaultTypeInternal {
  constexpr SelectOrUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectOrUpdateRequestDefaultTypeInternal() {}
  union {
    SelectOrUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectOrUpdateRequestDefaultTypeInternal _SelectOrUpdateRequest_default_instance_;
constexpr SelectDistinctRequest::SelectDistinctRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_names_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct SelectDistinctRequestDefaultTypeInternal {
  constexpr SelectDistinctRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectDistinctRequestDefaultTypeInternal() {}
  union {
    SelectDistinctRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectDistinctRequestDefaultTypeInternal _SelectDistinctRequest_default_instance_;
constexpr DropColumnsRequest::DropColumnsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_names_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct DropColumnsRequestDefaultTypeInternal {
  constexpr DropColumnsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropColumnsRequestDefaultTypeInternal() {}
  union {
    DropColumnsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropColumnsRequestDefaultTypeInternal _DropColumnsRequest_default_instance_;
constexpr UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct UnstructuredFilterTableRequestDefaultTypeInternal {
  constexpr UnstructuredFilterTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnstructuredFilterTableRequestDefaultTypeInternal() {}
  union {
    UnstructuredFilterTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnstructuredFilterTableRequestDefaultTypeInternal _UnstructuredFilterTableRequest_default_instance_;
constexpr HeadOrTailRequest::HeadOrTailRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , source_id_(nullptr)
  , num_rows_(int64_t{0}){}
struct HeadOrTailRequestDefaultTypeInternal {
  constexpr HeadOrTailRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadOrTailRequestDefaultTypeInternal() {}
  union {
    HeadOrTailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadOrTailRequestDefaultTypeInternal _HeadOrTailRequest_default_instance_;
constexpr HeadOrTailByRequest::HeadOrTailByRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_column_specs_()
  , result_id_(nullptr)
  , source_id_(nullptr)
  , num_rows_(int64_t{0}){}
struct HeadOrTailByRequestDefaultTypeInternal {
  constexpr HeadOrTailByRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadOrTailByRequestDefaultTypeInternal() {}
  union {
    HeadOrTailByRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadOrTailByRequestDefaultTypeInternal _HeadOrTailByRequest_default_instance_;
constexpr UngroupRequest::UngroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_ungroup_()
  , result_id_(nullptr)
  , source_id_(nullptr)
  , null_fill_(false){}
struct UngroupRequestDefaultTypeInternal {
  constexpr UngroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UngroupRequestDefaultTypeInternal() {}
  union {
    UngroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UngroupRequestDefaultTypeInternal _UngroupRequest_default_instance_;
constexpr MergeTablesRequest::MergeTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_ids_()
  , key_column_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(nullptr){}
struct MergeTablesRequestDefaultTypeInternal {
  constexpr MergeTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeTablesRequestDefaultTypeInternal() {}
  union {
    MergeTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeTablesRequestDefaultTypeInternal _MergeTablesRequest_default_instance_;
constexpr SnapshotTableRequest::SnapshotTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stamp_columns_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr)
  , do_initial_snapshot_(false){}
struct SnapshotTableRequestDefaultTypeInternal {
  constexpr SnapshotTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnapshotTableRequestDefaultTypeInternal() {}
  union {
    SnapshotTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnapshotTableRequestDefaultTypeInternal _SnapshotTableRequest_default_instance_;
constexpr CrossJoinTablesRequest::CrossJoinTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_match_()
  , columns_to_add_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr)
  , reserve_bits_(0){}
struct CrossJoinTablesRequestDefaultTypeInternal {
  constexpr CrossJoinTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CrossJoinTablesRequestDefaultTypeInternal() {}
  union {
    CrossJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CrossJoinTablesRequestDefaultTypeInternal _CrossJoinTablesRequest_default_instance_;
constexpr NaturalJoinTablesRequest::NaturalJoinTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_match_()
  , columns_to_add_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr){}
struct NaturalJoinTablesRequestDefaultTypeInternal {
  constexpr NaturalJoinTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NaturalJoinTablesRequestDefaultTypeInternal() {}
  union {
    NaturalJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NaturalJoinTablesRequestDefaultTypeInternal _NaturalJoinTablesRequest_default_instance_;
constexpr ExactJoinTablesRequest::ExactJoinTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_match_()
  , columns_to_add_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr){}
struct ExactJoinTablesRequestDefaultTypeInternal {
  constexpr ExactJoinTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExactJoinTablesRequestDefaultTypeInternal() {}
  union {
    ExactJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExactJoinTablesRequestDefaultTypeInternal _ExactJoinTablesRequest_default_instance_;
constexpr LeftJoinTablesRequest::LeftJoinTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_match_()
  , columns_to_add_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr){}
struct LeftJoinTablesRequestDefaultTypeInternal {
  constexpr LeftJoinTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeftJoinTablesRequestDefaultTypeInternal() {}
  union {
    LeftJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeftJoinTablesRequestDefaultTypeInternal _LeftJoinTablesRequest_default_instance_;
constexpr AsOfJoinTablesRequest::AsOfJoinTablesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_to_match_()
  , columns_to_add_()
  , result_id_(nullptr)
  , left_id_(nullptr)
  , right_id_(nullptr)
  , as_of_match_rule_(0)
{}
struct AsOfJoinTablesRequestDefaultTypeInternal {
  constexpr AsOfJoinTablesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AsOfJoinTablesRequestDefaultTypeInternal() {}
  union {
    AsOfJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AsOfJoinTablesRequestDefaultTypeInternal _AsOfJoinTablesRequest_default_instance_;
constexpr ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_pairs_()
  , column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , avg_median_(false)
  , percentile_(0){}
struct ComboAggregateRequest_AggregateDefaultTypeInternal {
  constexpr ComboAggregateRequest_AggregateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComboAggregateRequest_AggregateDefaultTypeInternal() {}
  union {
    ComboAggregateRequest_Aggregate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComboAggregateRequest_AggregateDefaultTypeInternal _ComboAggregateRequest_Aggregate_default_instance_;
constexpr ComboAggregateRequest::ComboAggregateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aggregates_()
  , group_by_columns_()
  , result_id_(nullptr)
  , source_id_(nullptr)
  , force_combo_(false){}
struct ComboAggregateRequestDefaultTypeInternal {
  constexpr ComboAggregateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComboAggregateRequestDefaultTypeInternal() {}
  union {
    ComboAggregateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComboAggregateRequestDefaultTypeInternal _ComboAggregateRequest_default_instance_;
constexpr SortDescriptor::SortDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_absolute_(false)
  , direction_(0)
{}
struct SortDescriptorDefaultTypeInternal {
  constexpr SortDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortDescriptorDefaultTypeInternal() {}
  union {
    SortDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortDescriptorDefaultTypeInternal _SortDescriptor_default_instance_;
constexpr SortTableRequest::SortTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sorts_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct SortTableRequestDefaultTypeInternal {
  constexpr SortTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortTableRequestDefaultTypeInternal() {}
  union {
    SortTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortTableRequestDefaultTypeInternal _SortTableRequest_default_instance_;
constexpr FilterTableRequest::FilterTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_()
  , result_id_(nullptr)
  , source_id_(nullptr){}
struct FilterTableRequestDefaultTypeInternal {
  constexpr FilterTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterTableRequestDefaultTypeInternal() {}
  union {
    FilterTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterTableRequestDefaultTypeInternal _FilterTableRequest_default_instance_;
constexpr Reference::Reference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReferenceDefaultTypeInternal {
  constexpr ReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {
    Reference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceDefaultTypeInternal _Reference_default_instance_;
constexpr Literal::Literal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LiteralDefaultTypeInternal {
  constexpr LiteralDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiteralDefaultTypeInternal() {}
  union {
    Literal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiteralDefaultTypeInternal _Literal_default_instance_;
constexpr Value::Value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ValueDefaultTypeInternal {
  constexpr ValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueDefaultTypeInternal _Value_default_instance_;
constexpr Condition::Condition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ConditionDefaultTypeInternal {
  constexpr ConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConditionDefaultTypeInternal() {}
  union {
    Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConditionDefaultTypeInternal _Condition_default_instance_;
constexpr AndCondition::AndCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_(){}
struct AndConditionDefaultTypeInternal {
  constexpr AndConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AndConditionDefaultTypeInternal() {}
  union {
    AndCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AndConditionDefaultTypeInternal _AndCondition_default_instance_;
constexpr OrCondition::OrCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_(){}
struct OrConditionDefaultTypeInternal {
  constexpr OrConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrConditionDefaultTypeInternal() {}
  union {
    OrCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrConditionDefaultTypeInternal _OrCondition_default_instance_;
constexpr NotCondition::NotCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr){}
struct NotConditionDefaultTypeInternal {
  constexpr NotConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotConditionDefaultTypeInternal() {}
  union {
    NotCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotConditionDefaultTypeInternal _NotCondition_default_instance_;
constexpr CompareCondition::CompareCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lhs_(nullptr)
  , rhs_(nullptr)
  , operation_(0)

  , case_sensitivity_(0)
{}
struct CompareConditionDefaultTypeInternal {
  constexpr CompareConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompareConditionDefaultTypeInternal() {}
  union {
    CompareCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompareConditionDefaultTypeInternal _CompareCondition_default_instance_;
constexpr InCondition::InCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidates_()
  , target_(nullptr)
  , case_sensitivity_(0)

  , match_type_(0)
{}
struct InConditionDefaultTypeInternal {
  constexpr InConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InConditionDefaultTypeInternal() {}
  union {
    InCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InConditionDefaultTypeInternal _InCondition_default_instance_;
constexpr InvokeCondition::InvokeCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arguments_()
  , method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(nullptr){}
struct InvokeConditionDefaultTypeInternal {
  constexpr InvokeConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvokeConditionDefaultTypeInternal() {}
  union {
    InvokeCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvokeConditionDefaultTypeInternal _InvokeCondition_default_instance_;
constexpr IsNullCondition::IsNullCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_(nullptr){}
struct IsNullConditionDefaultTypeInternal {
  constexpr IsNullConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IsNullConditionDefaultTypeInternal() {}
  union {
    IsNullCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IsNullConditionDefaultTypeInternal _IsNullCondition_default_instance_;
constexpr MatchesCondition::MatchesCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : regex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_(nullptr)
  , case_sensitivity_(0)

  , match_type_(0)
{}
struct MatchesConditionDefaultTypeInternal {
  constexpr MatchesConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchesConditionDefaultTypeInternal() {}
  union {
    MatchesCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchesConditionDefaultTypeInternal _MatchesCondition_default_instance_;
constexpr ContainsCondition::ContainsCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_(nullptr)
  , case_sensitivity_(0)

  , match_type_(0)
{}
struct ContainsConditionDefaultTypeInternal {
  constexpr ContainsConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainsConditionDefaultTypeInternal() {}
  union {
    ContainsCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainsConditionDefaultTypeInternal _ContainsCondition_default_instance_;
constexpr SearchCondition::SearchCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : optional_references_()
  , search_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SearchConditionDefaultTypeInternal {
  constexpr SearchConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SearchConditionDefaultTypeInternal() {}
  union {
    SearchCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SearchConditionDefaultTypeInternal _SearchCondition_default_instance_;
constexpr FlattenRequest::FlattenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , source_id_(nullptr){}
struct FlattenRequestDefaultTypeInternal {
  constexpr FlattenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlattenRequestDefaultTypeInternal() {}
  union {
    FlattenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlattenRequestDefaultTypeInternal _FlattenRequest_default_instance_;
constexpr RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_date_nanos_(int64_t{0})
  , max_date_nanos_(int64_t{0}){}
struct RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal {
  constexpr RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal() {}
  union {
    RunChartDownsampleRequest_ZoomRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal _RunChartDownsampleRequest_ZoomRange_default_instance_;
constexpr RunChartDownsampleRequest::RunChartDownsampleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : y_column_names_()
  , x_column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(nullptr)
  , source_id_(nullptr)
  , zoom_range_(nullptr)
  , pixel_count_(0){}
struct RunChartDownsampleRequestDefaultTypeInternal {
  constexpr RunChartDownsampleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RunChartDownsampleRequestDefaultTypeInternal() {}
  union {
    RunChartDownsampleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RunChartDownsampleRequestDefaultTypeInternal _RunChartDownsampleRequest_default_instance_;
constexpr CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal {
  constexpr CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_InMemoryAppendOnly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal _CreateInputTableRequest_InputTableKind_InMemoryAppendOnly_default_instance_;
constexpr CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_columns_(){}
struct CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal {
  constexpr CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_InMemoryKeyBacked _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal _CreateInputTableRequest_InputTableKind_InMemoryKeyBacked_default_instance_;
constexpr CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CreateInputTableRequest_InputTableKindDefaultTypeInternal {
  constexpr CreateInputTableRequest_InputTableKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKindDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateInputTableRequest_InputTableKindDefaultTypeInternal _CreateInputTableRequest_InputTableKind_default_instance_;
constexpr CreateInputTableRequest::CreateInputTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr)
  , kind_(nullptr)
  , _oneof_case_{}{}
struct CreateInputTableRequestDefaultTypeInternal {
  constexpr CreateInputTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateInputTableRequestDefaultTypeInternal() {}
  union {
    CreateInputTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateInputTableRequestDefaultTypeInternal _CreateInputTableRequest_default_instance_;
constexpr BatchTableRequest_Operation::BatchTableRequest_Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BatchTableRequest_OperationDefaultTypeInternal {
  constexpr BatchTableRequest_OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchTableRequest_OperationDefaultTypeInternal() {}
  union {
    BatchTableRequest_Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchTableRequest_OperationDefaultTypeInternal _BatchTableRequest_Operation_default_instance_;
constexpr BatchTableRequest::BatchTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ops_(){}
struct BatchTableRequestDefaultTypeInternal {
  constexpr BatchTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchTableRequestDefaultTypeInternal() {}
  union {
    BatchTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchTableRequestDefaultTypeInternal _BatchTableRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_deephaven_2fproto_2ftable_2eproto[53];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_deephaven_2fproto_2ftable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_deephaven_2fproto_2ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, success_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, error_info_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, schema_header_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, is_static_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest, result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableMapRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableMapRequest, result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, export_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, update_failure_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, start_time_nanos_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, period_nanos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, column_specs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, num_rows_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, group_by_column_specs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, null_fill_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, columns_to_ungroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, source_ids_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, key_column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, do_initial_snapshot_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, stamp_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, columns_to_add_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, reserve_bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, columns_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, columns_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, columns_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, columns_to_add_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, as_of_match_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, match_pairs_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, percentile_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, avg_median_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, aggregates_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, group_by_columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, force_combo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, is_absolute_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, sorts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Reference, column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AndCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AndCondition, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OrCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OrCondition, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NotCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NotCondition, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, operation_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, lhs_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, rhs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, target_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, candidates_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, method_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, target_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, arguments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::IsNullCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::IsNullCondition, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, reference_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, regex_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, reference_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, search_string_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, search_string_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, optional_references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, min_date_nanos_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, max_date_nanos_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, pixel_count_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, zoom_range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, x_column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, y_column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, key_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, result_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, ops_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TableReference)},
  { 9, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse)},
  { 21, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchTableRequest)},
  { 29, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest)},
  { 37, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest)},
  { 45, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchTableMapRequest)},
  { 53, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchTableMapResponse)},
  { 59, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest)},
  { 65, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage)},
  { 74, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::EmptyTableRequest)},
  { 82, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TimeTableRequest)},
  { 91, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest)},
  { 100, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest)},
  { 109, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::DropColumnsRequest)},
  { 118, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest)},
  { 127, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest)},
  { 136, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest)},
  { 146, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UngroupRequest)},
  { 156, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::MergeTablesRequest)},
  { 165, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest)},
  { 176, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest)},
  { 188, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest)},
  { 199, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest)},
  { 210, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest)},
  { 221, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest)},
  { 233, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate)},
  { 244, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest)},
  { 255, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortDescriptor)},
  { 264, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortTableRequest)},
  { 273, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FilterTableRequest)},
  { 282, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Reference)},
  { 289, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Literal)},
  { 301, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Value)},
  { 310, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Condition)},
  { 327, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AndCondition)},
  { 334, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::OrCondition)},
  { 341, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::NotCondition)},
  { 348, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CompareCondition)},
  { 358, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::InCondition)},
  { 368, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::InvokeCondition)},
  { 377, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::IsNullCondition)},
  { 384, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::MatchesCondition)},
  { 394, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ContainsCondition)},
  { 404, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SearchCondition)},
  { 412, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FlattenRequest)},
  { 420, 428, -1, sizeof(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange)},
  { 430, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest)},
  { 442, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly)},
  { 448, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked)},
  { 455, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind)},
  { 464, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest)},
  { 475, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation)},
  { 513, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExportedTableCreationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FetchTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ApplyPreviewColumnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FetchPandasTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FetchTableMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FetchTableMapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExportedTableUpdatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExportedTableUpdateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_EmptyTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_TimeTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SelectDistinctRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_DropColumnsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_UnstructuredFilterTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_HeadOrTailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_HeadOrTailByRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_UngroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_MergeTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SnapshotTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_CrossJoinTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_NaturalJoinTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ExactJoinTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_LeftJoinTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_AsOfJoinTablesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_Aggregate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SortDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SortTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FilterTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_Reference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_Literal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_AndCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_OrCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_NotCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_CompareCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_InCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_InvokeCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_IsNullCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_MatchesCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_ContainsCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_SearchCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_FlattenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_RunChartDownsampleRequest_ZoomRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_RunChartDownsampleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_InMemoryAppendOnly_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_InMemoryKeyBacked_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_BatchTableRequest_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::grpc::_BatchTableRequest_default_instance_),
};

const char descriptor_table_protodef_deephaven_2fproto_2ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033deephaven/proto/table.proto\022!io.deepha"
  "ven.proto.backplane.grpc\032\034deephaven/prot"
  "o/ticket.proto\"l\n\016TableReference\022;\n\006tick"
  "et\030\001 \001(\0132).io.deephaven.proto.backplane."
  "grpc.TicketH\000\022\026\n\014batch_offset\030\002 \001(\021H\000B\005\n"
  "\003ref\"\306\001\n\035ExportedTableCreationResponse\022D"
  "\n\tresult_id\030\001 \001(\01321.io.deephaven.proto.b"
  "ackplane.grpc.TableReference\022\017\n\007success\030"
  "\002 \001(\010\022\022\n\nerror_info\030\003 \001(\t\022\025\n\rschema_head"
  "er\030\004 \001(\014\022\021\n\tis_static\030\005 \001(\010\022\020\n\004size\030\006 \001("
  "\022B\0020\001\"\227\001\n\021FetchTableRequest\022D\n\tsource_id"
  "\030\001 \001(\01321.io.deephaven.proto.backplane.gr"
  "pc.TableReference\022<\n\tresult_id\030\002 \001(\0132).i"
  "o.deephaven.proto.backplane.grpc.Ticket\""
  "\240\001\n\032ApplyPreviewColumnsRequest\022D\n\tsource"
  "_id\030\001 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022<\n\tresult_id\030\002 \001(\0132"
  ").io.deephaven.proto.backplane.grpc.Tick"
  "et\"\235\001\n\027FetchPandasTableRequest\022D\n\tsource"
  "_id\030\001 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022<\n\tresult_id\030\002 \001(\0132"
  ").io.deephaven.proto.backplane.grpc.Tick"
  "et\"\232\001\n\024FetchTableMapRequest\022D\n\tsource_id"
  "\030\001 \001(\01321.io.deephaven.proto.backplane.gr"
  "pc.TableReference\022<\n\tresult_id\030\002 \001(\0132).i"
  "o.deephaven.proto.backplane.grpc.Ticket\""
  "\027\n\025FetchTableMapResponse\"\035\n\033ExportedTabl"
  "eUpdatesRequest\"\214\001\n\032ExportedTableUpdateM"
  "essage\022<\n\texport_id\030\001 \001(\0132).io.deephaven"
  ".proto.backplane.grpc.Ticket\022\020\n\004size\030\002 \001"
  "(\022B\0020\001\022\036\n\026update_failure_message\030\003 \001(\t\"c"
  "\n\021EmptyTableRequest\022<\n\tresult_id\030\001 \001(\0132)"
  ".io.deephaven.proto.backplane.grpc.Ticke"
  "t\022\020\n\004size\030\002 \001(\022B\0020\001\"\210\001\n\020TimeTableRequest"
  "\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.proto"
  ".backplane.grpc.Ticket\022\034\n\020start_time_nan"
  "os\030\002 \001(\022B\0020\001\022\030\n\014period_nanos\030\003 \001(\022B\0020\001\"\261"
  "\001\n\025SelectOrUpdateRequest\022<\n\tresult_id\030\001 "
  "\001(\0132).io.deephaven.proto.backplane.grpc."
  "Ticket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven"
  ".proto.backplane.grpc.TableReference\022\024\n\014"
  "column_specs\030\003 \003(\t\"\261\001\n\025SelectDistinctReq"
  "uest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.p"
  "roto.backplane.grpc.Ticket\022D\n\tsource_id\030"
  "\002 \001(\01321.io.deephaven.proto.backplane.grp"
  "c.TableReference\022\024\n\014column_names\030\003 \003(\t\"\256"
  "\001\n\022DropColumnsRequest\022<\n\tresult_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.pr"
  "oto.backplane.grpc.TableReference\022\024\n\014col"
  "umn_names\030\003 \003(\t\"\265\001\n\036UnstructuredFilterTa"
  "bleRequest\022<\n\tresult_id\030\001 \001(\0132).io.deeph"
  "aven.proto.backplane.grpc.Ticket\022D\n\tsour"
  "ce_id\030\002 \001(\01321.io.deephaven.proto.backpla"
  "ne.grpc.TableReference\022\017\n\007filters\030\003 \003(\t\""
  "\255\001\n\021HeadOrTailRequest\022<\n\tresult_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.pr"
  "oto.backplane.grpc.TableReference\022\024\n\010num"
  "_rows\030\003 \001(\022B\0020\001\"\316\001\n\023HeadOrTailByRequest\022"
  "<\n\tresult_id\030\001 \001(\0132).io.deephaven.proto."
  "backplane.grpc.Ticket\022D\n\tsource_id\030\002 \001(\013"
  "21.io.deephaven.proto.backplane.grpc.Tab"
  "leReference\022\024\n\010num_rows\030\003 \001(\022B\0020\001\022\035\n\025gro"
  "up_by_column_specs\030\004 \003(\t\"\303\001\n\016UngroupRequ"
  "est\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.pr"
  "oto.backplane.grpc.Ticket\022D\n\tsource_id\030\002"
  " \001(\01321.io.deephaven.proto.backplane.grpc"
  ".TableReference\022\021\n\tnull_fill\030\003 \001(\010\022\032\n\022co"
  "lumns_to_ungroup\030\004 \003(\t\"\255\001\n\022MergeTablesRe"
  "quest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven."
  "proto.backplane.grpc.Ticket\022E\n\nsource_id"
  "s\030\002 \003(\01321.io.deephaven.proto.backplane.g"
  "rpc.TableReference\022\022\n\nkey_column\030\003 \001(\t\"\221"
  "\002\n\024SnapshotTableRequest\022<\n\tresult_id\030\001 \001"
  "(\0132).io.deephaven.proto.backplane.grpc.T"
  "icket\022B\n\007left_id\030\002 \001(\01321.io.deephaven.pr"
  "oto.backplane.grpc.TableReference\022C\n\010rig"
  "ht_id\030\003 \001(\01321.io.deephaven.proto.backpla"
  "ne.grpc.TableReference\022\033\n\023do_initial_sna"
  "pshot\030\004 \001(\010\022\025\n\rstamp_columns\030\005 \003(\t\"\247\002\n\026C"
  "rossJoinTablesRequest\022<\n\tresult_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\022B\n\007left_id\030\002 \001(\01321.io.deephaven.prot"
  "o.backplane.grpc.TableReference\022C\n\010right"
  "_id\030\003 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022\030\n\020columns_to_match"
  "\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\022\024\n\014reserv"
  "e_bits\030\006 \001(\005\"\223\002\n\030NaturalJoinTablesReques"
  "t\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.prot"
  "o.backplane.grpc.Ticket\022B\n\007left_id\030\002 \001(\013"
  "21.io.deephaven.proto.backplane.grpc.Tab"
  "leReference\022C\n\010right_id\030\003 \001(\01321.io.deeph"
  "aven.proto.backplane.grpc.TableReference"
  "\022\030\n\020columns_to_match\030\004 \003(\t\022\026\n\016columns_to"
  "_add\030\005 \003(\t\"\221\002\n\026ExactJoinTablesRequest\022<\n"
  "\tresult_id\030\001 \001(\0132).io.deephaven.proto.ba"
  "ckplane.grpc.Ticket\022B\n\007left_id\030\002 \001(\01321.i"
  "o.deephaven.proto.backplane.grpc.TableRe"
  "ference\022C\n\010right_id\030\003 \001(\01321.io.deephaven"
  ".proto.backplane.grpc.TableReference\022\030\n\020"
  "columns_to_match\030\004 \003(\t\022\026\n\016columns_to_add"
  "\030\005 \003(\t\"\220\002\n\025LeftJoinTablesRequest\022<\n\tresu"
  "lt_id\030\001 \001(\0132).io.deephaven.proto.backpla"
  "ne.grpc.Ticket\022B\n\007left_id\030\002 \001(\01321.io.dee"
  "phaven.proto.backplane.grpc.TableReferen"
  "ce\022C\n\010right_id\030\003 \001(\01321.io.deephaven.prot"
  "o.backplane.grpc.TableReference\022\030\n\020colum"
  "ns_to_match\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003("
  "\t\"\311\003\n\025AsOfJoinTablesRequest\022<\n\tresult_id"
  "\030\001 \001(\0132).io.deephaven.proto.backplane.gr"
  "pc.Ticket\022B\n\007left_id\030\002 \001(\01321.io.deephave"
  "n.proto.backplane.grpc.TableReference\022C\n"
  "\010right_id\030\003 \001(\01321.io.deephaven.proto.bac"
  "kplane.grpc.TableReference\022\030\n\020columns_to"
  "_match\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\022\\\n\020"
  "as_of_match_rule\030\007 \001(\0162B.io.deephaven.pr"
  "oto.backplane.grpc.AsOfJoinTablesRequest"
  ".MatchRule\"Y\n\tMatchRule\022\023\n\017LESS_THAN_EQU"
  "AL\020\000\022\r\n\tLESS_THAN\020\001\022\026\n\022GREATER_THAN_EQUA"
  "L\020\002\022\020\n\014GREATER_THAN\020\003\"\372\004\n\025ComboAggregate"
  "Request\022<\n\tresult_id\030\001 \001(\0132).io.deephave"
  "n.proto.backplane.grpc.Ticket\022D\n\tsource_"
  "id\030\002 \001(\01321.io.deephaven.proto.backplane."
  "grpc.TableReference\022V\n\naggregates\030\003 \003(\0132"
  "B.io.deephaven.proto.backplane.grpc.Comb"
  "oAggregateRequest.Aggregate\022\030\n\020group_by_"
  "columns\030\004 \003(\t\022\023\n\013force_combo\030\005 \001(\010\032\255\001\n\tA"
  "ggregate\022N\n\004type\030\001 \001(\0162@.io.deephaven.pr"
  "oto.backplane.grpc.ComboAggregateRequest"
  ".AggType\022\023\n\013match_pairs\030\002 \003(\t\022\023\n\013column_"
  "name\030\003 \001(\t\022\022\n\npercentile\030\004 \001(\001\022\022\n\navg_me"
  "dian\030\005 \001(\010\"\245\001\n\007AggType\022\007\n\003SUM\020\000\022\013\n\007ABS_S"
  "UM\020\001\022\t\n\005GROUP\020\002\022\007\n\003AVG\020\003\022\t\n\005COUNT\020\004\022\t\n\005F"
  "IRST\020\005\022\010\n\004LAST\020\006\022\007\n\003MIN\020\007\022\007\n\003MAX\020\010\022\n\n\006ME"
  "DIAN\020\t\022\016\n\nPERCENTILE\020\n\022\007\n\003STD\020\013\022\007\n\003VAR\020\014"
  "\022\020\n\014WEIGHTED_AVG\020\r\"\341\001\n\016SortDescriptor\022\023\n"
  "\013column_name\030\001 \001(\t\022\023\n\013is_absolute\030\002 \001(\010\022"
  "R\n\tdirection\030\003 \001(\0162\?.io.deephaven.proto."
  "backplane.grpc.SortDescriptor.SortDirect"
  "ion\"Q\n\rSortDirection\022\013\n\007UNKNOWN\020\000\022\027\n\nDES"
  "CENDING\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tASCENDING\020\001\022\013\n\007REV"
  "ERSE\020\002\"\330\001\n\020SortTableRequest\022<\n\tresult_id"
  "\030\001 \001(\0132).io.deephaven.proto.backplane.gr"
  "pc.Ticket\022D\n\tsource_id\030\002 \001(\01321.io.deepha"
  "ven.proto.backplane.grpc.TableReference\022"
  "@\n\005sorts\030\003 \003(\01321.io.deephaven.proto.back"
  "plane.grpc.SortDescriptor\"\327\001\n\022FilterTabl"
  "eRequest\022<\n\tresult_id\030\001 \001(\0132).io.deephav"
  "en.proto.backplane.grpc.Ticket\022D\n\tsource"
  "_id\030\002 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022=\n\007filters\030\003 \003(\0132,."
  "io.deephaven.proto.backplane.grpc.Condit"
  "ion\" \n\tReference\022\023\n\013column_name\030\001 \001(\t\"\221\001"
  "\n\007Literal\022\026\n\014string_value\030\001 \001(\tH\000\022\026\n\014dou"
  "ble_value\030\002 \001(\001H\000\022\024\n\nbool_value\030\003 \001(\010H\000\022"
  "\030\n\nlong_value\030\004 \001(\022B\0020\001H\000\022\035\n\017nano_time_v"
  "alue\030\005 \001(\022B\0020\001H\000B\007\n\005value\"\221\001\n\005Value\022A\n\tr"
  "eference\030\001 \001(\0132,.io.deephaven.proto.back"
  "plane.grpc.ReferenceH\000\022=\n\007literal\030\002 \001(\0132"
  "*.io.deephaven.proto.backplane.grpc.Lite"
  "ralH\000B\006\n\004data\"\274\005\n\tCondition\022>\n\003and\030\001 \001(\013"
  "2/.io.deephaven.proto.backplane.grpc.And"
  "ConditionH\000\022<\n\002or\030\002 \001(\0132..io.deephaven.p"
  "roto.backplane.grpc.OrConditionH\000\022>\n\003not"
  "\030\003 \001(\0132/.io.deephaven.proto.backplane.gr"
  "pc.NotConditionH\000\022F\n\007compare\030\004 \001(\01323.io."
  "deephaven.proto.backplane.grpc.CompareCo"
  "nditionH\000\022<\n\002in\030\005 \001(\0132..io.deephaven.pro"
  "to.backplane.grpc.InConditionH\000\022D\n\006invok"
  "e\030\006 \001(\01322.io.deephaven.proto.backplane.g"
  "rpc.InvokeConditionH\000\022E\n\007is_null\030\007 \001(\01322"
  ".io.deephaven.proto.backplane.grpc.IsNul"
  "lConditionH\000\022F\n\007matches\030\010 \001(\01323.io.deeph"
  "aven.proto.backplane.grpc.MatchesConditi"
  "onH\000\022H\n\010contains\030\t \001(\01324.io.deephaven.pr"
  "oto.backplane.grpc.ContainsConditionH\000\022D"
  "\n\006search\030\n \001(\01322.io.deephaven.proto.back"
  "plane.grpc.SearchConditionH\000B\006\n\004data\"M\n\014"
  "AndCondition\022=\n\007filters\030\001 \003(\0132,.io.deeph"
  "aven.proto.backplane.grpc.Condition\"L\n\013O"
  "rCondition\022=\n\007filters\030\001 \003(\0132,.io.deephav"
  "en.proto.backplane.grpc.Condition\"L\n\014Not"
  "Condition\022<\n\006filter\030\001 \001(\0132,.io.deephaven"
  ".proto.backplane.grpc.Condition\"\254\003\n\020Comp"
  "areCondition\022W\n\toperation\030\001 \001(\0162D.io.dee"
  "phaven.proto.backplane.grpc.CompareCondi"
  "tion.CompareOperation\022L\n\020case_sensitivit"
  "y\030\002 \001(\01622.io.deephaven.proto.backplane.g"
  "rpc.CaseSensitivity\0225\n\003lhs\030\003 \001(\0132(.io.de"
  "ephaven.proto.backplane.grpc.Value\0225\n\003rh"
  "s\030\004 \001(\0132(.io.deephaven.proto.backplane.g"
  "rpc.Value\"\202\001\n\020CompareOperation\022\r\n\tLESS_T"
  "HAN\020\000\022\026\n\022LESS_THAN_OR_EQUAL\020\001\022\020\n\014GREATER"
  "_THAN\020\002\022\031\n\025GREATER_THAN_OR_EQUAL\020\003\022\n\n\006EQ"
  "UALS\020\004\022\016\n\nNOT_EQUALS\020\005\"\225\002\n\013InCondition\0228"
  "\n\006target\030\001 \001(\0132(.io.deephaven.proto.back"
  "plane.grpc.Value\022<\n\ncandidates\030\002 \003(\0132(.i"
  "o.deephaven.proto.backplane.grpc.Value\022L"
  "\n\020case_sensitivity\030\003 \001(\01622.io.deephaven."
  "proto.backplane.grpc.CaseSensitivity\022@\n\n"
  "match_type\030\004 \001(\0162,.io.deephaven.proto.ba"
  "ckplane.grpc.MatchType\"\230\001\n\017InvokeConditi"
  "on\022\016\n\006method\030\001 \001(\t\0228\n\006target\030\002 \001(\0132(.io."
  "deephaven.proto.backplane.grpc.Value\022;\n\t"
  "arguments\030\003 \003(\0132(.io.deephaven.proto.bac"
  "kplane.grpc.Value\"R\n\017IsNullCondition\022\?\n\t"
  "reference\030\001 \001(\0132,.io.deephaven.proto.bac"
  "kplane.grpc.Reference\"\362\001\n\020MatchesConditi"
  "on\022\?\n\treference\030\001 \001(\0132,.io.deephaven.pro"
  "to.backplane.grpc.Reference\022\r\n\005regex\030\002 \001"
  "(\t\022L\n\020case_sensitivity\030\003 \001(\01622.io.deepha"
  "ven.proto.backplane.grpc.CaseSensitivity"
  "\022@\n\nmatch_type\030\004 \001(\0162,.io.deephaven.prot"
  "o.backplane.grpc.MatchType\"\373\001\n\021ContainsC"
  "ondition\022\?\n\treference\030\001 \001(\0132,.io.deephav"
  "en.proto.backplane.grpc.Reference\022\025\n\rsea"
  "rch_string\030\002 \001(\t\022L\n\020case_sensitivity\030\003 \001"
  "(\01622.io.deephaven.proto.backplane.grpc.C"
  "aseSensitivity\022@\n\nmatch_type\030\004 \001(\0162,.io."
  "deephaven.proto.backplane.grpc.MatchType"
  "\"s\n\017SearchCondition\022\025\n\rsearch_string\030\001 \001"
  "(\t\022I\n\023optional_references\030\002 \003(\0132,.io.dee"
  "phaven.proto.backplane.grpc.Reference\"\224\001"
  "\n\016FlattenRequest\022<\n\tresult_id\030\001 \001(\0132).io"
  ".deephaven.proto.backplane.grpc.Ticket\022D"
  "\n\tsource_id\030\002 \001(\01321.io.deephaven.proto.b"
  "ackplane.grpc.TableReference\"\264\003\n\031RunChar"
  "tDownsampleRequest\022<\n\tresult_id\030\001 \001(\0132)."
  "io.deephaven.proto.backplane.grpc.Ticket"
  "\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.proto"
  ".backplane.grpc.TableReference\022\023\n\013pixel_"
  "count\030\003 \001(\005\022Z\n\nzoom_range\030\004 \001(\0132F.io.dee"
  "phaven.proto.backplane.grpc.RunChartDown"
  "sampleRequest.ZoomRange\022\025\n\rx_column_name"
  "\030\005 \001(\t\022\026\n\016y_column_names\030\006 \003(\t\032s\n\tZoomRa"
  "nge\022\037\n\016min_date_nanos\030\001 \001(\003B\0020\001H\000\210\001\001\022\037\n\016"
  "max_date_nanos\030\002 \001(\003B\0020\001H\001\210\001\001B\021\n\017_min_da"
  "te_nanosB\021\n\017_max_date_nanos\"\365\004\n\027CreateIn"
  "putTableRequest\022<\n\tresult_id\030\001 \001(\0132).io."
  "deephaven.proto.backplane.grpc.Ticket\022L\n"
  "\017source_table_id\030\002 \001(\01321.io.deephaven.pr"
  "oto.backplane.grpc.TableReferenceH\000\022\020\n\006s"
  "chema\030\003 \001(\014H\000\022W\n\004kind\030\004 \001(\0132I.io.deephav"
  "en.proto.backplane.grpc.CreateInputTable"
  "Request.InputTableKind\032\324\002\n\016InputTableKin"
  "d\022}\n\025in_memory_append_only\030\001 \001(\0132\\.io.de"
  "ephaven.proto.backplane.grpc.CreateInput"
  "TableRequest.InputTableKind.InMemoryAppe"
  "ndOnlyH\000\022{\n\024in_memory_key_backed\030\002 \001(\0132["
  ".io.deephaven.proto.backplane.grpc.Creat"
  "eInputTableRequest.InputTableKind.InMemo"
  "ryKeyBackedH\000\032\024\n\022InMemoryAppendOnly\032(\n\021I"
  "nMemoryKeyBacked\022\023\n\013key_columns\030\001 \003(\tB\006\n"
  "\004kindB\014\n\ndefinition\"\221\024\n\021BatchTableReques"
  "t\022K\n\003ops\030\001 \003(\0132>.io.deephaven.proto.back"
  "plane.grpc.BatchTableRequest.Operation\032\256"
  "\023\n\tOperation\022K\n\013empty_table\030\001 \001(\01324.io.d"
  "eephaven.proto.backplane.grpc.EmptyTable"
  "RequestH\000\022I\n\ntime_table\030\002 \001(\01323.io.deeph"
  "aven.proto.backplane.grpc.TimeTableReque"
  "stH\000\022M\n\014drop_columns\030\003 \001(\01325.io.deephave"
  "n.proto.backplane.grpc.DropColumnsReques"
  "tH\000\022J\n\006update\030\004 \001(\01328.io.deephaven.proto"
  ".backplane.grpc.SelectOrUpdateRequestH\000\022"
  "O\n\013lazy_update\030\005 \001(\01328.io.deephaven.prot"
  "o.backplane.grpc.SelectOrUpdateRequestH\000"
  "\022H\n\004view\030\006 \001(\01328.io.deephaven.proto.back"
  "plane.grpc.SelectOrUpdateRequestH\000\022O\n\013up"
  "date_view\030\007 \001(\01328.io.deephaven.proto.bac"
  "kplane.grpc.SelectOrUpdateRequestH\000\022J\n\006s"
  "elect\030\010 \001(\01328.io.deephaven.proto.backpla"
  "ne.grpc.SelectOrUpdateRequestH\000\022S\n\017selec"
  "t_distinct\030\t \001(\01328.io.deephaven.proto.ba"
  "ckplane.grpc.SelectDistinctRequestH\000\022G\n\006"
  "filter\030\n \001(\01325.io.deephaven.proto.backpl"
  "ane.grpc.FilterTableRequestH\000\022`\n\023unstruc"
  "tured_filter\030\013 \001(\0132A.io.deephaven.proto."
  "backplane.grpc.UnstructuredFilterTableRe"
  "questH\000\022C\n\004sort\030\014 \001(\01323.io.deephaven.pro"
  "to.backplane.grpc.SortTableRequestH\000\022D\n\004"
  "head\030\r \001(\01324.io.deephaven.proto.backplan"
  "e.grpc.HeadOrTailRequestH\000\022D\n\004tail\030\016 \001(\013"
  "24.io.deephaven.proto.backplane.grpc.Hea"
  "dOrTailRequestH\000\022I\n\007head_by\030\017 \001(\01326.io.d"
  "eephaven.proto.backplane.grpc.HeadOrTail"
  "ByRequestH\000\022I\n\007tail_by\030\020 \001(\01326.io.deepha"
  "ven.proto.backplane.grpc.HeadOrTailByReq"
  "uestH\000\022D\n\007ungroup\030\021 \001(\01321.io.deephaven.p"
  "roto.backplane.grpc.UngroupRequestH\000\022F\n\005"
  "merge\030\022 \001(\01325.io.deephaven.proto.backpla"
  "ne.grpc.MergeTablesRequestH\000\022S\n\017combo_ag"
  "gregate\030\023 \001(\01328.io.deephaven.proto.backp"
  "lane.grpc.ComboAggregateRequestH\000\022K\n\010sna"
  "pshot\030\024 \001(\01327.io.deephaven.proto.backpla"
  "ne.grpc.SnapshotTableRequestH\000\022D\n\007flatte"
  "n\030\025 \001(\01321.io.deephaven.proto.backplane.g"
  "rpc.FlattenRequestH\000\022\\\n\024run_chart_downsa"
  "mple\030\026 \001(\0132<.io.deephaven.proto.backplan"
  "e.grpc.RunChartDownsampleRequestH\000\022O\n\ncr"
  "oss_join\030\027 \001(\01329.io.deephaven.proto.back"
  "plane.grpc.CrossJoinTablesRequestH\000\022S\n\014n"
  "atural_join\030\030 \001(\0132;.io.deephaven.proto.b"
  "ackplane.grpc.NaturalJoinTablesRequestH\000"
  "\022O\n\nexact_join\030\031 \001(\01329.io.deephaven.prot"
  "o.backplane.grpc.ExactJoinTablesRequestH"
  "\000\022M\n\tleft_join\030\032 \001(\01328.io.deephaven.prot"
  "o.backplane.grpc.LeftJoinTablesRequestH\000"
  "\022N\n\nas_of_join\030\033 \001(\01328.io.deephaven.prot"
  "o.backplane.grpc.AsOfJoinTablesRequestH\000"
  "\022K\n\013fetch_table\030\034 \001(\01324.io.deephaven.pro"
  "to.backplane.grpc.FetchTableRequestH\000\022X\n"
  "\022fetch_pandas_table\030\035 \001(\0132:.io.deephaven"
  ".proto.backplane.grpc.FetchPandasTableRe"
  "questH\000\022^\n\025apply_preview_columns\030\036 \001(\0132="
  ".io.deephaven.proto.backplane.grpc.Apply"
  "PreviewColumnsRequestH\000\022X\n\022create_input_"
  "table\030\037 \001(\0132:.io.deephaven.proto.backpla"
  "ne.grpc.CreateInputTableRequestH\000B\004\n\002op*"
  "2\n\017CaseSensitivity\022\016\n\nMATCH_CASE\020\000\022\017\n\013IG"
  "NORE_CASE\020\001*&\n\tMatchType\022\013\n\007REGULAR\020\000\022\014\n"
  "\010INVERTED\020\0012\325&\n\014TableService\022\221\001\n GetExpo"
  "rtedTableCreationResponse\022).io.deephaven"
  ".proto.backplane.grpc.Ticket\032@.io.deepha"
  "ven.proto.backplane.grpc.ExportedTableCr"
  "eationResponse\"\000\022\206\001\n\nFetchTable\0224.io.dee"
  "phaven.proto.backplane.grpc.FetchTableRe"
  "quest\032@.io.deephaven.proto.backplane.grp"
  "c.ExportedTableCreationResponse\"\000\022\222\001\n\020Fe"
  "tchPandasTable\022:.io.deephaven.proto.back"
  "plane.grpc.FetchPandasTableRequest\032@.io."
  "deephaven.proto.backplane.grpc.ExportedT"
  "ableCreationResponse\"\000\022\204\001\n\rFetchTableMap"
  "\0227.io.deephaven.proto.backplane.grpc.Fet"
  "chTableMapRequest\0328.io.deephaven.proto.b"
  "ackplane.grpc.FetchTableMapResponse\"\000\022\230\001"
  "\n\023ApplyPreviewColumns\022=.io.deephaven.pro"
  "to.backplane.grpc.ApplyPreviewColumnsReq"
  "uest\032@.io.deephaven.proto.backplane.grpc"
  ".ExportedTableCreationResponse\"\000\022\206\001\n\nEmp"
  "tyTable\0224.io.deephaven.proto.backplane.g"
  "rpc.EmptyTableRequest\032@.io.deephaven.pro"
  "to.backplane.grpc.ExportedTableCreationR"
  "esponse\"\000\022\204\001\n\tTimeTable\0223.io.deephaven.p"
  "roto.backplane.grpc.TimeTableRequest\032@.i"
  "o.deephaven.proto.backplane.grpc.Exporte"
  "dTableCreationResponse\"\000\022\210\001\n\013DropColumns"
  "\0225.io.deephaven.proto.backplane.grpc.Dro"
  "pColumnsRequest\032@.io.deephaven.proto.bac"
  "kplane.grpc.ExportedTableCreationRespons"
  "e\"\000\022\206\001\n\006Update\0228.io.deephaven.proto.back"
  "plane.grpc.SelectOrUpdateRequest\032@.io.de"
  "ephaven.proto.backplane.grpc.ExportedTab"
  "leCreationResponse\"\000\022\212\001\n\nLazyUpdate\0228.io"
  ".deephaven.proto.backplane.grpc.SelectOr"
  "UpdateRequest\032@.io.deephaven.proto.backp"
  "lane.grpc.ExportedTableCreationResponse\""
  "\000\022\204\001\n\004View\0228.io.deephaven.proto.backplan"
  "e.grpc.SelectOrUpdateRequest\032@.io.deepha"
  "ven.proto.backplane.grpc.ExportedTableCr"
  "eationResponse\"\000\022\212\001\n\nUpdateView\0228.io.dee"
  "phaven.proto.backplane.grpc.SelectOrUpda"
  "teRequest\032@.io.deephaven.proto.backplane"
  ".grpc.ExportedTableCreationResponse\"\000\022\206\001"
  "\n\006Select\0228.io.deephaven.proto.backplane."
  "grpc.SelectOrUpdateRequest\032@.io.deephave"
  "n.proto.backplane.grpc.ExportedTableCrea"
  "tionResponse\"\000\022\216\001\n\016SelectDistinct\0228.io.d"
  "eephaven.proto.backplane.grpc.SelectDist"
  "inctRequest\032@.io.deephaven.proto.backpla"
  "ne.grpc.ExportedTableCreationResponse\"\000\022"
  "\203\001\n\006Filter\0225.io.deephaven.proto.backplan"
  "e.grpc.FilterTableRequest\032@.io.deephaven"
  ".proto.backplane.grpc.ExportedTableCreat"
  "ionResponse\"\000\022\233\001\n\022UnstructuredFilter\022A.i"
  "o.deephaven.proto.backplane.grpc.Unstruc"
  "turedFilterTableRequest\032@.io.deephaven.p"
  "roto.backplane.grpc.ExportedTableCreatio"
  "nResponse\"\000\022\177\n\004Sort\0223.io.deephaven.proto"
  ".backplane.grpc.SortTableRequest\032@.io.de"
  "ephaven.proto.backplane.grpc.ExportedTab"
  "leCreationResponse\"\000\022\200\001\n\004Head\0224.io.deeph"
  "aven.proto.backplane.grpc.HeadOrTailRequ"
  "est\032@.io.deephaven.proto.backplane.grpc."
  "ExportedTableCreationResponse\"\000\022\200\001\n\004Tail"
  "\0224.io.deephaven.proto.backplane.grpc.Hea"
  "dOrTailRequest\032@.io.deephaven.proto.back"
  "plane.grpc.ExportedTableCreationResponse"
  "\"\000\022\204\001\n\006HeadBy\0226.io.deephaven.proto.backp"
  "lane.grpc.HeadOrTailByRequest\032@.io.deeph"
  "aven.proto.backplane.grpc.ExportedTableC"
  "reationResponse\"\000\022\204\001\n\006TailBy\0226.io.deepha"
  "ven.proto.backplane.grpc.HeadOrTailByReq"
  "uest\032@.io.deephaven.proto.backplane.grpc"
  ".ExportedTableCreationResponse\"\000\022\200\001\n\007Ung"
  "roup\0221.io.deephaven.proto.backplane.grpc"
  ".UngroupRequest\032@.io.deephaven.proto.bac"
  "kplane.grpc.ExportedTableCreationRespons"
  "e\"\000\022\210\001\n\013MergeTables\0225.io.deephaven.proto"
  ".backplane.grpc.MergeTablesRequest\032@.io."
  "deephaven.proto.backplane.grpc.ExportedT"
  "ableCreationResponse\"\000\022\220\001\n\017CrossJoinTabl"
  "es\0229.io.deephaven.proto.backplane.grpc.C"
  "rossJoinTablesRequest\032@.io.deephaven.pro"
  "to.backplane.grpc.ExportedTableCreationR"
  "esponse\"\000\022\224\001\n\021NaturalJoinTables\022;.io.dee"
  "phaven.proto.backplane.grpc.NaturalJoinT"
  "ablesRequest\032@.io.deephaven.proto.backpl"
  "ane.grpc.ExportedTableCreationResponse\"\000"
  "\022\220\001\n\017ExactJoinTables\0229.io.deephaven.prot"
  "o.backplane.grpc.ExactJoinTablesRequest\032"
  "@.io.deephaven.proto.backplane.grpc.Expo"
  "rtedTableCreationResponse\"\000\022\216\001\n\016LeftJoin"
  "Tables\0228.io.deephaven.proto.backplane.gr"
  "pc.LeftJoinTablesRequest\032@.io.deephaven."
  "proto.backplane.grpc.ExportedTableCreati"
  "onResponse\"\000\022\216\001\n\016AsOfJoinTables\0228.io.dee"
  "phaven.proto.backplane.grpc.AsOfJoinTabl"
  "esRequest\032@.io.deephaven.proto.backplane"
  ".grpc.ExportedTableCreationResponse\"\000\022\216\001"
  "\n\016ComboAggregate\0228.io.deephaven.proto.ba"
  "ckplane.grpc.ComboAggregateRequest\032@.io."
  "deephaven.proto.backplane.grpc.ExportedT"
  "ableCreationResponse\"\000\022\207\001\n\010Snapshot\0227.io"
  ".deephaven.proto.backplane.grpc.Snapshot"
  "TableRequest\032@.io.deephaven.proto.backpl"
  "ane.grpc.ExportedTableCreationResponse\"\000"
  "\022\200\001\n\007Flatten\0221.io.deephaven.proto.backpl"
  "ane.grpc.FlattenRequest\032@.io.deephaven.p"
  "roto.backplane.grpc.ExportedTableCreatio"
  "nResponse\"\000\022\226\001\n\022RunChartDownsample\022<.io."
  "deephaven.proto.backplane.grpc.RunChartD"
  "ownsampleRequest\032@.io.deephaven.proto.ba"
  "ckplane.grpc.ExportedTableCreationRespon"
  "se\"\000\022\222\001\n\020CreateInputTable\022:.io.deephaven"
  ".proto.backplane.grpc.CreateInputTableRe"
  "quest\032@.io.deephaven.proto.backplane.grp"
  "c.ExportedTableCreationResponse\"\000\022\203\001\n\005Ba"
  "tch\0224.io.deephaven.proto.backplane.grpc."
  "BatchTableRequest\032@.io.deephaven.proto.b"
  "ackplane.grpc.ExportedTableCreationRespo"
  "nse\"\0000\001\022\231\001\n\024ExportedTableUpdates\022>.io.de"
  "ephaven.proto.backplane.grpc.ExportedTab"
  "leUpdatesRequest\032=.io.deephaven.proto.ba"
  "ckplane.grpc.ExportedTableUpdateMessage\""
  "\0000\001B\004H\001P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_deephaven_2fproto_2ftable_2eproto_deps[1] = {
  &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_deephaven_2fproto_2ftable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2ftable_2eproto = {
  false, false, 17817, descriptor_table_protodef_deephaven_2fproto_2ftable_2eproto, "deephaven/proto/table.proto", 
  &descriptor_table_deephaven_2fproto_2ftable_2eproto_once, descriptor_table_deephaven_2fproto_2ftable_2eproto_deps, 1, 53,
  schemas, file_default_instances, TableStruct_deephaven_2fproto_2ftable_2eproto::offsets,
  file_level_metadata_deephaven_2fproto_2ftable_2eproto, file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto, file_level_service_descriptors_deephaven_2fproto_2ftable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_deephaven_2fproto_2ftable_2eproto_getter() {
  return &descriptor_table_deephaven_2fproto_2ftable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2ftable_2eproto(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AsOfJoinTablesRequest_MatchRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[0];
}
bool AsOfJoinTablesRequest_MatchRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::LESS_THAN_EQUAL;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::LESS_THAN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::GREATER_THAN_EQUAL;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::GREATER_THAN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::MatchRule_MIN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::MatchRule_MAX;
constexpr int AsOfJoinTablesRequest::MatchRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComboAggregateRequest_AggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[1];
}
bool ComboAggregateRequest_AggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::ABS_SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::GROUP;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::COUNT;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::FIRST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::LAST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MAX;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MEDIAN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::PERCENTILE;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::STD;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::VAR;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::WEIGHTED_AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MAX;
constexpr int ComboAggregateRequest::AggType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortDescriptor_SortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[2];
}
bool SortDescriptor_SortDirection_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SortDescriptor_SortDirection SortDescriptor::UNKNOWN;
constexpr SortDescriptor_SortDirection SortDescriptor::DESCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::ASCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::REVERSE;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MIN;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MAX;
constexpr int SortDescriptor::SortDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompareCondition_CompareOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[3];
}
bool CompareCondition_CompareOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CompareCondition_CompareOperation CompareCondition::LESS_THAN;
constexpr CompareCondition_CompareOperation CompareCondition::LESS_THAN_OR_EQUAL;
constexpr CompareCondition_CompareOperation CompareCondition::GREATER_THAN;
constexpr CompareCondition_CompareOperation CompareCondition::GREATER_THAN_OR_EQUAL;
constexpr CompareCondition_CompareOperation CompareCondition::EQUALS;
constexpr CompareCondition_CompareOperation CompareCondition::NOT_EQUALS;
constexpr CompareCondition_CompareOperation CompareCondition::CompareOperation_MIN;
constexpr CompareCondition_CompareOperation CompareCondition::CompareOperation_MAX;
constexpr int CompareCondition::CompareOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaseSensitivity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[4];
}
bool CaseSensitivity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[5];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TableReference::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& ticket(const TableReference* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
TableReference::_Internal::ticket(const TableReference* msg) {
  return *msg->ref_.ticket_;
}
void TableReference::set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ref();
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket));
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    set_has_ticket();
    ref_.ticket_ = ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TableReference.ticket)
}
void TableReference::clear_ticket() {
  if (_internal_has_ticket()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ref_.ticket_;
    }
    clear_has_ref();
  }
}
TableReference::TableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}
TableReference::TableReference(const TableReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ref();
  switch (from.ref_case()) {
    case kTicket: {
      _internal_mutable_ticket()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_ticket());
      break;
    }
    case kBatchOffset: {
      _internal_set_batch_offset(from._internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}

void TableReference::SharedCtor() {
clear_has_ref();
}

TableReference::~TableReference() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TableReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ref()) {
    clear_ref();
  }
}

void TableReference::ArenaDtor(void* object) {
  TableReference* _this = reinterpret_cast< TableReference* >(object);
  (void)_this;
}
void TableReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableReference::clear_ref() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  switch (ref_case()) {
    case kTicket: {
      if (GetArenaForAllocation() == nullptr) {
        delete ref_.ticket_;
      }
      break;
    }
    case kBatchOffset: {
      // No need to clear
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REF_NOT_SET;
}


void TableReference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ref();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 batch_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_batch_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TableReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
  if (_internal_has_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  // sint32 batch_offset = 2;
  if (_internal_has_batch_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_batch_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TableReference)
  return target;
}

size_t TableReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TableReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ref_case()) {
    // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
    case kTicket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_.ticket_);
      break;
    }
    // sint32 batch_offset = 2;
    case kBatchOffset: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableReference::GetClassData() const { return &_class_data_; }

void TableReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableReference *>(to)->MergeFrom(
      static_cast<const TableReference &>(from));
}


void TableReference::MergeFrom(const TableReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ref_case()) {
    case kTicket: {
      _internal_mutable_ticket()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_ticket());
      break;
    }
    case kBatchOffset: {
      _internal_set_batch_offset(from._internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableReference::CopyFrom(const TableReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableReference::IsInitialized() const {
  return true;
}

void TableReference::InternalSwap(TableReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ref_, other->ref_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[0]);
}

// ===================================================================

class ExportedTableCreationResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& result_id(const ExportedTableCreationResponse* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
ExportedTableCreationResponse::_Internal::result_id(const ExportedTableCreationResponse* msg) {
  return *msg->result_id_;
}
ExportedTableCreationResponse::ExportedTableCreationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}
ExportedTableCreationResponse::ExportedTableCreationResponse(const ExportedTableCreationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_info(), 
      GetArenaForAllocation());
  }
  schema_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_schema_header().empty()) {
    schema_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema_header(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&size_)) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}

void ExportedTableCreationResponse::SharedCtor() {
error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
schema_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(is_static_));
}

ExportedTableCreationResponse::~ExportedTableCreationResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExportedTableCreationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_id_;
}

void ExportedTableCreationResponse::ArenaDtor(void* object) {
  ExportedTableCreationResponse* _this = reinterpret_cast< ExportedTableCreationResponse* >(object);
  (void)_this;
}
void ExportedTableCreationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedTableCreationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportedTableCreationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmpty();
  schema_header_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_static_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableCreationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes schema_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_schema_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_static = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 6 [jstype = JS_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedTableCreationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_info = 3;
  if (!this->_internal_error_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_info().data(), static_cast<int>(this->_internal_error_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_info(), target);
  }

  // bytes schema_header = 4;
  if (!this->_internal_schema_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_schema_header(), target);
  }

  // bool is_static = 5;
  if (this->_internal_is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_static(), target);
  }

  // sint64 size = 6 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  return target;
}

size_t ExportedTableCreationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_info = 3;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_info());
  }

  // bytes schema_header = 4;
  if (!this->_internal_schema_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema_header());
  }

  // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // sint64 size = 6 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool is_static = 5;
  if (this->_internal_is_static() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportedTableCreationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExportedTableCreationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportedTableCreationResponse::GetClassData() const { return &_class_data_; }

void ExportedTableCreationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExportedTableCreationResponse *>(to)->MergeFrom(
      static_cast<const ExportedTableCreationResponse &>(from));
}


void ExportedTableCreationResponse::MergeFrom(const ExportedTableCreationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_schema_header().empty()) {
    _internal_set_schema_header(from._internal_schema_header());
  }
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_result_id());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_is_static() != 0) {
    _internal_set_is_static(from._internal_is_static());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportedTableCreationResponse::CopyFrom(const ExportedTableCreationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableCreationResponse::IsInitialized() const {
  return true;
}

void ExportedTableCreationResponse::InternalSwap(ExportedTableCreationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_info_, lhs_arena,
      &other->error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &schema_header_, lhs_arena,
      &other->schema_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, is_static_)
      + sizeof(ExportedTableCreationResponse::is_static_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableCreationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[1]);
}

// ===================================================================

class FetchTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FetchTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FetchTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
FetchTableRequest::_Internal::source_id(const FetchTableRequest* msg) {
  return *msg->source_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
FetchTableRequest::_Internal::result_id(const FetchTableRequest* msg) {
  return *msg->result_id_;
}
void FetchTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
FetchTableRequest::FetchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
}
FetchTableRequest::FetchTableRequest(const FetchTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
}

void FetchTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(result_id_));
}

FetchTableRequest::~FetchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FetchTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete result_id_;
}

void FetchTableRequest::ArenaDtor(void* object) {
  FetchTableRequest* _this = reinterpret_cast< FetchTableRequest* >(object);
  (void)_this;
}
void FetchTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  return target;
}

size_t FetchTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FetchTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchTableRequest::GetClassData() const { return &_class_data_; }

void FetchTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FetchTableRequest *>(to)->MergeFrom(
      static_cast<const FetchTableRequest &>(from));
}


void FetchTableRequest::MergeFrom(const FetchTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchTableRequest::CopyFrom(const FetchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchTableRequest::IsInitialized() const {
  return true;
}

void FetchTableRequest::InternalSwap(FetchTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchTableRequest, result_id_)
      + sizeof(FetchTableRequest::result_id_)
      - PROTOBUF_FIELD_OFFSET(FetchTableRequest, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[2]);
}

// ===================================================================

class ApplyPreviewColumnsRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const ApplyPreviewColumnsRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const ApplyPreviewColumnsRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
ApplyPreviewColumnsRequest::_Internal::source_id(const ApplyPreviewColumnsRequest* msg) {
  return *msg->source_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
ApplyPreviewColumnsRequest::_Internal::result_id(const ApplyPreviewColumnsRequest* msg) {
  return *msg->result_id_;
}
void ApplyPreviewColumnsRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
}
ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(const ApplyPreviewColumnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
}

void ApplyPreviewColumnsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(result_id_));
}

ApplyPreviewColumnsRequest::~ApplyPreviewColumnsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplyPreviewColumnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete result_id_;
}

void ApplyPreviewColumnsRequest::ArenaDtor(void* object) {
  ApplyPreviewColumnsRequest* _this = reinterpret_cast< ApplyPreviewColumnsRequest* >(object);
  (void)_this;
}
void ApplyPreviewColumnsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyPreviewColumnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplyPreviewColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyPreviewColumnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyPreviewColumnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  return target;
}

size_t ApplyPreviewColumnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyPreviewColumnsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplyPreviewColumnsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyPreviewColumnsRequest::GetClassData() const { return &_class_data_; }

void ApplyPreviewColumnsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApplyPreviewColumnsRequest *>(to)->MergeFrom(
      static_cast<const ApplyPreviewColumnsRequest &>(from));
}


void ApplyPreviewColumnsRequest::MergeFrom(const ApplyPreviewColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyPreviewColumnsRequest::CopyFrom(const ApplyPreviewColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPreviewColumnsRequest::IsInitialized() const {
  return true;
}

void ApplyPreviewColumnsRequest::InternalSwap(ApplyPreviewColumnsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, result_id_)
      + sizeof(ApplyPreviewColumnsRequest::result_id_)
      - PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyPreviewColumnsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[3]);
}

// ===================================================================

class FetchPandasTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FetchPandasTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FetchPandasTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
FetchPandasTableRequest::_Internal::source_id(const FetchPandasTableRequest* msg) {
  return *msg->source_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
FetchPandasTableRequest::_Internal::result_id(const FetchPandasTableRequest* msg) {
  return *msg->result_id_;
}
void FetchPandasTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
FetchPandasTableRequest::FetchPandasTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
}
FetchPandasTableRequest::FetchPandasTableRequest(const FetchPandasTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
}

void FetchPandasTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(result_id_));
}

FetchPandasTableRequest::~FetchPandasTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FetchPandasTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete result_id_;
}

void FetchPandasTableRequest::ArenaDtor(void* object) {
  FetchPandasTableRequest* _this = reinterpret_cast< FetchPandasTableRequest* >(object);
  (void)_this;
}
void FetchPandasTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchPandasTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchPandasTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchPandasTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchPandasTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
  return target;
}

size_t FetchPandasTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchPandasTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FetchPandasTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchPandasTableRequest::GetClassData() const { return &_class_data_; }

void FetchPandasTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FetchPandasTableRequest *>(to)->MergeFrom(
      static_cast<const FetchPandasTableRequest &>(from));
}


void FetchPandasTableRequest::MergeFrom(const FetchPandasTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchPandasTableRequest::CopyFrom(const FetchPandasTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FetchPandasTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchPandasTableRequest::IsInitialized() const {
  return true;
}

void FetchPandasTableRequest::InternalSwap(FetchPandasTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchPandasTableRequest, result_id_)
      + sizeof(FetchPandasTableRequest::result_id_)
      - PROTOBUF_FIELD_OFFSET(FetchPandasTableRequest, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchPandasTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[4]);
}

// ===================================================================

class FetchTableMapRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FetchTableMapRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FetchTableMapRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
FetchTableMapRequest::_Internal::source_id(const FetchTableMapRequest* msg) {
  return *msg->source_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
FetchTableMapRequest::_Internal::result_id(const FetchTableMapRequest* msg) {
  return *msg->result_id_;
}
void FetchTableMapRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
FetchTableMapRequest::FetchTableMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
}
FetchTableMapRequest::FetchTableMapRequest(const FetchTableMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
}

void FetchTableMapRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(result_id_));
}

FetchTableMapRequest::~FetchTableMapRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FetchTableMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete result_id_;
}

void FetchTableMapRequest::ArenaDtor(void* object) {
  FetchTableMapRequest* _this = reinterpret_cast< FetchTableMapRequest* >(object);
  (void)_this;
}
void FetchTableMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchTableMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchTableMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchTableMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchTableMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
  return target;
}

size_t FetchTableMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchTableMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FetchTableMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchTableMapRequest::GetClassData() const { return &_class_data_; }

void FetchTableMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FetchTableMapRequest *>(to)->MergeFrom(
      static_cast<const FetchTableMapRequest &>(from));
}


void FetchTableMapRequest::MergeFrom(const FetchTableMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchTableMapRequest::CopyFrom(const FetchTableMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FetchTableMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchTableMapRequest::IsInitialized() const {
  return true;
}

void FetchTableMapRequest::InternalSwap(FetchTableMapRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchTableMapRequest, result_id_)
      + sizeof(FetchTableMapRequest::result_id_)
      - PROTOBUF_FIELD_OFFSET(FetchTableMapRequest, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchTableMapRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[5]);
}

// ===================================================================

class FetchTableMapResponse::_Internal {
 public:
};

FetchTableMapResponse::FetchTableMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchTableMapResponse)
}
FetchTableMapResponse::FetchTableMapResponse(const FetchTableMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchTableMapResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchTableMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchTableMapResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FetchTableMapResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[6]);
}

// ===================================================================

class ExportedTableUpdatesRequest::_Internal {
 public:
};

ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}
ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(const ExportedTableUpdatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportedTableUpdatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportedTableUpdatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableUpdatesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[7]);
}

// ===================================================================

class ExportedTableUpdateMessage::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& export_id(const ExportedTableUpdateMessage* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ExportedTableUpdateMessage::_Internal::export_id(const ExportedTableUpdateMessage* msg) {
  return *msg->export_id_;
}
void ExportedTableUpdateMessage::clear_export_id() {
  if (GetArenaForAllocation() == nullptr && export_id_ != nullptr) {
    delete export_id_;
  }
  export_id_ = nullptr;
}
ExportedTableUpdateMessage::ExportedTableUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}
ExportedTableUpdateMessage::ExportedTableUpdateMessage(const ExportedTableUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_failure_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_update_failure_message().empty()) {
    update_failure_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_failure_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_export_id()) {
    export_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.export_id_);
  } else {
    export_id_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}

void ExportedTableUpdateMessage::SharedCtor() {
update_failure_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&export_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&export_id_)) + sizeof(size_));
}

ExportedTableUpdateMessage::~ExportedTableUpdateMessage() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExportedTableUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  update_failure_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete export_id_;
}

void ExportedTableUpdateMessage::ArenaDtor(void* object) {
  ExportedTableUpdateMessage* _this = reinterpret_cast< ExportedTableUpdateMessage* >(object);
  (void)_this;
}
void ExportedTableUpdateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedTableUpdateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportedTableUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_failure_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && export_id_ != nullptr) {
    delete export_id_;
  }
  export_id_ = nullptr;
  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableUpdateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string update_failure_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_update_failure_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedTableUpdateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
  if (this->_internal_has_export_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::export_id(this), target, stream);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_size(), target);
  }

  // string update_failure_message = 3;
  if (!this->_internal_update_failure_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_failure_message().data(), static_cast<int>(this->_internal_update_failure_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_update_failure_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  return target;
}

size_t ExportedTableUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string update_failure_message = 3;
  if (!this->_internal_update_failure_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_failure_message());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
  if (this->_internal_has_export_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *export_id_);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportedTableUpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExportedTableUpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportedTableUpdateMessage::GetClassData() const { return &_class_data_; }

void ExportedTableUpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExportedTableUpdateMessage *>(to)->MergeFrom(
      static_cast<const ExportedTableUpdateMessage &>(from));
}


void ExportedTableUpdateMessage::MergeFrom(const ExportedTableUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_update_failure_message().empty()) {
    _internal_set_update_failure_message(from._internal_update_failure_message());
  }
  if (from._internal_has_export_id()) {
    _internal_mutable_export_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_export_id());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportedTableUpdateMessage::CopyFrom(const ExportedTableUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableUpdateMessage::IsInitialized() const {
  return true;
}

void ExportedTableUpdateMessage::InternalSwap(ExportedTableUpdateMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &update_failure_message_, lhs_arena,
      &other->update_failure_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, size_)
      + sizeof(ExportedTableUpdateMessage::size_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, export_id_)>(
          reinterpret_cast<char*>(&export_id_),
          reinterpret_cast<char*>(&other->export_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableUpdateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[8]);
}

// ===================================================================

class EmptyTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const EmptyTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
EmptyTableRequest::_Internal::result_id(const EmptyTableRequest* msg) {
  return *msg->result_id_;
}
void EmptyTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
EmptyTableRequest::EmptyTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}
EmptyTableRequest::EmptyTableRequest(const EmptyTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}

void EmptyTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(size_));
}

EmptyTableRequest::~EmptyTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmptyTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
}

void EmptyTableRequest::ArenaDtor(void* object) {
  EmptyTableRequest* _this = reinterpret_cast< EmptyTableRequest* >(object);
  (void)_this;
}
void EmptyTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptyTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  return target;
}

size_t EmptyTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmptyTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyTableRequest::GetClassData() const { return &_class_data_; }

void EmptyTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmptyTableRequest *>(to)->MergeFrom(
      static_cast<const EmptyTableRequest &>(from));
}


void EmptyTableRequest::MergeFrom(const EmptyTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyTableRequest::CopyFrom(const EmptyTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyTableRequest::IsInitialized() const {
  return true;
}

void EmptyTableRequest::InternalSwap(EmptyTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmptyTableRequest, size_)
      + sizeof(EmptyTableRequest::size_)
      - PROTOBUF_FIELD_OFFSET(EmptyTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[9]);
}

// ===================================================================

class TimeTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const TimeTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
TimeTableRequest::_Internal::result_id(const TimeTableRequest* msg) {
  return *msg->result_id_;
}
void TimeTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
TimeTableRequest::TimeTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}
TimeTableRequest::TimeTableRequest(const TimeTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  ::memcpy(&start_time_nanos_, &from.start_time_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_nanos_) -
    reinterpret_cast<char*>(&start_time_nanos_)) + sizeof(period_nanos_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}

void TimeTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&period_nanos_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(period_nanos_));
}

TimeTableRequest::~TimeTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
}

void TimeTableRequest::ArenaDtor(void* object) {
  TimeTableRequest* _this = reinterpret_cast< TimeTableRequest* >(object);
  (void)_this;
}
void TimeTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  ::memset(&start_time_nanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_nanos_) -
      reinterpret_cast<char*>(&start_time_nanos_)) + sizeof(period_nanos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 start_time_nanos = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_time_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 period_nanos = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          period_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // sint64 start_time_nanos = 2 [jstype = JS_STRING];
  if (this->_internal_start_time_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_start_time_nanos(), target);
  }

  // sint64 period_nanos = 3 [jstype = JS_STRING];
  if (this->_internal_period_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_period_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  return target;
}

size_t TimeTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // sint64 start_time_nanos = 2 [jstype = JS_STRING];
  if (this->_internal_start_time_nanos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_start_time_nanos());
  }

  // sint64 period_nanos = 3 [jstype = JS_STRING];
  if (this->_internal_period_nanos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_period_nanos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeTableRequest::GetClassData() const { return &_class_data_; }

void TimeTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeTableRequest *>(to)->MergeFrom(
      static_cast<const TimeTableRequest &>(from));
}


void TimeTableRequest::MergeFrom(const TimeTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_start_time_nanos() != 0) {
    _internal_set_start_time_nanos(from._internal_start_time_nanos());
  }
  if (from._internal_period_nanos() != 0) {
    _internal_set_period_nanos(from._internal_period_nanos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeTableRequest::CopyFrom(const TimeTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTableRequest::IsInitialized() const {
  return true;
}

void TimeTableRequest::InternalSwap(TimeTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeTableRequest, period_nanos_)
      + sizeof(TimeTableRequest::period_nanos_)
      - PROTOBUF_FIELD_OFFSET(TimeTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[10]);
}

// ===================================================================

class SelectOrUpdateRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SelectOrUpdateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SelectOrUpdateRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SelectOrUpdateRequest::_Internal::result_id(const SelectOrUpdateRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SelectOrUpdateRequest::_Internal::source_id(const SelectOrUpdateRequest* msg) {
  return *msg->source_id_;
}
void SelectOrUpdateRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SelectOrUpdateRequest::SelectOrUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_specs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}
SelectOrUpdateRequest::SelectOrUpdateRequest(const SelectOrUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_specs_(from.column_specs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}

void SelectOrUpdateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

SelectOrUpdateRequest::~SelectOrUpdateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectOrUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void SelectOrUpdateRequest::ArenaDtor(void* object) {
  SelectOrUpdateRequest* _this = reinterpret_cast< SelectOrUpdateRequest* >(object);
  (void)_this;
}
void SelectOrUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectOrUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectOrUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_specs_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectOrUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_specs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_specs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectOrUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string column_specs = 3;
  for (int i = 0, n = this->_internal_column_specs_size(); i < n; i++) {
    const auto& s = this->_internal_column_specs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  return target;
}

size_t SelectOrUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_specs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_specs_.size());
  for (int i = 0, n = column_specs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_specs_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectOrUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectOrUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectOrUpdateRequest::GetClassData() const { return &_class_data_; }

void SelectOrUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectOrUpdateRequest *>(to)->MergeFrom(
      static_cast<const SelectOrUpdateRequest &>(from));
}


void SelectOrUpdateRequest::MergeFrom(const SelectOrUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_specs_.MergeFrom(from.column_specs_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectOrUpdateRequest::CopyFrom(const SelectOrUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectOrUpdateRequest::IsInitialized() const {
  return true;
}

void SelectOrUpdateRequest::InternalSwap(SelectOrUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_specs_.InternalSwap(&other->column_specs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, source_id_)
      + sizeof(SelectOrUpdateRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectOrUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[11]);
}

// ===================================================================

class SelectDistinctRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SelectDistinctRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SelectDistinctRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SelectDistinctRequest::_Internal::result_id(const SelectDistinctRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SelectDistinctRequest::_Internal::source_id(const SelectDistinctRequest* msg) {
  return *msg->source_id_;
}
void SelectDistinctRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SelectDistinctRequest::SelectDistinctRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}
SelectDistinctRequest::SelectDistinctRequest(const SelectDistinctRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_names_(from.column_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}

void SelectDistinctRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

SelectDistinctRequest::~SelectDistinctRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectDistinctRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void SelectDistinctRequest::ArenaDtor(void* object) {
  SelectDistinctRequest* _this = reinterpret_cast< SelectDistinctRequest* >(object);
  (void)_this;
}
void SelectDistinctRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectDistinctRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectDistinctRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectDistinctRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectDistinctRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  return target;
}

size_t SelectDistinctRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_names_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectDistinctRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectDistinctRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectDistinctRequest::GetClassData() const { return &_class_data_; }

void SelectDistinctRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectDistinctRequest *>(to)->MergeFrom(
      static_cast<const SelectDistinctRequest &>(from));
}


void SelectDistinctRequest::MergeFrom(const SelectDistinctRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectDistinctRequest::CopyFrom(const SelectDistinctRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectDistinctRequest::IsInitialized() const {
  return true;
}

void SelectDistinctRequest::InternalSwap(SelectDistinctRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, source_id_)
      + sizeof(SelectDistinctRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectDistinctRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[12]);
}

// ===================================================================

class DropColumnsRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const DropColumnsRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const DropColumnsRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
DropColumnsRequest::_Internal::result_id(const DropColumnsRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
DropColumnsRequest::_Internal::source_id(const DropColumnsRequest* msg) {
  return *msg->source_id_;
}
void DropColumnsRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
DropColumnsRequest::DropColumnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}
DropColumnsRequest::DropColumnsRequest(const DropColumnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_names_(from.column_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}

void DropColumnsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

DropColumnsRequest::~DropColumnsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DropColumnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void DropColumnsRequest::ArenaDtor(void* object) {
  DropColumnsRequest* _this = reinterpret_cast< DropColumnsRequest* >(object);
  (void)_this;
}
void DropColumnsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropColumnsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropColumnsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropColumnsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  return target;
}

size_t DropColumnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_names_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropColumnsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropColumnsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropColumnsRequest::GetClassData() const { return &_class_data_; }

void DropColumnsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DropColumnsRequest *>(to)->MergeFrom(
      static_cast<const DropColumnsRequest &>(from));
}


void DropColumnsRequest::MergeFrom(const DropColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropColumnsRequest::CopyFrom(const DropColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropColumnsRequest::IsInitialized() const {
  return true;
}

void DropColumnsRequest::InternalSwap(DropColumnsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropColumnsRequest, source_id_)
      + sizeof(DropColumnsRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(DropColumnsRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropColumnsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[13]);
}

// ===================================================================

class UnstructuredFilterTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const UnstructuredFilterTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const UnstructuredFilterTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
UnstructuredFilterTableRequest::_Internal::result_id(const UnstructuredFilterTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
UnstructuredFilterTableRequest::_Internal::source_id(const UnstructuredFilterTableRequest* msg) {
  return *msg->source_id_;
}
void UnstructuredFilterTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}
UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(const UnstructuredFilterTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}

void UnstructuredFilterTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

UnstructuredFilterTableRequest::~UnstructuredFilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnstructuredFilterTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void UnstructuredFilterTableRequest::ArenaDtor(void* object) {
  UnstructuredFilterTableRequest* _this = reinterpret_cast< UnstructuredFilterTableRequest* >(object);
  (void)_this;
}
void UnstructuredFilterTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnstructuredFilterTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnstructuredFilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnstructuredFilterTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnstructuredFilterTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated string filters = 3;
  for (int i = 0, n = this->_internal_filters_size(); i < n; i++) {
    const auto& s = this->_internal_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  return target;
}

size_t UnstructuredFilterTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filters_.size());
  for (int i = 0, n = filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filters_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnstructuredFilterTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnstructuredFilterTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnstructuredFilterTableRequest::GetClassData() const { return &_class_data_; }

void UnstructuredFilterTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnstructuredFilterTableRequest *>(to)->MergeFrom(
      static_cast<const UnstructuredFilterTableRequest &>(from));
}


void UnstructuredFilterTableRequest::MergeFrom(const UnstructuredFilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnstructuredFilterTableRequest::CopyFrom(const UnstructuredFilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnstructuredFilterTableRequest::IsInitialized() const {
  return true;
}

void UnstructuredFilterTableRequest::InternalSwap(UnstructuredFilterTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, source_id_)
      + sizeof(UnstructuredFilterTableRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnstructuredFilterTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[14]);
}

// ===================================================================

class HeadOrTailRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const HeadOrTailRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const HeadOrTailRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HeadOrTailRequest::_Internal::result_id(const HeadOrTailRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
HeadOrTailRequest::_Internal::source_id(const HeadOrTailRequest* msg) {
  return *msg->source_id_;
}
void HeadOrTailRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
HeadOrTailRequest::HeadOrTailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}
HeadOrTailRequest::HeadOrTailRequest(const HeadOrTailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  num_rows_ = from.num_rows_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}

void HeadOrTailRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(num_rows_));
}

HeadOrTailRequest::~HeadOrTailRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeadOrTailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void HeadOrTailRequest::ArenaDtor(void* object) {
  HeadOrTailRequest* _this = reinterpret_cast< HeadOrTailRequest* >(object);
  (void)_this;
}
void HeadOrTailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeadOrTailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeadOrTailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  num_rows_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadOrTailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 num_rows = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeadOrTailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  return target;
}

size_t HeadOrTailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeadOrTailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeadOrTailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeadOrTailRequest::GetClassData() const { return &_class_data_; }

void HeadOrTailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeadOrTailRequest *>(to)->MergeFrom(
      static_cast<const HeadOrTailRequest &>(from));
}


void HeadOrTailRequest::MergeFrom(const HeadOrTailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeadOrTailRequest::CopyFrom(const HeadOrTailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrTailRequest::IsInitialized() const {
  return true;
}

void HeadOrTailRequest::InternalSwap(HeadOrTailRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, num_rows_)
      + sizeof(HeadOrTailRequest::num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadOrTailRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[15]);
}

// ===================================================================

class HeadOrTailByRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const HeadOrTailByRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const HeadOrTailByRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HeadOrTailByRequest::_Internal::result_id(const HeadOrTailByRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
HeadOrTailByRequest::_Internal::source_id(const HeadOrTailByRequest* msg) {
  return *msg->source_id_;
}
void HeadOrTailByRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
HeadOrTailByRequest::HeadOrTailByRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_by_column_specs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}
HeadOrTailByRequest::HeadOrTailByRequest(const HeadOrTailByRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_by_column_specs_(from.group_by_column_specs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  num_rows_ = from.num_rows_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}

void HeadOrTailByRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(num_rows_));
}

HeadOrTailByRequest::~HeadOrTailByRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeadOrTailByRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void HeadOrTailByRequest::ArenaDtor(void* object) {
  HeadOrTailByRequest* _this = reinterpret_cast< HeadOrTailByRequest* >(object);
  (void)_this;
}
void HeadOrTailByRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeadOrTailByRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeadOrTailByRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_by_column_specs_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  num_rows_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadOrTailByRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 num_rows = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_column_specs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_column_specs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeadOrTailByRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_num_rows(), target);
  }

  // repeated string group_by_column_specs = 4;
  for (int i = 0, n = this->_internal_group_by_column_specs_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_column_specs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  return target;
}

size_t HeadOrTailByRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string group_by_column_specs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_column_specs_.size());
  for (int i = 0, n = group_by_column_specs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_column_specs_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeadOrTailByRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeadOrTailByRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeadOrTailByRequest::GetClassData() const { return &_class_data_; }

void HeadOrTailByRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeadOrTailByRequest *>(to)->MergeFrom(
      static_cast<const HeadOrTailByRequest &>(from));
}


void HeadOrTailByRequest::MergeFrom(const HeadOrTailByRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_by_column_specs_.MergeFrom(from.group_by_column_specs_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_num_rows() != 0) {
    _internal_set_num_rows(from._internal_num_rows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeadOrTailByRequest::CopyFrom(const HeadOrTailByRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrTailByRequest::IsInitialized() const {
  return true;
}

void HeadOrTailByRequest::InternalSwap(HeadOrTailByRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_by_column_specs_.InternalSwap(&other->group_by_column_specs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, num_rows_)
      + sizeof(HeadOrTailByRequest::num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadOrTailByRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[16]);
}

// ===================================================================

class UngroupRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const UngroupRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const UngroupRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
UngroupRequest::_Internal::result_id(const UngroupRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
UngroupRequest::_Internal::source_id(const UngroupRequest* msg) {
  return *msg->source_id_;
}
void UngroupRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
UngroupRequest::UngroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_to_ungroup_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}
UngroupRequest::UngroupRequest(const UngroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_ungroup_(from.columns_to_ungroup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  null_fill_ = from.null_fill_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}

void UngroupRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&null_fill_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(null_fill_));
}

UngroupRequest::~UngroupRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UngroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void UngroupRequest::ArenaDtor(void* object) {
  UngroupRequest* _this = reinterpret_cast< UngroupRequest* >(object);
  (void)_this;
}
void UngroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UngroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UngroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_ungroup_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  null_fill_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UngroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool null_fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          null_fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_ungroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_ungroup();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UngroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // bool null_fill = 3;
  if (this->_internal_null_fill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_null_fill(), target);
  }

  // repeated string columns_to_ungroup = 4;
  for (int i = 0, n = this->_internal_columns_to_ungroup_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_ungroup(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UngroupRequest)
  return target;
}

size_t UngroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_ungroup = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_ungroup_.size());
  for (int i = 0, n = columns_to_ungroup_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_ungroup_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // bool null_fill = 3;
  if (this->_internal_null_fill() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UngroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UngroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UngroupRequest::GetClassData() const { return &_class_data_; }

void UngroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UngroupRequest *>(to)->MergeFrom(
      static_cast<const UngroupRequest &>(from));
}


void UngroupRequest::MergeFrom(const UngroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_ungroup_.MergeFrom(from.columns_to_ungroup_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_null_fill() != 0) {
    _internal_set_null_fill(from._internal_null_fill());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UngroupRequest::CopyFrom(const UngroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UngroupRequest::IsInitialized() const {
  return true;
}

void UngroupRequest::InternalSwap(UngroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_to_ungroup_.InternalSwap(&other->columns_to_ungroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UngroupRequest, null_fill_)
      + sizeof(UngroupRequest::null_fill_)
      - PROTOBUF_FIELD_OFFSET(UngroupRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UngroupRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[17]);
}

// ===================================================================

class MergeTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const MergeTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
MergeTablesRequest::_Internal::result_id(const MergeTablesRequest* msg) {
  return *msg->result_id_;
}
void MergeTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
MergeTablesRequest::MergeTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  source_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}
MergeTablesRequest::MergeTablesRequest(const MergeTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_ids_(from.source_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_column().empty()) {
    key_column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_column(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}

void MergeTablesRequest::SharedCtor() {
key_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_id_ = nullptr;
}

MergeTablesRequest::~MergeTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MergeTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_id_;
}

void MergeTablesRequest::ArenaDtor(void* object) {
  MergeTablesRequest* _this = reinterpret_cast< MergeTablesRequest* >(object);
  (void)_this;
}
void MergeTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_ids_.Clear();
  key_column_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string key_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key_column();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_source_ids(i), target, stream);
  }

  // string key_column = 3;
  if (!this->_internal_key_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_column().data(), static_cast<int>(this->_internal_key_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  return target;
}

size_t MergeTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
  total_size += 1UL * this->_internal_source_ids_size();
  for (const auto& msg : this->source_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key_column = 3;
  if (!this->_internal_key_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_column());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MergeTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeTablesRequest::GetClassData() const { return &_class_data_; }

void MergeTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MergeTablesRequest *>(to)->MergeFrom(
      static_cast<const MergeTablesRequest &>(from));
}


void MergeTablesRequest::MergeFrom(const MergeTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_ids_.MergeFrom(from.source_ids_);
  if (!from._internal_key_column().empty()) {
    _internal_set_key_column(from._internal_key_column());
  }
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeTablesRequest::CopyFrom(const MergeTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTablesRequest::IsInitialized() const {
  return true;
}

void MergeTablesRequest::InternalSwap(MergeTablesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  source_ids_.InternalSwap(&other->source_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_column_, lhs_arena,
      &other->key_column_, rhs_arena
  );
  swap(result_id_, other->result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeTablesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[18]);
}

// ===================================================================

class SnapshotTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SnapshotTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const SnapshotTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const SnapshotTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SnapshotTableRequest::_Internal::result_id(const SnapshotTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SnapshotTableRequest::_Internal::left_id(const SnapshotTableRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SnapshotTableRequest::_Internal::right_id(const SnapshotTableRequest* msg) {
  return *msg->right_id_;
}
void SnapshotTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SnapshotTableRequest::SnapshotTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stamp_columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}
SnapshotTableRequest::SnapshotTableRequest(const SnapshotTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stamp_columns_(from.stamp_columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  do_initial_snapshot_ = from.do_initial_snapshot_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}

void SnapshotTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&do_initial_snapshot_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(do_initial_snapshot_));
}

SnapshotTableRequest::~SnapshotTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnapshotTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void SnapshotTableRequest::ArenaDtor(void* object) {
  SnapshotTableRequest* _this = reinterpret_cast< SnapshotTableRequest* >(object);
  (void)_this;
}
void SnapshotTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapshotTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnapshotTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stamp_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  do_initial_snapshot_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool do_initial_snapshot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          do_initial_snapshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stamp_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stamp_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // bool do_initial_snapshot = 4;
  if (this->_internal_do_initial_snapshot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_do_initial_snapshot(), target);
  }

  // repeated string stamp_columns = 5;
  for (int i = 0, n = this->_internal_stamp_columns_size(); i < n; i++) {
    const auto& s = this->_internal_stamp_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SnapshotTableRequest.stamp_columns");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  return target;
}

size_t SnapshotTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stamp_columns = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stamp_columns_.size());
  for (int i = 0, n = stamp_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stamp_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  // bool do_initial_snapshot = 4;
  if (this->_internal_do_initial_snapshot() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnapshotTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotTableRequest::GetClassData() const { return &_class_data_; }

void SnapshotTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnapshotTableRequest *>(to)->MergeFrom(
      static_cast<const SnapshotTableRequest &>(from));
}


void SnapshotTableRequest::MergeFrom(const SnapshotTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stamp_columns_.MergeFrom(from.stamp_columns_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  if (from._internal_do_initial_snapshot() != 0) {
    _internal_set_do_initial_snapshot(from._internal_do_initial_snapshot());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotTableRequest::CopyFrom(const SnapshotTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotTableRequest::IsInitialized() const {
  return true;
}

void SnapshotTableRequest::InternalSwap(SnapshotTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stamp_columns_.InternalSwap(&other->stamp_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, do_initial_snapshot_)
      + sizeof(SnapshotTableRequest::do_initial_snapshot_)
      - PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[19]);
}

// ===================================================================

class CrossJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const CrossJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const CrossJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const CrossJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CrossJoinTablesRequest::_Internal::result_id(const CrossJoinTablesRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
CrossJoinTablesRequest::_Internal::left_id(const CrossJoinTablesRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
CrossJoinTablesRequest::_Internal::right_id(const CrossJoinTablesRequest* msg) {
  return *msg->right_id_;
}
void CrossJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
CrossJoinTablesRequest::CrossJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_to_match_(arena),
  columns_to_add_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
}
CrossJoinTablesRequest::CrossJoinTablesRequest(const CrossJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_match_(from.columns_to_match_),
      columns_to_add_(from.columns_to_add_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  reserve_bits_ = from.reserve_bits_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
}

void CrossJoinTablesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reserve_bits_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(reserve_bits_));
}

CrossJoinTablesRequest::~CrossJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CrossJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void CrossJoinTablesRequest::ArenaDtor(void* object) {
  CrossJoinTablesRequest* _this = reinterpret_cast< CrossJoinTablesRequest* >(object);
  (void)_this;
}
void CrossJoinTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrossJoinTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrossJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_match_.Clear();
  columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  reserve_bits_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossJoinTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_match"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_add"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 reserve_bits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reserve_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrossJoinTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  // int32 reserve_bits = 6;
  if (this->_internal_reserve_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_reserve_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  return target;
}

size_t CrossJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_match_.size());
  for (int i = 0, n = columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_add_.size());
  for (int i = 0, n = columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  // int32 reserve_bits = 6;
  if (this->_internal_reserve_bits() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reserve_bits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CrossJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossJoinTablesRequest::GetClassData() const { return &_class_data_; }

void CrossJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CrossJoinTablesRequest *>(to)->MergeFrom(
      static_cast<const CrossJoinTablesRequest &>(from));
}


void CrossJoinTablesRequest::MergeFrom(const CrossJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_match_.MergeFrom(from.columns_to_match_);
  columns_to_add_.MergeFrom(from.columns_to_add_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  if (from._internal_reserve_bits() != 0) {
    _internal_set_reserve_bits(from._internal_reserve_bits());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossJoinTablesRequest::CopyFrom(const CrossJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossJoinTablesRequest::IsInitialized() const {
  return true;
}

void CrossJoinTablesRequest::InternalSwap(CrossJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_to_match_.InternalSwap(&other->columns_to_match_);
  columns_to_add_.InternalSwap(&other->columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, reserve_bits_)
      + sizeof(CrossJoinTablesRequest::reserve_bits_)
      - PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossJoinTablesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[20]);
}

// ===================================================================

class NaturalJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const NaturalJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const NaturalJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const NaturalJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
NaturalJoinTablesRequest::_Internal::result_id(const NaturalJoinTablesRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
NaturalJoinTablesRequest::_Internal::left_id(const NaturalJoinTablesRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
NaturalJoinTablesRequest::_Internal::right_id(const NaturalJoinTablesRequest* msg) {
  return *msg->right_id_;
}
void NaturalJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
NaturalJoinTablesRequest::NaturalJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_to_match_(arena),
  columns_to_add_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
}
NaturalJoinTablesRequest::NaturalJoinTablesRequest(const NaturalJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_match_(from.columns_to_match_),
      columns_to_add_(from.columns_to_add_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
}

void NaturalJoinTablesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(right_id_));
}

NaturalJoinTablesRequest::~NaturalJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NaturalJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void NaturalJoinTablesRequest::ArenaDtor(void* object) {
  NaturalJoinTablesRequest* _this = reinterpret_cast< NaturalJoinTablesRequest* >(object);
  (void)_this;
}
void NaturalJoinTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NaturalJoinTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NaturalJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_match_.Clear();
  columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaturalJoinTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_match"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_add"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaturalJoinTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  return target;
}

size_t NaturalJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_match_.size());
  for (int i = 0, n = columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_add_.size());
  for (int i = 0, n = columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaturalJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NaturalJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaturalJoinTablesRequest::GetClassData() const { return &_class_data_; }

void NaturalJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NaturalJoinTablesRequest *>(to)->MergeFrom(
      static_cast<const NaturalJoinTablesRequest &>(from));
}


void NaturalJoinTablesRequest::MergeFrom(const NaturalJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_match_.MergeFrom(from.columns_to_match_);
  columns_to_add_.MergeFrom(from.columns_to_add_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaturalJoinTablesRequest::CopyFrom(const NaturalJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaturalJoinTablesRequest::IsInitialized() const {
  return true;
}

void NaturalJoinTablesRequest::InternalSwap(NaturalJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_to_match_.InternalSwap(&other->columns_to_match_);
  columns_to_add_.InternalSwap(&other->columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, right_id_)
      + sizeof(NaturalJoinTablesRequest::right_id_)
      - PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NaturalJoinTablesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[21]);
}

// ===================================================================

class ExactJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const ExactJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const ExactJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const ExactJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ExactJoinTablesRequest::_Internal::result_id(const ExactJoinTablesRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ExactJoinTablesRequest::_Internal::left_id(const ExactJoinTablesRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ExactJoinTablesRequest::_Internal::right_id(const ExactJoinTablesRequest* msg) {
  return *msg->right_id_;
}
void ExactJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
ExactJoinTablesRequest::ExactJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_to_match_(arena),
  columns_to_add_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
}
ExactJoinTablesRequest::ExactJoinTablesRequest(const ExactJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_match_(from.columns_to_match_),
      columns_to_add_(from.columns_to_add_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
}

void ExactJoinTablesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(right_id_));
}

ExactJoinTablesRequest::~ExactJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExactJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void ExactJoinTablesRequest::ArenaDtor(void* object) {
  ExactJoinTablesRequest* _this = reinterpret_cast< ExactJoinTablesRequest* >(object);
  (void)_this;
}
void ExactJoinTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExactJoinTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExactJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_match_.Clear();
  columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExactJoinTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_match"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_add"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExactJoinTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  return target;
}

size_t ExactJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_match_.size());
  for (int i = 0, n = columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_add_.size());
  for (int i = 0, n = columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExactJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExactJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExactJoinTablesRequest::GetClassData() const { return &_class_data_; }

void ExactJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExactJoinTablesRequest *>(to)->MergeFrom(
      static_cast<const ExactJoinTablesRequest &>(from));
}


void ExactJoinTablesRequest::MergeFrom(const ExactJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_match_.MergeFrom(from.columns_to_match_);
  columns_to_add_.MergeFrom(from.columns_to_add_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExactJoinTablesRequest::CopyFrom(const ExactJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactJoinTablesRequest::IsInitialized() const {
  return true;
}

void ExactJoinTablesRequest::InternalSwap(ExactJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_to_match_.InternalSwap(&other->columns_to_match_);
  columns_to_add_.InternalSwap(&other->columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, right_id_)
      + sizeof(ExactJoinTablesRequest::right_id_)
      - PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExactJoinTablesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[22]);
}

// ===================================================================

class LeftJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const LeftJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const LeftJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const LeftJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
LeftJoinTablesRequest::_Internal::result_id(const LeftJoinTablesRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
LeftJoinTablesRequest::_Internal::left_id(const LeftJoinTablesRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
LeftJoinTablesRequest::_Internal::right_id(const LeftJoinTablesRequest* msg) {
  return *msg->right_id_;
}
void LeftJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
LeftJoinTablesRequest::LeftJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_to_match_(arena),
  columns_to_add_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
}
LeftJoinTablesRequest::LeftJoinTablesRequest(const LeftJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_match_(from.columns_to_match_),
      columns_to_add_(from.columns_to_add_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
}

void LeftJoinTablesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(right_id_));
}

LeftJoinTablesRequest::~LeftJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeftJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void LeftJoinTablesRequest::ArenaDtor(void* object) {
  LeftJoinTablesRequest* _this = reinterpret_cast< LeftJoinTablesRequest* >(object);
  (void)_this;
}
void LeftJoinTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeftJoinTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeftJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_match_.Clear();
  columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeftJoinTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_match"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_add"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeftJoinTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  return target;
}

size_t LeftJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_match_.size());
  for (int i = 0, n = columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_add_.size());
  for (int i = 0, n = columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeftJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeftJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeftJoinTablesRequest::GetClassData() const { return &_class_data_; }

void LeftJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeftJoinTablesRequest *>(to)->MergeFrom(
      static_cast<const LeftJoinTablesRequest &>(from));
}


void LeftJoinTablesRequest::MergeFrom(const LeftJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_match_.MergeFrom(from.columns_to_match_);
  columns_to_add_.MergeFrom(from.columns_to_add_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeftJoinTablesRequest::CopyFrom(const LeftJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeftJoinTablesRequest::IsInitialized() const {
  return true;
}

void LeftJoinTablesRequest::InternalSwap(LeftJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_to_match_.InternalSwap(&other->columns_to_match_);
  columns_to_add_.InternalSwap(&other->columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, right_id_)
      + sizeof(LeftJoinTablesRequest::right_id_)
      - PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeftJoinTablesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[23]);
}

// ===================================================================

class AsOfJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const AsOfJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const AsOfJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const AsOfJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
AsOfJoinTablesRequest::_Internal::result_id(const AsOfJoinTablesRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AsOfJoinTablesRequest::_Internal::left_id(const AsOfJoinTablesRequest* msg) {
  return *msg->left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AsOfJoinTablesRequest::_Internal::right_id(const AsOfJoinTablesRequest* msg) {
  return *msg->right_id_;
}
void AsOfJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
AsOfJoinTablesRequest::AsOfJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_to_match_(arena),
  columns_to_add_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
}
AsOfJoinTablesRequest::AsOfJoinTablesRequest(const AsOfJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_to_match_(from.columns_to_match_),
      columns_to_add_(from.columns_to_add_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_left_id()) {
    left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.left_id_);
  } else {
    left_id_ = nullptr;
  }
  if (from._internal_has_right_id()) {
    right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.right_id_);
  } else {
    right_id_ = nullptr;
  }
  as_of_match_rule_ = from.as_of_match_rule_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
}

void AsOfJoinTablesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&as_of_match_rule_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(as_of_match_rule_));
}

AsOfJoinTablesRequest::~AsOfJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AsOfJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete left_id_;
  if (this != internal_default_instance()) delete right_id_;
}

void AsOfJoinTablesRequest::ArenaDtor(void* object) {
  AsOfJoinTablesRequest* _this = reinterpret_cast< AsOfJoinTablesRequest* >(object);
  (void)_this;
}
void AsOfJoinTablesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsOfJoinTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AsOfJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_to_match_.Clear();
  columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_id_ != nullptr) {
    delete left_id_;
  }
  left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_id_ != nullptr) {
    delete right_id_;
  }
  right_id_ = nullptr;
  as_of_match_rule_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsOfJoinTablesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_match"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_add"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_as_of_match_rule(static_cast<::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest_MatchRule>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsOfJoinTablesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_id(this), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
  if (this->_internal_as_of_match_rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_as_of_match_rule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  return target;
}

size_t AsOfJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_match_.size());
  for (int i = 0, n = columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_to_add_.size());
  for (int i = 0, n = columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_id_);
  }

  // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
  if (this->_internal_as_of_match_rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_as_of_match_rule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AsOfJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AsOfJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AsOfJoinTablesRequest::GetClassData() const { return &_class_data_; }

void AsOfJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AsOfJoinTablesRequest *>(to)->MergeFrom(
      static_cast<const AsOfJoinTablesRequest &>(from));
}


void AsOfJoinTablesRequest::MergeFrom(const AsOfJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_to_match_.MergeFrom(from.columns_to_match_);
  columns_to_add_.MergeFrom(from.columns_to_add_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_right_id());
  }
  if (from._internal_as_of_match_rule() != 0) {
    _internal_set_as_of_match_rule(from._internal_as_of_match_rule());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AsOfJoinTablesRequest::CopyFrom(const AsOfJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsOfJoinTablesRequest::IsInitialized() const {
  return true;
}

void AsOfJoinTablesRequest::InternalSwap(AsOfJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_to_match_.InternalSwap(&other->columns_to_match_);
  columns_to_add_.InternalSwap(&other->columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, as_of_match_rule_)
      + sizeof(AsOfJoinTablesRequest::as_of_match_rule_)
      - PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsOfJoinTablesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[24]);
}

// ===================================================================

class ComboAggregateRequest_Aggregate::_Internal {
 public:
};

ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  match_pairs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}
ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(const ComboAggregateRequest_Aggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_pairs_(from.match_pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&type_)) + sizeof(percentile_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}

void ComboAggregateRequest_Aggregate::SharedCtor() {
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&type_)) + sizeof(percentile_));
}

ComboAggregateRequest_Aggregate::~ComboAggregateRequest_Aggregate() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ComboAggregateRequest_Aggregate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComboAggregateRequest_Aggregate::ArenaDtor(void* object) {
  ComboAggregateRequest_Aggregate* _this = reinterpret_cast< ComboAggregateRequest_Aggregate* >(object);
  (void)_this;
}
void ComboAggregateRequest_Aggregate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComboAggregateRequest_Aggregate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComboAggregateRequest_Aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_pairs_.Clear();
  column_name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentile_) -
      reinterpret_cast<char*>(&type_)) + sizeof(percentile_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboAggregateRequest_Aggregate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string match_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_pairs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string column_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double percentile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool avg_median = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avg_median_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboAggregateRequest_Aggregate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string match_pairs = 2;
  for (int i = 0, n = this->_internal_match_pairs_size(); i < n; i++) {
    const auto& s = this->_internal_match_pairs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs");
    target = stream->WriteString(2, s, target);
  }

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_column_name(), target);
  }

  // double percentile = 4;
  if (!(this->_internal_percentile() <= 0 && this->_internal_percentile() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_percentile(), target);
  }

  // bool avg_median = 5;
  if (this->_internal_avg_median() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_avg_median(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  return target;
}

size_t ComboAggregateRequest_Aggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_pairs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(match_pairs_.size());
  for (int i = 0, n = match_pairs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      match_pairs_.Get(i));
  }

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool avg_median = 5;
  if (this->_internal_avg_median() != 0) {
    total_size += 1 + 1;
  }

  // double percentile = 4;
  if (!(this->_internal_percentile() <= 0 && this->_internal_percentile() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComboAggregateRequest_Aggregate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComboAggregateRequest_Aggregate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComboAggregateRequest_Aggregate::GetClassData() const { return &_class_data_; }

void ComboAggregateRequest_Aggregate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComboAggregateRequest_Aggregate *>(to)->MergeFrom(
      static_cast<const ComboAggregateRequest_Aggregate &>(from));
}


void ComboAggregateRequest_Aggregate::MergeFrom(const ComboAggregateRequest_Aggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_pairs_.MergeFrom(from.match_pairs_);
  if (!from._internal_column_name().empty()) {
    _internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_avg_median() != 0) {
    _internal_set_avg_median(from._internal_avg_median());
  }
  if (!(from._internal_percentile() <= 0 && from._internal_percentile() >= 0)) {
    _internal_set_percentile(from._internal_percentile());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComboAggregateRequest_Aggregate::CopyFrom(const ComboAggregateRequest_Aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboAggregateRequest_Aggregate::IsInitialized() const {
  return true;
}

void ComboAggregateRequest_Aggregate::InternalSwap(ComboAggregateRequest_Aggregate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  match_pairs_.InternalSwap(&other->match_pairs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &column_name_, lhs_arena,
      &other->column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, percentile_)
      + sizeof(ComboAggregateRequest_Aggregate::percentile_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboAggregateRequest_Aggregate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[25]);
}

// ===================================================================

class ComboAggregateRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const ComboAggregateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const ComboAggregateRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ComboAggregateRequest::_Internal::result_id(const ComboAggregateRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ComboAggregateRequest::_Internal::source_id(const ComboAggregateRequest* msg) {
  return *msg->source_id_;
}
void ComboAggregateRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
ComboAggregateRequest::ComboAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  aggregates_(arena),
  group_by_columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}
ComboAggregateRequest::ComboAggregateRequest(const ComboAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aggregates_(from.aggregates_),
      group_by_columns_(from.group_by_columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  force_combo_ = from.force_combo_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}

void ComboAggregateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_combo_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(force_combo_));
}

ComboAggregateRequest::~ComboAggregateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ComboAggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void ComboAggregateRequest::ArenaDtor(void* object) {
  ComboAggregateRequest* _this = reinterpret_cast< ComboAggregateRequest* >(object);
  (void)_this;
}
void ComboAggregateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComboAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComboAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggregates_.Clear();
  group_by_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  force_combo_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboAggregateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool force_combo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          force_combo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboAggregateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aggregates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_aggregates(i), target, stream);
  }

  // repeated string group_by_columns = 4;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns");
    target = stream->WriteString(4, s, target);
  }

  // bool force_combo = 5;
  if (this->_internal_force_combo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_force_combo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  return target;
}

size_t ComboAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
  total_size += 1UL * this->_internal_aggregates_size();
  for (const auto& msg : this->aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string group_by_columns = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_columns_.size());
  for (int i = 0, n = group_by_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // bool force_combo = 5;
  if (this->_internal_force_combo() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComboAggregateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComboAggregateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComboAggregateRequest::GetClassData() const { return &_class_data_; }

void ComboAggregateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComboAggregateRequest *>(to)->MergeFrom(
      static_cast<const ComboAggregateRequest &>(from));
}


void ComboAggregateRequest::MergeFrom(const ComboAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aggregates_.MergeFrom(from.aggregates_);
  group_by_columns_.MergeFrom(from.group_by_columns_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_force_combo() != 0) {
    _internal_set_force_combo(from._internal_force_combo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComboAggregateRequest::CopyFrom(const ComboAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboAggregateRequest::IsInitialized() const {
  return true;
}

void ComboAggregateRequest::InternalSwap(ComboAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  aggregates_.InternalSwap(&other->aggregates_);
  group_by_columns_.InternalSwap(&other->group_by_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, force_combo_)
      + sizeof(ComboAggregateRequest::force_combo_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboAggregateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[26]);
}

// ===================================================================

class SortDescriptor::_Internal {
 public:
};

SortDescriptor::SortDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}
SortDescriptor::SortDescriptor(const SortDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_absolute_, &from.is_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&is_absolute_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}

void SortDescriptor::SharedCtor() {
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_absolute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&is_absolute_)) + sizeof(direction_));
}

SortDescriptor::~SortDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SortDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SortDescriptor::ArenaDtor(void* object) {
  SortDescriptor* _this = reinterpret_cast< SortDescriptor* >(object);
  (void)_this;
}
void SortDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_name_.ClearToEmpty();
  ::memset(&is_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&is_absolute_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SortDescriptor.column_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_absolute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SortDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  // bool is_absolute = 2;
  if (this->_internal_is_absolute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_absolute(), target);
  }

  // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortDescriptor)
  return target;
}

size_t SortDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // bool is_absolute = 2;
  if (this->_internal_is_absolute() != 0) {
    total_size += 1 + 1;
  }

  // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SortDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortDescriptor::GetClassData() const { return &_class_data_; }

void SortDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SortDescriptor *>(to)->MergeFrom(
      static_cast<const SortDescriptor &>(from));
}


void SortDescriptor::MergeFrom(const SortDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_is_absolute() != 0) {
    _internal_set_is_absolute(from._internal_is_absolute());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortDescriptor::CopyFrom(const SortDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortDescriptor::IsInitialized() const {
  return true;
}

void SortDescriptor::InternalSwap(SortDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &column_name_, lhs_arena,
      &other->column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortDescriptor, direction_)
      + sizeof(SortDescriptor::direction_)
      - PROTOBUF_FIELD_OFFSET(SortDescriptor, is_absolute_)>(
          reinterpret_cast<char*>(&is_absolute_),
          reinterpret_cast<char*>(&other->is_absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[27]);
}

// ===================================================================

class SortTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SortTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SortTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SortTableRequest::_Internal::result_id(const SortTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SortTableRequest::_Internal::source_id(const SortTableRequest* msg) {
  return *msg->source_id_;
}
void SortTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
SortTableRequest::SortTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sorts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}
SortTableRequest::SortTableRequest(const SortTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}

void SortTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

SortTableRequest::~SortTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SortTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void SortTableRequest::ArenaDtor(void* object) {
  SortTableRequest* _this = reinterpret_cast< SortTableRequest* >(object);
  (void)_this;
}
void SortTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorts_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortTableRequest)
  return target;
}

size_t SortTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SortTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortTableRequest::GetClassData() const { return &_class_data_; }

void SortTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SortTableRequest *>(to)->MergeFrom(
      static_cast<const SortTableRequest &>(from));
}


void SortTableRequest::MergeFrom(const SortTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sorts_.MergeFrom(from.sorts_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortTableRequest::CopyFrom(const SortTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortTableRequest::IsInitialized() const {
  return true;
}

void SortTableRequest::InternalSwap(SortTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortTableRequest, source_id_)
      + sizeof(SortTableRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(SortTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[28]);
}

// ===================================================================

class FilterTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FilterTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FilterTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
FilterTableRequest::_Internal::result_id(const FilterTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
FilterTableRequest::_Internal::source_id(const FilterTableRequest* msg) {
  return *msg->source_id_;
}
void FilterTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
FilterTableRequest::FilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}
FilterTableRequest::FilterTableRequest(const FilterTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}

void FilterTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

FilterTableRequest::~FilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilterTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void FilterTableRequest::ArenaDtor(void* object) {
  FilterTableRequest* _this = reinterpret_cast< FilterTableRequest* >(object);
  (void)_this;
}
void FilterTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  return target;
}

size_t FilterTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilterTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterTableRequest::GetClassData() const { return &_class_data_; }

void FilterTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilterTableRequest *>(to)->MergeFrom(
      static_cast<const FilterTableRequest &>(from));
}


void FilterTableRequest::MergeFrom(const FilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterTableRequest::CopyFrom(const FilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterTableRequest::IsInitialized() const {
  return true;
}

void FilterTableRequest::InternalSwap(FilterTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterTableRequest, source_id_)
      + sizeof(FilterTableRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(FilterTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[29]);
}

// ===================================================================

class Reference::_Internal {
 public:
};

Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Reference)
}

void Reference::SharedCtor() {
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Reference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reference::ArenaDtor(void* object) {
  Reference* _this = reinterpret_cast< Reference* >(object);
  (void)_this;
}
void Reference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Reference.column_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Reference.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Reference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Reference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reference::GetClassData() const { return &_class_data_; }

void Reference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Reference *>(to)->MergeFrom(
      static_cast<const Reference &>(from));
}


void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _internal_set_column_name(from._internal_column_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &column_name_, lhs_arena,
      &other->column_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[30]);
}

// ===================================================================

class Literal::_Internal {
 public:
};

Literal::Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Literal)
}
Literal::Literal(const Literal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kNanoTimeValue: {
      _internal_set_nano_time_value(from._internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Literal)
}

void Literal::SharedCtor() {
clear_has_value();
}

Literal::~Literal() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Literal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Literal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Literal::ArenaDtor(void* object) {
  Literal* _this = reinterpret_cast< Literal* >(object);
  (void)_this;
}
void Literal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Literal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Literal::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Literal)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kNanoTimeValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Literal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Literal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Literal.string_value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 long_value = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 nano_time_value = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_nano_time_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Literal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Literal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Literal.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // double double_value = 2;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // bool bool_value = 3;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  // sint64 long_value = 4 [jstype = JS_STRING];
  if (_internal_has_long_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(4, this->_internal_long_value(), target);
  }

  // sint64 nano_time_value = 5 [jstype = JS_STRING];
  if (_internal_has_nano_time_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(5, this->_internal_nano_time_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Literal)
  return target;
}

size_t Literal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Literal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // sint64 long_value = 4 [jstype = JS_STRING];
    case kLongValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_long_value());
      break;
    }
    // sint64 nano_time_value = 5 [jstype = JS_STRING];
    case kNanoTimeValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Literal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Literal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Literal::GetClassData() const { return &_class_data_; }

void Literal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Literal *>(to)->MergeFrom(
      static_cast<const Literal &>(from));
}


void Literal::MergeFrom(const Literal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kLongValue: {
      _internal_set_long_value(from._internal_long_value());
      break;
    }
    case kNanoTimeValue: {
      _internal_set_nano_time_value(from._internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Literal::CopyFrom(const Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Literal::IsInitialized() const {
  return true;
}

void Literal::InternalSwap(Literal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Literal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[31]);
}

// ===================================================================

class Value::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const Value* msg);
  static const ::io::deephaven::proto::backplane::grpc::Literal& literal(const Value* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
Value::_Internal::reference(const Value* msg) {
  return *msg->data_.reference_;
}
const ::io::deephaven::proto::backplane::grpc::Literal&
Value::_Internal::literal(const Value* msg) {
  return *msg->data_.literal_;
}
void Value::set_allocated_reference(::io::deephaven::proto::backplane::grpc::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    data_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Value.reference)
}
void Value::set_allocated_literal(::io::deephaven::proto::backplane::grpc::Literal* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::Literal>::GetOwningArena(literal);
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    set_has_literal();
    data_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Value.literal)
}
Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kReference: {
      _internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case kLiteral: {
      _internal_mutable_literal()->::io::deephaven::proto::backplane::grpc::Literal::MergeFrom(from._internal_literal());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Value)
}

void Value::SharedCtor() {
clear_has_data();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Value)
  switch (data_case()) {
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.reference_;
      }
      break;
    }
    case kLiteral: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.literal_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_literal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
  if (_internal_has_literal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::literal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.reference_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
    case kLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.literal_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }

void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Value *>(to)->MergeFrom(
      static_cast<const Value &>(from));
}


void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Value)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kReference: {
      _internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case kLiteral: {
      _internal_mutable_literal()->::io::deephaven::proto::backplane::grpc::Literal::MergeFrom(from._internal_literal());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[32]);
}

// ===================================================================

class Condition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::AndCondition& and_(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::OrCondition& or_(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::NotCondition& not_(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::CompareCondition& compare(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::InCondition& in(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::InvokeCondition& invoke(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::IsNullCondition& is_null(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::MatchesCondition& matches(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::ContainsCondition& contains(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::SearchCondition& search(const Condition* msg);
};

const ::io::deephaven::proto::backplane::grpc::AndCondition&
Condition::_Internal::and_(const Condition* msg) {
  return *msg->data_.and__;
}
const ::io::deephaven::proto::backplane::grpc::OrCondition&
Condition::_Internal::or_(const Condition* msg) {
  return *msg->data_.or__;
}
const ::io::deephaven::proto::backplane::grpc::NotCondition&
Condition::_Internal::not_(const Condition* msg) {
  return *msg->data_.not__;
}
const ::io::deephaven::proto::backplane::grpc::CompareCondition&
Condition::_Internal::compare(const Condition* msg) {
  return *msg->data_.compare_;
}
const ::io::deephaven::proto::backplane::grpc::InCondition&
Condition::_Internal::in(const Condition* msg) {
  return *msg->data_.in_;
}
const ::io::deephaven::proto::backplane::grpc::InvokeCondition&
Condition::_Internal::invoke(const Condition* msg) {
  return *msg->data_.invoke_;
}
const ::io::deephaven::proto::backplane::grpc::IsNullCondition&
Condition::_Internal::is_null(const Condition* msg) {
  return *msg->data_.is_null_;
}
const ::io::deephaven::proto::backplane::grpc::MatchesCondition&
Condition::_Internal::matches(const Condition* msg) {
  return *msg->data_.matches_;
}
const ::io::deephaven::proto::backplane::grpc::ContainsCondition&
Condition::_Internal::contains(const Condition* msg) {
  return *msg->data_.contains_;
}
const ::io::deephaven::proto::backplane::grpc::SearchCondition&
Condition::_Internal::search(const Condition* msg) {
  return *msg->data_.search_;
}
void Condition::set_allocated_and_(::io::deephaven::proto::backplane::grpc::AndCondition* and_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (and_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::AndCondition>::GetOwningArena(and_);
    if (message_arena != submessage_arena) {
      and_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, and_, submessage_arena);
    }
    set_has_and_();
    data_.and__ = and_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.and)
}
void Condition::set_allocated_or_(::io::deephaven::proto::backplane::grpc::OrCondition* or_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (or_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::OrCondition>::GetOwningArena(or_);
    if (message_arena != submessage_arena) {
      or_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, or_, submessage_arena);
    }
    set_has_or_();
    data_.or__ = or_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.or)
}
void Condition::set_allocated_not_(::io::deephaven::proto::backplane::grpc::NotCondition* not_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (not_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::NotCondition>::GetOwningArena(not_);
    if (message_arena != submessage_arena) {
      not_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_, submessage_arena);
    }
    set_has_not_();
    data_.not__ = not_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.not)
}
void Condition::set_allocated_compare(::io::deephaven::proto::backplane::grpc::CompareCondition* compare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (compare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::CompareCondition>::GetOwningArena(compare);
    if (message_arena != submessage_arena) {
      compare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compare, submessage_arena);
    }
    set_has_compare();
    data_.compare_ = compare;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.compare)
}
void Condition::set_allocated_in(::io::deephaven::proto::backplane::grpc::InCondition* in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::InCondition>::GetOwningArena(in);
    if (message_arena != submessage_arena) {
      in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in, submessage_arena);
    }
    set_has_in();
    data_.in_ = in;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.in)
}
void Condition::set_allocated_invoke(::io::deephaven::proto::backplane::grpc::InvokeCondition* invoke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (invoke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::InvokeCondition>::GetOwningArena(invoke);
    if (message_arena != submessage_arena) {
      invoke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoke, submessage_arena);
    }
    set_has_invoke();
    data_.invoke_ = invoke;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.invoke)
}
void Condition::set_allocated_is_null(::io::deephaven::proto::backplane::grpc::IsNullCondition* is_null) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (is_null) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::IsNullCondition>::GetOwningArena(is_null);
    if (message_arena != submessage_arena) {
      is_null = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_null, submessage_arena);
    }
    set_has_is_null();
    data_.is_null_ = is_null;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.is_null)
}
void Condition::set_allocated_matches(::io::deephaven::proto::backplane::grpc::MatchesCondition* matches) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (matches) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::MatchesCondition>::GetOwningArena(matches);
    if (message_arena != submessage_arena) {
      matches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matches, submessage_arena);
    }
    set_has_matches();
    data_.matches_ = matches;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.matches)
}
void Condition::set_allocated_contains(::io::deephaven::proto::backplane::grpc::ContainsCondition* contains) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (contains) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::ContainsCondition>::GetOwningArena(contains);
    if (message_arena != submessage_arena) {
      contains = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contains, submessage_arena);
    }
    set_has_contains();
    data_.contains_ = contains;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.contains)
}
void Condition::set_allocated_search(::io::deephaven::proto::backplane::grpc::SearchCondition* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SearchCondition>::GetOwningArena(search);
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    set_has_search();
    data_.search_ = search;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.search)
}
Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kAnd: {
      _internal_mutable_and_()->::io::deephaven::proto::backplane::grpc::AndCondition::MergeFrom(from._internal_and_());
      break;
    }
    case kOr: {
      _internal_mutable_or_()->::io::deephaven::proto::backplane::grpc::OrCondition::MergeFrom(from._internal_or_());
      break;
    }
    case kNot: {
      _internal_mutable_not_()->::io::deephaven::proto::backplane::grpc::NotCondition::MergeFrom(from._internal_not_());
      break;
    }
    case kCompare: {
      _internal_mutable_compare()->::io::deephaven::proto::backplane::grpc::CompareCondition::MergeFrom(from._internal_compare());
      break;
    }
    case kIn: {
      _internal_mutable_in()->::io::deephaven::proto::backplane::grpc::InCondition::MergeFrom(from._internal_in());
      break;
    }
    case kInvoke: {
      _internal_mutable_invoke()->::io::deephaven::proto::backplane::grpc::InvokeCondition::MergeFrom(from._internal_invoke());
      break;
    }
    case kIsNull: {
      _internal_mutable_is_null()->::io::deephaven::proto::backplane::grpc::IsNullCondition::MergeFrom(from._internal_is_null());
      break;
    }
    case kMatches: {
      _internal_mutable_matches()->::io::deephaven::proto::backplane::grpc::MatchesCondition::MergeFrom(from._internal_matches());
      break;
    }
    case kContains: {
      _internal_mutable_contains()->::io::deephaven::proto::backplane::grpc::ContainsCondition::MergeFrom(from._internal_contains());
      break;
    }
    case kSearch: {
      _internal_mutable_search()->::io::deephaven::proto::backplane::grpc::SearchCondition::MergeFrom(from._internal_search());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Condition)
}

void Condition::SharedCtor() {
clear_has_data();
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Condition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Condition::ArenaDtor(void* object) {
  Condition* _this = reinterpret_cast< Condition* >(object);
  (void)_this;
}
void Condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Condition::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Condition)
  switch (data_case()) {
    case kAnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.and__;
      }
      break;
    }
    case kOr: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.or__;
      }
      break;
    }
    case kNot: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.not__;
      }
      break;
    }
    case kCompare: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.compare_;
      }
      break;
    }
    case kIn: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.in_;
      }
      break;
    }
    case kInvoke: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.invoke_;
      }
      break;
    }
    case kIsNull: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.is_null_;
      }
      break;
    }
    case kMatches: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.matches_;
      }
      break;
    }
    case kContains: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.contains_;
      }
      break;
    }
    case kSearch: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.search_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_and_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_or_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_in(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_null(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_matches(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_contains(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
  if (_internal_has_and_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::and_(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
  if (_internal_has_or_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::or_(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
  if (_internal_has_not_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::not_(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
  if (_internal_has_compare()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::compare(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
  if (_internal_has_in()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::in(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
  if (_internal_has_invoke()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::invoke(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
  if (_internal_has_is_null()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::is_null(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
  if (_internal_has_matches()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::matches(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
  if (_internal_has_contains()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::contains(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
  if (_internal_has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
    case kAnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.and__);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
    case kOr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.or__);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
    case kNot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.not__);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
    case kCompare: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.compare_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
    case kIn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.in_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
    case kInvoke: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.invoke_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
    case kIsNull: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.is_null_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
    case kMatches: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.matches_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
    case kContains: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.contains_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
    case kSearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.search_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Condition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Condition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Condition::GetClassData() const { return &_class_data_; }

void Condition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Condition *>(to)->MergeFrom(
      static_cast<const Condition &>(from));
}


void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kAnd: {
      _internal_mutable_and_()->::io::deephaven::proto::backplane::grpc::AndCondition::MergeFrom(from._internal_and_());
      break;
    }
    case kOr: {
      _internal_mutable_or_()->::io::deephaven::proto::backplane::grpc::OrCondition::MergeFrom(from._internal_or_());
      break;
    }
    case kNot: {
      _internal_mutable_not_()->::io::deephaven::proto::backplane::grpc::NotCondition::MergeFrom(from._internal_not_());
      break;
    }
    case kCompare: {
      _internal_mutable_compare()->::io::deephaven::proto::backplane::grpc::CompareCondition::MergeFrom(from._internal_compare());
      break;
    }
    case kIn: {
      _internal_mutable_in()->::io::deephaven::proto::backplane::grpc::InCondition::MergeFrom(from._internal_in());
      break;
    }
    case kInvoke: {
      _internal_mutable_invoke()->::io::deephaven::proto::backplane::grpc::InvokeCondition::MergeFrom(from._internal_invoke());
      break;
    }
    case kIsNull: {
      _internal_mutable_is_null()->::io::deephaven::proto::backplane::grpc::IsNullCondition::MergeFrom(from._internal_is_null());
      break;
    }
    case kMatches: {
      _internal_mutable_matches()->::io::deephaven::proto::backplane::grpc::MatchesCondition::MergeFrom(from._internal_matches());
      break;
    }
    case kContains: {
      _internal_mutable_contains()->::io::deephaven::proto::backplane::grpc::ContainsCondition::MergeFrom(from._internal_contains());
      break;
    }
    case kSearch: {
      _internal_mutable_search()->::io::deephaven::proto::backplane::grpc::SearchCondition::MergeFrom(from._internal_search());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[33]);
}

// ===================================================================

class AndCondition::_Internal {
 public:
};

AndCondition::AndCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AndCondition)
}
AndCondition::AndCondition(const AndCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AndCondition)
}

void AndCondition::SharedCtor() {
}

AndCondition::~AndCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AndCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AndCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AndCondition::ArenaDtor(void* object) {
  AndCondition* _this = reinterpret_cast< AndCondition* >(object);
  (void)_this;
}
void AndCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AndCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AndCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AndCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AndCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AndCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AndCondition)
  return target;
}

size_t AndCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AndCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AndCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndCondition::GetClassData() const { return &_class_data_; }

void AndCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AndCondition *>(to)->MergeFrom(
      static_cast<const AndCondition &>(from));
}


void AndCondition::MergeFrom(const AndCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AndCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndCondition::CopyFrom(const AndCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AndCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndCondition::IsInitialized() const {
  return true;
}

void AndCondition::InternalSwap(AndCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[34]);
}

// ===================================================================

class OrCondition::_Internal {
 public:
};

OrCondition::OrCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.OrCondition)
}
OrCondition::OrCondition(const OrCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.OrCondition)
}

void OrCondition::SharedCtor() {
}

OrCondition::~OrCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.OrCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrCondition::ArenaDtor(void* object) {
  OrCondition* _this = reinterpret_cast< OrCondition* >(object);
  (void)_this;
}
void OrCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.OrCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.OrCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.OrCondition)
  return target;
}

size_t OrCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.OrCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrCondition::GetClassData() const { return &_class_data_; }

void OrCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrCondition *>(to)->MergeFrom(
      static_cast<const OrCondition &>(from));
}


void OrCondition::MergeFrom(const OrCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.OrCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrCondition::CopyFrom(const OrCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.OrCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrCondition::IsInitialized() const {
  return true;
}

void OrCondition::InternalSwap(OrCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[35]);
}

// ===================================================================

class NotCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Condition& filter(const NotCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Condition&
NotCondition::_Internal::filter(const NotCondition* msg) {
  return *msg->filter_;
}
NotCondition::NotCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.NotCondition)
}
NotCondition::NotCondition(const NotCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::io::deephaven::proto::backplane::grpc::Condition(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.NotCondition)
}

void NotCondition::SharedCtor() {
filter_ = nullptr;
}

NotCondition::~NotCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.NotCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void NotCondition::ArenaDtor(void* object) {
  NotCondition* _this = reinterpret_cast< NotCondition* >(object);
  (void)_this;
}
void NotCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.NotCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.NotCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.NotCondition)
  return target;
}

size_t NotCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.NotCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotCondition::GetClassData() const { return &_class_data_; }

void NotCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotCondition *>(to)->MergeFrom(
      static_cast<const NotCondition &>(from));
}


void NotCondition::MergeFrom(const NotCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.NotCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::Condition::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotCondition::CopyFrom(const NotCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.NotCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotCondition::IsInitialized() const {
  return true;
}

void NotCondition::InternalSwap(NotCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[36]);
}

// ===================================================================

class CompareCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Value& lhs(const CompareCondition* msg);
  static const ::io::deephaven::proto::backplane::grpc::Value& rhs(const CompareCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Value&
CompareCondition::_Internal::lhs(const CompareCondition* msg) {
  return *msg->lhs_;
}
const ::io::deephaven::proto::backplane::grpc::Value&
CompareCondition::_Internal::rhs(const CompareCondition* msg) {
  return *msg->rhs_;
}
CompareCondition::CompareCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CompareCondition)
}
CompareCondition::CompareCondition(const CompareCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lhs()) {
    lhs_ = new ::io::deephaven::proto::backplane::grpc::Value(*from.lhs_);
  } else {
    lhs_ = nullptr;
  }
  if (from._internal_has_rhs()) {
    rhs_ = new ::io::deephaven::proto::backplane::grpc::Value(*from.rhs_);
  } else {
    rhs_ = nullptr;
  }
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&case_sensitivity_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(case_sensitivity_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CompareCondition)
}

void CompareCondition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lhs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&case_sensitivity_) -
    reinterpret_cast<char*>(&lhs_)) + sizeof(case_sensitivity_));
}

CompareCondition::~CompareCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CompareCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompareCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lhs_;
  if (this != internal_default_instance()) delete rhs_;
}

void CompareCondition::ArenaDtor(void* object) {
  CompareCondition* _this = reinterpret_cast< CompareCondition* >(object);
  (void)_this;
}
void CompareCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompareCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompareCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lhs_ != nullptr) {
    delete lhs_;
  }
  lhs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rhs_ != nullptr) {
    delete rhs_;
  }
  rhs_ = nullptr;
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case_sensitivity_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(case_sensitivity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompareCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::io::deephaven::proto::backplane::grpc::CompareCondition_CompareOperation>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lhs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rhs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompareCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
  if (this->_internal_has_lhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lhs(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
  if (this->_internal_has_rhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rhs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CompareCondition)
  return target;
}

size_t CompareCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
  if (this->_internal_has_lhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lhs_);
  }

  // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
  if (this->_internal_has_rhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rhs_);
  }

  // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompareCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompareCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompareCondition::GetClassData() const { return &_class_data_; }

void CompareCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompareCondition *>(to)->MergeFrom(
      static_cast<const CompareCondition &>(from));
}


void CompareCondition::MergeFrom(const CompareCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lhs()) {
    _internal_mutable_lhs()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(from._internal_lhs());
  }
  if (from._internal_has_rhs()) {
    _internal_mutable_rhs()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(from._internal_rhs());
  }
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from._internal_case_sensitivity() != 0) {
    _internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompareCondition::CopyFrom(const CompareCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareCondition::IsInitialized() const {
  return true;
}

void CompareCondition::InternalSwap(CompareCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompareCondition, case_sensitivity_)
      + sizeof(CompareCondition::case_sensitivity_)
      - PROTOBUF_FIELD_OFFSET(CompareCondition, lhs_)>(
          reinterpret_cast<char*>(&lhs_),
          reinterpret_cast<char*>(&other->lhs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[37]);
}

// ===================================================================

class InCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Value& target(const InCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Value&
InCondition::_Internal::target(const InCondition* msg) {
  return *msg->target_;
}
InCondition::InCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.InCondition)
}
InCondition::InCondition(const InCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::io::deephaven::proto::backplane::grpc::Value(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&case_sensitivity_, &from.case_sensitivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&case_sensitivity_)) + sizeof(match_type_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.InCondition)
}

void InCondition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&target_)) + sizeof(match_type_));
}

InCondition::~InCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.InCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_;
}

void InCondition::ArenaDtor(void* object) {
  InCondition* _this = reinterpret_cast< InCondition* >(object);
  (void)_this;
}
void InCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.InCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  ::memset(&case_sensitivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&case_sensitivity_)) + sizeof(match_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Value target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::io::deephaven::proto::backplane::grpc::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.InCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Value target = 1;
  if (this->_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_candidates(i), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.InCondition)
  return target;
}

size_t InCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.InCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Value target = 1;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InCondition::GetClassData() const { return &_class_data_; }

void InCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InCondition *>(to)->MergeFrom(
      static_cast<const InCondition &>(from));
}


void InCondition::MergeFrom(const InCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.InCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  if (from._internal_has_target()) {
    _internal_mutable_target()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(from._internal_target());
  }
  if (from._internal_case_sensitivity() != 0) {
    _internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InCondition::CopyFrom(const InCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.InCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InCondition::IsInitialized() const {
  return true;
}

void InCondition::InternalSwap(InCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  candidates_.InternalSwap(&other->candidates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InCondition, match_type_)
      + sizeof(InCondition::match_type_)
      - PROTOBUF_FIELD_OFFSET(InCondition, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[38]);
}

// ===================================================================

class InvokeCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Value& target(const InvokeCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Value&
InvokeCondition::_Internal::target(const InvokeCondition* msg) {
  return *msg->target_;
}
InvokeCondition::InvokeCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arguments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
}
InvokeCondition::InvokeCondition(const InvokeCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_target()) {
    target_ = new ::io::deephaven::proto::backplane::grpc::Value(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
}

void InvokeCondition::SharedCtor() {
method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_ = nullptr;
}

InvokeCondition::~InvokeCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvokeCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_;
}

void InvokeCondition::ArenaDtor(void* object) {
  InvokeCondition* _this = reinterpret_cast< InvokeCondition* >(object);
  (void)_this;
}
void InvokeCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvokeCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvokeCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.InvokeCondition.method"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Value target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvokeCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.InvokeCondition.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Value target = 2;
  if (this->_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_arguments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.InvokeCondition)
  return target;
}

size_t InvokeCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .io.deephaven.proto.backplane.grpc.Value target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvokeCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeCondition::GetClassData() const { return &_class_data_; }

void InvokeCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvokeCondition *>(to)->MergeFrom(
      static_cast<const InvokeCondition &>(from));
}


void InvokeCondition::MergeFrom(const InvokeCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (!from._internal_method().empty()) {
    _internal_set_method(from._internal_method());
  }
  if (from._internal_has_target()) {
    _internal_mutable_target()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeCondition::CopyFrom(const InvokeCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeCondition::IsInitialized() const {
  return true;
}

void InvokeCondition::InternalSwap(InvokeCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_, lhs_arena,
      &other->method_, rhs_arena
  );
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[39]);
}

// ===================================================================

class IsNullCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const IsNullCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
IsNullCondition::_Internal::reference(const IsNullCondition* msg) {
  return *msg->reference_;
}
IsNullCondition::IsNullCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
}
IsNullCondition::IsNullCondition(const IsNullCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference()) {
    reference_ = new ::io::deephaven::proto::backplane::grpc::Reference(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
}

void IsNullCondition::SharedCtor() {
reference_ = nullptr;
}

IsNullCondition::~IsNullCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IsNullCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reference_;
}

void IsNullCondition::ArenaDtor(void* object) {
  IsNullCondition* _this = reinterpret_cast< IsNullCondition* >(object);
  (void)_this;
}
void IsNullCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsNullCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IsNullCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && reference_ != nullptr) {
    delete reference_;
  }
  reference_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsNullCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsNullCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.IsNullCondition)
  return target;
}

size_t IsNullCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsNullCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IsNullCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsNullCondition::GetClassData() const { return &_class_data_; }

void IsNullCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IsNullCondition *>(to)->MergeFrom(
      static_cast<const IsNullCondition &>(from));
}


void IsNullCondition::MergeFrom(const IsNullCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reference()) {
    _internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(from._internal_reference());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsNullCondition::CopyFrom(const IsNullCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsNullCondition::IsInitialized() const {
  return true;
}

void IsNullCondition::InternalSwap(IsNullCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(reference_, other->reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsNullCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[40]);
}

// ===================================================================

class MatchesCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const MatchesCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
MatchesCondition::_Internal::reference(const MatchesCondition* msg) {
  return *msg->reference_;
}
MatchesCondition::MatchesCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
}
MatchesCondition::MatchesCondition(const MatchesCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regex(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reference()) {
    reference_ = new ::io::deephaven::proto::backplane::grpc::Reference(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  ::memcpy(&case_sensitivity_, &from.case_sensitivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&case_sensitivity_)) + sizeof(match_type_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
}

void MatchesCondition::SharedCtor() {
regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(match_type_));
}

MatchesCondition::~MatchesCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchesCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reference_;
}

void MatchesCondition::ArenaDtor(void* object) {
  MatchesCondition* _this = reinterpret_cast< MatchesCondition* >(object);
  (void)_this;
}
void MatchesCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchesCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchesCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regex_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && reference_ != nullptr) {
    delete reference_;
  }
  reference_ = nullptr;
  ::memset(&case_sensitivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&case_sensitivity_)) + sizeof(match_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchesCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.MatchesCondition.regex"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::io::deephaven::proto::backplane::grpc::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchesCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference(this), target, stream);
  }

  // string regex = 2;
  if (!this->_internal_regex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.MatchesCondition.regex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_regex(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MatchesCondition)
  return target;
}

size_t MatchesCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string regex = 2;
  if (!this->_internal_regex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchesCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchesCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchesCondition::GetClassData() const { return &_class_data_; }

void MatchesCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchesCondition *>(to)->MergeFrom(
      static_cast<const MatchesCondition &>(from));
}


void MatchesCondition::MergeFrom(const MatchesCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_regex().empty()) {
    _internal_set_regex(from._internal_regex());
  }
  if (from._internal_has_reference()) {
    _internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(from._internal_reference());
  }
  if (from._internal_case_sensitivity() != 0) {
    _internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchesCondition::CopyFrom(const MatchesCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchesCondition::IsInitialized() const {
  return true;
}

void MatchesCondition::InternalSwap(MatchesCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &regex_, lhs_arena,
      &other->regex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchesCondition, match_type_)
      + sizeof(MatchesCondition::match_type_)
      - PROTOBUF_FIELD_OFFSET(MatchesCondition, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchesCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[41]);
}

// ===================================================================

class ContainsCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const ContainsCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
ContainsCondition::_Internal::reference(const ContainsCondition* msg) {
  return *msg->reference_;
}
ContainsCondition::ContainsCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
}
ContainsCondition::ContainsCondition(const ContainsCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_string().empty()) {
    search_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reference()) {
    reference_ = new ::io::deephaven::proto::backplane::grpc::Reference(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  ::memcpy(&case_sensitivity_, &from.case_sensitivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&case_sensitivity_)) + sizeof(match_type_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
}

void ContainsCondition::SharedCtor() {
search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(match_type_));
}

ContainsCondition::~ContainsCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContainsCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  search_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reference_;
}

void ContainsCondition::ArenaDtor(void* object) {
  ContainsCondition* _this = reinterpret_cast< ContainsCondition* >(object);
  (void)_this;
}
void ContainsCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainsCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainsCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_string_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && reference_ != nullptr) {
    delete reference_;
  }
  reference_ = nullptr;
  ::memset(&case_sensitivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&case_sensitivity_)) + sizeof(match_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainsCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string search_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_search_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ContainsCondition.search_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::io::deephaven::proto::backplane::grpc::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainsCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference(this), target, stream);
  }

  // string search_string = 2;
  if (!this->_internal_search_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_string().data(), static_cast<int>(this->_internal_search_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ContainsCondition.search_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_search_string(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ContainsCondition)
  return target;
}

size_t ContainsCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search_string = 2;
  if (!this->_internal_search_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_string());
  }

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainsCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContainsCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainsCondition::GetClassData() const { return &_class_data_; }

void ContainsCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContainsCondition *>(to)->MergeFrom(
      static_cast<const ContainsCondition &>(from));
}


void ContainsCondition::MergeFrom(const ContainsCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_search_string().empty()) {
    _internal_set_search_string(from._internal_search_string());
  }
  if (from._internal_has_reference()) {
    _internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(from._internal_reference());
  }
  if (from._internal_case_sensitivity() != 0) {
    _internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainsCondition::CopyFrom(const ContainsCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainsCondition::IsInitialized() const {
  return true;
}

void ContainsCondition::InternalSwap(ContainsCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &search_string_, lhs_arena,
      &other->search_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainsCondition, match_type_)
      + sizeof(ContainsCondition::match_type_)
      - PROTOBUF_FIELD_OFFSET(ContainsCondition, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainsCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[42]);
}

// ===================================================================

class SearchCondition::_Internal {
 public:
};

SearchCondition::SearchCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  optional_references_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SearchCondition)
}
SearchCondition::SearchCondition(const SearchCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      optional_references_(from.optional_references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_string().empty()) {
    search_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_string(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SearchCondition)
}

void SearchCondition::SharedCtor() {
search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SearchCondition::~SearchCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SearchCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SearchCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  search_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchCondition::ArenaDtor(void* object) {
  SearchCondition* _this = reinterpret_cast< SearchCondition* >(object);
  (void)_this;
}
void SearchCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optional_references_.Clear();
  search_string_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string search_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SearchCondition.search_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optional_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_string = 1;
  if (!this->_internal_search_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_string().data(), static_cast<int>(this->_internal_search_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SearchCondition.search_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_string(), target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_optional_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_optional_references(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SearchCondition)
  return target;
}

size_t SearchCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
  total_size += 1UL * this->_internal_optional_references_size();
  for (const auto& msg : this->optional_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string search_string = 1;
  if (!this->_internal_search_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SearchCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchCondition::GetClassData() const { return &_class_data_; }

void SearchCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SearchCondition *>(to)->MergeFrom(
      static_cast<const SearchCondition &>(from));
}


void SearchCondition::MergeFrom(const SearchCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optional_references_.MergeFrom(from.optional_references_);
  if (!from._internal_search_string().empty()) {
    _internal_set_search_string(from._internal_search_string());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchCondition::CopyFrom(const SearchCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchCondition::IsInitialized() const {
  return true;
}

void SearchCondition::InternalSwap(SearchCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  optional_references_.InternalSwap(&other->optional_references_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &search_string_, lhs_arena,
      &other->search_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[43]);
}

// ===================================================================

class FlattenRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FlattenRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FlattenRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
FlattenRequest::_Internal::result_id(const FlattenRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
FlattenRequest::_Internal::source_id(const FlattenRequest* msg) {
  return *msg->source_id_;
}
void FlattenRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
FlattenRequest::FlattenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}
FlattenRequest::FlattenRequest(const FlattenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}

void FlattenRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(source_id_));
}

FlattenRequest::~FlattenRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlattenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
}

void FlattenRequest::ArenaDtor(void* object) {
  FlattenRequest* _this = reinterpret_cast< FlattenRequest* >(object);
  (void)_this;
}
void FlattenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlattenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlattenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlattenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlattenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FlattenRequest)
  return target;
}

size_t FlattenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlattenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlattenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlattenRequest::GetClassData() const { return &_class_data_; }

void FlattenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlattenRequest *>(to)->MergeFrom(
      static_cast<const FlattenRequest &>(from));
}


void FlattenRequest::MergeFrom(const FlattenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlattenRequest::CopyFrom(const FlattenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenRequest::IsInitialized() const {
  return true;
}

void FlattenRequest::InternalSwap(FlattenRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlattenRequest, source_id_)
      + sizeof(FlattenRequest::source_id_)
      - PROTOBUF_FIELD_OFFSET(FlattenRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlattenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[44]);
}

// ===================================================================

class RunChartDownsampleRequest_ZoomRange::_Internal {
 public:
  using HasBits = decltype(std::declval<RunChartDownsampleRequest_ZoomRange>()._has_bits_);
  static void set_has_min_date_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_date_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
}
RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(const RunChartDownsampleRequest_ZoomRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_date_nanos_, &from.min_date_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_date_nanos_) -
    reinterpret_cast<char*>(&min_date_nanos_)) + sizeof(max_date_nanos_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
}

void RunChartDownsampleRequest_ZoomRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_date_nanos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_date_nanos_) -
    reinterpret_cast<char*>(&min_date_nanos_)) + sizeof(max_date_nanos_));
}

RunChartDownsampleRequest_ZoomRange::~RunChartDownsampleRequest_ZoomRange() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RunChartDownsampleRequest_ZoomRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RunChartDownsampleRequest_ZoomRange::ArenaDtor(void* object) {
  RunChartDownsampleRequest_ZoomRange* _this = reinterpret_cast< RunChartDownsampleRequest_ZoomRange* >(object);
  (void)_this;
}
void RunChartDownsampleRequest_ZoomRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunChartDownsampleRequest_ZoomRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RunChartDownsampleRequest_ZoomRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_date_nanos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_date_nanos_) -
        reinterpret_cast<char*>(&min_date_nanos_)) + sizeof(max_date_nanos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunChartDownsampleRequest_ZoomRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_date_nanos(&has_bits);
          min_date_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_date_nanos(&has_bits);
          max_date_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunChartDownsampleRequest_ZoomRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
  if (_internal_has_min_date_nanos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_min_date_nanos(), target);
  }

  // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
  if (_internal_has_max_date_nanos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_date_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  return target;
}

size_t RunChartDownsampleRequest_ZoomRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_min_date_nanos());
    }

    // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_date_nanos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunChartDownsampleRequest_ZoomRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RunChartDownsampleRequest_ZoomRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunChartDownsampleRequest_ZoomRange::GetClassData() const { return &_class_data_; }

void RunChartDownsampleRequest_ZoomRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RunChartDownsampleRequest_ZoomRange *>(to)->MergeFrom(
      static_cast<const RunChartDownsampleRequest_ZoomRange &>(from));
}


void RunChartDownsampleRequest_ZoomRange::MergeFrom(const RunChartDownsampleRequest_ZoomRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_date_nanos_ = from.min_date_nanos_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_date_nanos_ = from.max_date_nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunChartDownsampleRequest_ZoomRange::CopyFrom(const RunChartDownsampleRequest_ZoomRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunChartDownsampleRequest_ZoomRange::IsInitialized() const {
  return true;
}

void RunChartDownsampleRequest_ZoomRange::InternalSwap(RunChartDownsampleRequest_ZoomRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, max_date_nanos_)
      + sizeof(RunChartDownsampleRequest_ZoomRange::max_date_nanos_)
      - PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, min_date_nanos_)>(
          reinterpret_cast<char*>(&min_date_nanos_),
          reinterpret_cast<char*>(&other->min_date_nanos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunChartDownsampleRequest_ZoomRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[45]);
}

// ===================================================================

class RunChartDownsampleRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const RunChartDownsampleRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const RunChartDownsampleRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange& zoom_range(const RunChartDownsampleRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
RunChartDownsampleRequest::_Internal::result_id(const RunChartDownsampleRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
RunChartDownsampleRequest::_Internal::source_id(const RunChartDownsampleRequest* msg) {
  return *msg->source_id_;
}
const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange&
RunChartDownsampleRequest::_Internal::zoom_range(const RunChartDownsampleRequest* msg) {
  return *msg->zoom_range_;
}
void RunChartDownsampleRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
RunChartDownsampleRequest::RunChartDownsampleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  y_column_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
}
RunChartDownsampleRequest::RunChartDownsampleRequest(const RunChartDownsampleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      y_column_names_(from.y_column_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x_column_name().empty()) {
    x_column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_x_column_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_zoom_range()) {
    zoom_range_ = new ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange(*from.zoom_range_);
  } else {
    zoom_range_ = nullptr;
  }
  pixel_count_ = from.pixel_count_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
}

void RunChartDownsampleRequest::SharedCtor() {
x_column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pixel_count_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(pixel_count_));
}

RunChartDownsampleRequest::~RunChartDownsampleRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RunChartDownsampleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  x_column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete zoom_range_;
}

void RunChartDownsampleRequest::ArenaDtor(void* object) {
  RunChartDownsampleRequest* _this = reinterpret_cast< RunChartDownsampleRequest* >(object);
  (void)_this;
}
void RunChartDownsampleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunChartDownsampleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RunChartDownsampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  y_column_names_.Clear();
  x_column_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && zoom_range_ != nullptr) {
    delete zoom_range_;
  }
  zoom_range_ = nullptr;
  pixel_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunChartDownsampleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pixel_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pixel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string x_column_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_x_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.x_column_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string y_column_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_y_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.y_column_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunChartDownsampleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // int32 pixel_count = 3;
  if (this->_internal_pixel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pixel_count(), target);
  }

  // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
  if (this->_internal_has_zoom_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::zoom_range(this), target, stream);
  }

  // string x_column_name = 5;
  if (!this->_internal_x_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_column_name().data(), static_cast<int>(this->_internal_x_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.x_column_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_x_column_name(), target);
  }

  // repeated string y_column_names = 6;
  for (int i = 0, n = this->_internal_y_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_y_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.y_column_names");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  return target;
}

size_t RunChartDownsampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string y_column_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(y_column_names_.size());
  for (int i = 0, n = y_column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      y_column_names_.Get(i));
  }

  // string x_column_name = 5;
  if (!this->_internal_x_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_column_name());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
  if (this->_internal_has_zoom_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zoom_range_);
  }

  // int32 pixel_count = 3;
  if (this->_internal_pixel_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pixel_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunChartDownsampleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RunChartDownsampleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunChartDownsampleRequest::GetClassData() const { return &_class_data_; }

void RunChartDownsampleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RunChartDownsampleRequest *>(to)->MergeFrom(
      static_cast<const RunChartDownsampleRequest &>(from));
}


void RunChartDownsampleRequest::MergeFrom(const RunChartDownsampleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  y_column_names_.MergeFrom(from.y_column_names_);
  if (!from._internal_x_column_name().empty()) {
    _internal_set_x_column_name(from._internal_x_column_name());
  }
  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_id());
  }
  if (from._internal_has_zoom_range()) {
    _internal_mutable_zoom_range()->::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange::MergeFrom(from._internal_zoom_range());
  }
  if (from._internal_pixel_count() != 0) {
    _internal_set_pixel_count(from._internal_pixel_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunChartDownsampleRequest::CopyFrom(const RunChartDownsampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunChartDownsampleRequest::IsInitialized() const {
  return true;
}

void RunChartDownsampleRequest::InternalSwap(RunChartDownsampleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  y_column_names_.InternalSwap(&other->y_column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &x_column_name_, lhs_arena,
      &other->x_column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, pixel_count_)
      + sizeof(RunChartDownsampleRequest::pixel_count_)
      - PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunChartDownsampleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[46]);
}

// ===================================================================

class CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly)
}
CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(const CreateInputTableRequest_InputTableKind_InMemoryAppendOnly& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[47]);
}

// ===================================================================

class CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  key_columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
}
CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      key_columns_(from.key_columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SharedCtor() {
}

CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::~CreateInputTableRequest_InputTableKind_InMemoryKeyBacked() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::ArenaDtor(void* object) {
  CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* _this = reinterpret_cast< CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* >(object);
  (void)_this;
}
void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_columns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string key_columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_key_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked.key_columns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string key_columns = 1;
  for (int i = 0, n = this->_internal_key_columns_size(); i < n; i++) {
    const auto& s = this->_internal_key_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked.key_columns");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  return target;
}

size_t CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string key_columns = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(key_columns_.size());
  for (int i = 0, n = key_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      key_columns_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::GetClassData() const { return &_class_data_; }

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateInputTableRequest_InputTableKind_InMemoryKeyBacked *>(to)->MergeFrom(
      static_cast<const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked &>(from));
}


void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeFrom(const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_columns_.MergeFrom(from.key_columns_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CopyFrom(const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::IsInitialized() const {
  return true;
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::InternalSwap(CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  key_columns_.InternalSwap(&other->key_columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[48]);
}

// ===================================================================

class CreateInputTableRequest_InputTableKind::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly& in_memory_append_only(const CreateInputTableRequest_InputTableKind* msg);
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& in_memory_key_backed(const CreateInputTableRequest_InputTableKind* msg);
};

const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly&
CreateInputTableRequest_InputTableKind::_Internal::in_memory_append_only(const CreateInputTableRequest_InputTableKind* msg) {
  return *msg->kind_.in_memory_append_only_;
}
const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked&
CreateInputTableRequest_InputTableKind::_Internal::in_memory_key_backed(const CreateInputTableRequest_InputTableKind* msg) {
  return *msg->kind_.in_memory_key_backed_;
}
void CreateInputTableRequest_InputTableKind::set_allocated_in_memory_append_only(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly* in_memory_append_only) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (in_memory_append_only) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>::GetOwningArena(in_memory_append_only);
    if (message_arena != submessage_arena) {
      in_memory_append_only = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_memory_append_only, submessage_arena);
    }
    set_has_in_memory_append_only();
    kind_.in_memory_append_only_ = in_memory_append_only;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.in_memory_append_only)
}
void CreateInputTableRequest_InputTableKind::set_allocated_in_memory_key_backed(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* in_memory_key_backed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (in_memory_key_backed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>::GetOwningArena(in_memory_key_backed);
    if (message_arena != submessage_arena) {
      in_memory_key_backed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_memory_key_backed, submessage_arena);
    }
    set_has_in_memory_key_backed();
    kind_.in_memory_key_backed_ = in_memory_key_backed;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.in_memory_key_backed)
}
CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
}
CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(const CreateInputTableRequest_InputTableKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kInMemoryAppendOnly: {
      _internal_mutable_in_memory_append_only()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::MergeFrom(from._internal_in_memory_append_only());
      break;
    }
    case kInMemoryKeyBacked: {
      _internal_mutable_in_memory_key_backed()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeFrom(from._internal_in_memory_key_backed());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
}

void CreateInputTableRequest_InputTableKind::SharedCtor() {
clear_has_kind();
}

CreateInputTableRequest_InputTableKind::~CreateInputTableRequest_InputTableKind() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateInputTableRequest_InputTableKind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void CreateInputTableRequest_InputTableKind::ArenaDtor(void* object) {
  CreateInputTableRequest_InputTableKind* _this = reinterpret_cast< CreateInputTableRequest_InputTableKind* >(object);
  (void)_this;
}
void CreateInputTableRequest_InputTableKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInputTableRequest_InputTableKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateInputTableRequest_InputTableKind::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  switch (kind_case()) {
    case kInMemoryAppendOnly: {
      if (GetArenaForAllocation() == nullptr) {
        delete kind_.in_memory_append_only_;
      }
      break;
    }
    case kInMemoryKeyBacked: {
      if (GetArenaForAllocation() == nullptr) {
        delete kind_.in_memory_key_backed_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void CreateInputTableRequest_InputTableKind::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInputTableRequest_InputTableKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_memory_append_only(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_memory_key_backed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInputTableRequest_InputTableKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
  if (_internal_has_in_memory_append_only()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::in_memory_append_only(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
  if (_internal_has_in_memory_key_backed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::in_memory_key_backed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  return target;
}

size_t CreateInputTableRequest_InputTableKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
    case kInMemoryAppendOnly: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.in_memory_append_only_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
    case kInMemoryKeyBacked: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.in_memory_key_backed_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest_InputTableKind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateInputTableRequest_InputTableKind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest_InputTableKind::GetClassData() const { return &_class_data_; }

void CreateInputTableRequest_InputTableKind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateInputTableRequest_InputTableKind *>(to)->MergeFrom(
      static_cast<const CreateInputTableRequest_InputTableKind &>(from));
}


void CreateInputTableRequest_InputTableKind::MergeFrom(const CreateInputTableRequest_InputTableKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kInMemoryAppendOnly: {
      _internal_mutable_in_memory_append_only()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::MergeFrom(from._internal_in_memory_append_only());
      break;
    }
    case kInMemoryKeyBacked: {
      _internal_mutable_in_memory_key_backed()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeFrom(from._internal_in_memory_key_backed());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest_InputTableKind::CopyFrom(const CreateInputTableRequest_InputTableKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInputTableRequest_InputTableKind::IsInitialized() const {
  return true;
}

void CreateInputTableRequest_InputTableKind::InternalSwap(CreateInputTableRequest_InputTableKind* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest_InputTableKind::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[49]);
}

// ===================================================================

class CreateInputTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const CreateInputTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_table_id(const CreateInputTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind& kind(const CreateInputTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CreateInputTableRequest::_Internal::result_id(const CreateInputTableRequest* msg) {
  return *msg->result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
CreateInputTableRequest::_Internal::source_table_id(const CreateInputTableRequest* msg) {
  return *msg->definition_.source_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind&
CreateInputTableRequest::_Internal::kind(const CreateInputTableRequest* msg) {
  return *msg->kind_;
}
void CreateInputTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
void CreateInputTableRequest::set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::TableReference* source_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_definition();
  if (source_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::TableReference>::GetOwningArena(source_table_id);
    if (message_arena != submessage_arena) {
      source_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_table_id, submessage_arena);
    }
    set_has_source_table_id();
    definition_.source_table_id_ = source_table_id;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.source_table_id)
}
CreateInputTableRequest::CreateInputTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
}
CreateInputTableRequest::CreateInputTableRequest(const CreateInputTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  if (from._internal_has_kind()) {
    kind_ = new ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  clear_has_definition();
  switch (from.definition_case()) {
    case kSourceTableId: {
      _internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_table_id());
      break;
    }
    case kSchema: {
      _internal_set_schema(from._internal_schema());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
}

void CreateInputTableRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&result_id_)) + sizeof(kind_));
clear_has_definition();
}

CreateInputTableRequest::~CreateInputTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateInputTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
  if (this != internal_default_instance()) delete kind_;
  if (has_definition()) {
    clear_definition();
  }
}

void CreateInputTableRequest::ArenaDtor(void* object) {
  CreateInputTableRequest* _this = reinterpret_cast< CreateInputTableRequest* >(object);
  (void)_this;
}
void CreateInputTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInputTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateInputTableRequest::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  switch (definition_case()) {
    case kSourceTableId: {
      if (GetArenaForAllocation() == nullptr) {
        delete definition_.source_table_id_;
      }
      break;
    }
    case kSchema: {
      definition_.schema_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFINITION_NOT_SET;
}


void CreateInputTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  clear_definition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInputTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kind(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInputTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
  if (_internal_has_source_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_table_id(this), target, stream);
  }

  // bytes schema = 3;
  if (_internal_has_schema()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_schema(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
  if (this->_internal_has_kind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kind(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  return target;
}

size_t CreateInputTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
  if (this->_internal_has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  switch (definition_case()) {
    // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
    case kSourceTableId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.source_table_id_);
      break;
    }
    // bytes schema = 3;
    case kSchema: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schema());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateInputTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest::GetClassData() const { return &_class_data_; }

void CreateInputTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateInputTableRequest *>(to)->MergeFrom(
      static_cast<const CreateInputTableRequest &>(from));
}


void CreateInputTableRequest::MergeFrom(const CreateInputTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
  if (from._internal_has_kind()) {
    _internal_mutable_kind()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind::MergeFrom(from._internal_kind());
  }
  switch (from.definition_case()) {
    case kSourceTableId: {
      _internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(from._internal_source_table_id());
      break;
    }
    case kSchema: {
      _internal_set_schema(from._internal_schema());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest::CopyFrom(const CreateInputTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInputTableRequest::IsInitialized() const {
  return true;
}

void CreateInputTableRequest::InternalSwap(CreateInputTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, kind_)
      + sizeof(CreateInputTableRequest::kind_)
      - PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, result_id_)>(
          reinterpret_cast<char*>(&result_id_),
          reinterpret_cast<char*>(&other->result_id_));
  swap(definition_, other->definition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[50]);
}

// ===================================================================

class BatchTableRequest_Operation::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& empty_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& time_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& drop_columns(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& lazy_update(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& view(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update_view(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& select(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& select_distinct(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& filter(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& unstructured_filter(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SortTableRequest& sort(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& head(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& tail(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& head_by(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& tail_by(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::UngroupRequest& ungroup(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& merge(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& combo_aggregate(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& snapshot(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FlattenRequest& flatten(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest& run_chart_downsample(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest& cross_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest& natural_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest& exact_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest& left_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest& as_of_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FetchTableRequest& fetch_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest& fetch_pandas_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest& apply_preview_columns(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest& create_input_table(const BatchTableRequest_Operation* msg);
};

const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest&
BatchTableRequest_Operation::_Internal::empty_table(const BatchTableRequest_Operation* msg) {
  return *msg->op_.empty_table_;
}
const ::io::deephaven::proto::backplane::grpc::TimeTableRequest&
BatchTableRequest_Operation::_Internal::time_table(const BatchTableRequest_Operation* msg) {
  return *msg->op_.time_table_;
}
const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest&
BatchTableRequest_Operation::_Internal::drop_columns(const BatchTableRequest_Operation* msg) {
  return *msg->op_.drop_columns_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::update(const BatchTableRequest_Operation* msg) {
  return *msg->op_.update_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::lazy_update(const BatchTableRequest_Operation* msg) {
  return *msg->op_.lazy_update_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::view(const BatchTableRequest_Operation* msg) {
  return *msg->op_.view_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::update_view(const BatchTableRequest_Operation* msg) {
  return *msg->op_.update_view_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::select(const BatchTableRequest_Operation* msg) {
  return *msg->op_.select_;
}
const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest&
BatchTableRequest_Operation::_Internal::select_distinct(const BatchTableRequest_Operation* msg) {
  return *msg->op_.select_distinct_;
}
const ::io::deephaven::proto::backplane::grpc::FilterTableRequest&
BatchTableRequest_Operation::_Internal::filter(const BatchTableRequest_Operation* msg) {
  return *msg->op_.filter_;
}
const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest&
BatchTableRequest_Operation::_Internal::unstructured_filter(const BatchTableRequest_Operation* msg) {
  return *msg->op_.unstructured_filter_;
}
const ::io::deephaven::proto::backplane::grpc::SortTableRequest&
BatchTableRequest_Operation::_Internal::sort(const BatchTableRequest_Operation* msg) {
  return *msg->op_.sort_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&
BatchTableRequest_Operation::_Internal::head(const BatchTableRequest_Operation* msg) {
  return *msg->op_.head_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&
BatchTableRequest_Operation::_Internal::tail(const BatchTableRequest_Operation* msg) {
  return *msg->op_.tail_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&
BatchTableRequest_Operation::_Internal::head_by(const BatchTableRequest_Operation* msg) {
  return *msg->op_.head_by_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&
BatchTableRequest_Operation::_Internal::tail_by(const BatchTableRequest_Operation* msg) {
  return *msg->op_.tail_by_;
}
const ::io::deephaven::proto::backplane::grpc::UngroupRequest&
BatchTableRequest_Operation::_Internal::ungroup(const BatchTableRequest_Operation* msg) {
  return *msg->op_.ungroup_;
}
const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest&
BatchTableRequest_Operation::_Internal::merge(const BatchTableRequest_Operation* msg) {
  return *msg->op_.merge_;
}
const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest&
BatchTableRequest_Operation::_Internal::combo_aggregate(const BatchTableRequest_Operation* msg) {
  return *msg->op_.combo_aggregate_;
}
const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest&
BatchTableRequest_Operation::_Internal::snapshot(const BatchTableRequest_Operation* msg) {
  return *msg->op_.snapshot_;
}
const ::io::deephaven::proto::backplane::grpc::FlattenRequest&
BatchTableRequest_Operation::_Internal::flatten(const BatchTableRequest_Operation* msg) {
  return *msg->op_.flatten_;
}
const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest&
BatchTableRequest_Operation::_Internal::run_chart_downsample(const BatchTableRequest_Operation* msg) {
  return *msg->op_.run_chart_downsample_;
}
const ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest&
BatchTableRequest_Operation::_Internal::cross_join(const BatchTableRequest_Operation* msg) {
  return *msg->op_.cross_join_;
}
const ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest&
BatchTableRequest_Operation::_Internal::natural_join(const BatchTableRequest_Operation* msg) {
  return *msg->op_.natural_join_;
}
const ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest&
BatchTableRequest_Operation::_Internal::exact_join(const BatchTableRequest_Operation* msg) {
  return *msg->op_.exact_join_;
}
const ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest&
BatchTableRequest_Operation::_Internal::left_join(const BatchTableRequest_Operation* msg) {
  return *msg->op_.left_join_;
}
const ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest&
BatchTableRequest_Operation::_Internal::as_of_join(const BatchTableRequest_Operation* msg) {
  return *msg->op_.as_of_join_;
}
const ::io::deephaven::proto::backplane::grpc::FetchTableRequest&
BatchTableRequest_Operation::_Internal::fetch_table(const BatchTableRequest_Operation* msg) {
  return *msg->op_.fetch_table_;
}
const ::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest&
BatchTableRequest_Operation::_Internal::fetch_pandas_table(const BatchTableRequest_Operation* msg) {
  return *msg->op_.fetch_pandas_table_;
}
const ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest&
BatchTableRequest_Operation::_Internal::apply_preview_columns(const BatchTableRequest_Operation* msg) {
  return *msg->op_.apply_preview_columns_;
}
const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest&
BatchTableRequest_Operation::_Internal::create_input_table(const BatchTableRequest_Operation* msg) {
  return *msg->op_.create_input_table_;
}
void BatchTableRequest_Operation::set_allocated_empty_table(::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (empty_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::EmptyTableRequest>::GetOwningArena(empty_table);
    if (message_arena != submessage_arena) {
      empty_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_table, submessage_arena);
    }
    set_has_empty_table();
    op_.empty_table_ = empty_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
}
void BatchTableRequest_Operation::set_allocated_time_table(::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (time_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::TimeTableRequest>::GetOwningArena(time_table);
    if (message_arena != submessage_arena) {
      time_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_table, submessage_arena);
    }
    set_has_time_table();
    op_.time_table_ = time_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
}
void BatchTableRequest_Operation::set_allocated_drop_columns(::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (drop_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::DropColumnsRequest>::GetOwningArena(drop_columns);
    if (message_arena != submessage_arena) {
      drop_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_columns, submessage_arena);
    }
    set_has_drop_columns();
    op_.drop_columns_ = drop_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
}
void BatchTableRequest_Operation::set_allocated_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>::GetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    op_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
}
void BatchTableRequest_Operation::set_allocated_lazy_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (lazy_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>::GetOwningArena(lazy_update);
    if (message_arena != submessage_arena) {
      lazy_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lazy_update, submessage_arena);
    }
    set_has_lazy_update();
    op_.lazy_update_ = lazy_update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
}
void BatchTableRequest_Operation::set_allocated_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>::GetOwningArena(view);
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    set_has_view();
    op_.view_ = view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
}
void BatchTableRequest_Operation::set_allocated_update_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (update_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>::GetOwningArena(update_view);
    if (message_arena != submessage_arena) {
      update_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_view, submessage_arena);
    }
    set_has_update_view();
    op_.update_view_ = update_view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
}
void BatchTableRequest_Operation::set_allocated_select(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>::GetOwningArena(select);
    if (message_arena != submessage_arena) {
      select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    op_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
}
void BatchTableRequest_Operation::set_allocated_select_distinct(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (select_distinct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SelectDistinctRequest>::GetOwningArena(select_distinct);
    if (message_arena != submessage_arena) {
      select_distinct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_distinct, submessage_arena);
    }
    set_has_select_distinct();
    op_.select_distinct_ = select_distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
}
void BatchTableRequest_Operation::set_allocated_filter(::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::FilterTableRequest>::GetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    op_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
}
void BatchTableRequest_Operation::set_allocated_unstructured_filter(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (unstructured_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest>::GetOwningArena(unstructured_filter);
    if (message_arena != submessage_arena) {
      unstructured_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unstructured_filter, submessage_arena);
    }
    set_has_unstructured_filter();
    op_.unstructured_filter_ = unstructured_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
}
void BatchTableRequest_Operation::set_allocated_sort(::io::deephaven::proto::backplane::grpc::SortTableRequest* sort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (sort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SortTableRequest>::GetOwningArena(sort);
    if (message_arena != submessage_arena) {
      sort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort, submessage_arena);
    }
    set_has_sort();
    op_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
}
void BatchTableRequest_Operation::set_allocated_head(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>::GetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    set_has_head();
    op_.head_ = head;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
}
void BatchTableRequest_Operation::set_allocated_tail(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>::GetOwningArena(tail);
    if (message_arena != submessage_arena) {
      tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail, submessage_arena);
    }
    set_has_tail();
    op_.tail_ = tail;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
}
void BatchTableRequest_Operation::set_allocated_head_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (head_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>::GetOwningArena(head_by);
    if (message_arena != submessage_arena) {
      head_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_by, submessage_arena);
    }
    set_has_head_by();
    op_.head_by_ = head_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
}
void BatchTableRequest_Operation::set_allocated_tail_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (tail_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>::GetOwningArena(tail_by);
    if (message_arena != submessage_arena) {
      tail_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail_by, submessage_arena);
    }
    set_has_tail_by();
    op_.tail_by_ = tail_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
}
void BatchTableRequest_Operation::set_allocated_ungroup(::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (ungroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::UngroupRequest>::GetOwningArena(ungroup);
    if (message_arena != submessage_arena) {
      ungroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ungroup, submessage_arena);
    }
    set_has_ungroup();
    op_.ungroup_ = ungroup;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
}
void BatchTableRequest_Operation::set_allocated_merge(::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (merge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::MergeTablesRequest>::GetOwningArena(merge);
    if (message_arena != submessage_arena) {
      merge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge, submessage_arena);
    }
    set_has_merge();
    op_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
}
void BatchTableRequest_Operation::set_allocated_combo_aggregate(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (combo_aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest>::GetOwningArena(combo_aggregate);
    if (message_arena != submessage_arena) {
      combo_aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combo_aggregate, submessage_arena);
    }
    set_has_combo_aggregate();
    op_.combo_aggregate_ = combo_aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
}
void BatchTableRequest_Operation::set_allocated_snapshot(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::SnapshotTableRequest>::GetOwningArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    op_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
}
void BatchTableRequest_Operation::set_allocated_flatten(::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (flatten) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::FlattenRequest>::GetOwningArena(flatten);
    if (message_arena != submessage_arena) {
      flatten = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatten, submessage_arena);
    }
    set_has_flatten();
    op_.flatten_ = flatten;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
}
void BatchTableRequest_Operation::set_allocated_run_chart_downsample(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest* run_chart_downsample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (run_chart_downsample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest>::GetOwningArena(run_chart_downsample);
    if (message_arena != submessage_arena) {
      run_chart_downsample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_chart_downsample, submessage_arena);
    }
    set_has_run_chart_downsample();
    op_.run_chart_downsample_ = run_chart_downsample;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.run_chart_downsample)
}
void BatchTableRequest_Operation::set_allocated_cross_join(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest* cross_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (cross_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest>::GetOwningArena(cross_join);
    if (message_arena != submessage_arena) {
      cross_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross_join, submessage_arena);
    }
    set_has_cross_join();
    op_.cross_join_ = cross_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.cross_join)
}
void BatchTableRequest_Operation::set_allocated_natural_join(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest* natural_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (natural_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest>::GetOwningArena(natural_join);
    if (message_arena != submessage_arena) {
      natural_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, natural_join, submessage_arena);
    }
    set_has_natural_join();
    op_.natural_join_ = natural_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.natural_join)
}
void BatchTableRequest_Operation::set_allocated_exact_join(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest* exact_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (exact_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest>::GetOwningArena(exact_join);
    if (message_arena != submessage_arena) {
      exact_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exact_join, submessage_arena);
    }
    set_has_exact_join();
    op_.exact_join_ = exact_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.exact_join)
}
void BatchTableRequest_Operation::set_allocated_left_join(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest* left_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (left_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest>::GetOwningArena(left_join);
    if (message_arena != submessage_arena) {
      left_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_join, submessage_arena);
    }
    set_has_left_join();
    op_.left_join_ = left_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.left_join)
}
void BatchTableRequest_Operation::set_allocated_as_of_join(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest* as_of_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (as_of_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest>::GetOwningArena(as_of_join);
    if (message_arena != submessage_arena) {
      as_of_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_of_join, submessage_arena);
    }
    set_has_as_of_join();
    op_.as_of_join_ = as_of_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.as_of_join)
}
void BatchTableRequest_Operation::set_allocated_fetch_table(::io::deephaven::proto::backplane::grpc::FetchTableRequest* fetch_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (fetch_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::FetchTableRequest>::GetOwningArena(fetch_table);
    if (message_arena != submessage_arena) {
      fetch_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch_table, submessage_arena);
    }
    set_has_fetch_table();
    op_.fetch_table_ = fetch_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.fetch_table)
}
void BatchTableRequest_Operation::set_allocated_fetch_pandas_table(::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest* fetch_pandas_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (fetch_pandas_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest>::GetOwningArena(fetch_pandas_table);
    if (message_arena != submessage_arena) {
      fetch_pandas_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch_pandas_table, submessage_arena);
    }
    set_has_fetch_pandas_table();
    op_.fetch_pandas_table_ = fetch_pandas_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.fetch_pandas_table)
}
void BatchTableRequest_Operation::set_allocated_apply_preview_columns(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest* apply_preview_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (apply_preview_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest>::GetOwningArena(apply_preview_columns);
    if (message_arena != submessage_arena) {
      apply_preview_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_preview_columns, submessage_arena);
    }
    set_has_apply_preview_columns();
    op_.apply_preview_columns_ = apply_preview_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.apply_preview_columns)
}
void BatchTableRequest_Operation::set_allocated_create_input_table(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest* create_input_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (create_input_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest>::GetOwningArena(create_input_table);
    if (message_arena != submessage_arena) {
      create_input_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_input_table, submessage_arena);
    }
    set_has_create_input_table();
    op_.create_input_table_ = create_input_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.create_input_table)
}
BatchTableRequest_Operation::BatchTableRequest_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}
BatchTableRequest_Operation::BatchTableRequest_Operation(const BatchTableRequest_Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_op();
  switch (from.op_case()) {
    case kEmptyTable: {
      _internal_mutable_empty_table()->::io::deephaven::proto::backplane::grpc::EmptyTableRequest::MergeFrom(from._internal_empty_table());
      break;
    }
    case kTimeTable: {
      _internal_mutable_time_table()->::io::deephaven::proto::backplane::grpc::TimeTableRequest::MergeFrom(from._internal_time_table());
      break;
    }
    case kDropColumns: {
      _internal_mutable_drop_columns()->::io::deephaven::proto::backplane::grpc::DropColumnsRequest::MergeFrom(from._internal_drop_columns());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update());
      break;
    }
    case kLazyUpdate: {
      _internal_mutable_lazy_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_lazy_update());
      break;
    }
    case kView: {
      _internal_mutable_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_view());
      break;
    }
    case kUpdateView: {
      _internal_mutable_update_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update_view());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_select());
      break;
    }
    case kSelectDistinct: {
      _internal_mutable_select_distinct()->::io::deephaven::proto::backplane::grpc::SelectDistinctRequest::MergeFrom(from._internal_select_distinct());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::FilterTableRequest::MergeFrom(from._internal_filter());
      break;
    }
    case kUnstructuredFilter: {
      _internal_mutable_unstructured_filter()->::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest::MergeFrom(from._internal_unstructured_filter());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::io::deephaven::proto::backplane::grpc::SortTableRequest::MergeFrom(from._internal_sort());
      break;
    }
    case kHead: {
      _internal_mutable_head()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_head());
      break;
    }
    case kTail: {
      _internal_mutable_tail()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_tail());
      break;
    }
    case kHeadBy: {
      _internal_mutable_head_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_head_by());
      break;
    }
    case kTailBy: {
      _internal_mutable_tail_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_tail_by());
      break;
    }
    case kUngroup: {
      _internal_mutable_ungroup()->::io::deephaven::proto::backplane::grpc::UngroupRequest::MergeFrom(from._internal_ungroup());
      break;
    }
    case kMerge: {
      _internal_mutable_merge()->::io::deephaven::proto::backplane::grpc::MergeTablesRequest::MergeFrom(from._internal_merge());
      break;
    }
    case kComboAggregate: {
      _internal_mutable_combo_aggregate()->::io::deephaven::proto::backplane::grpc::ComboAggregateRequest::MergeFrom(from._internal_combo_aggregate());
      break;
    }
    case kSnapshot: {
      _internal_mutable_snapshot()->::io::deephaven::proto::backplane::grpc::SnapshotTableRequest::MergeFrom(from._internal_snapshot());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::io::deephaven::proto::backplane::grpc::FlattenRequest::MergeFrom(from._internal_flatten());
      break;
    }
    case kRunChartDownsample: {
      _internal_mutable_run_chart_downsample()->::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest::MergeFrom(from._internal_run_chart_downsample());
      break;
    }
    case kCrossJoin: {
      _internal_mutable_cross_join()->::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest::MergeFrom(from._internal_cross_join());
      break;
    }
    case kNaturalJoin: {
      _internal_mutable_natural_join()->::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest::MergeFrom(from._internal_natural_join());
      break;
    }
    case kExactJoin: {
      _internal_mutable_exact_join()->::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest::MergeFrom(from._internal_exact_join());
      break;
    }
    case kLeftJoin: {
      _internal_mutable_left_join()->::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest::MergeFrom(from._internal_left_join());
      break;
    }
    case kAsOfJoin: {
      _internal_mutable_as_of_join()->::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest::MergeFrom(from._internal_as_of_join());
      break;
    }
    case kFetchTable: {
      _internal_mutable_fetch_table()->::io::deephaven::proto::backplane::grpc::FetchTableRequest::MergeFrom(from._internal_fetch_table());
      break;
    }
    case kFetchPandasTable: {
      _internal_mutable_fetch_pandas_table()->::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest::MergeFrom(from._internal_fetch_pandas_table());
      break;
    }
    case kApplyPreviewColumns: {
      _internal_mutable_apply_preview_columns()->::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest::MergeFrom(from._internal_apply_preview_columns());
      break;
    }
    case kCreateInputTable: {
      _internal_mutable_create_input_table()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest::MergeFrom(from._internal_create_input_table());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}

void BatchTableRequest_Operation::SharedCtor() {
clear_has_op();
}

BatchTableRequest_Operation::~BatchTableRequest_Operation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchTableRequest_Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_op()) {
    clear_op();
  }
}

void BatchTableRequest_Operation::ArenaDtor(void* object) {
  BatchTableRequest_Operation* _this = reinterpret_cast< BatchTableRequest_Operation* >(object);
  (void)_this;
}
void BatchTableRequest_Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchTableRequest_Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchTableRequest_Operation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  switch (op_case()) {
    case kEmptyTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.empty_table_;
      }
      break;
    }
    case kTimeTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.time_table_;
      }
      break;
    }
    case kDropColumns: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.drop_columns_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.update_;
      }
      break;
    }
    case kLazyUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.lazy_update_;
      }
      break;
    }
    case kView: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.view_;
      }
      break;
    }
    case kUpdateView: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.update_view_;
      }
      break;
    }
    case kSelect: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.select_;
      }
      break;
    }
    case kSelectDistinct: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.select_distinct_;
      }
      break;
    }
    case kFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.filter_;
      }
      break;
    }
    case kUnstructuredFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.unstructured_filter_;
      }
      break;
    }
    case kSort: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.sort_;
      }
      break;
    }
    case kHead: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.head_;
      }
      break;
    }
    case kTail: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.tail_;
      }
      break;
    }
    case kHeadBy: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.head_by_;
      }
      break;
    }
    case kTailBy: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.tail_by_;
      }
      break;
    }
    case kUngroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.ungroup_;
      }
      break;
    }
    case kMerge: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.merge_;
      }
      break;
    }
    case kComboAggregate: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.combo_aggregate_;
      }
      break;
    }
    case kSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.snapshot_;
      }
      break;
    }
    case kFlatten: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.flatten_;
      }
      break;
    }
    case kRunChartDownsample: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.run_chart_downsample_;
      }
      break;
    }
    case kCrossJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.cross_join_;
      }
      break;
    }
    case kNaturalJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.natural_join_;
      }
      break;
    }
    case kExactJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.exact_join_;
      }
      break;
    }
    case kLeftJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.left_join_;
      }
      break;
    }
    case kAsOfJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.as_of_join_;
      }
      break;
    }
    case kFetchTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.fetch_table_;
      }
      break;
    }
    case kFetchPandasTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.fetch_pandas_table_;
      }
      break;
    }
    case kApplyPreviewColumns: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.apply_preview_columns_;
      }
      break;
    }
    case kCreateInputTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.create_input_table_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void BatchTableRequest_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTableRequest_Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lazy_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_distinct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_unstructured_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ungroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_combo_aggregate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatten(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_chart_downsample(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_exact_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_of_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FetchPandasTableRequest fetch_pandas_table = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_pandas_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_preview_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_input_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchTableRequest_Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
  if (_internal_has_empty_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::empty_table(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
  if (_internal_has_time_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_table(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
  if (_internal_has_drop_columns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::drop_columns(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
  if (_internal_has_lazy_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lazy_update(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
  if (_internal_has_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::view(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
  if (_internal_has_update_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::update_view(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
  if (_internal_has_select()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::select(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
  if (_internal_has_select_distinct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::select_distinct(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::filter(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
  if (_internal_has_unstructured_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::unstructured_filter(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
  if (_internal_has_sort()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sort(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
  if (_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::head(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
  if (_internal_has_tail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tail(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
  if (_internal_has_head_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::head_by(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
  if (_internal_has_tail_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::tail_by(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
  if (_internal_has_ungroup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::ungroup(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
  if (_internal_has_merge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::merge(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
  if (_internal_has_combo_aggregate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::combo_aggregate(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 20;
  if (_internal_has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::snapshot(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
  if (_internal_has_flatten()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::flatten(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
  if (_internal_has_run_chart_downsample()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::run_chart_downsample(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
  if (_internal_has_cross_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::cross_join(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
  if (_internal_has_natural_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::natural_join(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
  if (_internal_has_exact_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::exact_join(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
  if (_internal_has_left_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::left_join(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27;
  if (_internal_has_as_of_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::as_of_join(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
  if (_internal_has_fetch_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::fetch_table(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FetchPandasTableRequest fetch_pandas_table = 29;
  if (_internal_has_fetch_pandas_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::fetch_pandas_table(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
  if (_internal_has_apply_preview_columns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::apply_preview_columns(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
  if (_internal_has_create_input_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::create_input_table(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  return target;
}

size_t BatchTableRequest_Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (op_case()) {
    // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
    case kEmptyTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.empty_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
    case kTimeTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.time_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
    case kDropColumns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.drop_columns_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.update_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
    case kLazyUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.lazy_update_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
    case kView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.view_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
    case kUpdateView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.update_view_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
    case kSelect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.select_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
    case kSelectDistinct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.select_distinct_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.filter_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
    case kUnstructuredFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.unstructured_filter_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
    case kSort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.sort_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
    case kHead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.head_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
    case kTail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.tail_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
    case kHeadBy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.head_by_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
    case kTailBy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.tail_by_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
    case kUngroup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.ungroup_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
    case kMerge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.merge_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
    case kComboAggregate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.combo_aggregate_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 20;
    case kSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.snapshot_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
    case kFlatten: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.flatten_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
    case kRunChartDownsample: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.run_chart_downsample_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
    case kCrossJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.cross_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
    case kNaturalJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.natural_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
    case kExactJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.exact_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
    case kLeftJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.left_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27;
    case kAsOfJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.as_of_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
    case kFetchTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.fetch_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FetchPandasTableRequest fetch_pandas_table = 29;
    case kFetchPandasTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.fetch_pandas_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
    case kApplyPreviewColumns: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.apply_preview_columns_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
    case kCreateInputTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.create_input_table_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchTableRequest_Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchTableRequest_Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchTableRequest_Operation::GetClassData() const { return &_class_data_; }

void BatchTableRequest_Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchTableRequest_Operation *>(to)->MergeFrom(
      static_cast<const BatchTableRequest_Operation &>(from));
}


void BatchTableRequest_Operation::MergeFrom(const BatchTableRequest_Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_case()) {
    case kEmptyTable: {
      _internal_mutable_empty_table()->::io::deephaven::proto::backplane::grpc::EmptyTableRequest::MergeFrom(from._internal_empty_table());
      break;
    }
    case kTimeTable: {
      _internal_mutable_time_table()->::io::deephaven::proto::backplane::grpc::TimeTableRequest::MergeFrom(from._internal_time_table());
      break;
    }
    case kDropColumns: {
      _internal_mutable_drop_columns()->::io::deephaven::proto::backplane::grpc::DropColumnsRequest::MergeFrom(from._internal_drop_columns());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update());
      break;
    }
    case kLazyUpdate: {
      _internal_mutable_lazy_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_lazy_update());
      break;
    }
    case kView: {
      _internal_mutable_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_view());
      break;
    }
    case kUpdateView: {
      _internal_mutable_update_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_update_view());
      break;
    }
    case kSelect: {
      _internal_mutable_select()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(from._internal_select());
      break;
    }
    case kSelectDistinct: {
      _internal_mutable_select_distinct()->::io::deephaven::proto::backplane::grpc::SelectDistinctRequest::MergeFrom(from._internal_select_distinct());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::FilterTableRequest::MergeFrom(from._internal_filter());
      break;
    }
    case kUnstructuredFilter: {
      _internal_mutable_unstructured_filter()->::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest::MergeFrom(from._internal_unstructured_filter());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::io::deephaven::proto::backplane::grpc::SortTableRequest::MergeFrom(from._internal_sort());
      break;
    }
    case kHead: {
      _internal_mutable_head()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_head());
      break;
    }
    case kTail: {
      _internal_mutable_tail()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(from._internal_tail());
      break;
    }
    case kHeadBy: {
      _internal_mutable_head_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_head_by());
      break;
    }
    case kTailBy: {
      _internal_mutable_tail_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(from._internal_tail_by());
      break;
    }
    case kUngroup: {
      _internal_mutable_ungroup()->::io::deephaven::proto::backplane::grpc::UngroupRequest::MergeFrom(from._internal_ungroup());
      break;
    }
    case kMerge: {
      _internal_mutable_merge()->::io::deephaven::proto::backplane::grpc::MergeTablesRequest::MergeFrom(from._internal_merge());
      break;
    }
    case kComboAggregate: {
      _internal_mutable_combo_aggregate()->::io::deephaven::proto::backplane::grpc::ComboAggregateRequest::MergeFrom(from._internal_combo_aggregate());
      break;
    }
    case kSnapshot: {
      _internal_mutable_snapshot()->::io::deephaven::proto::backplane::grpc::SnapshotTableRequest::MergeFrom(from._internal_snapshot());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::io::deephaven::proto::backplane::grpc::FlattenRequest::MergeFrom(from._internal_flatten());
      break;
    }
    case kRunChartDownsample: {
      _internal_mutable_run_chart_downsample()->::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest::MergeFrom(from._internal_run_chart_downsample());
      break;
    }
    case kCrossJoin: {
      _internal_mutable_cross_join()->::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest::MergeFrom(from._internal_cross_join());
      break;
    }
    case kNaturalJoin: {
      _internal_mutable_natural_join()->::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest::MergeFrom(from._internal_natural_join());
      break;
    }
    case kExactJoin: {
      _internal_mutable_exact_join()->::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest::MergeFrom(from._internal_exact_join());
      break;
    }
    case kLeftJoin: {
      _internal_mutable_left_join()->::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest::MergeFrom(from._internal_left_join());
      break;
    }
    case kAsOfJoin: {
      _internal_mutable_as_of_join()->::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest::MergeFrom(from._internal_as_of_join());
      break;
    }
    case kFetchTable: {
      _internal_mutable_fetch_table()->::io::deephaven::proto::backplane::grpc::FetchTableRequest::MergeFrom(from._internal_fetch_table());
      break;
    }
    case kFetchPandasTable: {
      _internal_mutable_fetch_pandas_table()->::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest::MergeFrom(from._internal_fetch_pandas_table());
      break;
    }
    case kApplyPreviewColumns: {
      _internal_mutable_apply_preview_columns()->::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest::MergeFrom(from._internal_apply_preview_columns());
      break;
    }
    case kCreateInputTable: {
      _internal_mutable_create_input_table()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest::MergeFrom(from._internal_create_input_table());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTableRequest_Operation::CopyFrom(const BatchTableRequest_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTableRequest_Operation::IsInitialized() const {
  return true;
}

void BatchTableRequest_Operation::InternalSwap(BatchTableRequest_Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(op_, other->op_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTableRequest_Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[51]);
}

// ===================================================================

class BatchTableRequest::_Internal {
 public:
};

BatchTableRequest::BatchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}
BatchTableRequest::BatchTableRequest(const BatchTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}

void BatchTableRequest::SharedCtor() {
}

BatchTableRequest::~BatchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchTableRequest::ArenaDtor(void* object) {
  BatchTableRequest* _this = reinterpret_cast< BatchTableRequest* >(object);
  (void)_this;
}
void BatchTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  return target;
}

size_t BatchTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchTableRequest::GetClassData() const { return &_class_data_; }

void BatchTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchTableRequest *>(to)->MergeFrom(
      static_cast<const BatchTableRequest &>(from));
}


void BatchTableRequest::MergeFrom(const BatchTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTableRequest::CopyFrom(const BatchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTableRequest::IsInitialized() const {
  return true;
}

void BatchTableRequest::InternalSwap(BatchTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[52]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TableReference* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TableReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TableReference >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FetchTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FetchTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FetchTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FetchPandasTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FetchTableMapRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FetchTableMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FetchTableMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FetchTableMapResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FetchTableMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FetchTableMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::EmptyTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TimeTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TimeTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TimeTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::DropColumnsRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UngroupRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UngroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UngroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::MergeTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SortDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SortDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SortDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SortTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SortTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SortTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FilterTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FilterTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FilterTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Reference* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Literal* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Literal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Literal >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Value* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Condition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AndCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AndCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AndCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::OrCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::OrCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::OrCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::NotCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::NotCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::NotCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CompareCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CompareCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CompareCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::InCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::InCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::InCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::InvokeCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::InvokeCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::InvokeCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::IsNullCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::IsNullCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::IsNullCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::MatchesCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MatchesCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::MatchesCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ContainsCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ContainsCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ContainsCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SearchCondition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SearchCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SearchCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FlattenRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FlattenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FlattenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::BatchTableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::BatchTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::BatchTableRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
