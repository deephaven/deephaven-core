// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/partitionedtable.proto
// Original file comments:
//
// Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
//
#ifndef GRPC_deephaven_2fproto_2fpartitionedtable_2eproto__INCLUDED
#define GRPC_deephaven_2fproto_2fpartitionedtable_2eproto__INCLUDED

#include "deephaven/proto/partitionedtable.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

//
// This service provides tools to create and query partitioned tables.
class PartitionedTableService final {
 public:
  static constexpr char const* service_full_name() {
    return "io.deephaven.proto.backplane.grpc.PartitionedTableService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Transforms a table into a partitioned table, consisting of many separate tables, each individually
    // addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
    virtual ::grpc::Status PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>> AsyncPartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>>(AsyncPartitionByRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>> PrepareAsyncPartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>>(PrepareAsyncPartitionByRaw(context, request, cq));
    }
    //
    // Given a partitioned table, returns a table with the contents of all of the constituent tables.
    virtual ::grpc::Status Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> AsyncMerge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(AsyncMergeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> PrepareAsyncMerge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(PrepareAsyncMergeRaw(context, request, cq));
    }
    //
    // Given a partitioned table and a row described by another table's contents, returns a table
    // that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
    // more than one is present, FAILED_PRECONDITION will be sent in response.
    //
    // If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
    // sent in response.
    //
    // The simplest way to generally use this is to subscribe to the key columns of the underlying
    // table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
    // desired keys, and pass that ticket to this service. After that request is sent (note that it
    // is not required to wait for it to complete), that new table ticket can be used to make this
    // GetTable request.
    virtual ::grpc::Status GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> AsyncGetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(AsyncGetTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> PrepareAsyncGetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(PrepareAsyncGetTableRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Transforms a table into a partitioned table, consisting of many separate tables, each individually
      // addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
      virtual void PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Given a partitioned table, returns a table with the contents of all of the constituent tables.
      virtual void Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Given a partitioned table and a row described by another table's contents, returns a table
      // that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
      // more than one is present, FAILED_PRECONDITION will be sent in response.
      //
      // If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
      // sent in response.
      //
      // The simplest way to generally use this is to subscribe to the key columns of the underlying
      // table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
      // desired keys, and pass that ticket to this service. After that request is sent (note that it
      // is not required to wait for it to complete), that new table ticket can be used to make this
      // GetTable request.
      virtual void GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* AsyncPartitionByRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* PrepareAsyncPartitionByRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* AsyncMergeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PrepareAsyncMergeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* AsyncGetTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>> AsyncPartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>>(AsyncPartitionByRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>> PrepareAsyncPartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>>(PrepareAsyncPartitionByRaw(context, request, cq));
    }
    ::grpc::Status Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> AsyncMerge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(AsyncMergeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> PrepareAsyncMerge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(PrepareAsyncMergeRaw(context, request, cq));
    }
    ::grpc::Status GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> AsyncGetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(AsyncGetTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> PrepareAsyncGetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(PrepareAsyncGetTableRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response, std::function<void(::grpc::Status)>) override;
      void PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)>) override;
      void Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* AsyncPartitionByRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* PrepareAsyncPartitionByRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* AsyncMergeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PrepareAsyncMergeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* AsyncGetTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PartitionBy_;
    const ::grpc::internal::RpcMethod rpcmethod_Merge_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Transforms a table into a partitioned table, consisting of many separate tables, each individually
    // addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
    virtual ::grpc::Status PartitionBy(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response);
    //
    // Given a partitioned table, returns a table with the contents of all of the constituent tables.
    virtual ::grpc::Status Merge(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response);
    //
    // Given a partitioned table and a row described by another table's contents, returns a table
    // that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
    // more than one is present, FAILED_PRECONDITION will be sent in response.
    //
    // If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
    // sent in response.
    //
    // The simplest way to generally use this is to subscribe to the key columns of the underlying
    // table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
    // desired keys, and pass that ticket to this service. After that request is sent (note that it
    // is not required to wait for it to complete), that new table ticket can be used to make this
    // GetTable request.
    virtual ::grpc::Status GetTable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PartitionBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PartitionBy() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PartitionBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartitionBy(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPartitionBy(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Merge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Merge() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Merge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Merge(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MergeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMerge(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTable() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTable(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PartitionBy<WithAsyncMethod_Merge<WithAsyncMethod_GetTable<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PartitionBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PartitionBy() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response) { return this->PartitionBy(context, request, response); }));}
    void SetMessageAllocatorFor_PartitionBy(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PartitionBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartitionBy(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PartitionBy(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Merge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Merge() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) { return this->Merge(context, request, response); }));}
    void SetMessageAllocatorFor_Merge(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Merge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Merge(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MergeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Merge(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MergeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTable() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) { return this->GetTable(context, request, response); }));}
    void SetMessageAllocatorFor_GetTable(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTable(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PartitionBy<WithCallbackMethod_Merge<WithCallbackMethod_GetTable<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PartitionBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PartitionBy() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PartitionBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartitionBy(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Merge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Merge() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Merge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Merge(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MergeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTable() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PartitionBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PartitionBy() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PartitionBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartitionBy(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPartitionBy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Merge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Merge() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Merge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Merge(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MergeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMerge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTable() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PartitionBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PartitionBy() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PartitionBy(context, request, response); }));
    }
    ~WithRawCallbackMethod_PartitionBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartitionBy(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PartitionBy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Merge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Merge() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Merge(context, request, response); }));
    }
    ~WithRawCallbackMethod_Merge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Merge(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MergeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Merge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTable() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PartitionBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PartitionBy() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* streamer) {
                       return this->StreamedPartitionBy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PartitionBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PartitionBy(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPartitionBy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::PartitionByRequest,::io::deephaven::proto::backplane::grpc::PartitionByResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Merge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Merge() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* streamer) {
                       return this->StreamedMerge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Merge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Merge(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MergeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMerge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::MergeRequest,::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTable() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* streamer) {
                       return this->StreamedGetTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::GetTableRequest,::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PartitionBy<WithStreamedUnaryMethod_Merge<WithStreamedUnaryMethod_GetTable<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PartitionBy<WithStreamedUnaryMethod_Merge<WithStreamedUnaryMethod_GetTable<Service > > > StreamedService;
};

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


#endif  // GRPC_deephaven_2fproto_2fpartitionedtable_2eproto__INCLUDED
