// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/partitionedtable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fpartitionedtable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fpartitionedtable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "deephaven/proto/table.pb.h"
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fpartitionedtable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class GetTableRequest;
struct GetTableRequestDefaultTypeInternal;
extern GetTableRequestDefaultTypeInternal _GetTableRequest_default_instance_;
class MergeRequest;
struct MergeRequestDefaultTypeInternal;
extern MergeRequestDefaultTypeInternal _MergeRequest_default_instance_;
class PartitionByRequest;
struct PartitionByRequestDefaultTypeInternal;
extern PartitionByRequestDefaultTypeInternal _PartitionByRequest_default_instance_;
class PartitionByResponse;
struct PartitionByResponseDefaultTypeInternal;
extern PartitionByResponseDefaultTypeInternal _PartitionByResponse_default_instance_;
class PartitionedTableDescriptor;
struct PartitionedTableDescriptorDefaultTypeInternal;
extern PartitionedTableDescriptorDefaultTypeInternal _PartitionedTableDescriptor_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::GetTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::GetTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::MergeRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::MergeRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::PartitionByRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::PartitionByRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::PartitionByResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::PartitionByResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class PartitionByRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.PartitionByRequest) */ {
 public:
  inline PartitionByRequest() : PartitionByRequest(nullptr) {}
  ~PartitionByRequest() override;
  explicit PROTOBUF_CONSTEXPR PartitionByRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionByRequest(const PartitionByRequest& from);
  PartitionByRequest(PartitionByRequest&& from) noexcept
    : PartitionByRequest() {
    *this = ::std::move(from);
  }

  inline PartitionByRequest& operator=(const PartitionByRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionByRequest& operator=(PartitionByRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionByRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionByRequest* internal_default_instance() {
    return reinterpret_cast<const PartitionByRequest*>(
               &_PartitionByRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PartitionByRequest& a, PartitionByRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionByRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionByRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionByRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionByRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartitionByRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PartitionByRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionByRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.PartitionByRequest";
  }
  protected:
  explicit PartitionByRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyColumnNamesFieldNumber = 3,
    kTableIdFieldNumber = 1,
    kResultIdFieldNumber = 2,
    kDropKeysFieldNumber = 4,
  };
  // repeated string key_column_names = 3;
  int key_column_names_size() const;
  private:
  int _internal_key_column_names_size() const;
  public:
  void clear_key_column_names();
  const std::string& key_column_names(int index) const;
  std::string* mutable_key_column_names(int index);
  void set_key_column_names(int index, const std::string& value);
  void set_key_column_names(int index, std::string&& value);
  void set_key_column_names(int index, const char* value);
  void set_key_column_names(int index, const char* value, size_t size);
  std::string* add_key_column_names();
  void add_key_column_names(const std::string& value);
  void add_key_column_names(std::string&& value);
  void add_key_column_names(const char* value);
  void add_key_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key_column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key_column_names();
  private:
  const std::string& _internal_key_column_names(int index) const;
  std::string* _internal_add_key_column_names();
  public:

  // .io.deephaven.proto.backplane.grpc.Ticket table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_table_id();
  void set_allocated_table_id(::io::deephaven::proto::backplane::grpc::Ticket* table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_table_id();

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_id();
  void set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_id();

  // bool drop_keys = 4;
  void clear_drop_keys();
  bool drop_keys() const;
  void set_drop_keys(bool value);
  private:
  bool _internal_drop_keys() const;
  void _internal_set_drop_keys(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.PartitionByRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_column_names_;
  ::io::deephaven::proto::backplane::grpc::Ticket* table_id_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_id_;
  bool drop_keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto;
};
// -------------------------------------------------------------------

class PartitionByResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.PartitionByResponse) */ {
 public:
  inline PartitionByResponse() : PartitionByResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PartitionByResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionByResponse(const PartitionByResponse& from);
  PartitionByResponse(PartitionByResponse&& from) noexcept
    : PartitionByResponse() {
    *this = ::std::move(from);
  }

  inline PartitionByResponse& operator=(const PartitionByResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionByResponse& operator=(PartitionByResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionByResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionByResponse* internal_default_instance() {
    return reinterpret_cast<const PartitionByResponse*>(
               &_PartitionByResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PartitionByResponse& a, PartitionByResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionByResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionByResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionByResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionByResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PartitionByResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PartitionByResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.PartitionByResponse";
  }
  protected:
  explicit PartitionByResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.PartitionByResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto;
};
// -------------------------------------------------------------------

class MergeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.MergeRequest) */ {
 public:
  inline MergeRequest() : MergeRequest(nullptr) {}
  ~MergeRequest() override;
  explicit PROTOBUF_CONSTEXPR MergeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeRequest(const MergeRequest& from);
  MergeRequest(MergeRequest&& from) noexcept
    : MergeRequest() {
    *this = ::std::move(from);
  }

  inline MergeRequest& operator=(const MergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRequest& operator=(MergeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeRequest* internal_default_instance() {
    return reinterpret_cast<const MergeRequest*>(
               &_MergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MergeRequest& a, MergeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MergeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MergeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MergeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MergeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.MergeRequest";
  }
  protected:
  explicit MergeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionedTableFieldNumber = 1,
    kResultIdFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
  bool has_partitioned_table() const;
  private:
  bool _internal_has_partitioned_table() const;
  public:
  void clear_partitioned_table();
  const ::io::deephaven::proto::backplane::grpc::Ticket& partitioned_table() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_partitioned_table();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_partitioned_table();
  void set_allocated_partitioned_table(::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_partitioned_table() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_partitioned_table();
  public:
  void unsafe_arena_set_allocated_partitioned_table(
      ::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_partitioned_table();

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_id();
  void set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.MergeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto;
};
// -------------------------------------------------------------------

class GetTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.GetTableRequest) */ {
 public:
  inline GetTableRequest() : GetTableRequest(nullptr) {}
  ~GetTableRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTableRequest(const GetTableRequest& from);
  GetTableRequest(GetTableRequest&& from) noexcept
    : GetTableRequest() {
    *this = ::std::move(from);
  }

  inline GetTableRequest& operator=(const GetTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTableRequest& operator=(GetTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTableRequest* internal_default_instance() {
    return reinterpret_cast<const GetTableRequest*>(
               &_GetTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTableRequest& a, GetTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.GetTableRequest";
  }
  protected:
  explicit GetTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionedTableFieldNumber = 1,
    kKeyTableTicketFieldNumber = 2,
    kResultIdFieldNumber = 4,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
  bool has_partitioned_table() const;
  private:
  bool _internal_has_partitioned_table() const;
  public:
  void clear_partitioned_table();
  const ::io::deephaven::proto::backplane::grpc::Ticket& partitioned_table() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_partitioned_table();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_partitioned_table();
  void set_allocated_partitioned_table(::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_partitioned_table() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_partitioned_table();
  public:
  void unsafe_arena_set_allocated_partitioned_table(
      ::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_partitioned_table();

  // .io.deephaven.proto.backplane.grpc.Ticket key_table_ticket = 2;
  bool has_key_table_ticket() const;
  private:
  bool _internal_has_key_table_ticket() const;
  public:
  void clear_key_table_ticket();
  const ::io::deephaven::proto::backplane::grpc::Ticket& key_table_ticket() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_key_table_ticket();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_key_table_ticket();
  void set_allocated_key_table_ticket(::io::deephaven::proto::backplane::grpc::Ticket* key_table_ticket);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_key_table_ticket() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_key_table_ticket();
  public:
  void unsafe_arena_set_allocated_key_table_ticket(
      ::io::deephaven::proto::backplane::grpc::Ticket* key_table_ticket);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_key_table_ticket();

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 4;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_id();
  void set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.GetTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table_;
  ::io::deephaven::proto::backplane::grpc::Ticket* key_table_ticket_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto;
};
// -------------------------------------------------------------------

class PartitionedTableDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor) */ {
 public:
  inline PartitionedTableDescriptor() : PartitionedTableDescriptor(nullptr) {}
  ~PartitionedTableDescriptor() override;
  explicit PROTOBUF_CONSTEXPR PartitionedTableDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionedTableDescriptor(const PartitionedTableDescriptor& from);
  PartitionedTableDescriptor(PartitionedTableDescriptor&& from) noexcept
    : PartitionedTableDescriptor() {
    *this = ::std::move(from);
  }

  inline PartitionedTableDescriptor& operator=(const PartitionedTableDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionedTableDescriptor& operator=(PartitionedTableDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionedTableDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionedTableDescriptor* internal_default_instance() {
    return reinterpret_cast<const PartitionedTableDescriptor*>(
               &_PartitionedTableDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PartitionedTableDescriptor& a, PartitionedTableDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionedTableDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionedTableDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionedTableDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionedTableDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartitionedTableDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PartitionedTableDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionedTableDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor";
  }
  protected:
  explicit PartitionedTableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyColumnNamesFieldNumber = 1,
    kConstituentDefinitionSchemaFieldNumber = 3,
    kConstituentColumnNameFieldNumber = 4,
    kUniqueKeysFieldNumber = 2,
    kConstituentChangesPermittedFieldNumber = 5,
  };
  // repeated string key_column_names = 1;
  int key_column_names_size() const;
  private:
  int _internal_key_column_names_size() const;
  public:
  void clear_key_column_names();
  const std::string& key_column_names(int index) const;
  std::string* mutable_key_column_names(int index);
  void set_key_column_names(int index, const std::string& value);
  void set_key_column_names(int index, std::string&& value);
  void set_key_column_names(int index, const char* value);
  void set_key_column_names(int index, const char* value, size_t size);
  std::string* add_key_column_names();
  void add_key_column_names(const std::string& value);
  void add_key_column_names(std::string&& value);
  void add_key_column_names(const char* value);
  void add_key_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key_column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key_column_names();
  private:
  const std::string& _internal_key_column_names(int index) const;
  std::string* _internal_add_key_column_names();
  public:

  // bytes constituent_definition_schema = 3;
  void clear_constituent_definition_schema();
  const std::string& constituent_definition_schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_constituent_definition_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_constituent_definition_schema();
  PROTOBUF_NODISCARD std::string* release_constituent_definition_schema();
  void set_allocated_constituent_definition_schema(std::string* constituent_definition_schema);
  private:
  const std::string& _internal_constituent_definition_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constituent_definition_schema(const std::string& value);
  std::string* _internal_mutable_constituent_definition_schema();
  public:

  // string constituent_column_name = 4;
  void clear_constituent_column_name();
  const std::string& constituent_column_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_constituent_column_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_constituent_column_name();
  PROTOBUF_NODISCARD std::string* release_constituent_column_name();
  void set_allocated_constituent_column_name(std::string* constituent_column_name);
  private:
  const std::string& _internal_constituent_column_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constituent_column_name(const std::string& value);
  std::string* _internal_mutable_constituent_column_name();
  public:

  // bool unique_keys = 2;
  void clear_unique_keys();
  bool unique_keys() const;
  void set_unique_keys(bool value);
  private:
  bool _internal_unique_keys() const;
  void _internal_set_unique_keys(bool value);
  public:

  // bool constituent_changes_permitted = 5;
  void clear_constituent_changes_permitted();
  bool constituent_changes_permitted() const;
  void set_constituent_changes_permitted(bool value);
  private:
  bool _internal_constituent_changes_permitted() const;
  void _internal_set_constituent_changes_permitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_column_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constituent_definition_schema_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constituent_column_name_;
  bool unique_keys_;
  bool constituent_changes_permitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PartitionByRequest

// .io.deephaven.proto.backplane.grpc.Ticket table_id = 1;
inline bool PartitionByRequest::_internal_has_table_id() const {
  return this != internal_default_instance() && table_id_ != nullptr;
}
inline bool PartitionByRequest::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PartitionByRequest::_internal_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PartitionByRequest::table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionByRequest.table_id)
  return _internal_table_id();
}
inline void PartitionByRequest::unsafe_arena_set_allocated_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  table_id_ = table_id;
  if (table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.PartitionByRequest.table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::release_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = table_id_;
  table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.PartitionByRequest.table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = table_id_;
  table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::_internal_mutable_table_id() {
  
  if (table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    table_id_ = p;
  }
  return table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::mutable_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PartitionByRequest.table_id)
  return _msg;
}
inline void PartitionByRequest::set_allocated_table_id(::io::deephaven::proto::backplane::grpc::Ticket* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id));
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    
  } else {
    
  }
  table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.PartitionByRequest.table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
inline bool PartitionByRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool PartitionByRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PartitionByRequest::_internal_result_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PartitionByRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionByRequest.result_id)
  return _internal_result_id();
}
inline void PartitionByRequest::unsafe_arena_set_allocated_result_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.PartitionByRequest.result_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::release_result_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.PartitionByRequest.result_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_id_ = p;
  }
  return result_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PartitionByRequest::mutable_result_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PartitionByRequest.result_id)
  return _msg;
}
inline void PartitionByRequest::set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id));
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.PartitionByRequest.result_id)
}

// repeated string key_column_names = 3;
inline int PartitionByRequest::_internal_key_column_names_size() const {
  return key_column_names_.size();
}
inline int PartitionByRequest::key_column_names_size() const {
  return _internal_key_column_names_size();
}
inline void PartitionByRequest::clear_key_column_names() {
  key_column_names_.Clear();
}
inline std::string* PartitionByRequest::add_key_column_names() {
  std::string* _s = _internal_add_key_column_names();
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
  return _s;
}
inline const std::string& PartitionByRequest::_internal_key_column_names(int index) const {
  return key_column_names_.Get(index);
}
inline const std::string& PartitionByRequest::key_column_names(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
  return _internal_key_column_names(index);
}
inline std::string* PartitionByRequest::mutable_key_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
  return key_column_names_.Mutable(index);
}
inline void PartitionByRequest::set_key_column_names(int index, const std::string& value) {
  key_column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline void PartitionByRequest::set_key_column_names(int index, std::string&& value) {
  key_column_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline void PartitionByRequest::set_key_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline void PartitionByRequest::set_key_column_names(int index, const char* value, size_t size) {
  key_column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline std::string* PartitionByRequest::_internal_add_key_column_names() {
  return key_column_names_.Add();
}
inline void PartitionByRequest::add_key_column_names(const std::string& value) {
  key_column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline void PartitionByRequest::add_key_column_names(std::string&& value) {
  key_column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline void PartitionByRequest::add_key_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline void PartitionByRequest::add_key_column_names(const char* value, size_t size) {
  key_column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PartitionByRequest::key_column_names() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
  return key_column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PartitionByRequest::mutable_key_column_names() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names)
  return &key_column_names_;
}

// bool drop_keys = 4;
inline void PartitionByRequest::clear_drop_keys() {
  drop_keys_ = false;
}
inline bool PartitionByRequest::_internal_drop_keys() const {
  return drop_keys_;
}
inline bool PartitionByRequest::drop_keys() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionByRequest.drop_keys)
  return _internal_drop_keys();
}
inline void PartitionByRequest::_internal_set_drop_keys(bool value) {
  
  drop_keys_ = value;
}
inline void PartitionByRequest::set_drop_keys(bool value) {
  _internal_set_drop_keys(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionByRequest.drop_keys)
}

// -------------------------------------------------------------------

// PartitionByResponse

// -------------------------------------------------------------------

// MergeRequest

// .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
inline bool MergeRequest::_internal_has_partitioned_table() const {
  return this != internal_default_instance() && partitioned_table_ != nullptr;
}
inline bool MergeRequest::has_partitioned_table() const {
  return _internal_has_partitioned_table();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& MergeRequest::_internal_partitioned_table() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = partitioned_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& MergeRequest::partitioned_table() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.MergeRequest.partitioned_table)
  return _internal_partitioned_table();
}
inline void MergeRequest::unsafe_arena_set_allocated_partitioned_table(
    ::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioned_table_);
  }
  partitioned_table_ = partitioned_table;
  if (partitioned_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.MergeRequest.partitioned_table)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::release_partitioned_table() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = partitioned_table_;
  partitioned_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::unsafe_arena_release_partitioned_table() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.MergeRequest.partitioned_table)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = partitioned_table_;
  partitioned_table_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::_internal_mutable_partitioned_table() {
  
  if (partitioned_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    partitioned_table_ = p;
  }
  return partitioned_table_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::mutable_partitioned_table() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_partitioned_table();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.MergeRequest.partitioned_table)
  return _msg;
}
inline void MergeRequest::set_allocated_partitioned_table(::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioned_table_);
  }
  if (partitioned_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioned_table));
    if (message_arena != submessage_arena) {
      partitioned_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partitioned_table, submessage_arena);
    }
    
  } else {
    
  }
  partitioned_table_ = partitioned_table;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.MergeRequest.partitioned_table)
}

// .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
inline bool MergeRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool MergeRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& MergeRequest::_internal_result_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& MergeRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.MergeRequest.result_id)
  return _internal_result_id();
}
inline void MergeRequest::unsafe_arena_set_allocated_result_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.MergeRequest.result_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::release_result_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.MergeRequest.result_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_id_ = p;
  }
  return result_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* MergeRequest::mutable_result_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.MergeRequest.result_id)
  return _msg;
}
inline void MergeRequest::set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id));
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.MergeRequest.result_id)
}

// -------------------------------------------------------------------

// GetTableRequest

// .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
inline bool GetTableRequest::_internal_has_partitioned_table() const {
  return this != internal_default_instance() && partitioned_table_ != nullptr;
}
inline bool GetTableRequest::has_partitioned_table() const {
  return _internal_has_partitioned_table();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& GetTableRequest::_internal_partitioned_table() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = partitioned_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& GetTableRequest::partitioned_table() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.GetTableRequest.partitioned_table)
  return _internal_partitioned_table();
}
inline void GetTableRequest::unsafe_arena_set_allocated_partitioned_table(
    ::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioned_table_);
  }
  partitioned_table_ = partitioned_table;
  if (partitioned_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.GetTableRequest.partitioned_table)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::release_partitioned_table() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = partitioned_table_;
  partitioned_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::unsafe_arena_release_partitioned_table() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.GetTableRequest.partitioned_table)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = partitioned_table_;
  partitioned_table_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::_internal_mutable_partitioned_table() {
  
  if (partitioned_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    partitioned_table_ = p;
  }
  return partitioned_table_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::mutable_partitioned_table() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_partitioned_table();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.GetTableRequest.partitioned_table)
  return _msg;
}
inline void GetTableRequest::set_allocated_partitioned_table(::io::deephaven::proto::backplane::grpc::Ticket* partitioned_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioned_table_);
  }
  if (partitioned_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioned_table));
    if (message_arena != submessage_arena) {
      partitioned_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partitioned_table, submessage_arena);
    }
    
  } else {
    
  }
  partitioned_table_ = partitioned_table;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.GetTableRequest.partitioned_table)
}

// .io.deephaven.proto.backplane.grpc.Ticket key_table_ticket = 2;
inline bool GetTableRequest::_internal_has_key_table_ticket() const {
  return this != internal_default_instance() && key_table_ticket_ != nullptr;
}
inline bool GetTableRequest::has_key_table_ticket() const {
  return _internal_has_key_table_ticket();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& GetTableRequest::_internal_key_table_ticket() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = key_table_ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& GetTableRequest::key_table_ticket() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.GetTableRequest.key_table_ticket)
  return _internal_key_table_ticket();
}
inline void GetTableRequest::unsafe_arena_set_allocated_key_table_ticket(
    ::io::deephaven::proto::backplane::grpc::Ticket* key_table_ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_table_ticket_);
  }
  key_table_ticket_ = key_table_ticket;
  if (key_table_ticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.GetTableRequest.key_table_ticket)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::release_key_table_ticket() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = key_table_ticket_;
  key_table_ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::unsafe_arena_release_key_table_ticket() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.GetTableRequest.key_table_ticket)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = key_table_ticket_;
  key_table_ticket_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::_internal_mutable_key_table_ticket() {
  
  if (key_table_ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    key_table_ticket_ = p;
  }
  return key_table_ticket_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::mutable_key_table_ticket() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_key_table_ticket();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.GetTableRequest.key_table_ticket)
  return _msg;
}
inline void GetTableRequest::set_allocated_key_table_ticket(::io::deephaven::proto::backplane::grpc::Ticket* key_table_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_table_ticket_);
  }
  if (key_table_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_table_ticket));
    if (message_arena != submessage_arena) {
      key_table_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_table_ticket, submessage_arena);
    }
    
  } else {
    
  }
  key_table_ticket_ = key_table_ticket;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.GetTableRequest.key_table_ticket)
}

// .io.deephaven.proto.backplane.grpc.Ticket result_id = 4;
inline bool GetTableRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool GetTableRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& GetTableRequest::_internal_result_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& GetTableRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.GetTableRequest.result_id)
  return _internal_result_id();
}
inline void GetTableRequest::unsafe_arena_set_allocated_result_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.GetTableRequest.result_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::release_result_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.GetTableRequest.result_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_id_ = p;
  }
  return result_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* GetTableRequest::mutable_result_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.GetTableRequest.result_id)
  return _msg;
}
inline void GetTableRequest::set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id));
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.GetTableRequest.result_id)
}

// -------------------------------------------------------------------

// PartitionedTableDescriptor

// repeated string key_column_names = 1;
inline int PartitionedTableDescriptor::_internal_key_column_names_size() const {
  return key_column_names_.size();
}
inline int PartitionedTableDescriptor::key_column_names_size() const {
  return _internal_key_column_names_size();
}
inline void PartitionedTableDescriptor::clear_key_column_names() {
  key_column_names_.Clear();
}
inline std::string* PartitionedTableDescriptor::add_key_column_names() {
  std::string* _s = _internal_add_key_column_names();
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
  return _s;
}
inline const std::string& PartitionedTableDescriptor::_internal_key_column_names(int index) const {
  return key_column_names_.Get(index);
}
inline const std::string& PartitionedTableDescriptor::key_column_names(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
  return _internal_key_column_names(index);
}
inline std::string* PartitionedTableDescriptor::mutable_key_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
  return key_column_names_.Mutable(index);
}
inline void PartitionedTableDescriptor::set_key_column_names(int index, const std::string& value) {
  key_column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline void PartitionedTableDescriptor::set_key_column_names(int index, std::string&& value) {
  key_column_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline void PartitionedTableDescriptor::set_key_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline void PartitionedTableDescriptor::set_key_column_names(int index, const char* value, size_t size) {
  key_column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline std::string* PartitionedTableDescriptor::_internal_add_key_column_names() {
  return key_column_names_.Add();
}
inline void PartitionedTableDescriptor::add_key_column_names(const std::string& value) {
  key_column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline void PartitionedTableDescriptor::add_key_column_names(std::string&& value) {
  key_column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline void PartitionedTableDescriptor::add_key_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline void PartitionedTableDescriptor::add_key_column_names(const char* value, size_t size) {
  key_column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PartitionedTableDescriptor::key_column_names() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
  return key_column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PartitionedTableDescriptor::mutable_key_column_names() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names)
  return &key_column_names_;
}

// string constituent_column_name = 4;
inline void PartitionedTableDescriptor::clear_constituent_column_name() {
  constituent_column_name_.ClearToEmpty();
}
inline const std::string& PartitionedTableDescriptor::constituent_column_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_column_name)
  return _internal_constituent_column_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PartitionedTableDescriptor::set_constituent_column_name(ArgT0&& arg0, ArgT... args) {
 
 constituent_column_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_column_name)
}
inline std::string* PartitionedTableDescriptor::mutable_constituent_column_name() {
  std::string* _s = _internal_mutable_constituent_column_name();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_column_name)
  return _s;
}
inline const std::string& PartitionedTableDescriptor::_internal_constituent_column_name() const {
  return constituent_column_name_.Get();
}
inline void PartitionedTableDescriptor::_internal_set_constituent_column_name(const std::string& value) {
  
  constituent_column_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PartitionedTableDescriptor::_internal_mutable_constituent_column_name() {
  
  return constituent_column_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PartitionedTableDescriptor::release_constituent_column_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_column_name)
  return constituent_column_name_.Release();
}
inline void PartitionedTableDescriptor::set_allocated_constituent_column_name(std::string* constituent_column_name) {
  if (constituent_column_name != nullptr) {
    
  } else {
    
  }
  constituent_column_name_.SetAllocated(constituent_column_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (constituent_column_name_.IsDefault()) {
    constituent_column_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_column_name)
}

// bool unique_keys = 2;
inline void PartitionedTableDescriptor::clear_unique_keys() {
  unique_keys_ = false;
}
inline bool PartitionedTableDescriptor::_internal_unique_keys() const {
  return unique_keys_;
}
inline bool PartitionedTableDescriptor::unique_keys() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.unique_keys)
  return _internal_unique_keys();
}
inline void PartitionedTableDescriptor::_internal_set_unique_keys(bool value) {
  
  unique_keys_ = value;
}
inline void PartitionedTableDescriptor::set_unique_keys(bool value) {
  _internal_set_unique_keys(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.unique_keys)
}

// bytes constituent_definition_schema = 3;
inline void PartitionedTableDescriptor::clear_constituent_definition_schema() {
  constituent_definition_schema_.ClearToEmpty();
}
inline const std::string& PartitionedTableDescriptor::constituent_definition_schema() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_definition_schema)
  return _internal_constituent_definition_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PartitionedTableDescriptor::set_constituent_definition_schema(ArgT0&& arg0, ArgT... args) {
 
 constituent_definition_schema_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_definition_schema)
}
inline std::string* PartitionedTableDescriptor::mutable_constituent_definition_schema() {
  std::string* _s = _internal_mutable_constituent_definition_schema();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_definition_schema)
  return _s;
}
inline const std::string& PartitionedTableDescriptor::_internal_constituent_definition_schema() const {
  return constituent_definition_schema_.Get();
}
inline void PartitionedTableDescriptor::_internal_set_constituent_definition_schema(const std::string& value) {
  
  constituent_definition_schema_.Set(value, GetArenaForAllocation());
}
inline std::string* PartitionedTableDescriptor::_internal_mutable_constituent_definition_schema() {
  
  return constituent_definition_schema_.Mutable(GetArenaForAllocation());
}
inline std::string* PartitionedTableDescriptor::release_constituent_definition_schema() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_definition_schema)
  return constituent_definition_schema_.Release();
}
inline void PartitionedTableDescriptor::set_allocated_constituent_definition_schema(std::string* constituent_definition_schema) {
  if (constituent_definition_schema != nullptr) {
    
  } else {
    
  }
  constituent_definition_schema_.SetAllocated(constituent_definition_schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (constituent_definition_schema_.IsDefault()) {
    constituent_definition_schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_definition_schema)
}

// bool constituent_changes_permitted = 5;
inline void PartitionedTableDescriptor::clear_constituent_changes_permitted() {
  constituent_changes_permitted_ = false;
}
inline bool PartitionedTableDescriptor::_internal_constituent_changes_permitted() const {
  return constituent_changes_permitted_;
}
inline bool PartitionedTableDescriptor::constituent_changes_permitted() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_changes_permitted)
  return _internal_constituent_changes_permitted();
}
inline void PartitionedTableDescriptor::_internal_set_constituent_changes_permitted(bool value) {
  
  constituent_changes_permitted_ = value;
}
inline void PartitionedTableDescriptor::set_constituent_changes_permitted(bool value) {
  _internal_set_constituent_changes_permitted(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_changes_permitted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fpartitionedtable_2eproto
