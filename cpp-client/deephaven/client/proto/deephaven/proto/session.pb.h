// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/session.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fsession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fsession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fsession_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fsession_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2fsession_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class CloseSessionResponse;
struct CloseSessionResponseDefaultTypeInternal;
extern CloseSessionResponseDefaultTypeInternal _CloseSessionResponse_default_instance_;
class ExportNotification;
struct ExportNotificationDefaultTypeInternal;
extern ExportNotificationDefaultTypeInternal _ExportNotification_default_instance_;
class ExportNotificationRequest;
struct ExportNotificationRequestDefaultTypeInternal;
extern ExportNotificationRequestDefaultTypeInternal _ExportNotificationRequest_default_instance_;
class ExportRequest;
struct ExportRequestDefaultTypeInternal;
extern ExportRequestDefaultTypeInternal _ExportRequest_default_instance_;
class ExportResponse;
struct ExportResponseDefaultTypeInternal;
extern ExportResponseDefaultTypeInternal _ExportResponse_default_instance_;
class HandshakeRequest;
struct HandshakeRequestDefaultTypeInternal;
extern HandshakeRequestDefaultTypeInternal _HandshakeRequest_default_instance_;
class HandshakeResponse;
struct HandshakeResponseDefaultTypeInternal;
extern HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
class ReleaseRequest;
struct ReleaseRequestDefaultTypeInternal;
extern ReleaseRequestDefaultTypeInternal _ReleaseRequest_default_instance_;
class ReleaseResponse;
struct ReleaseResponseDefaultTypeInternal;
extern ReleaseResponseDefaultTypeInternal _ReleaseResponse_default_instance_;
class TerminationNotificationRequest;
struct TerminationNotificationRequestDefaultTypeInternal;
extern TerminationNotificationRequestDefaultTypeInternal _TerminationNotificationRequest_default_instance_;
class TerminationNotificationResponse;
struct TerminationNotificationResponseDefaultTypeInternal;
extern TerminationNotificationResponseDefaultTypeInternal _TerminationNotificationResponse_default_instance_;
class TerminationNotificationResponse_StackTrace;
struct TerminationNotificationResponse_StackTraceDefaultTypeInternal;
extern TerminationNotificationResponse_StackTraceDefaultTypeInternal _TerminationNotificationResponse_StackTrace_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::CloseSessionResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::CloseSessionResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportNotification* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportNotification>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportNotificationRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ExportResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ExportResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HandshakeRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HandshakeRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HandshakeResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HandshakeResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ReleaseRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ReleaseRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ReleaseResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ReleaseResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

enum ExportNotification_State : int {
  ExportNotification_State_UNKNOWN = 0,
  ExportNotification_State_PENDING = 1,
  ExportNotification_State_PUBLISHING = 2,
  ExportNotification_State_QUEUED = 3,
  ExportNotification_State_RUNNING = 4,
  ExportNotification_State_EXPORTED = 5,
  ExportNotification_State_RELEASED = 6,
  ExportNotification_State_CANCELLED = 7,
  ExportNotification_State_FAILED = 8,
  ExportNotification_State_DEPENDENCY_FAILED = 9,
  ExportNotification_State_DEPENDENCY_NEVER_FOUND = 10,
  ExportNotification_State_DEPENDENCY_CANCELLED = 11,
  ExportNotification_State_DEPENDENCY_RELEASED = 12,
  ExportNotification_State_ExportNotification_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ExportNotification_State_ExportNotification_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ExportNotification_State_IsValid(int value);
constexpr ExportNotification_State ExportNotification_State_State_MIN = ExportNotification_State_UNKNOWN;
constexpr ExportNotification_State ExportNotification_State_State_MAX = ExportNotification_State_DEPENDENCY_RELEASED;
constexpr int ExportNotification_State_State_ARRAYSIZE = ExportNotification_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExportNotification_State_descriptor();
template<typename T>
inline const std::string& ExportNotification_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExportNotification_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExportNotification_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExportNotification_State_descriptor(), enum_t_value);
}
inline bool ExportNotification_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExportNotification_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExportNotification_State>(
    ExportNotification_State_descriptor(), name, value);
}
// ===================================================================

class HandshakeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HandshakeRequest) */ {
 public:
  inline HandshakeRequest() : HandshakeRequest(nullptr) {}
  ~HandshakeRequest() override;
  explicit PROTOBUF_CONSTEXPR HandshakeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeRequest(const HandshakeRequest& from);
  HandshakeRequest(HandshakeRequest&& from) noexcept
    : HandshakeRequest() {
    *this = ::std::move(from);
  }

  inline HandshakeRequest& operator=(const HandshakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeRequest& operator=(HandshakeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeRequest* internal_default_instance() {
    return reinterpret_cast<const HandshakeRequest*>(
               &_HandshakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HandshakeRequest& a, HandshakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandshakeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HandshakeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HandshakeRequest";
  }
  protected:
  explicit HandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kAuthProtocolFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // sint32 auth_protocol = 1;
  void clear_auth_protocol();
  int32_t auth_protocol() const;
  void set_auth_protocol(int32_t value);
  private:
  int32_t _internal_auth_protocol() const;
  void _internal_set_auth_protocol(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HandshakeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  int32_t auth_protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class HandshakeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HandshakeResponse) */ {
 public:
  inline HandshakeResponse() : HandshakeResponse(nullptr) {}
  ~HandshakeResponse() override;
  explicit PROTOBUF_CONSTEXPR HandshakeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeResponse(const HandshakeResponse& from);
  HandshakeResponse(HandshakeResponse&& from) noexcept
    : HandshakeResponse() {
    *this = ::std::move(from);
  }

  inline HandshakeResponse& operator=(const HandshakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeResponse& operator=(HandshakeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeResponse*>(
               &_HandshakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandshakeResponse& a, HandshakeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandshakeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HandshakeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HandshakeResponse";
  }
  protected:
  explicit HandshakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataHeaderFieldNumber = 1,
    kSessionTokenFieldNumber = 2,
    kTokenDeadlineTimeMillisFieldNumber = 3,
    kTokenExpirationDelayMillisFieldNumber = 4,
  };
  // bytes metadata_header = 1;
  void clear_metadata_header();
  const std::string& metadata_header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata_header();
  PROTOBUF_NODISCARD std::string* release_metadata_header();
  void set_allocated_metadata_header(std::string* metadata_header);
  private:
  const std::string& _internal_metadata_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_header(const std::string& value);
  std::string* _internal_mutable_metadata_header();
  public:

  // bytes session_token = 2;
  void clear_session_token();
  const std::string& session_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_token();
  PROTOBUF_NODISCARD std::string* release_session_token();
  void set_allocated_session_token(std::string* session_token);
  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(const std::string& value);
  std::string* _internal_mutable_session_token();
  public:

  // sint64 token_deadline_time_millis = 3 [jstype = JS_STRING];
  void clear_token_deadline_time_millis();
  int64_t token_deadline_time_millis() const;
  void set_token_deadline_time_millis(int64_t value);
  private:
  int64_t _internal_token_deadline_time_millis() const;
  void _internal_set_token_deadline_time_millis(int64_t value);
  public:

  // sint64 token_expiration_delay_millis = 4 [jstype = JS_STRING];
  void clear_token_expiration_delay_millis();
  int64_t token_expiration_delay_millis() const;
  void set_token_expiration_delay_millis(int64_t value);
  private:
  int64_t _internal_token_expiration_delay_millis() const;
  void _internal_set_token_expiration_delay_millis(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HandshakeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_token_;
  int64_t token_deadline_time_millis_;
  int64_t token_expiration_delay_millis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class CloseSessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.CloseSessionResponse) */ {
 public:
  inline CloseSessionResponse() : CloseSessionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CloseSessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseSessionResponse(const CloseSessionResponse& from);
  CloseSessionResponse(CloseSessionResponse&& from) noexcept
    : CloseSessionResponse() {
    *this = ::std::move(from);
  }

  inline CloseSessionResponse& operator=(const CloseSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSessionResponse& operator=(CloseSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSessionResponse* internal_default_instance() {
    return reinterpret_cast<const CloseSessionResponse*>(
               &_CloseSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseSessionResponse& a, CloseSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseSessionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseSessionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseSessionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.CloseSessionResponse";
  }
  protected:
  explicit CloseSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.CloseSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class ReleaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ReleaseRequest) */ {
 public:
  inline ReleaseRequest() : ReleaseRequest(nullptr) {}
  ~ReleaseRequest() override;
  explicit PROTOBUF_CONSTEXPR ReleaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseRequest(const ReleaseRequest& from);
  ReleaseRequest(ReleaseRequest&& from) noexcept
    : ReleaseRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseRequest& operator=(const ReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseRequest& operator=(ReleaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseRequest*>(
               &_ReleaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReleaseRequest& a, ReleaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReleaseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ReleaseRequest";
  }
  protected:
  explicit ReleaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_id();
  void set_allocated_id(::io::deephaven::proto::backplane::grpc::Ticket* id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ReleaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class ReleaseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ReleaseResponse) */ {
 public:
  inline ReleaseResponse() : ReleaseResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReleaseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseResponse(const ReleaseResponse& from);
  ReleaseResponse(ReleaseResponse&& from) noexcept
    : ReleaseResponse() {
    *this = ::std::move(from);
  }

  inline ReleaseResponse& operator=(const ReleaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseResponse& operator=(ReleaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseResponse* internal_default_instance() {
    return reinterpret_cast<const ReleaseResponse*>(
               &_ReleaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReleaseResponse& a, ReleaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReleaseResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReleaseResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ReleaseResponse";
  }
  protected:
  explicit ReleaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ReleaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class ExportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportRequest) */ {
 public:
  inline ExportRequest() : ExportRequest(nullptr) {}
  ~ExportRequest() override;
  explicit PROTOBUF_CONSTEXPR ExportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportRequest(const ExportRequest& from);
  ExportRequest(ExportRequest&& from) noexcept
    : ExportRequest() {
    *this = ::std::move(from);
  }

  inline ExportRequest& operator=(const ExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportRequest& operator=(ExportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportRequest*>(
               &_ExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExportRequest& a, ExportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExportRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportRequest";
  }
  protected:
  explicit ExportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kResultIdFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& source_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_source_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* source_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* source_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_source_id();

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  bool has_result_id() const;
  private:
  bool _internal_has_result_id() const;
  public:
  void clear_result_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_id();
  void set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_id();
  public:
  void unsafe_arena_set_allocated_result_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* source_id_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class ExportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportResponse) */ {
 public:
  inline ExportResponse() : ExportResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ExportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportResponse(const ExportResponse& from);
  ExportResponse(ExportResponse&& from) noexcept
    : ExportResponse() {
    *this = ::std::move(from);
  }

  inline ExportResponse& operator=(const ExportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportResponse& operator=(ExportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportResponse*>(
               &_ExportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExportResponse& a, ExportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExportResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExportResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportResponse";
  }
  protected:
  explicit ExportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class ExportNotificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportNotificationRequest) */ {
 public:
  inline ExportNotificationRequest() : ExportNotificationRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ExportNotificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportNotificationRequest(const ExportNotificationRequest& from);
  ExportNotificationRequest(ExportNotificationRequest&& from) noexcept
    : ExportNotificationRequest() {
    *this = ::std::move(from);
  }

  inline ExportNotificationRequest& operator=(const ExportNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportNotificationRequest& operator=(ExportNotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportNotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const ExportNotificationRequest*>(
               &_ExportNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExportNotificationRequest& a, ExportNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportNotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportNotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportNotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportNotificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExportNotificationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExportNotificationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportNotificationRequest";
  }
  protected:
  explicit ExportNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportNotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class ExportNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportNotification) */ {
 public:
  inline ExportNotification() : ExportNotification(nullptr) {}
  ~ExportNotification() override;
  explicit PROTOBUF_CONSTEXPR ExportNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportNotification(const ExportNotification& from);
  ExportNotification(ExportNotification&& from) noexcept
    : ExportNotification() {
    *this = ::std::move(from);
  }

  inline ExportNotification& operator=(const ExportNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportNotification& operator=(ExportNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportNotification* internal_default_instance() {
    return reinterpret_cast<const ExportNotification*>(
               &_ExportNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExportNotification& a, ExportNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExportNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportNotification";
  }
  protected:
  explicit ExportNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExportNotification_State State;
  static constexpr State UNKNOWN =
    ExportNotification_State_UNKNOWN;
  static constexpr State PENDING =
    ExportNotification_State_PENDING;
  static constexpr State PUBLISHING =
    ExportNotification_State_PUBLISHING;
  static constexpr State QUEUED =
    ExportNotification_State_QUEUED;
  static constexpr State RUNNING =
    ExportNotification_State_RUNNING;
  static constexpr State EXPORTED =
    ExportNotification_State_EXPORTED;
  static constexpr State RELEASED =
    ExportNotification_State_RELEASED;
  static constexpr State CANCELLED =
    ExportNotification_State_CANCELLED;
  static constexpr State FAILED =
    ExportNotification_State_FAILED;
  static constexpr State DEPENDENCY_FAILED =
    ExportNotification_State_DEPENDENCY_FAILED;
  static constexpr State DEPENDENCY_NEVER_FOUND =
    ExportNotification_State_DEPENDENCY_NEVER_FOUND;
  static constexpr State DEPENDENCY_CANCELLED =
    ExportNotification_State_DEPENDENCY_CANCELLED;
  static constexpr State DEPENDENCY_RELEASED =
    ExportNotification_State_DEPENDENCY_RELEASED;
  static inline bool State_IsValid(int value) {
    return ExportNotification_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ExportNotification_State_State_MIN;
  static constexpr State State_MAX =
    ExportNotification_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ExportNotification_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ExportNotification_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ExportNotification_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ExportNotification_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 3,
    kDependentHandleFieldNumber = 4,
    kTicketFieldNumber = 1,
    kExportStateFieldNumber = 2,
  };
  // string context = 3;
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // string dependent_handle = 4;
  void clear_dependent_handle();
  const std::string& dependent_handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dependent_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dependent_handle();
  PROTOBUF_NODISCARD std::string* release_dependent_handle();
  void set_allocated_dependent_handle(std::string* dependent_handle);
  private:
  const std::string& _internal_dependent_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dependent_handle(const std::string& value);
  std::string* _internal_mutable_dependent_handle();
  public:

  // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::io::deephaven::proto::backplane::grpc::Ticket& ticket() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_ticket();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_ticket();
  void set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* ticket);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_ticket() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_ticket();
  public:
  void unsafe_arena_set_allocated_ticket(
      ::io::deephaven::proto::backplane::grpc::Ticket* ticket);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_ticket();

  // .io.deephaven.proto.backplane.grpc.ExportNotification.State export_state = 2;
  void clear_export_state();
  ::io::deephaven::proto::backplane::grpc::ExportNotification_State export_state() const;
  void set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value);
  private:
  ::io::deephaven::proto::backplane::grpc::ExportNotification_State _internal_export_state() const;
  void _internal_set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dependent_handle_;
  ::io::deephaven::proto::backplane::grpc::Ticket* ticket_;
  int export_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class TerminationNotificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TerminationNotificationRequest) */ {
 public:
  inline TerminationNotificationRequest() : TerminationNotificationRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TerminationNotificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminationNotificationRequest(const TerminationNotificationRequest& from);
  TerminationNotificationRequest(TerminationNotificationRequest&& from) noexcept
    : TerminationNotificationRequest() {
    *this = ::std::move(from);
  }

  inline TerminationNotificationRequest& operator=(const TerminationNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminationNotificationRequest& operator=(TerminationNotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminationNotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminationNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const TerminationNotificationRequest*>(
               &_TerminationNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TerminationNotificationRequest& a, TerminationNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminationNotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminationNotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminationNotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminationNotificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TerminationNotificationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TerminationNotificationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TerminationNotificationRequest";
  }
  protected:
  explicit TerminationNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TerminationNotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class TerminationNotificationResponse_StackTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace) */ {
 public:
  inline TerminationNotificationResponse_StackTrace() : TerminationNotificationResponse_StackTrace(nullptr) {}
  ~TerminationNotificationResponse_StackTrace() override;
  explicit PROTOBUF_CONSTEXPR TerminationNotificationResponse_StackTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminationNotificationResponse_StackTrace(const TerminationNotificationResponse_StackTrace& from);
  TerminationNotificationResponse_StackTrace(TerminationNotificationResponse_StackTrace&& from) noexcept
    : TerminationNotificationResponse_StackTrace() {
    *this = ::std::move(from);
  }

  inline TerminationNotificationResponse_StackTrace& operator=(const TerminationNotificationResponse_StackTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminationNotificationResponse_StackTrace& operator=(TerminationNotificationResponse_StackTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminationNotificationResponse_StackTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminationNotificationResponse_StackTrace* internal_default_instance() {
    return reinterpret_cast<const TerminationNotificationResponse_StackTrace*>(
               &_TerminationNotificationResponse_StackTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TerminationNotificationResponse_StackTrace& a, TerminationNotificationResponse_StackTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminationNotificationResponse_StackTrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminationNotificationResponse_StackTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminationNotificationResponse_StackTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminationNotificationResponse_StackTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TerminationNotificationResponse_StackTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TerminationNotificationResponse_StackTrace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminationNotificationResponse_StackTrace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace";
  }
  protected:
  explicit TerminationNotificationResponse_StackTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 3,
    kTypeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // repeated string elements = 3;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  const std::string& elements(int index) const;
  std::string* mutable_elements(int index);
  void set_elements(int index, const std::string& value);
  void set_elements(int index, std::string&& value);
  void set_elements(int index, const char* value);
  void set_elements(int index, const char* value, size_t size);
  std::string* add_elements();
  void add_elements(const std::string& value);
  void add_elements(std::string&& value);
  void add_elements(const char* value);
  void add_elements(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_elements();
  private:
  const std::string& _internal_elements(int index) const;
  std::string* _internal_add_elements();
  public:

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> elements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// -------------------------------------------------------------------

class TerminationNotificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse) */ {
 public:
  inline TerminationNotificationResponse() : TerminationNotificationResponse(nullptr) {}
  ~TerminationNotificationResponse() override;
  explicit PROTOBUF_CONSTEXPR TerminationNotificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminationNotificationResponse(const TerminationNotificationResponse& from);
  TerminationNotificationResponse(TerminationNotificationResponse&& from) noexcept
    : TerminationNotificationResponse() {
    *this = ::std::move(from);
  }

  inline TerminationNotificationResponse& operator=(const TerminationNotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminationNotificationResponse& operator=(TerminationNotificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminationNotificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminationNotificationResponse* internal_default_instance() {
    return reinterpret_cast<const TerminationNotificationResponse*>(
               &_TerminationNotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TerminationNotificationResponse& a, TerminationNotificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminationNotificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminationNotificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminationNotificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminationNotificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TerminationNotificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TerminationNotificationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminationNotificationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TerminationNotificationResponse";
  }
  protected:
  explicit TerminationNotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TerminationNotificationResponse_StackTrace StackTrace;

  // accessors -------------------------------------------------------

  enum : int {
    kStackTracesFieldNumber = 4,
    kReasonFieldNumber = 2,
    kAbnormalTerminationFieldNumber = 1,
    kIsFromUncaughtExceptionFieldNumber = 3,
  };
  // repeated .io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace stack_traces = 4;
  int stack_traces_size() const;
  private:
  int _internal_stack_traces_size() const;
  public:
  void clear_stack_traces();
  ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* mutable_stack_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace >*
      mutable_stack_traces();
  private:
  const ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace& _internal_stack_traces(int index) const;
  ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* _internal_add_stack_traces();
  public:
  const ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace& stack_traces(int index) const;
  ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* add_stack_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace >&
      stack_traces() const;

  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool abnormal_termination = 1;
  void clear_abnormal_termination();
  bool abnormal_termination() const;
  void set_abnormal_termination(bool value);
  private:
  bool _internal_abnormal_termination() const;
  void _internal_set_abnormal_termination(bool value);
  public:

  // bool is_from_uncaught_exception = 3;
  void clear_is_from_uncaught_exception();
  bool is_from_uncaught_exception() const;
  void set_is_from_uncaught_exception(bool value);
  private:
  bool _internal_is_from_uncaught_exception() const;
  void _internal_set_is_from_uncaught_exception(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace > stack_traces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool abnormal_termination_;
  bool is_from_uncaught_exception_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HandshakeRequest

// sint32 auth_protocol = 1;
inline void HandshakeRequest::clear_auth_protocol() {
  auth_protocol_ = 0;
}
inline int32_t HandshakeRequest::_internal_auth_protocol() const {
  return auth_protocol_;
}
inline int32_t HandshakeRequest::auth_protocol() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeRequest.auth_protocol)
  return _internal_auth_protocol();
}
inline void HandshakeRequest::_internal_set_auth_protocol(int32_t value) {
  
  auth_protocol_ = value;
}
inline void HandshakeRequest::set_auth_protocol(int32_t value) {
  _internal_set_auth_protocol(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeRequest.auth_protocol)
}

// bytes payload = 2;
inline void HandshakeRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& HandshakeRequest::payload() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeRequest::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
}
inline std::string* HandshakeRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
  return _s;
}
inline const std::string& HandshakeRequest::_internal_payload() const {
  return payload_.Get();
}
inline void HandshakeRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeRequest::release_payload() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
  return payload_.Release();
}
inline void HandshakeRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault()) {
    payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
}

// -------------------------------------------------------------------

// HandshakeResponse

// bytes metadata_header = 1;
inline void HandshakeResponse::clear_metadata_header() {
  metadata_header_.ClearToEmpty();
}
inline const std::string& HandshakeResponse::metadata_header() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
  return _internal_metadata_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeResponse::set_metadata_header(ArgT0&& arg0, ArgT... args) {
 
 metadata_header_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
}
inline std::string* HandshakeResponse::mutable_metadata_header() {
  std::string* _s = _internal_mutable_metadata_header();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
  return _s;
}
inline const std::string& HandshakeResponse::_internal_metadata_header() const {
  return metadata_header_.Get();
}
inline void HandshakeResponse::_internal_set_metadata_header(const std::string& value) {
  
  metadata_header_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeResponse::_internal_mutable_metadata_header() {
  
  return metadata_header_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeResponse::release_metadata_header() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
  return metadata_header_.Release();
}
inline void HandshakeResponse::set_allocated_metadata_header(std::string* metadata_header) {
  if (metadata_header != nullptr) {
    
  } else {
    
  }
  metadata_header_.SetAllocated(metadata_header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_header_.IsDefault()) {
    metadata_header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
}

// bytes session_token = 2;
inline void HandshakeResponse::clear_session_token() {
  session_token_.ClearToEmpty();
}
inline const std::string& HandshakeResponse::session_token() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
  return _internal_session_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HandshakeResponse::set_session_token(ArgT0&& arg0, ArgT... args) {
 
 session_token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
}
inline std::string* HandshakeResponse::mutable_session_token() {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
  return _s;
}
inline const std::string& HandshakeResponse::_internal_session_token() const {
  return session_token_.Get();
}
inline void HandshakeResponse::_internal_set_session_token(const std::string& value) {
  
  session_token_.Set(value, GetArenaForAllocation());
}
inline std::string* HandshakeResponse::_internal_mutable_session_token() {
  
  return session_token_.Mutable(GetArenaForAllocation());
}
inline std::string* HandshakeResponse::release_session_token() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
  return session_token_.Release();
}
inline void HandshakeResponse::set_allocated_session_token(std::string* session_token) {
  if (session_token != nullptr) {
    
  } else {
    
  }
  session_token_.SetAllocated(session_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_token_.IsDefault()) {
    session_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
}

// sint64 token_deadline_time_millis = 3 [jstype = JS_STRING];
inline void HandshakeResponse::clear_token_deadline_time_millis() {
  token_deadline_time_millis_ = int64_t{0};
}
inline int64_t HandshakeResponse::_internal_token_deadline_time_millis() const {
  return token_deadline_time_millis_;
}
inline int64_t HandshakeResponse::token_deadline_time_millis() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_deadline_time_millis)
  return _internal_token_deadline_time_millis();
}
inline void HandshakeResponse::_internal_set_token_deadline_time_millis(int64_t value) {
  
  token_deadline_time_millis_ = value;
}
inline void HandshakeResponse::set_token_deadline_time_millis(int64_t value) {
  _internal_set_token_deadline_time_millis(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_deadline_time_millis)
}

// sint64 token_expiration_delay_millis = 4 [jstype = JS_STRING];
inline void HandshakeResponse::clear_token_expiration_delay_millis() {
  token_expiration_delay_millis_ = int64_t{0};
}
inline int64_t HandshakeResponse::_internal_token_expiration_delay_millis() const {
  return token_expiration_delay_millis_;
}
inline int64_t HandshakeResponse::token_expiration_delay_millis() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_expiration_delay_millis)
  return _internal_token_expiration_delay_millis();
}
inline void HandshakeResponse::_internal_set_token_expiration_delay_millis(int64_t value) {
  
  token_expiration_delay_millis_ = value;
}
inline void HandshakeResponse::set_token_expiration_delay_millis(int64_t value) {
  _internal_set_token_expiration_delay_millis(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_expiration_delay_millis)
}

// -------------------------------------------------------------------

// CloseSessionResponse

// -------------------------------------------------------------------

// ReleaseRequest

// .io.deephaven.proto.backplane.grpc.Ticket id = 1;
inline bool ReleaseRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReleaseRequest::has_id() const {
  return _internal_has_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ReleaseRequest::_internal_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ReleaseRequest::id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
  return _internal_id();
}
inline void ReleaseRequest::unsafe_arena_set_allocated_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::release_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::mutable_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
  return _msg;
}
inline void ReleaseRequest::set_allocated_id(::io::deephaven::proto::backplane::grpc::Ticket* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
}

// -------------------------------------------------------------------

// ReleaseResponse

// -------------------------------------------------------------------

// ExportRequest

// .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
inline bool ExportRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool ExportRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::_internal_source_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::source_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
  return _internal_source_id();
}
inline void ExportRequest::unsafe_arena_set_allocated_source_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* source_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::release_source_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = source_id_;
  source_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    source_id_ = p;
  }
  return source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::mutable_source_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
  return _msg;
}
inline void ExportRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id));
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
inline bool ExportRequest::_internal_has_result_id() const {
  return this != internal_default_instance() && result_id_ != nullptr;
}
inline bool ExportRequest::has_result_id() const {
  return _internal_has_result_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::_internal_result_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::result_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
  return _internal_result_id();
}
inline void ExportRequest::unsafe_arena_set_allocated_result_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  result_id_ = result_id;
  if (result_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::release_result_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::unsafe_arena_release_result_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_id_;
  result_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::_internal_mutable_result_id() {
  
  if (result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_id_ = p;
  }
  return result_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::mutable_result_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
  return _msg;
}
inline void ExportRequest::set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* result_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id_);
  }
  if (result_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_id));
    if (message_arena != submessage_arena) {
      result_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_id, submessage_arena);
    }
    
  } else {
    
  }
  result_id_ = result_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
}

// -------------------------------------------------------------------

// ExportResponse

// -------------------------------------------------------------------

// ExportNotificationRequest

// -------------------------------------------------------------------

// ExportNotification

// .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
inline bool ExportNotification::_internal_has_ticket() const {
  return this != internal_default_instance() && ticket_ != nullptr;
}
inline bool ExportNotification::has_ticket() const {
  return _internal_has_ticket();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportNotification::_internal_ticket() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportNotification::ticket() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
  return _internal_ticket();
}
inline void ExportNotification::unsafe_arena_set_allocated_ticket(
    ::io::deephaven::proto::backplane::grpc::Ticket* ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  ticket_ = ticket;
  if (ticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::release_ticket() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = ticket_;
  ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::_internal_mutable_ticket() {
  
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    ticket_ = p;
  }
  return ticket_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::mutable_ticket() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
  return _msg;
}
inline void ExportNotification::set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket));
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    
  } else {
    
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
}

// .io.deephaven.proto.backplane.grpc.ExportNotification.State export_state = 2;
inline void ExportNotification::clear_export_state() {
  export_state_ = 0;
}
inline ::io::deephaven::proto::backplane::grpc::ExportNotification_State ExportNotification::_internal_export_state() const {
  return static_cast< ::io::deephaven::proto::backplane::grpc::ExportNotification_State >(export_state_);
}
inline ::io::deephaven::proto::backplane::grpc::ExportNotification_State ExportNotification::export_state() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.export_state)
  return _internal_export_state();
}
inline void ExportNotification::_internal_set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value) {
  
  export_state_ = value;
}
inline void ExportNotification::set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value) {
  _internal_set_export_state(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportNotification.export_state)
}

// string context = 3;
inline void ExportNotification::clear_context() {
  context_.ClearToEmpty();
}
inline const std::string& ExportNotification::context() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportNotification::set_context(ArgT0&& arg0, ArgT... args) {
 
 context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportNotification.context)
}
inline std::string* ExportNotification::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportNotification.context)
  return _s;
}
inline const std::string& ExportNotification::_internal_context() const {
  return context_.Get();
}
inline void ExportNotification::_internal_set_context(const std::string& value) {
  
  context_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportNotification::_internal_mutable_context() {
  
  return context_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportNotification::release_context() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportNotification.context)
  return context_.Release();
}
inline void ExportNotification::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocated(context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (context_.IsDefault()) {
    context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.context)
}

// string dependent_handle = 4;
inline void ExportNotification::clear_dependent_handle() {
  dependent_handle_.ClearToEmpty();
}
inline const std::string& ExportNotification::dependent_handle() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
  return _internal_dependent_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportNotification::set_dependent_handle(ArgT0&& arg0, ArgT... args) {
 
 dependent_handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
}
inline std::string* ExportNotification::mutable_dependent_handle() {
  std::string* _s = _internal_mutable_dependent_handle();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
  return _s;
}
inline const std::string& ExportNotification::_internal_dependent_handle() const {
  return dependent_handle_.Get();
}
inline void ExportNotification::_internal_set_dependent_handle(const std::string& value) {
  
  dependent_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportNotification::_internal_mutable_dependent_handle() {
  
  return dependent_handle_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportNotification::release_dependent_handle() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
  return dependent_handle_.Release();
}
inline void ExportNotification::set_allocated_dependent_handle(std::string* dependent_handle) {
  if (dependent_handle != nullptr) {
    
  } else {
    
  }
  dependent_handle_.SetAllocated(dependent_handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dependent_handle_.IsDefault()) {
    dependent_handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
}

// -------------------------------------------------------------------

// TerminationNotificationRequest

// -------------------------------------------------------------------

// TerminationNotificationResponse_StackTrace

// string type = 1;
inline void TerminationNotificationResponse_StackTrace::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& TerminationNotificationResponse_StackTrace::type() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TerminationNotificationResponse_StackTrace::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
}
inline std::string* TerminationNotificationResponse_StackTrace::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
  return _s;
}
inline const std::string& TerminationNotificationResponse_StackTrace::_internal_type() const {
  return type_.Get();
}
inline void TerminationNotificationResponse_StackTrace::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* TerminationNotificationResponse_StackTrace::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* TerminationNotificationResponse_StackTrace::release_type() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
  return type_.Release();
}
inline void TerminationNotificationResponse_StackTrace::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
}

// string message = 2;
inline void TerminationNotificationResponse_StackTrace::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& TerminationNotificationResponse_StackTrace::message() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TerminationNotificationResponse_StackTrace::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
}
inline std::string* TerminationNotificationResponse_StackTrace::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
  return _s;
}
inline const std::string& TerminationNotificationResponse_StackTrace::_internal_message() const {
  return message_.Get();
}
inline void TerminationNotificationResponse_StackTrace::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* TerminationNotificationResponse_StackTrace::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* TerminationNotificationResponse_StackTrace::release_message() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
  return message_.Release();
}
inline void TerminationNotificationResponse_StackTrace::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
}

// repeated string elements = 3;
inline int TerminationNotificationResponse_StackTrace::_internal_elements_size() const {
  return elements_.size();
}
inline int TerminationNotificationResponse_StackTrace::elements_size() const {
  return _internal_elements_size();
}
inline void TerminationNotificationResponse_StackTrace::clear_elements() {
  elements_.Clear();
}
inline std::string* TerminationNotificationResponse_StackTrace::add_elements() {
  std::string* _s = _internal_add_elements();
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return _s;
}
inline const std::string& TerminationNotificationResponse_StackTrace::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const std::string& TerminationNotificationResponse_StackTrace::elements(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return _internal_elements(index);
}
inline std::string* TerminationNotificationResponse_StackTrace::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return elements_.Mutable(index);
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, const std::string& value) {
  elements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, std::string&& value) {
  elements_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  elements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, const char* value, size_t size) {
  elements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline std::string* TerminationNotificationResponse_StackTrace::_internal_add_elements() {
  return elements_.Add();
}
inline void TerminationNotificationResponse_StackTrace::add_elements(const std::string& value) {
  elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(std::string&& value) {
  elements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(const char* value, size_t size) {
  elements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TerminationNotificationResponse_StackTrace::elements() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TerminationNotificationResponse_StackTrace::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return &elements_;
}

// -------------------------------------------------------------------

// TerminationNotificationResponse

// bool abnormal_termination = 1;
inline void TerminationNotificationResponse::clear_abnormal_termination() {
  abnormal_termination_ = false;
}
inline bool TerminationNotificationResponse::_internal_abnormal_termination() const {
  return abnormal_termination_;
}
inline bool TerminationNotificationResponse::abnormal_termination() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.abnormal_termination)
  return _internal_abnormal_termination();
}
inline void TerminationNotificationResponse::_internal_set_abnormal_termination(bool value) {
  
  abnormal_termination_ = value;
}
inline void TerminationNotificationResponse::set_abnormal_termination(bool value) {
  _internal_set_abnormal_termination(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.abnormal_termination)
}

// string reason = 2;
inline void TerminationNotificationResponse::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& TerminationNotificationResponse::reason() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TerminationNotificationResponse::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
}
inline std::string* TerminationNotificationResponse::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
  return _s;
}
inline const std::string& TerminationNotificationResponse::_internal_reason() const {
  return reason_.Get();
}
inline void TerminationNotificationResponse::_internal_set_reason(const std::string& value) {
  
  reason_.Set(value, GetArenaForAllocation());
}
inline std::string* TerminationNotificationResponse::_internal_mutable_reason() {
  
  return reason_.Mutable(GetArenaForAllocation());
}
inline std::string* TerminationNotificationResponse::release_reason() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
  return reason_.Release();
}
inline void TerminationNotificationResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reason_.IsDefault()) {
    reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
}

// bool is_from_uncaught_exception = 3;
inline void TerminationNotificationResponse::clear_is_from_uncaught_exception() {
  is_from_uncaught_exception_ = false;
}
inline bool TerminationNotificationResponse::_internal_is_from_uncaught_exception() const {
  return is_from_uncaught_exception_;
}
inline bool TerminationNotificationResponse::is_from_uncaught_exception() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.is_from_uncaught_exception)
  return _internal_is_from_uncaught_exception();
}
inline void TerminationNotificationResponse::_internal_set_is_from_uncaught_exception(bool value) {
  
  is_from_uncaught_exception_ = value;
}
inline void TerminationNotificationResponse::set_is_from_uncaught_exception(bool value) {
  _internal_set_is_from_uncaught_exception(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.is_from_uncaught_exception)
}

// repeated .io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace stack_traces = 4;
inline int TerminationNotificationResponse::_internal_stack_traces_size() const {
  return stack_traces_.size();
}
inline int TerminationNotificationResponse::stack_traces_size() const {
  return _internal_stack_traces_size();
}
inline void TerminationNotificationResponse::clear_stack_traces() {
  stack_traces_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* TerminationNotificationResponse::mutable_stack_traces(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return stack_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace >*
TerminationNotificationResponse::mutable_stack_traces() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return &stack_traces_;
}
inline const ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace& TerminationNotificationResponse::_internal_stack_traces(int index) const {
  return stack_traces_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace& TerminationNotificationResponse::stack_traces(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return _internal_stack_traces(index);
}
inline ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* TerminationNotificationResponse::_internal_add_stack_traces() {
  return stack_traces_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* TerminationNotificationResponse::add_stack_traces() {
  ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* _add = _internal_add_stack_traces();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace >&
TerminationNotificationResponse::stack_traces() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return stack_traces_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::io::deephaven::proto::backplane::grpc::ExportNotification_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::io::deephaven::proto::backplane::grpc::ExportNotification_State>() {
  return ::io::deephaven::proto::backplane::grpc::ExportNotification_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fsession_2eproto
