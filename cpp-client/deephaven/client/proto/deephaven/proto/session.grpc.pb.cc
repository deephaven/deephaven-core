// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/session.proto

#include "deephaven/proto/session.pb.h"
#include "deephaven/proto/session.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

static const char* SessionService_method_names[] = {
  "/io.deephaven.proto.backplane.grpc.SessionService/NewSession",
  "/io.deephaven.proto.backplane.grpc.SessionService/RefreshSessionToken",
  "/io.deephaven.proto.backplane.grpc.SessionService/CloseSession",
  "/io.deephaven.proto.backplane.grpc.SessionService/Release",
  "/io.deephaven.proto.backplane.grpc.SessionService/ExportFromTicket",
  "/io.deephaven.proto.backplane.grpc.SessionService/ExportNotifications",
  "/io.deephaven.proto.backplane.grpc.SessionService/TerminationNotification",
};

std::unique_ptr< SessionService::Stub> SessionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SessionService::Stub> stub(new SessionService::Stub(channel, options));
  return stub;
}

SessionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NewSession_(SessionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RefreshSessionToken_(SessionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseSession_(SessionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Release_(SessionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportFromTicket_(SessionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportNotifications_(SessionService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TerminationNotification_(SessionService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SessionService::Stub::NewSession(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewSession_, context, request, response);
}

void SessionService::Stub::async::NewSession(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewSession_, context, request, response, std::move(f));
}

void SessionService::Stub::async::NewSession(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HandshakeResponse>* SessionService::Stub::PrepareAsyncNewSessionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HandshakeResponse>* SessionService::Stub::AsyncNewSessionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::RefreshSessionToken(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RefreshSessionToken_, context, request, response);
}

void SessionService::Stub::async::RefreshSessionToken(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshSessionToken_, context, request, response, std::move(f));
}

void SessionService::Stub::async::RefreshSessionToken(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshSessionToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HandshakeResponse>* SessionService::Stub::PrepareAsyncRefreshSessionTokenRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RefreshSessionToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HandshakeResponse>* SessionService::Stub::AsyncRefreshSessionTokenRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshSessionTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::CloseSession(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::io::deephaven::proto::backplane::grpc::CloseSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::CloseSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseSession_, context, request, response);
}

void SessionService::Stub::async::CloseSession(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::CloseSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::CloseSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseSession_, context, request, response, std::move(f));
}

void SessionService::Stub::async::CloseSession(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CloseSessionResponse>* SessionService::Stub::PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::CloseSessionResponse, ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CloseSessionResponse>* SessionService::Stub::AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::Release(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ReleaseRequest& request, ::io::deephaven::proto::backplane::grpc::ReleaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::ReleaseRequest, ::io::deephaven::proto::backplane::grpc::ReleaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Release_, context, request, response);
}

void SessionService::Stub::async::Release(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ReleaseRequest* request, ::io::deephaven::proto::backplane::grpc::ReleaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::ReleaseRequest, ::io::deephaven::proto::backplane::grpc::ReleaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Release_, context, request, response, std::move(f));
}

void SessionService::Stub::async::Release(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ReleaseRequest* request, ::io::deephaven::proto::backplane::grpc::ReleaseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Release_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ReleaseResponse>* SessionService::Stub::PrepareAsyncReleaseRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ReleaseResponse, ::io::deephaven::proto::backplane::grpc::ReleaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Release_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ReleaseResponse>* SessionService::Stub::AsyncReleaseRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReleaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::ExportFromTicket(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportRequest& request, ::io::deephaven::proto::backplane::grpc::ExportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::ExportRequest, ::io::deephaven::proto::backplane::grpc::ExportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportFromTicket_, context, request, response);
}

void SessionService::Stub::async::ExportFromTicket(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::ExportRequest, ::io::deephaven::proto::backplane::grpc::ExportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportFromTicket_, context, request, response, std::move(f));
}

void SessionService::Stub::async::ExportFromTicket(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportFromTicket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportResponse>* SessionService::Stub::PrepareAsyncExportFromTicketRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ExportResponse, ::io::deephaven::proto::backplane::grpc::ExportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportFromTicket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportResponse>* SessionService::Stub::AsyncExportFromTicketRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportFromTicketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::io::deephaven::proto::backplane::grpc::ExportNotification>* SessionService::Stub::ExportNotificationsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::io::deephaven::proto::backplane::grpc::ExportNotification>::Create(channel_.get(), rpcmethod_ExportNotifications_, context, request);
}

void SessionService::Stub::async::ExportNotifications(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest* request, ::grpc::ClientReadReactor< ::io::deephaven::proto::backplane::grpc::ExportNotification>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::io::deephaven::proto::backplane::grpc::ExportNotification>::Create(stub_->channel_.get(), stub_->rpcmethod_ExportNotifications_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::ExportNotification>* SessionService::Stub::AsyncExportNotificationsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::grpc::ExportNotification>::Create(channel_.get(), cq, rpcmethod_ExportNotifications_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::ExportNotification>* SessionService::Stub::PrepareAsyncExportNotificationsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::grpc::ExportNotification>::Create(channel_.get(), cq, rpcmethod_ExportNotifications_, context, request, false, nullptr);
}

::grpc::Status SessionService::Stub::TerminationNotification(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest& request, ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest, ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TerminationNotification_, context, request, response);
}

void SessionService::Stub::async::TerminationNotification(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest* request, ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest, ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TerminationNotification_, context, request, response, std::move(f));
}

void SessionService::Stub::async::TerminationNotification(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest* request, ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TerminationNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse>* SessionService::Stub::PrepareAsyncTerminationNotificationRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse, ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TerminationNotification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse>* SessionService::Stub::AsyncTerminationNotificationRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTerminationNotificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

SessionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* req,
             ::io::deephaven::proto::backplane::grpc::HandshakeResponse* resp) {
               return service->NewSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::HandshakeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* req,
             ::io::deephaven::proto::backplane::grpc::HandshakeResponse* resp) {
               return service->RefreshSessionToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::io::deephaven::proto::backplane::grpc::HandshakeRequest, ::io::deephaven::proto::backplane::grpc::CloseSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* req,
             ::io::deephaven::proto::backplane::grpc::CloseSessionResponse* resp) {
               return service->CloseSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::io::deephaven::proto::backplane::grpc::ReleaseRequest, ::io::deephaven::proto::backplane::grpc::ReleaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::ReleaseRequest* req,
             ::io::deephaven::proto::backplane::grpc::ReleaseResponse* resp) {
               return service->Release(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::io::deephaven::proto::backplane::grpc::ExportRequest, ::io::deephaven::proto::backplane::grpc::ExportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::ExportRequest* req,
             ::io::deephaven::proto::backplane::grpc::ExportResponse* resp) {
               return service->ExportFromTicket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SessionService::Service, ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest, ::io::deephaven::proto::backplane::grpc::ExportNotification>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest* req,
             ::grpc::ServerWriter<::io::deephaven::proto::backplane::grpc::ExportNotification>* writer) {
               return service->ExportNotifications(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest, ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest* req,
             ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse* resp) {
               return service->TerminationNotification(ctx, req, resp);
             }, this)));
}

SessionService::Service::~Service() {
}

::grpc::Status SessionService::Service::NewSession(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::RefreshSessionToken(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::HandshakeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::CloseSession(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HandshakeRequest* request, ::io::deephaven::proto::backplane::grpc::CloseSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::Release(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::ReleaseRequest* request, ::io::deephaven::proto::backplane::grpc::ReleaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::ExportFromTicket(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::ExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::ExportNotifications(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::ExportNotificationRequest* request, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::ExportNotification>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::TerminationNotification(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::TerminationNotificationRequest* request, ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace grpc

