// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/console.proto

#include "deephaven/proto/console.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {
constexpr GetConsoleTypesRequest::GetConsoleTypesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetConsoleTypesRequestDefaultTypeInternal {
  constexpr GetConsoleTypesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConsoleTypesRequestDefaultTypeInternal() {}
  union {
    GetConsoleTypesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConsoleTypesRequestDefaultTypeInternal _GetConsoleTypesRequest_default_instance_;
constexpr GetConsoleTypesResponse::GetConsoleTypesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_types_(){}
struct GetConsoleTypesResponseDefaultTypeInternal {
  constexpr GetConsoleTypesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConsoleTypesResponseDefaultTypeInternal() {}
  union {
    GetConsoleTypesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConsoleTypesResponseDefaultTypeInternal _GetConsoleTypesResponse_default_instance_;
constexpr StartConsoleRequest::StartConsoleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_id_(nullptr){}
struct StartConsoleRequestDefaultTypeInternal {
  constexpr StartConsoleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartConsoleRequestDefaultTypeInternal() {}
  union {
    StartConsoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartConsoleRequestDefaultTypeInternal _StartConsoleRequest_default_instance_;
constexpr StartConsoleResponse::StartConsoleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_id_(nullptr){}
struct StartConsoleResponseDefaultTypeInternal {
  constexpr StartConsoleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartConsoleResponseDefaultTypeInternal() {}
  union {
    StartConsoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartConsoleResponseDefaultTypeInternal _StartConsoleResponse_default_instance_;
constexpr LogSubscriptionRequest::LogSubscriptionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : levels_()
  , last_seen_log_timestamp_(PROTOBUF_LONGLONG(0)){}
struct LogSubscriptionRequestDefaultTypeInternal {
  constexpr LogSubscriptionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogSubscriptionRequestDefaultTypeInternal() {}
  union {
    LogSubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogSubscriptionRequestDefaultTypeInternal _LogSubscriptionRequest_default_instance_;
constexpr LogSubscriptionData::LogSubscriptionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_level_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , micros_(PROTOBUF_LONGLONG(0)){}
struct LogSubscriptionDataDefaultTypeInternal {
  constexpr LogSubscriptionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogSubscriptionDataDefaultTypeInternal() {}
  union {
    LogSubscriptionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogSubscriptionDataDefaultTypeInternal _LogSubscriptionData_default_instance_;
constexpr ExecuteCommandRequest::ExecuteCommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , console_id_(nullptr){}
struct ExecuteCommandRequestDefaultTypeInternal {
  constexpr ExecuteCommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteCommandRequestDefaultTypeInternal() {}
  union {
    ExecuteCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteCommandRequestDefaultTypeInternal _ExecuteCommandRequest_default_instance_;
constexpr ExecuteCommandResponse::ExecuteCommandResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : created_()
  , updated_()
  , removed_()
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecuteCommandResponseDefaultTypeInternal {
  constexpr ExecuteCommandResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteCommandResponseDefaultTypeInternal() {}
  union {
    ExecuteCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteCommandResponseDefaultTypeInternal _ExecuteCommandResponse_default_instance_;
constexpr VariableDefinition::VariableDefinition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr){}
struct VariableDefinitionDefaultTypeInternal {
  constexpr VariableDefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableDefinitionDefaultTypeInternal() {}
  union {
    VariableDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableDefinitionDefaultTypeInternal _VariableDefinition_default_instance_;
constexpr BindTableToVariableRequest::BindTableToVariableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variable_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , console_id_(nullptr)
  , table_id_(nullptr){}
struct BindTableToVariableRequestDefaultTypeInternal {
  constexpr BindTableToVariableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindTableToVariableRequestDefaultTypeInternal() {}
  union {
    BindTableToVariableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindTableToVariableRequestDefaultTypeInternal _BindTableToVariableRequest_default_instance_;
constexpr BindTableToVariableResponse::BindTableToVariableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BindTableToVariableResponseDefaultTypeInternal {
  constexpr BindTableToVariableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindTableToVariableResponseDefaultTypeInternal() {}
  union {
    BindTableToVariableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindTableToVariableResponseDefaultTypeInternal _BindTableToVariableResponse_default_instance_;
constexpr CancelCommandRequest::CancelCommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , command_id_(nullptr){}
struct CancelCommandRequestDefaultTypeInternal {
  constexpr CancelCommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelCommandRequestDefaultTypeInternal() {}
  union {
    CancelCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelCommandRequestDefaultTypeInternal _CancelCommandRequest_default_instance_;
constexpr CancelCommandResponse::CancelCommandResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CancelCommandResponseDefaultTypeInternal {
  constexpr CancelCommandResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelCommandResponseDefaultTypeInternal() {}
  union {
    CancelCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelCommandResponseDefaultTypeInternal _CancelCommandResponse_default_instance_;
constexpr AutoCompleteRequest::AutoCompleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AutoCompleteRequestDefaultTypeInternal {
  constexpr AutoCompleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoCompleteRequestDefaultTypeInternal() {}
  union {
    AutoCompleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoCompleteRequestDefaultTypeInternal _AutoCompleteRequest_default_instance_;
constexpr AutoCompleteResponse::AutoCompleteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AutoCompleteResponseDefaultTypeInternal {
  constexpr AutoCompleteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoCompleteResponseDefaultTypeInternal() {}
  union {
    AutoCompleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoCompleteResponseDefaultTypeInternal _AutoCompleteResponse_default_instance_;
constexpr BrowserNextResponse::BrowserNextResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BrowserNextResponseDefaultTypeInternal {
  constexpr BrowserNextResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrowserNextResponseDefaultTypeInternal() {}
  union {
    BrowserNextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrowserNextResponseDefaultTypeInternal _BrowserNextResponse_default_instance_;
constexpr OpenDocumentRequest::OpenDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , text_document_(nullptr){}
struct OpenDocumentRequestDefaultTypeInternal {
  constexpr OpenDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenDocumentRequestDefaultTypeInternal() {}
  union {
    OpenDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenDocumentRequestDefaultTypeInternal _OpenDocumentRequest_default_instance_;
constexpr TextDocumentItem::TextDocumentItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct TextDocumentItemDefaultTypeInternal {
  constexpr TextDocumentItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextDocumentItemDefaultTypeInternal() {}
  union {
    TextDocumentItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextDocumentItemDefaultTypeInternal _TextDocumentItem_default_instance_;
constexpr CloseDocumentRequest::CloseDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , text_document_(nullptr){}
struct CloseDocumentRequestDefaultTypeInternal {
  constexpr CloseDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseDocumentRequestDefaultTypeInternal() {}
  union {
    CloseDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseDocumentRequestDefaultTypeInternal _CloseDocumentRequest_default_instance_;
constexpr ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr)
  , range_length_(0){}
struct ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal {
  constexpr ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest_TextDocumentContentChangeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal _ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_;
constexpr ChangeDocumentRequest::ChangeDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_changes_()
  , console_id_(nullptr)
  , text_document_(nullptr){}
struct ChangeDocumentRequestDefaultTypeInternal {
  constexpr ChangeDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeDocumentRequestDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeDocumentRequestDefaultTypeInternal _ChangeDocumentRequest_default_instance_;
constexpr DocumentRange::DocumentRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct DocumentRangeDefaultTypeInternal {
  constexpr DocumentRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentRangeDefaultTypeInternal() {}
  union {
    DocumentRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentRangeDefaultTypeInternal _DocumentRange_default_instance_;
constexpr VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct VersionedTextDocumentIdentifierDefaultTypeInternal {
  constexpr VersionedTextDocumentIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionedTextDocumentIdentifierDefaultTypeInternal() {}
  union {
    VersionedTextDocumentIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionedTextDocumentIdentifierDefaultTypeInternal _VersionedTextDocumentIdentifier_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_(0)
  , character_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr GetCompletionItemsRequest::GetCompletionItemsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : console_id_(nullptr)
  , context_(nullptr)
  , text_document_(nullptr)
  , position_(nullptr)
  , request_id_(0){}
struct GetCompletionItemsRequestDefaultTypeInternal {
  constexpr GetCompletionItemsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCompletionItemsRequestDefaultTypeInternal() {}
  union {
    GetCompletionItemsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCompletionItemsRequestDefaultTypeInternal _GetCompletionItemsRequest_default_instance_;
constexpr CompletionContext::CompletionContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trigger_character_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trigger_kind_(0){}
struct CompletionContextDefaultTypeInternal {
  constexpr CompletionContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompletionContextDefaultTypeInternal() {}
  union {
    CompletionContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompletionContextDefaultTypeInternal _CompletionContext_default_instance_;
constexpr GetCompletionItemsResponse::GetCompletionItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , request_id_(0)
  , success_(false){}
struct GetCompletionItemsResponseDefaultTypeInternal {
  constexpr GetCompletionItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCompletionItemsResponseDefaultTypeInternal() {}
  union {
    GetCompletionItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCompletionItemsResponseDefaultTypeInternal _GetCompletionItemsResponse_default_instance_;
constexpr CompletionItem::CompletionItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_text_edits_()
  , commit_characters_()
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , documentation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filter_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_edit_(nullptr)
  , start_(0)
  , length_(0)
  , kind_(0)
  , deprecated_(false)
  , preselect_(false)
  , insert_text_format_(0){}
struct CompletionItemDefaultTypeInternal {
  constexpr CompletionItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompletionItemDefaultTypeInternal() {}
  union {
    CompletionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompletionItemDefaultTypeInternal _CompletionItem_default_instance_;
constexpr TextEdit::TextEdit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr){}
struct TextEditDefaultTypeInternal {
  constexpr TextEditDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextEditDefaultTypeInternal() {}
  union {
    TextEdit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextEditDefaultTypeInternal _TextEdit_default_instance_;
constexpr FetchFigureRequest::FetchFigureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_id_(nullptr){}
struct FetchFigureRequestDefaultTypeInternal {
  constexpr FetchFigureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchFigureRequestDefaultTypeInternal() {}
  union {
    FetchFigureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchFigureRequestDefaultTypeInternal _FetchFigureRequest_default_instance_;
constexpr FetchFigureResponse::FetchFigureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : figure_descriptor_(nullptr){}
struct FetchFigureResponseDefaultTypeInternal {
  constexpr FetchFigureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchFigureResponseDefaultTypeInternal() {}
  union {
    FetchFigureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchFigureResponseDefaultTypeInternal _FetchFigureResponse_default_instance_;
constexpr FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : series_()
  , multi_series_()
  , axes_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_font_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legend_font_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , legend_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , colspan_(0)
  , rowspan_(0)
  , chart_type_(0)

  , show_legend_(false)
  , is3d_(false){}
struct FigureDescriptor_ChartDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_ChartDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_ChartDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_ChartDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_ChartDescriptorDefaultTypeInternal _FigureDescriptor_ChartDescriptor_default_instance_;
constexpr FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_sources_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , point_label_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_tool_tip_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , y_tool_tip_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plot_style_(0)

  , lines_visible_(false)
  , shapes_visible_(false)
  , gradient_visible_(false)
  , shape_size_(0){}
struct FigureDescriptor_SeriesDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_SeriesDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_SeriesDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_SeriesDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_SeriesDescriptorDefaultTypeInternal _FigureDescriptor_SeriesDescriptor_default_instance_;
constexpr FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_sources_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , line_color_(nullptr)
  , point_color_(nullptr)
  , lines_visible_(nullptr)
  , points_visible_(nullptr)
  , gradient_visible_(nullptr)
  , point_label_format_(nullptr)
  , x_tool_tip_pattern_(nullptr)
  , y_tool_tip_pattern_(nullptr)
  , point_label_(nullptr)
  , point_size_(nullptr)
  , point_shape_(nullptr)
  , plot_style_(0)
{}
struct FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_MultiSeriesDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal _FigureDescriptor_MultiSeriesDescriptor_default_instance_;
constexpr FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , values_()
  , default_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FigureDescriptor_StringMapWithDefaultDefaultTypeInternal {
  constexpr FigureDescriptor_StringMapWithDefaultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_StringMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_StringMapWithDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_StringMapWithDefaultDefaultTypeInternal _FigureDescriptor_StringMapWithDefault_default_instance_;
constexpr FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , values_()
  , _values_cached_byte_size_()
  , default_double_(0){}
struct FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal {
  constexpr FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_DoubleMapWithDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal _FigureDescriptor_DoubleMapWithDefault_default_instance_;
constexpr FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , values_()
  , _values_cached_byte_size_()
  , default_bool_(false){}
struct FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal {
  constexpr FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_BoolMapWithDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal _FigureDescriptor_BoolMapWithDefault_default_instance_;
constexpr FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : major_tick_locations_()
  , _major_tick_locations_cached_byte_size_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_font_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ticks_font_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , business_calendar_descriptor_(nullptr)
  , format_type_(0)

  , type_(0)

  , min_range_(0)
  , position_(0)

  , log_(false)
  , minor_ticks_visible_(false)
  , major_ticks_visible_(false)
  , invert_(false)
  , max_range_(0)
  , gap_between_major_ticks_(0)
  , minor_tick_count_(0)
  , is_time_axis_(false)
  , tick_label_angle_(0){}
struct FigureDescriptor_AxisDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_AxisDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_AxisDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_AxisDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_AxisDescriptorDefaultTypeInternal _FigureDescriptor_AxisDescriptor_default_instance_;
constexpr FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : open_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , close_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal {
  constexpr FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod_default_instance_;
constexpr FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : business_periods_()
  , date_(nullptr){}
struct FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal {
  constexpr FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_Holiday _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_Holiday_default_instance_;
constexpr FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : year_(0)
  , month_(0)
  , day_(0){}
struct FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal {
  constexpr FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_LocalDate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_LocalDate_default_instance_;
constexpr FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : business_days_()
  , _business_days_cached_byte_size_()
  , business_periods_()
  , holidays_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_default_instance_;
constexpr FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axis_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , table_map_id_(0){}
struct FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_MultiSeriesSourceDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal _FigureDescriptor_MultiSeriesSourceDescriptor_default_instance_;
constexpr FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axis_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , column_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , one_click_(nullptr)
  , type_(0)

  , table_id_(0)
  , table_map_id_(0){}
struct FigureDescriptor_SourceDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_SourceDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_SourceDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_SourceDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_SourceDescriptorDefaultTypeInternal _FigureDescriptor_SourceDescriptor_default_instance_;
constexpr FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_()
  , column_types_()
  , require_all_filters_to_display_(false){}
struct FigureDescriptor_OneClickDescriptorDefaultTypeInternal {
  constexpr FigureDescriptor_OneClickDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptor_OneClickDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_OneClickDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptor_OneClickDescriptorDefaultTypeInternal _FigureDescriptor_OneClickDescriptor_default_instance_;
constexpr FigureDescriptor::FigureDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charts_()
  , tables_()
  , errors_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_font_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_interval_(PROTOBUF_LONGLONG(0))
  , cols_(0)
  , rows_(0){}
struct FigureDescriptorDefaultTypeInternal {
  constexpr FigureDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FigureDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FigureDescriptorDefaultTypeInternal _FigureDescriptor_default_instance_;
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_deephaven_2fproto_2fconsole_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_deephaven_2fproto_2fconsole_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_deephaven_2fproto_2fconsole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, console_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, session_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, last_seen_log_timestamp_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, micros_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, log_level_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, created_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, updated_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VariableDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VariableDefinition, type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VariableDefinition, title_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VariableDefinition, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, variable_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, command_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, text_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, uri_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, language_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, version_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, text_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, range_length_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, content_changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, start_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, uri_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, line_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, context_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, position_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, trigger_kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, trigger_character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, items_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, start_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, length_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, detail_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, documentation_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, deprecated_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, preselect_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, text_edit_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, sort_text_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, filter_text_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, insert_text_format_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, additional_text_edits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, commit_characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest, source_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse, figure_descriptor_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, colspan_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, rowspan_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, series_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, multi_series_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, axes_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, chart_type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, title_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, title_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, title_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, show_legend_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, legend_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, legend_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, is3d_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, plot_style_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, lines_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, shapes_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, gradient_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, line_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, point_label_format_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, x_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, y_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, shape_label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, shape_size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, shape_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, shape_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, data_sources_),
  ~0u,
  ~0u,
  3,
  4,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, plot_style_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, line_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, point_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, lines_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, points_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, gradient_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, point_label_format_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, x_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, y_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, point_label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, point_size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, point_shape_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, data_sources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, default_string_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, keys_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, default_double_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, keys_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, default_bool_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, keys_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, values_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, format_type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, position_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, log_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, label_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, ticks_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, format_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, min_range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, max_range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, minor_ticks_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, major_ticks_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, minor_tick_count_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, gap_between_major_ticks_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, major_tick_locations_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, tick_label_angle_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, invert_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, is_time_axis_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, business_calendar_descriptor_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, open_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, close_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, date_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, business_periods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, year_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, month_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, time_zone_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, business_days_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, business_periods_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, holidays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, axis_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, table_map_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, axis_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, table_map_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, column_type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, one_click_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, column_types_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, require_all_filters_to_display_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, title_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, title_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, title_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, update_interval_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, cols_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, rows_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, charts_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, tables_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, errors_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest)},
  { 5, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse)},
  { 11, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest)},
  { 18, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse)},
  { 24, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest)},
  { 31, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData)},
  { 39, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest)},
  { 46, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse)},
  { 55, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::VariableDefinition)},
  { 63, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest)},
  { 71, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse)},
  { 76, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest)},
  { 83, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse)},
  { 88, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest)},
  { 98, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse)},
  { 105, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse)},
  { 110, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest)},
  { 117, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem)},
  { 126, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest)},
  { 133, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent)},
  { 141, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest)},
  { 149, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::DocumentRange)},
  { 156, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier)},
  { 163, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Position)},
  { 170, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest)},
  { 180, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionContext)},
  { 187, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse)},
  { 195, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionItem)},
  { 214, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextEdit)},
  { 221, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest)},
  { 227, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse)},
  { 233, 251, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor)},
  { 264, 283, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor)},
  { 297, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor)},
  { 316, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault)},
  { 324, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault)},
  { 332, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault)},
  { 340, 366, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor)},
  { 387, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod)},
  { 394, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday)},
  { 401, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate)},
  { 409, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor)},
  { 419, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor)},
  { 428, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor)},
  { 440, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor)},
  { 448, 462, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_StartConsoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_StartConsoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_VariableDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CancelCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CancelCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_AutoCompleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_AutoCompleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_BrowserNextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_OpenDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_TextDocumentItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CloseDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_DocumentRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_VersionedTextDocumentIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CompletionContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_CompletionItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_TextEdit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchFigureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FetchFigureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_ChartDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_SeriesDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_MultiSeriesDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_StringMapWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_DoubleMapWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BoolMapWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_AxisDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_Holiday_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_LocalDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_MultiSeriesSourceDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_SourceDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_OneClickDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_default_instance_),
};

const char descriptor_table_protodef_deephaven_2fproto_2fconsole_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035deephaven/proto/console.proto\022(io.deep"
  "haven.proto.backplane.script.grpc\032\033deeph"
  "aven/proto/table.proto\032\034deephaven/proto/"
  "ticket.proto\"\030\n\026GetConsoleTypesRequest\"0"
  "\n\027GetConsoleTypesResponse\022\025\n\rconsole_typ"
  "es\030\001 \003(\t\"i\n\023StartConsoleRequest\022<\n\tresul"
  "t_id\030\001 \001(\0132).io.deephaven.proto.backplan"
  "e.grpc.Ticket\022\024\n\014session_type\030\002 \001(\t\"T\n\024S"
  "tartConsoleResponse\022<\n\tresult_id\030\001 \001(\0132)"
  ".io.deephaven.proto.backplane.grpc.Ticke"
  "t\"I\n\026LogSubscriptionRequest\022\037\n\027last_seen"
  "_log_timestamp\030\001 \001(\003\022\016\n\006levels\030\002 \003(\t\"O\n\023"
  "LogSubscriptionData\022\016\n\006micros\030\001 \001(\003\022\021\n\tl"
  "og_level\030\002 \001(\t\022\017\n\007message\030\003 \001(\tJ\004\010\004\020\005\"j\n"
  "\025ExecuteCommandRequest\022=\n\nconsole_id\030\001 \001"
  "(\0132).io.deephaven.proto.backplane.grpc.T"
  "icket\022\014\n\004code\030\003 \001(\tJ\004\010\002\020\003\"\234\002\n\026ExecuteCom"
  "mandResponse\022\025\n\rerror_message\030\001 \001(\t\022M\n\007c"
  "reated\030\002 \003(\0132<.io.deephaven.proto.backpl"
  "ane.script.grpc.VariableDefinition\022M\n\007up"
  "dated\030\003 \003(\0132<.io.deephaven.proto.backpla"
  "ne.script.grpc.VariableDefinition\022M\n\007rem"
  "oved\030\004 \003(\0132<.io.deephaven.proto.backplan"
  "e.script.grpc.VariableDefinition\"h\n\022Vari"
  "ableDefinition\022\014\n\004type\030\001 \001(\t\022\r\n\005title\030\002 "
  "\001(\t\0225\n\002id\030\003 \001(\0132).io.deephaven.proto.bac"
  "kplane.grpc.Ticket\"\265\001\n\032BindTableToVariab"
  "leRequest\022=\n\nconsole_id\030\001 \001(\0132).io.deeph"
  "aven.proto.backplane.grpc.Ticket\022\025\n\rvari"
  "able_name\030\003 \001(\t\022;\n\010table_id\030\004 \001(\0132).io.d"
  "eephaven.proto.backplane.grpc.TicketJ\004\010\002"
  "\020\003\"\035\n\033BindTableToVariableResponse\"\224\001\n\024Ca"
  "ncelCommandRequest\022=\n\nconsole_id\030\001 \001(\0132)"
  ".io.deephaven.proto.backplane.grpc.Ticke"
  "t\022=\n\ncommand_id\030\002 \001(\0132).io.deephaven.pro"
  "to.backplane.grpc.Ticket\"\027\n\025CancelComman"
  "dResponse\"\223\003\n\023AutoCompleteRequest\022V\n\rope"
  "n_document\030\001 \001(\0132=.io.deephaven.proto.ba"
  "ckplane.script.grpc.OpenDocumentRequestH"
  "\000\022Z\n\017change_document\030\002 \001(\0132\?.io.deephave"
  "n.proto.backplane.script.grpc.ChangeDocu"
  "mentRequestH\000\022c\n\024get_completion_items\030\003 "
  "\001(\0132C.io.deephaven.proto.backplane.scrip"
  "t.grpc.GetCompletionItemsRequestH\000\022X\n\016cl"
  "ose_document\030\004 \001(\0132>.io.deephaven.proto."
  "backplane.script.grpc.CloseDocumentReque"
  "stH\000B\t\n\007request\"\204\001\n\024AutoCompleteResponse"
  "\022`\n\020completion_items\030\001 \001(\0132D.io.deephave"
  "n.proto.backplane.script.grpc.GetComplet"
  "ionItemsResponseH\000B\n\n\010response\"\025\n\023Browse"
  "rNextResponse\"\247\001\n\023OpenDocumentRequest\022=\n"
  "\nconsole_id\030\001 \001(\0132).io.deephaven.proto.b"
  "ackplane.grpc.Ticket\022Q\n\rtext_document\030\002 "
  "\001(\0132:.io.deephaven.proto.backplane.scrip"
  "t.grpc.TextDocumentItem\"S\n\020TextDocumentI"
  "tem\022\013\n\003uri\030\001 \001(\t\022\023\n\013language_id\030\002 \001(\t\022\017\n"
  "\007version\030\003 \001(\005\022\014\n\004text\030\004 \001(\t\"\267\001\n\024CloseDo"
  "cumentRequest\022=\n\nconsole_id\030\001 \001(\0132).io.d"
  "eephaven.proto.backplane.grpc.Ticket\022`\n\r"
  "text_document\030\002 \001(\0132I.io.deephaven.proto"
  ".backplane.script.grpc.VersionedTextDocu"
  "mentIdentifier\"\300\003\n\025ChangeDocumentRequest"
  "\022=\n\nconsole_id\030\001 \001(\0132).io.deephaven.prot"
  "o.backplane.grpc.Ticket\022`\n\rtext_document"
  "\030\002 \001(\0132I.io.deephaven.proto.backplane.sc"
  "ript.grpc.VersionedTextDocumentIdentifie"
  "r\022w\n\017content_changes\030\003 \003(\0132^.io.deephave"
  "n.proto.backplane.script.grpc.ChangeDocu"
  "mentRequest.TextDocumentContentChangeEve"
  "nt\032\214\001\n\036TextDocumentContentChangeEvent\022F\n"
  "\005range\030\001 \001(\01327.io.deephaven.proto.backpl"
  "ane.script.grpc.DocumentRange\022\024\n\014range_l"
  "ength\030\002 \001(\005\022\014\n\004text\030\003 \001(\t\"\223\001\n\rDocumentRa"
  "nge\022A\n\005start\030\001 \001(\01322.io.deephaven.proto."
  "backplane.script.grpc.Position\022\?\n\003end\030\002 "
  "\001(\01322.io.deephaven.proto.backplane.scrip"
  "t.grpc.Position\"\?\n\037VersionedTextDocument"
  "Identifier\022\013\n\003uri\030\001 \001(\t\022\017\n\007version\030\002 \001(\005"
  "\"+\n\010Position\022\014\n\004line\030\001 \001(\005\022\021\n\tcharacter\030"
  "\002 \001(\005\"\344\002\n\031GetCompletionItemsRequest\022=\n\nc"
  "onsole_id\030\001 \001(\0132).io.deephaven.proto.bac"
  "kplane.grpc.Ticket\022L\n\007context\030\002 \001(\0132;.io"
  ".deephaven.proto.backplane.script.grpc.C"
  "ompletionContext\022`\n\rtext_document\030\003 \001(\0132"
  "I.io.deephaven.proto.backplane.script.gr"
  "pc.VersionedTextDocumentIdentifier\022D\n\010po"
  "sition\030\004 \001(\01322.io.deephaven.proto.backpl"
  "ane.script.grpc.Position\022\022\n\nrequest_id\030\005"
  " \001(\005\"D\n\021CompletionContext\022\024\n\014trigger_kin"
  "d\030\001 \001(\005\022\031\n\021trigger_character\030\002 \001(\t\"\212\001\n\032G"
  "etCompletionItemsResponse\022G\n\005items\030\001 \003(\013"
  "28.io.deephaven.proto.backplane.script.g"
  "rpc.CompletionItem\022\022\n\nrequest_id\030\002 \001(\005\022\017"
  "\n\007success\030\003 \001(\010\"\223\003\n\016CompletionItem\022\r\n\005st"
  "art\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\022\r\n\005label\030\003 \001(\t"
  "\022\014\n\004kind\030\004 \001(\005\022\016\n\006detail\030\005 \001(\t\022\025\n\rdocume"
  "ntation\030\006 \001(\t\022\022\n\ndeprecated\030\007 \001(\010\022\021\n\tpre"
  "select\030\010 \001(\010\022E\n\ttext_edit\030\t \001(\01322.io.dee"
  "phaven.proto.backplane.script.grpc.TextE"
  "dit\022\021\n\tsort_text\030\n \001(\t\022\023\n\013filter_text\030\013 "
  "\001(\t\022\032\n\022insert_text_format\030\014 \001(\005\022Q\n\025addit"
  "ional_text_edits\030\r \003(\01322.io.deephaven.pr"
  "oto.backplane.script.grpc.TextEdit\022\031\n\021co"
  "mmit_characters\030\016 \003(\t\"`\n\010TextEdit\022F\n\005ran"
  "ge\030\001 \001(\01327.io.deephaven.proto.backplane."
  "script.grpc.DocumentRange\022\014\n\004text\030\002 \001(\t\""
  "R\n\022FetchFigureRequest\022<\n\tsource_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\"l\n\023FetchFigureResponse\022U\n\021figure_des"
  "criptor\030\001 \001(\0132:.io.deephaven.proto.backp"
  "lane.script.grpc.FigureDescriptor\"\367/\n\020Fi"
  "gureDescriptor\022\022\n\005title\030\001 \001(\tH\000\210\001\001\022\022\n\nti"
  "tle_font\030\002 \001(\t\022\023\n\013title_color\030\003 \001(\t\022\027\n\017u"
  "pdate_interval\030\007 \001(\003\022\014\n\004cols\030\010 \001(\005\022\014\n\004ro"
  "ws\030\t \001(\005\022Z\n\006charts\030\n \003(\0132J.io.deephaven."
  "proto.backplane.script.grpc.FigureDescri"
  "ptor.ChartDescriptor\022P\n\006tables\030\013 \003(\0132@.i"
  "o.deephaven.proto.backplane.grpc.Exporte"
  "dTableCreationResponse\022\016\n\006errors\030\r \003(\t\032\240"
  "\005\n\017ChartDescriptor\022\017\n\007colspan\030\001 \001(\005\022\017\n\007r"
  "owspan\030\002 \001(\005\022[\n\006series\030\003 \003(\0132K.io.deepha"
  "ven.proto.backplane.script.grpc.FigureDe"
  "scriptor.SeriesDescriptor\022f\n\014multi_serie"
  "s\030\004 \003(\0132P.io.deephaven.proto.backplane.s"
  "cript.grpc.FigureDescriptor.MultiSeriesD"
  "escriptor\022W\n\004axes\030\005 \003(\0132I.io.deephaven.p"
  "roto.backplane.script.grpc.FigureDescrip"
  "tor.AxisDescriptor\022h\n\nchart_type\030\006 \001(\0162T"
  ".io.deephaven.proto.backplane.script.grp"
  "c.FigureDescriptor.ChartDescriptor.Chart"
  "Type\022\022\n\005title\030\007 \001(\tH\000\210\001\001\022\022\n\ntitle_font\030\010"
  " \001(\t\022\023\n\013title_color\030\t \001(\t\022\023\n\013show_legend"
  "\030\n \001(\010\022\023\n\013legend_font\030\013 \001(\t\022\024\n\014legend_co"
  "lor\030\014 \001(\t\022\014\n\004is3d\030\r \001(\010\"N\n\tChartType\022\006\n\002"
  "XY\020\000\022\007\n\003PIE\020\001\022\010\n\004OHLC\020\002\022\014\n\010CATEGORY\020\003\022\007\n"
  "\003XYZ\020\004\022\017\n\013CATEGORY_3D\020\005B\010\n\006_title\032\376\004\n\020Se"
  "riesDescriptor\022^\n\nplot_style\030\001 \001(\0162J.io."
  "deephaven.proto.backplane.script.grpc.Fi"
  "gureDescriptor.SeriesPlotStyle\022\014\n\004name\030\002"
  " \001(\t\022\032\n\rlines_visible\030\003 \001(\010H\000\210\001\001\022\033\n\016shap"
  "es_visible\030\004 \001(\010H\001\210\001\001\022\030\n\020gradient_visibl"
  "e\030\005 \001(\010\022\022\n\nline_color\030\006 \001(\t\022\037\n\022point_lab"
  "el_format\030\010 \001(\tH\002\210\001\001\022\037\n\022x_tool_tip_patte"
  "rn\030\t \001(\tH\003\210\001\001\022\037\n\022y_tool_tip_pattern\030\n \001("
  "\tH\004\210\001\001\022\023\n\013shape_label\030\013 \001(\t\022\027\n\nshape_siz"
  "e\030\014 \001(\001H\005\210\001\001\022\023\n\013shape_color\030\r \001(\t\022\r\n\005sha"
  "pe\030\016 \001(\t\022a\n\014data_sources\030\017 \003(\0132K.io.deep"
  "haven.proto.backplane.script.grpc.Figure"
  "Descriptor.SourceDescriptorB\020\n\016_lines_vi"
  "sibleB\021\n\017_shapes_visibleB\025\n\023_point_label"
  "_formatB\025\n\023_x_tool_tip_patternB\025\n\023_y_too"
  "l_tip_patternB\r\n\013_shape_sizeJ\004\010\007\020\010\032\354\n\n\025M"
  "ultiSeriesDescriptor\022^\n\nplot_style\030\001 \001(\016"
  "2J.io.deephaven.proto.backplane.script.g"
  "rpc.FigureDescriptor.SeriesPlotStyle\022\014\n\004"
  "name\030\002 \001(\t\022c\n\nline_color\030\003 \001(\0132O.io.deep"
  "haven.proto.backplane.script.grpc.Figure"
  "Descriptor.StringMapWithDefault\022d\n\013point"
  "_color\030\004 \001(\0132O.io.deephaven.proto.backpl"
  "ane.script.grpc.FigureDescriptor.StringM"
  "apWithDefault\022d\n\rlines_visible\030\005 \001(\0132M.i"
  "o.deephaven.proto.backplane.script.grpc."
  "FigureDescriptor.BoolMapWithDefault\022e\n\016p"
  "oints_visible\030\006 \001(\0132M.io.deephaven.proto"
  ".backplane.script.grpc.FigureDescriptor."
  "BoolMapWithDefault\022g\n\020gradient_visible\030\007"
  " \001(\0132M.io.deephaven.proto.backplane.scri"
  "pt.grpc.FigureDescriptor.BoolMapWithDefa"
  "ult\022k\n\022point_label_format\030\010 \001(\0132O.io.dee"
  "phaven.proto.backplane.script.grpc.Figur"
  "eDescriptor.StringMapWithDefault\022k\n\022x_to"
  "ol_tip_pattern\030\t \001(\0132O.io.deephaven.prot"
  "o.backplane.script.grpc.FigureDescriptor"
  ".StringMapWithDefault\022k\n\022y_tool_tip_patt"
  "ern\030\n \001(\0132O.io.deephaven.proto.backplane"
  ".script.grpc.FigureDescriptor.StringMapW"
  "ithDefault\022d\n\013point_label\030\013 \001(\0132O.io.dee"
  "phaven.proto.backplane.script.grpc.Figur"
  "eDescriptor.StringMapWithDefault\022c\n\npoin"
  "t_size\030\014 \001(\0132O.io.deephaven.proto.backpl"
  "ane.script.grpc.FigureDescriptor.DoubleM"
  "apWithDefault\022d\n\013point_shape\030\r \001(\0132O.io."
  "deephaven.proto.backplane.script.grpc.Fi"
  "gureDescriptor.StringMapWithDefault\022l\n\014d"
  "ata_sources\030\016 \003(\0132V.io.deephaven.proto.b"
  "ackplane.script.grpc.FigureDescriptor.Mu"
  "ltiSeriesSourceDescriptor\032L\n\024StringMapWi"
  "thDefault\022\026\n\016default_string\030\001 \001(\t\022\014\n\004key"
  "s\030\002 \003(\t\022\016\n\006values\030\003 \003(\t\032L\n\024DoubleMapWith"
  "Default\022\026\n\016default_double\030\001 \001(\001\022\014\n\004keys\030"
  "\002 \003(\t\022\016\n\006values\030\003 \003(\001\032H\n\022BoolMapWithDefa"
  "ult\022\024\n\014default_bool\030\001 \001(\010\022\014\n\004keys\030\002 \003(\t\022"
  "\016\n\006values\030\003 \003(\010\032\246\010\n\016AxisDescriptor\022\n\n\002id"
  "\030\001 \001(\t\022m\n\013format_type\030\002 \001(\0162X.io.deephav"
  "en.proto.backplane.script.grpc.FigureDes"
  "criptor.AxisDescriptor.AxisFormatType\022`\n"
  "\004type\030\003 \001(\0162R.io.deephaven.proto.backpla"
  "ne.script.grpc.FigureDescriptor.AxisDesc"
  "riptor.AxisType\022h\n\010position\030\004 \001(\0162V.io.d"
  "eephaven.proto.backplane.script.grpc.Fig"
  "ureDescriptor.AxisDescriptor.AxisPositio"
  "n\022\013\n\003log\030\005 \001(\010\022\r\n\005label\030\006 \001(\t\022\022\n\nlabel_f"
  "ont\030\007 \001(\t\022\022\n\nticks_font\030\010 \001(\t\022\033\n\016format_"
  "pattern\030\t \001(\tH\000\210\001\001\022\r\n\005color\030\n \001(\t\022\021\n\tmin"
  "_range\030\013 \001(\001\022\021\n\tmax_range\030\014 \001(\001\022\033\n\023minor"
  "_ticks_visible\030\r \001(\010\022\033\n\023major_ticks_visi"
  "ble\030\016 \001(\010\022\030\n\020minor_tick_count\030\017 \001(\005\022$\n\027g"
  "ap_between_major_ticks\030\020 \001(\001H\001\210\001\001\022\034\n\024maj"
  "or_tick_locations\030\021 \003(\001\022\030\n\020tick_label_an"
  "gle\030\022 \001(\001\022\016\n\006invert\030\023 \001(\010\022\024\n\014is_time_axi"
  "s\030\024 \001(\010\022{\n\034business_calendar_descriptor\030"
  "\025 \001(\0132U.io.deephaven.proto.backplane.scr"
  "ipt.grpc.FigureDescriptor.BusinessCalend"
  "arDescriptor\"*\n\016AxisFormatType\022\014\n\010CATEGO"
  "RY\020\000\022\n\n\006NUMBER\020\001\"C\n\010AxisType\022\005\n\001X\020\000\022\005\n\001Y"
  "\020\001\022\t\n\005SHAPE\020\002\022\010\n\004SIZE\020\003\022\t\n\005LABEL\020\004\022\t\n\005CO"
  "LOR\020\005\"B\n\014AxisPosition\022\007\n\003TOP\020\000\022\n\n\006BOTTOM"
  "\020\001\022\010\n\004LEFT\020\002\022\t\n\005RIGHT\020\003\022\010\n\004NONE\020\004B\021\n\017_fo"
  "rmat_patternB\032\n\030_gap_between_major_ticks"
  "\032\360\006\n\032BusinessCalendarDescriptor\022\014\n\004name\030"
  "\001 \001(\t\022\021\n\ttime_zone\030\002 \001(\t\022v\n\rbusiness_day"
  "s\030\003 \003(\0162_.io.deephaven.proto.backplane.s"
  "cript.grpc.FigureDescriptor.BusinessCale"
  "ndarDescriptor.DayOfWeek\022~\n\020business_per"
  "iods\030\004 \003(\0132d.io.deephaven.proto.backplan"
  "e.script.grpc.FigureDescriptor.BusinessC"
  "alendarDescriptor.BusinessPeriod\022o\n\010holi"
  "days\030\005 \003(\0132].io.deephaven.proto.backplan"
  "e.script.grpc.FigureDescriptor.BusinessC"
  "alendarDescriptor.Holiday\032-\n\016BusinessPer"
  "iod\022\014\n\004open\030\001 \001(\t\022\r\n\005close\030\002 \001(\t\032\370\001\n\007Hol"
  "iday\022m\n\004date\030\001 \001(\0132_.io.deephaven.proto."
  "backplane.script.grpc.FigureDescriptor.B"
  "usinessCalendarDescriptor.LocalDate\022~\n\020b"
  "usiness_periods\030\002 \003(\0132d.io.deephaven.pro"
  "to.backplane.script.grpc.FigureDescripto"
  "r.BusinessCalendarDescriptor.BusinessPer"
  "iod\0325\n\tLocalDate\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030"
  "\002 \001(\005\022\013\n\003day\030\003 \001(\005\"g\n\tDayOfWeek\022\n\n\006SUNDA"
  "Y\020\000\022\n\n\006MONDAY\020\001\022\013\n\007TUESDAY\020\002\022\r\n\tWEDNESDA"
  "Y\020\003\022\014\n\010THURSDAY\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010SATURDA"
  "Y\020\006\032\256\001\n\033MultiSeriesSourceDescriptor\022\017\n\007a"
  "xis_id\030\001 \001(\t\022S\n\004type\030\002 \001(\0162E.io.deephave"
  "n.proto.backplane.script.grpc.FigureDesc"
  "riptor.SourceType\022\024\n\014table_map_id\030\003 \001(\005\022"
  "\023\n\013column_name\030\004 \001(\t\032\254\002\n\020SourceDescripto"
  "r\022\017\n\007axis_id\030\001 \001(\t\022S\n\004type\030\002 \001(\0162E.io.de"
  "ephaven.proto.backplane.script.grpc.Figu"
  "reDescriptor.SourceType\022\020\n\010table_id\030\003 \001("
  "\005\022\024\n\014table_map_id\030\004 \001(\005\022\023\n\013column_name\030\005"
  " \001(\t\022\023\n\013column_type\030\006 \001(\t\022`\n\tone_click\030\007"
  " \001(\0132M.io.deephaven.proto.backplane.scri"
  "pt.grpc.FigureDescriptor.OneClickDescrip"
  "tor\032c\n\022OneClickDescriptor\022\017\n\007columns\030\001 \003"
  "(\t\022\024\n\014column_types\030\002 \003(\t\022&\n\036require_all_"
  "filters_to_display\030\003 \001(\010\"\231\001\n\017SeriesPlotS"
  "tyle\022\007\n\003BAR\020\000\022\017\n\013STACKED_BAR\020\001\022\010\n\004LINE\020\002"
  "\022\010\n\004AREA\020\003\022\020\n\014STACKED_AREA\020\004\022\007\n\003PIE\020\005\022\r\n"
  "\tHISTOGRAM\020\006\022\010\n\004OHLC\020\007\022\013\n\007SCATTER\020\010\022\010\n\004S"
  "TEP\020\t\022\r\n\tERROR_BAR\020\n\"\254\001\n\nSourceType\022\005\n\001X"
  "\020\000\022\005\n\001Y\020\001\022\005\n\001Z\020\002\022\t\n\005X_LOW\020\003\022\n\n\006X_HIGH\020\004\022"
  "\t\n\005Y_LOW\020\005\022\n\n\006Y_HIGH\020\006\022\010\n\004TIME\020\007\022\010\n\004OPEN"
  "\020\010\022\010\n\004HIGH\020\t\022\007\n\003LOW\020\n\022\t\n\005CLOSE\020\013\022\t\n\005SHAP"
  "E\020\014\022\010\n\004SIZE\020\r\022\t\n\005LABEL\020\016\022\t\n\005COLOR\020\017B\010\n\006_"
  "titleJ\004\010\014\020\r2\216\014\n\016ConsoleService\022\230\001\n\017GetCo"
  "nsoleTypes\022@.io.deephaven.proto.backplan"
  "e.script.grpc.GetConsoleTypesRequest\032A.i"
  "o.deephaven.proto.backplane.script.grpc."
  "GetConsoleTypesResponse\"\000\022\217\001\n\014StartConso"
  "le\022=.io.deephaven.proto.backplane.script"
  ".grpc.StartConsoleRequest\032>.io.deephaven"
  ".proto.backplane.script.grpc.StartConsol"
  "eResponse\"\000\022\226\001\n\017SubscribeToLogs\022@.io.dee"
  "phaven.proto.backplane.script.grpc.LogSu"
  "bscriptionRequest\032=.io.deephaven.proto.b"
  "ackplane.script.grpc.LogSubscriptionData"
  "\"\0000\001\022\225\001\n\016ExecuteCommand\022\?.io.deephaven.p"
  "roto.backplane.script.grpc.ExecuteComman"
  "dRequest\032@.io.deephaven.proto.backplane."
  "script.grpc.ExecuteCommandResponse\"\000\022\222\001\n"
  "\rCancelCommand\022>.io.deephaven.proto.back"
  "plane.script.grpc.CancelCommandRequest\032\?"
  ".io.deephaven.proto.backplane.script.grp"
  "c.CancelCommandResponse\"\000\022\244\001\n\023BindTableT"
  "oVariable\022D.io.deephaven.proto.backplane"
  ".script.grpc.BindTableToVariableRequest\032"
  "E.io.deephaven.proto.backplane.script.gr"
  "pc.BindTableToVariableResponse\"\000\022\231\001\n\022Aut"
  "oCompleteStream\022=.io.deephaven.proto.bac"
  "kplane.script.grpc.AutoCompleteRequest\032>"
  ".io.deephaven.proto.backplane.script.grp"
  "c.AutoCompleteResponse\"\000(\0010\001\022\233\001\n\026OpenAut"
  "oCompleteStream\022=.io.deephaven.proto.bac"
  "kplane.script.grpc.AutoCompleteRequest\032>"
  ".io.deephaven.proto.backplane.script.grp"
  "c.AutoCompleteResponse\"\0000\001\022\230\001\n\026NextAutoC"
  "ompleteStream\022=.io.deephaven.proto.backp"
  "lane.script.grpc.AutoCompleteRequest\032=.i"
  "o.deephaven.proto.backplane.script.grpc."
  "BrowserNextResponse\"\000\022\214\001\n\013FetchFigure\022<."
  "io.deephaven.proto.backplane.script.grpc"
  ".FetchFigureRequest\032=.io.deephaven.proto"
  ".backplane.script.grpc.FetchFigureRespon"
  "se\"\000B\004H\001P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_deephaven_2fproto_2fconsole_2eproto_deps[2] = {
  &::descriptor_table_deephaven_2fproto_2ftable_2eproto,
  &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_deephaven_2fproto_2fconsole_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2fconsole_2eproto = {
  false, false, 12138, descriptor_table_protodef_deephaven_2fproto_2fconsole_2eproto, "deephaven/proto/console.proto", 
  &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once, descriptor_table_deephaven_2fproto_2fconsole_2eproto_deps, 2, 46,
  schemas, file_default_instances, TableStruct_deephaven_2fproto_2fconsole_2eproto::offsets,
  file_level_metadata_deephaven_2fproto_2fconsole_2eproto, file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto, file_level_service_descriptors_deephaven_2fproto_2fconsole_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_deephaven_2fproto_2fconsole_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return descriptor_table_deephaven_2fproto_2fconsole_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2fconsole_2eproto(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_ChartDescriptor_ChartType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[0];
}
bool FigureDescriptor_ChartDescriptor_ChartType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::XY;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::PIE;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::OHLC;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::CATEGORY;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::XYZ;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::CATEGORY_3D;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::ChartType_MIN;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::ChartType_MAX;
constexpr int FigureDescriptor_ChartDescriptor::ChartType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisFormatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[1];
}
bool FigureDescriptor_AxisDescriptor_AxisFormatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::CATEGORY;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::NUMBER;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::AxisFormatType_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::AxisFormatType_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisFormatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[2];
}
bool FigureDescriptor_AxisDescriptor_AxisType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::X;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::Y;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::SHAPE;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::SIZE;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::LABEL;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::COLOR;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::AxisType_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::AxisType_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[3];
}
bool FigureDescriptor_AxisDescriptor_AxisPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::TOP;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::BOTTOM;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::LEFT;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::RIGHT;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::NONE;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::AxisPosition_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::AxisPosition_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[4];
}
bool FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::SUNDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::MONDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::TUESDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::WEDNESDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::THURSDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::FRIDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::SATURDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_MIN;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_MAX;
constexpr int FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_SeriesPlotStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[5];
}
bool FigureDescriptor_SeriesPlotStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STACKED_BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::LINE;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::AREA;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STACKED_AREA;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::PIE;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::HISTOGRAM;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::OHLC;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SCATTER;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STEP;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::ERROR_BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SeriesPlotStyle_MIN;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SeriesPlotStyle_MAX;
constexpr int FigureDescriptor::SeriesPlotStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[6];
}
bool FigureDescriptor_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FigureDescriptor_SourceType FigureDescriptor::X;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y;
constexpr FigureDescriptor_SourceType FigureDescriptor::Z;
constexpr FigureDescriptor_SourceType FigureDescriptor::X_LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::X_HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y_LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y_HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::TIME;
constexpr FigureDescriptor_SourceType FigureDescriptor::OPEN;
constexpr FigureDescriptor_SourceType FigureDescriptor::HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::CLOSE;
constexpr FigureDescriptor_SourceType FigureDescriptor::SHAPE;
constexpr FigureDescriptor_SourceType FigureDescriptor::SIZE;
constexpr FigureDescriptor_SourceType FigureDescriptor::LABEL;
constexpr FigureDescriptor_SourceType FigureDescriptor::COLOR;
constexpr FigureDescriptor_SourceType FigureDescriptor::SourceType_MIN;
constexpr FigureDescriptor_SourceType FigureDescriptor::SourceType_MAX;
constexpr int FigureDescriptor::SourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class GetConsoleTypesRequest::_Internal {
 public:
};

GetConsoleTypesRequest::GetConsoleTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}
GetConsoleTypesRequest::GetConsoleTypesRequest(const GetConsoleTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}

void GetConsoleTypesRequest::SharedCtor() {
}

GetConsoleTypesRequest::~GetConsoleTypesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConsoleTypesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetConsoleTypesRequest::ArenaDtor(void* object) {
  GetConsoleTypesRequest* _this = reinterpret_cast< GetConsoleTypesRequest* >(object);
  (void)_this;
}
void GetConsoleTypesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConsoleTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConsoleTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsoleTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConsoleTypesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  return target;
}

size_t GetConsoleTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConsoleTypesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsoleTypesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConsoleTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
    MergeFrom(*source);
  }
}

void GetConsoleTypesRequest::MergeFrom(const GetConsoleTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetConsoleTypesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsoleTypesRequest::CopyFrom(const GetConsoleTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsoleTypesRequest::IsInitialized() const {
  return true;
}

void GetConsoleTypesRequest::InternalSwap(GetConsoleTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsoleTypesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetConsoleTypesResponse::_Internal {
 public:
};

GetConsoleTypesResponse::GetConsoleTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  console_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}
GetConsoleTypesResponse::GetConsoleTypesResponse(const GetConsoleTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      console_types_(from.console_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}

void GetConsoleTypesResponse::SharedCtor() {
}

GetConsoleTypesResponse::~GetConsoleTypesResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConsoleTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetConsoleTypesResponse::ArenaDtor(void* object) {
  GetConsoleTypesResponse* _this = reinterpret_cast< GetConsoleTypesResponse* >(object);
  (void)_this;
}
void GetConsoleTypesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConsoleTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConsoleTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  console_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsoleTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string console_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_console_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConsoleTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string console_types = 1;
  for (int i = 0, n = this->_internal_console_types_size(); i < n; i++) {
    const auto& s = this->_internal_console_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  return target;
}

size_t GetConsoleTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string console_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(console_types_.size());
  for (int i = 0, n = console_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      console_types_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConsoleTypesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConsoleTypesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConsoleTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
    MergeFrom(*source);
  }
}

void GetConsoleTypesResponse::MergeFrom(const GetConsoleTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  console_types_.MergeFrom(from.console_types_);
}

void GetConsoleTypesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsoleTypesResponse::CopyFrom(const GetConsoleTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsoleTypesResponse::IsInitialized() const {
  return true;
}

void GetConsoleTypesResponse::InternalSwap(GetConsoleTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  console_types_.InternalSwap(&other->console_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsoleTypesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartConsoleRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const StartConsoleRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
StartConsoleRequest::_Internal::result_id(const StartConsoleRequest* msg) {
  return *msg->result_id_;
}
void StartConsoleRequest::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
StartConsoleRequest::StartConsoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}
StartConsoleRequest::StartConsoleRequest(const StartConsoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_type().empty()) {
    session_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_type(), 
      GetArena());
  }
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}

void StartConsoleRequest::SharedCtor() {
session_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_id_ = nullptr;
}

StartConsoleRequest::~StartConsoleRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartConsoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_id_;
}

void StartConsoleRequest::ArenaDtor(void* object) {
  StartConsoleRequest* _this = reinterpret_cast< StartConsoleRequest* >(object);
  (void)_this;
}
void StartConsoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartConsoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartConsoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_type_.ClearToEmpty();
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartConsoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartConsoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  // string session_type = 2;
  if (this->session_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_type().data(), static_cast<int>(this->_internal_session_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  return target;
}

size_t StartConsoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_type = 2;
  if (this->session_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_type());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartConsoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartConsoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartConsoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
    MergeFrom(*source);
  }
}

void StartConsoleRequest::MergeFrom(const StartConsoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_type().size() > 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
}

void StartConsoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartConsoleRequest::CopyFrom(const StartConsoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartConsoleRequest::IsInitialized() const {
  return true;
}

void StartConsoleRequest::InternalSwap(StartConsoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_type_.Swap(&other->session_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_id_, other->result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartConsoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartConsoleResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const StartConsoleResponse* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
StartConsoleResponse::_Internal::result_id(const StartConsoleResponse* msg) {
  return *msg->result_id_;
}
void StartConsoleResponse::clear_result_id() {
  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
}
StartConsoleResponse::StartConsoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}
StartConsoleResponse::StartConsoleResponse(const StartConsoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_id_);
  } else {
    result_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}

void StartConsoleResponse::SharedCtor() {
result_id_ = nullptr;
}

StartConsoleResponse::~StartConsoleResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartConsoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_id_;
}

void StartConsoleResponse::ArenaDtor(void* object) {
  StartConsoleResponse* _this = reinterpret_cast< StartConsoleResponse* >(object);
  (void)_this;
}
void StartConsoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartConsoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartConsoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_id_ != nullptr) {
    delete result_id_;
  }
  result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartConsoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartConsoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->has_result_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  return target;
}

size_t StartConsoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartConsoleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartConsoleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartConsoleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
    MergeFrom(*source);
  }
}

void StartConsoleResponse::MergeFrom(const StartConsoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_id()) {
    _internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_id());
  }
}

void StartConsoleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartConsoleResponse::CopyFrom(const StartConsoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartConsoleResponse::IsInitialized() const {
  return true;
}

void StartConsoleResponse::InternalSwap(StartConsoleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_id_, other->result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartConsoleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogSubscriptionRequest::_Internal {
 public:
};

LogSubscriptionRequest::LogSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  levels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}
LogSubscriptionRequest::LogSubscriptionRequest(const LogSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      levels_(from.levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_seen_log_timestamp_ = from.last_seen_log_timestamp_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}

void LogSubscriptionRequest::SharedCtor() {
last_seen_log_timestamp_ = PROTOBUF_LONGLONG(0);
}

LogSubscriptionRequest::~LogSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogSubscriptionRequest::ArenaDtor(void* object) {
  LogSubscriptionRequest* _this = reinterpret_cast< LogSubscriptionRequest* >(object);
  (void)_this;
}
void LogSubscriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  last_seen_log_timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 last_seen_log_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_seen_log_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_levels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSubscriptionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_seen_log_timestamp = 1;
  if (this->last_seen_log_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_seen_log_timestamp(), target);
  }

  // repeated string levels = 2;
  for (int i = 0, n = this->_internal_levels_size(); i < n; i++) {
    const auto& s = this->_internal_levels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  return target;
}

size_t LogSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string levels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(levels_.size());
  for (int i = 0, n = levels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      levels_.Get(i));
  }

  // int64 last_seen_log_timestamp = 1;
  if (this->last_seen_log_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_seen_log_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
    MergeFrom(*source);
  }
}

void LogSubscriptionRequest::MergeFrom(const LogSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
  if (from.last_seen_log_timestamp() != 0) {
    _internal_set_last_seen_log_timestamp(from._internal_last_seen_log_timestamp());
  }
}

void LogSubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSubscriptionRequest::CopyFrom(const LogSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSubscriptionRequest::IsInitialized() const {
  return true;
}

void LogSubscriptionRequest::InternalSwap(LogSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  levels_.InternalSwap(&other->levels_);
  swap(last_seen_log_timestamp_, other->last_seen_log_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogSubscriptionData::_Internal {
 public:
};

LogSubscriptionData::LogSubscriptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}
LogSubscriptionData::LogSubscriptionData(const LogSubscriptionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_level().empty()) {
    log_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_level(), 
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  micros_ = from.micros_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}

void LogSubscriptionData::SharedCtor() {
log_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
micros_ = PROTOBUF_LONGLONG(0);
}

LogSubscriptionData::~LogSubscriptionData() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSubscriptionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  log_level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogSubscriptionData::ArenaDtor(void* object) {
  LogSubscriptionData* _this = reinterpret_cast< LogSubscriptionData* >(object);
  (void)_this;
}
void LogSubscriptionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSubscriptionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogSubscriptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_level_.ClearToEmpty();
  message_.ClearToEmpty();
  micros_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSubscriptionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 micros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_log_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSubscriptionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 micros = 1;
  if (this->micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_micros(), target);
  }

  // string log_level = 2;
  if (this->log_level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_level().data(), static_cast<int>(this->_internal_log_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log_level(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  return target;
}

size_t LogSubscriptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_level = 2;
  if (this->log_level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_level());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 micros = 1;
  if (this->micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_micros());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSubscriptionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSubscriptionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSubscriptionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
    MergeFrom(*source);
  }
}

void LogSubscriptionData::MergeFrom(const LogSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_level().size() > 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.micros() != 0) {
    _internal_set_micros(from._internal_micros());
  }
}

void LogSubscriptionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSubscriptionData::CopyFrom(const LogSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSubscriptionData::IsInitialized() const {
  return true;
}

void LogSubscriptionData::InternalSwap(LogSubscriptionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  log_level_.Swap(&other->log_level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(micros_, other->micros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSubscriptionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteCommandRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const ExecuteCommandRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ExecuteCommandRequest::_Internal::console_id(const ExecuteCommandRequest* msg) {
  return *msg->console_id_;
}
void ExecuteCommandRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
ExecuteCommandRequest::ExecuteCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}
ExecuteCommandRequest::ExecuteCommandRequest(const ExecuteCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  if (from._internal_has_console_id()) {
    console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}

void ExecuteCommandRequest::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
console_id_ = nullptr;
}

ExecuteCommandRequest::~ExecuteCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete console_id_;
}

void ExecuteCommandRequest::ArenaDtor(void* object) {
  ExecuteCommandRequest* _this = reinterpret_cast< ExecuteCommandRequest* >(object);
  (void)_this;
}
void ExecuteCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // string code = 3;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  return target;
}

size_t ExecuteCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
    MergeFrom(*source);
  }
}

void ExecuteCommandRequest::MergeFrom(const ExecuteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.has_console_id()) {
    _internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_console_id());
  }
}

void ExecuteCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteCommandRequest::CopyFrom(const ExecuteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteCommandRequest::IsInitialized() const {
  return true;
}

void ExecuteCommandRequest::InternalSwap(ExecuteCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(console_id_, other->console_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecuteCommandResponse::_Internal {
 public:
};

ExecuteCommandResponse::ExecuteCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  created_(arena),
  updated_(arena),
  removed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}
ExecuteCommandResponse::ExecuteCommandResponse(const ExecuteCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      created_(from.created_),
      updated_(from.updated_),
      removed_(from.removed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}

void ExecuteCommandResponse::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteCommandResponse::~ExecuteCommandResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteCommandResponse::ArenaDtor(void* object) {
  ExecuteCommandResponse* _this = reinterpret_cast< ExecuteCommandResponse* >(object);
  (void)_this;
}
void ExecuteCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  created_.Clear();
  updated_.Clear();
  removed_.Clear();
  error_message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_created(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_created_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_created(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_updated(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_removed(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  return target;
}

size_t ExecuteCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition created = 2;
  total_size += 1UL * this->_internal_created_size();
  for (const auto& msg : this->created_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition updated = 3;
  total_size += 1UL * this->_internal_updated_size();
  for (const auto& msg : this->updated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.VariableDefinition removed = 4;
  total_size += 1UL * this->_internal_removed_size();
  for (const auto& msg : this->removed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
    MergeFrom(*source);
  }
}

void ExecuteCommandResponse::MergeFrom(const ExecuteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  created_.MergeFrom(from.created_);
  updated_.MergeFrom(from.updated_);
  removed_.MergeFrom(from.removed_);
  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
}

void ExecuteCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteCommandResponse::CopyFrom(const ExecuteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteCommandResponse::IsInitialized() const {
  return true;
}

void ExecuteCommandResponse::InternalSwap(ExecuteCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  created_.InternalSwap(&other->created_);
  updated_.InternalSwap(&other->updated_);
  removed_.InternalSwap(&other->removed_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VariableDefinition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& id(const VariableDefinition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
VariableDefinition::_Internal::id(const VariableDefinition* msg) {
  return *msg->id_;
}
void VariableDefinition::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
VariableDefinition::VariableDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
}
VariableDefinition::VariableDefinition(const VariableDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
}

void VariableDefinition::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = nullptr;
}

VariableDefinition::~VariableDefinition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VariableDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void VariableDefinition::ArenaDtor(void* object) {
  VariableDefinition* _this = reinterpret_cast< VariableDefinition* >(object);
  (void)_this;
}
void VariableDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  title_.ClearToEmpty();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.VariableDefinition.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.VariableDefinition.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariableDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.VariableDefinition.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.VariableDefinition.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket id = 3;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  return target;
}

size_t VariableDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket id = 3;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariableDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
    MergeFrom(*source);
  }
}

void VariableDefinition::MergeFrom(const VariableDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_id());
  }
}

void VariableDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableDefinition::CopyFrom(const VariableDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.VariableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableDefinition::IsInitialized() const {
  return true;
}

void VariableDefinition::InternalSwap(VariableDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BindTableToVariableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const BindTableToVariableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& table_id(const BindTableToVariableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
BindTableToVariableRequest::_Internal::console_id(const BindTableToVariableRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
BindTableToVariableRequest::_Internal::table_id(const BindTableToVariableRequest* msg) {
  return *msg->table_id_;
}
void BindTableToVariableRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
void BindTableToVariableRequest::clear_table_id() {
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
}
BindTableToVariableRequest::BindTableToVariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}
BindTableToVariableRequest::BindTableToVariableRequest(const BindTableToVariableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  variable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable_name().empty()) {
    variable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_variable_name(), 
      GetArena());
  }
  if (from._internal_has_console_id()) {
    console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}

void BindTableToVariableRequest::SharedCtor() {
variable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(table_id_));
}

BindTableToVariableRequest::~BindTableToVariableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BindTableToVariableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  variable_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete table_id_;
}

void BindTableToVariableRequest::ArenaDtor(void* object) {
  BindTableToVariableRequest* _this = reinterpret_cast< BindTableToVariableRequest* >(object);
  (void)_this;
}
void BindTableToVariableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindTableToVariableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BindTableToVariableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_name_.ClearToEmpty();
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && table_id_ != nullptr) {
    delete table_id_;
  }
  table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindTableToVariableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_variable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindTableToVariableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // string variable_name = 3;
  if (this->variable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable_name().data(), static_cast<int>(this->_internal_variable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_variable_name(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
  if (this->has_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::table_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  return target;
}

size_t BindTableToVariableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_name = 3;
  if (this->variable_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable_name());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
  if (this->has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindTableToVariableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindTableToVariableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindTableToVariableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
    MergeFrom(*source);
  }
}

void BindTableToVariableRequest::MergeFrom(const BindTableToVariableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variable_name().size() > 0) {
    _internal_set_variable_name(from._internal_variable_name());
  }
  if (from.has_console_id()) {
    _internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_console_id());
  }
  if (from.has_table_id()) {
    _internal_mutable_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_table_id());
  }
}

void BindTableToVariableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindTableToVariableRequest::CopyFrom(const BindTableToVariableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindTableToVariableRequest::IsInitialized() const {
  return true;
}

void BindTableToVariableRequest::InternalSwap(BindTableToVariableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variable_name_.Swap(&other->variable_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, table_id_)
      + sizeof(BindTableToVariableRequest::table_id_)
      - PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BindTableToVariableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BindTableToVariableResponse::_Internal {
 public:
};

BindTableToVariableResponse::BindTableToVariableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}
BindTableToVariableResponse::BindTableToVariableResponse(const BindTableToVariableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}

void BindTableToVariableResponse::SharedCtor() {
}

BindTableToVariableResponse::~BindTableToVariableResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BindTableToVariableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BindTableToVariableResponse::ArenaDtor(void* object) {
  BindTableToVariableResponse* _this = reinterpret_cast< BindTableToVariableResponse* >(object);
  (void)_this;
}
void BindTableToVariableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindTableToVariableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BindTableToVariableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindTableToVariableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindTableToVariableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  return target;
}

size_t BindTableToVariableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindTableToVariableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindTableToVariableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindTableToVariableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
    MergeFrom(*source);
  }
}

void BindTableToVariableResponse::MergeFrom(const BindTableToVariableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BindTableToVariableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindTableToVariableResponse::CopyFrom(const BindTableToVariableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindTableToVariableResponse::IsInitialized() const {
  return true;
}

void BindTableToVariableResponse::InternalSwap(BindTableToVariableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BindTableToVariableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelCommandRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CancelCommandRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& command_id(const CancelCommandRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CancelCommandRequest::_Internal::console_id(const CancelCommandRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
CancelCommandRequest::_Internal::command_id(const CancelCommandRequest* msg) {
  return *msg->command_id_;
}
void CancelCommandRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
void CancelCommandRequest::clear_command_id() {
  if (GetArena() == nullptr && command_id_ != nullptr) {
    delete command_id_;
  }
  command_id_ = nullptr;
}
CancelCommandRequest::CancelCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}
CancelCommandRequest::CancelCommandRequest(const CancelCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_command_id()) {
    command_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.command_id_);
  } else {
    command_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}

void CancelCommandRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(command_id_));
}

CancelCommandRequest::~CancelCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete command_id_;
}

void CancelCommandRequest::ArenaDtor(void* object) {
  CancelCommandRequest* _this = reinterpret_cast< CancelCommandRequest* >(object);
  (void)_this;
}
void CancelCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && command_id_ != nullptr) {
    delete command_id_;
  }
  command_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
  if (this->has_command_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  return target;
}

size_t CancelCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
  if (this->has_command_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
    MergeFrom(*source);
  }
}

void CancelCommandRequest::MergeFrom(const CancelCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_console_id());
  }
  if (from.has_command_id()) {
    _internal_mutable_command_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_command_id());
  }
}

void CancelCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelCommandRequest::CopyFrom(const CancelCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelCommandRequest::IsInitialized() const {
  return true;
}

void CancelCommandRequest::InternalSwap(CancelCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelCommandRequest, command_id_)
      + sizeof(CancelCommandRequest::command_id_)
      - PROTOBUF_FIELD_OFFSET(CancelCommandRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelCommandResponse::_Internal {
 public:
};

CancelCommandResponse::CancelCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}
CancelCommandResponse::CancelCommandResponse(const CancelCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}

void CancelCommandResponse::SharedCtor() {
}

CancelCommandResponse::~CancelCommandResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelCommandResponse::ArenaDtor(void* object) {
  CancelCommandResponse* _this = reinterpret_cast< CancelCommandResponse* >(object);
  (void)_this;
}
void CancelCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  return target;
}

size_t CancelCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
    MergeFrom(*source);
  }
}

void CancelCommandResponse::MergeFrom(const CancelCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CancelCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelCommandResponse::CopyFrom(const CancelCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelCommandResponse::IsInitialized() const {
  return true;
}

void CancelCommandResponse::InternalSwap(CancelCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AutoCompleteRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest& open_document(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest& change_document(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest& get_completion_items(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest& close_document(const AutoCompleteRequest* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest&
AutoCompleteRequest::_Internal::open_document(const AutoCompleteRequest* msg) {
  return *msg->request_.open_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest&
AutoCompleteRequest::_Internal::change_document(const AutoCompleteRequest* msg) {
  return *msg->request_.change_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest&
AutoCompleteRequest::_Internal::get_completion_items(const AutoCompleteRequest* msg) {
  return *msg->request_.get_completion_items_;
}
const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest&
AutoCompleteRequest::_Internal::close_document(const AutoCompleteRequest* msg) {
  return *msg->request_.close_document_;
}
void AutoCompleteRequest::set_allocated_open_document(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* open_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (open_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(open_document);
    if (message_arena != submessage_arena) {
      open_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_document, submessage_arena);
    }
    set_has_open_document();
    request_.open_document_ = open_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.open_document)
}
void AutoCompleteRequest::set_allocated_change_document(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* change_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (change_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change_document);
    if (message_arena != submessage_arena) {
      change_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_document, submessage_arena);
    }
    set_has_change_document();
    request_.change_document_ = change_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.change_document)
}
void AutoCompleteRequest::set_allocated_get_completion_items(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* get_completion_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_completion_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_completion_items);
    if (message_arena != submessage_arena) {
      get_completion_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_completion_items, submessage_arena);
    }
    set_has_get_completion_items();
    request_.get_completion_items_ = get_completion_items;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_completion_items)
}
void AutoCompleteRequest::set_allocated_close_document(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* close_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (close_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(close_document);
    if (message_arena != submessage_arena) {
      close_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_document, submessage_arena);
    }
    set_has_close_document();
    request_.close_document_ = close_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.close_document)
}
AutoCompleteRequest::AutoCompleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
}
AutoCompleteRequest::AutoCompleteRequest(const AutoCompleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kOpenDocument: {
      _internal_mutable_open_document()->::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest::MergeFrom(from._internal_open_document());
      break;
    }
    case kChangeDocument: {
      _internal_mutable_change_document()->::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest::MergeFrom(from._internal_change_document());
      break;
    }
    case kGetCompletionItems: {
      _internal_mutable_get_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest::MergeFrom(from._internal_get_completion_items());
      break;
    }
    case kCloseDocument: {
      _internal_mutable_close_document()->::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest::MergeFrom(from._internal_close_document());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
}

void AutoCompleteRequest::SharedCtor() {
clear_has_request();
}

AutoCompleteRequest::~AutoCompleteRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoCompleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void AutoCompleteRequest::ArenaDtor(void* object) {
  AutoCompleteRequest* _this = reinterpret_cast< AutoCompleteRequest* >(object);
  (void)_this;
}
void AutoCompleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoCompleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoCompleteRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  switch (request_case()) {
    case kOpenDocument: {
      if (GetArena() == nullptr) {
        delete request_.open_document_;
      }
      break;
    }
    case kChangeDocument: {
      if (GetArena() == nullptr) {
        delete request_.change_document_;
      }
      break;
    }
    case kGetCompletionItems: {
      if (GetArena() == nullptr) {
        delete request_.get_completion_items_;
      }
      break;
    }
    case kCloseDocument: {
      if (GetArena() == nullptr) {
        delete request_.close_document_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void AutoCompleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoCompleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_completion_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoCompleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
  if (_internal_has_open_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::open_document(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
  if (_internal_has_change_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::change_document(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
  if (_internal_has_get_completion_items()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_completion_items(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
  if (_internal_has_close_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::close_document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  return target;
}

size_t AutoCompleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
    case kOpenDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.open_document_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
    case kChangeDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.change_document_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
    case kGetCompletionItems: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_completion_items_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
    case kCloseDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.close_document_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoCompleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoCompleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoCompleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
    MergeFrom(*source);
  }
}

void AutoCompleteRequest::MergeFrom(const AutoCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kOpenDocument: {
      _internal_mutable_open_document()->::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest::MergeFrom(from._internal_open_document());
      break;
    }
    case kChangeDocument: {
      _internal_mutable_change_document()->::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest::MergeFrom(from._internal_change_document());
      break;
    }
    case kGetCompletionItems: {
      _internal_mutable_get_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest::MergeFrom(from._internal_get_completion_items());
      break;
    }
    case kCloseDocument: {
      _internal_mutable_close_document()->::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest::MergeFrom(from._internal_close_document());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void AutoCompleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCompleteRequest::CopyFrom(const AutoCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteRequest::IsInitialized() const {
  return true;
}

void AutoCompleteRequest::InternalSwap(AutoCompleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoCompleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AutoCompleteResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse& completion_items(const AutoCompleteResponse* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse&
AutoCompleteResponse::_Internal::completion_items(const AutoCompleteResponse* msg) {
  return *msg->response_.completion_items_;
}
void AutoCompleteResponse::set_allocated_completion_items(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* completion_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (completion_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(completion_items);
    if (message_arena != submessage_arena) {
      completion_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completion_items, submessage_arena);
    }
    set_has_completion_items();
    response_.completion_items_ = completion_items;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.completion_items)
}
AutoCompleteResponse::AutoCompleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
}
AutoCompleteResponse::AutoCompleteResponse(const AutoCompleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kCompletionItems: {
      _internal_mutable_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse::MergeFrom(from._internal_completion_items());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
}

void AutoCompleteResponse::SharedCtor() {
clear_has_response();
}

AutoCompleteResponse::~AutoCompleteResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoCompleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void AutoCompleteResponse::ArenaDtor(void* object) {
  AutoCompleteResponse* _this = reinterpret_cast< AutoCompleteResponse* >(object);
  (void)_this;
}
void AutoCompleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoCompleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoCompleteResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  switch (response_case()) {
    case kCompletionItems: {
      if (GetArena() == nullptr) {
        delete response_.completion_items_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void AutoCompleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoCompleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_completion_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoCompleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
  if (_internal_has_completion_items()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::completion_items(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  return target;
}

size_t AutoCompleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
    case kCompletionItems: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.completion_items_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoCompleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoCompleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoCompleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
    MergeFrom(*source);
  }
}

void AutoCompleteResponse::MergeFrom(const AutoCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kCompletionItems: {
      _internal_mutable_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse::MergeFrom(from._internal_completion_items());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void AutoCompleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCompleteResponse::CopyFrom(const AutoCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteResponse::IsInitialized() const {
  return true;
}

void AutoCompleteResponse::InternalSwap(AutoCompleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoCompleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BrowserNextResponse::_Internal {
 public:
};

BrowserNextResponse::BrowserNextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
}
BrowserNextResponse::BrowserNextResponse(const BrowserNextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
}

void BrowserNextResponse::SharedCtor() {
}

BrowserNextResponse::~BrowserNextResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BrowserNextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BrowserNextResponse::ArenaDtor(void* object) {
  BrowserNextResponse* _this = reinterpret_cast< BrowserNextResponse* >(object);
  (void)_this;
}
void BrowserNextResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrowserNextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrowserNextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrowserNextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BrowserNextResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  return target;
}

size_t BrowserNextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrowserNextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BrowserNextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrowserNextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
    MergeFrom(*source);
  }
}

void BrowserNextResponse::MergeFrom(const BrowserNextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BrowserNextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowserNextResponse::CopyFrom(const BrowserNextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowserNextResponse::IsInitialized() const {
  return true;
}

void BrowserNextResponse::InternalSwap(BrowserNextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrowserNextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenDocumentRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const OpenDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& text_document(const OpenDocumentRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
OpenDocumentRequest::_Internal::console_id(const OpenDocumentRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem&
OpenDocumentRequest::_Internal::text_document(const OpenDocumentRequest* msg) {
  return *msg->text_document_;
}
void OpenDocumentRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
OpenDocumentRequest::OpenDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}
OpenDocumentRequest::OpenDocumentRequest(const OpenDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}

void OpenDocumentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_document_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(text_document_));
}

OpenDocumentRequest::~OpenDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete text_document_;
}

void OpenDocumentRequest::ArenaDtor(void* object) {
  OpenDocumentRequest* _this = reinterpret_cast< OpenDocumentRequest* >(object);
  (void)_this;
}
void OpenDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenDocumentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text_document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  return target;
}

size_t OpenDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenDocumentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenDocumentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
    MergeFrom(*source);
  }
}

void OpenDocumentRequest::MergeFrom(const OpenDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_console_id());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::TextDocumentItem::MergeFrom(from._internal_text_document());
  }
}

void OpenDocumentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDocumentRequest::CopyFrom(const OpenDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDocumentRequest::IsInitialized() const {
  return true;
}

void OpenDocumentRequest::InternalSwap(OpenDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, text_document_)
      + sizeof(OpenDocumentRequest::text_document_)
      - PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenDocumentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextDocumentItem::_Internal {
 public:
};

TextDocumentItem::TextDocumentItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}
TextDocumentItem::TextDocumentItem(const TextDocumentItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArena());
  }
  language_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_id().empty()) {
    language_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_id(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}

void TextDocumentItem::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 0;
}

TextDocumentItem::~TextDocumentItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextDocumentItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextDocumentItem::ArenaDtor(void* object) {
  TextDocumentItem* _this = reinterpret_cast< TextDocumentItem* >(object);
  (void)_this;
}
void TextDocumentItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextDocumentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextDocumentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  language_id_.ClearToEmpty();
  text_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextDocumentItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextDocumentItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string language_id = 2;
  if (this->language_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_id().data(), static_cast<int>(this->_internal_language_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_id(), target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // string text = 4;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  return target;
}

size_t TextDocumentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string language_id = 2;
  if (this->language_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_id());
  }

  // string text = 4;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextDocumentItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TextDocumentItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextDocumentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
    MergeFrom(*source);
  }
}

void TextDocumentItem::MergeFrom(const TextDocumentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.language_id().size() > 0) {
    _internal_set_language_id(from._internal_language_id());
  }
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void TextDocumentItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextDocumentItem::CopyFrom(const TextDocumentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextDocumentItem::IsInitialized() const {
  return true;
}

void TextDocumentItem::InternalSwap(TextDocumentItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_id_.Swap(&other->language_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextDocumentItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloseDocumentRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CloseDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const CloseDocumentRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CloseDocumentRequest::_Internal::console_id(const CloseDocumentRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
CloseDocumentRequest::_Internal::text_document(const CloseDocumentRequest* msg) {
  return *msg->text_document_;
}
void CloseDocumentRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
CloseDocumentRequest::CloseDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}
CloseDocumentRequest::CloseDocumentRequest(const CloseDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}

void CloseDocumentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_document_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(text_document_));
}

CloseDocumentRequest::~CloseDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete text_document_;
}

void CloseDocumentRequest::ArenaDtor(void* object) {
  CloseDocumentRequest* _this = reinterpret_cast< CloseDocumentRequest* >(object);
  (void)_this;
}
void CloseDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseDocumentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text_document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  return target;
}

size_t CloseDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseDocumentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseDocumentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
    MergeFrom(*source);
  }
}

void CloseDocumentRequest::MergeFrom(const CloseDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_console_id());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(from._internal_text_document());
  }
}

void CloseDocumentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDocumentRequest::CopyFrom(const CloseDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDocumentRequest::IsInitialized() const {
  return true;
}

void CloseDocumentRequest::InternalSwap(CloseDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, text_document_)
      + sizeof(CloseDocumentRequest::text_document_)
      - PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseDocumentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal::range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg) {
  return *msg->range_;
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_range()) {
    range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  range_length_ = from.range_length_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_length_) -
    reinterpret_cast<char*>(&range_)) + sizeof(range_length_));
}

ChangeDocumentRequest_TextDocumentContentChangeEvent::~ChangeDocumentRequest_TextDocumentContentChangeEvent() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::ArenaDtor(void* object) {
  ChangeDocumentRequest_TextDocumentContentChangeEvent* _this = reinterpret_cast< ChangeDocumentRequest_TextDocumentContentChangeEvent* >(object);
  (void)_this;
}
void ChangeDocumentRequest_TextDocumentContentChangeEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeDocumentRequest_TextDocumentContentChangeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  range_length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 range_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::range(this), target, stream);
  }

  // int32 range_length = 2;
  if (this->range_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_length(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  return target;
}

size_t ChangeDocumentRequest_TextDocumentContentChangeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // int32 range_length = 2;
  if (this->range_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeDocumentRequest_TextDocumentContentChangeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeDocumentRequest_TextDocumentContentChangeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
    MergeFrom(*source);
  }
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_range()) {
    _internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(from._internal_range());
  }
  if (from.range_length() != 0) {
    _internal_set_range_length(from._internal_range_length());
  }
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::CopyFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentRequest_TextDocumentContentChangeEvent::IsInitialized() const {
  return true;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::InternalSwap(ChangeDocumentRequest_TextDocumentContentChangeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, range_length_)
      + sizeof(ChangeDocumentRequest_TextDocumentContentChangeEvent::range_length_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentRequest_TextDocumentContentChangeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChangeDocumentRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const ChangeDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const ChangeDocumentRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ChangeDocumentRequest::_Internal::console_id(const ChangeDocumentRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
ChangeDocumentRequest::_Internal::text_document(const ChangeDocumentRequest* msg) {
  return *msg->text_document_;
}
void ChangeDocumentRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
ChangeDocumentRequest::ChangeDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_changes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}
ChangeDocumentRequest::ChangeDocumentRequest(const ChangeDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_changes_(from.content_changes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}

void ChangeDocumentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_document_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(text_document_));
}

ChangeDocumentRequest::~ChangeDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete text_document_;
}

void ChangeDocumentRequest::ArenaDtor(void* object) {
  ChangeDocumentRequest* _this = reinterpret_cast< ChangeDocumentRequest* >(object);
  (void)_this;
}
void ChangeDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_changes_.Clear();
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeDocumentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text_document(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_content_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  return target;
}

size_t ChangeDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  total_size += 1UL * this->_internal_content_changes_size();
  for (const auto& msg : this->content_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeDocumentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeDocumentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeDocumentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
    MergeFrom(*source);
  }
}

void ChangeDocumentRequest::MergeFrom(const ChangeDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_changes_.MergeFrom(from.content_changes_);
  if (from.has_console_id()) {
    _internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_console_id());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(from._internal_text_document());
  }
}

void ChangeDocumentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeDocumentRequest::CopyFrom(const ChangeDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentRequest::IsInitialized() const {
  return true;
}

void ChangeDocumentRequest::InternalSwap(ChangeDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_changes_.InternalSwap(&other->content_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, text_document_)
      + sizeof(ChangeDocumentRequest::text_document_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DocumentRange::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::Position& start(const DocumentRange* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& end(const DocumentRange* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::Position&
DocumentRange::_Internal::start(const DocumentRange* msg) {
  return *msg->start_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
DocumentRange::_Internal::end(const DocumentRange* msg) {
  return *msg->end_;
}
DocumentRange::DocumentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}
DocumentRange::DocumentRange(const DocumentRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}

void DocumentRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

DocumentRange::~DocumentRange() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void DocumentRange::ArenaDtor(void* object) {
  DocumentRange* _this = reinterpret_cast< DocumentRange* >(object);
  (void)_this;
}
void DocumentRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  return target;
}

size_t DocumentRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.DocumentRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.DocumentRange)
    MergeFrom(*source);
  }
}

void DocumentRange::MergeFrom(const DocumentRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    _internal_mutable_start()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(from._internal_end());
  }
}

void DocumentRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentRange::CopyFrom(const DocumentRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentRange::IsInitialized() const {
  return true;
}

void DocumentRange::InternalSwap(DocumentRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentRange, end_)
      + sizeof(DocumentRange::end_)
      - PROTOBUF_FIELD_OFFSET(DocumentRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersionedTextDocumentIdentifier::_Internal {
 public:
};

VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}
VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(const VersionedTextDocumentIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}

void VersionedTextDocumentIdentifier::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 0;
}

VersionedTextDocumentIdentifier::~VersionedTextDocumentIdentifier() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionedTextDocumentIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionedTextDocumentIdentifier::ArenaDtor(void* object) {
  VersionedTextDocumentIdentifier* _this = reinterpret_cast< VersionedTextDocumentIdentifier* >(object);
  (void)_this;
}
void VersionedTextDocumentIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionedTextDocumentIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionedTextDocumentIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionedTextDocumentIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionedTextDocumentIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  return target;
}

size_t VersionedTextDocumentIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionedTextDocumentIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionedTextDocumentIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionedTextDocumentIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
    MergeFrom(*source);
  }
}

void VersionedTextDocumentIdentifier::MergeFrom(const VersionedTextDocumentIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void VersionedTextDocumentIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionedTextDocumentIdentifier::CopyFrom(const VersionedTextDocumentIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionedTextDocumentIdentifier::IsInitialized() const {
  return true;
}

void VersionedTextDocumentIdentifier::InternalSwap(VersionedTextDocumentIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionedTextDocumentIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&line_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.Position)
}

void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&line_)) + sizeof(character_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&line_)) + sizeof(character_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // int32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  // int32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, character_)
      + sizeof(Position::character_)
      - PROTOBUF_FIELD_OFFSET(Position, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCompletionItemsRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& context(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetCompletionItemsRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
GetCompletionItemsRequest::_Internal::console_id(const GetCompletionItemsRequest* msg) {
  return *msg->console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::CompletionContext&
GetCompletionItemsRequest::_Internal::context(const GetCompletionItemsRequest* msg) {
  return *msg->context_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
GetCompletionItemsRequest::_Internal::text_document(const GetCompletionItemsRequest* msg) {
  return *msg->text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
GetCompletionItemsRequest::_Internal::position(const GetCompletionItemsRequest* msg) {
  return *msg->position_;
}
void GetCompletionItemsRequest::clear_console_id() {
  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
}
GetCompletionItemsRequest::GetCompletionItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}
GetCompletionItemsRequest::GetCompletionItemsRequest(const GetCompletionItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.console_id_);
  } else {
    console_id_ = nullptr;
  }
  if (from._internal_has_context()) {
    context_ = new ::io::deephaven::proto::backplane::script::grpc::CompletionContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  if (from._internal_has_text_document()) {
    text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from.text_document_);
  } else {
    text_document_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}

void GetCompletionItemsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&console_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&console_id_)) + sizeof(request_id_));
}

GetCompletionItemsRequest::~GetCompletionItemsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompletionItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete console_id_;
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete text_document_;
  if (this != internal_default_instance()) delete position_;
}

void GetCompletionItemsRequest::ArenaDtor(void* object) {
  GetCompletionItemsRequest* _this = reinterpret_cast< GetCompletionItemsRequest* >(object);
  (void)_this;
}
void GetCompletionItemsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompletionItemsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCompletionItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && console_id_ != nullptr) {
    delete console_id_;
  }
  console_id_ = nullptr;
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  if (GetArena() == nullptr && text_document_ != nullptr) {
    delete text_document_;
  }
  text_document_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  request_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompletionItemsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 request_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompletionItemsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::console_id(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::context(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  if (this->has_text_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text_document(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  return target;
}

size_t GetCompletionItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  if (this->has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_document_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompletionItemsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompletionItemsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompletionItemsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
    MergeFrom(*source);
  }
}

void GetCompletionItemsRequest::MergeFrom(const GetCompletionItemsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_console_id()) {
    _internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_console_id());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::io::deephaven::proto::backplane::script::grpc::CompletionContext::MergeFrom(from._internal_context());
  }
  if (from.has_text_document()) {
    _internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(from._internal_text_document());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(from._internal_position());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
}

void GetCompletionItemsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompletionItemsRequest::CopyFrom(const GetCompletionItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletionItemsRequest::IsInitialized() const {
  return true;
}

void GetCompletionItemsRequest::InternalSwap(GetCompletionItemsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, request_id_)
      + sizeof(GetCompletionItemsRequest::request_id_)
      - PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, console_id_)>(
          reinterpret_cast<char*>(&console_id_),
          reinterpret_cast<char*>(&other->console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompletionItemsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompletionContext::_Internal {
 public:
};

CompletionContext::CompletionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}
CompletionContext::CompletionContext(const CompletionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trigger_character_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trigger_character().empty()) {
    trigger_character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trigger_character(), 
      GetArena());
  }
  trigger_kind_ = from.trigger_kind_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}

void CompletionContext::SharedCtor() {
trigger_character_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trigger_kind_ = 0;
}

CompletionContext::~CompletionContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompletionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trigger_character_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompletionContext::ArenaDtor(void* object) {
  CompletionContext* _this = reinterpret_cast< CompletionContext* >(object);
  (void)_this;
}
void CompletionContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompletionContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompletionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trigger_character_.ClearToEmpty();
  trigger_kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trigger_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trigger_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trigger_character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_trigger_character();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompletionContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trigger_kind = 1;
  if (this->trigger_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trigger_kind(), target);
  }

  // string trigger_character = 2;
  if (this->trigger_character().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trigger_character().data(), static_cast<int>(this->_internal_trigger_character().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trigger_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  return target;
}

size_t CompletionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trigger_character = 2;
  if (this->trigger_character().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_character());
  }

  // int32 trigger_kind = 1;
  if (this->trigger_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trigger_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompletionContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  GOOGLE_DCHECK_NE(&from, this);
  const CompletionContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompletionContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CompletionContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CompletionContext)
    MergeFrom(*source);
  }
}

void CompletionContext::MergeFrom(const CompletionContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trigger_character().size() > 0) {
    _internal_set_trigger_character(from._internal_trigger_character());
  }
  if (from.trigger_kind() != 0) {
    _internal_set_trigger_kind(from._internal_trigger_kind());
  }
}

void CompletionContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompletionContext::CopyFrom(const CompletionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionContext::IsInitialized() const {
  return true;
}

void CompletionContext::InternalSwap(CompletionContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trigger_character_.Swap(&other->trigger_character_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(trigger_kind_, other->trigger_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCompletionItemsResponse::_Internal {
 public:
};

GetCompletionItemsResponse::GetCompletionItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}
GetCompletionItemsResponse::GetCompletionItemsResponse(const GetCompletionItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}

void GetCompletionItemsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(success_));
}

GetCompletionItemsResponse::~GetCompletionItemsResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCompletionItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCompletionItemsResponse::ArenaDtor(void* object) {
  GetCompletionItemsResponse* _this = reinterpret_cast< GetCompletionItemsResponse* >(object);
  (void)_this;
}
void GetCompletionItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCompletionItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCompletionItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompletionItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCompletionItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // int32 request_id = 2;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_id(), target);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  return target;
}

size_t GetCompletionItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 request_id = 2;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_request_id());
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCompletionItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCompletionItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCompletionItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
    MergeFrom(*source);
  }
}

void GetCompletionItemsResponse::MergeFrom(const GetCompletionItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void GetCompletionItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompletionItemsResponse::CopyFrom(const GetCompletionItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletionItemsResponse::IsInitialized() const {
  return true;
}

void GetCompletionItemsResponse::InternalSwap(GetCompletionItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, success_)
      + sizeof(GetCompletionItemsResponse::success_)
      - PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompletionItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompletionItem::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::TextEdit& text_edit(const CompletionItem* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::TextEdit&
CompletionItem::_Internal::text_edit(const CompletionItem* msg) {
  return *msg->text_edit_;
}
CompletionItem::CompletionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_text_edits_(arena),
  commit_characters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}
CompletionItem::CompletionItem(const CompletionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_text_edits_(from.additional_text_edits_),
      commit_characters_(from.commit_characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArena());
  }
  documentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_documentation().empty()) {
    documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_documentation(), 
      GetArena());
  }
  sort_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sort_text().empty()) {
    sort_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sort_text(), 
      GetArena());
  }
  filter_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_text().empty()) {
    filter_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter_text(), 
      GetArena());
  }
  if (from._internal_has_text_edit()) {
    text_edit_ = new ::io::deephaven::proto::backplane::script::grpc::TextEdit(*from.text_edit_);
  } else {
    text_edit_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&insert_text_format_) -
    reinterpret_cast<char*>(&start_)) + sizeof(insert_text_format_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}

void CompletionItem::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
documentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sort_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filter_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_edit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insert_text_format_) -
    reinterpret_cast<char*>(&text_edit_)) + sizeof(insert_text_format_));
}

CompletionItem::~CompletionItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompletionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  documentation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete text_edit_;
}

void CompletionItem::ArenaDtor(void* object) {
  CompletionItem* _this = reinterpret_cast< CompletionItem* >(object);
  (void)_this;
}
void CompletionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompletionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompletionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_text_edits_.Clear();
  commit_characters_.Clear();
  label_.ClearToEmpty();
  detail_.ClearToEmpty();
  documentation_.ClearToEmpty();
  sort_text_.ClearToEmpty();
  filter_text_.ClearToEmpty();
  if (GetArena() == nullptr && text_edit_ != nullptr) {
    delete text_edit_;
  }
  text_edit_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insert_text_format_) -
      reinterpret_cast<char*>(&start_)) + sizeof(insert_text_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string detail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string documentation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_documentation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deprecated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool preselect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          preselect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_edit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sort_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sort_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_filter_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 insert_text_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          insert_text_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_text_edits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string commit_characters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_commit_characters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompletionItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // string label = 3;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // int32 kind = 4;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_kind(), target);
  }

  // string detail = 5;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.detail");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_detail(), target);
  }

  // string documentation = 6;
  if (this->documentation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_documentation().data(), static_cast<int>(this->_internal_documentation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.documentation");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_documentation(), target);
  }

  // bool deprecated = 7;
  if (this->deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_deprecated(), target);
  }

  // bool preselect = 8;
  if (this->preselect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_preselect(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  if (this->has_text_edit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::text_edit(this), target, stream);
  }

  // string sort_text = 10;
  if (this->sort_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort_text().data(), static_cast<int>(this->_internal_sort_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sort_text(), target);
  }

  // string filter_text = 11;
  if (this->filter_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_text().data(), static_cast<int>(this->_internal_filter_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_filter_text(), target);
  }

  // int32 insert_text_format = 12;
  if (this->insert_text_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_insert_text_format(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_text_edits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_additional_text_edits(i), target, stream);
  }

  // repeated string commit_characters = 14;
  for (int i = 0, n = this->_internal_commit_characters_size(); i < n; i++) {
    const auto& s = this->_internal_commit_characters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  return target;
}

size_t CompletionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  total_size += 1UL * this->_internal_additional_text_edits_size();
  for (const auto& msg : this->additional_text_edits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string commit_characters = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(commit_characters_.size());
  for (int i = 0, n = commit_characters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      commit_characters_.Get(i));
  }

  // string label = 3;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string detail = 5;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // string documentation = 6;
  if (this->documentation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_documentation());
  }

  // string sort_text = 10;
  if (this->sort_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort_text());
  }

  // string filter_text = 11;
  if (this->filter_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  if (this->has_text_edit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_edit_);
  }

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // int32 kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind());
  }

  // bool deprecated = 7;
  if (this->deprecated() != 0) {
    total_size += 1 + 1;
  }

  // bool preselect = 8;
  if (this->preselect() != 0) {
    total_size += 1 + 1;
  }

  // int32 insert_text_format = 12;
  if (this->insert_text_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_insert_text_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompletionItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CompletionItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompletionItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.CompletionItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.CompletionItem)
    MergeFrom(*source);
  }
}

void CompletionItem::MergeFrom(const CompletionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_text_edits_.MergeFrom(from.additional_text_edits_);
  commit_characters_.MergeFrom(from.commit_characters_);
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.detail().size() > 0) {
    _internal_set_detail(from._internal_detail());
  }
  if (from.documentation().size() > 0) {
    _internal_set_documentation(from._internal_documentation());
  }
  if (from.sort_text().size() > 0) {
    _internal_set_sort_text(from._internal_sort_text());
  }
  if (from.filter_text().size() > 0) {
    _internal_set_filter_text(from._internal_filter_text());
  }
  if (from.has_text_edit()) {
    _internal_mutable_text_edit()->::io::deephaven::proto::backplane::script::grpc::TextEdit::MergeFrom(from._internal_text_edit());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.deprecated() != 0) {
    _internal_set_deprecated(from._internal_deprecated());
  }
  if (from.preselect() != 0) {
    _internal_set_preselect(from._internal_preselect());
  }
  if (from.insert_text_format() != 0) {
    _internal_set_insert_text_format(from._internal_insert_text_format());
  }
}

void CompletionItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompletionItem::CopyFrom(const CompletionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionItem::IsInitialized() const {
  return true;
}

void CompletionItem::InternalSwap(CompletionItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  additional_text_edits_.InternalSwap(&other->additional_text_edits_);
  commit_characters_.InternalSwap(&other->commit_characters_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  documentation_.Swap(&other->documentation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sort_text_.Swap(&other->sort_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_text_.Swap(&other->filter_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionItem, insert_text_format_)
      + sizeof(CompletionItem::insert_text_format_)
      - PROTOBUF_FIELD_OFFSET(CompletionItem, text_edit_)>(
          reinterpret_cast<char*>(&text_edit_),
          reinterpret_cast<char*>(&other->text_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextEdit::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const TextEdit* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
TextEdit::_Internal::range(const TextEdit* msg) {
  return *msg->range_;
}
TextEdit::TextEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}
TextEdit::TextEdit(const TextEdit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_range()) {
    range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}

void TextEdit::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
range_ = nullptr;
}

TextEdit::~TextEdit() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextEdit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void TextEdit::ArenaDtor(void* object) {
  TextEdit* _this = reinterpret_cast< TextEdit* >(object);
  (void)_this;
}
void TextEdit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextEdit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEdit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextEdit.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextEdit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::range(this), target, stream);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextEdit.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextEdit)
  return target;
}

size_t TextEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextEdit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  GOOGLE_DCHECK_NE(&from, this);
  const TextEdit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextEdit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.TextEdit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.TextEdit)
    MergeFrom(*source);
  }
}

void TextEdit::MergeFrom(const TextEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_range()) {
    _internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(from._internal_range());
  }
}

void TextEdit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextEdit::CopyFrom(const TextEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEdit::IsInitialized() const {
  return true;
}

void TextEdit::InternalSwap(TextEdit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEdit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchFigureRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& source_id(const FetchFigureRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
FetchFigureRequest::_Internal::source_id(const FetchFigureRequest* msg) {
  return *msg->source_id_;
}
void FetchFigureRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
FetchFigureRequest::FetchFigureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
}
FetchFigureRequest::FetchFigureRequest(const FetchFigureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
}

void FetchFigureRequest::SharedCtor() {
source_id_ = nullptr;
}

FetchFigureRequest::~FetchFigureRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchFigureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
}

void FetchFigureRequest::ArenaDtor(void* object) {
  FetchFigureRequest* _this = reinterpret_cast< FetchFigureRequest* >(object);
  (void)_this;
}
void FetchFigureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchFigureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchFigureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchFigureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchFigureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  return target;
}

size_t FetchFigureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchFigureRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchFigureRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchFigureRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
    MergeFrom(*source);
  }
}

void FetchFigureRequest::MergeFrom(const FetchFigureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    _internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_source_id());
  }
}

void FetchFigureRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchFigureRequest::CopyFrom(const FetchFigureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchFigureRequest::IsInitialized() const {
  return true;
}

void FetchFigureRequest::InternalSwap(FetchFigureRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(source_id_, other->source_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchFigureRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchFigureResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor& figure_descriptor(const FetchFigureResponse* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor&
FetchFigureResponse::_Internal::figure_descriptor(const FetchFigureResponse* msg) {
  return *msg->figure_descriptor_;
}
FetchFigureResponse::FetchFigureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
}
FetchFigureResponse::FetchFigureResponse(const FetchFigureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_figure_descriptor()) {
    figure_descriptor_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor(*from.figure_descriptor_);
  } else {
    figure_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
}

void FetchFigureResponse::SharedCtor() {
figure_descriptor_ = nullptr;
}

FetchFigureResponse::~FetchFigureResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchFigureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete figure_descriptor_;
}

void FetchFigureResponse::ArenaDtor(void* object) {
  FetchFigureResponse* _this = reinterpret_cast< FetchFigureResponse* >(object);
  (void)_this;
}
void FetchFigureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchFigureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchFigureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && figure_descriptor_ != nullptr) {
    delete figure_descriptor_;
  }
  figure_descriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchFigureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor figure_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_figure_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchFigureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor figure_descriptor = 1;
  if (this->has_figure_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::figure_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  return target;
}

size_t FetchFigureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor figure_descriptor = 1;
  if (this->has_figure_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *figure_descriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchFigureResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchFigureResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchFigureResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
    MergeFrom(*source);
  }
}

void FetchFigureResponse::MergeFrom(const FetchFigureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_figure_descriptor()) {
    _internal_mutable_figure_descriptor()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor::MergeFrom(from._internal_figure_descriptor());
  }
}

void FetchFigureResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchFigureResponse::CopyFrom(const FetchFigureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FetchFigureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchFigureResponse::IsInitialized() const {
  return true;
}

void FetchFigureResponse::InternalSwap(FetchFigureResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(figure_descriptor_, other->figure_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchFigureResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_ChartDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_ChartDescriptor>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  series_(arena),
  multi_series_(arena),
  axes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
}
FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(const FigureDescriptor_ChartDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      series_(from.series_),
      multi_series_(from.multi_series_),
      axes_(from.axes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  title_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title_font().empty()) {
    title_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title_font(), 
      GetArena());
  }
  title_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title_color().empty()) {
    title_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title_color(), 
      GetArena());
  }
  legend_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_legend_font().empty()) {
    legend_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_legend_font(), 
      GetArena());
  }
  legend_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_legend_color().empty()) {
    legend_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_legend_color(), 
      GetArena());
  }
  ::memcpy(&colspan_, &from.colspan_,
    static_cast<size_t>(reinterpret_cast<char*>(&is3d_) -
    reinterpret_cast<char*>(&colspan_)) + sizeof(is3d_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
}

void FigureDescriptor_ChartDescriptor::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
legend_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
legend_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&colspan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is3d_) -
    reinterpret_cast<char*>(&colspan_)) + sizeof(is3d_));
}

FigureDescriptor_ChartDescriptor::~FigureDescriptor_ChartDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_ChartDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legend_font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  legend_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FigureDescriptor_ChartDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_ChartDescriptor* _this = reinterpret_cast< FigureDescriptor_ChartDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_ChartDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_ChartDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_ChartDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  series_.Clear();
  multi_series_.Clear();
  axes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  title_font_.ClearToEmpty();
  title_color_.ClearToEmpty();
  legend_font_.ClearToEmpty();
  legend_color_.ClearToEmpty();
  ::memset(&colspan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is3d_) -
      reinterpret_cast<char*>(&colspan_)) + sizeof(is3d_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_ChartDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 colspan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          colspan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rowspan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rowspan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_axes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chart_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor_ChartType>(val));
        } else goto handle_unusual;
        continue;
      // string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title_font = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_title_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_font"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title_color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_title_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_legend = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          show_legend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string legend_font = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_legend_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_font"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string legend_color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_legend_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is3d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_ChartDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 colspan = 1;
  if (this->colspan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_colspan(), target);
  }

  // int32 rowspan = 2;
  if (this->rowspan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rowspan(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_series(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_series_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_multi_series(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_axes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_axes(i), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
  if (this->chart_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_chart_type(), target);
  }

  // string title = 7;
  if (_internal_has_title()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // string title_font = 8;
  if (this->title_font().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_font().data(), static_cast<int>(this->_internal_title_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_font");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_title_font(), target);
  }

  // string title_color = 9;
  if (this->title_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_color().data(), static_cast<int>(this->_internal_title_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_color");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title_color(), target);
  }

  // bool show_legend = 10;
  if (this->show_legend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_show_legend(), target);
  }

  // string legend_font = 11;
  if (this->legend_font().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_legend_font().data(), static_cast<int>(this->_internal_legend_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_font");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_legend_font(), target);
  }

  // string legend_color = 12;
  if (this->legend_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_legend_color().data(), static_cast<int>(this->_internal_legend_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_color");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_legend_color(), target);
  }

  // bool is3d = 13;
  if (this->is3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is3d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  return target;
}

size_t FigureDescriptor_ChartDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
  total_size += 1UL * this->_internal_series_size();
  for (const auto& msg : this->series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
  total_size += 1UL * this->_internal_multi_series_size();
  for (const auto& msg : this->multi_series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
  total_size += 1UL * this->_internal_axes_size();
  for (const auto& msg : this->axes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string title_font = 8;
  if (this->title_font().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_font());
  }

  // string title_color = 9;
  if (this->title_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_color());
  }

  // string legend_font = 11;
  if (this->legend_font().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_legend_font());
  }

  // string legend_color = 12;
  if (this->legend_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_legend_color());
  }

  // int32 colspan = 1;
  if (this->colspan() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colspan());
  }

  // int32 rowspan = 2;
  if (this->rowspan() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rowspan());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
  if (this->chart_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chart_type());
  }

  // bool show_legend = 10;
  if (this->show_legend() != 0) {
    total_size += 1 + 1;
  }

  // bool is3d = 13;
  if (this->is3d() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_ChartDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_ChartDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_ChartDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_ChartDescriptor::MergeFrom(const FigureDescriptor_ChartDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_.MergeFrom(from.series_);
  multi_series_.MergeFrom(from.multi_series_);
  axes_.MergeFrom(from.axes_);
  if (from._internal_has_title()) {
    _internal_set_title(from._internal_title());
  }
  if (from.title_font().size() > 0) {
    _internal_set_title_font(from._internal_title_font());
  }
  if (from.title_color().size() > 0) {
    _internal_set_title_color(from._internal_title_color());
  }
  if (from.legend_font().size() > 0) {
    _internal_set_legend_font(from._internal_legend_font());
  }
  if (from.legend_color().size() > 0) {
    _internal_set_legend_color(from._internal_legend_color());
  }
  if (from.colspan() != 0) {
    _internal_set_colspan(from._internal_colspan());
  }
  if (from.rowspan() != 0) {
    _internal_set_rowspan(from._internal_rowspan());
  }
  if (from.chart_type() != 0) {
    _internal_set_chart_type(from._internal_chart_type());
  }
  if (from.show_legend() != 0) {
    _internal_set_show_legend(from._internal_show_legend());
  }
  if (from.is3d() != 0) {
    _internal_set_is3d(from._internal_is3d());
  }
}

void FigureDescriptor_ChartDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_ChartDescriptor::CopyFrom(const FigureDescriptor_ChartDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_ChartDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_ChartDescriptor::InternalSwap(FigureDescriptor_ChartDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  series_.InternalSwap(&other->series_);
  multi_series_.InternalSwap(&other->multi_series_);
  axes_.InternalSwap(&other->axes_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_font_.Swap(&other->title_font_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_color_.Swap(&other->title_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  legend_font_.Swap(&other->legend_font_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  legend_color_.Swap(&other->legend_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, is3d_)
      + sizeof(FigureDescriptor_ChartDescriptor::is3d_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, colspan_)>(
          reinterpret_cast<char*>(&colspan_),
          reinterpret_cast<char*>(&other->colspan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_ChartDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_SeriesDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_SeriesDescriptor>()._has_bits_);
  static void set_has_lines_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shapes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_point_label_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_sources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
}
FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(const FigureDescriptor_SeriesDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_sources_(from.data_sources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  line_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_color().empty()) {
    line_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_line_color(), 
      GetArena());
  }
  point_label_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_point_label_format()) {
    point_label_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_point_label_format(), 
      GetArena());
  }
  x_tool_tip_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_x_tool_tip_pattern()) {
    x_tool_tip_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_x_tool_tip_pattern(), 
      GetArena());
  }
  y_tool_tip_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_y_tool_tip_pattern()) {
    y_tool_tip_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_y_tool_tip_pattern(), 
      GetArena());
  }
  shape_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shape_label().empty()) {
    shape_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shape_label(), 
      GetArena());
  }
  shape_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shape_color().empty()) {
    shape_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shape_color(), 
      GetArena());
  }
  shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shape().empty()) {
    shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shape(), 
      GetArena());
  }
  ::memcpy(&plot_style_, &from.plot_style_,
    static_cast<size_t>(reinterpret_cast<char*>(&shape_size_) -
    reinterpret_cast<char*>(&plot_style_)) + sizeof(shape_size_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
}

void FigureDescriptor_SeriesDescriptor::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
line_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
point_label_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
x_tool_tip_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
y_tool_tip_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shape_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shape_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plot_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shape_size_) -
    reinterpret_cast<char*>(&plot_style_)) + sizeof(shape_size_));
}

FigureDescriptor_SeriesDescriptor::~FigureDescriptor_SeriesDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_SeriesDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  point_label_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x_tool_tip_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_tool_tip_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shape_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shape_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shape_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FigureDescriptor_SeriesDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_SeriesDescriptor* _this = reinterpret_cast< FigureDescriptor_SeriesDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_SeriesDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_SeriesDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_SeriesDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_sources_.Clear();
  name_.ClearToEmpty();
  line_color_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      point_label_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      x_tool_tip_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      y_tool_tip_pattern_.ClearNonDefaultToEmpty();
    }
  }
  shape_label_.ClearToEmpty();
  shape_color_.ClearToEmpty();
  shape_.ClearToEmpty();
  plot_style_ = 0;
  if (cached_has_bits & 0x00000018u) {
    ::memset(&lines_visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shapes_visible_) -
        reinterpret_cast<char*>(&lines_visible_)) + sizeof(shapes_visible_));
  }
  gradient_visible_ = false;
  shape_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_SeriesDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plot_style(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesPlotStyle>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lines_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lines_visible(&has_bits);
          lines_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shapes_visible = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_shapes_visible(&has_bits);
          shapes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gradient_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gradient_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_line_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.line_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string point_label_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_point_label_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.point_label_format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string x_tool_tip_pattern = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_x_tool_tip_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.x_tool_tip_pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string y_tool_tip_pattern = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_y_tool_tip_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.y_tool_tip_pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shape_label = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_shape_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double shape_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_shape_size(&has_bits);
          shape_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string shape_color = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_shape_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shape = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_shape();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_SeriesDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->plot_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_plot_style(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool lines_visible = 3;
  if (_internal_has_lines_visible()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_lines_visible(), target);
  }

  // bool shapes_visible = 4;
  if (_internal_has_shapes_visible()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_shapes_visible(), target);
  }

  // bool gradient_visible = 5;
  if (this->gradient_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gradient_visible(), target);
  }

  // string line_color = 6;
  if (this->line_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_color().data(), static_cast<int>(this->_internal_line_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.line_color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_line_color(), target);
  }

  // string point_label_format = 8;
  if (_internal_has_point_label_format()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_point_label_format().data(), static_cast<int>(this->_internal_point_label_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.point_label_format");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_point_label_format(), target);
  }

  // string x_tool_tip_pattern = 9;
  if (_internal_has_x_tool_tip_pattern()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_tool_tip_pattern().data(), static_cast<int>(this->_internal_x_tool_tip_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.x_tool_tip_pattern");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_x_tool_tip_pattern(), target);
  }

  // string y_tool_tip_pattern = 10;
  if (_internal_has_y_tool_tip_pattern()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_y_tool_tip_pattern().data(), static_cast<int>(this->_internal_y_tool_tip_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.y_tool_tip_pattern");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_y_tool_tip_pattern(), target);
  }

  // string shape_label = 11;
  if (this->shape_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape_label().data(), static_cast<int>(this->_internal_shape_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_label");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_shape_label(), target);
  }

  // double shape_size = 12;
  if (_internal_has_shape_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_shape_size(), target);
  }

  // string shape_color = 13;
  if (this->shape_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape_color().data(), static_cast<int>(this->_internal_shape_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_color");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_shape_color(), target);
  }

  // string shape = 14;
  if (this->shape().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape().data(), static_cast<int>(this->_internal_shape().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_shape(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_data_sources(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  return target;
}

size_t FigureDescriptor_SeriesDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->data_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string line_color = 6;
  if (this->line_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_color());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string point_label_format = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_point_label_format());
    }

    // string x_tool_tip_pattern = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_x_tool_tip_pattern());
    }

    // string y_tool_tip_pattern = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_y_tool_tip_pattern());
    }

  }
  // string shape_label = 11;
  if (this->shape_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape_label());
  }

  // string shape_color = 13;
  if (this->shape_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape_color());
  }

  // string shape = 14;
  if (this->shape().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->plot_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plot_style());
  }

  if (cached_has_bits & 0x00000018u) {
    // bool lines_visible = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // bool shapes_visible = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  // bool gradient_visible = 5;
  if (this->gradient_visible() != 0) {
    total_size += 1 + 1;
  }

  // double shape_size = 12;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_SeriesDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_SeriesDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_SeriesDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_SeriesDescriptor::MergeFrom(const FigureDescriptor_SeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_sources_.MergeFrom(from.data_sources_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.line_color().size() > 0) {
    _internal_set_line_color(from._internal_line_color());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_point_label_format(from._internal_point_label_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_x_tool_tip_pattern(from._internal_x_tool_tip_pattern());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_y_tool_tip_pattern(from._internal_y_tool_tip_pattern());
    }
  }
  if (from.shape_label().size() > 0) {
    _internal_set_shape_label(from._internal_shape_label());
  }
  if (from.shape_color().size() > 0) {
    _internal_set_shape_color(from._internal_shape_color());
  }
  if (from.shape().size() > 0) {
    _internal_set_shape(from._internal_shape());
  }
  if (from.plot_style() != 0) {
    _internal_set_plot_style(from._internal_plot_style());
  }
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      lines_visible_ = from.lines_visible_;
    }
    if (cached_has_bits & 0x00000010u) {
      shapes_visible_ = from.shapes_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.gradient_visible() != 0) {
    _internal_set_gradient_visible(from._internal_gradient_visible());
  }
  if (cached_has_bits & 0x00000020u) {
    _internal_set_shape_size(from._internal_shape_size());
  }
}

void FigureDescriptor_SeriesDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_SeriesDescriptor::CopyFrom(const FigureDescriptor_SeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_SeriesDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_SeriesDescriptor::InternalSwap(FigureDescriptor_SeriesDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_sources_.InternalSwap(&other->data_sources_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  line_color_.Swap(&other->line_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  point_label_format_.Swap(&other->point_label_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x_tool_tip_pattern_.Swap(&other->x_tool_tip_pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  y_tool_tip_pattern_.Swap(&other->y_tool_tip_pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shape_label_.Swap(&other->shape_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shape_color_.Swap(&other->shape_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shape_.Swap(&other->shape_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, shape_size_)
      + sizeof(FigureDescriptor_SeriesDescriptor::shape_size_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, plot_style_)>(
          reinterpret_cast<char*>(&plot_style_),
          reinterpret_cast<char*>(&other->plot_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_SeriesDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_MultiSeriesDescriptor::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& line_color(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_color(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& lines_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& points_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& gradient_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_label_format(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& x_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& y_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_label(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault& point_size(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_shape(const FigureDescriptor_MultiSeriesDescriptor* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::line_color(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->line_color_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_color(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->point_color_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::lines_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->lines_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::points_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->points_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::gradient_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->gradient_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_label_format(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->point_label_format_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::x_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->x_tool_tip_pattern_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::y_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->y_tool_tip_pattern_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_label(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->point_label_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_size(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->point_size_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_shape(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->point_shape_;
}
FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_sources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
}
FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(const FigureDescriptor_MultiSeriesDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_sources_(from.data_sources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_line_color()) {
    line_color_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from.line_color_);
  } else {
    line_color_ = nullptr;
  }
  if (from._internal_has_point_color()) {
    point_color_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from.point_color_);
  } else {
    point_color_ = nullptr;
  }
  if (from._internal_has_lines_visible()) {
    lines_visible_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault(*from.lines_visible_);
  } else {
    lines_visible_ = nullptr;
  }
  if (from._internal_has_points_visible()) {
    points_visible_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault(*from.points_visible_);
  } else {
    points_visible_ = nullptr;
  }
  if (from._internal_has_gradient_visible()) {
    gradient_visible_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault(*from.gradient_visible_);
  } else {
    gradient_visible_ = nullptr;
  }
  if (from._internal_has_point_label_format()) {
    point_label_format_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from.point_label_format_);
  } else {
    point_label_format_ = nullptr;
  }
  if (from._internal_has_x_tool_tip_pattern()) {
    x_tool_tip_pattern_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from.x_tool_tip_pattern_);
  } else {
    x_tool_tip_pattern_ = nullptr;
  }
  if (from._internal_has_y_tool_tip_pattern()) {
    y_tool_tip_pattern_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from.y_tool_tip_pattern_);
  } else {
    y_tool_tip_pattern_ = nullptr;
  }
  if (from._internal_has_point_label()) {
    point_label_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from.point_label_);
  } else {
    point_label_ = nullptr;
  }
  if (from._internal_has_point_size()) {
    point_size_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault(*from.point_size_);
  } else {
    point_size_ = nullptr;
  }
  if (from._internal_has_point_shape()) {
    point_shape_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from.point_shape_);
  } else {
    point_shape_ = nullptr;
  }
  plot_style_ = from.plot_style_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
}

void FigureDescriptor_MultiSeriesDescriptor::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&plot_style_) -
    reinterpret_cast<char*>(&line_color_)) + sizeof(plot_style_));
}

FigureDescriptor_MultiSeriesDescriptor::~FigureDescriptor_MultiSeriesDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_MultiSeriesDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete line_color_;
  if (this != internal_default_instance()) delete point_color_;
  if (this != internal_default_instance()) delete lines_visible_;
  if (this != internal_default_instance()) delete points_visible_;
  if (this != internal_default_instance()) delete gradient_visible_;
  if (this != internal_default_instance()) delete point_label_format_;
  if (this != internal_default_instance()) delete x_tool_tip_pattern_;
  if (this != internal_default_instance()) delete y_tool_tip_pattern_;
  if (this != internal_default_instance()) delete point_label_;
  if (this != internal_default_instance()) delete point_size_;
  if (this != internal_default_instance()) delete point_shape_;
}

void FigureDescriptor_MultiSeriesDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_MultiSeriesDescriptor* _this = reinterpret_cast< FigureDescriptor_MultiSeriesDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_MultiSeriesDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_MultiSeriesDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_MultiSeriesDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_sources_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && line_color_ != nullptr) {
    delete line_color_;
  }
  line_color_ = nullptr;
  if (GetArena() == nullptr && point_color_ != nullptr) {
    delete point_color_;
  }
  point_color_ = nullptr;
  if (GetArena() == nullptr && lines_visible_ != nullptr) {
    delete lines_visible_;
  }
  lines_visible_ = nullptr;
  if (GetArena() == nullptr && points_visible_ != nullptr) {
    delete points_visible_;
  }
  points_visible_ = nullptr;
  if (GetArena() == nullptr && gradient_visible_ != nullptr) {
    delete gradient_visible_;
  }
  gradient_visible_ = nullptr;
  if (GetArena() == nullptr && point_label_format_ != nullptr) {
    delete point_label_format_;
  }
  point_label_format_ = nullptr;
  if (GetArena() == nullptr && x_tool_tip_pattern_ != nullptr) {
    delete x_tool_tip_pattern_;
  }
  x_tool_tip_pattern_ = nullptr;
  if (GetArena() == nullptr && y_tool_tip_pattern_ != nullptr) {
    delete y_tool_tip_pattern_;
  }
  y_tool_tip_pattern_ = nullptr;
  if (GetArena() == nullptr && point_label_ != nullptr) {
    delete point_label_;
  }
  point_label_ = nullptr;
  if (GetArena() == nullptr && point_size_ != nullptr) {
    delete point_size_;
  }
  point_size_ = nullptr;
  if (GetArena() == nullptr && point_shape_ != nullptr) {
    delete point_shape_;
  }
  point_shape_ = nullptr;
  plot_style_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_MultiSeriesDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plot_style(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesPlotStyle>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lines_visible(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_visible(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gradient_visible(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_label_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_tool_tip_pattern(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_y_tool_tip_pattern(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_MultiSeriesDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->plot_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_plot_style(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
  if (this->has_line_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::line_color(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
  if (this->has_point_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::point_color(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
  if (this->has_lines_visible()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lines_visible(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
  if (this->has_points_visible()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::points_visible(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
  if (this->has_gradient_visible()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gradient_visible(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
  if (this->has_point_label_format()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::point_label_format(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
  if (this->has_x_tool_tip_pattern()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::x_tool_tip_pattern(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
  if (this->has_y_tool_tip_pattern()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::y_tool_tip_pattern(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
  if (this->has_point_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::point_label(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
  if (this->has_point_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::point_size(this), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
  if (this->has_point_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::point_shape(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_data_sources(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  return target;
}

size_t FigureDescriptor_MultiSeriesDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->data_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
  if (this->has_line_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *line_color_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
  if (this->has_point_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_color_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
  if (this->has_lines_visible()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lines_visible_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
  if (this->has_points_visible()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_visible_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
  if (this->has_gradient_visible()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gradient_visible_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
  if (this->has_point_label_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_label_format_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
  if (this->has_x_tool_tip_pattern()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_tool_tip_pattern_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
  if (this->has_y_tool_tip_pattern()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_tool_tip_pattern_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
  if (this->has_point_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_label_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
  if (this->has_point_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_size_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
  if (this->has_point_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_shape_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->plot_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_plot_style());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_MultiSeriesDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_MultiSeriesDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_MultiSeriesDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_MultiSeriesDescriptor::MergeFrom(const FigureDescriptor_MultiSeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_sources_.MergeFrom(from.data_sources_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_line_color()) {
    _internal_mutable_line_color()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(from._internal_line_color());
  }
  if (from.has_point_color()) {
    _internal_mutable_point_color()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(from._internal_point_color());
  }
  if (from.has_lines_visible()) {
    _internal_mutable_lines_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(from._internal_lines_visible());
  }
  if (from.has_points_visible()) {
    _internal_mutable_points_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(from._internal_points_visible());
  }
  if (from.has_gradient_visible()) {
    _internal_mutable_gradient_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(from._internal_gradient_visible());
  }
  if (from.has_point_label_format()) {
    _internal_mutable_point_label_format()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(from._internal_point_label_format());
  }
  if (from.has_x_tool_tip_pattern()) {
    _internal_mutable_x_tool_tip_pattern()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(from._internal_x_tool_tip_pattern());
  }
  if (from.has_y_tool_tip_pattern()) {
    _internal_mutable_y_tool_tip_pattern()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(from._internal_y_tool_tip_pattern());
  }
  if (from.has_point_label()) {
    _internal_mutable_point_label()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(from._internal_point_label());
  }
  if (from.has_point_size()) {
    _internal_mutable_point_size()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault::MergeFrom(from._internal_point_size());
  }
  if (from.has_point_shape()) {
    _internal_mutable_point_shape()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(from._internal_point_shape());
  }
  if (from.plot_style() != 0) {
    _internal_set_plot_style(from._internal_plot_style());
  }
}

void FigureDescriptor_MultiSeriesDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_MultiSeriesDescriptor::CopyFrom(const FigureDescriptor_MultiSeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_MultiSeriesDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_MultiSeriesDescriptor::InternalSwap(FigureDescriptor_MultiSeriesDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_sources_.InternalSwap(&other->data_sources_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, plot_style_)
      + sizeof(FigureDescriptor_MultiSeriesDescriptor::plot_style_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, line_color_)>(
          reinterpret_cast<char*>(&line_color_),
          reinterpret_cast<char*>(&other->line_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_MultiSeriesDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_StringMapWithDefault::_Internal {
 public:
};

FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
}
FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(const FigureDescriptor_StringMapWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_string().empty()) {
    default_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_string(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
}

void FigureDescriptor_StringMapWithDefault::SharedCtor() {
default_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FigureDescriptor_StringMapWithDefault::~FigureDescriptor_StringMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_StringMapWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  default_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FigureDescriptor_StringMapWithDefault::ArenaDtor(void* object) {
  FigureDescriptor_StringMapWithDefault* _this = reinterpret_cast< FigureDescriptor_StringMapWithDefault* >(object);
  (void)_this;
}
void FigureDescriptor_StringMapWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_StringMapWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_StringMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  values_.Clear();
  default_string_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_StringMapWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string default_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_default_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.default_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_StringMapWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string default_string = 1;
  if (this->default_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_string().data(), static_cast<int>(this->_internal_default_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.default_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_default_string(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.values");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  return target;
}

size_t FigureDescriptor_StringMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // repeated string values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // string default_string = 1;
  if (this->default_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_StringMapWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_StringMapWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_StringMapWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
    MergeFrom(*source);
  }
}

void FigureDescriptor_StringMapWithDefault::MergeFrom(const FigureDescriptor_StringMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from.default_string().size() > 0) {
    _internal_set_default_string(from._internal_default_string());
  }
}

void FigureDescriptor_StringMapWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_StringMapWithDefault::CopyFrom(const FigureDescriptor_StringMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_StringMapWithDefault::IsInitialized() const {
  return true;
}

void FigureDescriptor_StringMapWithDefault::InternalSwap(FigureDescriptor_StringMapWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  default_string_.Swap(&other->default_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_StringMapWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_DoubleMapWithDefault::_Internal {
 public:
};

FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
}
FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(const FigureDescriptor_DoubleMapWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_double_ = from.default_double_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
}

void FigureDescriptor_DoubleMapWithDefault::SharedCtor() {
default_double_ = 0;
}

FigureDescriptor_DoubleMapWithDefault::~FigureDescriptor_DoubleMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_DoubleMapWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FigureDescriptor_DoubleMapWithDefault::ArenaDtor(void* object) {
  FigureDescriptor_DoubleMapWithDefault* _this = reinterpret_cast< FigureDescriptor_DoubleMapWithDefault* >(object);
  (void)_this;
}
void FigureDescriptor_DoubleMapWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_DoubleMapWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_DoubleMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  values_.Clear();
  default_double_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_DoubleMapWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double default_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          default_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault.keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_DoubleMapWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double default_double = 1;
  if (!(this->default_double() <= 0 && this->default_double() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_default_double(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated double values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  return target;
}

size_t FigureDescriptor_DoubleMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // repeated double values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double default_double = 1;
  if (!(this->default_double() <= 0 && this->default_double() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_DoubleMapWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_DoubleMapWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_DoubleMapWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
    MergeFrom(*source);
  }
}

void FigureDescriptor_DoubleMapWithDefault::MergeFrom(const FigureDescriptor_DoubleMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (!(from.default_double() <= 0 && from.default_double() >= 0)) {
    _internal_set_default_double(from._internal_default_double());
  }
}

void FigureDescriptor_DoubleMapWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_DoubleMapWithDefault::CopyFrom(const FigureDescriptor_DoubleMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_DoubleMapWithDefault::IsInitialized() const {
  return true;
}

void FigureDescriptor_DoubleMapWithDefault::InternalSwap(FigureDescriptor_DoubleMapWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  swap(default_double_, other->default_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_DoubleMapWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_BoolMapWithDefault::_Internal {
 public:
};

FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
}
FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(const FigureDescriptor_BoolMapWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_bool_ = from.default_bool_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
}

void FigureDescriptor_BoolMapWithDefault::SharedCtor() {
default_bool_ = false;
}

FigureDescriptor_BoolMapWithDefault::~FigureDescriptor_BoolMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_BoolMapWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FigureDescriptor_BoolMapWithDefault::ArenaDtor(void* object) {
  FigureDescriptor_BoolMapWithDefault* _this = reinterpret_cast< FigureDescriptor_BoolMapWithDefault* >(object);
  (void)_this;
}
void FigureDescriptor_BoolMapWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_BoolMapWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_BoolMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  values_.Clear();
  default_bool_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BoolMapWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool default_bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          default_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault.keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bool values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_BoolMapWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool default_bool = 1;
  if (this->default_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_default_bool(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated bool values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  return target;
}

size_t FigureDescriptor_BoolMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // repeated bool values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool default_bool = 1;
  if (this->default_bool() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_BoolMapWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_BoolMapWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_BoolMapWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
    MergeFrom(*source);
  }
}

void FigureDescriptor_BoolMapWithDefault::MergeFrom(const FigureDescriptor_BoolMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from.default_bool() != 0) {
    _internal_set_default_bool(from._internal_default_bool());
  }
}

void FigureDescriptor_BoolMapWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_BoolMapWithDefault::CopyFrom(const FigureDescriptor_BoolMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BoolMapWithDefault::IsInitialized() const {
  return true;
}

void FigureDescriptor_BoolMapWithDefault::InternalSwap(FigureDescriptor_BoolMapWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  swap(default_bool_, other->default_bool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BoolMapWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_AxisDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_AxisDescriptor>()._has_bits_);
  static void set_has_format_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gap_between_major_ticks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor& business_calendar_descriptor(const FigureDescriptor_AxisDescriptor* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor&
FigureDescriptor_AxisDescriptor::_Internal::business_calendar_descriptor(const FigureDescriptor_AxisDescriptor* msg) {
  return *msg->business_calendar_descriptor_;
}
FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  major_tick_locations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
}
FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(const FigureDescriptor_AxisDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      major_tick_locations_(from.major_tick_locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  label_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label_font().empty()) {
    label_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label_font(), 
      GetArena());
  }
  ticks_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticks_font().empty()) {
    ticks_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticks_font(), 
      GetArena());
  }
  format_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format_pattern()) {
    format_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format_pattern(), 
      GetArena());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArena());
  }
  if (from._internal_has_business_calendar_descriptor()) {
    business_calendar_descriptor_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor(*from.business_calendar_descriptor_);
  } else {
    business_calendar_descriptor_ = nullptr;
  }
  ::memcpy(&format_type_, &from.format_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_label_angle_) -
    reinterpret_cast<char*>(&format_type_)) + sizeof(tick_label_angle_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
}

void FigureDescriptor_AxisDescriptor::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
label_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ticks_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
format_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&business_calendar_descriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tick_label_angle_) -
    reinterpret_cast<char*>(&business_calendar_descriptor_)) + sizeof(tick_label_angle_));
}

FigureDescriptor_AxisDescriptor::~FigureDescriptor_AxisDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_AxisDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticks_font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete business_calendar_descriptor_;
}

void FigureDescriptor_AxisDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_AxisDescriptor* _this = reinterpret_cast< FigureDescriptor_AxisDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_AxisDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_AxisDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_AxisDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  major_tick_locations_.Clear();
  id_.ClearToEmpty();
  label_.ClearToEmpty();
  label_font_.ClearToEmpty();
  ticks_font_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    format_pattern_.ClearNonDefaultToEmpty();
  }
  color_.ClearToEmpty();
  if (GetArena() == nullptr && business_calendar_descriptor_ != nullptr) {
    delete business_calendar_descriptor_;
  }
  business_calendar_descriptor_ = nullptr;
  ::memset(&format_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_range_) -
      reinterpret_cast<char*>(&format_type_)) + sizeof(max_range_));
  gap_between_major_ticks_ = 0;
  ::memset(&minor_tick_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_label_angle_) -
      reinterpret_cast<char*>(&minor_tick_count_)) + sizeof(tick_label_angle_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_AxisDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisFormatType>(val));
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisType>(val));
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisPosition>(val));
        } else goto handle_unusual;
        continue;
      // bool log = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label_font = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_label_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label_font"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ticks_font = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ticks_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.ticks_font"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format_pattern = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_format_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.format_pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double min_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          min_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_range = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool minor_ticks_visible = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          minor_ticks_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool major_ticks_visible = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          major_ticks_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minor_tick_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          minor_tick_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gap_between_major_ticks = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_gap_between_major_ticks(&has_bits);
          gap_between_major_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double major_tick_locations = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_major_tick_locations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137) {
          _internal_add_major_tick_locations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tick_label_angle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          tick_label_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool invert = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          invert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_time_axis = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_time_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_business_calendar_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_AxisDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
  if (this->format_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_position(), target);
  }

  // bool log = 5;
  if (this->log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_log(), target);
  }

  // string label = 6;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_label(), target);
  }

  // string label_font = 7;
  if (this->label_font().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label_font().data(), static_cast<int>(this->_internal_label_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label_font");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_label_font(), target);
  }

  // string ticks_font = 8;
  if (this->ticks_font().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticks_font().data(), static_cast<int>(this->_internal_ticks_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.ticks_font");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ticks_font(), target);
  }

  // string format_pattern = 9;
  if (_internal_has_format_pattern()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format_pattern().data(), static_cast<int>(this->_internal_format_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.format_pattern");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_format_pattern(), target);
  }

  // string color = 10;
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.color");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_color(), target);
  }

  // double min_range = 11;
  if (!(this->min_range() <= 0 && this->min_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_min_range(), target);
  }

  // double max_range = 12;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_range(), target);
  }

  // bool minor_ticks_visible = 13;
  if (this->minor_ticks_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_minor_ticks_visible(), target);
  }

  // bool major_ticks_visible = 14;
  if (this->major_ticks_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_major_ticks_visible(), target);
  }

  // int32 minor_tick_count = 15;
  if (this->minor_tick_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_minor_tick_count(), target);
  }

  // double gap_between_major_ticks = 16;
  if (_internal_has_gap_between_major_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_gap_between_major_ticks(), target);
  }

  // repeated double major_tick_locations = 17;
  if (this->_internal_major_tick_locations_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_major_tick_locations(), target);
  }

  // double tick_label_angle = 18;
  if (!(this->tick_label_angle() <= 0 && this->tick_label_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_tick_label_angle(), target);
  }

  // bool invert = 19;
  if (this->invert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_invert(), target);
  }

  // bool is_time_axis = 20;
  if (this->is_time_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_time_axis(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
  if (this->has_business_calendar_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::business_calendar_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  return target;
}

size_t FigureDescriptor_AxisDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double major_tick_locations = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_major_tick_locations_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _major_tick_locations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string label = 6;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string label_font = 7;
  if (this->label_font().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label_font());
  }

  // string ticks_font = 8;
  if (this->ticks_font().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticks_font());
  }

  // string format_pattern = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format_pattern());
  }

  // string color = 10;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
  if (this->has_business_calendar_descriptor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *business_calendar_descriptor_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
  if (this->format_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format_type());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double min_range = 11;
  if (!(this->min_range() <= 0 && this->min_range() >= 0)) {
    total_size += 1 + 8;
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  // bool log = 5;
  if (this->log() != 0) {
    total_size += 1 + 1;
  }

  // bool minor_ticks_visible = 13;
  if (this->minor_ticks_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool major_ticks_visible = 14;
  if (this->major_ticks_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool invert = 19;
  if (this->invert() != 0) {
    total_size += 2 + 1;
  }

  // double max_range = 12;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    total_size += 1 + 8;
  }

  // double gap_between_major_ticks = 16;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 + 8;
  }

  // int32 minor_tick_count = 15;
  if (this->minor_tick_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minor_tick_count());
  }

  // bool is_time_axis = 20;
  if (this->is_time_axis() != 0) {
    total_size += 2 + 1;
  }

  // double tick_label_angle = 18;
  if (!(this->tick_label_angle() <= 0 && this->tick_label_angle() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_AxisDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_AxisDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_AxisDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_AxisDescriptor::MergeFrom(const FigureDescriptor_AxisDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  major_tick_locations_.MergeFrom(from.major_tick_locations_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.label_font().size() > 0) {
    _internal_set_label_font(from._internal_label_font());
  }
  if (from.ticks_font().size() > 0) {
    _internal_set_ticks_font(from._internal_ticks_font());
  }
  if (from._internal_has_format_pattern()) {
    _internal_set_format_pattern(from._internal_format_pattern());
  }
  if (from.color().size() > 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.has_business_calendar_descriptor()) {
    _internal_mutable_business_calendar_descriptor()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor::MergeFrom(from._internal_business_calendar_descriptor());
  }
  if (from.format_type() != 0) {
    _internal_set_format_type(from._internal_format_type());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.min_range() <= 0 && from.min_range() >= 0)) {
    _internal_set_min_range(from._internal_min_range());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.log() != 0) {
    _internal_set_log(from._internal_log());
  }
  if (from.minor_ticks_visible() != 0) {
    _internal_set_minor_ticks_visible(from._internal_minor_ticks_visible());
  }
  if (from.major_ticks_visible() != 0) {
    _internal_set_major_ticks_visible(from._internal_major_ticks_visible());
  }
  if (from.invert() != 0) {
    _internal_set_invert(from._internal_invert());
  }
  if (!(from.max_range() <= 0 && from.max_range() >= 0)) {
    _internal_set_max_range(from._internal_max_range());
  }
  if (from._internal_has_gap_between_major_ticks()) {
    _internal_set_gap_between_major_ticks(from._internal_gap_between_major_ticks());
  }
  if (from.minor_tick_count() != 0) {
    _internal_set_minor_tick_count(from._internal_minor_tick_count());
  }
  if (from.is_time_axis() != 0) {
    _internal_set_is_time_axis(from._internal_is_time_axis());
  }
  if (!(from.tick_label_angle() <= 0 && from.tick_label_angle() >= 0)) {
    _internal_set_tick_label_angle(from._internal_tick_label_angle());
  }
}

void FigureDescriptor_AxisDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_AxisDescriptor::CopyFrom(const FigureDescriptor_AxisDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_AxisDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_AxisDescriptor::InternalSwap(FigureDescriptor_AxisDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  major_tick_locations_.InternalSwap(&other->major_tick_locations_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_font_.Swap(&other->label_font_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ticks_font_.Swap(&other->ticks_font_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  format_pattern_.Swap(&other->format_pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, tick_label_angle_)
      + sizeof(FigureDescriptor_AxisDescriptor::tick_label_angle_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, business_calendar_descriptor_)>(
          reinterpret_cast<char*>(&business_calendar_descriptor_),
          reinterpret_cast<char*>(&other->business_calendar_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_AxisDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
}
FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open().empty()) {
    open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_open(), 
      GetArena());
  }
  close_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_close().empty()) {
    close_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_close(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SharedCtor() {
open_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
close_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::~FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  open_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::ArenaDtor(void* object) {
  FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* _this = reinterpret_cast< FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* >(object);
  (void)_this;
}
void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_.ClearToEmpty();
  close_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_open();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.open"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string close = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_close();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.close"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string open = 1;
  if (this->open().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open().data(), static_cast<int>(this->_internal_open().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.open");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_open(), target);
  }

  // string close = 2;
  if (this->close().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close().data(), static_cast<int>(this->_internal_close().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.close");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string open = 1;
  if (this->open().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open());
  }

  // string close = 2;
  if (this->close().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
    MergeFrom(*source);
  }
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::MergeFrom(const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open().size() > 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close().size() > 0) {
    _internal_set_close(from._internal_close());
  }
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  open_.Swap(&other->open_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  close_.Swap(&other->close_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_Holiday::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate& date(const FigureDescriptor_BusinessCalendarDescriptor_Holiday* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate&
FigureDescriptor_BusinessCalendarDescriptor_Holiday::_Internal::date(const FigureDescriptor_BusinessCalendarDescriptor_Holiday* msg) {
  return *msg->date_;
}
FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  business_periods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
}
FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(const FigureDescriptor_BusinessCalendarDescriptor_Holiday& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      business_periods_(from.business_periods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date()) {
    date_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(*from.date_);
  } else {
    date_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SharedCtor() {
date_ = nullptr;
}

FigureDescriptor_BusinessCalendarDescriptor_Holiday::~FigureDescriptor_BusinessCalendarDescriptor_Holiday() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete date_;
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::ArenaDtor(void* object) {
  FigureDescriptor_BusinessCalendarDescriptor_Holiday* _this = reinterpret_cast< FigureDescriptor_BusinessCalendarDescriptor_Holiday* >(object);
  (void)_this;
}
void FigureDescriptor_BusinessCalendarDescriptor_Holiday::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  business_periods_.Clear();
  if (GetArena() == nullptr && date_ != nullptr) {
    delete date_;
  }
  date_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_Holiday::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_business_periods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_BusinessCalendarDescriptor_Holiday::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
  if (this->has_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::date(this), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_business_periods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_business_periods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor_Holiday::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
  total_size += 1UL * this->_internal_business_periods_size();
  for (const auto& msg : this->business_periods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
  if (this->has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_BusinessCalendarDescriptor_Holiday* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_BusinessCalendarDescriptor_Holiday>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
    MergeFrom(*source);
  }
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::MergeFrom(const FigureDescriptor_BusinessCalendarDescriptor_Holiday& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  business_periods_.MergeFrom(from.business_periods_);
  if (from.has_date()) {
    _internal_mutable_date()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeFrom(from._internal_date());
  }
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_Holiday& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor_Holiday::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_Holiday* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  business_periods_.InternalSwap(&other->business_periods_);
  swap(date_, other->date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor_Holiday::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
}
FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(const FigureDescriptor_BusinessCalendarDescriptor_LocalDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&year_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
}

FigureDescriptor_BusinessCalendarDescriptor_LocalDate::~FigureDescriptor_BusinessCalendarDescriptor_LocalDate() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::ArenaDtor(void* object) {
  FigureDescriptor_BusinessCalendarDescriptor_LocalDate* _this = reinterpret_cast< FigureDescriptor_BusinessCalendarDescriptor_LocalDate* >(object);
  (void)_this;
}
void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor_LocalDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_BusinessCalendarDescriptor_LocalDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_BusinessCalendarDescriptor_LocalDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
    MergeFrom(*source);
  }
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeFrom(const FigureDescriptor_BusinessCalendarDescriptor_LocalDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_LocalDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor_LocalDate::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_LocalDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, day_)
      + sizeof(FigureDescriptor_BusinessCalendarDescriptor_LocalDate::day_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor_LocalDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  business_days_(arena),
  business_periods_(arena),
  holidays_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
}
FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(const FigureDescriptor_BusinessCalendarDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      business_days_(from.business_days_),
      business_periods_(from.business_periods_),
      holidays_(from.holidays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_zone().empty()) {
    time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_zone(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
}

void FigureDescriptor_BusinessCalendarDescriptor::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FigureDescriptor_BusinessCalendarDescriptor::~FigureDescriptor_BusinessCalendarDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_BusinessCalendarDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FigureDescriptor_BusinessCalendarDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_BusinessCalendarDescriptor* _this = reinterpret_cast< FigureDescriptor_BusinessCalendarDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_BusinessCalendarDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_BusinessCalendarDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  business_days_.Clear();
  business_periods_.Clear();
  holidays_.Clear();
  name_.ClearToEmpty();
  time_zone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.time_zone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_business_days(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_business_days(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek>(val));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_business_periods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_holidays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_BusinessCalendarDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string time_zone = 2;
  if (this->time_zone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone().data(), static_cast<int>(this->_internal_time_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.time_zone");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time_zone(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
  {
    int byte_size = _business_days_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, business_days_, byte_size, target);
    }
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_business_periods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_business_periods(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_holidays_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_holidays(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_business_days_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_business_days(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _business_days_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
  total_size += 1UL * this->_internal_business_periods_size();
  for (const auto& msg : this->business_periods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
  total_size += 1UL * this->_internal_holidays_size();
  for (const auto& msg : this->holidays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string time_zone = 2;
  if (this->time_zone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_BusinessCalendarDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_BusinessCalendarDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_BusinessCalendarDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_BusinessCalendarDescriptor::MergeFrom(const FigureDescriptor_BusinessCalendarDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  business_days_.MergeFrom(from.business_days_);
  business_periods_.MergeFrom(from.business_periods_);
  holidays_.MergeFrom(from.holidays_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.time_zone().size() > 0) {
    _internal_set_time_zone(from._internal_time_zone());
  }
}

void FigureDescriptor_BusinessCalendarDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_BusinessCalendarDescriptor::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  business_days_.InternalSwap(&other->business_days_);
  business_periods_.InternalSwap(&other->business_periods_);
  holidays_.InternalSwap(&other->holidays_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_zone_.Swap(&other->time_zone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_MultiSeriesSourceDescriptor::_Internal {
 public:
};

FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
}
FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(const FigureDescriptor_MultiSeriesSourceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  axis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_axis_id().empty()) {
    axis_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_axis_id(), 
      GetArena());
  }
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_map_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(table_map_id_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
}

void FigureDescriptor_MultiSeriesSourceDescriptor::SharedCtor() {
axis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_map_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(table_map_id_));
}

FigureDescriptor_MultiSeriesSourceDescriptor::~FigureDescriptor_MultiSeriesSourceDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_MultiSeriesSourceDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  axis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FigureDescriptor_MultiSeriesSourceDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_MultiSeriesSourceDescriptor* _this = reinterpret_cast< FigureDescriptor_MultiSeriesSourceDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_MultiSeriesSourceDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_MultiSeriesSourceDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_MultiSeriesSourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axis_id_.ClearToEmpty();
  column_name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_map_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(table_map_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_MultiSeriesSourceDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_axis_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.axis_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceType>(val));
        } else goto handle_unusual;
        continue;
      // int32 table_map_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          table_map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string column_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.column_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_MultiSeriesSourceDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string axis_id = 1;
  if (this->axis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_axis_id().data(), static_cast<int>(this->_internal_axis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.axis_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_axis_id(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 table_map_id = 3;
  if (this->table_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_table_map_id(), target);
  }

  // string column_name = 4;
  if (this->column_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  return target;
}

size_t FigureDescriptor_MultiSeriesSourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string axis_id = 1;
  if (this->axis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_axis_id());
  }

  // string column_name = 4;
  if (this->column_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 table_map_id = 3;
  if (this->table_map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_map_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_MultiSeriesSourceDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_MultiSeriesSourceDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_MultiSeriesSourceDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_MultiSeriesSourceDescriptor::MergeFrom(const FigureDescriptor_MultiSeriesSourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axis_id().size() > 0) {
    _internal_set_axis_id(from._internal_axis_id());
  }
  if (from.column_name().size() > 0) {
    _internal_set_column_name(from._internal_column_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.table_map_id() != 0) {
    _internal_set_table_map_id(from._internal_table_map_id());
  }
}

void FigureDescriptor_MultiSeriesSourceDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_MultiSeriesSourceDescriptor::CopyFrom(const FigureDescriptor_MultiSeriesSourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_MultiSeriesSourceDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_MultiSeriesSourceDescriptor::InternalSwap(FigureDescriptor_MultiSeriesSourceDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  axis_id_.Swap(&other->axis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  column_name_.Swap(&other->column_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, table_map_id_)
      + sizeof(FigureDescriptor_MultiSeriesSourceDescriptor::table_map_id_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_MultiSeriesSourceDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_SourceDescriptor::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor& one_click(const FigureDescriptor_SourceDescriptor* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor&
FigureDescriptor_SourceDescriptor::_Internal::one_click(const FigureDescriptor_SourceDescriptor* msg) {
  return *msg->one_click_;
}
FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
}
FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(const FigureDescriptor_SourceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  axis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_axis_id().empty()) {
    axis_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_axis_id(), 
      GetArena());
  }
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArena());
  }
  column_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_column_type().empty()) {
    column_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_type(), 
      GetArena());
  }
  if (from._internal_has_one_click()) {
    one_click_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor(*from.one_click_);
  } else {
    one_click_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_map_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(table_map_id_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
}

void FigureDescriptor_SourceDescriptor::SharedCtor() {
axis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
column_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&one_click_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_map_id_) -
    reinterpret_cast<char*>(&one_click_)) + sizeof(table_map_id_));
}

FigureDescriptor_SourceDescriptor::~FigureDescriptor_SourceDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_SourceDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  axis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete one_click_;
}

void FigureDescriptor_SourceDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_SourceDescriptor* _this = reinterpret_cast< FigureDescriptor_SourceDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_SourceDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_SourceDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_SourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axis_id_.ClearToEmpty();
  column_name_.ClearToEmpty();
  column_type_.ClearToEmpty();
  if (GetArena() == nullptr && one_click_ != nullptr) {
    delete one_click_;
  }
  one_click_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_map_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(table_map_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_SourceDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_axis_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.axis_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceType>(val));
        } else goto handle_unusual;
        continue;
      // int32 table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_map_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          table_map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string column_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string column_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_column_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_click(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_SourceDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string axis_id = 1;
  if (this->axis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_axis_id().data(), static_cast<int>(this->_internal_axis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.axis_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_axis_id(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 table_id = 3;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_table_id(), target);
  }

  // int32 table_map_id = 4;
  if (this->table_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_table_map_id(), target);
  }

  // string column_name = 5;
  if (this->column_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_column_name(), target);
  }

  // string column_type = 6;
  if (this->column_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_type().data(), static_cast<int>(this->_internal_column_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_column_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
  if (this->has_one_click()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::one_click(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  return target;
}

size_t FigureDescriptor_SourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string axis_id = 1;
  if (this->axis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_axis_id());
  }

  // string column_name = 5;
  if (this->column_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // string column_type = 6;
  if (this->column_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_type());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
  if (this->has_one_click()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *one_click_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_id());
  }

  // int32 table_map_id = 4;
  if (this->table_map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_map_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_SourceDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_SourceDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_SourceDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_SourceDescriptor::MergeFrom(const FigureDescriptor_SourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axis_id().size() > 0) {
    _internal_set_axis_id(from._internal_axis_id());
  }
  if (from.column_name().size() > 0) {
    _internal_set_column_name(from._internal_column_name());
  }
  if (from.column_type().size() > 0) {
    _internal_set_column_type(from._internal_column_type());
  }
  if (from.has_one_click()) {
    _internal_mutable_one_click()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor::MergeFrom(from._internal_one_click());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.table_map_id() != 0) {
    _internal_set_table_map_id(from._internal_table_map_id());
  }
}

void FigureDescriptor_SourceDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_SourceDescriptor::CopyFrom(const FigureDescriptor_SourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_SourceDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_SourceDescriptor::InternalSwap(FigureDescriptor_SourceDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  axis_id_.Swap(&other->axis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  column_name_.Swap(&other->column_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  column_type_.Swap(&other->column_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, table_map_id_)
      + sizeof(FigureDescriptor_SourceDescriptor::table_map_id_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, one_click_)>(
          reinterpret_cast<char*>(&one_click_),
          reinterpret_cast<char*>(&other->one_click_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_SourceDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor_OneClickDescriptor::_Internal {
 public:
};

FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  columns_(arena),
  column_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
}
FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(const FigureDescriptor_OneClickDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_),
      column_types_(from.column_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  require_all_filters_to_display_ = from.require_all_filters_to_display_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
}

void FigureDescriptor_OneClickDescriptor::SharedCtor() {
require_all_filters_to_display_ = false;
}

FigureDescriptor_OneClickDescriptor::~FigureDescriptor_OneClickDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor_OneClickDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FigureDescriptor_OneClickDescriptor::ArenaDtor(void* object) {
  FigureDescriptor_OneClickDescriptor* _this = reinterpret_cast< FigureDescriptor_OneClickDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor_OneClickDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor_OneClickDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor_OneClickDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  column_types_.Clear();
  require_all_filters_to_display_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_OneClickDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.columns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string column_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.column_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool require_all_filters_to_display = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          require_all_filters_to_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor_OneClickDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string columns = 1;
  for (int i = 0, n = this->_internal_columns_size(); i < n; i++) {
    const auto& s = this->_internal_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.columns");
    target = stream->WriteString(1, s, target);
  }

  // repeated string column_types = 2;
  for (int i = 0, n = this->_internal_column_types_size(); i < n; i++) {
    const auto& s = this->_internal_column_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.column_types");
    target = stream->WriteString(2, s, target);
  }

  // bool require_all_filters_to_display = 3;
  if (this->require_all_filters_to_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_require_all_filters_to_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  return target;
}

size_t FigureDescriptor_OneClickDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columns_.size());
  for (int i = 0, n = columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columns_.Get(i));
  }

  // repeated string column_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_types_.size());
  for (int i = 0, n = column_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_types_.Get(i));
  }

  // bool require_all_filters_to_display = 3;
  if (this->require_all_filters_to_display() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor_OneClickDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor_OneClickDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor_OneClickDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor_OneClickDescriptor::MergeFrom(const FigureDescriptor_OneClickDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  column_types_.MergeFrom(from.column_types_);
  if (from.require_all_filters_to_display() != 0) {
    _internal_set_require_all_filters_to_display(from._internal_require_all_filters_to_display());
  }
}

void FigureDescriptor_OneClickDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor_OneClickDescriptor::CopyFrom(const FigureDescriptor_OneClickDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_OneClickDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_OneClickDescriptor::InternalSwap(FigureDescriptor_OneClickDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
  column_types_.InternalSwap(&other->column_types_);
  swap(require_all_filters_to_display_, other->require_all_filters_to_display_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_OneClickDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FigureDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void FigureDescriptor::clear_tables() {
  tables_.Clear();
}
FigureDescriptor::FigureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  charts_(arena),
  tables_(arena),
  errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
}
FigureDescriptor::FigureDescriptor(const FigureDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      charts_(from.charts_),
      tables_(from.tables_),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  title_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title_font().empty()) {
    title_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title_font(), 
      GetArena());
  }
  title_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title_color().empty()) {
    title_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title_color(), 
      GetArena());
  }
  ::memcpy(&update_interval_, &from.update_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&rows_) -
    reinterpret_cast<char*>(&update_interval_)) + sizeof(rows_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
}

void FigureDescriptor::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rows_) -
    reinterpret_cast<char*>(&update_interval_)) + sizeof(rows_));
}

FigureDescriptor::~FigureDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FigureDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FigureDescriptor::ArenaDtor(void* object) {
  FigureDescriptor* _this = reinterpret_cast< FigureDescriptor* >(object);
  (void)_this;
}
void FigureDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FigureDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FigureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charts_.Clear();
  tables_.Clear();
  errors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  title_font_.ClearToEmpty();
  title_color_.ClearToEmpty();
  ::memset(&update_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rows_) -
      reinterpret_cast<char*>(&update_interval_)) + sizeof(rows_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title_font = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_font"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 update_interval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          update_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cols = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse tables = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string errors = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_errors();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.errors"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FigureDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (_internal_has_title()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string title_font = 2;
  if (this->title_font().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_font().data(), static_cast<int>(this->_internal_title_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_font");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title_font(), target);
  }

  // string title_color = 3;
  if (this->title_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_color().data(), static_cast<int>(this->_internal_title_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_color");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title_color(), target);
  }

  // int64 update_interval = 7;
  if (this->update_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_update_interval(), target);
  }

  // int32 cols = 8;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_cols(), target);
  }

  // int32 rows = 9;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_rows(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_charts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_charts(i), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse tables = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_tables(i), target, stream);
  }

  // repeated string errors = 13;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.errors");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  return target;
}

size_t FigureDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
  total_size += 1UL * this->_internal_charts_size();
  for (const auto& msg : this->charts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse tables = 11;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string errors = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(errors_.size());
  for (int i = 0, n = errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      errors_.Get(i));
  }

  // string title = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string title_font = 2;
  if (this->title_font().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_font());
  }

  // string title_color = 3;
  if (this->title_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_color());
  }

  // int64 update_interval = 7;
  if (this->update_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_update_interval());
  }

  // int32 cols = 8;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  // int32 rows = 9;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FigureDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FigureDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FigureDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
    MergeFrom(*source);
  }
}

void FigureDescriptor::MergeFrom(const FigureDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charts_.MergeFrom(from.charts_);
  tables_.MergeFrom(from.tables_);
  errors_.MergeFrom(from.errors_);
  if (from._internal_has_title()) {
    _internal_set_title(from._internal_title());
  }
  if (from.title_font().size() > 0) {
    _internal_set_title_font(from._internal_title_font());
  }
  if (from.title_color().size() > 0) {
    _internal_set_title_color(from._internal_title_color());
  }
  if (from.update_interval() != 0) {
    _internal_set_update_interval(from._internal_update_interval());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
}

void FigureDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FigureDescriptor::CopyFrom(const FigureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor::InternalSwap(FigureDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  charts_.InternalSwap(&other->charts_);
  tables_.InternalSwap(&other->tables_);
  errors_.InternalSwap(&other->errors_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_font_.Swap(&other->title_font_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_color_.Swap(&other->title_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor, rows_)
      + sizeof(FigureDescriptor::rows_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor, update_interval_)>(
          reinterpret_cast<char*>(&update_interval_),
          reinterpret_cast<char*>(&other->update_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::VariableDefinition* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::VariableDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::DocumentRange* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::DocumentRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::DocumentRange >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::Position* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CompletionContext* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CompletionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CompletionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CompletionItem* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::TextEdit* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::TextEdit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::TextEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchFigureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FetchFigureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor* Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
