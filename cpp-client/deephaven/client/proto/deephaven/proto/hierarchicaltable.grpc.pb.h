// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/hierarchicaltable.proto
// Original file comments:
//
// Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
//
#ifndef GRPC_deephaven_2fproto_2fhierarchicaltable_2eproto__INCLUDED
#define GRPC_deephaven_2fproto_2fhierarchicaltable_2eproto__INCLUDED

#include "deephaven/proto/hierarchicaltable.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// This service provides tools to create and view hierarchical tables (rollups and trees).
class HierarchicalTableService final {
 public:
  static constexpr char const* service_full_name() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Applies a rollup operation to a Table and exports the resulting RollupTable
    virtual ::grpc::Status Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::RollupResponse>> AsyncRollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::RollupResponse>>(AsyncRollupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::RollupResponse>> PrepareAsyncRollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::RollupResponse>>(PrepareAsyncRollupRaw(context, request, cq));
    }
    // Applies a tree operation to a Table and exports the resulting TreeTable
    virtual ::grpc::Status Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::TreeResponse>> AsyncTree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::TreeResponse>>(AsyncTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::TreeResponse>> PrepareAsyncTree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::TreeResponse>>(PrepareAsyncTreeRaw(context, request, cq));
    }
    // Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
    // HierarchicalTable
    virtual ::grpc::Status Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>> AsyncApply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>>(AsyncApplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>> PrepareAsyncApply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>>(PrepareAsyncApplyRaw(context, request, cq));
    }
    // Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
    // the resulting HierarchicalTableView for subsequent snapshot or subscription requests
    virtual ::grpc::Status View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>> AsyncView(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>>(AsyncViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>> PrepareAsyncView(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>>(PrepareAsyncViewRaw(context, request, cq));
    }
    // Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
    virtual ::grpc::Status ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> AsyncExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(AsyncExportSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> PrepareAsyncExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(PrepareAsyncExportSourceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Applies a rollup operation to a Table and exports the resulting RollupTable
      virtual void Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Applies a tree operation to a Table and exports the resulting TreeTable
      virtual void Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
      // HierarchicalTable
      virtual void Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
      // the resulting HierarchicalTableView for subsequent snapshot or subscription requests
      virtual void View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
      virtual void ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::RollupResponse>* AsyncRollupRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::RollupResponse>* PrepareAsyncRollupRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::TreeResponse>* AsyncTreeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::TreeResponse>* PrepareAsyncTreeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* AsyncApplyRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* PrepareAsyncApplyRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* AsyncViewRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* PrepareAsyncViewRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* AsyncExportSourceRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PrepareAsyncExportSourceRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>> AsyncRollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>>(AsyncRollupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>> PrepareAsyncRollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>>(PrepareAsyncRollupRaw(context, request, cq));
    }
    ::grpc::Status Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>> AsyncTree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>>(AsyncTreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>> PrepareAsyncTree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>>(PrepareAsyncTreeRaw(context, request, cq));
    }
    ::grpc::Status Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>> AsyncApply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>>(AsyncApplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>> PrepareAsyncApply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>>(PrepareAsyncApplyRaw(context, request, cq));
    }
    ::grpc::Status View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>> AsyncView(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>>(AsyncViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>> PrepareAsyncView(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>>(PrepareAsyncViewRaw(context, request, cq));
    }
    ::grpc::Status ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> AsyncExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(AsyncExportSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>> PrepareAsyncExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>>(PrepareAsyncExportSourceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response, std::function<void(::grpc::Status)>) override;
      void Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response, std::function<void(::grpc::Status)>) override;
      void Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response, std::function<void(::grpc::Status)>) override;
      void Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response, std::function<void(::grpc::Status)>) override;
      void View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>* AsyncRollupRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>* PrepareAsyncRollupRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>* AsyncTreeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>* PrepareAsyncTreeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* AsyncApplyRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* PrepareAsyncApplyRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* AsyncViewRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* PrepareAsyncViewRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* AsyncExportSourceRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PrepareAsyncExportSourceRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Rollup_;
    const ::grpc::internal::RpcMethod rpcmethod_Tree_;
    const ::grpc::internal::RpcMethod rpcmethod_Apply_;
    const ::grpc::internal::RpcMethod rpcmethod_View_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportSource_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Applies a rollup operation to a Table and exports the resulting RollupTable
    virtual ::grpc::Status Rollup(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response);
    // Applies a tree operation to a Table and exports the resulting TreeTable
    virtual ::grpc::Status Tree(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response);
    // Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
    // HierarchicalTable
    virtual ::grpc::Status Apply(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response);
    // Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
    // the resulting HierarchicalTableView for subsequent snapshot or subscription requests
    virtual ::grpc::Status View(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response);
    // Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
    virtual ::grpc::Status ExportSource(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rollup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Rollup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollup(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::RollupRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::RollupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollup(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::RollupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tree() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::TreeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTree(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::TreeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Apply() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Apply(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApply(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_View : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_View() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_View() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status View(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestView(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportSource() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ExportSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportSource(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportSource(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Rollup<WithAsyncMethod_Tree<WithAsyncMethod_Apply<WithAsyncMethod_View<WithAsyncMethod_ExportSource<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Rollup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rollup() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response) { return this->Rollup(context, request, response); }));}
    void SetMessageAllocatorFor_Rollup(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rollup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollup(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::RollupRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::RollupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rollup(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::RollupRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::RollupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Tree() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response) { return this->Tree(context, request, response); }));}
    void SetMessageAllocatorFor_Tree(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::TreeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Tree(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::TreeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::TreeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Apply() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response) { return this->Apply(context, request, response); }));}
    void SetMessageAllocatorFor_Apply(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Apply(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Apply(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_View : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_View() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response) { return this->View(context, request, response); }));}
    void SetMessageAllocatorFor_View(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_View() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status View(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* View(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportSource() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) { return this->ExportSource(context, request, response); }));}
    void SetMessageAllocatorFor_ExportSource(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportSource(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportSource(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Rollup<WithCallbackMethod_Tree<WithCallbackMethod_Apply<WithCallbackMethod_View<WithCallbackMethod_ExportSource<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Rollup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rollup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Rollup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollup(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::RollupRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::RollupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tree() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::TreeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Apply() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Apply(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_View : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_View() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_View() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status View(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportSource() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ExportSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportSource(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rollup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rollup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Rollup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollup(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::RollupRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::RollupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tree() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::TreeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTree(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Apply() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Apply(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_View : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_View() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_View() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status View(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportSource() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ExportSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportSource(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rollup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rollup() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rollup(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rollup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollup(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::RollupRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::RollupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rollup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Tree() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tree(context, request, response); }));
    }
    ~WithRawCallbackMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::TreeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Tree(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Apply() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Apply(context, request, response); }));
    }
    ~WithRawCallbackMethod_Apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Apply(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Apply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_View : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_View() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->View(context, request, response); }));
    }
    ~WithRawCallbackMethod_View() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status View(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* View(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportSource() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportSource(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportSource(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportSource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rollup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse>* streamer) {
                       return this->StreamedRollup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rollup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollup(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::RollupRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::RollupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::RollupRequest,::io::deephaven::proto::backplane::grpc::RollupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tree : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tree() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse>* streamer) {
                       return this->StreamedTree(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tree() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tree(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::TreeRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::TreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTree(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::TreeRequest,::io::deephaven::proto::backplane::grpc::TreeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Apply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Apply() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* streamer) {
                       return this->StreamedApply(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Apply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Apply(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest,::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_View : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_View() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* streamer) {
                       return this->StreamedView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_View() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status View(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest,::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportSource() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* streamer) {
                       return this->StreamedExportSource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportSource(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest,::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Rollup<WithStreamedUnaryMethod_Tree<WithStreamedUnaryMethod_Apply<WithStreamedUnaryMethod_View<WithStreamedUnaryMethod_ExportSource<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Rollup<WithStreamedUnaryMethod_Tree<WithStreamedUnaryMethod_Apply<WithStreamedUnaryMethod_View<WithStreamedUnaryMethod_ExportSource<Service > > > > > StreamedService;
};

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


#endif  // GRPC_deephaven_2fproto_2fhierarchicaltable_2eproto__INCLUDED
