// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/hierarchicaltable.proto

#include "deephaven/proto/hierarchicaltable.pb.h"
#include "deephaven/proto/hierarchicaltable.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

static const char* HierarchicalTableService_method_names[] = {
  "/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Rollup",
  "/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Tree",
  "/io.deephaven.proto.backplane.grpc.HierarchicalTableService/Apply",
  "/io.deephaven.proto.backplane.grpc.HierarchicalTableService/View",
  "/io.deephaven.proto.backplane.grpc.HierarchicalTableService/ExportSource",
};

std::unique_ptr< HierarchicalTableService::Stub> HierarchicalTableService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HierarchicalTableService::Stub> stub(new HierarchicalTableService::Stub(channel, options));
  return stub;
}

HierarchicalTableService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Rollup_(HierarchicalTableService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tree_(HierarchicalTableService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Apply_(HierarchicalTableService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_View_(HierarchicalTableService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportSource_(HierarchicalTableService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HierarchicalTableService::Stub::Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rollup_, context, request, response);
}

void HierarchicalTableService::Stub::async::Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rollup_, context, request, response, std::move(f));
}

void HierarchicalTableService::Stub::async::Rollup(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rollup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>* HierarchicalTableService::Stub::PrepareAsyncRollupRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::RollupResponse, ::io::deephaven::proto::backplane::grpc::RollupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rollup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::RollupResponse>* HierarchicalTableService::Stub::AsyncRollupRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HierarchicalTableService::Stub::Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Tree_, context, request, response);
}

void HierarchicalTableService::Stub::async::Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Tree_, context, request, response, std::move(f));
}

void HierarchicalTableService::Stub::async::Tree(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Tree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>* HierarchicalTableService::Stub::PrepareAsyncTreeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::TreeResponse, ::io::deephaven::proto::backplane::grpc::TreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Tree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::TreeResponse>* HierarchicalTableService::Stub::AsyncTreeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HierarchicalTableService::Stub::Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Apply_, context, request, response);
}

void HierarchicalTableService::Stub::async::Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Apply_, context, request, response, std::move(f));
}

void HierarchicalTableService::Stub::async::Apply(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Apply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* HierarchicalTableService::Stub::PrepareAsyncApplyRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Apply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>* HierarchicalTableService::Stub::AsyncApplyRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HierarchicalTableService::Stub::View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_View_, context, request, response);
}

void HierarchicalTableService::Stub::async::View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_View_, context, request, response, std::move(f));
}

void HierarchicalTableService::Stub::async::View(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_View_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* HierarchicalTableService::Stub::PrepareAsyncViewRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_View_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>* HierarchicalTableService::Stub::AsyncViewRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HierarchicalTableService::Stub::ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportSource_, context, request, response);
}

void HierarchicalTableService::Stub::async::ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportSource_, context, request, response, std::move(f));
}

void HierarchicalTableService::Stub::async::ExportSource(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportSource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* HierarchicalTableService::Stub::PrepareAsyncExportSourceRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportSource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* HierarchicalTableService::Stub::AsyncExportSourceRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportSourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

HierarchicalTableService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HierarchicalTableService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HierarchicalTableService::Service, ::io::deephaven::proto::backplane::grpc::RollupRequest, ::io::deephaven::proto::backplane::grpc::RollupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HierarchicalTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::RollupRequest* req,
             ::io::deephaven::proto::backplane::grpc::RollupResponse* resp) {
               return service->Rollup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HierarchicalTableService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HierarchicalTableService::Service, ::io::deephaven::proto::backplane::grpc::TreeRequest, ::io::deephaven::proto::backplane::grpc::TreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HierarchicalTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::TreeRequest* req,
             ::io::deephaven::proto::backplane::grpc::TreeResponse* resp) {
               return service->Tree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HierarchicalTableService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HierarchicalTableService::Service, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HierarchicalTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* req,
             ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* resp) {
               return service->Apply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HierarchicalTableService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HierarchicalTableService::Service, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HierarchicalTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* req,
             ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* resp) {
               return service->View(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HierarchicalTableService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HierarchicalTableService::Service, ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HierarchicalTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* req,
             ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* resp) {
               return service->ExportSource(ctx, req, resp);
             }, this)));
}

HierarchicalTableService::Service::~Service() {
}

::grpc::Status HierarchicalTableService::Service::Rollup(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::RollupRequest* request, ::io::deephaven::proto::backplane::grpc::RollupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HierarchicalTableService::Service::Tree(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::TreeRequest* request, ::io::deephaven::proto::backplane::grpc::TreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HierarchicalTableService::Service::Apply(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HierarchicalTableService::Service::View(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* request, ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HierarchicalTableService::Service::ExportSource(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace grpc

