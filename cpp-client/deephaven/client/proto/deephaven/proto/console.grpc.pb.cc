// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/console.proto

#include "deephaven/proto/console.pb.h"
#include "deephaven/proto/console.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {

static const char* ConsoleService_method_names[] = {
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/GetConsoleTypes",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/StartConsole",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/GetHeapInfo",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/SubscribeToLogs",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/ExecuteCommand",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/CancelCommand",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/BindTableToVariable",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/AutoCompleteStream",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/CancelAutoComplete",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/OpenAutoCompleteStream",
  "/io.deephaven.proto.backplane.script.grpc.ConsoleService/NextAutoCompleteStream",
};

std::unique_ptr< ConsoleService::Stub> ConsoleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConsoleService::Stub> stub(new ConsoleService::Stub(channel, options));
  return stub;
}

ConsoleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetConsoleTypes_(ConsoleService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartConsole_(ConsoleService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHeapInfo_(ConsoleService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToLogs_(ConsoleService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ExecuteCommand_(ConsoleService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelCommand_(ConsoleService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindTableToVariable_(ConsoleService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AutoCompleteStream_(ConsoleService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_CancelAutoComplete_(ConsoleService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenAutoCompleteStream_(ConsoleService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_NextAutoCompleteStream_(ConsoleService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConsoleService::Stub::GetConsoleTypes(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest& request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConsoleTypes_, context, request, response);
}

void ConsoleService::Stub::async::GetConsoleTypes(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConsoleTypes_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::GetConsoleTypes(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConsoleTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse>* ConsoleService::Stub::PrepareAsyncGetConsoleTypesRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConsoleTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse>* ConsoleService::Stub::AsyncGetConsoleTypesRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConsoleTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::StartConsole(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest& request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartConsole_, context, request, response);
}

void ConsoleService::Stub::async::StartConsole(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartConsole_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::StartConsole(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartConsole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse>* ConsoleService::Stub::PrepareAsyncStartConsoleRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartConsole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse>* ConsoleService::Stub::AsyncStartConsoleRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartConsoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::GetHeapInfo(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest& request, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHeapInfo_, context, request, response);
}

void ConsoleService::Stub::async::GetHeapInfo(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHeapInfo_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::GetHeapInfo(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHeapInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse>* ConsoleService::Stub::PrepareAsyncGetHeapInfoRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHeapInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse>* ConsoleService::Stub::AsyncGetHeapInfoRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHeapInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* ConsoleService::Stub::SubscribeToLogsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(channel_.get(), rpcmethod_SubscribeToLogs_, context, request);
}

void ConsoleService::Stub::async::SubscribeToLogs(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* request, ::grpc::ClientReadReactor< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToLogs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* ConsoleService::Stub::AsyncSubscribeToLogsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(channel_.get(), cq, rpcmethod_SubscribeToLogs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* ConsoleService::Stub::PrepareAsyncSubscribeToLogsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>::Create(channel_.get(), cq, rpcmethod_SubscribeToLogs_, context, request, false, nullptr);
}

::grpc::Status ConsoleService::Stub::ExecuteCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest& request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteCommand_, context, request, response);
}

void ConsoleService::Stub::async::ExecuteCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteCommand_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::ExecuteCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse>* ConsoleService::Stub::PrepareAsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse>* ConsoleService::Stub::AsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::CancelCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest& request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelCommand_, context, request, response);
}

void ConsoleService::Stub::async::CancelCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelCommand_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::CancelCommand(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse>* ConsoleService::Stub::PrepareAsyncCancelCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse>* ConsoleService::Stub::AsyncCancelCommandRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleService::Stub::BindTableToVariable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest& request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindTableToVariable_, context, request, response);
}

void ConsoleService::Stub::async::BindTableToVariable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindTableToVariable_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::BindTableToVariable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindTableToVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse>* ConsoleService::Stub::PrepareAsyncBindTableToVariableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindTableToVariable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse>* ConsoleService::Stub::AsyncBindTableToVariableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindTableToVariableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* ConsoleService::Stub::AutoCompleteStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(channel_.get(), rpcmethod_AutoCompleteStream_, context);
}

void ConsoleService::Stub::async::AutoCompleteStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest,::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest,::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_AutoCompleteStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* ConsoleService::Stub::AsyncAutoCompleteStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(channel_.get(), cq, rpcmethod_AutoCompleteStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* ConsoleService::Stub::PrepareAsyncAutoCompleteStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(channel_.get(), cq, rpcmethod_AutoCompleteStream_, context, false, nullptr);
}

::grpc::Status ConsoleService::Stub::CancelAutoComplete(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest& request, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelAutoComplete_, context, request, response);
}

void ConsoleService::Stub::async::CancelAutoComplete(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelAutoComplete_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::CancelAutoComplete(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelAutoComplete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse>* ConsoleService::Stub::PrepareAsyncCancelAutoCompleteRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelAutoComplete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse>* ConsoleService::Stub::AsyncCancelAutoCompleteRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelAutoCompleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* ConsoleService::Stub::OpenAutoCompleteStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(channel_.get(), rpcmethod_OpenAutoCompleteStream_, context, request);
}

void ConsoleService::Stub::async::OpenAutoCompleteStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* request, ::grpc::ClientReadReactor< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_OpenAutoCompleteStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* ConsoleService::Stub::AsyncOpenAutoCompleteStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(channel_.get(), cq, rpcmethod_OpenAutoCompleteStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* ConsoleService::Stub::PrepareAsyncOpenAutoCompleteStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>::Create(channel_.get(), cq, rpcmethod_OpenAutoCompleteStream_, context, request, false, nullptr);
}

::grpc::Status ConsoleService::Stub::NextAutoCompleteStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest& request, ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NextAutoCompleteStream_, context, request, response);
}

void ConsoleService::Stub::async::NextAutoCompleteStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* request, ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextAutoCompleteStream_, context, request, response, std::move(f));
}

void ConsoleService::Stub::async::NextAutoCompleteStream(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* request, ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextAutoCompleteStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse>* ConsoleService::Stub::PrepareAsyncNextAutoCompleteStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NextAutoCompleteStream_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse>* ConsoleService::Stub::AsyncNextAutoCompleteStreamRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNextAutoCompleteStreamRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConsoleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* resp) {
               return service->GetConsoleTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* resp) {
               return service->StartConsole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse* resp) {
               return service->GetHeapInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* req,
             ::grpc::ServerWriter<::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* writer) {
               return service->SubscribeToLogs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* resp) {
               return service->ExecuteCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* resp) {
               return service->CancelCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* resp) {
               return service->BindTableToVariable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[7],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse,
             ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest>* stream) {
               return service->AutoCompleteStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse* resp) {
               return service->CancelAutoComplete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* req,
             ::grpc::ServerWriter<::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* writer) {
               return service->OpenAutoCompleteStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleService::Service, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* req,
             ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse* resp) {
               return service->NextAutoCompleteStream(ctx, req, resp);
             }, this)));
}

ConsoleService::Service::~Service() {
}

::grpc::Status ConsoleService::Service::GetConsoleTypes(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::StartConsole(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest* request, ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::GetHeapInfo(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest* request, ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::SubscribeToLogs(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest* request, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::ExecuteCommand(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::CancelCommand(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::BindTableToVariable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest* request, ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::AutoCompleteStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::CancelAutoComplete(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest* request, ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::OpenAutoCompleteStream(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* request, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleService::Service::NextAutoCompleteStream(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest* request, ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace script
}  // namespace grpc

