// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/inputtable.proto
// Original file comments:
//
// Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending
#ifndef GRPC_deephaven_2fproto_2finputtable_2eproto__INCLUDED
#define GRPC_deephaven_2fproto_2finputtable_2eproto__INCLUDED

#include "deephaven/proto/inputtable.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

//
// This service offers methods to manipulate the contents of input tables.
class InputTableService final {
 public:
  static constexpr char const* service_full_name() {
    return "io.deephaven.proto.backplane.grpc.InputTableService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Adds the provided table to the specified input table. The new data to add must only have
    // columns (name, types, and order) which match the given input table's columns.
    virtual ::grpc::Status AddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::AddTableResponse>> AsyncAddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::AddTableResponse>>(AsyncAddTableToInputTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::AddTableResponse>> PrepareAsyncAddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::AddTableResponse>>(PrepareAsyncAddTableToInputTableRaw(context, request, cq));
    }
    //
    // Removes the provided table from the specified input tables. The tables indicating which rows
    // to remove are expected to only have columns that match the key columns of the input table.
    virtual ::grpc::Status DeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>> AsyncDeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>>(AsyncDeleteTableFromInputTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>> PrepareAsyncDeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>>(PrepareAsyncDeleteTableFromInputTableRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Adds the provided table to the specified input table. The new data to add must only have
      // columns (name, types, and order) which match the given input table's columns.
      virtual void AddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Removes the provided table from the specified input tables. The tables indicating which rows
      // to remove are expected to only have columns that match the key columns of the input table.
      virtual void DeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::AddTableResponse>* AsyncAddTableToInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::AddTableResponse>* PrepareAsyncAddTableToInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* AsyncDeleteTableFromInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* PrepareAsyncDeleteTableFromInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AddTableResponse>> AsyncAddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AddTableResponse>>(AsyncAddTableToInputTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AddTableResponse>> PrepareAsyncAddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AddTableResponse>>(PrepareAsyncAddTableToInputTableRaw(context, request, cq));
    }
    ::grpc::Status DeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>> AsyncDeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>>(AsyncDeleteTableFromInputTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>> PrepareAsyncDeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>>(PrepareAsyncDeleteTableFromInputTableRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response, std::function<void(::grpc::Status)>) override;
      void AddTableToInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteTableFromInputTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AddTableResponse>* AsyncAddTableToInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AddTableResponse>* PrepareAsyncAddTableToInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* AsyncDeleteTableFromInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* PrepareAsyncDeleteTableFromInputTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddTableToInputTable_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTableFromInputTable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Adds the provided table to the specified input table. The new data to add must only have
    // columns (name, types, and order) which match the given input table's columns.
    virtual ::grpc::Status AddTableToInputTable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response);
    //
    // Removes the provided table from the specified input tables. The tables indicating which rows
    // to remove are expected to only have columns that match the key columns of the input table.
    virtual ::grpc::Status DeleteTableFromInputTable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTableToInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddTableToInputTable() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddTableToInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTableToInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::AddTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTableToInputTable(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::AddTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::AddTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTableFromInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTableFromInputTable() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteTableFromInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTableFromInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTableFromInputTable(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddTableToInputTable<WithAsyncMethod_DeleteTableFromInputTable<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddTableToInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddTableToInputTable() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::AddTableRequest, ::io::deephaven::proto::backplane::grpc::AddTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* request, ::io::deephaven::proto::backplane::grpc::AddTableResponse* response) { return this->AddTableToInputTable(context, request, response); }));}
    void SetMessageAllocatorFor_AddTableToInputTable(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::AddTableRequest, ::io::deephaven::proto::backplane::grpc::AddTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::AddTableRequest, ::io::deephaven::proto::backplane::grpc::AddTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddTableToInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTableToInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::AddTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddTableToInputTable(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::AddTableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTableFromInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTableFromInputTable() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::DeleteTableRequest, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* response) { return this->DeleteTableFromInputTable(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTableFromInputTable(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::DeleteTableRequest, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::DeleteTableRequest, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTableFromInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTableFromInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTableFromInputTable(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddTableToInputTable<WithCallbackMethod_DeleteTableFromInputTable<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddTableToInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddTableToInputTable() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddTableToInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTableToInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::AddTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTableFromInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTableFromInputTable() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteTableFromInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTableFromInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTableToInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddTableToInputTable() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddTableToInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTableToInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::AddTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTableToInputTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTableFromInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTableFromInputTable() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteTableFromInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTableFromInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTableFromInputTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddTableToInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddTableToInputTable() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddTableToInputTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddTableToInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTableToInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::AddTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddTableToInputTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTableFromInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTableFromInputTable() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTableFromInputTable(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTableFromInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTableFromInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTableFromInputTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTableToInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddTableToInputTable() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::AddTableRequest, ::io::deephaven::proto::backplane::grpc::AddTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::AddTableRequest, ::io::deephaven::proto::backplane::grpc::AddTableResponse>* streamer) {
                       return this->StreamedAddTableToInputTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddTableToInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTableToInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::AddTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::AddTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTableToInputTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::AddTableRequest,::io::deephaven::proto::backplane::grpc::AddTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTableFromInputTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTableFromInputTable() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::DeleteTableRequest, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::DeleteTableRequest, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* streamer) {
                       return this->StreamedDeleteTableFromInputTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTableFromInputTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTableFromInputTable(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTableFromInputTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::DeleteTableRequest,::io::deephaven::proto::backplane::grpc::DeleteTableResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddTableToInputTable<WithStreamedUnaryMethod_DeleteTableFromInputTable<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddTableToInputTable<WithStreamedUnaryMethod_DeleteTableFromInputTable<Service > > StreamedService;
};

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


#endif  // GRPC_deephaven_2fproto_2finputtable_2eproto__INCLUDED
