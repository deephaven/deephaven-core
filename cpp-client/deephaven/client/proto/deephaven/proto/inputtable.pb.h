// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/inputtable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2finputtable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2finputtable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2finputtable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2finputtable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2finputtable_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class AddTableRequest;
struct AddTableRequestDefaultTypeInternal;
extern AddTableRequestDefaultTypeInternal _AddTableRequest_default_instance_;
class AddTableResponse;
struct AddTableResponseDefaultTypeInternal;
extern AddTableResponseDefaultTypeInternal _AddTableResponse_default_instance_;
class DeleteTableRequest;
struct DeleteTableRequestDefaultTypeInternal;
extern DeleteTableRequestDefaultTypeInternal _DeleteTableRequest_default_instance_;
class DeleteTableResponse;
struct DeleteTableResponseDefaultTypeInternal;
extern DeleteTableResponseDefaultTypeInternal _DeleteTableResponse_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::AddTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::AddTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::AddTableResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::AddTableResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::DeleteTableRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::DeleteTableRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::DeleteTableResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::DeleteTableResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class AddTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.AddTableRequest) */ {
 public:
  inline AddTableRequest() : AddTableRequest(nullptr) {}
  ~AddTableRequest() override;
  explicit PROTOBUF_CONSTEXPR AddTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTableRequest(const AddTableRequest& from);
  AddTableRequest(AddTableRequest&& from) noexcept
    : AddTableRequest() {
    *this = ::std::move(from);
  }

  inline AddTableRequest& operator=(const AddTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTableRequest& operator=(AddTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTableRequest* internal_default_instance() {
    return reinterpret_cast<const AddTableRequest*>(
               &_AddTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddTableRequest& a, AddTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.AddTableRequest";
  }
  protected:
  explicit AddTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTableFieldNumber = 1,
    kTableToAddFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
  bool has_input_table() const;
  private:
  bool _internal_has_input_table() const;
  public:
  void clear_input_table();
  const ::io::deephaven::proto::backplane::grpc::Ticket& input_table() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_input_table();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_input_table();
  void set_allocated_input_table(::io::deephaven::proto::backplane::grpc::Ticket* input_table);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_input_table() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_input_table();
  public:
  void unsafe_arena_set_allocated_input_table(
      ::io::deephaven::proto::backplane::grpc::Ticket* input_table);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_input_table();

  // .io.deephaven.proto.backplane.grpc.Ticket table_to_add = 2;
  bool has_table_to_add() const;
  private:
  bool _internal_has_table_to_add() const;
  public:
  void clear_table_to_add();
  const ::io::deephaven::proto::backplane::grpc::Ticket& table_to_add() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_table_to_add();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_table_to_add();
  void set_allocated_table_to_add(::io::deephaven::proto::backplane::grpc::Ticket* table_to_add);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_table_to_add() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_table_to_add();
  public:
  void unsafe_arena_set_allocated_table_to_add(
      ::io::deephaven::proto::backplane::grpc::Ticket* table_to_add);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_table_to_add();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.AddTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* input_table_;
  ::io::deephaven::proto::backplane::grpc::Ticket* table_to_add_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2finputtable_2eproto;
};
// -------------------------------------------------------------------

class AddTableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.AddTableResponse) */ {
 public:
  inline AddTableResponse() : AddTableResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddTableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTableResponse(const AddTableResponse& from);
  AddTableResponse(AddTableResponse&& from) noexcept
    : AddTableResponse() {
    *this = ::std::move(from);
  }

  inline AddTableResponse& operator=(const AddTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTableResponse& operator=(AddTableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTableResponse* internal_default_instance() {
    return reinterpret_cast<const AddTableResponse*>(
               &_AddTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddTableResponse& a, AddTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddTableResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddTableResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.AddTableResponse";
  }
  protected:
  explicit AddTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.AddTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2finputtable_2eproto;
};
// -------------------------------------------------------------------

class DeleteTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.DeleteTableRequest) */ {
 public:
  inline DeleteTableRequest() : DeleteTableRequest(nullptr) {}
  ~DeleteTableRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTableRequest(const DeleteTableRequest& from);
  DeleteTableRequest(DeleteTableRequest&& from) noexcept
    : DeleteTableRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTableRequest& operator=(const DeleteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTableRequest& operator=(DeleteTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTableRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTableRequest*>(
               &_DeleteTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteTableRequest& a, DeleteTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.DeleteTableRequest";
  }
  protected:
  explicit DeleteTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTableFieldNumber = 1,
    kTableToRemoveFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
  bool has_input_table() const;
  private:
  bool _internal_has_input_table() const;
  public:
  void clear_input_table();
  const ::io::deephaven::proto::backplane::grpc::Ticket& input_table() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_input_table();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_input_table();
  void set_allocated_input_table(::io::deephaven::proto::backplane::grpc::Ticket* input_table);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_input_table() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_input_table();
  public:
  void unsafe_arena_set_allocated_input_table(
      ::io::deephaven::proto::backplane::grpc::Ticket* input_table);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_input_table();

  // .io.deephaven.proto.backplane.grpc.Ticket table_to_remove = 2;
  bool has_table_to_remove() const;
  private:
  bool _internal_has_table_to_remove() const;
  public:
  void clear_table_to_remove();
  const ::io::deephaven::proto::backplane::grpc::Ticket& table_to_remove() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_table_to_remove();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_table_to_remove();
  void set_allocated_table_to_remove(::io::deephaven::proto::backplane::grpc::Ticket* table_to_remove);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_table_to_remove() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_table_to_remove();
  public:
  void unsafe_arena_set_allocated_table_to_remove(
      ::io::deephaven::proto::backplane::grpc::Ticket* table_to_remove);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_table_to_remove();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* input_table_;
  ::io::deephaven::proto::backplane::grpc::Ticket* table_to_remove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2finputtable_2eproto;
};
// -------------------------------------------------------------------

class DeleteTableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.DeleteTableResponse) */ {
 public:
  inline DeleteTableResponse() : DeleteTableResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeleteTableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTableResponse(const DeleteTableResponse& from);
  DeleteTableResponse(DeleteTableResponse&& from) noexcept
    : DeleteTableResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTableResponse& operator=(const DeleteTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTableResponse& operator=(DeleteTableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTableResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTableResponse*>(
               &_DeleteTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteTableResponse& a, DeleteTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteTableResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteTableResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.DeleteTableResponse";
  }
  protected:
  explicit DeleteTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.DeleteTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2finputtable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddTableRequest

// .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
inline bool AddTableRequest::_internal_has_input_table() const {
  return this != internal_default_instance() && input_table_ != nullptr;
}
inline bool AddTableRequest::has_input_table() const {
  return _internal_has_input_table();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& AddTableRequest::_internal_input_table() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = input_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& AddTableRequest::input_table() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.AddTableRequest.input_table)
  return _internal_input_table();
}
inline void AddTableRequest::unsafe_arena_set_allocated_input_table(
    ::io::deephaven::proto::backplane::grpc::Ticket* input_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_table_);
  }
  input_table_ = input_table;
  if (input_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.AddTableRequest.input_table)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::release_input_table() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = input_table_;
  input_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::unsafe_arena_release_input_table() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.AddTableRequest.input_table)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = input_table_;
  input_table_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::_internal_mutable_input_table() {
  
  if (input_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    input_table_ = p;
  }
  return input_table_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::mutable_input_table() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_input_table();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.AddTableRequest.input_table)
  return _msg;
}
inline void AddTableRequest::set_allocated_input_table(::io::deephaven::proto::backplane::grpc::Ticket* input_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_table_);
  }
  if (input_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_table));
    if (message_arena != submessage_arena) {
      input_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_table, submessage_arena);
    }
    
  } else {
    
  }
  input_table_ = input_table;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AddTableRequest.input_table)
}

// .io.deephaven.proto.backplane.grpc.Ticket table_to_add = 2;
inline bool AddTableRequest::_internal_has_table_to_add() const {
  return this != internal_default_instance() && table_to_add_ != nullptr;
}
inline bool AddTableRequest::has_table_to_add() const {
  return _internal_has_table_to_add();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& AddTableRequest::_internal_table_to_add() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = table_to_add_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& AddTableRequest::table_to_add() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.AddTableRequest.table_to_add)
  return _internal_table_to_add();
}
inline void AddTableRequest::unsafe_arena_set_allocated_table_to_add(
    ::io::deephaven::proto::backplane::grpc::Ticket* table_to_add) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_to_add_);
  }
  table_to_add_ = table_to_add;
  if (table_to_add) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.AddTableRequest.table_to_add)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::release_table_to_add() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = table_to_add_;
  table_to_add_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::unsafe_arena_release_table_to_add() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.AddTableRequest.table_to_add)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = table_to_add_;
  table_to_add_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::_internal_mutable_table_to_add() {
  
  if (table_to_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    table_to_add_ = p;
  }
  return table_to_add_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* AddTableRequest::mutable_table_to_add() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_table_to_add();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.AddTableRequest.table_to_add)
  return _msg;
}
inline void AddTableRequest::set_allocated_table_to_add(::io::deephaven::proto::backplane::grpc::Ticket* table_to_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_to_add_);
  }
  if (table_to_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_to_add));
    if (message_arena != submessage_arena) {
      table_to_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_to_add, submessage_arena);
    }
    
  } else {
    
  }
  table_to_add_ = table_to_add;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AddTableRequest.table_to_add)
}

// -------------------------------------------------------------------

// AddTableResponse

// -------------------------------------------------------------------

// DeleteTableRequest

// .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
inline bool DeleteTableRequest::_internal_has_input_table() const {
  return this != internal_default_instance() && input_table_ != nullptr;
}
inline bool DeleteTableRequest::has_input_table() const {
  return _internal_has_input_table();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& DeleteTableRequest::_internal_input_table() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = input_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& DeleteTableRequest::input_table() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.DeleteTableRequest.input_table)
  return _internal_input_table();
}
inline void DeleteTableRequest::unsafe_arena_set_allocated_input_table(
    ::io::deephaven::proto::backplane::grpc::Ticket* input_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_table_);
  }
  input_table_ = input_table;
  if (input_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.DeleteTableRequest.input_table)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::release_input_table() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = input_table_;
  input_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::unsafe_arena_release_input_table() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.DeleteTableRequest.input_table)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = input_table_;
  input_table_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::_internal_mutable_input_table() {
  
  if (input_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    input_table_ = p;
  }
  return input_table_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::mutable_input_table() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_input_table();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.DeleteTableRequest.input_table)
  return _msg;
}
inline void DeleteTableRequest::set_allocated_input_table(::io::deephaven::proto::backplane::grpc::Ticket* input_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_table_);
  }
  if (input_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_table));
    if (message_arena != submessage_arena) {
      input_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_table, submessage_arena);
    }
    
  } else {
    
  }
  input_table_ = input_table;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.DeleteTableRequest.input_table)
}

// .io.deephaven.proto.backplane.grpc.Ticket table_to_remove = 2;
inline bool DeleteTableRequest::_internal_has_table_to_remove() const {
  return this != internal_default_instance() && table_to_remove_ != nullptr;
}
inline bool DeleteTableRequest::has_table_to_remove() const {
  return _internal_has_table_to_remove();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& DeleteTableRequest::_internal_table_to_remove() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = table_to_remove_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& DeleteTableRequest::table_to_remove() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.DeleteTableRequest.table_to_remove)
  return _internal_table_to_remove();
}
inline void DeleteTableRequest::unsafe_arena_set_allocated_table_to_remove(
    ::io::deephaven::proto::backplane::grpc::Ticket* table_to_remove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_to_remove_);
  }
  table_to_remove_ = table_to_remove;
  if (table_to_remove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.DeleteTableRequest.table_to_remove)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::release_table_to_remove() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = table_to_remove_;
  table_to_remove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::unsafe_arena_release_table_to_remove() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.DeleteTableRequest.table_to_remove)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = table_to_remove_;
  table_to_remove_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::_internal_mutable_table_to_remove() {
  
  if (table_to_remove_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    table_to_remove_ = p;
  }
  return table_to_remove_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* DeleteTableRequest::mutable_table_to_remove() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_table_to_remove();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.DeleteTableRequest.table_to_remove)
  return _msg;
}
inline void DeleteTableRequest::set_allocated_table_to_remove(::io::deephaven::proto::backplane::grpc::Ticket* table_to_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_to_remove_);
  }
  if (table_to_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_to_remove));
    if (message_arena != submessage_arena) {
      table_to_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_to_remove, submessage_arena);
    }
    
  } else {
    
  }
  table_to_remove_ = table_to_remove;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.DeleteTableRequest.table_to_remove)
}

// -------------------------------------------------------------------

// DeleteTableResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2finputtable_2eproto
