// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/config.proto

#include "deephaven/proto/config.pb.h"
#include "deephaven/proto/config.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

static const char* ConfigService_method_names[] = {
  "/io.deephaven.proto.backplane.grpc.ConfigService/GetAuthenticationConstants",
  "/io.deephaven.proto.backplane.grpc.ConfigService/GetConfigurationConstants",
};

std::unique_ptr< ConfigService::Stub> ConfigService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigService::Stub> stub(new ConfigService::Stub(channel, options));
  return stub;
}

ConfigService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAuthenticationConstants_(ConfigService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfigurationConstants_(ConfigService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigService::Stub::GetAuthenticationConstants(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest& request, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAuthenticationConstants_, context, request, response);
}

void ConfigService::Stub::async::GetAuthenticationConstants(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest* request, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthenticationConstants_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::GetAuthenticationConstants(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest* request, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthenticationConstants_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse>* ConfigService::Stub::PrepareAsyncGetAuthenticationConstantsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAuthenticationConstants_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse>* ConfigService::Stub::AsyncGetAuthenticationConstantsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAuthenticationConstantsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::GetConfigurationConstants(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest& request, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConfigurationConstants_, context, request, response);
}

void ConfigService::Stub::async::GetConfigurationConstants(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest* request, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfigurationConstants_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::GetConfigurationConstants(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest* request, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfigurationConstants_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse>* ConfigService::Stub::PrepareAsyncGetConfigurationConstantsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConfigurationConstants_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse>* ConfigService::Stub::AsyncGetConfigurationConstantsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConfigurationConstantsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest* req,
             ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse* resp) {
               return service->GetAuthenticationConstants(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest* req,
             ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse* resp) {
               return service->GetConfigurationConstants(ctx, req, resp);
             }, this)));
}

ConfigService::Service::~Service() {
}

::grpc::Status ConfigService::Service::GetAuthenticationConstants(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest* request, ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::GetConfigurationConstants(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest* request, ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace grpc

