// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/application.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fapplication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fapplication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2fapplication_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class CustomInfo;
struct CustomInfoDefaultTypeInternal;
extern CustomInfoDefaultTypeInternal _CustomInfo_default_instance_;
class FieldInfo;
struct FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
class FieldInfo_FieldType;
struct FieldInfo_FieldTypeDefaultTypeInternal;
extern FieldInfo_FieldTypeDefaultTypeInternal _FieldInfo_FieldType_default_instance_;
class FieldsChangeUpdate;
struct FieldsChangeUpdateDefaultTypeInternal;
extern FieldsChangeUpdateDefaultTypeInternal _FieldsChangeUpdate_default_instance_;
class FigureInfo;
struct FigureInfoDefaultTypeInternal;
extern FigureInfoDefaultTypeInternal _FigureInfo_default_instance_;
class ListFieldsRequest;
struct ListFieldsRequestDefaultTypeInternal;
extern ListFieldsRequestDefaultTypeInternal _ListFieldsRequest_default_instance_;
class RemovedField;
struct RemovedFieldDefaultTypeInternal;
extern RemovedFieldDefaultTypeInternal _RemovedField_default_instance_;
class TableInfo;
struct TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::CustomInfo* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::CustomInfo>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FieldInfo* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FieldInfo>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FigureInfo* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FigureInfo>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ListFieldsRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ListFieldsRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::RemovedField* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::RemovedField>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TableInfo* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TableInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class ListFieldsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ListFieldsRequest) */ {
 public:
  inline ListFieldsRequest() : ListFieldsRequest(nullptr) {}
  explicit constexpr ListFieldsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFieldsRequest(const ListFieldsRequest& from);
  ListFieldsRequest(ListFieldsRequest&& from) noexcept
    : ListFieldsRequest() {
    *this = ::std::move(from);
  }

  inline ListFieldsRequest& operator=(const ListFieldsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldsRequest& operator=(ListFieldsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFieldsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFieldsRequest*>(
               &_ListFieldsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListFieldsRequest& a, ListFieldsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFieldsRequest* New() const final {
    return new ListFieldsRequest();
  }

  ListFieldsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFieldsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListFieldsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListFieldsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ListFieldsRequest";
  }
  protected:
  explicit ListFieldsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ListFieldsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class FieldsChangeUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate) */ {
 public:
  inline FieldsChangeUpdate() : FieldsChangeUpdate(nullptr) {}
  ~FieldsChangeUpdate() override;
  explicit constexpr FieldsChangeUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldsChangeUpdate(const FieldsChangeUpdate& from);
  FieldsChangeUpdate(FieldsChangeUpdate&& from) noexcept
    : FieldsChangeUpdate() {
    *this = ::std::move(from);
  }

  inline FieldsChangeUpdate& operator=(const FieldsChangeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldsChangeUpdate& operator=(FieldsChangeUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldsChangeUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldsChangeUpdate* internal_default_instance() {
    return reinterpret_cast<const FieldsChangeUpdate*>(
               &_FieldsChangeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldsChangeUpdate& a, FieldsChangeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldsChangeUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldsChangeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldsChangeUpdate* New() const final {
    return new FieldsChangeUpdate();
  }

  FieldsChangeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldsChangeUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldsChangeUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldsChangeUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldsChangeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FieldsChangeUpdate";
  }
  protected:
  explicit FieldsChangeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFieldNumber = 1,
    kUpdatedFieldNumber = 2,
    kRemovedFieldNumber = 3,
  };
  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo created = 1;
  int created_size() const;
  private:
  int _internal_created_size() const;
  public:
  void clear_created();
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_created(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_created();
  private:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& _internal_created(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _internal_add_created();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& created(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_created();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      created() const;

  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo updated = 2;
  int updated_size() const;
  private:
  int _internal_updated_size() const;
  public:
  void clear_updated();
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_updated(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_updated();
  private:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& _internal_updated(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _internal_add_updated();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& updated(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_updated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      updated() const;

  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo removed = 3;
  int removed_size() const;
  private:
  int _internal_removed_size() const;
  public:
  void clear_removed();
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_removed();
  private:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& _internal_removed(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _internal_add_removed();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& removed(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      removed() const;

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > created_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > updated_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > removed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class FieldInfo_FieldType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType) */ {
 public:
  inline FieldInfo_FieldType() : FieldInfo_FieldType(nullptr) {}
  ~FieldInfo_FieldType() override;
  explicit constexpr FieldInfo_FieldType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldInfo_FieldType(const FieldInfo_FieldType& from);
  FieldInfo_FieldType(FieldInfo_FieldType&& from) noexcept
    : FieldInfo_FieldType() {
    *this = ::std::move(from);
  }

  inline FieldInfo_FieldType& operator=(const FieldInfo_FieldType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo_FieldType& operator=(FieldInfo_FieldType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldInfo_FieldType& default_instance() {
    return *internal_default_instance();
  }
  enum FieldCase {
    kCustom = 1,
    kTable = 2,
    kFigure = 5,
    FIELD_NOT_SET = 0,
  };

  static inline const FieldInfo_FieldType* internal_default_instance() {
    return reinterpret_cast<const FieldInfo_FieldType*>(
               &_FieldInfo_FieldType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldInfo_FieldType& a, FieldInfo_FieldType& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfo_FieldType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldInfo_FieldType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldInfo_FieldType* New() const final {
    return new FieldInfo_FieldType();
  }

  FieldInfo_FieldType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldInfo_FieldType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldInfo_FieldType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldInfo_FieldType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfo_FieldType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FieldInfo.FieldType";
  }
  protected:
  explicit FieldInfo_FieldType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFieldNumber = 1,
    kTableFieldNumber = 2,
    kFigureFieldNumber = 5,
  };
  // .io.deephaven.proto.backplane.grpc.CustomInfo custom = 1;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::io::deephaven::proto::backplane::grpc::CustomInfo& custom() const;
  PROTOBUF_MUST_USE_RESULT ::io::deephaven::proto::backplane::grpc::CustomInfo* release_custom();
  ::io::deephaven::proto::backplane::grpc::CustomInfo* mutable_custom();
  void set_allocated_custom(::io::deephaven::proto::backplane::grpc::CustomInfo* custom);
  private:
  const ::io::deephaven::proto::backplane::grpc::CustomInfo& _internal_custom() const;
  ::io::deephaven::proto::backplane::grpc::CustomInfo* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::io::deephaven::proto::backplane::grpc::CustomInfo* custom);
  ::io::deephaven::proto::backplane::grpc::CustomInfo* unsafe_arena_release_custom();

  // .io.deephaven.proto.backplane.grpc.TableInfo table = 2;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::io::deephaven::proto::backplane::grpc::TableInfo& table() const;
  PROTOBUF_MUST_USE_RESULT ::io::deephaven::proto::backplane::grpc::TableInfo* release_table();
  ::io::deephaven::proto::backplane::grpc::TableInfo* mutable_table();
  void set_allocated_table(::io::deephaven::proto::backplane::grpc::TableInfo* table);
  private:
  const ::io::deephaven::proto::backplane::grpc::TableInfo& _internal_table() const;
  ::io::deephaven::proto::backplane::grpc::TableInfo* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::io::deephaven::proto::backplane::grpc::TableInfo* table);
  ::io::deephaven::proto::backplane::grpc::TableInfo* unsafe_arena_release_table();

  // .io.deephaven.proto.backplane.grpc.FigureInfo figure = 5;
  bool has_figure() const;
  private:
  bool _internal_has_figure() const;
  public:
  void clear_figure();
  const ::io::deephaven::proto::backplane::grpc::FigureInfo& figure() const;
  PROTOBUF_MUST_USE_RESULT ::io::deephaven::proto::backplane::grpc::FigureInfo* release_figure();
  ::io::deephaven::proto::backplane::grpc::FigureInfo* mutable_figure();
  void set_allocated_figure(::io::deephaven::proto::backplane::grpc::FigureInfo* figure);
  private:
  const ::io::deephaven::proto::backplane::grpc::FigureInfo& _internal_figure() const;
  ::io::deephaven::proto::backplane::grpc::FigureInfo* _internal_mutable_figure();
  public:
  void unsafe_arena_set_allocated_figure(
      ::io::deephaven::proto::backplane::grpc::FigureInfo* figure);
  ::io::deephaven::proto::backplane::grpc::FigureInfo* unsafe_arena_release_figure();

  void clear_field();
  FieldCase field_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType)
 private:
  class _Internal;
  void set_has_custom();
  void set_has_table();
  void set_has_figure();

  inline bool has_field() const;
  inline void clear_has_field();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FieldUnion {
    constexpr FieldUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::deephaven::proto::backplane::grpc::CustomInfo* custom_;
    ::io::deephaven::proto::backplane::grpc::TableInfo* table_;
    ::io::deephaven::proto::backplane::grpc::FigureInfo* figure_;
  } field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class FieldInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FieldInfo) */ {
 public:
  inline FieldInfo() : FieldInfo(nullptr) {}
  ~FieldInfo() override;
  explicit constexpr FieldInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldInfo(const FieldInfo& from);
  FieldInfo(FieldInfo&& from) noexcept
    : FieldInfo() {
    *this = ::std::move(from);
  }

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo& operator=(FieldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldInfo* internal_default_instance() {
    return reinterpret_cast<const FieldInfo*>(
               &_FieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldInfo& a, FieldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldInfo* New() const final {
    return new FieldInfo();
  }

  FieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FieldInfo";
  }
  protected:
  explicit FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FieldInfo_FieldType FieldType;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 2,
    kFieldDescriptionFieldNumber = 4,
    kApplicationNameFieldNumber = 5,
    kApplicationIdFieldNumber = 6,
    kTicketFieldNumber = 1,
    kFieldTypeFieldNumber = 3,
  };
  // string field_name = 2;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string field_description = 4;
  void clear_field_description();
  const std::string& field_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_field_description();
  void set_allocated_field_description(std::string* field_description);
  private:
  const std::string& _internal_field_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_description(const std::string& value);
  std::string* _internal_mutable_field_description();
  public:

  // string application_name = 5;
  void clear_application_name();
  const std::string& application_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_name();
  void set_allocated_application_name(std::string* application_name);
  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(const std::string& value);
  std::string* _internal_mutable_application_name();
  public:

  // string application_id = 6;
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::io::deephaven::proto::backplane::grpc::Ticket& ticket() const;
  PROTOBUF_MUST_USE_RESULT ::io::deephaven::proto::backplane::grpc::Ticket* release_ticket();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_ticket();
  void set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* ticket);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_ticket() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_ticket();
  public:
  void unsafe_arena_set_allocated_ticket(
      ::io::deephaven::proto::backplane::grpc::Ticket* ticket);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_ticket();

  // .io.deephaven.proto.backplane.grpc.FieldInfo.FieldType field_type = 3;
  bool has_field_type() const;
  private:
  bool _internal_has_field_type() const;
  public:
  void clear_field_type();
  const ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType& field_type() const;
  PROTOBUF_MUST_USE_RESULT ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* release_field_type();
  ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* mutable_field_type();
  void set_allocated_field_type(::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* field_type);
  private:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType& _internal_field_type() const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* _internal_mutable_field_type();
  public:
  void unsafe_arena_set_allocated_field_type(
      ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* field_type);
  ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* unsafe_arena_release_field_type();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FieldInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::io::deephaven::proto::backplane::grpc::Ticket* ticket_;
  ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* field_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class RemovedField final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.RemovedField) */ {
 public:
  inline RemovedField() : RemovedField(nullptr) {}
  explicit constexpr RemovedField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemovedField(const RemovedField& from);
  RemovedField(RemovedField&& from) noexcept
    : RemovedField() {
    *this = ::std::move(from);
  }

  inline RemovedField& operator=(const RemovedField& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovedField& operator=(RemovedField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemovedField& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemovedField* internal_default_instance() {
    return reinterpret_cast<const RemovedField*>(
               &_RemovedField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemovedField& a, RemovedField& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovedField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovedField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovedField* New() const final {
    return new RemovedField();
  }

  RemovedField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovedField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemovedField& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemovedField& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.RemovedField";
  }
  protected:
  explicit RemovedField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.RemovedField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class CustomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.CustomInfo) */ {
 public:
  inline CustomInfo() : CustomInfo(nullptr) {}
  ~CustomInfo() override;
  explicit constexpr CustomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomInfo(const CustomInfo& from);
  CustomInfo(CustomInfo&& from) noexcept
    : CustomInfo() {
    *this = ::std::move(from);
  }

  inline CustomInfo& operator=(const CustomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomInfo& operator=(CustomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomInfo* internal_default_instance() {
    return reinterpret_cast<const CustomInfo*>(
               &_CustomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CustomInfo& a, CustomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomInfo* New() const final {
    return new CustomInfo();
  }

  CustomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CustomInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.CustomInfo";
  }
  protected:
  explicit CustomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.CustomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class TableInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TableInfo) */ {
 public:
  inline TableInfo() : TableInfo(nullptr) {}
  ~TableInfo() override;
  explicit constexpr TableInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInfo(const TableInfo& from);
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableInfo* New() const final {
    return new TableInfo();
  }

  TableInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TableInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TableInfo";
  }
  protected:
  explicit TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaHeaderFieldNumber = 1,
    kSizeFieldNumber = 3,
    kIsStaticFieldNumber = 2,
  };
  // bytes schema_header = 1;
  void clear_schema_header();
  const std::string& schema_header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_header();
  PROTOBUF_MUST_USE_RESULT std::string* release_schema_header();
  void set_allocated_schema_header(std::string* schema_header);
  private:
  const std::string& _internal_schema_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_header(const std::string& value);
  std::string* _internal_mutable_schema_header();
  public:

  // sint64 size = 3 [jstype = JS_STRING];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_static = 2;
  void clear_is_static();
  bool is_static() const;
  void set_is_static(bool value);
  private:
  bool _internal_is_static() const;
  void _internal_set_is_static(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TableInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_header_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  bool is_static_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class FigureInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FigureInfo) */ {
 public:
  inline FigureInfo() : FigureInfo(nullptr) {}
  explicit constexpr FigureInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FigureInfo(const FigureInfo& from);
  FigureInfo(FigureInfo&& from) noexcept
    : FigureInfo() {
    *this = ::std::move(from);
  }

  inline FigureInfo& operator=(const FigureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FigureInfo& operator=(FigureInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FigureInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FigureInfo* internal_default_instance() {
    return reinterpret_cast<const FigureInfo*>(
               &_FigureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FigureInfo& a, FigureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FigureInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FigureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FigureInfo* New() const final {
    return new FigureInfo();
  }

  FigureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FigureInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FigureInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FigureInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FigureInfo";
  }
  protected:
  explicit FigureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FigureInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListFieldsRequest

// -------------------------------------------------------------------

// FieldsChangeUpdate

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo created = 1;
inline int FieldsChangeUpdate::_internal_created_size() const {
  return created_.size();
}
inline int FieldsChangeUpdate::created_size() const {
  return _internal_created_size();
}
inline void FieldsChangeUpdate::clear_created() {
  created_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_created(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return created_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
FieldsChangeUpdate::mutable_created() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return &created_;
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::_internal_created(int index) const {
  return created_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::created(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _internal_created(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::_internal_add_created() {
  return created_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_created() {
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_add_created();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
FieldsChangeUpdate::created() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return created_;
}

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo updated = 2;
inline int FieldsChangeUpdate::_internal_updated_size() const {
  return updated_.size();
}
inline int FieldsChangeUpdate::updated_size() const {
  return _internal_updated_size();
}
inline void FieldsChangeUpdate::clear_updated() {
  updated_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_updated(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return updated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
FieldsChangeUpdate::mutable_updated() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return &updated_;
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::_internal_updated(int index) const {
  return updated_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::updated(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _internal_updated(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::_internal_add_updated() {
  return updated_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_updated() {
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_add_updated();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
FieldsChangeUpdate::updated() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return updated_;
}

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo removed = 3;
inline int FieldsChangeUpdate::_internal_removed_size() const {
  return removed_.size();
}
inline int FieldsChangeUpdate::removed_size() const {
  return _internal_removed_size();
}
inline void FieldsChangeUpdate::clear_removed() {
  removed_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_removed(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return removed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
FieldsChangeUpdate::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return &removed_;
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::_internal_removed(int index) const {
  return removed_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::removed(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _internal_removed(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::_internal_add_removed() {
  return removed_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_removed() {
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_add_removed();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
FieldsChangeUpdate::removed() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return removed_;
}

// -------------------------------------------------------------------

// FieldInfo_FieldType

// .io.deephaven.proto.backplane.grpc.CustomInfo custom = 1;
inline bool FieldInfo_FieldType::_internal_has_custom() const {
  return field_case() == kCustom;
}
inline bool FieldInfo_FieldType::has_custom() const {
  return _internal_has_custom();
}
inline void FieldInfo_FieldType::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void FieldInfo_FieldType::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete field_.custom_;
    }
    clear_has_field();
  }
}
inline ::io::deephaven::proto::backplane::grpc::CustomInfo* FieldInfo_FieldType::release_custom() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.custom)
  if (_internal_has_custom()) {
    clear_has_field();
      ::io::deephaven::proto::backplane::grpc::CustomInfo* temp = field_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    field_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::CustomInfo& FieldInfo_FieldType::_internal_custom() const {
  return _internal_has_custom()
      ? *field_.custom_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::CustomInfo&>(::io::deephaven::proto::backplane::grpc::_CustomInfo_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::CustomInfo& FieldInfo_FieldType::custom() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.custom)
  return _internal_custom();
}
inline ::io::deephaven::proto::backplane::grpc::CustomInfo* FieldInfo_FieldType::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.custom)
  if (_internal_has_custom()) {
    clear_has_field();
    ::io::deephaven::proto::backplane::grpc::CustomInfo* temp = field_.custom_;
    field_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldInfo_FieldType::unsafe_arena_set_allocated_custom(::io::deephaven::proto::backplane::grpc::CustomInfo* custom) {
  clear_field();
  if (custom) {
    set_has_custom();
    field_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.custom)
}
inline ::io::deephaven::proto::backplane::grpc::CustomInfo* FieldInfo_FieldType::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_field();
    set_has_custom();
    field_.custom_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CustomInfo >(GetArenaForAllocation());
  }
  return field_.custom_;
}
inline ::io::deephaven::proto::backplane::grpc::CustomInfo* FieldInfo_FieldType::mutable_custom() {
  ::io::deephaven::proto::backplane::grpc::CustomInfo* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.custom)
  return _msg;
}

// .io.deephaven.proto.backplane.grpc.TableInfo table = 2;
inline bool FieldInfo_FieldType::_internal_has_table() const {
  return field_case() == kTable;
}
inline bool FieldInfo_FieldType::has_table() const {
  return _internal_has_table();
}
inline void FieldInfo_FieldType::set_has_table() {
  _oneof_case_[0] = kTable;
}
inline void FieldInfo_FieldType::clear_table() {
  if (_internal_has_table()) {
    if (GetArenaForAllocation() == nullptr) {
      delete field_.table_;
    }
    clear_has_field();
  }
}
inline ::io::deephaven::proto::backplane::grpc::TableInfo* FieldInfo_FieldType::release_table() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.table)
  if (_internal_has_table()) {
    clear_has_field();
      ::io::deephaven::proto::backplane::grpc::TableInfo* temp = field_.table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    field_.table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::TableInfo& FieldInfo_FieldType::_internal_table() const {
  return _internal_has_table()
      ? *field_.table_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::TableInfo&>(::io::deephaven::proto::backplane::grpc::_TableInfo_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TableInfo& FieldInfo_FieldType::table() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.table)
  return _internal_table();
}
inline ::io::deephaven::proto::backplane::grpc::TableInfo* FieldInfo_FieldType::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.table)
  if (_internal_has_table()) {
    clear_has_field();
    ::io::deephaven::proto::backplane::grpc::TableInfo* temp = field_.table_;
    field_.table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldInfo_FieldType::unsafe_arena_set_allocated_table(::io::deephaven::proto::backplane::grpc::TableInfo* table) {
  clear_field();
  if (table) {
    set_has_table();
    field_.table_ = table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.table)
}
inline ::io::deephaven::proto::backplane::grpc::TableInfo* FieldInfo_FieldType::_internal_mutable_table() {
  if (!_internal_has_table()) {
    clear_field();
    set_has_table();
    field_.table_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TableInfo >(GetArenaForAllocation());
  }
  return field_.table_;
}
inline ::io::deephaven::proto::backplane::grpc::TableInfo* FieldInfo_FieldType::mutable_table() {
  ::io::deephaven::proto::backplane::grpc::TableInfo* _msg = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.table)
  return _msg;
}

// .io.deephaven.proto.backplane.grpc.FigureInfo figure = 5;
inline bool FieldInfo_FieldType::_internal_has_figure() const {
  return field_case() == kFigure;
}
inline bool FieldInfo_FieldType::has_figure() const {
  return _internal_has_figure();
}
inline void FieldInfo_FieldType::set_has_figure() {
  _oneof_case_[0] = kFigure;
}
inline void FieldInfo_FieldType::clear_figure() {
  if (_internal_has_figure()) {
    if (GetArenaForAllocation() == nullptr) {
      delete field_.figure_;
    }
    clear_has_field();
  }
}
inline ::io::deephaven::proto::backplane::grpc::FigureInfo* FieldInfo_FieldType::release_figure() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.figure)
  if (_internal_has_figure()) {
    clear_has_field();
      ::io::deephaven::proto::backplane::grpc::FigureInfo* temp = field_.figure_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    field_.figure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::FigureInfo& FieldInfo_FieldType::_internal_figure() const {
  return _internal_has_figure()
      ? *field_.figure_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::FigureInfo&>(::io::deephaven::proto::backplane::grpc::_FigureInfo_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::FigureInfo& FieldInfo_FieldType::figure() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.figure)
  return _internal_figure();
}
inline ::io::deephaven::proto::backplane::grpc::FigureInfo* FieldInfo_FieldType::unsafe_arena_release_figure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.figure)
  if (_internal_has_figure()) {
    clear_has_field();
    ::io::deephaven::proto::backplane::grpc::FigureInfo* temp = field_.figure_;
    field_.figure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldInfo_FieldType::unsafe_arena_set_allocated_figure(::io::deephaven::proto::backplane::grpc::FigureInfo* figure) {
  clear_field();
  if (figure) {
    set_has_figure();
    field_.figure_ = figure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.figure)
}
inline ::io::deephaven::proto::backplane::grpc::FigureInfo* FieldInfo_FieldType::_internal_mutable_figure() {
  if (!_internal_has_figure()) {
    clear_field();
    set_has_figure();
    field_.figure_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FigureInfo >(GetArenaForAllocation());
  }
  return field_.figure_;
}
inline ::io::deephaven::proto::backplane::grpc::FigureInfo* FieldInfo_FieldType::mutable_figure() {
  ::io::deephaven::proto::backplane::grpc::FigureInfo* _msg = _internal_mutable_figure();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.FieldType.figure)
  return _msg;
}

inline bool FieldInfo_FieldType::has_field() const {
  return field_case() != FIELD_NOT_SET;
}
inline void FieldInfo_FieldType::clear_has_field() {
  _oneof_case_[0] = FIELD_NOT_SET;
}
inline FieldInfo_FieldType::FieldCase FieldInfo_FieldType::field_case() const {
  return FieldInfo_FieldType::FieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FieldInfo

// .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
inline bool FieldInfo::_internal_has_ticket() const {
  return this != internal_default_instance() && ticket_ != nullptr;
}
inline bool FieldInfo::has_ticket() const {
  return _internal_has_ticket();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& FieldInfo::_internal_ticket() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& FieldInfo::ticket() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.ticket)
  return _internal_ticket();
}
inline void FieldInfo::unsafe_arena_set_allocated_ticket(
    ::io::deephaven::proto::backplane::grpc::Ticket* ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  ticket_ = ticket;
  if (ticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.ticket)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* FieldInfo::release_ticket() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = ticket_;
  ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* FieldInfo::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.ticket)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* FieldInfo::_internal_mutable_ticket() {
  
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    ticket_ = p;
  }
  return ticket_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* FieldInfo::mutable_ticket() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.ticket)
  return _msg;
}
inline void FieldInfo::set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket));
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    
  } else {
    
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.ticket)
}

// string field_name = 2;
inline void FieldInfo::clear_field_name() {
  field_name_.ClearToEmpty();
}
inline const std::string& FieldInfo::field_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
}
inline std::string* FieldInfo::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return _s;
}
inline const std::string& FieldInfo::_internal_field_name() const {
  return field_name_.Get();
}
inline void FieldInfo::_internal_set_field_name(const std::string& value) {
  
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_field_name() {
  
  return field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_field_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return field_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
}

// .io.deephaven.proto.backplane.grpc.FieldInfo.FieldType field_type = 3;
inline bool FieldInfo::_internal_has_field_type() const {
  return this != internal_default_instance() && field_type_ != nullptr;
}
inline bool FieldInfo::has_field_type() const {
  return _internal_has_field_type();
}
inline void FieldInfo::clear_field_type() {
  if (GetArenaForAllocation() == nullptr && field_type_ != nullptr) {
    delete field_type_;
  }
  field_type_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType& FieldInfo::_internal_field_type() const {
  const ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* p = field_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType&>(
      ::io::deephaven::proto::backplane::grpc::_FieldInfo_FieldType_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType& FieldInfo::field_type() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.field_type)
  return _internal_field_type();
}
inline void FieldInfo::unsafe_arena_set_allocated_field_type(
    ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* field_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_type_);
  }
  field_type_ = field_type;
  if (field_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_type)
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* FieldInfo::release_field_type() {
  
  ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* temp = field_type_;
  field_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* FieldInfo::unsafe_arena_release_field_type() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.field_type)
  
  ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* temp = field_type_;
  field_type_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* FieldInfo::_internal_mutable_field_type() {
  
  if (field_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType>(GetArenaForAllocation());
    field_type_ = p;
  }
  return field_type_;
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* FieldInfo::mutable_field_type() {
  ::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* _msg = _internal_mutable_field_type();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.field_type)
  return _msg;
}
inline void FieldInfo::set_allocated_field_type(::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType* field_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete field_type_;
  }
  if (field_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::io::deephaven::proto::backplane::grpc::FieldInfo_FieldType>::GetOwningArena(field_type);
    if (message_arena != submessage_arena) {
      field_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_type, submessage_arena);
    }
    
  } else {
    
  }
  field_type_ = field_type;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_type)
}

// string field_description = 4;
inline void FieldInfo::clear_field_description() {
  field_description_.ClearToEmpty();
}
inline const std::string& FieldInfo::field_description() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return _internal_field_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_field_description(ArgT0&& arg0, ArgT... args) {
 
 field_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
}
inline std::string* FieldInfo::mutable_field_description() {
  std::string* _s = _internal_mutable_field_description();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return _s;
}
inline const std::string& FieldInfo::_internal_field_description() const {
  return field_description_.Get();
}
inline void FieldInfo::_internal_set_field_description(const std::string& value) {
  
  field_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_field_description() {
  
  return field_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_field_description() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return field_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_field_description(std::string* field_description) {
  if (field_description != nullptr) {
    
  } else {
    
  }
  field_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
}

// string application_name = 5;
inline void FieldInfo::clear_application_name() {
  application_name_.ClearToEmpty();
}
inline const std::string& FieldInfo::application_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return _internal_application_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_application_name(ArgT0&& arg0, ArgT... args) {
 
 application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
}
inline std::string* FieldInfo::mutable_application_name() {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return _s;
}
inline const std::string& FieldInfo::_internal_application_name() const {
  return application_name_.Get();
}
inline void FieldInfo::_internal_set_application_name(const std::string& value) {
  
  application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_application_name() {
  
  return application_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_application_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return application_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_application_name(std::string* application_name) {
  if (application_name != nullptr) {
    
  } else {
    
  }
  application_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
}

// string application_id = 6;
inline void FieldInfo::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& FieldInfo::application_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
}
inline std::string* FieldInfo::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return _s;
}
inline const std::string& FieldInfo::_internal_application_id() const {
  return application_id_.Get();
}
inline void FieldInfo::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_application_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
}

// -------------------------------------------------------------------

// RemovedField

// -------------------------------------------------------------------

// CustomInfo

// string type = 1;
inline void CustomInfo::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& CustomInfo::type() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.CustomInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomInfo::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.CustomInfo.type)
}
inline std::string* CustomInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.CustomInfo.type)
  return _s;
}
inline const std::string& CustomInfo::_internal_type() const {
  return type_.Get();
}
inline void CustomInfo::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CustomInfo::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CustomInfo::release_type() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.CustomInfo.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CustomInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CustomInfo.type)
}

// -------------------------------------------------------------------

// TableInfo

// bytes schema_header = 1;
inline void TableInfo::clear_schema_header() {
  schema_header_.ClearToEmpty();
}
inline const std::string& TableInfo::schema_header() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TableInfo.schema_header)
  return _internal_schema_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableInfo::set_schema_header(ArgT0&& arg0, ArgT... args) {
 
 schema_header_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TableInfo.schema_header)
}
inline std::string* TableInfo::mutable_schema_header() {
  std::string* _s = _internal_mutable_schema_header();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TableInfo.schema_header)
  return _s;
}
inline const std::string& TableInfo::_internal_schema_header() const {
  return schema_header_.Get();
}
inline void TableInfo::_internal_set_schema_header(const std::string& value) {
  
  schema_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TableInfo::_internal_mutable_schema_header() {
  
  return schema_header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TableInfo::release_schema_header() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TableInfo.schema_header)
  return schema_header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TableInfo::set_allocated_schema_header(std::string* schema_header) {
  if (schema_header != nullptr) {
    
  } else {
    
  }
  schema_header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_header,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TableInfo.schema_header)
}

// bool is_static = 2;
inline void TableInfo::clear_is_static() {
  is_static_ = false;
}
inline bool TableInfo::_internal_is_static() const {
  return is_static_;
}
inline bool TableInfo::is_static() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TableInfo.is_static)
  return _internal_is_static();
}
inline void TableInfo::_internal_set_is_static(bool value) {
  
  is_static_ = value;
}
inline void TableInfo::set_is_static(bool value) {
  _internal_set_is_static(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TableInfo.is_static)
}

// sint64 size = 3 [jstype = JS_STRING];
inline void TableInfo::clear_size() {
  size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::size() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TableInfo.size)
  return _internal_size();
}
inline void TableInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void TableInfo::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TableInfo.size)
}

// -------------------------------------------------------------------

// FigureInfo

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto
