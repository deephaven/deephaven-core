// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/application.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fapplication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fapplication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2fapplication_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class FieldInfo;
struct FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
class FieldsChangeUpdate;
struct FieldsChangeUpdateDefaultTypeInternal;
extern FieldsChangeUpdateDefaultTypeInternal _FieldsChangeUpdate_default_instance_;
class ListFieldsRequest;
struct ListFieldsRequestDefaultTypeInternal;
extern ListFieldsRequestDefaultTypeInternal _ListFieldsRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::FieldInfo* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FieldInfo>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ListFieldsRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ListFieldsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class ListFieldsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ListFieldsRequest) */ {
 public:
  inline ListFieldsRequest() : ListFieldsRequest(nullptr) {}
  explicit constexpr ListFieldsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFieldsRequest(const ListFieldsRequest& from);
  ListFieldsRequest(ListFieldsRequest&& from) noexcept
    : ListFieldsRequest() {
    *this = ::std::move(from);
  }

  inline ListFieldsRequest& operator=(const ListFieldsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldsRequest& operator=(ListFieldsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFieldsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFieldsRequest*>(
               &_ListFieldsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListFieldsRequest& a, ListFieldsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFieldsRequest* New() const final {
    return new ListFieldsRequest();
  }

  ListFieldsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFieldsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListFieldsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListFieldsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ListFieldsRequest";
  }
  protected:
  explicit ListFieldsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ListFieldsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class FieldsChangeUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate) */ {
 public:
  inline FieldsChangeUpdate() : FieldsChangeUpdate(nullptr) {}
  ~FieldsChangeUpdate() override;
  explicit constexpr FieldsChangeUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldsChangeUpdate(const FieldsChangeUpdate& from);
  FieldsChangeUpdate(FieldsChangeUpdate&& from) noexcept
    : FieldsChangeUpdate() {
    *this = ::std::move(from);
  }

  inline FieldsChangeUpdate& operator=(const FieldsChangeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldsChangeUpdate& operator=(FieldsChangeUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldsChangeUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldsChangeUpdate* internal_default_instance() {
    return reinterpret_cast<const FieldsChangeUpdate*>(
               &_FieldsChangeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldsChangeUpdate& a, FieldsChangeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldsChangeUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldsChangeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldsChangeUpdate* New() const final {
    return new FieldsChangeUpdate();
  }

  FieldsChangeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldsChangeUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldsChangeUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldsChangeUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldsChangeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FieldsChangeUpdate";
  }
  protected:
  explicit FieldsChangeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFieldNumber = 1,
    kUpdatedFieldNumber = 2,
    kRemovedFieldNumber = 3,
  };
  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo created = 1;
  int created_size() const;
  private:
  int _internal_created_size() const;
  public:
  void clear_created();
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_created(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_created();
  private:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& _internal_created(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _internal_add_created();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& created(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_created();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      created() const;

  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo updated = 2;
  int updated_size() const;
  private:
  int _internal_updated_size() const;
  public:
  void clear_updated();
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_updated(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_updated();
  private:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& _internal_updated(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _internal_add_updated();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& updated(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_updated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      updated() const;

  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo removed = 3;
  int removed_size() const;
  private:
  int _internal_removed_size() const;
  public:
  void clear_removed();
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_removed();
  private:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& _internal_removed(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _internal_add_removed();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& removed(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      removed() const;

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > created_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > updated_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > removed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// -------------------------------------------------------------------

class FieldInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FieldInfo) */ {
 public:
  inline FieldInfo() : FieldInfo(nullptr) {}
  ~FieldInfo() override;
  explicit constexpr FieldInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldInfo(const FieldInfo& from);
  FieldInfo(FieldInfo&& from) noexcept
    : FieldInfo() {
    *this = ::std::move(from);
  }

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo& operator=(FieldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldInfo* internal_default_instance() {
    return reinterpret_cast<const FieldInfo*>(
               &_FieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldInfo& a, FieldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldInfo* New() const final {
    return new FieldInfo();
  }

  FieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FieldInfo";
  }
  protected:
  explicit FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 2,
    kFieldDescriptionFieldNumber = 3,
    kApplicationNameFieldNumber = 4,
    kApplicationIdFieldNumber = 5,
    kTypedTicketFieldNumber = 1,
  };
  // string field_name = 2;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // string field_description = 3;
  void clear_field_description();
  const std::string& field_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_field_description();
  void set_allocated_field_description(std::string* field_description);
  private:
  const std::string& _internal_field_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_description(const std::string& value);
  std::string* _internal_mutable_field_description();
  public:

  // string application_name = 4;
  void clear_application_name();
  const std::string& application_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_name();
  void set_allocated_application_name(std::string* application_name);
  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(const std::string& value);
  std::string* _internal_mutable_application_name();
  public:

  // string application_id = 5;
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // .io.deephaven.proto.backplane.grpc.TypedTicket typed_ticket = 1;
  bool has_typed_ticket() const;
  private:
  bool _internal_has_typed_ticket() const;
  public:
  void clear_typed_ticket();
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& typed_ticket() const;
  PROTOBUF_MUST_USE_RESULT ::io::deephaven::proto::backplane::grpc::TypedTicket* release_typed_ticket();
  ::io::deephaven::proto::backplane::grpc::TypedTicket* mutable_typed_ticket();
  void set_allocated_typed_ticket(::io::deephaven::proto::backplane::grpc::TypedTicket* typed_ticket);
  private:
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& _internal_typed_ticket() const;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _internal_mutable_typed_ticket();
  public:
  void unsafe_arena_set_allocated_typed_ticket(
      ::io::deephaven::proto::backplane::grpc::TypedTicket* typed_ticket);
  ::io::deephaven::proto::backplane::grpc::TypedTicket* unsafe_arena_release_typed_ticket();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FieldInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* typed_ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListFieldsRequest

// -------------------------------------------------------------------

// FieldsChangeUpdate

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo created = 1;
inline int FieldsChangeUpdate::_internal_created_size() const {
  return created_.size();
}
inline int FieldsChangeUpdate::created_size() const {
  return _internal_created_size();
}
inline void FieldsChangeUpdate::clear_created() {
  created_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_created(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return created_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
FieldsChangeUpdate::mutable_created() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return &created_;
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::_internal_created(int index) const {
  return created_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::created(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _internal_created(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::_internal_add_created() {
  return created_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_created() {
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_add_created();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
FieldsChangeUpdate::created() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return created_;
}

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo updated = 2;
inline int FieldsChangeUpdate::_internal_updated_size() const {
  return updated_.size();
}
inline int FieldsChangeUpdate::updated_size() const {
  return _internal_updated_size();
}
inline void FieldsChangeUpdate::clear_updated() {
  updated_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_updated(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return updated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
FieldsChangeUpdate::mutable_updated() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return &updated_;
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::_internal_updated(int index) const {
  return updated_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::updated(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _internal_updated(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::_internal_add_updated() {
  return updated_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_updated() {
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_add_updated();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
FieldsChangeUpdate::updated() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return updated_;
}

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo removed = 3;
inline int FieldsChangeUpdate::_internal_removed_size() const {
  return removed_.size();
}
inline int FieldsChangeUpdate::removed_size() const {
  return _internal_removed_size();
}
inline void FieldsChangeUpdate::clear_removed() {
  removed_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_removed(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return removed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
FieldsChangeUpdate::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return &removed_;
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::_internal_removed(int index) const {
  return removed_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::removed(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _internal_removed(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::_internal_add_removed() {
  return removed_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_removed() {
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_add_removed();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
FieldsChangeUpdate::removed() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return removed_;
}

// -------------------------------------------------------------------

// FieldInfo

// .io.deephaven.proto.backplane.grpc.TypedTicket typed_ticket = 1;
inline bool FieldInfo::_internal_has_typed_ticket() const {
  return this != internal_default_instance() && typed_ticket_ != nullptr;
}
inline bool FieldInfo::has_typed_ticket() const {
  return _internal_has_typed_ticket();
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& FieldInfo::_internal_typed_ticket() const {
  const ::io::deephaven::proto::backplane::grpc::TypedTicket* p = typed_ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TypedTicket&>(
      ::io::deephaven::proto::backplane::grpc::_TypedTicket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& FieldInfo::typed_ticket() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
  return _internal_typed_ticket();
}
inline void FieldInfo::unsafe_arena_set_allocated_typed_ticket(
    ::io::deephaven::proto::backplane::grpc::TypedTicket* typed_ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(typed_ticket_);
  }
  typed_ticket_ = typed_ticket;
  if (typed_ticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::release_typed_ticket() {
  
  ::io::deephaven::proto::backplane::grpc::TypedTicket* temp = typed_ticket_;
  typed_ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::unsafe_arena_release_typed_ticket() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
  
  ::io::deephaven::proto::backplane::grpc::TypedTicket* temp = typed_ticket_;
  typed_ticket_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::_internal_mutable_typed_ticket() {
  
  if (typed_ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TypedTicket>(GetArenaForAllocation());
    typed_ticket_ = p;
  }
  return typed_ticket_;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::mutable_typed_ticket() {
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _msg = _internal_mutable_typed_ticket();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
  return _msg;
}
inline void FieldInfo::set_allocated_typed_ticket(::io::deephaven::proto::backplane::grpc::TypedTicket* typed_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(typed_ticket_);
  }
  if (typed_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(typed_ticket));
    if (message_arena != submessage_arena) {
      typed_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typed_ticket, submessage_arena);
    }
    
  } else {
    
  }
  typed_ticket_ = typed_ticket;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
}

// string field_name = 2;
inline void FieldInfo::clear_field_name() {
  field_name_.ClearToEmpty();
}
inline const std::string& FieldInfo::field_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
}
inline std::string* FieldInfo::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return _s;
}
inline const std::string& FieldInfo::_internal_field_name() const {
  return field_name_.Get();
}
inline void FieldInfo::_internal_set_field_name(const std::string& value) {
  
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_field_name() {
  
  return field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_field_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return field_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
}

// string field_description = 3;
inline void FieldInfo::clear_field_description() {
  field_description_.ClearToEmpty();
}
inline const std::string& FieldInfo::field_description() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return _internal_field_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_field_description(ArgT0&& arg0, ArgT... args) {
 
 field_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
}
inline std::string* FieldInfo::mutable_field_description() {
  std::string* _s = _internal_mutable_field_description();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return _s;
}
inline const std::string& FieldInfo::_internal_field_description() const {
  return field_description_.Get();
}
inline void FieldInfo::_internal_set_field_description(const std::string& value) {
  
  field_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_field_description() {
  
  return field_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_field_description() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return field_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_field_description(std::string* field_description) {
  if (field_description != nullptr) {
    
  } else {
    
  }
  field_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
}

// string application_name = 4;
inline void FieldInfo::clear_application_name() {
  application_name_.ClearToEmpty();
}
inline const std::string& FieldInfo::application_name() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return _internal_application_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_application_name(ArgT0&& arg0, ArgT... args) {
 
 application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
}
inline std::string* FieldInfo::mutable_application_name() {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return _s;
}
inline const std::string& FieldInfo::_internal_application_name() const {
  return application_name_.Get();
}
inline void FieldInfo::_internal_set_application_name(const std::string& value) {
  
  application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_application_name() {
  
  return application_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_application_name() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return application_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_application_name(std::string* application_name) {
  if (application_name != nullptr) {
    
  } else {
    
  }
  application_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
}

// string application_id = 5;
inline void FieldInfo::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& FieldInfo::application_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldInfo::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
}
inline std::string* FieldInfo::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return _s;
}
inline const std::string& FieldInfo::_internal_application_id() const {
  return application_id_.Get();
}
inline void FieldInfo::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldInfo::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldInfo::release_application_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldInfo::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto
