// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/hierarchicaltable.proto

#include "deephaven/proto/hierarchicaltable.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
PROTOBUF_CONSTEXPR RollupRequest::RollupRequest(
    ::_pbi::ConstantInitialized)
  : aggregations_()
  , group_by_columns_()
  , result_rollup_table_id_(nullptr)
  , source_table_id_(nullptr)
  , include_constituents_(false){}
struct RollupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollupRequestDefaultTypeInternal() {}
  union {
    RollupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollupRequestDefaultTypeInternal _RollupRequest_default_instance_;
PROTOBUF_CONSTEXPR RollupResponse::RollupResponse(
    ::_pbi::ConstantInitialized){}
struct RollupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollupResponseDefaultTypeInternal() {}
  union {
    RollupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollupResponseDefaultTypeInternal _RollupResponse_default_instance_;
PROTOBUF_CONSTEXPR TreeRequest::TreeRequest(
    ::_pbi::ConstantInitialized)
  : identifier_column_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_identifier_column_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_tree_table_id_(nullptr)
  , source_table_id_(nullptr)
  , promote_orphans_(false){}
struct TreeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeRequestDefaultTypeInternal() {}
  union {
    TreeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeRequestDefaultTypeInternal _TreeRequest_default_instance_;
PROTOBUF_CONSTEXPR TreeResponse::TreeResponse(
    ::_pbi::ConstantInitialized){}
struct TreeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeResponseDefaultTypeInternal() {}
  union {
    TreeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeResponseDefaultTypeInternal _TreeResponse_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalTableApplyRequest::HierarchicalTableApplyRequest(
    ::_pbi::ConstantInitialized)
  : filters_()
  , sorts_()
  , result_hierarchical_table_id_(nullptr)
  , input_hierarchical_table_id_(nullptr){}
struct HierarchicalTableApplyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableApplyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableApplyRequestDefaultTypeInternal() {}
  union {
    HierarchicalTableApplyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableApplyRequestDefaultTypeInternal _HierarchicalTableApplyRequest_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalTableApplyResponse::HierarchicalTableApplyResponse(
    ::_pbi::ConstantInitialized){}
struct HierarchicalTableApplyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableApplyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableApplyResponseDefaultTypeInternal() {}
  union {
    HierarchicalTableApplyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableApplyResponseDefaultTypeInternal _HierarchicalTableApplyResponse_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalTableDescriptor::HierarchicalTableDescriptor(
    ::_pbi::ConstantInitialized)
  : snapshot_schema_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct HierarchicalTableDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableDescriptorDefaultTypeInternal() {}
  union {
    HierarchicalTableDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableDescriptorDefaultTypeInternal _HierarchicalTableDescriptor_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalTableViewRequest::HierarchicalTableViewRequest(
    ::_pbi::ConstantInitialized)
  : result_view_id_(nullptr)
  , expansions_(nullptr)
  , _oneof_case_{}{}
struct HierarchicalTableViewRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableViewRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableViewRequestDefaultTypeInternal() {}
  union {
    HierarchicalTableViewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableViewRequestDefaultTypeInternal _HierarchicalTableViewRequest_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalTableViewKeyTableDescriptor::HierarchicalTableViewKeyTableDescriptor(
    ::_pbi::ConstantInitialized)
  : key_table_action_column_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_table_id_(nullptr){}
struct HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal() {}
  union {
    HierarchicalTableViewKeyTableDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal _HierarchicalTableViewKeyTableDescriptor_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalTableViewResponse::HierarchicalTableViewResponse(
    ::_pbi::ConstantInitialized){}
struct HierarchicalTableViewResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableViewResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableViewResponseDefaultTypeInternal() {}
  union {
    HierarchicalTableViewResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableViewResponseDefaultTypeInternal _HierarchicalTableViewResponse_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalTableSourceExportRequest::HierarchicalTableSourceExportRequest(
    ::_pbi::ConstantInitialized)
  : result_table_id_(nullptr)
  , hierarchical_table_id_(nullptr){}
struct HierarchicalTableSourceExportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableSourceExportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableSourceExportRequestDefaultTypeInternal() {}
  union {
    HierarchicalTableSourceExportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableSourceExportRequestDefaultTypeInternal _HierarchicalTableSourceExportRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::_pb::Metadata file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto = nullptr;

const uint32_t TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, result_rollup_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, source_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, aggregations_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, include_constituents_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, group_by_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, result_tree_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, source_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, identifier_column_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, parent_identifier_column_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, promote_orphans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, result_hierarchical_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, input_hierarchical_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, sorts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor, snapshot_schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, result_view_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, expansions_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, target_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, key_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, key_table_action_column_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, result_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, hierarchical_table_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::RollupRequest)},
  { 11, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::RollupResponse)},
  { 17, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TreeRequest)},
  { 28, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TreeResponse)},
  { 34, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest)},
  { 44, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse)},
  { 50, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor)},
  { 57, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest)},
  { 68, 76, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor)},
  { 78, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse)},
  { 84, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::io::deephaven::proto::backplane::grpc::_RollupRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_RollupResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_TreeRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_TreeResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HierarchicalTableApplyRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HierarchicalTableApplyResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HierarchicalTableDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewKeyTableDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HierarchicalTableSourceExportRequest_default_instance_._instance,
};

const char descriptor_table_protodef_deephaven_2fproto_2fhierarchicaltable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'deephaven/proto/hierarchicaltable.prot"
  "o\022!io.deephaven.proto.backplane.grpc\032\033de"
  "ephaven/proto/table.proto\032\034deephaven/pro"
  "to/ticket.proto\"\234\002\n\rRollupRequest\022I\n\026res"
  "ult_rollup_table_id\030\001 \001(\0132).io.deephaven"
  ".proto.backplane.grpc.Ticket\022B\n\017source_t"
  "able_id\030\002 \001(\0132).io.deephaven.proto.backp"
  "lane.grpc.Ticket\022D\n\014aggregations\030\003 \003(\0132."
  ".io.deephaven.proto.backplane.grpc.Aggre"
  "gation\022\034\n\024include_constituents\030\004 \001(\010\022\030\n\020"
  "group_by_columns\030\005 \003(\t\"\020\n\016RollupResponse"
  "\"\360\001\n\013TreeRequest\022G\n\024result_tree_table_id"
  "\030\001 \001(\0132).io.deephaven.proto.backplane.gr"
  "pc.Ticket\022B\n\017source_table_id\030\002 \001(\0132).io."
  "deephaven.proto.backplane.grpc.Ticket\022\031\n"
  "\021identifier_column\030\003 \001(\t\022 \n\030parent_ident"
  "ifier_column\030\004 \001(\t\022\027\n\017promote_orphans\030\005 "
  "\001(\010\"\016\n\014TreeResponse\"\301\002\n\035HierarchicalTabl"
  "eApplyRequest\022O\n\034result_hierarchical_tab"
  "le_id\030\001 \001(\0132).io.deephaven.proto.backpla"
  "ne.grpc.Ticket\022N\n\033input_hierarchical_tab"
  "le_id\030\002 \001(\0132).io.deephaven.proto.backpla"
  "ne.grpc.Ticket\022=\n\007filters\030\003 \003(\0132,.io.dee"
  "phaven.proto.backplane.grpc.Condition\022@\n"
  "\005sorts\030\004 \003(\01321.io.deephaven.proto.backpl"
  "ane.grpc.SortDescriptor\" \n\036HierarchicalT"
  "ableApplyResponse\"6\n\033HierarchicalTableDe"
  "scriptor\022\027\n\017snapshot_schema\030\001 \001(\014\"\336\002\n\034Hi"
  "erarchicalTableViewRequest\022A\n\016result_vie"
  "w_id\030\001 \001(\0132).io.deephaven.proto.backplan"
  "e.grpc.Ticket\022J\n\025hierarchical_table_id\030\002"
  " \001(\0132).io.deephaven.proto.backplane.grpc"
  ".TicketH\000\022E\n\020existing_view_id\030\003 \001(\0132).io"
  ".deephaven.proto.backplane.grpc.TicketH\000"
  "\022^\n\nexpansions\030\004 \001(\0132J.io.deephaven.prot"
  "o.backplane.grpc.HierarchicalTableViewKe"
  "yTableDescriptorB\010\n\006target\"\254\001\n\'Hierarchi"
  "calTableViewKeyTableDescriptor\022\?\n\014key_ta"
  "ble_id\030\001 \001(\0132).io.deephaven.proto.backpl"
  "ane.grpc.Ticket\022$\n\027key_table_action_colu"
  "mn\030\002 \001(\tH\000\210\001\001B\032\n\030_key_table_action_colum"
  "n\"\037\n\035HierarchicalTableViewResponse\"\264\001\n$H"
  "ierarchicalTableSourceExportRequest\022B\n\017r"
  "esult_table_id\030\001 \001(\0132).io.deephaven.prot"
  "o.backplane.grpc.Ticket\022H\n\025hierarchical_"
  "table_id\030\002 \001(\0132).io.deephaven.proto.back"
  "plane.grpc.Ticket2\251\005\n\030HierarchicalTableS"
  "ervice\022m\n\006Rollup\0220.io.deephaven.proto.ba"
  "ckplane.grpc.RollupRequest\0321.io.deephave"
  "n.proto.backplane.grpc.RollupResponse\022g\n"
  "\004Tree\022..io.deephaven.proto.backplane.grp"
  "c.TreeRequest\032/.io.deephaven.proto.backp"
  "lane.grpc.TreeResponse\022\214\001\n\005Apply\022@.io.de"
  "ephaven.proto.backplane.grpc.Hierarchica"
  "lTableApplyRequest\032A.io.deephaven.proto."
  "backplane.grpc.HierarchicalTableApplyRes"
  "ponse\022\211\001\n\004View\022\?.io.deephaven.proto.back"
  "plane.grpc.HierarchicalTableViewRequest\032"
  "@.io.deephaven.proto.backplane.grpc.Hier"
  "archicalTableViewResponse\022\231\001\n\014ExportSour"
  "ce\022G.io.deephaven.proto.backplane.grpc.H"
  "ierarchicalTableSourceExportRequest\032@.io"
  ".deephaven.proto.backplane.grpc.Exported"
  "TableCreationResponseBMH\001P\001ZGgithub.com/"
  "deephaven/deephaven-core/go/internal/pro"
  "to/hierarchicaltableb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_deps[2] = {
  &::descriptor_table_deephaven_2fproto_2ftable_2eproto,
  &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::_pbi::once_flag descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto = {
    false, false, 2628, descriptor_table_protodef_deephaven_2fproto_2fhierarchicaltable_2eproto,
    "deephaven/proto/hierarchicaltable.proto",
    &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once, descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_deps, 2, 11,
    schemas, file_default_instances, TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto::offsets,
    file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto, file_level_enum_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter() {
  return &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2fhierarchicaltable_2eproto(&descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class RollupRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_rollup_table_id(const RollupRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id(const RollupRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
RollupRequest::_Internal::result_rollup_table_id(const RollupRequest* msg) {
  return *msg->result_rollup_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
RollupRequest::_Internal::source_table_id(const RollupRequest* msg) {
  return *msg->source_table_id_;
}
void RollupRequest::clear_result_rollup_table_id() {
  if (GetArenaForAllocation() == nullptr && result_rollup_table_id_ != nullptr) {
    delete result_rollup_table_id_;
  }
  result_rollup_table_id_ = nullptr;
}
void RollupRequest::clear_source_table_id() {
  if (GetArenaForAllocation() == nullptr && source_table_id_ != nullptr) {
    delete source_table_id_;
  }
  source_table_id_ = nullptr;
}
void RollupRequest::clear_aggregations() {
  aggregations_.Clear();
}
RollupRequest::RollupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  aggregations_(arena),
  group_by_columns_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RollupRequest)
}
RollupRequest::RollupRequest(const RollupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aggregations_(from.aggregations_),
      group_by_columns_(from.group_by_columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_rollup_table_id()) {
    result_rollup_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_rollup_table_id_);
  } else {
    result_rollup_table_id_ = nullptr;
  }
  if (from._internal_has_source_table_id()) {
    source_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.source_table_id_);
  } else {
    source_table_id_ = nullptr;
  }
  include_constituents_ = from.include_constituents_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RollupRequest)
}

inline void RollupRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_rollup_table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_constituents_) -
    reinterpret_cast<char*>(&result_rollup_table_id_)) + sizeof(include_constituents_));
}

RollupRequest::~RollupRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RollupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RollupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_rollup_table_id_;
  if (this != internal_default_instance()) delete source_table_id_;
}

void RollupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RollupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggregations_.Clear();
  group_by_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && result_rollup_table_id_ != nullptr) {
    delete result_rollup_table_id_;
  }
  result_rollup_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_table_id_ != nullptr) {
    delete source_table_id_;
  }
  source_table_id_ = nullptr;
  include_constituents_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RollupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_rollup_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool include_constituents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          include_constituents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RollupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
  if (this->_internal_has_result_rollup_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_rollup_table_id(this),
        _Internal::result_rollup_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  if (this->_internal_has_source_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_table_id(this),
        _Internal::source_table_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregations_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool include_constituents = 4;
  if (this->_internal_include_constituents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_constituents(), target);
  }

  // repeated string group_by_columns = 5;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RollupRequest)
  return target;
}

size_t RollupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
  total_size += 1UL * this->_internal_aggregations_size();
  for (const auto& msg : this->aggregations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string group_by_columns = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_columns_.size());
  for (int i = 0, n = group_by_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
  if (this->_internal_has_result_rollup_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_rollup_table_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  if (this->_internal_has_source_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_table_id_);
  }

  // bool include_constituents = 4;
  if (this->_internal_include_constituents() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RollupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RollupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RollupRequest::GetClassData() const { return &_class_data_; }

void RollupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RollupRequest *>(to)->MergeFrom(
      static_cast<const RollupRequest &>(from));
}


void RollupRequest::MergeFrom(const RollupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  aggregations_.MergeFrom(from.aggregations_);
  group_by_columns_.MergeFrom(from.group_by_columns_);
  if (from._internal_has_result_rollup_table_id()) {
    _internal_mutable_result_rollup_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_rollup_table_id());
  }
  if (from._internal_has_source_table_id()) {
    _internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_source_table_id());
  }
  if (from._internal_include_constituents() != 0) {
    _internal_set_include_constituents(from._internal_include_constituents());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RollupRequest::CopyFrom(const RollupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollupRequest::IsInitialized() const {
  return true;
}

void RollupRequest::InternalSwap(RollupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  aggregations_.InternalSwap(&other->aggregations_);
  group_by_columns_.InternalSwap(&other->group_by_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollupRequest, include_constituents_)
      + sizeof(RollupRequest::include_constituents_)
      - PROTOBUF_FIELD_OFFSET(RollupRequest, result_rollup_table_id_)>(
          reinterpret_cast<char*>(&result_rollup_table_id_),
          reinterpret_cast<char*>(&other->result_rollup_table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RollupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[0]);
}

// ===================================================================

class RollupResponse::_Internal {
 public:
};

RollupResponse::RollupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RollupResponse)
}
RollupResponse::RollupResponse(const RollupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RollupResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RollupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RollupResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RollupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[1]);
}

// ===================================================================

class TreeRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_tree_table_id(const TreeRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id(const TreeRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
TreeRequest::_Internal::result_tree_table_id(const TreeRequest* msg) {
  return *msg->result_tree_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
TreeRequest::_Internal::source_table_id(const TreeRequest* msg) {
  return *msg->source_table_id_;
}
void TreeRequest::clear_result_tree_table_id() {
  if (GetArenaForAllocation() == nullptr && result_tree_table_id_ != nullptr) {
    delete result_tree_table_id_;
  }
  result_tree_table_id_ = nullptr;
}
void TreeRequest::clear_source_table_id() {
  if (GetArenaForAllocation() == nullptr && source_table_id_ != nullptr) {
    delete source_table_id_;
  }
  source_table_id_ = nullptr;
}
TreeRequest::TreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TreeRequest)
}
TreeRequest::TreeRequest(const TreeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier_column().empty()) {
    identifier_column_.Set(from._internal_identifier_column(), 
      GetArenaForAllocation());
  }
  parent_identifier_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_identifier_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_identifier_column().empty()) {
    parent_identifier_column_.Set(from._internal_parent_identifier_column(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result_tree_table_id()) {
    result_tree_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_tree_table_id_);
  } else {
    result_tree_table_id_ = nullptr;
  }
  if (from._internal_has_source_table_id()) {
    source_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.source_table_id_);
  } else {
    source_table_id_ = nullptr;
  }
  promote_orphans_ = from.promote_orphans_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TreeRequest)
}

inline void TreeRequest::SharedCtor() {
identifier_column_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_column_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_identifier_column_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_identifier_column_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_tree_table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&promote_orphans_) -
    reinterpret_cast<char*>(&result_tree_table_id_)) + sizeof(promote_orphans_));
}

TreeRequest::~TreeRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TreeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TreeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_column_.Destroy();
  parent_identifier_column_.Destroy();
  if (this != internal_default_instance()) delete result_tree_table_id_;
  if (this != internal_default_instance()) delete source_table_id_;
}

void TreeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_column_.ClearToEmpty();
  parent_identifier_column_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_tree_table_id_ != nullptr) {
    delete result_tree_table_id_;
  }
  result_tree_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_table_id_ != nullptr) {
    delete source_table_id_;
  }
  source_table_id_ = nullptr;
  promote_orphans_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_tree_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string identifier_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identifier_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column"));
        } else
          goto handle_unusual;
        continue;
      // string parent_identifier_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_parent_identifier_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column"));
        } else
          goto handle_unusual;
        continue;
      // bool promote_orphans = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          promote_orphans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
  if (this->_internal_has_result_tree_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_tree_table_id(this),
        _Internal::result_tree_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  if (this->_internal_has_source_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_table_id(this),
        _Internal::source_table_id(this).GetCachedSize(), target, stream);
  }

  // string identifier_column = 3;
  if (!this->_internal_identifier_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier_column().data(), static_cast<int>(this->_internal_identifier_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_identifier_column(), target);
  }

  // string parent_identifier_column = 4;
  if (!this->_internal_parent_identifier_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_identifier_column().data(), static_cast<int>(this->_internal_parent_identifier_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parent_identifier_column(), target);
  }

  // bool promote_orphans = 5;
  if (this->_internal_promote_orphans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_promote_orphans(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TreeRequest)
  return target;
}

size_t TreeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier_column = 3;
  if (!this->_internal_identifier_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier_column());
  }

  // string parent_identifier_column = 4;
  if (!this->_internal_parent_identifier_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_identifier_column());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
  if (this->_internal_has_result_tree_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_tree_table_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  if (this->_internal_has_source_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_table_id_);
  }

  // bool promote_orphans = 5;
  if (this->_internal_promote_orphans() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TreeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreeRequest::GetClassData() const { return &_class_data_; }

void TreeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TreeRequest *>(to)->MergeFrom(
      static_cast<const TreeRequest &>(from));
}


void TreeRequest::MergeFrom(const TreeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier_column().empty()) {
    _internal_set_identifier_column(from._internal_identifier_column());
  }
  if (!from._internal_parent_identifier_column().empty()) {
    _internal_set_parent_identifier_column(from._internal_parent_identifier_column());
  }
  if (from._internal_has_result_tree_table_id()) {
    _internal_mutable_result_tree_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_tree_table_id());
  }
  if (from._internal_has_source_table_id()) {
    _internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_source_table_id());
  }
  if (from._internal_promote_orphans() != 0) {
    _internal_set_promote_orphans(from._internal_promote_orphans());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TreeRequest::CopyFrom(const TreeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeRequest::IsInitialized() const {
  return true;
}

void TreeRequest::InternalSwap(TreeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &identifier_column_, lhs_arena,
      &other->identifier_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_identifier_column_, lhs_arena,
      &other->parent_identifier_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeRequest, promote_orphans_)
      + sizeof(TreeRequest::promote_orphans_)
      - PROTOBUF_FIELD_OFFSET(TreeRequest, result_tree_table_id_)>(
          reinterpret_cast<char*>(&result_tree_table_id_),
          reinterpret_cast<char*>(&other->result_tree_table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[2]);
}

// ===================================================================

class TreeResponse::_Internal {
 public:
};

TreeResponse::TreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TreeResponse)
}
TreeResponse::TreeResponse(const TreeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TreeResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreeResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TreeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[3]);
}

// ===================================================================

class HierarchicalTableApplyRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_hierarchical_table_id(const HierarchicalTableApplyRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& input_hierarchical_table_id(const HierarchicalTableApplyRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableApplyRequest::_Internal::result_hierarchical_table_id(const HierarchicalTableApplyRequest* msg) {
  return *msg->result_hierarchical_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableApplyRequest::_Internal::input_hierarchical_table_id(const HierarchicalTableApplyRequest* msg) {
  return *msg->input_hierarchical_table_id_;
}
void HierarchicalTableApplyRequest::clear_result_hierarchical_table_id() {
  if (GetArenaForAllocation() == nullptr && result_hierarchical_table_id_ != nullptr) {
    delete result_hierarchical_table_id_;
  }
  result_hierarchical_table_id_ = nullptr;
}
void HierarchicalTableApplyRequest::clear_input_hierarchical_table_id() {
  if (GetArenaForAllocation() == nullptr && input_hierarchical_table_id_ != nullptr) {
    delete input_hierarchical_table_id_;
  }
  input_hierarchical_table_id_ = nullptr;
}
void HierarchicalTableApplyRequest::clear_filters() {
  filters_.Clear();
}
void HierarchicalTableApplyRequest::clear_sorts() {
  sorts_.Clear();
}
HierarchicalTableApplyRequest::HierarchicalTableApplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena),
  sorts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
}
HierarchicalTableApplyRequest::HierarchicalTableApplyRequest(const HierarchicalTableApplyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_hierarchical_table_id()) {
    result_hierarchical_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_hierarchical_table_id_);
  } else {
    result_hierarchical_table_id_ = nullptr;
  }
  if (from._internal_has_input_hierarchical_table_id()) {
    input_hierarchical_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.input_hierarchical_table_id_);
  } else {
    input_hierarchical_table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
}

inline void HierarchicalTableApplyRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_hierarchical_table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_hierarchical_table_id_) -
    reinterpret_cast<char*>(&result_hierarchical_table_id_)) + sizeof(input_hierarchical_table_id_));
}

HierarchicalTableApplyRequest::~HierarchicalTableApplyRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HierarchicalTableApplyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_hierarchical_table_id_;
  if (this != internal_default_instance()) delete input_hierarchical_table_id_;
}

void HierarchicalTableApplyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HierarchicalTableApplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  sorts_.Clear();
  if (GetArenaForAllocation() == nullptr && result_hierarchical_table_id_ != nullptr) {
    delete result_hierarchical_table_id_;
  }
  result_hierarchical_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_hierarchical_table_id_ != nullptr) {
    delete input_hierarchical_table_id_;
  }
  input_hierarchical_table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalTableApplyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_hierarchical_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_hierarchical_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalTableApplyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
  if (this->_internal_has_result_hierarchical_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_hierarchical_table_id(this),
        _Internal::result_hierarchical_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
  if (this->_internal_has_input_hierarchical_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input_hierarchical_table_id(this),
        _Internal::input_hierarchical_table_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorts_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  return target;
}

size_t HierarchicalTableApplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
  if (this->_internal_has_result_hierarchical_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_hierarchical_table_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
  if (this->_internal_has_input_hierarchical_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_hierarchical_table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalTableApplyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HierarchicalTableApplyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalTableApplyRequest::GetClassData() const { return &_class_data_; }

void HierarchicalTableApplyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HierarchicalTableApplyRequest *>(to)->MergeFrom(
      static_cast<const HierarchicalTableApplyRequest &>(from));
}


void HierarchicalTableApplyRequest::MergeFrom(const HierarchicalTableApplyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  sorts_.MergeFrom(from.sorts_);
  if (from._internal_has_result_hierarchical_table_id()) {
    _internal_mutable_result_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_hierarchical_table_id());
  }
  if (from._internal_has_input_hierarchical_table_id()) {
    _internal_mutable_input_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_input_hierarchical_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableApplyRequest::CopyFrom(const HierarchicalTableApplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalTableApplyRequest::IsInitialized() const {
  return true;
}

void HierarchicalTableApplyRequest::InternalSwap(HierarchicalTableApplyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, input_hierarchical_table_id_)
      + sizeof(HierarchicalTableApplyRequest::input_hierarchical_table_id_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, result_hierarchical_table_id_)>(
          reinterpret_cast<char*>(&result_hierarchical_table_id_),
          reinterpret_cast<char*>(&other->result_hierarchical_table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalTableApplyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[4]);
}

// ===================================================================

class HierarchicalTableApplyResponse::_Internal {
 public:
};

HierarchicalTableApplyResponse::HierarchicalTableApplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse)
}
HierarchicalTableApplyResponse::HierarchicalTableApplyResponse(const HierarchicalTableApplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalTableApplyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalTableApplyResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalTableApplyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[5]);
}

// ===================================================================

class HierarchicalTableDescriptor::_Internal {
 public:
};

HierarchicalTableDescriptor::HierarchicalTableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
}
HierarchicalTableDescriptor::HierarchicalTableDescriptor(const HierarchicalTableDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  snapshot_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    snapshot_schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_snapshot_schema().empty()) {
    snapshot_schema_.Set(from._internal_snapshot_schema(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
}

inline void HierarchicalTableDescriptor::SharedCtor() {
snapshot_schema_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  snapshot_schema_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HierarchicalTableDescriptor::~HierarchicalTableDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HierarchicalTableDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  snapshot_schema_.Destroy();
}

void HierarchicalTableDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HierarchicalTableDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_schema_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalTableDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes snapshot_schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_snapshot_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalTableDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes snapshot_schema = 1;
  if (!this->_internal_snapshot_schema().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_snapshot_schema(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  return target;
}

size_t HierarchicalTableDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes snapshot_schema = 1;
  if (!this->_internal_snapshot_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_snapshot_schema());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalTableDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HierarchicalTableDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalTableDescriptor::GetClassData() const { return &_class_data_; }

void HierarchicalTableDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HierarchicalTableDescriptor *>(to)->MergeFrom(
      static_cast<const HierarchicalTableDescriptor &>(from));
}


void HierarchicalTableDescriptor::MergeFrom(const HierarchicalTableDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_snapshot_schema().empty()) {
    _internal_set_snapshot_schema(from._internal_snapshot_schema());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableDescriptor::CopyFrom(const HierarchicalTableDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalTableDescriptor::IsInitialized() const {
  return true;
}

void HierarchicalTableDescriptor::InternalSwap(HierarchicalTableDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &snapshot_schema_, lhs_arena,
      &other->snapshot_schema_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalTableDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[6]);
}

// ===================================================================

class HierarchicalTableViewRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_view_id(const HierarchicalTableViewRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id(const HierarchicalTableViewRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& existing_view_id(const HierarchicalTableViewRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& expansions(const HierarchicalTableViewRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableViewRequest::_Internal::result_view_id(const HierarchicalTableViewRequest* msg) {
  return *msg->result_view_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableViewRequest::_Internal::hierarchical_table_id(const HierarchicalTableViewRequest* msg) {
  return *msg->target_.hierarchical_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableViewRequest::_Internal::existing_view_id(const HierarchicalTableViewRequest* msg) {
  return *msg->target_.existing_view_id_;
}
const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor&
HierarchicalTableViewRequest::_Internal::expansions(const HierarchicalTableViewRequest* msg) {
  return *msg->expansions_;
}
void HierarchicalTableViewRequest::clear_result_view_id() {
  if (GetArenaForAllocation() == nullptr && result_view_id_ != nullptr) {
    delete result_view_id_;
  }
  result_view_id_ = nullptr;
}
void HierarchicalTableViewRequest::set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (hierarchical_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchical_table_id));
    if (message_arena != submessage_arena) {
      hierarchical_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hierarchical_table_id, submessage_arena);
    }
    set_has_hierarchical_table_id();
    target_.hierarchical_table_id_ = hierarchical_table_id;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
}
void HierarchicalTableViewRequest::clear_hierarchical_table_id() {
  if (_internal_has_hierarchical_table_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.hierarchical_table_id_;
    }
    clear_has_target();
  }
}
void HierarchicalTableViewRequest::set_allocated_existing_view_id(::io::deephaven::proto::backplane::grpc::Ticket* existing_view_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (existing_view_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(existing_view_id));
    if (message_arena != submessage_arena) {
      existing_view_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, existing_view_id, submessage_arena);
    }
    set_has_existing_view_id();
    target_.existing_view_id_ = existing_view_id;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
}
void HierarchicalTableViewRequest::clear_existing_view_id() {
  if (_internal_has_existing_view_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.existing_view_id_;
    }
    clear_has_target();
  }
}
HierarchicalTableViewRequest::HierarchicalTableViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
}
HierarchicalTableViewRequest::HierarchicalTableViewRequest(const HierarchicalTableViewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_view_id()) {
    result_view_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_view_id_);
  } else {
    result_view_id_ = nullptr;
  }
  if (from._internal_has_expansions()) {
    expansions_ = new ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor(*from.expansions_);
  } else {
    expansions_ = nullptr;
  }
  clear_has_target();
  switch (from.target_case()) {
    case kHierarchicalTableId: {
      _internal_mutable_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_hierarchical_table_id());
      break;
    }
    case kExistingViewId: {
      _internal_mutable_existing_view_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_existing_view_id());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
}

inline void HierarchicalTableViewRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_view_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expansions_) -
    reinterpret_cast<char*>(&result_view_id_)) + sizeof(expansions_));
clear_has_target();
}

HierarchicalTableViewRequest::~HierarchicalTableViewRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HierarchicalTableViewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_view_id_;
  if (this != internal_default_instance()) delete expansions_;
  if (has_target()) {
    clear_target();
  }
}

void HierarchicalTableViewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HierarchicalTableViewRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  switch (target_case()) {
    case kHierarchicalTableId: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.hierarchical_table_id_;
      }
      break;
    }
    case kExistingViewId: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.existing_view_id_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void HierarchicalTableViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_view_id_ != nullptr) {
    delete result_view_id_;
  }
  result_view_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expansions_ != nullptr) {
    delete expansions_;
  }
  expansions_ = nullptr;
  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalTableViewRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_view_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hierarchical_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_existing_view_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expansions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalTableViewRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
  if (this->_internal_has_result_view_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_view_id(this),
        _Internal::result_view_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  if (_internal_has_hierarchical_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hierarchical_table_id(this),
        _Internal::hierarchical_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
  if (_internal_has_existing_view_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::existing_view_id(this),
        _Internal::existing_view_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
  if (this->_internal_has_expansions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::expansions(this),
        _Internal::expansions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  return target;
}

size_t HierarchicalTableViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
  if (this->_internal_has_result_view_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_view_id_);
  }

  // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
  if (this->_internal_has_expansions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expansions_);
  }

  switch (target_case()) {
    // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
    case kHierarchicalTableId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.hierarchical_table_id_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
    case kExistingViewId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.existing_view_id_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalTableViewRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HierarchicalTableViewRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalTableViewRequest::GetClassData() const { return &_class_data_; }

void HierarchicalTableViewRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HierarchicalTableViewRequest *>(to)->MergeFrom(
      static_cast<const HierarchicalTableViewRequest &>(from));
}


void HierarchicalTableViewRequest::MergeFrom(const HierarchicalTableViewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_view_id()) {
    _internal_mutable_result_view_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_view_id());
  }
  if (from._internal_has_expansions()) {
    _internal_mutable_expansions()->::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor::MergeFrom(from._internal_expansions());
  }
  switch (from.target_case()) {
    case kHierarchicalTableId: {
      _internal_mutable_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_hierarchical_table_id());
      break;
    }
    case kExistingViewId: {
      _internal_mutable_existing_view_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_existing_view_id());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableViewRequest::CopyFrom(const HierarchicalTableViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalTableViewRequest::IsInitialized() const {
  return true;
}

void HierarchicalTableViewRequest::InternalSwap(HierarchicalTableViewRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, expansions_)
      + sizeof(HierarchicalTableViewRequest::expansions_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, result_view_id_)>(
          reinterpret_cast<char*>(&result_view_id_),
          reinterpret_cast<char*>(&other->result_view_id_));
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalTableViewRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[7]);
}

// ===================================================================

class HierarchicalTableViewKeyTableDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalTableViewKeyTableDescriptor>()._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& key_table_id(const HierarchicalTableViewKeyTableDescriptor* msg);
  static void set_has_key_table_action_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableViewKeyTableDescriptor::_Internal::key_table_id(const HierarchicalTableViewKeyTableDescriptor* msg) {
  return *msg->key_table_id_;
}
void HierarchicalTableViewKeyTableDescriptor::clear_key_table_id() {
  if (GetArenaForAllocation() == nullptr && key_table_id_ != nullptr) {
    delete key_table_id_;
  }
  key_table_id_ = nullptr;
}
HierarchicalTableViewKeyTableDescriptor::HierarchicalTableViewKeyTableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
}
HierarchicalTableViewKeyTableDescriptor::HierarchicalTableViewKeyTableDescriptor(const HierarchicalTableViewKeyTableDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_table_action_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_table_action_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_table_action_column()) {
    key_table_action_column_.Set(from._internal_key_table_action_column(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_key_table_id()) {
    key_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.key_table_id_);
  } else {
    key_table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
}

inline void HierarchicalTableViewKeyTableDescriptor::SharedCtor() {
key_table_action_column_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_table_action_column_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_table_id_ = nullptr;
}

HierarchicalTableViewKeyTableDescriptor::~HierarchicalTableViewKeyTableDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HierarchicalTableViewKeyTableDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_table_action_column_.Destroy();
  if (this != internal_default_instance()) delete key_table_id_;
}

void HierarchicalTableViewKeyTableDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HierarchicalTableViewKeyTableDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_table_action_column_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && key_table_id_ != nullptr) {
    delete key_table_id_;
  }
  key_table_id_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalTableViewKeyTableDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string key_table_action_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_table_action_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalTableViewKeyTableDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
  if (this->_internal_has_key_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key_table_id(this),
        _Internal::key_table_id(this).GetCachedSize(), target, stream);
  }

  // optional string key_table_action_column = 2;
  if (_internal_has_key_table_action_column()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_table_action_column().data(), static_cast<int>(this->_internal_key_table_action_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_table_action_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  return target;
}

size_t HierarchicalTableViewKeyTableDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key_table_action_column = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_table_action_column());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
  if (this->_internal_has_key_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalTableViewKeyTableDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HierarchicalTableViewKeyTableDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalTableViewKeyTableDescriptor::GetClassData() const { return &_class_data_; }

void HierarchicalTableViewKeyTableDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HierarchicalTableViewKeyTableDescriptor *>(to)->MergeFrom(
      static_cast<const HierarchicalTableViewKeyTableDescriptor &>(from));
}


void HierarchicalTableViewKeyTableDescriptor::MergeFrom(const HierarchicalTableViewKeyTableDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_table_action_column()) {
    _internal_set_key_table_action_column(from._internal_key_table_action_column());
  }
  if (from._internal_has_key_table_id()) {
    _internal_mutable_key_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_key_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableViewKeyTableDescriptor::CopyFrom(const HierarchicalTableViewKeyTableDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalTableViewKeyTableDescriptor::IsInitialized() const {
  return true;
}

void HierarchicalTableViewKeyTableDescriptor::InternalSwap(HierarchicalTableViewKeyTableDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_table_action_column_, lhs_arena,
      &other->key_table_action_column_, rhs_arena
  );
  swap(key_table_id_, other->key_table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalTableViewKeyTableDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[8]);
}

// ===================================================================

class HierarchicalTableViewResponse::_Internal {
 public:
};

HierarchicalTableViewResponse::HierarchicalTableViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse)
}
HierarchicalTableViewResponse::HierarchicalTableViewResponse(const HierarchicalTableViewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalTableViewResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalTableViewResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalTableViewResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[9]);
}

// ===================================================================

class HierarchicalTableSourceExportRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_table_id(const HierarchicalTableSourceExportRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id(const HierarchicalTableSourceExportRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableSourceExportRequest::_Internal::result_table_id(const HierarchicalTableSourceExportRequest* msg) {
  return *msg->result_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
HierarchicalTableSourceExportRequest::_Internal::hierarchical_table_id(const HierarchicalTableSourceExportRequest* msg) {
  return *msg->hierarchical_table_id_;
}
void HierarchicalTableSourceExportRequest::clear_result_table_id() {
  if (GetArenaForAllocation() == nullptr && result_table_id_ != nullptr) {
    delete result_table_id_;
  }
  result_table_id_ = nullptr;
}
void HierarchicalTableSourceExportRequest::clear_hierarchical_table_id() {
  if (GetArenaForAllocation() == nullptr && hierarchical_table_id_ != nullptr) {
    delete hierarchical_table_id_;
  }
  hierarchical_table_id_ = nullptr;
}
HierarchicalTableSourceExportRequest::HierarchicalTableSourceExportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
}
HierarchicalTableSourceExportRequest::HierarchicalTableSourceExportRequest(const HierarchicalTableSourceExportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_table_id()) {
    result_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.result_table_id_);
  } else {
    result_table_id_ = nullptr;
  }
  if (from._internal_has_hierarchical_table_id()) {
    hierarchical_table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from.hierarchical_table_id_);
  } else {
    hierarchical_table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
}

inline void HierarchicalTableSourceExportRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hierarchical_table_id_) -
    reinterpret_cast<char*>(&result_table_id_)) + sizeof(hierarchical_table_id_));
}

HierarchicalTableSourceExportRequest::~HierarchicalTableSourceExportRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HierarchicalTableSourceExportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_table_id_;
  if (this != internal_default_instance()) delete hierarchical_table_id_;
}

void HierarchicalTableSourceExportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HierarchicalTableSourceExportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_table_id_ != nullptr) {
    delete result_table_id_;
  }
  result_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hierarchical_table_id_ != nullptr) {
    delete hierarchical_table_id_;
  }
  hierarchical_table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalTableSourceExportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hierarchical_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalTableSourceExportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
  if (this->_internal_has_result_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_table_id(this),
        _Internal::result_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  if (this->_internal_has_hierarchical_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hierarchical_table_id(this),
        _Internal::hierarchical_table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  return target;
}

size_t HierarchicalTableSourceExportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
  if (this->_internal_has_result_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_table_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  if (this->_internal_has_hierarchical_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hierarchical_table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalTableSourceExportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HierarchicalTableSourceExportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalTableSourceExportRequest::GetClassData() const { return &_class_data_; }

void HierarchicalTableSourceExportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HierarchicalTableSourceExportRequest *>(to)->MergeFrom(
      static_cast<const HierarchicalTableSourceExportRequest &>(from));
}


void HierarchicalTableSourceExportRequest::MergeFrom(const HierarchicalTableSourceExportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_table_id()) {
    _internal_mutable_result_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_result_table_id());
  }
  if (from._internal_has_hierarchical_table_id()) {
    _internal_mutable_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(from._internal_hierarchical_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableSourceExportRequest::CopyFrom(const HierarchicalTableSourceExportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalTableSourceExportRequest::IsInitialized() const {
  return true;
}

void HierarchicalTableSourceExportRequest::InternalSwap(HierarchicalTableSourceExportRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, hierarchical_table_id_)
      + sizeof(HierarchicalTableSourceExportRequest::hierarchical_table_id_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, result_table_id_)>(
          reinterpret_cast<char*>(&result_table_id_),
          reinterpret_cast<char*>(&other->result_table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalTableSourceExportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::RollupRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::RollupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::RollupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::RollupResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::RollupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::RollupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TreeRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TreeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TreeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TreeResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TreeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TreeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
