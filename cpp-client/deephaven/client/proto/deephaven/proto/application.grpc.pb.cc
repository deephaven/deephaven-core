// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/application.proto

#include "deephaven/proto/application.pb.h"
#include "deephaven/proto/application.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

static const char* ApplicationService_method_names[] = {
  "/io.deephaven.proto.backplane.grpc.ApplicationService/listFields",
};

std::unique_ptr< ApplicationService::Stub> ApplicationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApplicationService::Stub> stub(new ApplicationService::Stub(channel, options));
  return stub;
}

ApplicationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_listFields_(ApplicationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>* ApplicationService::Stub::listFieldsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListFieldsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>::Create(channel_.get(), rpcmethod_listFields_, context, request);
}

void ApplicationService::Stub::experimental_async::listFields(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListFieldsRequest* request, ::grpc::experimental::ClientReadReactor< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_listFields_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>* ApplicationService::Stub::AsynclistFieldsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListFieldsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>::Create(channel_.get(), cq, rpcmethod_listFields_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>* ApplicationService::Stub::PrepareAsynclistFieldsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>::Create(channel_.get(), cq, rpcmethod_listFields_, context, request, false, nullptr);
}

ApplicationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApplicationService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ApplicationService::Service, ::io::deephaven::proto::backplane::grpc::ListFieldsRequest, ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>(
          [](ApplicationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::ListFieldsRequest* req,
             ::grpc::ServerWriter<::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>* writer) {
               return service->listFields(ctx, req, writer);
             }, this)));
}

ApplicationService::Service::~Service() {
}

::grpc::Status ApplicationService::Service::listFields(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::ListFieldsRequest* request, ::grpc::ServerWriter< ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace grpc

