// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/console.proto

#include "deephaven/proto/console.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {
PROTOBUF_CONSTEXPR GetConsoleTypesRequest::GetConsoleTypesRequest(
    ::_pbi::ConstantInitialized) {}
struct GetConsoleTypesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsoleTypesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsoleTypesRequestDefaultTypeInternal() {}
  union {
    GetConsoleTypesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsoleTypesRequestDefaultTypeInternal _GetConsoleTypesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetConsoleTypesResponse::GetConsoleTypesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.console_types_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConsoleTypesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsoleTypesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsoleTypesResponseDefaultTypeInternal() {}
  union {
    GetConsoleTypesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsoleTypesResponseDefaultTypeInternal _GetConsoleTypesResponse_default_instance_;
PROTOBUF_CONSTEXPR StartConsoleRequest::StartConsoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartConsoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartConsoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartConsoleRequestDefaultTypeInternal() {}
  union {
    StartConsoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartConsoleRequestDefaultTypeInternal _StartConsoleRequest_default_instance_;
PROTOBUF_CONSTEXPR StartConsoleResponse::StartConsoleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartConsoleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartConsoleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartConsoleResponseDefaultTypeInternal() {}
  union {
    StartConsoleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartConsoleResponseDefaultTypeInternal _StartConsoleResponse_default_instance_;
PROTOBUF_CONSTEXPR GetHeapInfoRequest::GetHeapInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct GetHeapInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeapInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeapInfoRequestDefaultTypeInternal() {}
  union {
    GetHeapInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeapInfoRequestDefaultTypeInternal _GetHeapInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetHeapInfoResponse::GetHeapInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_memory_)*/int64_t{0}
  , /*decltype(_impl_.total_memory_)*/int64_t{0}
  , /*decltype(_impl_.free_memory_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetHeapInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeapInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeapInfoResponseDefaultTypeInternal() {}
  union {
    GetHeapInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeapInfoResponseDefaultTypeInternal _GetHeapInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR LogSubscriptionRequest::LogSubscriptionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.levels_)*/{}
  , /*decltype(_impl_.last_seen_log_timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogSubscriptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogSubscriptionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogSubscriptionRequestDefaultTypeInternal() {}
  union {
    LogSubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogSubscriptionRequestDefaultTypeInternal _LogSubscriptionRequest_default_instance_;
PROTOBUF_CONSTEXPR LogSubscriptionData::LogSubscriptionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_level_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.micros_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogSubscriptionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogSubscriptionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogSubscriptionDataDefaultTypeInternal() {}
  union {
    LogSubscriptionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogSubscriptionDataDefaultTypeInternal _LogSubscriptionData_default_instance_;
PROTOBUF_CONSTEXPR ExecuteCommandRequest::ExecuteCommandRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteCommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteCommandRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteCommandRequestDefaultTypeInternal() {}
  union {
    ExecuteCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteCommandRequestDefaultTypeInternal _ExecuteCommandRequest_default_instance_;
PROTOBUF_CONSTEXPR ExecuteCommandResponse::ExecuteCommandResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.changes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteCommandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteCommandResponseDefaultTypeInternal() {}
  union {
    ExecuteCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteCommandResponseDefaultTypeInternal _ExecuteCommandResponse_default_instance_;
PROTOBUF_CONSTEXPR BindTableToVariableRequest::BindTableToVariableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variable_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BindTableToVariableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BindTableToVariableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BindTableToVariableRequestDefaultTypeInternal() {}
  union {
    BindTableToVariableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BindTableToVariableRequestDefaultTypeInternal _BindTableToVariableRequest_default_instance_;
PROTOBUF_CONSTEXPR BindTableToVariableResponse::BindTableToVariableResponse(
    ::_pbi::ConstantInitialized) {}
struct BindTableToVariableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BindTableToVariableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BindTableToVariableResponseDefaultTypeInternal() {}
  union {
    BindTableToVariableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BindTableToVariableResponseDefaultTypeInternal _BindTableToVariableResponse_default_instance_;
PROTOBUF_CONSTEXPR CancelCommandRequest::CancelCommandRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.command_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelCommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelCommandRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelCommandRequestDefaultTypeInternal() {}
  union {
    CancelCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelCommandRequestDefaultTypeInternal _CancelCommandRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelCommandResponse::CancelCommandResponse(
    ::_pbi::ConstantInitialized) {}
struct CancelCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelCommandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelCommandResponseDefaultTypeInternal() {}
  union {
    CancelCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelCommandResponseDefaultTypeInternal _CancelCommandResponse_default_instance_;
PROTOBUF_CONSTEXPR CancelAutoCompleteRequest::CancelAutoCompleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.request_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelAutoCompleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelAutoCompleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelAutoCompleteRequestDefaultTypeInternal() {}
  union {
    CancelAutoCompleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelAutoCompleteRequestDefaultTypeInternal _CancelAutoCompleteRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelAutoCompleteResponse::CancelAutoCompleteResponse(
    ::_pbi::ConstantInitialized) {}
struct CancelAutoCompleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelAutoCompleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelAutoCompleteResponseDefaultTypeInternal() {}
  union {
    CancelAutoCompleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelAutoCompleteResponseDefaultTypeInternal _CancelAutoCompleteResponse_default_instance_;
PROTOBUF_CONSTEXPR AutoCompleteRequest::AutoCompleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.request_id_)*/0
  , /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AutoCompleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoCompleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoCompleteRequestDefaultTypeInternal() {}
  union {
    AutoCompleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoCompleteRequestDefaultTypeInternal _AutoCompleteRequest_default_instance_;
PROTOBUF_CONSTEXPR AutoCompleteResponse::AutoCompleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AutoCompleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoCompleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoCompleteResponseDefaultTypeInternal() {}
  union {
    AutoCompleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoCompleteResponseDefaultTypeInternal _AutoCompleteResponse_default_instance_;
PROTOBUF_CONSTEXPR BrowserNextResponse::BrowserNextResponse(
    ::_pbi::ConstantInitialized) {}
struct BrowserNextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrowserNextResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrowserNextResponseDefaultTypeInternal() {}
  union {
    BrowserNextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrowserNextResponseDefaultTypeInternal _BrowserNextResponse_default_instance_;
PROTOBUF_CONSTEXPR OpenDocumentRequest::OpenDocumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.text_document_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpenDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpenDocumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpenDocumentRequestDefaultTypeInternal() {}
  union {
    OpenDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpenDocumentRequestDefaultTypeInternal _OpenDocumentRequest_default_instance_;
PROTOBUF_CONSTEXPR TextDocumentItem::TextDocumentItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextDocumentItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextDocumentItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextDocumentItemDefaultTypeInternal() {}
  union {
    TextDocumentItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextDocumentItemDefaultTypeInternal _TextDocumentItem_default_instance_;
PROTOBUF_CONSTEXPR CloseDocumentRequest::CloseDocumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.text_document_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloseDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseDocumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseDocumentRequestDefaultTypeInternal() {}
  union {
    CloseDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseDocumentRequestDefaultTypeInternal _CloseDocumentRequest_default_instance_;
PROTOBUF_CONSTEXPR ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.range_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest_TextDocumentContentChangeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal _ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_;
PROTOBUF_CONSTEXPR ChangeDocumentRequest::ChangeDocumentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_changes_)*/{}
  , /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.text_document_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangeDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeDocumentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeDocumentRequestDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeDocumentRequestDefaultTypeInternal _ChangeDocumentRequest_default_instance_;
PROTOBUF_CONSTEXPR DocumentRange::DocumentRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocumentRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentRangeDefaultTypeInternal() {}
  union {
    DocumentRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentRangeDefaultTypeInternal _DocumentRange_default_instance_;
PROTOBUF_CONSTEXPR VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionedTextDocumentIdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionedTextDocumentIdentifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionedTextDocumentIdentifierDefaultTypeInternal() {}
  union {
    VersionedTextDocumentIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionedTextDocumentIdentifierDefaultTypeInternal _VersionedTextDocumentIdentifier_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_)*/0
  , /*decltype(_impl_.character_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR MarkupContent::MarkupContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkupContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkupContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkupContentDefaultTypeInternal() {}
  union {
    MarkupContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkupContentDefaultTypeInternal _MarkupContent_default_instance_;
PROTOBUF_CONSTEXPR GetCompletionItemsRequest::GetCompletionItemsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.console_id_)*/nullptr
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_.text_document_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.request_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCompletionItemsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompletionItemsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompletionItemsRequestDefaultTypeInternal() {}
  union {
    GetCompletionItemsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompletionItemsRequestDefaultTypeInternal _GetCompletionItemsRequest_default_instance_;
PROTOBUF_CONSTEXPR CompletionContext::CompletionContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trigger_character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trigger_kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionContextDefaultTypeInternal() {}
  union {
    CompletionContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionContextDefaultTypeInternal _CompletionContext_default_instance_;
PROTOBUF_CONSTEXPR GetCompletionItemsResponse::GetCompletionItemsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.request_id_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCompletionItemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompletionItemsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompletionItemsResponseDefaultTypeInternal() {}
  union {
    GetCompletionItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompletionItemsResponseDefaultTypeInternal _GetCompletionItemsResponse_default_instance_;
PROTOBUF_CONSTEXPR CompletionItem::CompletionItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_text_edits_)*/{}
  , /*decltype(_impl_.commit_characters_)*/{}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sort_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_edit_)*/nullptr
  , /*decltype(_impl_.documentation_)*/nullptr
  , /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.deprecated_)*/false
  , /*decltype(_impl_.preselect_)*/false
  , /*decltype(_impl_.insert_text_format_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompletionItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionItemDefaultTypeInternal() {}
  union {
    CompletionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionItemDefaultTypeInternal _CompletionItem_default_instance_;
PROTOBUF_CONSTEXPR TextEdit::TextEdit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextEditDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextEditDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextEditDefaultTypeInternal() {}
  union {
    TextEdit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextEditDefaultTypeInternal _TextEdit_default_instance_;
PROTOBUF_CONSTEXPR GetSignatureHelpRequest::GetSignatureHelpRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_.text_document_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSignatureHelpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSignatureHelpRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSignatureHelpRequestDefaultTypeInternal() {}
  union {
    GetSignatureHelpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSignatureHelpRequestDefaultTypeInternal _GetSignatureHelpRequest_default_instance_;
PROTOBUF_CONSTEXPR SignatureHelpContext::SignatureHelpContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trigger_character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.active_signature_help_)*/nullptr
  , /*decltype(_impl_.trigger_kind_)*/0
  , /*decltype(_impl_.is_retrigger_)*/false} {}
struct SignatureHelpContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureHelpContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureHelpContextDefaultTypeInternal() {}
  union {
    SignatureHelpContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureHelpContextDefaultTypeInternal _SignatureHelpContext_default_instance_;
PROTOBUF_CONSTEXPR GetSignatureHelpResponse::GetSignatureHelpResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_.active_signature_)*/0
  , /*decltype(_impl_.active_parameter_)*/0} {}
struct GetSignatureHelpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSignatureHelpResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSignatureHelpResponseDefaultTypeInternal() {}
  union {
    GetSignatureHelpResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSignatureHelpResponseDefaultTypeInternal _GetSignatureHelpResponse_default_instance_;
PROTOBUF_CONSTEXPR SignatureInformation::SignatureInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.documentation_)*/nullptr
  , /*decltype(_impl_.active_parameter_)*/0} {}
struct SignatureInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureInformationDefaultTypeInternal() {}
  union {
    SignatureInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureInformationDefaultTypeInternal _SignatureInformation_default_instance_;
PROTOBUF_CONSTEXPR ParameterInformation::ParameterInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.documentation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParameterInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParameterInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParameterInformationDefaultTypeInternal() {}
  union {
    ParameterInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParameterInformationDefaultTypeInternal _ParameterInformation_default_instance_;
PROTOBUF_CONSTEXPR GetHoverRequest::GetHoverRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_document_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetHoverRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHoverRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHoverRequestDefaultTypeInternal() {}
  union {
    GetHoverRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHoverRequestDefaultTypeInternal _GetHoverRequest_default_instance_;
PROTOBUF_CONSTEXPR GetHoverResponse::GetHoverResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/nullptr
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetHoverResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHoverResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHoverResponseDefaultTypeInternal() {}
  union {
    GetHoverResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHoverResponseDefaultTypeInternal _GetHoverResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDiagnosticRequest::GetDiagnosticRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.previous_result_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_document_)*/nullptr} {}
struct GetDiagnosticRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDiagnosticRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDiagnosticRequestDefaultTypeInternal() {}
  union {
    GetDiagnosticRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDiagnosticRequestDefaultTypeInternal _GetDiagnosticRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPullDiagnosticResponse::GetPullDiagnosticResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GetPullDiagnosticResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPullDiagnosticResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPullDiagnosticResponseDefaultTypeInternal() {}
  union {
    GetPullDiagnosticResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPullDiagnosticResponseDefaultTypeInternal _GetPullDiagnosticResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPublishDiagnosticResponse::GetPublishDiagnosticResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diagnostics_)*/{}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0} {}
struct GetPublishDiagnosticResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPublishDiagnosticResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPublishDiagnosticResponseDefaultTypeInternal() {}
  union {
    GetPublishDiagnosticResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPublishDiagnosticResponseDefaultTypeInternal _GetPublishDiagnosticResponse_default_instance_;
PROTOBUF_CONSTEXPR Diagnostic_CodeDescription::Diagnostic_CodeDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.href_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Diagnostic_CodeDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Diagnostic_CodeDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Diagnostic_CodeDescriptionDefaultTypeInternal() {}
  union {
    Diagnostic_CodeDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Diagnostic_CodeDescriptionDefaultTypeInternal _Diagnostic_CodeDescription_default_instance_;
PROTOBUF_CONSTEXPR Diagnostic::Diagnostic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.code_description_)*/nullptr
  , /*decltype(_impl_.severity_)*/0} {}
struct DiagnosticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiagnosticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiagnosticDefaultTypeInternal() {}
  union {
    Diagnostic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiagnosticDefaultTypeInternal _Diagnostic_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.series_)*/{}
  , /*decltype(_impl_.multi_series_)*/{}
  , /*decltype(_impl_.axes_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legend_font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legend_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.colspan_)*/0
  , /*decltype(_impl_.rowspan_)*/0
  , /*decltype(_impl_.chart_type_)*/0
  , /*decltype(_impl_.show_legend_)*/false
  , /*decltype(_impl_.is3d_)*/false
  , /*decltype(_impl_.column_)*/0
  , /*decltype(_impl_.row_)*/0} {}
struct FigureDescriptor_ChartDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_ChartDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_ChartDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_ChartDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_ChartDescriptorDefaultTypeInternal _FigureDescriptor_ChartDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_sources_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.point_label_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_tool_tip_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.y_tool_tip_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plot_style_)*/0
  , /*decltype(_impl_.lines_visible_)*/false
  , /*decltype(_impl_.shapes_visible_)*/false
  , /*decltype(_impl_.gradient_visible_)*/false
  , /*decltype(_impl_.shape_size_)*/0} {}
struct FigureDescriptor_SeriesDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_SeriesDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_SeriesDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_SeriesDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_SeriesDescriptorDefaultTypeInternal _FigureDescriptor_SeriesDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_sources_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.line_color_)*/nullptr
  , /*decltype(_impl_.point_color_)*/nullptr
  , /*decltype(_impl_.lines_visible_)*/nullptr
  , /*decltype(_impl_.points_visible_)*/nullptr
  , /*decltype(_impl_.gradient_visible_)*/nullptr
  , /*decltype(_impl_.point_label_format_)*/nullptr
  , /*decltype(_impl_.x_tool_tip_pattern_)*/nullptr
  , /*decltype(_impl_.y_tool_tip_pattern_)*/nullptr
  , /*decltype(_impl_.point_label_)*/nullptr
  , /*decltype(_impl_.point_size_)*/nullptr
  , /*decltype(_impl_.point_shape_)*/nullptr
  , /*decltype(_impl_.plot_style_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_MultiSeriesDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal _FigureDescriptor_MultiSeriesDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.default_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FigureDescriptor_StringMapWithDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_StringMapWithDefaultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_StringMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_StringMapWithDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_StringMapWithDefaultDefaultTypeInternal _FigureDescriptor_StringMapWithDefault_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.default_double_)*/0} {}
struct FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_DoubleMapWithDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal _FigureDescriptor_DoubleMapWithDefault_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.default_bool_)*/false} {}
struct FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_BoolMapWithDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal _FigureDescriptor_BoolMapWithDefault_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.major_tick_locations_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticks_font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.business_calendar_descriptor_)*/nullptr
  , /*decltype(_impl_.format_type_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.min_range_)*/0
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.log_)*/false
  , /*decltype(_impl_.minor_ticks_visible_)*/false
  , /*decltype(_impl_.major_ticks_visible_)*/false
  , /*decltype(_impl_.invert_)*/false
  , /*decltype(_impl_.max_range_)*/0
  , /*decltype(_impl_.gap_between_major_ticks_)*/0
  , /*decltype(_impl_.minor_tick_count_)*/0
  , /*decltype(_impl_.is_time_axis_)*/false
  , /*decltype(_impl_.tick_label_angle_)*/0} {}
struct FigureDescriptor_AxisDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_AxisDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_AxisDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_AxisDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_AxisDescriptorDefaultTypeInternal _FigureDescriptor_AxisDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.open_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.close_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.business_periods_)*/{}
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_Holiday _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_Holiday_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.year_)*/0
  , /*decltype(_impl_.month_)*/0
  , /*decltype(_impl_.day_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_LocalDate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_LocalDate_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.business_days_)*/{}
  , /*decltype(_impl_._business_days_cached_byte_size_)*/{0}
  , /*decltype(_impl_.business_periods_)*/{}
  , /*decltype(_impl_.holidays_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_zone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.axis_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.partitioned_table_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_MultiSeriesSourceDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal _FigureDescriptor_MultiSeriesSourceDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.axis_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.column_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.one_click_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.table_id_)*/0
  , /*decltype(_impl_.partitioned_table_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_SourceDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_SourceDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_SourceDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_SourceDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_SourceDescriptorDefaultTypeInternal _FigureDescriptor_SourceDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_)*/{}
  , /*decltype(_impl_.column_types_)*/{}
  , /*decltype(_impl_.require_all_filters_to_display_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FigureDescriptor_OneClickDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_OneClickDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_OneClickDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_OneClickDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_OneClickDescriptorDefaultTypeInternal _FigureDescriptor_OneClickDescriptor_default_instance_;
PROTOBUF_CONSTEXPR FigureDescriptor::FigureDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.charts_)*/{}
  , /*decltype(_impl_.errors_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.update_interval_)*/int64_t{0}
  , /*decltype(_impl_.cols_)*/0
  , /*decltype(_impl_.rows_)*/0} {}
struct FigureDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptorDefaultTypeInternal _FigureDescriptor_default_instance_;
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::_pb::Metadata file_level_metadata_deephaven_2fproto_2fconsole_2eproto[60];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_deephaven_2fproto_2fconsole_2eproto = nullptr;

const uint32_t TableStruct_deephaven_2fproto_2fconsole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, _impl_.console_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _impl_.session_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, _impl_.result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _impl_.max_memory_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _impl_.total_memory_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _impl_.free_memory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _impl_.last_seen_log_timestamp_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _impl_.levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _impl_.micros_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _impl_.log_level_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _impl_.changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _impl_.variable_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _impl_.table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _impl_.command_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_.request_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_.success_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _impl_.text_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.language_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _impl_.text_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_length_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _impl_.text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _impl_.content_changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _impl_.character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::MarkupContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::MarkupContent, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::MarkupContent, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.console_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _impl_.trigger_kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _impl_.trigger_character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.detail_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.deprecated_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.preselect_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.text_edit_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.sort_text_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.filter_text_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.insert_text_format_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.additional_text_edits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.commit_characters_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.documentation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _impl_.text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.trigger_kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.trigger_character_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.is_retrigger_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.active_signature_help_),
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_.signatures_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_.active_signature_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_.active_parameter_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.documentation_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.active_parameter_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ParameterInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ParameterInformation, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ParameterInformation, _impl_.documentation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest, _impl_.text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse, _impl_.contents_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_.text_document_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_.previous_result_id_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_.items_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_.diagnostics_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription, _impl_.href_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.severity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.code_description_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.data_),
  ~0u,
  ~0u,
  0,
  3,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.colspan_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.rowspan_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.series_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.multi_series_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.axes_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.chart_type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.title_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.title_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.show_legend_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.legend_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.legend_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.is3d_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.row_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.plot_style_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.lines_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shapes_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.gradient_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.line_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.point_label_format_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.x_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.y_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.data_sources_),
  ~0u,
  ~0u,
  3,
  4,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.plot_style_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.line_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.lines_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.points_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.gradient_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_format_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.x_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.y_tool_tip_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_shape_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.data_sources_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_.default_string_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_.values_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_.default_double_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_.values_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_.default_bool_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_.values_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.format_type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.log_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.label_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.ticks_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.format_pattern_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.min_range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.max_range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.minor_ticks_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.major_ticks_visible_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.minor_tick_count_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.gap_between_major_ticks_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.major_tick_locations_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.tick_label_angle_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.invert_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.is_time_axis_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.business_calendar_descriptor_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.close_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.business_periods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.time_zone_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_days_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_periods_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.holidays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.axis_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.partitioned_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.axis_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.partitioned_table_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.column_type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.one_click_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _impl_.columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _impl_.column_types_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _impl_.require_all_filters_to_display_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.title_font_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.title_color_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.update_interval_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.cols_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.rows_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.charts_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.errors_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest)},
  { 6, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse)},
  { 13, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest)},
  { 21, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse)},
  { 28, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest)},
  { 34, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse)},
  { 43, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest)},
  { 51, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData)},
  { 60, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest)},
  { 68, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse)},
  { 76, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest)},
  { 85, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse)},
  { 91, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest)},
  { 99, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse)},
  { 105, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest)},
  { 113, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse)},
  { 119, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest)},
  { 135, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse)},
  { 149, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse)},
  { 155, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest)},
  { 163, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem)},
  { 173, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest)},
  { 181, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent)},
  { 190, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest)},
  { 199, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::DocumentRange)},
  { 207, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier)},
  { 215, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Position)},
  { 223, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::MarkupContent)},
  { 231, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest)},
  { 242, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionContext)},
  { 250, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse)},
  { 259, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionItem)},
  { 279, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextEdit)},
  { 287, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest)},
  { 296, 306, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext)},
  { 310, 319, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse)},
  { 322, 332, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::SignatureInformation)},
  { 336, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ParameterInformation)},
  { 344, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest)},
  { 352, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse)},
  { 360, 369, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest)},
  { 372, 381, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse)},
  { 384, 393, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse)},
  { 396, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription)},
  { 403, 417, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Diagnostic)},
  { 425, 446, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor)},
  { 461, 481, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor)},
  { 495, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor)},
  { 515, 524, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault)},
  { 527, 536, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault)},
  { 539, 548, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault)},
  { 551, 578, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor)},
  { 599, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod)},
  { 607, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday)},
  { 615, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate)},
  { 624, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor)},
  { 635, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor)},
  { 645, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor)},
  { 658, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor)},
  { 667, 681, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_StartConsoleRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_StartConsoleResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetHeapInfoRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetHeapInfoResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionData_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_CancelCommandRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_CancelCommandResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_CancelAutoCompleteRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_CancelAutoCompleteResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_AutoCompleteRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_AutoCompleteResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_BrowserNextResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_OpenDocumentRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_TextDocumentItem_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_CloseDocumentRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_DocumentRange_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_VersionedTextDocumentIdentifier_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_Position_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_MarkupContent_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_CompletionContext_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_CompletionItem_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_TextEdit_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetSignatureHelpRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_SignatureHelpContext_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetSignatureHelpResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_SignatureInformation_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_ParameterInformation_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetHoverRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetHoverResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetDiagnosticRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetPullDiagnosticResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_GetPublishDiagnosticResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_Diagnostic_CodeDescription_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_Diagnostic_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_ChartDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_SeriesDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_MultiSeriesDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_StringMapWithDefault_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_DoubleMapWithDefault_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BoolMapWithDefault_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_AxisDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_Holiday_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_LocalDate_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_MultiSeriesSourceDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_SourceDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_OneClickDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_default_instance_._instance,
};

const char descriptor_table_protodef_deephaven_2fproto_2fconsole_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035deephaven/proto/console.proto\022(io.deep"
  "haven.proto.backplane.script.grpc\032\034deeph"
  "aven/proto/ticket.proto\032!deephaven/proto"
  "/application.proto\"\030\n\026GetConsoleTypesReq"
  "uest\"0\n\027GetConsoleTypesResponse\022\025\n\rconso"
  "le_types\030\001 \003(\t\"i\n\023StartConsoleRequest\022<\n"
  "\tresult_id\030\001 \001(\0132).io.deephaven.proto.ba"
  "ckplane.grpc.Ticket\022\024\n\014session_type\030\002 \001("
  "\t\"T\n\024StartConsoleResponse\022<\n\tresult_id\030\001"
  " \001(\0132).io.deephaven.proto.backplane.grpc"
  ".Ticket\"\024\n\022GetHeapInfoRequest\"`\n\023GetHeap"
  "InfoResponse\022\026\n\nmax_memory\030\001 \001(\003B\0020\001\022\030\n\014"
  "total_memory\030\002 \001(\003B\0020\001\022\027\n\013free_memory\030\003 "
  "\001(\003B\0020\001\"M\n\026LogSubscriptionRequest\022#\n\027las"
  "t_seen_log_timestamp\030\001 \001(\003B\0020\001\022\016\n\006levels"
  "\030\002 \003(\t\"S\n\023LogSubscriptionData\022\022\n\006micros\030"
  "\001 \001(\003B\0020\001\022\021\n\tlog_level\030\002 \001(\t\022\017\n\007message\030"
  "\003 \001(\tJ\004\010\004\020\005\"j\n\025ExecuteCommandRequest\022=\n\n"
  "console_id\030\001 \001(\0132).io.deephaven.proto.ba"
  "ckplane.grpc.Ticket\022\014\n\004code\030\003 \001(\tJ\004\010\002\020\003\""
  "w\n\026ExecuteCommandResponse\022\025\n\rerror_messa"
  "ge\030\001 \001(\t\022F\n\007changes\030\002 \001(\01325.io.deephaven"
  ".proto.backplane.grpc.FieldsChangeUpdate"
  "\"\265\001\n\032BindTableToVariableRequest\022=\n\nconso"
  "le_id\030\001 \001(\0132).io.deephaven.proto.backpla"
  "ne.grpc.Ticket\022\025\n\rvariable_name\030\003 \001(\t\022;\n"
  "\010table_id\030\004 \001(\0132).io.deephaven.proto.bac"
  "kplane.grpc.TicketJ\004\010\002\020\003\"\035\n\033BindTableToV"
  "ariableResponse\"\224\001\n\024CancelCommandRequest"
  "\022=\n\nconsole_id\030\001 \001(\0132).io.deephaven.prot"
  "o.backplane.grpc.Ticket\022=\n\ncommand_id\030\002 "
  "\001(\0132).io.deephaven.proto.backplane.grpc."
  "Ticket\"\027\n\025CancelCommandResponse\"n\n\031Cance"
  "lAutoCompleteRequest\022=\n\nconsole_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\022\022\n\nrequest_id\030\002 \001(\005\"\034\n\032CancelAutoCom"
  "pleteResponse\"\361\005\n\023AutoCompleteRequest\022=\n"
  "\nconsole_id\030\005 \001(\0132).io.deephaven.proto.b"
  "ackplane.grpc.Ticket\022\022\n\nrequest_id\030\006 \001(\005"
  "\022V\n\ropen_document\030\001 \001(\0132=.io.deephaven.p"
  "roto.backplane.script.grpc.OpenDocumentR"
  "equestH\000\022Z\n\017change_document\030\002 \001(\0132\?.io.d"
  "eephaven.proto.backplane.script.grpc.Cha"
  "ngeDocumentRequestH\000\022c\n\024get_completion_i"
  "tems\030\003 \001(\0132C.io.deephaven.proto.backplan"
  "e.script.grpc.GetCompletionItemsRequestH"
  "\000\022_\n\022get_signature_help\030\007 \001(\0132A.io.deeph"
  "aven.proto.backplane.script.grpc.GetSign"
  "atureHelpRequestH\000\022N\n\tget_hover\030\010 \001(\01329."
  "io.deephaven.proto.backplane.script.grpc"
  ".GetHoverRequestH\000\022X\n\016get_diagnostic\030\t \001"
  "(\0132>.io.deephaven.proto.backplane.script"
  ".grpc.GetDiagnosticRequestH\000\022X\n\016close_do"
  "cument\030\004 \001(\0132>.io.deephaven.proto.backpl"
  "ane.script.grpc.CloseDocumentRequestH\000B\t"
  "\n\007request\"\221\004\n\024AutoCompleteResponse\022\022\n\nre"
  "quest_id\030\002 \001(\005\022\017\n\007success\030\003 \001(\010\022`\n\020compl"
  "etion_items\030\001 \001(\0132D.io.deephaven.proto.b"
  "ackplane.script.grpc.GetCompletionItemsR"
  "esponseH\000\022X\n\nsignatures\030\004 \001(\0132B.io.deeph"
  "aven.proto.backplane.script.grpc.GetSign"
  "atureHelpResponseH\000\022K\n\005hover\030\005 \001(\0132:.io."
  "deephaven.proto.backplane.script.grpc.Ge"
  "tHoverResponseH\000\022Y\n\ndiagnostic\030\006 \001(\0132C.i"
  "o.deephaven.proto.backplane.script.grpc."
  "GetPullDiagnosticResponseH\000\022d\n\022diagnosti"
  "c_publish\030\007 \001(\0132F.io.deephaven.proto.bac"
  "kplane.script.grpc.GetPublishDiagnosticR"
  "esponseH\000B\n\n\010response\"\025\n\023BrowserNextResp"
  "onse\"\253\001\n\023OpenDocumentRequest\022A\n\nconsole_"
  "id\030\001 \001(\0132).io.deephaven.proto.backplane."
  "grpc.TicketB\002\030\001\022Q\n\rtext_document\030\002 \001(\0132:"
  ".io.deephaven.proto.backplane.script.grp"
  "c.TextDocumentItem\"S\n\020TextDocumentItem\022\013"
  "\n\003uri\030\001 \001(\t\022\023\n\013language_id\030\002 \001(\t\022\017\n\007vers"
  "ion\030\003 \001(\005\022\014\n\004text\030\004 \001(\t\"\273\001\n\024CloseDocumen"
  "tRequest\022A\n\nconsole_id\030\001 \001(\0132).io.deepha"
  "ven.proto.backplane.grpc.TicketB\002\030\001\022`\n\rt"
  "ext_document\030\002 \001(\0132I.io.deephaven.proto."
  "backplane.script.grpc.VersionedTextDocum"
  "entIdentifier\"\304\003\n\025ChangeDocumentRequest\022"
  "A\n\nconsole_id\030\001 \001(\0132).io.deephaven.proto"
  ".backplane.grpc.TicketB\002\030\001\022`\n\rtext_docum"
  "ent\030\002 \001(\0132I.io.deephaven.proto.backplane"
  ".script.grpc.VersionedTextDocumentIdenti"
  "fier\022w\n\017content_changes\030\003 \003(\0132^.io.deeph"
  "aven.proto.backplane.script.grpc.ChangeD"
  "ocumentRequest.TextDocumentContentChange"
  "Event\032\214\001\n\036TextDocumentContentChangeEvent"
  "\022F\n\005range\030\001 \001(\01327.io.deephaven.proto.bac"
  "kplane.script.grpc.DocumentRange\022\024\n\014rang"
  "e_length\030\002 \001(\005\022\014\n\004text\030\003 \001(\t\"\223\001\n\rDocumen"
  "tRange\022A\n\005start\030\001 \001(\01322.io.deephaven.pro"
  "to.backplane.script.grpc.Position\022\?\n\003end"
  "\030\002 \001(\01322.io.deephaven.proto.backplane.sc"
  "ript.grpc.Position\"\?\n\037VersionedTextDocum"
  "entIdentifier\022\013\n\003uri\030\001 \001(\t\022\017\n\007version\030\002 "
  "\001(\005\"+\n\010Position\022\014\n\004line\030\001 \001(\005\022\021\n\tcharact"
  "er\030\002 \001(\005\",\n\rMarkupContent\022\014\n\004kind\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t\"\354\002\n\031GetCompletionItemsReq"
  "uest\022A\n\nconsole_id\030\001 \001(\0132).io.deephaven."
  "proto.backplane.grpc.TicketB\002\030\001\022L\n\007conte"
  "xt\030\002 \001(\0132;.io.deephaven.proto.backplane."
  "script.grpc.CompletionContext\022`\n\rtext_do"
  "cument\030\003 \001(\0132I.io.deephaven.proto.backpl"
  "ane.script.grpc.VersionedTextDocumentIde"
  "ntifier\022D\n\010position\030\004 \001(\01322.io.deephaven"
  ".proto.backplane.script.grpc.Position\022\026\n"
  "\nrequest_id\030\005 \001(\005B\002\030\001\"D\n\021CompletionConte"
  "xt\022\024\n\014trigger_kind\030\001 \001(\005\022\031\n\021trigger_char"
  "acter\030\002 \001(\t\"\222\001\n\032GetCompletionItemsRespon"
  "se\022G\n\005items\030\001 \003(\01328.io.deephaven.proto.b"
  "ackplane.script.grpc.CompletionItem\022\026\n\nr"
  "equest_id\030\002 \001(\005B\002\030\001\022\023\n\007success\030\003 \001(\010B\002\030\001"
  "\"\322\003\n\016CompletionItem\022\r\n\005start\030\001 \001(\005\022\016\n\006le"
  "ngth\030\002 \001(\005\022\r\n\005label\030\003 \001(\t\022\014\n\004kind\030\004 \001(\005\022"
  "\016\n\006detail\030\005 \001(\t\022\022\n\ndeprecated\030\007 \001(\010\022\021\n\tp"
  "reselect\030\010 \001(\010\022E\n\ttext_edit\030\t \001(\01322.io.d"
  "eephaven.proto.backplane.script.grpc.Tex"
  "tEdit\022\021\n\tsort_text\030\n \001(\t\022\023\n\013filter_text\030"
  "\013 \001(\t\022\032\n\022insert_text_format\030\014 \001(\005\022Q\n\025add"
  "itional_text_edits\030\r \003(\01322.io.deephaven."
  "proto.backplane.script.grpc.TextEdit\022\031\n\021"
  "commit_characters\030\016 \003(\t\022N\n\rdocumentation"
  "\030\017 \001(\01327.io.deephaven.proto.backplane.sc"
  "ript.grpc.MarkupContentJ\004\010\006\020\007\"`\n\010TextEdi"
  "t\022F\n\005range\030\001 \001(\01327.io.deephaven.proto.ba"
  "ckplane.script.grpc.DocumentRange\022\014\n\004tex"
  "t\030\002 \001(\t\"\222\002\n\027GetSignatureHelpRequest\022O\n\007c"
  "ontext\030\001 \001(\0132>.io.deephaven.proto.backpl"
  "ane.script.grpc.SignatureHelpContext\022`\n\r"
  "text_document\030\002 \001(\0132I.io.deephaven.proto"
  ".backplane.script.grpc.VersionedTextDocu"
  "mentIdentifier\022D\n\010position\030\003 \001(\01322.io.de"
  "ephaven.proto.backplane.script.grpc.Posi"
  "tion\"\333\001\n\024SignatureHelpContext\022\024\n\014trigger"
  "_kind\030\001 \001(\005\022\036\n\021trigger_character\030\002 \001(\tH\000"
  "\210\001\001\022\024\n\014is_retrigger\030\003 \001(\010\022a\n\025active_sign"
  "ature_help\030\004 \001(\0132B.io.deephaven.proto.ba"
  "ckplane.script.grpc.GetSignatureHelpResp"
  "onseB\024\n\022_trigger_character\"\326\001\n\030GetSignat"
  "ureHelpResponse\022R\n\nsignatures\030\001 \003(\0132>.io"
  ".deephaven.proto.backplane.script.grpc.S"
  "ignatureInformation\022\035\n\020active_signature\030"
  "\002 \001(\005H\000\210\001\001\022\035\n\020active_parameter\030\003 \001(\005H\001\210\001"
  "\001B\023\n\021_active_signatureB\023\n\021_active_parame"
  "ter\"\375\001\n\024SignatureInformation\022\r\n\005label\030\001 "
  "\001(\t\022N\n\rdocumentation\030\002 \001(\01327.io.deephave"
  "n.proto.backplane.script.grpc.MarkupCont"
  "ent\022R\n\nparameters\030\003 \003(\0132>.io.deephaven.p"
  "roto.backplane.script.grpc.ParameterInfo"
  "rmation\022\035\n\020active_parameter\030\004 \001(\005H\000\210\001\001B\023"
  "\n\021_active_parameter\"u\n\024ParameterInformat"
  "ion\022\r\n\005label\030\001 \001(\t\022N\n\rdocumentation\030\002 \001("
  "\01327.io.deephaven.proto.backplane.script."
  "grpc.MarkupContent\"\271\001\n\017GetHoverRequest\022`"
  "\n\rtext_document\030\001 \001(\0132I.io.deephaven.pro"
  "to.backplane.script.grpc.VersionedTextDo"
  "cumentIdentifier\022D\n\010position\030\002 \001(\01322.io."
  "deephaven.proto.backplane.script.grpc.Po"
  "sition\"\245\001\n\020GetHoverResponse\022I\n\010contents\030"
  "\001 \001(\01327.io.deephaven.proto.backplane.scr"
  "ipt.grpc.MarkupContent\022F\n\005range\030\002 \001(\01327."
  "io.deephaven.proto.backplane.script.grpc"
  ".DocumentRange\"\330\001\n\024GetDiagnosticRequest\022"
  "`\n\rtext_document\030\001 \001(\0132I.io.deephaven.pr"
  "oto.backplane.script.grpc.VersionedTextD"
  "ocumentIdentifier\022\027\n\nidentifier\030\002 \001(\tH\000\210"
  "\001\001\022\037\n\022previous_result_id\030\003 \001(\tH\001\210\001\001B\r\n\013_"
  "identifierB\025\n\023_previous_result_id\"\224\001\n\031Ge"
  "tPullDiagnosticResponse\022\014\n\004kind\030\001 \001(\t\022\026\n"
  "\tresult_id\030\002 \001(\tH\000\210\001\001\022C\n\005items\030\003 \003(\01324.i"
  "o.deephaven.proto.backplane.script.grpc."
  "DiagnosticB\014\n\n_result_id\"\230\001\n\034GetPublishD"
  "iagnosticResponse\022\013\n\003uri\030\001 \001(\t\022\024\n\007versio"
  "n\030\002 \001(\005H\000\210\001\001\022I\n\013diagnostics\030\003 \003(\01324.io.d"
  "eephaven.proto.backplane.script.grpc.Dia"
  "gnosticB\n\n\010_version\"\247\005\n\nDiagnostic\022F\n\005ra"
  "nge\030\001 \001(\01327.io.deephaven.proto.backplane"
  ".script.grpc.DocumentRange\022Y\n\010severity\030\002"
  " \001(\0162G.io.deephaven.proto.backplane.scri"
  "pt.grpc.Diagnostic.DiagnosticSeverity\022\021\n"
  "\004code\030\003 \001(\tH\000\210\001\001\022c\n\020code_description\030\004 \001"
  "(\0132D.io.deephaven.proto.backplane.script"
  ".grpc.Diagnostic.CodeDescriptionH\001\210\001\001\022\023\n"
  "\006source\030\005 \001(\tH\002\210\001\001\022\017\n\007message\030\006 \001(\t\022P\n\004t"
  "ags\030\007 \003(\0162B.io.deephaven.proto.backplane"
  ".script.grpc.Diagnostic.DiagnosticTag\022\021\n"
  "\004data\030\t \001(\014H\003\210\001\001\032\037\n\017CodeDescription\022\014\n\004h"
  "ref\030\001 \001(\t\"]\n\022DiagnosticSeverity\022\024\n\020NOT_S"
  "ET_SEVERITY\020\000\022\t\n\005ERROR\020\001\022\013\n\007WARNING\020\002\022\017\n"
  "\013INFORMATION\020\003\022\010\n\004HINT\020\004\"A\n\rDiagnosticTa"
  "g\022\017\n\013NOT_SET_TAG\020\000\022\017\n\013UNNECESSARY\020\001\022\016\n\nD"
  "EPRECATED\020\002B\007\n\005_codeB\023\n\021_code_descriptio"
  "nB\t\n\007_sourceB\007\n\005_data\"\3460\n\020FigureDescript"
  "or\022\022\n\005title\030\001 \001(\tH\000\210\001\001\022\022\n\ntitle_font\030\002 \001"
  "(\t\022\023\n\013title_color\030\003 \001(\t\022\033\n\017update_interv"
  "al\030\007 \001(\003B\0020\001\022\014\n\004cols\030\010 \001(\005\022\014\n\004rows\030\t \001(\005"
  "\022Z\n\006charts\030\n \003(\0132J.io.deephaven.proto.ba"
  "ckplane.script.grpc.FigureDescriptor.Cha"
  "rtDescriptor\022\016\n\006errors\030\r \003(\t\032\316\005\n\017ChartDe"
  "scriptor\022\017\n\007colspan\030\001 \001(\005\022\017\n\007rowspan\030\002 \001"
  "(\005\022[\n\006series\030\003 \003(\0132K.io.deephaven.proto."
  "backplane.script.grpc.FigureDescriptor.S"
  "eriesDescriptor\022f\n\014multi_series\030\004 \003(\0132P."
  "io.deephaven.proto.backplane.script.grpc"
  ".FigureDescriptor.MultiSeriesDescriptor\022"
  "W\n\004axes\030\005 \003(\0132I.io.deephaven.proto.backp"
  "lane.script.grpc.FigureDescriptor.AxisDe"
  "scriptor\022h\n\nchart_type\030\006 \001(\0162T.io.deepha"
  "ven.proto.backplane.script.grpc.FigureDe"
  "scriptor.ChartDescriptor.ChartType\022\022\n\005ti"
  "tle\030\007 \001(\tH\000\210\001\001\022\022\n\ntitle_font\030\010 \001(\t\022\023\n\013ti"
  "tle_color\030\t \001(\t\022\023\n\013show_legend\030\n \001(\010\022\023\n\013"
  "legend_font\030\013 \001(\t\022\024\n\014legend_color\030\014 \001(\t\022"
  "\014\n\004is3d\030\r \001(\010\022\016\n\006column\030\016 \001(\005\022\013\n\003row\030\017 \001"
  "(\005\"_\n\tChartType\022\006\n\002XY\020\000\022\007\n\003PIE\020\001\022\014\n\004OHLC"
  "\020\002\032\002\010\001\022\014\n\010CATEGORY\020\003\022\007\n\003XYZ\020\004\022\017\n\013CATEGOR"
  "Y_3D\020\005\022\013\n\007TREEMAP\020\006B\010\n\006_title\032\376\004\n\020Series"
  "Descriptor\022^\n\nplot_style\030\001 \001(\0162J.io.deep"
  "haven.proto.backplane.script.grpc.Figure"
  "Descriptor.SeriesPlotStyle\022\014\n\004name\030\002 \001(\t"
  "\022\032\n\rlines_visible\030\003 \001(\010H\000\210\001\001\022\033\n\016shapes_v"
  "isible\030\004 \001(\010H\001\210\001\001\022\030\n\020gradient_visible\030\005 "
  "\001(\010\022\022\n\nline_color\030\006 \001(\t\022\037\n\022point_label_f"
  "ormat\030\010 \001(\tH\002\210\001\001\022\037\n\022x_tool_tip_pattern\030\t"
  " \001(\tH\003\210\001\001\022\037\n\022y_tool_tip_pattern\030\n \001(\tH\004\210"
  "\001\001\022\023\n\013shape_label\030\013 \001(\t\022\027\n\nshape_size\030\014 "
  "\001(\001H\005\210\001\001\022\023\n\013shape_color\030\r \001(\t\022\r\n\005shape\030\016"
  " \001(\t\022a\n\014data_sources\030\017 \003(\0132K.io.deephave"
  "n.proto.backplane.script.grpc.FigureDesc"
  "riptor.SourceDescriptorB\020\n\016_lines_visibl"
  "eB\021\n\017_shapes_visibleB\025\n\023_point_label_for"
  "matB\025\n\023_x_tool_tip_patternB\025\n\023_y_tool_ti"
  "p_patternB\r\n\013_shape_sizeJ\004\010\007\020\010\032\354\n\n\025Multi"
  "SeriesDescriptor\022^\n\nplot_style\030\001 \001(\0162J.i"
  "o.deephaven.proto.backplane.script.grpc."
  "FigureDescriptor.SeriesPlotStyle\022\014\n\004name"
  "\030\002 \001(\t\022c\n\nline_color\030\003 \001(\0132O.io.deephave"
  "n.proto.backplane.script.grpc.FigureDesc"
  "riptor.StringMapWithDefault\022d\n\013point_col"
  "or\030\004 \001(\0132O.io.deephaven.proto.backplane."
  "script.grpc.FigureDescriptor.StringMapWi"
  "thDefault\022d\n\rlines_visible\030\005 \001(\0132M.io.de"
  "ephaven.proto.backplane.script.grpc.Figu"
  "reDescriptor.BoolMapWithDefault\022e\n\016point"
  "s_visible\030\006 \001(\0132M.io.deephaven.proto.bac"
  "kplane.script.grpc.FigureDescriptor.Bool"
  "MapWithDefault\022g\n\020gradient_visible\030\007 \001(\013"
  "2M.io.deephaven.proto.backplane.script.g"
  "rpc.FigureDescriptor.BoolMapWithDefault\022"
  "k\n\022point_label_format\030\010 \001(\0132O.io.deephav"
  "en.proto.backplane.script.grpc.FigureDes"
  "criptor.StringMapWithDefault\022k\n\022x_tool_t"
  "ip_pattern\030\t \001(\0132O.io.deephaven.proto.ba"
  "ckplane.script.grpc.FigureDescriptor.Str"
  "ingMapWithDefault\022k\n\022y_tool_tip_pattern\030"
  "\n \001(\0132O.io.deephaven.proto.backplane.scr"
  "ipt.grpc.FigureDescriptor.StringMapWithD"
  "efault\022d\n\013point_label\030\013 \001(\0132O.io.deephav"
  "en.proto.backplane.script.grpc.FigureDes"
  "criptor.StringMapWithDefault\022c\n\npoint_si"
  "ze\030\014 \001(\0132O.io.deephaven.proto.backplane."
  "script.grpc.FigureDescriptor.DoubleMapWi"
  "thDefault\022d\n\013point_shape\030\r \001(\0132O.io.deep"
  "haven.proto.backplane.script.grpc.Figure"
  "Descriptor.StringMapWithDefault\022l\n\014data_"
  "sources\030\016 \003(\0132V.io.deephaven.proto.backp"
  "lane.script.grpc.FigureDescriptor.MultiS"
  "eriesSourceDescriptor\032d\n\024StringMapWithDe"
  "fault\022\033\n\016default_string\030\001 \001(\tH\000\210\001\001\022\014\n\004ke"
  "ys\030\002 \003(\t\022\016\n\006values\030\003 \003(\tB\021\n\017_default_str"
  "ing\032d\n\024DoubleMapWithDefault\022\033\n\016default_d"
  "ouble\030\001 \001(\001H\000\210\001\001\022\014\n\004keys\030\002 \003(\t\022\016\n\006values"
  "\030\003 \003(\001B\021\n\017_default_double\032^\n\022BoolMapWith"
  "Default\022\031\n\014default_bool\030\001 \001(\010H\000\210\001\001\022\014\n\004ke"
  "ys\030\002 \003(\t\022\016\n\006values\030\003 \003(\010B\017\n\r_default_boo"
  "l\032\246\010\n\016AxisDescriptor\022\n\n\002id\030\001 \001(\t\022m\n\013form"
  "at_type\030\002 \001(\0162X.io.deephaven.proto.backp"
  "lane.script.grpc.FigureDescriptor.AxisDe"
  "scriptor.AxisFormatType\022`\n\004type\030\003 \001(\0162R."
  "io.deephaven.proto.backplane.script.grpc"
  ".FigureDescriptor.AxisDescriptor.AxisTyp"
  "e\022h\n\010position\030\004 \001(\0162V.io.deephaven.proto"
  ".backplane.script.grpc.FigureDescriptor."
  "AxisDescriptor.AxisPosition\022\013\n\003log\030\005 \001(\010"
  "\022\r\n\005label\030\006 \001(\t\022\022\n\nlabel_font\030\007 \001(\t\022\022\n\nt"
  "icks_font\030\010 \001(\t\022\033\n\016format_pattern\030\t \001(\tH"
  "\000\210\001\001\022\r\n\005color\030\n \001(\t\022\021\n\tmin_range\030\013 \001(\001\022\021"
  "\n\tmax_range\030\014 \001(\001\022\033\n\023minor_ticks_visible"
  "\030\r \001(\010\022\033\n\023major_ticks_visible\030\016 \001(\010\022\030\n\020m"
  "inor_tick_count\030\017 \001(\005\022$\n\027gap_between_maj"
  "or_ticks\030\020 \001(\001H\001\210\001\001\022\034\n\024major_tick_locati"
  "ons\030\021 \003(\001\022\030\n\020tick_label_angle\030\022 \001(\001\022\016\n\006i"
  "nvert\030\023 \001(\010\022\024\n\014is_time_axis\030\024 \001(\010\022{\n\034bus"
  "iness_calendar_descriptor\030\025 \001(\0132U.io.dee"
  "phaven.proto.backplane.script.grpc.Figur"
  "eDescriptor.BusinessCalendarDescriptor\"*"
  "\n\016AxisFormatType\022\014\n\010CATEGORY\020\000\022\n\n\006NUMBER"
  "\020\001\"C\n\010AxisType\022\005\n\001X\020\000\022\005\n\001Y\020\001\022\t\n\005SHAPE\020\002\022"
  "\010\n\004SIZE\020\003\022\t\n\005LABEL\020\004\022\t\n\005COLOR\020\005\"B\n\014AxisP"
  "osition\022\007\n\003TOP\020\000\022\n\n\006BOTTOM\020\001\022\010\n\004LEFT\020\002\022\t"
  "\n\005RIGHT\020\003\022\010\n\004NONE\020\004B\021\n\017_format_patternB\032"
  "\n\030_gap_between_major_ticks\032\360\006\n\032BusinessC"
  "alendarDescriptor\022\014\n\004name\030\001 \001(\t\022\021\n\ttime_"
  "zone\030\002 \001(\t\022v\n\rbusiness_days\030\003 \003(\0162_.io.d"
  "eephaven.proto.backplane.script.grpc.Fig"
  "ureDescriptor.BusinessCalendarDescriptor"
  ".DayOfWeek\022~\n\020business_periods\030\004 \003(\0132d.i"
  "o.deephaven.proto.backplane.script.grpc."
  "FigureDescriptor.BusinessCalendarDescrip"
  "tor.BusinessPeriod\022o\n\010holidays\030\005 \003(\0132].i"
  "o.deephaven.proto.backplane.script.grpc."
  "FigureDescriptor.BusinessCalendarDescrip"
  "tor.Holiday\032-\n\016BusinessPeriod\022\014\n\004open\030\001 "
  "\001(\t\022\r\n\005close\030\002 \001(\t\032\370\001\n\007Holiday\022m\n\004date\030\001"
  " \001(\0132_.io.deephaven.proto.backplane.scri"
  "pt.grpc.FigureDescriptor.BusinessCalenda"
  "rDescriptor.LocalDate\022~\n\020business_period"
  "s\030\002 \003(\0132d.io.deephaven.proto.backplane.s"
  "cript.grpc.FigureDescriptor.BusinessCale"
  "ndarDescriptor.BusinessPeriod\0325\n\tLocalDa"
  "te\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003"
  " \001(\005\"g\n\tDayOfWeek\022\n\n\006SUNDAY\020\000\022\n\n\006MONDAY\020"
  "\001\022\013\n\007TUESDAY\020\002\022\r\n\tWEDNESDAY\020\003\022\014\n\010THURSDA"
  "Y\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010SATURDAY\020\006\032\266\001\n\033MultiS"
  "eriesSourceDescriptor\022\017\n\007axis_id\030\001 \001(\t\022S"
  "\n\004type\030\002 \001(\0162E.io.deephaven.proto.backpl"
  "ane.script.grpc.FigureDescriptor.SourceT"
  "ype\022\034\n\024partitioned_table_id\030\003 \001(\005\022\023\n\013col"
  "umn_name\030\004 \001(\t\032\264\002\n\020SourceDescriptor\022\017\n\007a"
  "xis_id\030\001 \001(\t\022S\n\004type\030\002 \001(\0162E.io.deephave"
  "n.proto.backplane.script.grpc.FigureDesc"
  "riptor.SourceType\022\020\n\010table_id\030\003 \001(\005\022\034\n\024p"
  "artitioned_table_id\030\004 \001(\005\022\023\n\013column_name"
  "\030\005 \001(\t\022\023\n\013column_type\030\006 \001(\t\022`\n\tone_click"
  "\030\007 \001(\0132M.io.deephaven.proto.backplane.sc"
  "ript.grpc.FigureDescriptor.OneClickDescr"
  "iptor\032c\n\022OneClickDescriptor\022\017\n\007columns\030\001"
  " \003(\t\022\024\n\014column_types\030\002 \003(\t\022&\n\036require_al"
  "l_filters_to_display\030\003 \001(\010\"\246\001\n\017SeriesPlo"
  "tStyle\022\007\n\003BAR\020\000\022\017\n\013STACKED_BAR\020\001\022\010\n\004LINE"
  "\020\002\022\010\n\004AREA\020\003\022\020\n\014STACKED_AREA\020\004\022\007\n\003PIE\020\005\022"
  "\r\n\tHISTOGRAM\020\006\022\010\n\004OHLC\020\007\022\013\n\007SCATTER\020\010\022\010\n"
  "\004STEP\020\t\022\r\n\tERROR_BAR\020\n\022\013\n\007TREEMAP\020\013\"\322\001\n\n"
  "SourceType\022\005\n\001X\020\000\022\005\n\001Y\020\001\022\005\n\001Z\020\002\022\t\n\005X_LOW"
  "\020\003\022\n\n\006X_HIGH\020\004\022\t\n\005Y_LOW\020\005\022\n\n\006Y_HIGH\020\006\022\010\n"
  "\004TIME\020\007\022\010\n\004OPEN\020\010\022\010\n\004HIGH\020\t\022\007\n\003LOW\020\n\022\t\n\005"
  "CLOSE\020\013\022\t\n\005SHAPE\020\014\022\010\n\004SIZE\020\r\022\t\n\005LABEL\020\016\022"
  "\t\n\005COLOR\020\017\022\n\n\006PARENT\020\020\022\016\n\nHOVER_TEXT\020\021\022\010"
  "\n\004TEXT\020\022B\010\n\006_titleJ\004\010\013\020\014J\004\010\014\020\r2\262\r\n\016Conso"
  "leService\022\230\001\n\017GetConsoleTypes\022@.io.deeph"
  "aven.proto.backplane.script.grpc.GetCons"
  "oleTypesRequest\032A.io.deephaven.proto.bac"
  "kplane.script.grpc.GetConsoleTypesRespon"
  "se\"\000\022\217\001\n\014StartConsole\022=.io.deephaven.pro"
  "to.backplane.script.grpc.StartConsoleReq"
  "uest\032>.io.deephaven.proto.backplane.scri"
  "pt.grpc.StartConsoleResponse\"\000\022\214\001\n\013GetHe"
  "apInfo\022<.io.deephaven.proto.backplane.sc"
  "ript.grpc.GetHeapInfoRequest\032=.io.deepha"
  "ven.proto.backplane.script.grpc.GetHeapI"
  "nfoResponse\"\000\022\226\001\n\017SubscribeToLogs\022@.io.d"
  "eephaven.proto.backplane.script.grpc.Log"
  "SubscriptionRequest\032=.io.deephaven.proto"
  ".backplane.script.grpc.LogSubscriptionDa"
  "ta\"\0000\001\022\225\001\n\016ExecuteCommand\022\?.io.deephaven"
  ".proto.backplane.script.grpc.ExecuteComm"
  "andRequest\032@.io.deephaven.proto.backplan"
  "e.script.grpc.ExecuteCommandResponse\"\000\022\222"
  "\001\n\rCancelCommand\022>.io.deephaven.proto.ba"
  "ckplane.script.grpc.CancelCommandRequest"
  "\032\?.io.deephaven.proto.backplane.script.g"
  "rpc.CancelCommandResponse\"\000\022\244\001\n\023BindTabl"
  "eToVariable\022D.io.deephaven.proto.backpla"
  "ne.script.grpc.BindTableToVariableReques"
  "t\032E.io.deephaven.proto.backplane.script."
  "grpc.BindTableToVariableResponse\"\000\022\231\001\n\022A"
  "utoCompleteStream\022=.io.deephaven.proto.b"
  "ackplane.script.grpc.AutoCompleteRequest"
  "\032>.io.deephaven.proto.backplane.script.g"
  "rpc.AutoCompleteResponse\"\000(\0010\001\022\241\001\n\022Cance"
  "lAutoComplete\022C.io.deephaven.proto.backp"
  "lane.script.grpc.CancelAutoCompleteReque"
  "st\032D.io.deephaven.proto.backplane.script"
  ".grpc.CancelAutoCompleteResponse\"\000\022\233\001\n\026O"
  "penAutoCompleteStream\022=.io.deephaven.pro"
  "to.backplane.script.grpc.AutoCompleteReq"
  "uest\032>.io.deephaven.proto.backplane.scri"
  "pt.grpc.AutoCompleteResponse\"\0000\001\022\230\001\n\026Nex"
  "tAutoCompleteStream\022=.io.deephaven.proto"
  ".backplane.script.grpc.AutoCompleteReque"
  "st\032=.io.deephaven.proto.backplane.script"
  ".grpc.BrowserNextResponse\"\000BCH\001P\001Z=githu"
  "b.com/deephaven/deephaven-core/go/intern"
  "al/proto/consoleb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2fconsole_2eproto_deps[2] = {
  &::descriptor_table_deephaven_2fproto_2fapplication_2eproto,
  &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::_pbi::once_flag descriptor_table_deephaven_2fproto_2fconsole_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2fconsole_2eproto = {
    false, false, 15824, descriptor_table_protodef_deephaven_2fproto_2fconsole_2eproto,
    "deephaven/proto/console.proto",
    &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once, descriptor_table_deephaven_2fproto_2fconsole_2eproto_deps, 2, 60,
    schemas, file_default_instances, TableStruct_deephaven_2fproto_2fconsole_2eproto::offsets,
    file_level_metadata_deephaven_2fproto_2fconsole_2eproto, file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2fconsole_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter() {
  return &descriptor_table_deephaven_2fproto_2fconsole_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2fconsole_2eproto(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Diagnostic_DiagnosticSeverity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[0];
}
bool Diagnostic_DiagnosticSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Diagnostic_DiagnosticSeverity Diagnostic::NOT_SET_SEVERITY;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::ERROR;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::WARNING;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::INFORMATION;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::HINT;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::DiagnosticSeverity_MIN;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::DiagnosticSeverity_MAX;
constexpr int Diagnostic::DiagnosticSeverity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Diagnostic_DiagnosticTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[1];
}
bool Diagnostic_DiagnosticTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Diagnostic_DiagnosticTag Diagnostic::NOT_SET_TAG;
constexpr Diagnostic_DiagnosticTag Diagnostic::UNNECESSARY;
constexpr Diagnostic_DiagnosticTag Diagnostic::DEPRECATED;
constexpr Diagnostic_DiagnosticTag Diagnostic::DiagnosticTag_MIN;
constexpr Diagnostic_DiagnosticTag Diagnostic::DiagnosticTag_MAX;
constexpr int Diagnostic::DiagnosticTag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_ChartDescriptor_ChartType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[2];
}
bool FigureDescriptor_ChartDescriptor_ChartType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::XY;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::PIE;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::OHLC;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::CATEGORY;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::XYZ;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::CATEGORY_3D;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::TREEMAP;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::ChartType_MIN;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::ChartType_MAX;
constexpr int FigureDescriptor_ChartDescriptor::ChartType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisFormatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[3];
}
bool FigureDescriptor_AxisDescriptor_AxisFormatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::CATEGORY;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::NUMBER;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::AxisFormatType_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::AxisFormatType_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisFormatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[4];
}
bool FigureDescriptor_AxisDescriptor_AxisType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::X;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::Y;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::SHAPE;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::SIZE;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::LABEL;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::COLOR;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::AxisType_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::AxisType_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[5];
}
bool FigureDescriptor_AxisDescriptor_AxisPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::TOP;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::BOTTOM;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::LEFT;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::RIGHT;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::NONE;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::AxisPosition_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::AxisPosition_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[6];
}
bool FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::SUNDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::MONDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::TUESDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::WEDNESDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::THURSDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::FRIDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::SATURDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_MIN;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_MAX;
constexpr int FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_SeriesPlotStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[7];
}
bool FigureDescriptor_SeriesPlotStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STACKED_BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::LINE;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::AREA;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STACKED_AREA;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::PIE;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::HISTOGRAM;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::OHLC;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SCATTER;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STEP;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::ERROR_BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::TREEMAP;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SeriesPlotStyle_MIN;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SeriesPlotStyle_MAX;
constexpr int FigureDescriptor::SeriesPlotStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FigureDescriptor_SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[8];
}
bool FigureDescriptor_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FigureDescriptor_SourceType FigureDescriptor::X;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y;
constexpr FigureDescriptor_SourceType FigureDescriptor::Z;
constexpr FigureDescriptor_SourceType FigureDescriptor::X_LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::X_HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y_LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y_HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::TIME;
constexpr FigureDescriptor_SourceType FigureDescriptor::OPEN;
constexpr FigureDescriptor_SourceType FigureDescriptor::HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::CLOSE;
constexpr FigureDescriptor_SourceType FigureDescriptor::SHAPE;
constexpr FigureDescriptor_SourceType FigureDescriptor::SIZE;
constexpr FigureDescriptor_SourceType FigureDescriptor::LABEL;
constexpr FigureDescriptor_SourceType FigureDescriptor::COLOR;
constexpr FigureDescriptor_SourceType FigureDescriptor::PARENT;
constexpr FigureDescriptor_SourceType FigureDescriptor::HOVER_TEXT;
constexpr FigureDescriptor_SourceType FigureDescriptor::TEXT;
constexpr FigureDescriptor_SourceType FigureDescriptor::SourceType_MIN;
constexpr FigureDescriptor_SourceType FigureDescriptor::SourceType_MAX;
constexpr int FigureDescriptor::SourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GetConsoleTypesRequest::_Internal {
 public:
};

GetConsoleTypesRequest::GetConsoleTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}
GetConsoleTypesRequest::GetConsoleTypesRequest(const GetConsoleTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetConsoleTypesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConsoleTypesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConsoleTypesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetConsoleTypesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[0]);
}

// ===================================================================

class GetConsoleTypesResponse::_Internal {
 public:
};

GetConsoleTypesResponse::GetConsoleTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}
GetConsoleTypesResponse::GetConsoleTypesResponse(const GetConsoleTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConsoleTypesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.console_types_){from._impl_.console_types_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}

inline void GetConsoleTypesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.console_types_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetConsoleTypesResponse::~GetConsoleTypesResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConsoleTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.console_types_.~RepeatedPtrField();
}

void GetConsoleTypesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConsoleTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.console_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConsoleTypesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string console_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_console_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConsoleTypesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string console_types = 1;
  for (int i = 0, n = this->_internal_console_types_size(); i < n; i++) {
    const auto& s = this->_internal_console_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  return target;
}

size_t GetConsoleTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string console_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.console_types_.size());
  for (int i = 0, n = _impl_.console_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.console_types_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConsoleTypesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConsoleTypesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConsoleTypesResponse::GetClassData() const { return &_class_data_; }


void GetConsoleTypesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConsoleTypesResponse*>(&to_msg);
  auto& from = static_cast<const GetConsoleTypesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.console_types_.MergeFrom(from._impl_.console_types_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsoleTypesResponse::CopyFrom(const GetConsoleTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsoleTypesResponse::IsInitialized() const {
  return true;
}

void GetConsoleTypesResponse::InternalSwap(GetConsoleTypesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.console_types_.InternalSwap(&other->_impl_.console_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConsoleTypesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[1]);
}

// ===================================================================

class StartConsoleRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const StartConsoleRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
StartConsoleRequest::_Internal::result_id(const StartConsoleRequest* msg) {
  return *msg->_impl_.result_id_;
}
void StartConsoleRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
StartConsoleRequest::StartConsoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}
StartConsoleRequest::StartConsoleRequest(const StartConsoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartConsoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_type_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_type().empty()) {
    _this->_impl_.session_type_.Set(from._internal_session_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}

inline void StartConsoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_type_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartConsoleRequest::~StartConsoleRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartConsoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void StartConsoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartConsoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartConsoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartConsoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // string session_type = 2;
  if (!this->_internal_session_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_type().data(), static_cast<int>(this->_internal_session_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  return target;
}

size_t StartConsoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_type = 2;
  if (!this->_internal_session_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_type());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartConsoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartConsoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartConsoleRequest::GetClassData() const { return &_class_data_; }


void StartConsoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartConsoleRequest*>(&to_msg);
  auto& from = static_cast<const StartConsoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_type().empty()) {
    _this->_internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartConsoleRequest::CopyFrom(const StartConsoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartConsoleRequest::IsInitialized() const {
  return true;
}

void StartConsoleRequest::InternalSwap(StartConsoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_type_, lhs_arena,
      &other->_impl_.session_type_, rhs_arena
  );
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartConsoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[2]);
}

// ===================================================================

class StartConsoleResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const StartConsoleResponse* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
StartConsoleResponse::_Internal::result_id(const StartConsoleResponse* msg) {
  return *msg->_impl_.result_id_;
}
void StartConsoleResponse::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
StartConsoleResponse::StartConsoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}
StartConsoleResponse::StartConsoleResponse(const StartConsoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartConsoleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}

inline void StartConsoleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StartConsoleResponse::~StartConsoleResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartConsoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void StartConsoleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartConsoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartConsoleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartConsoleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  return target;
}

size_t StartConsoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartConsoleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartConsoleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartConsoleResponse::GetClassData() const { return &_class_data_; }


void StartConsoleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartConsoleResponse*>(&to_msg);
  auto& from = static_cast<const StartConsoleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartConsoleResponse::CopyFrom(const StartConsoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartConsoleResponse::IsInitialized() const {
  return true;
}

void StartConsoleResponse::InternalSwap(StartConsoleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartConsoleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[3]);
}

// ===================================================================

class GetHeapInfoRequest::_Internal {
 public:
};

GetHeapInfoRequest::GetHeapInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoRequest)
}
GetHeapInfoRequest::GetHeapInfoRequest(const GetHeapInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetHeapInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHeapInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHeapInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetHeapInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[4]);
}

// ===================================================================

class GetHeapInfoResponse::_Internal {
 public:
};

GetHeapInfoResponse::GetHeapInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
}
GetHeapInfoResponse::GetHeapInfoResponse(const GetHeapInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHeapInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_memory_){}
    , decltype(_impl_.total_memory_){}
    , decltype(_impl_.free_memory_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_memory_, &from._impl_.max_memory_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.free_memory_) -
    reinterpret_cast<char*>(&_impl_.max_memory_)) + sizeof(_impl_.free_memory_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
}

inline void GetHeapInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_memory_){int64_t{0}}
    , decltype(_impl_.total_memory_){int64_t{0}}
    , decltype(_impl_.free_memory_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetHeapInfoResponse::~GetHeapInfoResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHeapInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetHeapInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHeapInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.free_memory_) -
      reinterpret_cast<char*>(&_impl_.max_memory_)) + sizeof(_impl_.free_memory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeapInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_memory = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_memory = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 free_memory = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.free_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHeapInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_memory = 1 [jstype = JS_STRING];
  if (this->_internal_max_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_memory(), target);
  }

  // int64 total_memory = 2 [jstype = JS_STRING];
  if (this->_internal_total_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_memory(), target);
  }

  // int64 free_memory = 3 [jstype = JS_STRING];
  if (this->_internal_free_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_free_memory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  return target;
}

size_t GetHeapInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_memory = 1 [jstype = JS_STRING];
  if (this->_internal_max_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_memory());
  }

  // int64 total_memory = 2 [jstype = JS_STRING];
  if (this->_internal_total_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_memory());
  }

  // int64 free_memory = 3 [jstype = JS_STRING];
  if (this->_internal_free_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_free_memory());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHeapInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHeapInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHeapInfoResponse::GetClassData() const { return &_class_data_; }


void GetHeapInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHeapInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetHeapInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_memory() != 0) {
    _this->_internal_set_max_memory(from._internal_max_memory());
  }
  if (from._internal_total_memory() != 0) {
    _this->_internal_set_total_memory(from._internal_total_memory());
  }
  if (from._internal_free_memory() != 0) {
    _this->_internal_set_free_memory(from._internal_free_memory());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHeapInfoResponse::CopyFrom(const GetHeapInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeapInfoResponse::IsInitialized() const {
  return true;
}

void GetHeapInfoResponse::InternalSwap(GetHeapInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.free_memory_)
      + sizeof(GetHeapInfoResponse::_impl_.free_memory_)
      - PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.max_memory_)>(
          reinterpret_cast<char*>(&_impl_.max_memory_),
          reinterpret_cast<char*>(&other->_impl_.max_memory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeapInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[5]);
}

// ===================================================================

class LogSubscriptionRequest::_Internal {
 public:
};

LogSubscriptionRequest::LogSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}
LogSubscriptionRequest::LogSubscriptionRequest(const LogSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogSubscriptionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.levels_){from._impl_.levels_}
    , decltype(_impl_.last_seen_log_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.last_seen_log_timestamp_ = from._impl_.last_seen_log_timestamp_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}

inline void LogSubscriptionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.levels_){arena}
    , decltype(_impl_.last_seen_log_timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogSubscriptionRequest::~LogSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.levels_.~RepeatedPtrField();
}

void LogSubscriptionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.levels_.Clear();
  _impl_.last_seen_log_timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSubscriptionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_seen_log_timestamp = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_seen_log_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_levels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogSubscriptionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_seen_log_timestamp = 1 [jstype = JS_STRING];
  if (this->_internal_last_seen_log_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_seen_log_timestamp(), target);
  }

  // repeated string levels = 2;
  for (int i = 0, n = this->_internal_levels_size(); i < n; i++) {
    const auto& s = this->_internal_levels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  return target;
}

size_t LogSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string levels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.levels_.size());
  for (int i = 0, n = _impl_.levels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.levels_.Get(i));
  }

  // int64 last_seen_log_timestamp = 1 [jstype = JS_STRING];
  if (this->_internal_last_seen_log_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_seen_log_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogSubscriptionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogSubscriptionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogSubscriptionRequest::GetClassData() const { return &_class_data_; }


void LogSubscriptionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogSubscriptionRequest*>(&to_msg);
  auto& from = static_cast<const LogSubscriptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.levels_.MergeFrom(from._impl_.levels_);
  if (from._internal_last_seen_log_timestamp() != 0) {
    _this->_internal_set_last_seen_log_timestamp(from._internal_last_seen_log_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogSubscriptionRequest::CopyFrom(const LogSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSubscriptionRequest::IsInitialized() const {
  return true;
}

void LogSubscriptionRequest::InternalSwap(LogSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.levels_.InternalSwap(&other->_impl_.levels_);
  swap(_impl_.last_seen_log_timestamp_, other->_impl_.last_seen_log_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSubscriptionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[6]);
}

// ===================================================================

class LogSubscriptionData::_Internal {
 public:
};

LogSubscriptionData::LogSubscriptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}
LogSubscriptionData::LogSubscriptionData(const LogSubscriptionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogSubscriptionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_level_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.micros_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_level_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_level_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log_level().empty()) {
    _this->_impl_.log_level_.Set(from._internal_log_level(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.micros_ = from._impl_.micros_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}

inline void LogSubscriptionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_level_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.micros_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.log_level_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_level_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogSubscriptionData::~LogSubscriptionData() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogSubscriptionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_level_.Destroy();
  _impl_.message_.Destroy();
}

void LogSubscriptionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogSubscriptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_level_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.micros_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSubscriptionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 micros = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_log_level();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogSubscriptionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 micros = 1 [jstype = JS_STRING];
  if (this->_internal_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_micros(), target);
  }

  // string log_level = 2;
  if (!this->_internal_log_level().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_level().data(), static_cast<int>(this->_internal_log_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log_level(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  return target;
}

size_t LogSubscriptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_level = 2;
  if (!this->_internal_log_level().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_level());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 micros = 1 [jstype = JS_STRING];
  if (this->_internal_micros() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_micros());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogSubscriptionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogSubscriptionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogSubscriptionData::GetClassData() const { return &_class_data_; }


void LogSubscriptionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogSubscriptionData*>(&to_msg);
  auto& from = static_cast<const LogSubscriptionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log_level().empty()) {
    _this->_internal_set_log_level(from._internal_log_level());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_micros() != 0) {
    _this->_internal_set_micros(from._internal_micros());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogSubscriptionData::CopyFrom(const LogSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSubscriptionData::IsInitialized() const {
  return true;
}

void LogSubscriptionData::InternalSwap(LogSubscriptionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_level_, lhs_arena,
      &other->_impl_.log_level_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.micros_, other->_impl_.micros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSubscriptionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[7]);
}

// ===================================================================

class ExecuteCommandRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const ExecuteCommandRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ExecuteCommandRequest::_Internal::console_id(const ExecuteCommandRequest* msg) {
  return *msg->_impl_.console_id_;
}
void ExecuteCommandRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
ExecuteCommandRequest::ExecuteCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}
ExecuteCommandRequest::ExecuteCommandRequest(const ExecuteCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteCommandRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.console_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}

inline void ExecuteCommandRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.console_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteCommandRequest::~ExecuteCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.console_id_;
}

void ExecuteCommandRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteCommandRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteCommandRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  return target;
}

size_t ExecuteCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteCommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteCommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteCommandRequest::GetClassData() const { return &_class_data_; }


void ExecuteCommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteCommandRequest*>(&to_msg);
  auto& from = static_cast<const ExecuteCommandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteCommandRequest::CopyFrom(const ExecuteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteCommandRequest::IsInitialized() const {
  return true;
}

void ExecuteCommandRequest::InternalSwap(ExecuteCommandRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.console_id_, other->_impl_.console_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteCommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[8]);
}

// ===================================================================

class ExecuteCommandResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate& changes(const ExecuteCommandResponse* msg);
};

const ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate&
ExecuteCommandResponse::_Internal::changes(const ExecuteCommandResponse* msg) {
  return *msg->_impl_.changes_;
}
void ExecuteCommandResponse::clear_changes() {
  if (GetArenaForAllocation() == nullptr && _impl_.changes_ != nullptr) {
    delete _impl_.changes_;
  }
  _impl_.changes_ = nullptr;
}
ExecuteCommandResponse::ExecuteCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}
ExecuteCommandResponse::ExecuteCommandResponse(const ExecuteCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteCommandResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.changes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_changes()) {
    _this->_impl_.changes_ = new ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate(*from._impl_.changes_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}

inline void ExecuteCommandResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.changes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteCommandResponse::~ExecuteCommandResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.changes_;
}

void ExecuteCommandResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.changes_ != nullptr) {
    delete _impl_.changes_;
  }
  _impl_.changes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteCommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FieldsChangeUpdate changes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_changes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteCommandResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // .io.deephaven.proto.backplane.grpc.FieldsChangeUpdate changes = 2;
  if (this->_internal_has_changes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::changes(this),
        _Internal::changes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  return target;
}

size_t ExecuteCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .io.deephaven.proto.backplane.grpc.FieldsChangeUpdate changes = 2;
  if (this->_internal_has_changes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteCommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteCommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteCommandResponse::GetClassData() const { return &_class_data_; }


void ExecuteCommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteCommandResponse*>(&to_msg);
  auto& from = static_cast<const ExecuteCommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_changes()) {
    _this->_internal_mutable_changes()->::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate::MergeFrom(
        from._internal_changes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteCommandResponse::CopyFrom(const ExecuteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteCommandResponse::IsInitialized() const {
  return true;
}

void ExecuteCommandResponse::InternalSwap(ExecuteCommandResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  swap(_impl_.changes_, other->_impl_.changes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[9]);
}

// ===================================================================

class BindTableToVariableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const BindTableToVariableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& table_id(const BindTableToVariableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
BindTableToVariableRequest::_Internal::console_id(const BindTableToVariableRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
BindTableToVariableRequest::_Internal::table_id(const BindTableToVariableRequest* msg) {
  return *msg->_impl_.table_id_;
}
void BindTableToVariableRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
void BindTableToVariableRequest::clear_table_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_id_ != nullptr) {
    delete _impl_.table_id_;
  }
  _impl_.table_id_ = nullptr;
}
BindTableToVariableRequest::BindTableToVariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}
BindTableToVariableRequest::BindTableToVariableRequest(const BindTableToVariableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BindTableToVariableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_name_){}
    , decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.variable_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.variable_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_variable_name().empty()) {
    _this->_impl_.variable_name_.Set(from._internal_variable_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}

inline void BindTableToVariableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_name_){}
    , decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.variable_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.variable_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BindTableToVariableRequest::~BindTableToVariableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BindTableToVariableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.console_id_;
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void BindTableToVariableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BindTableToVariableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.table_id_ != nullptr) {
    delete _impl_.table_id_;
  }
  _impl_.table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindTableToVariableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string variable_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_variable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BindTableToVariableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // string variable_name = 3;
  if (!this->_internal_variable_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable_name().data(), static_cast<int>(this->_internal_variable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_variable_name(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
  if (this->_internal_has_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  return target;
}

size_t BindTableToVariableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_name = 3;
  if (!this->_internal_variable_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable_name());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
  if (this->_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BindTableToVariableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BindTableToVariableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BindTableToVariableRequest::GetClassData() const { return &_class_data_; }


void BindTableToVariableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BindTableToVariableRequest*>(&to_msg);
  auto& from = static_cast<const BindTableToVariableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_variable_name().empty()) {
    _this->_internal_set_variable_name(from._internal_variable_name());
  }
  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_has_table_id()) {
    _this->_internal_mutable_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BindTableToVariableRequest::CopyFrom(const BindTableToVariableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindTableToVariableRequest::IsInitialized() const {
  return true;
}

void BindTableToVariableRequest::InternalSwap(BindTableToVariableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.variable_name_, lhs_arena,
      &other->_impl_.variable_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.table_id_)
      + sizeof(BindTableToVariableRequest::_impl_.table_id_)
      - PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BindTableToVariableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[10]);
}

// ===================================================================

class BindTableToVariableResponse::_Internal {
 public:
};

BindTableToVariableResponse::BindTableToVariableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}
BindTableToVariableResponse::BindTableToVariableResponse(const BindTableToVariableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  BindTableToVariableResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BindTableToVariableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BindTableToVariableResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BindTableToVariableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[11]);
}

// ===================================================================

class CancelCommandRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CancelCommandRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& command_id(const CancelCommandRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CancelCommandRequest::_Internal::console_id(const CancelCommandRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
CancelCommandRequest::_Internal::command_id(const CancelCommandRequest* msg) {
  return *msg->_impl_.command_id_;
}
void CancelCommandRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
void CancelCommandRequest::clear_command_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.command_id_ != nullptr) {
    delete _impl_.command_id_;
  }
  _impl_.command_id_ = nullptr;
}
CancelCommandRequest::CancelCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}
CancelCommandRequest::CancelCommandRequest(const CancelCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelCommandRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.command_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  if (from._internal_has_command_id()) {
    _this->_impl_.command_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.command_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}

inline void CancelCommandRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.command_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CancelCommandRequest::~CancelCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.console_id_;
  if (this != internal_default_instance()) delete _impl_.command_id_;
}

void CancelCommandRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.command_id_ != nullptr) {
    delete _impl_.command_id_;
  }
  _impl_.command_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelCommandRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelCommandRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
  if (this->_internal_has_command_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::command_id(this),
        _Internal::command_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  return target;
}

size_t CancelCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
  if (this->_internal_has_command_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelCommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelCommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelCommandRequest::GetClassData() const { return &_class_data_; }


void CancelCommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelCommandRequest*>(&to_msg);
  auto& from = static_cast<const CancelCommandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_has_command_id()) {
    _this->_internal_mutable_command_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_command_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelCommandRequest::CopyFrom(const CancelCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelCommandRequest::IsInitialized() const {
  return true;
}

void CancelCommandRequest::InternalSwap(CancelCommandRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.command_id_)
      + sizeof(CancelCommandRequest::_impl_.command_id_)
      - PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelCommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[12]);
}

// ===================================================================

class CancelCommandResponse::_Internal {
 public:
};

CancelCommandResponse::CancelCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}
CancelCommandResponse::CancelCommandResponse(const CancelCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CancelCommandResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelCommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelCommandResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CancelCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[13]);
}

// ===================================================================

class CancelAutoCompleteRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CancelAutoCompleteRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CancelAutoCompleteRequest::_Internal::console_id(const CancelAutoCompleteRequest* msg) {
  return *msg->_impl_.console_id_;
}
void CancelAutoCompleteRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
CancelAutoCompleteRequest::CancelAutoCompleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
}
CancelAutoCompleteRequest::CancelAutoCompleteRequest(const CancelAutoCompleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelAutoCompleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
}

inline void CancelAutoCompleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.request_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CancelAutoCompleteRequest::~CancelAutoCompleteRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelAutoCompleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.console_id_;
}

void CancelAutoCompleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelAutoCompleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  _impl_.request_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelAutoCompleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelAutoCompleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  return target;
}

size_t CancelAutoCompleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelAutoCompleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelAutoCompleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelAutoCompleteRequest::GetClassData() const { return &_class_data_; }


void CancelAutoCompleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelAutoCompleteRequest*>(&to_msg);
  auto& from = static_cast<const CancelAutoCompleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelAutoCompleteRequest::CopyFrom(const CancelAutoCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelAutoCompleteRequest::IsInitialized() const {
  return true;
}

void CancelAutoCompleteRequest::InternalSwap(CancelAutoCompleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.request_id_)
      + sizeof(CancelAutoCompleteRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelAutoCompleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[14]);
}

// ===================================================================

class CancelAutoCompleteResponse::_Internal {
 public:
};

CancelAutoCompleteResponse::CancelAutoCompleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteResponse)
}
CancelAutoCompleteResponse::CancelAutoCompleteResponse(const CancelAutoCompleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CancelAutoCompleteResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelAutoCompleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelAutoCompleteResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CancelAutoCompleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[15]);
}

// ===================================================================

class AutoCompleteRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest& open_document(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest& change_document(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest& get_completion_items(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest& get_signature_help(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetHoverRequest& get_hover(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest& get_diagnostic(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest& close_document(const AutoCompleteRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
AutoCompleteRequest::_Internal::console_id(const AutoCompleteRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest&
AutoCompleteRequest::_Internal::open_document(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.open_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest&
AutoCompleteRequest::_Internal::change_document(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.change_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest&
AutoCompleteRequest::_Internal::get_completion_items(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_completion_items_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest&
AutoCompleteRequest::_Internal::get_signature_help(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_signature_help_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetHoverRequest&
AutoCompleteRequest::_Internal::get_hover(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_hover_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest&
AutoCompleteRequest::_Internal::get_diagnostic(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_diagnostic_;
}
const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest&
AutoCompleteRequest::_Internal::close_document(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.close_document_;
}
void AutoCompleteRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
void AutoCompleteRequest::set_allocated_open_document(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* open_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (open_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(open_document);
    if (message_arena != submessage_arena) {
      open_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_document, submessage_arena);
    }
    set_has_open_document();
    _impl_.request_.open_document_ = open_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.open_document)
}
void AutoCompleteRequest::set_allocated_change_document(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* change_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (change_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change_document);
    if (message_arena != submessage_arena) {
      change_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_document, submessage_arena);
    }
    set_has_change_document();
    _impl_.request_.change_document_ = change_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.change_document)
}
void AutoCompleteRequest::set_allocated_get_completion_items(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* get_completion_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_completion_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_completion_items);
    if (message_arena != submessage_arena) {
      get_completion_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_completion_items, submessage_arena);
    }
    set_has_get_completion_items();
    _impl_.request_.get_completion_items_ = get_completion_items;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_completion_items)
}
void AutoCompleteRequest::set_allocated_get_signature_help(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest* get_signature_help) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_signature_help) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_signature_help);
    if (message_arena != submessage_arena) {
      get_signature_help = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_signature_help, submessage_arena);
    }
    set_has_get_signature_help();
    _impl_.request_.get_signature_help_ = get_signature_help;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_signature_help)
}
void AutoCompleteRequest::set_allocated_get_hover(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest* get_hover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_hover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_hover);
    if (message_arena != submessage_arena) {
      get_hover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_hover, submessage_arena);
    }
    set_has_get_hover();
    _impl_.request_.get_hover_ = get_hover;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_hover)
}
void AutoCompleteRequest::set_allocated_get_diagnostic(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest* get_diagnostic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_diagnostic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_diagnostic);
    if (message_arena != submessage_arena) {
      get_diagnostic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_diagnostic, submessage_arena);
    }
    set_has_get_diagnostic();
    _impl_.request_.get_diagnostic_ = get_diagnostic;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_diagnostic)
}
void AutoCompleteRequest::set_allocated_close_document(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* close_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (close_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(close_document);
    if (message_arena != submessage_arena) {
      close_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_document, submessage_arena);
    }
    set_has_close_document();
    _impl_.request_.close_document_ = close_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.close_document)
}
AutoCompleteRequest::AutoCompleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
}
AutoCompleteRequest::AutoCompleteRequest(const AutoCompleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoCompleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  clear_has_request();
  switch (from.request_case()) {
    case kOpenDocument: {
      _this->_internal_mutable_open_document()->::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest::MergeFrom(
          from._internal_open_document());
      break;
    }
    case kChangeDocument: {
      _this->_internal_mutable_change_document()->::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest::MergeFrom(
          from._internal_change_document());
      break;
    }
    case kGetCompletionItems: {
      _this->_internal_mutable_get_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest::MergeFrom(
          from._internal_get_completion_items());
      break;
    }
    case kGetSignatureHelp: {
      _this->_internal_mutable_get_signature_help()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest::MergeFrom(
          from._internal_get_signature_help());
      break;
    }
    case kGetHover: {
      _this->_internal_mutable_get_hover()->::io::deephaven::proto::backplane::script::grpc::GetHoverRequest::MergeFrom(
          from._internal_get_hover());
      break;
    }
    case kGetDiagnostic: {
      _this->_internal_mutable_get_diagnostic()->::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest::MergeFrom(
          from._internal_get_diagnostic());
      break;
    }
    case kCloseDocument: {
      _this->_internal_mutable_close_document()->::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest::MergeFrom(
          from._internal_close_document());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
}

inline void AutoCompleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.request_id_){0}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_request();
}

AutoCompleteRequest::~AutoCompleteRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoCompleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.console_id_;
  if (has_request()) {
    clear_request();
  }
}

void AutoCompleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoCompleteRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  switch (request_case()) {
    case kOpenDocument: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.open_document_;
      }
      break;
    }
    case kChangeDocument: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.change_document_;
      }
      break;
    }
    case kGetCompletionItems: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.get_completion_items_;
      }
      break;
    }
    case kGetSignatureHelp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.get_signature_help_;
      }
      break;
    }
    case kGetHover: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.get_hover_;
      }
      break;
    }
    case kGetDiagnostic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.get_diagnostic_;
      }
      break;
    }
    case kCloseDocument: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.close_document_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


void AutoCompleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  _impl_.request_id_ = 0;
  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoCompleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_completion_items(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 request_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest get_signature_help = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_signature_help(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetHoverRequest get_hover = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_hover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest get_diagnostic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_diagnostic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoCompleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
  if (_internal_has_open_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::open_document(this),
        _Internal::open_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
  if (_internal_has_change_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::change_document(this),
        _Internal::change_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
  if (_internal_has_get_completion_items()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::get_completion_items(this),
        _Internal::get_completion_items(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
  if (_internal_has_close_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::close_document(this),
        _Internal::close_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 5;
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 6;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_request_id(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest get_signature_help = 7;
  if (_internal_has_get_signature_help()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::get_signature_help(this),
        _Internal::get_signature_help(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetHoverRequest get_hover = 8;
  if (_internal_has_get_hover()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::get_hover(this),
        _Internal::get_hover(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest get_diagnostic = 9;
  if (_internal_has_get_diagnostic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::get_diagnostic(this),
        _Internal::get_diagnostic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  return target;
}

size_t AutoCompleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 5;
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // int32 request_id = 6;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  switch (request_case()) {
    // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
    case kOpenDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.open_document_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
    case kChangeDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.change_document_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
    case kGetCompletionItems: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.get_completion_items_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest get_signature_help = 7;
    case kGetSignatureHelp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.get_signature_help_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetHoverRequest get_hover = 8;
    case kGetHover: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.get_hover_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest get_diagnostic = 9;
    case kGetDiagnostic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.get_diagnostic_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
    case kCloseDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.close_document_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoCompleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoCompleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoCompleteRequest::GetClassData() const { return &_class_data_; }


void AutoCompleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoCompleteRequest*>(&to_msg);
  auto& from = static_cast<const AutoCompleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  switch (from.request_case()) {
    case kOpenDocument: {
      _this->_internal_mutable_open_document()->::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest::MergeFrom(
          from._internal_open_document());
      break;
    }
    case kChangeDocument: {
      _this->_internal_mutable_change_document()->::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest::MergeFrom(
          from._internal_change_document());
      break;
    }
    case kGetCompletionItems: {
      _this->_internal_mutable_get_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest::MergeFrom(
          from._internal_get_completion_items());
      break;
    }
    case kGetSignatureHelp: {
      _this->_internal_mutable_get_signature_help()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest::MergeFrom(
          from._internal_get_signature_help());
      break;
    }
    case kGetHover: {
      _this->_internal_mutable_get_hover()->::io::deephaven::proto::backplane::script::grpc::GetHoverRequest::MergeFrom(
          from._internal_get_hover());
      break;
    }
    case kGetDiagnostic: {
      _this->_internal_mutable_get_diagnostic()->::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest::MergeFrom(
          from._internal_get_diagnostic());
      break;
    }
    case kCloseDocument: {
      _this->_internal_mutable_close_document()->::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest::MergeFrom(
          from._internal_close_document());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoCompleteRequest::CopyFrom(const AutoCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteRequest::IsInitialized() const {
  return true;
}

void AutoCompleteRequest::InternalSwap(AutoCompleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_id_)
      + sizeof(AutoCompleteRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoCompleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[16]);
}

// ===================================================================

class AutoCompleteResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse& completion_items(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse& signatures(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetHoverResponse& hover(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse& diagnostic(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse& diagnostic_publish(const AutoCompleteResponse* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse&
AutoCompleteResponse::_Internal::completion_items(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.completion_items_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse&
AutoCompleteResponse::_Internal::signatures(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.signatures_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetHoverResponse&
AutoCompleteResponse::_Internal::hover(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.hover_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse&
AutoCompleteResponse::_Internal::diagnostic(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.diagnostic_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse&
AutoCompleteResponse::_Internal::diagnostic_publish(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.diagnostic_publish_;
}
void AutoCompleteResponse::set_allocated_completion_items(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* completion_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (completion_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(completion_items);
    if (message_arena != submessage_arena) {
      completion_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completion_items, submessage_arena);
    }
    set_has_completion_items();
    _impl_.response_.completion_items_ = completion_items;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.completion_items)
}
void AutoCompleteResponse::set_allocated_signatures(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse* signatures) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (signatures) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signatures);
    if (message_arena != submessage_arena) {
      signatures = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signatures, submessage_arena);
    }
    set_has_signatures();
    _impl_.response_.signatures_ = signatures;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.signatures)
}
void AutoCompleteResponse::set_allocated_hover(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse* hover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (hover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hover);
    if (message_arena != submessage_arena) {
      hover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hover, submessage_arena);
    }
    set_has_hover();
    _impl_.response_.hover_ = hover;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.hover)
}
void AutoCompleteResponse::set_allocated_diagnostic(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse* diagnostic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (diagnostic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(diagnostic);
    if (message_arena != submessage_arena) {
      diagnostic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnostic, submessage_arena);
    }
    set_has_diagnostic();
    _impl_.response_.diagnostic_ = diagnostic;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.diagnostic)
}
void AutoCompleteResponse::set_allocated_diagnostic_publish(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse* diagnostic_publish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (diagnostic_publish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(diagnostic_publish);
    if (message_arena != submessage_arena) {
      diagnostic_publish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnostic_publish, submessage_arena);
    }
    set_has_diagnostic_publish();
    _impl_.response_.diagnostic_publish_ = diagnostic_publish;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.diagnostic_publish)
}
AutoCompleteResponse::AutoCompleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
}
AutoCompleteResponse::AutoCompleteResponse(const AutoCompleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoCompleteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  clear_has_response();
  switch (from.response_case()) {
    case kCompletionItems: {
      _this->_internal_mutable_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse::MergeFrom(
          from._internal_completion_items());
      break;
    }
    case kSignatures: {
      _this->_internal_mutable_signatures()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse::MergeFrom(
          from._internal_signatures());
      break;
    }
    case kHover: {
      _this->_internal_mutable_hover()->::io::deephaven::proto::backplane::script::grpc::GetHoverResponse::MergeFrom(
          from._internal_hover());
      break;
    }
    case kDiagnostic: {
      _this->_internal_mutable_diagnostic()->::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse::MergeFrom(
          from._internal_diagnostic());
      break;
    }
    case kDiagnosticPublish: {
      _this->_internal_mutable_diagnostic_publish()->::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse::MergeFrom(
          from._internal_diagnostic_publish());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
}

inline void AutoCompleteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

AutoCompleteResponse::~AutoCompleteResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoCompleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void AutoCompleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoCompleteResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  switch (response_case()) {
    case kCompletionItems: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.completion_items_;
      }
      break;
    }
    case kSignatures: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.signatures_;
      }
      break;
    }
    case kHover: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.hover_;
      }
      break;
    }
    case kDiagnostic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.diagnostic_;
      }
      break;
    }
    case kDiagnosticPublish: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.diagnostic_publish_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void AutoCompleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoCompleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_completion_items(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse signatures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signatures(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetHoverResponse hover = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse diagnostic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnostic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse diagnostic_publish = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnostic_publish(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoCompleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
  if (_internal_has_completion_items()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::completion_items(this),
        _Internal::completion_items(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_id(), target);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse signatures = 4;
  if (_internal_has_signatures()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::signatures(this),
        _Internal::signatures(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetHoverResponse hover = 5;
  if (_internal_has_hover()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hover(this),
        _Internal::hover(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse diagnostic = 6;
  if (_internal_has_diagnostic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::diagnostic(this),
        _Internal::diagnostic(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse diagnostic_publish = 7;
  if (_internal_has_diagnostic_publish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::diagnostic_publish(this),
        _Internal::diagnostic_publish(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  return target;
}

size_t AutoCompleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  switch (response_case()) {
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
    case kCompletionItems: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.completion_items_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse signatures = 4;
    case kSignatures: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.signatures_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetHoverResponse hover = 5;
    case kHover: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.hover_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse diagnostic = 6;
    case kDiagnostic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.diagnostic_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse diagnostic_publish = 7;
    case kDiagnosticPublish: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.diagnostic_publish_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoCompleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoCompleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoCompleteResponse::GetClassData() const { return &_class_data_; }


void AutoCompleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoCompleteResponse*>(&to_msg);
  auto& from = static_cast<const AutoCompleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  switch (from.response_case()) {
    case kCompletionItems: {
      _this->_internal_mutable_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse::MergeFrom(
          from._internal_completion_items());
      break;
    }
    case kSignatures: {
      _this->_internal_mutable_signatures()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse::MergeFrom(
          from._internal_signatures());
      break;
    }
    case kHover: {
      _this->_internal_mutable_hover()->::io::deephaven::proto::backplane::script::grpc::GetHoverResponse::MergeFrom(
          from._internal_hover());
      break;
    }
    case kDiagnostic: {
      _this->_internal_mutable_diagnostic()->::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse::MergeFrom(
          from._internal_diagnostic());
      break;
    }
    case kDiagnosticPublish: {
      _this->_internal_mutable_diagnostic_publish()->::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse::MergeFrom(
          from._internal_diagnostic_publish());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoCompleteResponse::CopyFrom(const AutoCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteResponse::IsInitialized() const {
  return true;
}

void AutoCompleteResponse::InternalSwap(AutoCompleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.success_)
      + sizeof(AutoCompleteResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoCompleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[17]);
}

// ===================================================================

class BrowserNextResponse::_Internal {
 public:
};

BrowserNextResponse::BrowserNextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
}
BrowserNextResponse::BrowserNextResponse(const BrowserNextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  BrowserNextResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrowserNextResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrowserNextResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BrowserNextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[18]);
}

// ===================================================================

class OpenDocumentRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const OpenDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& text_document(const OpenDocumentRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
OpenDocumentRequest::_Internal::console_id(const OpenDocumentRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem&
OpenDocumentRequest::_Internal::text_document(const OpenDocumentRequest* msg) {
  return *msg->_impl_.text_document_;
}
void OpenDocumentRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
OpenDocumentRequest::OpenDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}
OpenDocumentRequest::OpenDocumentRequest(const OpenDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpenDocumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  if (from._internal_has_text_document()) {
    _this->_impl_.text_document_ = new ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem(*from._impl_.text_document_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}

inline void OpenDocumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpenDocumentRequest::~OpenDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpenDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.console_id_;
  if (this != internal_default_instance()) delete _impl_.text_document_;
}

void OpenDocumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpenDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_document_ != nullptr) {
    delete _impl_.text_document_;
  }
  _impl_.text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenDocumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  if (this->_internal_has_text_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  return target;
}

size_t OpenDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  if (this->_internal_has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpenDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenDocumentRequest::GetClassData() const { return &_class_data_; }


void OpenDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpenDocumentRequest*>(&to_msg);
  auto& from = static_cast<const OpenDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_has_text_document()) {
    _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::TextDocumentItem::MergeFrom(
        from._internal_text_document());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenDocumentRequest::CopyFrom(const OpenDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDocumentRequest::IsInitialized() const {
  return true;
}

void OpenDocumentRequest::InternalSwap(OpenDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.text_document_)
      + sizeof(OpenDocumentRequest::_impl_.text_document_)
      - PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[19]);
}

// ===================================================================

class TextDocumentItem::_Internal {
 public:
};

TextDocumentItem::TextDocumentItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}
TextDocumentItem::TextDocumentItem(const TextDocumentItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextDocumentItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.language_id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language_id().empty()) {
    _this->_impl_.language_id_.Set(from._internal_language_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}

inline void TextDocumentItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.language_id_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextDocumentItem::~TextDocumentItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextDocumentItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.language_id_.Destroy();
  _impl_.text_.Destroy();
}

void TextDocumentItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextDocumentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.language_id_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextDocumentItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri"));
        } else
          goto handle_unusual;
        continue;
      // string language_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextDocumentItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string language_id = 2;
  if (!this->_internal_language_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_id().data(), static_cast<int>(this->_internal_language_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_id(), target);
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  return target;
}

size_t TextDocumentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string language_id = 2;
  if (!this->_internal_language_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_id());
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextDocumentItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextDocumentItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextDocumentItem::GetClassData() const { return &_class_data_; }


void TextDocumentItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextDocumentItem*>(&to_msg);
  auto& from = static_cast<const TextDocumentItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_language_id().empty()) {
    _this->_internal_set_language_id(from._internal_language_id());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextDocumentItem::CopyFrom(const TextDocumentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextDocumentItem::IsInitialized() const {
  return true;
}

void TextDocumentItem::InternalSwap(TextDocumentItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_id_, lhs_arena,
      &other->_impl_.language_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextDocumentItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[20]);
}

// ===================================================================

class CloseDocumentRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CloseDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const CloseDocumentRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CloseDocumentRequest::_Internal::console_id(const CloseDocumentRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
CloseDocumentRequest::_Internal::text_document(const CloseDocumentRequest* msg) {
  return *msg->_impl_.text_document_;
}
void CloseDocumentRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
CloseDocumentRequest::CloseDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}
CloseDocumentRequest::CloseDocumentRequest(const CloseDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloseDocumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  if (from._internal_has_text_document()) {
    _this->_impl_.text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from._impl_.text_document_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}

inline void CloseDocumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CloseDocumentRequest::~CloseDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.console_id_;
  if (this != internal_default_instance()) delete _impl_.text_document_;
}

void CloseDocumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_document_ != nullptr) {
    delete _impl_.text_document_;
  }
  _impl_.text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseDocumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->_internal_has_text_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  return target;
}

size_t CloseDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->_internal_has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloseDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseDocumentRequest::GetClassData() const { return &_class_data_; }


void CloseDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloseDocumentRequest*>(&to_msg);
  auto& from = static_cast<const CloseDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_has_text_document()) {
    _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
        from._internal_text_document());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseDocumentRequest::CopyFrom(const CloseDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDocumentRequest::IsInitialized() const {
  return true;
}

void CloseDocumentRequest::InternalSwap(CloseDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.text_document_)
      + sizeof(CloseDocumentRequest::_impl_.text_document_)
      - PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[21]);
}

// ===================================================================

class ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal::range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg) {
  return *msg->_impl_.range_;
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeDocumentRequest_TextDocumentContentChangeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.range_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from._impl_.range_);
  }
  _this->_impl_.range_length_ = from._impl_.range_length_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}

inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.range_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChangeDocumentRequest_TextDocumentContentChangeEvent::~ChangeDocumentRequest_TextDocumentContentChangeEvent() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.range_;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  _impl_.range_length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 range_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // int32 range_length = 2;
  if (this->_internal_range_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_length(), target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  return target;
}

size_t ChangeDocumentRequest_TextDocumentContentChangeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // int32 range_length = 2;
  if (this->_internal_range_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_range_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeDocumentRequest_TextDocumentContentChangeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeDocumentRequest_TextDocumentContentChangeEvent::GetClassData() const { return &_class_data_; }


void ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeDocumentRequest_TextDocumentContentChangeEvent*>(&to_msg);
  auto& from = static_cast<const ChangeDocumentRequest_TextDocumentContentChangeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
        from._internal_range());
  }
  if (from._internal_range_length() != 0) {
    _this->_internal_set_range_length(from._internal_range_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::CopyFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentRequest_TextDocumentContentChangeEvent::IsInitialized() const {
  return true;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::InternalSwap(ChangeDocumentRequest_TextDocumentContentChangeEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_length_)
      + sizeof(ChangeDocumentRequest_TextDocumentContentChangeEvent::_impl_.range_length_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentRequest_TextDocumentContentChangeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[22]);
}

// ===================================================================

class ChangeDocumentRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const ChangeDocumentRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const ChangeDocumentRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ChangeDocumentRequest::_Internal::console_id(const ChangeDocumentRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
ChangeDocumentRequest::_Internal::text_document(const ChangeDocumentRequest* msg) {
  return *msg->_impl_.text_document_;
}
void ChangeDocumentRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
ChangeDocumentRequest::ChangeDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}
ChangeDocumentRequest::ChangeDocumentRequest(const ChangeDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeDocumentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_changes_){from._impl_.content_changes_}
    , decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  if (from._internal_has_text_document()) {
    _this->_impl_.text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from._impl_.text_document_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}

inline void ChangeDocumentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_changes_){arena}
    , decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChangeDocumentRequest::~ChangeDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_changes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.console_id_;
  if (this != internal_default_instance()) delete _impl_.text_document_;
}

void ChangeDocumentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_changes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_document_ != nullptr) {
    delete _impl_.text_document_;
  }
  _impl_.text_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->_internal_has_text_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  return target;
}

size_t ChangeDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  total_size += 1UL * this->_internal_content_changes_size();
  for (const auto& msg : this->_impl_.content_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->_internal_has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeDocumentRequest::GetClassData() const { return &_class_data_; }


void ChangeDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeDocumentRequest*>(&to_msg);
  auto& from = static_cast<const ChangeDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.content_changes_.MergeFrom(from._impl_.content_changes_);
  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_has_text_document()) {
    _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
        from._internal_text_document());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeDocumentRequest::CopyFrom(const ChangeDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentRequest::IsInitialized() const {
  return true;
}

void ChangeDocumentRequest::InternalSwap(ChangeDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.content_changes_.InternalSwap(&other->_impl_.content_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.text_document_)
      + sizeof(ChangeDocumentRequest::_impl_.text_document_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[23]);
}

// ===================================================================

class DocumentRange::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::Position& start(const DocumentRange* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& end(const DocumentRange* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::Position&
DocumentRange::_Internal::start(const DocumentRange* msg) {
  return *msg->_impl_.start_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
DocumentRange::_Internal::end(const DocumentRange* msg) {
  return *msg->_impl_.end_;
}
DocumentRange::DocumentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}
DocumentRange::DocumentRange(const DocumentRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    _this->_impl_.start_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from._impl_.end_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}

inline void DocumentRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DocumentRange::~DocumentRange() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void DocumentRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  if (this->_internal_has_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  return target;
}

size_t DocumentRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentRange::GetClassData() const { return &_class_data_; }


void DocumentRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentRange*>(&to_msg);
  auto& from = static_cast<const DocumentRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _this->_internal_mutable_start()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
        from._internal_start());
  }
  if (from._internal_has_end()) {
    _this->_internal_mutable_end()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
        from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentRange::CopyFrom(const DocumentRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentRange::IsInitialized() const {
  return true;
}

void DocumentRange::InternalSwap(DocumentRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.end_)
      + sizeof(DocumentRange::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[24]);
}

// ===================================================================

class VersionedTextDocumentIdentifier::_Internal {
 public:
};

VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}
VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(const VersionedTextDocumentIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionedTextDocumentIdentifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}

inline void VersionedTextDocumentIdentifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionedTextDocumentIdentifier::~VersionedTextDocumentIdentifier() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionedTextDocumentIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void VersionedTextDocumentIdentifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionedTextDocumentIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionedTextDocumentIdentifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionedTextDocumentIdentifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  return target;
}

size_t VersionedTextDocumentIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionedTextDocumentIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionedTextDocumentIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionedTextDocumentIdentifier::GetClassData() const { return &_class_data_; }


void VersionedTextDocumentIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionedTextDocumentIdentifier*>(&to_msg);
  auto& from = static_cast<const VersionedTextDocumentIdentifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionedTextDocumentIdentifier::CopyFrom(const VersionedTextDocumentIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionedTextDocumentIdentifier::IsInitialized() const {
  return true;
}

void VersionedTextDocumentIdentifier::InternalSwap(VersionedTextDocumentIdentifier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionedTextDocumentIdentifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[25]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){}
    , decltype(_impl_.character_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.line_, &from._impl_.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.character_) -
    reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.character_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){0}
    , decltype(_impl_.character_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.character_) -
      reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.character_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // int32 character = 2;
  if (this->_internal_character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  // int32 character = 2;
  if (this->_internal_character() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_character());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  if (from._internal_character() != 0) {
    _this->_internal_set_character(from._internal_character());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.character_)
      + sizeof(Position::_impl_.character_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.line_)>(
          reinterpret_cast<char*>(&_impl_.line_),
          reinterpret_cast<char*>(&other->_impl_.line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[26]);
}

// ===================================================================

class MarkupContent::_Internal {
 public:
};

MarkupContent::MarkupContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.MarkupContent)
}
MarkupContent::MarkupContent(const MarkupContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkupContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kind().empty()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.MarkupContent)
}

inline void MarkupContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarkupContent::~MarkupContent() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkupContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kind_.Destroy();
  _impl_.value_.Destroy();
}

void MarkupContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkupContent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kind_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkupContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.MarkupContent.kind"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.MarkupContent.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarkupContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.MarkupContent.kind");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kind(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.MarkupContent.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  return target;
}

size_t MarkupContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkupContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkupContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkupContent::GetClassData() const { return &_class_data_; }


void MarkupContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkupContent*>(&to_msg);
  auto& from = static_cast<const MarkupContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kind().empty()) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkupContent::CopyFrom(const MarkupContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkupContent::IsInitialized() const {
  return true;
}

void MarkupContent::InternalSwap(MarkupContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkupContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[27]);
}

// ===================================================================

class GetCompletionItemsRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& context(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetCompletionItemsRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetCompletionItemsRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
GetCompletionItemsRequest::_Internal::console_id(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::CompletionContext&
GetCompletionItemsRequest::_Internal::context(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.context_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
GetCompletionItemsRequest::_Internal::text_document(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
GetCompletionItemsRequest::_Internal::position(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.position_;
}
void GetCompletionItemsRequest::clear_console_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
}
GetCompletionItemsRequest::GetCompletionItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}
GetCompletionItemsRequest::GetCompletionItemsRequest(const GetCompletionItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCompletionItemsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_console_id()) {
    _this->_impl_.console_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.console_id_);
  }
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::io::deephaven::proto::backplane::script::grpc::CompletionContext(*from._impl_.context_);
  }
  if (from._internal_has_text_document()) {
    _this->_impl_.text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from._impl_.text_document_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from._impl_.position_);
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}

inline void GetCompletionItemsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.console_id_){nullptr}
    , decltype(_impl_.context_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.request_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCompletionItemsRequest::~GetCompletionItemsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCompletionItemsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.console_id_;
  if (this != internal_default_instance()) delete _impl_.context_;
  if (this != internal_default_instance()) delete _impl_.text_document_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void GetCompletionItemsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCompletionItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.console_id_ != nullptr) {
    delete _impl_.console_id_;
  }
  _impl_.console_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_document_ != nullptr) {
    delete _impl_.text_document_;
  }
  _impl_.text_document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _impl_.request_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompletionItemsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_console_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 request_id = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCompletionItemsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  if (this->_internal_has_text_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 5 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  return target;
}

size_t GetCompletionItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (this->_internal_has_console_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.console_id_);
  }

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  if (this->_internal_has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_document_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // int32 request_id = 5 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCompletionItemsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCompletionItemsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCompletionItemsRequest::GetClassData() const { return &_class_data_; }


void GetCompletionItemsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCompletionItemsRequest*>(&to_msg);
  auto& from = static_cast<const GetCompletionItemsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_id()) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::io::deephaven::proto::backplane::script::grpc::CompletionContext::MergeFrom(
        from._internal_context());
  }
  if (from._internal_has_text_document()) {
    _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
        from._internal_text_document());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
        from._internal_position());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompletionItemsRequest::CopyFrom(const GetCompletionItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletionItemsRequest::IsInitialized() const {
  return true;
}

void GetCompletionItemsRequest::InternalSwap(GetCompletionItemsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.request_id_)
      + sizeof(GetCompletionItemsRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompletionItemsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[28]);
}

// ===================================================================

class CompletionContext::_Internal {
 public:
};

CompletionContext::CompletionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}
CompletionContext::CompletionContext(const CompletionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trigger_character_){}
    , decltype(_impl_.trigger_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trigger_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trigger_character().empty()) {
    _this->_impl_.trigger_character_.Set(from._internal_trigger_character(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.trigger_kind_ = from._impl_.trigger_kind_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}

inline void CompletionContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trigger_character_){}
    , decltype(_impl_.trigger_kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trigger_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionContext::~CompletionContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trigger_character_.Destroy();
}

void CompletionContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trigger_character_.ClearToEmpty();
  _impl_.trigger_kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 trigger_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.trigger_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trigger_character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trigger_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_trigger_kind(), target);
  }

  // string trigger_character = 2;
  if (!this->_internal_trigger_character().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trigger_character().data(), static_cast<int>(this->_internal_trigger_character().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trigger_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  return target;
}

size_t CompletionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trigger_character = 2;
  if (!this->_internal_trigger_character().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_character());
  }

  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trigger_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionContext::GetClassData() const { return &_class_data_; }


void CompletionContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionContext*>(&to_msg);
  auto& from = static_cast<const CompletionContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trigger_character().empty()) {
    _this->_internal_set_trigger_character(from._internal_trigger_character());
  }
  if (from._internal_trigger_kind() != 0) {
    _this->_internal_set_trigger_kind(from._internal_trigger_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionContext::CopyFrom(const CompletionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionContext::IsInitialized() const {
  return true;
}

void CompletionContext::InternalSwap(CompletionContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trigger_character_, lhs_arena,
      &other->_impl_.trigger_character_, rhs_arena
  );
  swap(_impl_.trigger_kind_, other->_impl_.trigger_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[29]);
}

// ===================================================================

class GetCompletionItemsResponse::_Internal {
 public:
};

GetCompletionItemsResponse::GetCompletionItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}
GetCompletionItemsResponse::GetCompletionItemsResponse(const GetCompletionItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCompletionItemsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}

inline void GetCompletionItemsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.request_id_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCompletionItemsResponse::~GetCompletionItemsResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCompletionItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void GetCompletionItemsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCompletionItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCompletionItemsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 request_id = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCompletionItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 request_id = 2 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_id(), target);
  }

  // bool success = 3 [deprecated = true];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  return target;
}

size_t GetCompletionItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 request_id = 2 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_id());
  }

  // bool success = 3 [deprecated = true];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCompletionItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCompletionItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCompletionItemsResponse::GetClassData() const { return &_class_data_; }


void GetCompletionItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCompletionItemsResponse*>(&to_msg);
  auto& from = static_cast<const GetCompletionItemsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompletionItemsResponse::CopyFrom(const GetCompletionItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletionItemsResponse::IsInitialized() const {
  return true;
}

void GetCompletionItemsResponse::InternalSwap(GetCompletionItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.success_)
      + sizeof(GetCompletionItemsResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCompletionItemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[30]);
}

// ===================================================================

class CompletionItem::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::TextEdit& text_edit(const CompletionItem* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& documentation(const CompletionItem* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::TextEdit&
CompletionItem::_Internal::text_edit(const CompletionItem* msg) {
  return *msg->_impl_.text_edit_;
}
const ::io::deephaven::proto::backplane::script::grpc::MarkupContent&
CompletionItem::_Internal::documentation(const CompletionItem* msg) {
  return *msg->_impl_.documentation_;
}
CompletionItem::CompletionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}
CompletionItem::CompletionItem(const CompletionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_text_edits_){from._impl_.additional_text_edits_}
    , decltype(_impl_.commit_characters_){from._impl_.commit_characters_}
    , decltype(_impl_.label_){}
    , decltype(_impl_.detail_){}
    , decltype(_impl_.sort_text_){}
    , decltype(_impl_.filter_text_){}
    , decltype(_impl_.text_edit_){nullptr}
    , decltype(_impl_.documentation_){nullptr}
    , decltype(_impl_.start_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.deprecated_){}
    , decltype(_impl_.preselect_){}
    , decltype(_impl_.insert_text_format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail().empty()) {
    _this->_impl_.detail_.Set(from._internal_detail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sort_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sort_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sort_text().empty()) {
    _this->_impl_.sort_text_.Set(from._internal_sort_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filter_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filter_text().empty()) {
    _this->_impl_.filter_text_.Set(from._internal_filter_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_text_edit()) {
    _this->_impl_.text_edit_ = new ::io::deephaven::proto::backplane::script::grpc::TextEdit(*from._impl_.text_edit_);
  }
  if (from._internal_has_documentation()) {
    _this->_impl_.documentation_ = new ::io::deephaven::proto::backplane::script::grpc::MarkupContent(*from._impl_.documentation_);
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.insert_text_format_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.insert_text_format_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}

inline void CompletionItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_text_edits_){arena}
    , decltype(_impl_.commit_characters_){arena}
    , decltype(_impl_.label_){}
    , decltype(_impl_.detail_){}
    , decltype(_impl_.sort_text_){}
    , decltype(_impl_.filter_text_){}
    , decltype(_impl_.text_edit_){nullptr}
    , decltype(_impl_.documentation_){nullptr}
    , decltype(_impl_.start_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.deprecated_){false}
    , decltype(_impl_.preselect_){false}
    , decltype(_impl_.insert_text_format_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sort_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sort_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filter_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionItem::~CompletionItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_text_edits_.~RepeatedPtrField();
  _impl_.commit_characters_.~RepeatedPtrField();
  _impl_.label_.Destroy();
  _impl_.detail_.Destroy();
  _impl_.sort_text_.Destroy();
  _impl_.filter_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.text_edit_;
  if (this != internal_default_instance()) delete _impl_.documentation_;
}

void CompletionItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_text_edits_.Clear();
  _impl_.commit_characters_.Clear();
  _impl_.label_.ClearToEmpty();
  _impl_.detail_.ClearToEmpty();
  _impl_.sort_text_.ClearToEmpty();
  _impl_.filter_text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.text_edit_ != nullptr) {
    delete _impl_.text_edit_;
  }
  _impl_.text_edit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.documentation_ != nullptr) {
    delete _impl_.documentation_;
  }
  _impl_.documentation_ = nullptr;
  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.insert_text_format_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.insert_text_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.label"));
        } else
          goto handle_unusual;
        continue;
      // int32 kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string detail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.detail"));
        } else
          goto handle_unusual;
        continue;
      // bool deprecated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool preselect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.preselect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_edit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sort_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_sort_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text"));
        } else
          goto handle_unusual;
        continue;
      // string filter_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_filter_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text"));
        } else
          goto handle_unusual;
        continue;
      // int32 insert_text_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.insert_text_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_text_edits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string commit_characters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_commit_characters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // int32 kind = 4;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_kind(), target);
  }

  // string detail = 5;
  if (!this->_internal_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.detail");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_detail(), target);
  }

  // bool deprecated = 7;
  if (this->_internal_deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_deprecated(), target);
  }

  // bool preselect = 8;
  if (this->_internal_preselect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_preselect(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  if (this->_internal_has_text_edit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::text_edit(this),
        _Internal::text_edit(this).GetCachedSize(), target, stream);
  }

  // string sort_text = 10;
  if (!this->_internal_sort_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort_text().data(), static_cast<int>(this->_internal_sort_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sort_text(), target);
  }

  // string filter_text = 11;
  if (!this->_internal_filter_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_text().data(), static_cast<int>(this->_internal_filter_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_filter_text(), target);
  }

  // int32 insert_text_format = 12;
  if (this->_internal_insert_text_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_insert_text_format(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_text_edits_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_text_edits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string commit_characters = 14;
  for (int i = 0, n = this->_internal_commit_characters_size(); i < n; i++) {
    const auto& s = this->_internal_commit_characters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters");
    target = stream->WriteString(14, s, target);
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 15;
  if (this->_internal_has_documentation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::documentation(this),
        _Internal::documentation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  return target;
}

size_t CompletionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  total_size += 1UL * this->_internal_additional_text_edits_size();
  for (const auto& msg : this->_impl_.additional_text_edits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string commit_characters = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.commit_characters_.size());
  for (int i = 0, n = _impl_.commit_characters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.commit_characters_.Get(i));
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string detail = 5;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // string sort_text = 10;
  if (!this->_internal_sort_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort_text());
  }

  // string filter_text = 11;
  if (!this->_internal_filter_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  if (this->_internal_has_text_edit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_edit_);
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 15;
  if (this->_internal_has_documentation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.documentation_);
  }

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  // int32 kind = 4;
  if (this->_internal_kind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kind());
  }

  // bool deprecated = 7;
  if (this->_internal_deprecated() != 0) {
    total_size += 1 + 1;
  }

  // bool preselect = 8;
  if (this->_internal_preselect() != 0) {
    total_size += 1 + 1;
  }

  // int32 insert_text_format = 12;
  if (this->_internal_insert_text_format() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_insert_text_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionItem::GetClassData() const { return &_class_data_; }


void CompletionItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionItem*>(&to_msg);
  auto& from = static_cast<const CompletionItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_text_edits_.MergeFrom(from._impl_.additional_text_edits_);
  _this->_impl_.commit_characters_.MergeFrom(from._impl_.commit_characters_);
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_detail().empty()) {
    _this->_internal_set_detail(from._internal_detail());
  }
  if (!from._internal_sort_text().empty()) {
    _this->_internal_set_sort_text(from._internal_sort_text());
  }
  if (!from._internal_filter_text().empty()) {
    _this->_internal_set_filter_text(from._internal_filter_text());
  }
  if (from._internal_has_text_edit()) {
    _this->_internal_mutable_text_edit()->::io::deephaven::proto::backplane::script::grpc::TextEdit::MergeFrom(
        from._internal_text_edit());
  }
  if (from._internal_has_documentation()) {
    _this->_internal_mutable_documentation()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
        from._internal_documentation());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if (from._internal_deprecated() != 0) {
    _this->_internal_set_deprecated(from._internal_deprecated());
  }
  if (from._internal_preselect() != 0) {
    _this->_internal_set_preselect(from._internal_preselect());
  }
  if (from._internal_insert_text_format() != 0) {
    _this->_internal_set_insert_text_format(from._internal_insert_text_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionItem::CopyFrom(const CompletionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionItem::IsInitialized() const {
  return true;
}

void CompletionItem::InternalSwap(CompletionItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_text_edits_.InternalSwap(&other->_impl_.additional_text_edits_);
  _impl_.commit_characters_.InternalSwap(&other->_impl_.commit_characters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detail_, lhs_arena,
      &other->_impl_.detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sort_text_, lhs_arena,
      &other->_impl_.sort_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filter_text_, lhs_arena,
      &other->_impl_.filter_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.insert_text_format_)
      + sizeof(CompletionItem::_impl_.insert_text_format_)
      - PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.text_edit_)>(
          reinterpret_cast<char*>(&_impl_.text_edit_),
          reinterpret_cast<char*>(&other->_impl_.text_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[31]);
}

// ===================================================================

class TextEdit::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const TextEdit* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
TextEdit::_Internal::range(const TextEdit* msg) {
  return *msg->_impl_.range_;
}
TextEdit::TextEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}
TextEdit::TextEdit(const TextEdit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextEdit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.range_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from._impl_.range_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}

inline void TextEdit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.range_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextEdit::~TextEdit() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextEdit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.range_;
}

void TextEdit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEdit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.TextEdit.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextEdit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.TextEdit.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextEdit)
  return target;
}

size_t TextEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextEdit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextEdit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextEdit::GetClassData() const { return &_class_data_; }


void TextEdit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextEdit*>(&to_msg);
  auto& from = static_cast<const TextEdit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
        from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextEdit::CopyFrom(const TextEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEdit::IsInitialized() const {
  return true;
}

void TextEdit::InternalSwap(TextEdit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.range_, other->_impl_.range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEdit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[32]);
}

// ===================================================================

class GetSignatureHelpRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext& context(const GetSignatureHelpRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetSignatureHelpRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetSignatureHelpRequest* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext&
GetSignatureHelpRequest::_Internal::context(const GetSignatureHelpRequest* msg) {
  return *msg->_impl_.context_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
GetSignatureHelpRequest::_Internal::text_document(const GetSignatureHelpRequest* msg) {
  return *msg->_impl_.text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
GetSignatureHelpRequest::_Internal::position(const GetSignatureHelpRequest* msg) {
  return *msg->_impl_.position_;
}
GetSignatureHelpRequest::GetSignatureHelpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
}
GetSignatureHelpRequest::GetSignatureHelpRequest(const GetSignatureHelpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSignatureHelpRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.context_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext(*from._impl_.context_);
  }
  if (from._internal_has_text_document()) {
    _this->_impl_.text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from._impl_.text_document_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
}

inline void GetSignatureHelpRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.context_){nullptr}
    , decltype(_impl_.text_document_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSignatureHelpRequest::~GetSignatureHelpRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSignatureHelpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.context_;
  if (this != internal_default_instance()) delete _impl_.text_document_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void GetSignatureHelpRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSignatureHelpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_document_ != nullptr) {
    delete _impl_.text_document_;
  }
  _impl_.text_document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignatureHelpRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.SignatureHelpContext context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSignatureHelpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.SignatureHelpContext context = 1;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->_internal_has_text_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  return target;
}

size_t GetSignatureHelpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.SignatureHelpContext context = 1;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (this->_internal_has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_document_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignatureHelpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSignatureHelpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignatureHelpRequest::GetClassData() const { return &_class_data_; }


void GetSignatureHelpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSignatureHelpRequest*>(&to_msg);
  auto& from = static_cast<const GetSignatureHelpRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext::MergeFrom(
        from._internal_context());
  }
  if (from._internal_has_text_document()) {
    _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
        from._internal_text_document());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignatureHelpRequest::CopyFrom(const GetSignatureHelpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignatureHelpRequest::IsInitialized() const {
  return true;
}

void GetSignatureHelpRequest::InternalSwap(GetSignatureHelpRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.position_)
      + sizeof(GetSignatureHelpRequest::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignatureHelpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[33]);
}

// ===================================================================

class SignatureHelpContext::_Internal {
 public:
  using HasBits = decltype(std::declval<SignatureHelpContext>()._impl_._has_bits_);
  static void set_has_trigger_character(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse& active_signature_help(const SignatureHelpContext* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse&
SignatureHelpContext::_Internal::active_signature_help(const SignatureHelpContext* msg) {
  return *msg->_impl_.active_signature_help_;
}
SignatureHelpContext::SignatureHelpContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
}
SignatureHelpContext::SignatureHelpContext(const SignatureHelpContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureHelpContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trigger_character_){}
    , decltype(_impl_.active_signature_help_){nullptr}
    , decltype(_impl_.trigger_kind_){}
    , decltype(_impl_.is_retrigger_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trigger_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trigger_character()) {
    _this->_impl_.trigger_character_.Set(from._internal_trigger_character(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_active_signature_help()) {
    _this->_impl_.active_signature_help_ = new ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse(*from._impl_.active_signature_help_);
  }
  ::memcpy(&_impl_.trigger_kind_, &from._impl_.trigger_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_retrigger_) -
    reinterpret_cast<char*>(&_impl_.trigger_kind_)) + sizeof(_impl_.is_retrigger_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
}

inline void SignatureHelpContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trigger_character_){}
    , decltype(_impl_.active_signature_help_){nullptr}
    , decltype(_impl_.trigger_kind_){0}
    , decltype(_impl_.is_retrigger_){false}
  };
  _impl_.trigger_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignatureHelpContext::~SignatureHelpContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureHelpContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trigger_character_.Destroy();
  if (this != internal_default_instance()) delete _impl_.active_signature_help_;
}

void SignatureHelpContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureHelpContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.trigger_character_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.active_signature_help_ != nullptr) {
    delete _impl_.active_signature_help_;
  }
  _impl_.active_signature_help_ = nullptr;
  ::memset(&_impl_.trigger_kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_retrigger_) -
      reinterpret_cast<char*>(&_impl_.trigger_kind_)) + sizeof(_impl_.is_retrigger_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureHelpContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 trigger_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.trigger_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string trigger_character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trigger_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.SignatureHelpContext.trigger_character"));
        } else
          goto handle_unusual;
        continue;
      // bool is_retrigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_retrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse active_signature_help = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_signature_help(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignatureHelpContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_trigger_kind(), target);
  }

  // optional string trigger_character = 2;
  if (_internal_has_trigger_character()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trigger_character().data(), static_cast<int>(this->_internal_trigger_character().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.SignatureHelpContext.trigger_character");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trigger_character(), target);
  }

  // bool is_retrigger = 3;
  if (this->_internal_is_retrigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_retrigger(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse active_signature_help = 4;
  if (this->_internal_has_active_signature_help()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::active_signature_help(this),
        _Internal::active_signature_help(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  return target;
}

size_t SignatureHelpContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string trigger_character = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_character());
  }

  // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse active_signature_help = 4;
  if (this->_internal_has_active_signature_help()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.active_signature_help_);
  }

  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trigger_kind());
  }

  // bool is_retrigger = 3;
  if (this->_internal_is_retrigger() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureHelpContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureHelpContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureHelpContext::GetClassData() const { return &_class_data_; }


void SignatureHelpContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureHelpContext*>(&to_msg);
  auto& from = static_cast<const SignatureHelpContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trigger_character()) {
    _this->_internal_set_trigger_character(from._internal_trigger_character());
  }
  if (from._internal_has_active_signature_help()) {
    _this->_internal_mutable_active_signature_help()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse::MergeFrom(
        from._internal_active_signature_help());
  }
  if (from._internal_trigger_kind() != 0) {
    _this->_internal_set_trigger_kind(from._internal_trigger_kind());
  }
  if (from._internal_is_retrigger() != 0) {
    _this->_internal_set_is_retrigger(from._internal_is_retrigger());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureHelpContext::CopyFrom(const SignatureHelpContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureHelpContext::IsInitialized() const {
  return true;
}

void SignatureHelpContext::InternalSwap(SignatureHelpContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trigger_character_, lhs_arena,
      &other->_impl_.trigger_character_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.is_retrigger_)
      + sizeof(SignatureHelpContext::_impl_.is_retrigger_)
      - PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.active_signature_help_)>(
          reinterpret_cast<char*>(&_impl_.active_signature_help_),
          reinterpret_cast<char*>(&other->_impl_.active_signature_help_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureHelpContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[34]);
}

// ===================================================================

class GetSignatureHelpResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignatureHelpResponse>()._impl_._has_bits_);
  static void set_has_active_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetSignatureHelpResponse::GetSignatureHelpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
}
GetSignatureHelpResponse::GetSignatureHelpResponse(const GetSignatureHelpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSignatureHelpResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signatures_){from._impl_.signatures_}
    , decltype(_impl_.active_signature_){}
    , decltype(_impl_.active_parameter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.active_signature_, &from._impl_.active_signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_parameter_) -
    reinterpret_cast<char*>(&_impl_.active_signature_)) + sizeof(_impl_.active_parameter_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
}

inline void GetSignatureHelpResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signatures_){arena}
    , decltype(_impl_.active_signature_){0}
    , decltype(_impl_.active_parameter_){0}
  };
}

GetSignatureHelpResponse::~GetSignatureHelpResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSignatureHelpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signatures_.~RepeatedPtrField();
}

void GetSignatureHelpResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSignatureHelpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.active_signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.active_parameter_) -
        reinterpret_cast<char*>(&_impl_.active_signature_)) + sizeof(_impl_.active_parameter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignatureHelpResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.script.grpc.SignatureInformation signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 active_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_active_signature(&has_bits);
          _impl_.active_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 active_parameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_active_parameter(&has_bits);
          _impl_.active_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSignatureHelpResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.SignatureInformation signatures = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 active_signature = 2;
  if (_internal_has_active_signature()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_active_signature(), target);
  }

  // optional int32 active_parameter = 3;
  if (_internal_has_active_parameter()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_active_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  return target;
}

size_t GetSignatureHelpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.SignatureInformation signatures = 1;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->_impl_.signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 active_signature = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_active_signature());
    }

    // optional int32 active_parameter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_active_parameter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignatureHelpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSignatureHelpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignatureHelpResponse::GetClassData() const { return &_class_data_; }


void GetSignatureHelpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSignatureHelpResponse*>(&to_msg);
  auto& from = static_cast<const GetSignatureHelpResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signatures_.MergeFrom(from._impl_.signatures_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.active_signature_ = from._impl_.active_signature_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.active_parameter_ = from._impl_.active_parameter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignatureHelpResponse::CopyFrom(const GetSignatureHelpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignatureHelpResponse::IsInitialized() const {
  return true;
}

void GetSignatureHelpResponse::InternalSwap(GetSignatureHelpResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_parameter_)
      + sizeof(GetSignatureHelpResponse::_impl_.active_parameter_)
      - PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_signature_)>(
          reinterpret_cast<char*>(&_impl_.active_signature_),
          reinterpret_cast<char*>(&other->_impl_.active_signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignatureHelpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[35]);
}

// ===================================================================

class SignatureInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<SignatureInformation>()._impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& documentation(const SignatureInformation* msg);
  static void set_has_active_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::MarkupContent&
SignatureInformation::_Internal::documentation(const SignatureInformation* msg) {
  return *msg->_impl_.documentation_;
}
SignatureInformation::SignatureInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
}
SignatureInformation::SignatureInformation(const SignatureInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameters_){from._impl_.parameters_}
    , decltype(_impl_.label_){}
    , decltype(_impl_.documentation_){nullptr}
    , decltype(_impl_.active_parameter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_documentation()) {
    _this->_impl_.documentation_ = new ::io::deephaven::proto::backplane::script::grpc::MarkupContent(*from._impl_.documentation_);
  }
  _this->_impl_.active_parameter_ = from._impl_.active_parameter_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
}

inline void SignatureInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameters_){arena}
    , decltype(_impl_.label_){}
    , decltype(_impl_.documentation_){nullptr}
    , decltype(_impl_.active_parameter_){0}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignatureInformation::~SignatureInformation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.~RepeatedPtrField();
  _impl_.label_.Destroy();
  if (this != internal_default_instance()) delete _impl_.documentation_;
}

void SignatureInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.documentation_ != nullptr) {
    delete _impl_.documentation_;
  }
  _impl_.documentation_ = nullptr;
  _impl_.active_parameter_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.SignatureInformation.label"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.ParameterInformation parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 active_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_active_parameter(&has_bits);
          _impl_.active_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignatureInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.SignatureInformation.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
  if (this->_internal_has_documentation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::documentation(this),
        _Internal::documentation(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.ParameterInformation parameters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 active_parameter = 4;
  if (_internal_has_active_parameter()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_active_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  return target;
}

size_t SignatureInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.ParameterInformation parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->_impl_.parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
  if (this->_internal_has_documentation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.documentation_);
  }

  // optional int32 active_parameter = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_active_parameter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureInformation::GetClassData() const { return &_class_data_; }


void SignatureInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureInformation*>(&to_msg);
  auto& from = static_cast<const SignatureInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_has_documentation()) {
    _this->_internal_mutable_documentation()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
        from._internal_documentation());
  }
  if (from._internal_has_active_parameter()) {
    _this->_internal_set_active_parameter(from._internal_active_parameter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureInformation::CopyFrom(const SignatureInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureInformation::IsInitialized() const {
  return true;
}

void SignatureInformation::InternalSwap(SignatureInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.active_parameter_)
      + sizeof(SignatureInformation::_impl_.active_parameter_)
      - PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.documentation_)>(
          reinterpret_cast<char*>(&_impl_.documentation_),
          reinterpret_cast<char*>(&other->_impl_.documentation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[36]);
}

// ===================================================================

class ParameterInformation::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& documentation(const ParameterInformation* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::MarkupContent&
ParameterInformation::_Internal::documentation(const ParameterInformation* msg) {
  return *msg->_impl_.documentation_;
}
ParameterInformation::ParameterInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
}
ParameterInformation::ParameterInformation(const ParameterInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParameterInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.label_){}
    , decltype(_impl_.documentation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_documentation()) {
    _this->_impl_.documentation_ = new ::io::deephaven::proto::backplane::script::grpc::MarkupContent(*from._impl_.documentation_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
}

inline void ParameterInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.label_){}
    , decltype(_impl_.documentation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParameterInformation::~ParameterInformation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParameterInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_.Destroy();
  if (this != internal_default_instance()) delete _impl_.documentation_;
}

void ParameterInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParameterInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.documentation_ != nullptr) {
    delete _impl_.documentation_;
  }
  _impl_.documentation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.ParameterInformation.label"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParameterInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.ParameterInformation.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
  if (this->_internal_has_documentation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::documentation(this),
        _Internal::documentation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  return target;
}

size_t ParameterInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
  if (this->_internal_has_documentation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.documentation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParameterInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterInformation::GetClassData() const { return &_class_data_; }


void ParameterInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParameterInformation*>(&to_msg);
  auto& from = static_cast<const ParameterInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_has_documentation()) {
    _this->_internal_mutable_documentation()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
        from._internal_documentation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterInformation::CopyFrom(const ParameterInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterInformation::IsInitialized() const {
  return true;
}

void ParameterInformation::InternalSwap(ParameterInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  swap(_impl_.documentation_, other->_impl_.documentation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[37]);
}

// ===================================================================

class GetHoverRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetHoverRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetHoverRequest* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
GetHoverRequest::_Internal::text_document(const GetHoverRequest* msg) {
  return *msg->_impl_.text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position&
GetHoverRequest::_Internal::position(const GetHoverRequest* msg) {
  return *msg->_impl_.position_;
}
GetHoverRequest::GetHoverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
}
GetHoverRequest::GetHoverRequest(const GetHoverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHoverRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_document_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text_document()) {
    _this->_impl_.text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from._impl_.text_document_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::io::deephaven::proto::backplane::script::grpc::Position(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
}

inline void GetHoverRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_document_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetHoverRequest::~GetHoverRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHoverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.text_document_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void GetHoverRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.text_document_ != nullptr) {
    delete _impl_.text_document_;
  }
  _impl_.text_document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHoverRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHoverRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
  if (this->_internal_has_text_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  return target;
}

size_t GetHoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
  if (this->_internal_has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_document_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHoverRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHoverRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHoverRequest::GetClassData() const { return &_class_data_; }


void GetHoverRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHoverRequest*>(&to_msg);
  auto& from = static_cast<const GetHoverRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text_document()) {
    _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
        from._internal_text_document());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHoverRequest::CopyFrom(const GetHoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHoverRequest::IsInitialized() const {
  return true;
}

void GetHoverRequest::InternalSwap(GetHoverRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.position_)
      + sizeof(GetHoverRequest::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.text_document_)>(
          reinterpret_cast<char*>(&_impl_.text_document_),
          reinterpret_cast<char*>(&other->_impl_.text_document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHoverRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[38]);
}

// ===================================================================

class GetHoverResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& contents(const GetHoverResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const GetHoverResponse* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::MarkupContent&
GetHoverResponse::_Internal::contents(const GetHoverResponse* msg) {
  return *msg->_impl_.contents_;
}
const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
GetHoverResponse::_Internal::range(const GetHoverResponse* msg) {
  return *msg->_impl_.range_;
}
GetHoverResponse::GetHoverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
}
GetHoverResponse::GetHoverResponse(const GetHoverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHoverResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contents()) {
    _this->_impl_.contents_ = new ::io::deephaven::proto::backplane::script::grpc::MarkupContent(*from._impl_.contents_);
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from._impl_.range_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
}

inline void GetHoverResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetHoverResponse::~GetHoverResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHoverResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.contents_;
  if (this != internal_default_instance()) delete _impl_.range_;
}

void GetHoverResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHoverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.contents_ != nullptr) {
    delete _impl_.contents_;
  }
  _impl_.contents_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHoverResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.MarkupContent contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHoverResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent contents = 1;
  if (this->_internal_has_contents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::contents(this),
        _Internal::contents(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 2;
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  return target;
}

size_t GetHoverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent contents = 1;
  if (this->_internal_has_contents()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contents_);
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 2;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHoverResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHoverResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHoverResponse::GetClassData() const { return &_class_data_; }


void GetHoverResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHoverResponse*>(&to_msg);
  auto& from = static_cast<const GetHoverResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contents()) {
    _this->_internal_mutable_contents()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
        from._internal_contents());
  }
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
        from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHoverResponse::CopyFrom(const GetHoverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHoverResponse::IsInitialized() const {
  return true;
}

void GetHoverResponse::InternalSwap(GetHoverResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.range_)
      + sizeof(GetHoverResponse::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.contents_)>(
          reinterpret_cast<char*>(&_impl_.contents_),
          reinterpret_cast<char*>(&other->_impl_.contents_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHoverResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[39]);
}

// ===================================================================

class GetDiagnosticRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDiagnosticRequest>()._impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetDiagnosticRequest* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_result_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier&
GetDiagnosticRequest::_Internal::text_document(const GetDiagnosticRequest* msg) {
  return *msg->_impl_.text_document_;
}
GetDiagnosticRequest::GetDiagnosticRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
}
GetDiagnosticRequest::GetDiagnosticRequest(const GetDiagnosticRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDiagnosticRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.previous_result_id_){}
    , decltype(_impl_.text_document_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.previous_result_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_result_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_previous_result_id()) {
    _this->_impl_.previous_result_id_.Set(from._internal_previous_result_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_text_document()) {
    _this->_impl_.text_document_ = new ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier(*from._impl_.text_document_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
}

inline void GetDiagnosticRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.previous_result_id_){}
    , decltype(_impl_.text_document_){nullptr}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previous_result_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_result_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDiagnosticRequest::~GetDiagnosticRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDiagnosticRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.previous_result_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.text_document_;
}

void GetDiagnosticRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDiagnosticRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.previous_result_id_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.text_document_ != nullptr) {
    delete _impl_.text_document_;
  }
  _impl_.text_document_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDiagnosticRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest.identifier"));
        } else
          goto handle_unusual;
        continue;
      // optional string previous_result_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_previous_result_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest.previous_result_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDiagnosticRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
  if (this->_internal_has_text_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // optional string identifier = 2;
  if (_internal_has_identifier()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // optional string previous_result_id = 3;
  if (_internal_has_previous_result_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_result_id().data(), static_cast<int>(this->_internal_previous_result_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest.previous_result_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_previous_result_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  return target;
}

size_t GetDiagnosticRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string previous_result_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previous_result_id());
    }

  }
  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
  if (this->_internal_has_text_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDiagnosticRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDiagnosticRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDiagnosticRequest::GetClassData() const { return &_class_data_; }


void GetDiagnosticRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDiagnosticRequest*>(&to_msg);
  auto& from = static_cast<const GetDiagnosticRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_previous_result_id(from._internal_previous_result_id());
    }
  }
  if (from._internal_has_text_document()) {
    _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
        from._internal_text_document());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDiagnosticRequest::CopyFrom(const GetDiagnosticRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDiagnosticRequest::IsInitialized() const {
  return true;
}

void GetDiagnosticRequest::InternalSwap(GetDiagnosticRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previous_result_id_, lhs_arena,
      &other->_impl_.previous_result_id_, rhs_arena
  );
  swap(_impl_.text_document_, other->_impl_.text_document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDiagnosticRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[40]);
}

// ===================================================================

class GetPullDiagnosticResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPullDiagnosticResponse>()._impl_._has_bits_);
  static void set_has_result_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetPullDiagnosticResponse::GetPullDiagnosticResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
}
GetPullDiagnosticResponse::GetPullDiagnosticResponse(const GetPullDiagnosticResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPullDiagnosticResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.result_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kind().empty()) {
    _this->_impl_.kind_.Set(from._internal_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_.Set(from._internal_result_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
}

inline void GetPullDiagnosticResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.result_id_){}
  };
  _impl_.kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPullDiagnosticResponse::~GetPullDiagnosticResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPullDiagnosticResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.kind_.Destroy();
  _impl_.result_id_.Destroy();
}

void GetPullDiagnosticResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPullDiagnosticResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.kind_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.result_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPullDiagnosticResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse.kind"));
        } else
          goto handle_unusual;
        continue;
      // optional string result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse.result_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPullDiagnosticResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse.kind");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kind(), target);
  }

  // optional string result_id = 2;
  if (_internal_has_result_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_id().data(), static_cast<int>(this->_internal_result_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse.result_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_id(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  return target;
}

size_t GetPullDiagnosticResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  // optional string result_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPullDiagnosticResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPullDiagnosticResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPullDiagnosticResponse::GetClassData() const { return &_class_data_; }


void GetPullDiagnosticResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPullDiagnosticResponse*>(&to_msg);
  auto& from = static_cast<const GetPullDiagnosticResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_kind().empty()) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_set_result_id(from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPullDiagnosticResponse::CopyFrom(const GetPullDiagnosticResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPullDiagnosticResponse::IsInitialized() const {
  return true;
}

void GetPullDiagnosticResponse::InternalSwap(GetPullDiagnosticResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kind_, lhs_arena,
      &other->_impl_.kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_id_, lhs_arena,
      &other->_impl_.result_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPullDiagnosticResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[41]);
}

// ===================================================================

class GetPublishDiagnosticResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPublishDiagnosticResponse>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetPublishDiagnosticResponse::GetPublishDiagnosticResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
}
GetPublishDiagnosticResponse::GetPublishDiagnosticResponse(const GetPublishDiagnosticResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPublishDiagnosticResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostics_){from._impl_.diagnostics_}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
}

inline void GetPublishDiagnosticResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostics_){arena}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.version_){0}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPublishDiagnosticResponse::~GetPublishDiagnosticResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPublishDiagnosticResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.diagnostics_.~RepeatedPtrField();
  _impl_.uri_.Destroy();
}

void GetPublishDiagnosticResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPublishDiagnosticResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.diagnostics_.Clear();
  _impl_.uri_.ClearToEmpty();
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPublishDiagnosticResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse.uri"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic diagnostics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnostics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPublishDiagnosticResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // optional int32 version = 2;
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic diagnostics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_diagnostics_size()); i < n; i++) {
    const auto& repfield = this->_internal_diagnostics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  return target;
}

size_t GetPublishDiagnosticResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic diagnostics = 3;
  total_size += 1UL * this->_internal_diagnostics_size();
  for (const auto& msg : this->_impl_.diagnostics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // optional int32 version = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPublishDiagnosticResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPublishDiagnosticResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPublishDiagnosticResponse::GetClassData() const { return &_class_data_; }


void GetPublishDiagnosticResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPublishDiagnosticResponse*>(&to_msg);
  auto& from = static_cast<const GetPublishDiagnosticResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.diagnostics_.MergeFrom(from._impl_.diagnostics_);
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPublishDiagnosticResponse::CopyFrom(const GetPublishDiagnosticResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublishDiagnosticResponse::IsInitialized() const {
  return true;
}

void GetPublishDiagnosticResponse::InternalSwap(GetPublishDiagnosticResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.diagnostics_.InternalSwap(&other->_impl_.diagnostics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPublishDiagnosticResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[42]);
}

// ===================================================================

class Diagnostic_CodeDescription::_Internal {
 public:
};

Diagnostic_CodeDescription::Diagnostic_CodeDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
}
Diagnostic_CodeDescription::Diagnostic_CodeDescription(const Diagnostic_CodeDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Diagnostic_CodeDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.href_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.href_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.href_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_href().empty()) {
    _this->_impl_.href_.Set(from._internal_href(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
}

inline void Diagnostic_CodeDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.href_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.href_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.href_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Diagnostic_CodeDescription::~Diagnostic_CodeDescription() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Diagnostic_CodeDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.href_.Destroy();
}

void Diagnostic_CodeDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Diagnostic_CodeDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.href_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Diagnostic_CodeDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string href = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_href();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription.href"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Diagnostic_CodeDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string href = 1;
  if (!this->_internal_href().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_href().data(), static_cast<int>(this->_internal_href().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription.href");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_href(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  return target;
}

size_t Diagnostic_CodeDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string href = 1;
  if (!this->_internal_href().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_href());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Diagnostic_CodeDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Diagnostic_CodeDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Diagnostic_CodeDescription::GetClassData() const { return &_class_data_; }


void Diagnostic_CodeDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Diagnostic_CodeDescription*>(&to_msg);
  auto& from = static_cast<const Diagnostic_CodeDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_href().empty()) {
    _this->_internal_set_href(from._internal_href());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Diagnostic_CodeDescription::CopyFrom(const Diagnostic_CodeDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostic_CodeDescription::IsInitialized() const {
  return true;
}

void Diagnostic_CodeDescription::InternalSwap(Diagnostic_CodeDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.href_, lhs_arena,
      &other->_impl_.href_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostic_CodeDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[43]);
}

// ===================================================================

class Diagnostic::_Internal {
 public:
  using HasBits = decltype(std::declval<Diagnostic>()._impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const Diagnostic* msg);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription& code_description(const Diagnostic* msg);
  static void set_has_code_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange&
Diagnostic::_Internal::range(const Diagnostic* msg) {
  return *msg->_impl_.range_;
}
const ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription&
Diagnostic::_Internal::code_description(const Diagnostic* msg) {
  return *msg->_impl_.code_description_;
}
Diagnostic::Diagnostic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic)
}
Diagnostic::Diagnostic(const Diagnostic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Diagnostic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.code_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.code_description_){nullptr}
    , decltype(_impl_.severity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::io::deephaven::proto::backplane::script::grpc::DocumentRange(*from._impl_.range_);
  }
  if (from._internal_has_code_description()) {
    _this->_impl_.code_description_ = new ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription(*from._impl_.code_description_);
  }
  _this->_impl_.severity_ = from._impl_.severity_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic)
}

inline void Diagnostic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tags_){arena}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.code_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.code_description_){nullptr}
    , decltype(_impl_.severity_){0}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Diagnostic::~Diagnostic() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Diagnostic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedField();
  _impl_.code_.Destroy();
  _impl_.source_.Destroy();
  _impl_.message_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.code_description_;
}

void Diagnostic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Diagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.message_.ClearToEmpty();
  if (cached_has_bits & 0x00000004u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  if (cached_has_bits & 0x00000008u) {
    GOOGLE_DCHECK(_impl_.code_description_ != nullptr);
    _impl_.code_description_->Clear();
  }
  _impl_.severity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Diagnostic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::io::deephaven::proto::backplane::script::grpc::Diagnostic_DiagnosticSeverity>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.Diagnostic.code"));
        } else
          goto handle_unusual;
        continue;
      // optional .io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription code_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.Diagnostic.source"));
        } else
          goto handle_unusual;
        continue;
      // string message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.Diagnostic.message"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_tags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_tags(static_cast<::io::deephaven::proto::backplane::script::grpc::Diagnostic_DiagnosticTag>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Diagnostic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity severity = 2;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_severity(), target);
  }

  // optional string code = 3;
  if (_internal_has_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.Diagnostic.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // optional .io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription code_description = 4;
  if (_internal_has_code_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::code_description(this),
        _Internal::code_description(this).GetCachedSize(), target, stream);
  }

  // optional string source = 5;
  if (_internal_has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.Diagnostic.source");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_source(), target);
  }

  // string message = 6;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.Diagnostic.message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_message(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag tags = 7;
  {
    int byte_size = _impl_._tags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, _impl_.tags_, byte_size, target);
    }
  }

  // optional bytes data = 9;
  if (_internal_has_data()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  return target;
}

size_t Diagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag tags = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_tags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_tags(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string source = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

  }
  // string message = 6;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // optional bytes data = 9;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // optional .io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription code_description = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.code_description_);
  }

  // .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity severity = 2;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Diagnostic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Diagnostic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Diagnostic::GetClassData() const { return &_class_data_; }


void Diagnostic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Diagnostic*>(&to_msg);
  auto& from = static_cast<const Diagnostic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_source(from._internal_source());
    }
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
        from._internal_range());
  }
  if (cached_has_bits & 0x00000008u) {
    _this->_internal_mutable_code_description()->::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription::MergeFrom(
        from._internal_code_description());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Diagnostic::CopyFrom(const Diagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostic::IsInitialized() const {
  return true;
}

void Diagnostic::InternalSwap(Diagnostic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.severity_)
      + sizeof(Diagnostic::_impl_.severity_)
      - PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[44]);
}

// ===================================================================

class FigureDescriptor_ChartDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_ChartDescriptor>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
}
FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(const FigureDescriptor_ChartDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_ChartDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.series_){from._impl_.series_}
    , decltype(_impl_.multi_series_){from._impl_.multi_series_}
    , decltype(_impl_.axes_){from._impl_.axes_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.title_font_){}
    , decltype(_impl_.title_color_){}
    , decltype(_impl_.legend_font_){}
    , decltype(_impl_.legend_color_){}
    , decltype(_impl_.colspan_){}
    , decltype(_impl_.rowspan_){}
    , decltype(_impl_.chart_type_){}
    , decltype(_impl_.show_legend_){}
    , decltype(_impl_.is3d_){}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title_font().empty()) {
    _this->_impl_.title_font_.Set(from._internal_title_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title_color().empty()) {
    _this->_impl_.title_color_.Set(from._internal_title_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.legend_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legend_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_legend_font().empty()) {
    _this->_impl_.legend_font_.Set(from._internal_legend_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.legend_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legend_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_legend_color().empty()) {
    _this->_impl_.legend_color_.Set(from._internal_legend_color(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.colspan_, &from._impl_.colspan_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_) -
    reinterpret_cast<char*>(&_impl_.colspan_)) + sizeof(_impl_.row_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
}

inline void FigureDescriptor_ChartDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.series_){arena}
    , decltype(_impl_.multi_series_){arena}
    , decltype(_impl_.axes_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.title_font_){}
    , decltype(_impl_.title_color_){}
    , decltype(_impl_.legend_font_){}
    , decltype(_impl_.legend_color_){}
    , decltype(_impl_.colspan_){0}
    , decltype(_impl_.rowspan_){0}
    , decltype(_impl_.chart_type_){0}
    , decltype(_impl_.show_legend_){false}
    , decltype(_impl_.is3d_){false}
    , decltype(_impl_.column_){0}
    , decltype(_impl_.row_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.legend_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legend_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.legend_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legend_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_ChartDescriptor::~FigureDescriptor_ChartDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_ChartDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.series_.~RepeatedPtrField();
  _impl_.multi_series_.~RepeatedPtrField();
  _impl_.axes_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.title_font_.Destroy();
  _impl_.title_color_.Destroy();
  _impl_.legend_font_.Destroy();
  _impl_.legend_color_.Destroy();
}

void FigureDescriptor_ChartDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_ChartDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.series_.Clear();
  _impl_.multi_series_.Clear();
  _impl_.axes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_.title_font_.ClearToEmpty();
  _impl_.title_color_.ClearToEmpty();
  _impl_.legend_font_.ClearToEmpty();
  _impl_.legend_color_.ClearToEmpty();
  ::memset(&_impl_.colspan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.row_) -
      reinterpret_cast<char*>(&_impl_.colspan_)) + sizeof(_impl_.row_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_ChartDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 colspan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.colspan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rowspan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rowspan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_axes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chart_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor_ChartType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title"));
        } else
          goto handle_unusual;
        continue;
      // string title_font = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_title_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_font"));
        } else
          goto handle_unusual;
        continue;
      // string title_color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_title_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_color"));
        } else
          goto handle_unusual;
        continue;
      // bool show_legend = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.show_legend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string legend_font = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_legend_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_font"));
        } else
          goto handle_unusual;
        continue;
      // string legend_color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_legend_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_color"));
        } else
          goto handle_unusual;
        continue;
      // bool is3d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 column = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 row = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_ChartDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 colspan = 1;
  if (this->_internal_colspan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_colspan(), target);
  }

  // int32 rowspan = 2;
  if (this->_internal_rowspan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rowspan(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_size()); i < n; i++) {
    const auto& repfield = this->_internal_series(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_multi_series_size()); i < n; i++) {
    const auto& repfield = this->_internal_multi_series(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_axes_size()); i < n; i++) {
    const auto& repfield = this->_internal_axes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
  if (this->_internal_chart_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_chart_type(), target);
  }

  // optional string title = 7;
  if (_internal_has_title()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // string title_font = 8;
  if (!this->_internal_title_font().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_font().data(), static_cast<int>(this->_internal_title_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_font");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_title_font(), target);
  }

  // string title_color = 9;
  if (!this->_internal_title_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_color().data(), static_cast<int>(this->_internal_title_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_color");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title_color(), target);
  }

  // bool show_legend = 10;
  if (this->_internal_show_legend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_show_legend(), target);
  }

  // string legend_font = 11;
  if (!this->_internal_legend_font().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_legend_font().data(), static_cast<int>(this->_internal_legend_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_font");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_legend_font(), target);
  }

  // string legend_color = 12;
  if (!this->_internal_legend_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_legend_color().data(), static_cast<int>(this->_internal_legend_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_color");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_legend_color(), target);
  }

  // bool is3d = 13;
  if (this->_internal_is3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is3d(), target);
  }

  // int32 column = 14;
  if (this->_internal_column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_column(), target);
  }

  // int32 row = 15;
  if (this->_internal_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  return target;
}

size_t FigureDescriptor_ChartDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
  total_size += 1UL * this->_internal_series_size();
  for (const auto& msg : this->_impl_.series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
  total_size += 1UL * this->_internal_multi_series_size();
  for (const auto& msg : this->_impl_.multi_series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
  total_size += 1UL * this->_internal_axes_size();
  for (const auto& msg : this->_impl_.axes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string title_font = 8;
  if (!this->_internal_title_font().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_font());
  }

  // string title_color = 9;
  if (!this->_internal_title_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_color());
  }

  // string legend_font = 11;
  if (!this->_internal_legend_font().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_legend_font());
  }

  // string legend_color = 12;
  if (!this->_internal_legend_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_legend_color());
  }

  // int32 colspan = 1;
  if (this->_internal_colspan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_colspan());
  }

  // int32 rowspan = 2;
  if (this->_internal_rowspan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rowspan());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
  if (this->_internal_chart_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chart_type());
  }

  // bool show_legend = 10;
  if (this->_internal_show_legend() != 0) {
    total_size += 1 + 1;
  }

  // bool is3d = 13;
  if (this->_internal_is3d() != 0) {
    total_size += 1 + 1;
  }

  // int32 column = 14;
  if (this->_internal_column() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_column());
  }

  // int32 row = 15;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_row());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_ChartDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_ChartDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_ChartDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_ChartDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_ChartDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_ChartDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.series_.MergeFrom(from._impl_.series_);
  _this->_impl_.multi_series_.MergeFrom(from._impl_.multi_series_);
  _this->_impl_.axes_.MergeFrom(from._impl_.axes_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_title_font().empty()) {
    _this->_internal_set_title_font(from._internal_title_font());
  }
  if (!from._internal_title_color().empty()) {
    _this->_internal_set_title_color(from._internal_title_color());
  }
  if (!from._internal_legend_font().empty()) {
    _this->_internal_set_legend_font(from._internal_legend_font());
  }
  if (!from._internal_legend_color().empty()) {
    _this->_internal_set_legend_color(from._internal_legend_color());
  }
  if (from._internal_colspan() != 0) {
    _this->_internal_set_colspan(from._internal_colspan());
  }
  if (from._internal_rowspan() != 0) {
    _this->_internal_set_rowspan(from._internal_rowspan());
  }
  if (from._internal_chart_type() != 0) {
    _this->_internal_set_chart_type(from._internal_chart_type());
  }
  if (from._internal_show_legend() != 0) {
    _this->_internal_set_show_legend(from._internal_show_legend());
  }
  if (from._internal_is3d() != 0) {
    _this->_internal_set_is3d(from._internal_is3d());
  }
  if (from._internal_column() != 0) {
    _this->_internal_set_column(from._internal_column());
  }
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_ChartDescriptor::CopyFrom(const FigureDescriptor_ChartDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_ChartDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_ChartDescriptor::InternalSwap(FigureDescriptor_ChartDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.series_.InternalSwap(&other->_impl_.series_);
  _impl_.multi_series_.InternalSwap(&other->_impl_.multi_series_);
  _impl_.axes_.InternalSwap(&other->_impl_.axes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_font_, lhs_arena,
      &other->_impl_.title_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_color_, lhs_arena,
      &other->_impl_.title_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.legend_font_, lhs_arena,
      &other->_impl_.legend_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.legend_color_, lhs_arena,
      &other->_impl_.legend_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.row_)
      + sizeof(FigureDescriptor_ChartDescriptor::_impl_.row_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.colspan_)>(
          reinterpret_cast<char*>(&_impl_.colspan_),
          reinterpret_cast<char*>(&other->_impl_.colspan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_ChartDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[45]);
}

// ===================================================================

class FigureDescriptor_SeriesDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_SeriesDescriptor>()._impl_._has_bits_);
  static void set_has_lines_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shapes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_point_label_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
}
FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(const FigureDescriptor_SeriesDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_SeriesDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_sources_){from._impl_.data_sources_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.line_color_){}
    , decltype(_impl_.point_label_format_){}
    , decltype(_impl_.x_tool_tip_pattern_){}
    , decltype(_impl_.y_tool_tip_pattern_){}
    , decltype(_impl_.shape_label_){}
    , decltype(_impl_.shape_color_){}
    , decltype(_impl_.shape_){}
    , decltype(_impl_.plot_style_){}
    , decltype(_impl_.lines_visible_){}
    , decltype(_impl_.shapes_visible_){}
    , decltype(_impl_.gradient_visible_){}
    , decltype(_impl_.shape_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.line_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line_color().empty()) {
    _this->_impl_.line_color_.Set(from._internal_line_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.point_label_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_label_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_point_label_format()) {
    _this->_impl_.point_label_format_.Set(from._internal_point_label_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x_tool_tip_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_tool_tip_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x_tool_tip_pattern()) {
    _this->_impl_.x_tool_tip_pattern_.Set(from._internal_x_tool_tip_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.y_tool_tip_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_tool_tip_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y_tool_tip_pattern()) {
    _this->_impl_.y_tool_tip_pattern_.Set(from._internal_y_tool_tip_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shape_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shape_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shape_label().empty()) {
    _this->_impl_.shape_label_.Set(from._internal_shape_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shape_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shape_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shape_color().empty()) {
    _this->_impl_.shape_color_.Set(from._internal_shape_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shape_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shape().empty()) {
    _this->_impl_.shape_.Set(from._internal_shape(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.plot_style_, &from._impl_.plot_style_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shape_size_) -
    reinterpret_cast<char*>(&_impl_.plot_style_)) + sizeof(_impl_.shape_size_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
}

inline void FigureDescriptor_SeriesDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_sources_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.line_color_){}
    , decltype(_impl_.point_label_format_){}
    , decltype(_impl_.x_tool_tip_pattern_){}
    , decltype(_impl_.y_tool_tip_pattern_){}
    , decltype(_impl_.shape_label_){}
    , decltype(_impl_.shape_color_){}
    , decltype(_impl_.shape_){}
    , decltype(_impl_.plot_style_){0}
    , decltype(_impl_.lines_visible_){false}
    , decltype(_impl_.shapes_visible_){false}
    , decltype(_impl_.gradient_visible_){false}
    , decltype(_impl_.shape_size_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.line_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.line_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.point_label_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.point_label_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x_tool_tip_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_tool_tip_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_tool_tip_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_tool_tip_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shape_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shape_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shape_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shape_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shape_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_SeriesDescriptor::~FigureDescriptor_SeriesDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_SeriesDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_sources_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.line_color_.Destroy();
  _impl_.point_label_format_.Destroy();
  _impl_.x_tool_tip_pattern_.Destroy();
  _impl_.y_tool_tip_pattern_.Destroy();
  _impl_.shape_label_.Destroy();
  _impl_.shape_color_.Destroy();
  _impl_.shape_.Destroy();
}

void FigureDescriptor_SeriesDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_SeriesDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_sources_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.line_color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.point_label_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_tool_tip_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.y_tool_tip_pattern_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.shape_label_.ClearToEmpty();
  _impl_.shape_color_.ClearToEmpty();
  _impl_.shape_.ClearToEmpty();
  _impl_.plot_style_ = 0;
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.lines_visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shapes_visible_) -
        reinterpret_cast<char*>(&_impl_.lines_visible_)) + sizeof(_impl_.shapes_visible_));
  }
  _impl_.gradient_visible_ = false;
  _impl_.shape_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_SeriesDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plot_style(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesPlotStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.name"));
        } else
          goto handle_unusual;
        continue;
      // optional bool lines_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lines_visible(&has_bits);
          _impl_.lines_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shapes_visible = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shapes_visible(&has_bits);
          _impl_.shapes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool gradient_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gradient_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string line_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_line_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.line_color"));
        } else
          goto handle_unusual;
        continue;
      // optional string point_label_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_point_label_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.point_label_format"));
        } else
          goto handle_unusual;
        continue;
      // optional string x_tool_tip_pattern = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_x_tool_tip_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.x_tool_tip_pattern"));
        } else
          goto handle_unusual;
        continue;
      // optional string y_tool_tip_pattern = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_y_tool_tip_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.y_tool_tip_pattern"));
        } else
          goto handle_unusual;
        continue;
      // string shape_label = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_shape_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_label"));
        } else
          goto handle_unusual;
        continue;
      // optional double shape_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_shape_size(&has_bits);
          _impl_.shape_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string shape_color = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_shape_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_color"));
        } else
          goto handle_unusual;
        continue;
      // string shape = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_shape();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_SeriesDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_plot_style(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional bool lines_visible = 3;
  if (_internal_has_lines_visible()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_lines_visible(), target);
  }

  // optional bool shapes_visible = 4;
  if (_internal_has_shapes_visible()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_shapes_visible(), target);
  }

  // bool gradient_visible = 5;
  if (this->_internal_gradient_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_gradient_visible(), target);
  }

  // string line_color = 6;
  if (!this->_internal_line_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line_color().data(), static_cast<int>(this->_internal_line_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.line_color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_line_color(), target);
  }

  // optional string point_label_format = 8;
  if (_internal_has_point_label_format()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_point_label_format().data(), static_cast<int>(this->_internal_point_label_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.point_label_format");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_point_label_format(), target);
  }

  // optional string x_tool_tip_pattern = 9;
  if (_internal_has_x_tool_tip_pattern()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_tool_tip_pattern().data(), static_cast<int>(this->_internal_x_tool_tip_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.x_tool_tip_pattern");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_x_tool_tip_pattern(), target);
  }

  // optional string y_tool_tip_pattern = 10;
  if (_internal_has_y_tool_tip_pattern()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_y_tool_tip_pattern().data(), static_cast<int>(this->_internal_y_tool_tip_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.y_tool_tip_pattern");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_y_tool_tip_pattern(), target);
  }

  // string shape_label = 11;
  if (!this->_internal_shape_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape_label().data(), static_cast<int>(this->_internal_shape_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_label");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_shape_label(), target);
  }

  // optional double shape_size = 12;
  if (_internal_has_shape_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_shape_size(), target);
  }

  // string shape_color = 13;
  if (!this->_internal_shape_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape_color().data(), static_cast<int>(this->_internal_shape_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_color");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_shape_color(), target);
  }

  // string shape = 14;
  if (!this->_internal_shape().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape().data(), static_cast<int>(this->_internal_shape().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_shape(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  return target;
}

size_t FigureDescriptor_SeriesDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->_impl_.data_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string line_color = 6;
  if (!this->_internal_line_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line_color());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string point_label_format = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_point_label_format());
    }

    // optional string x_tool_tip_pattern = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_x_tool_tip_pattern());
    }

    // optional string y_tool_tip_pattern = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_y_tool_tip_pattern());
    }

  }
  // string shape_label = 11;
  if (!this->_internal_shape_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape_label());
  }

  // string shape_color = 13;
  if (!this->_internal_shape_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape_color());
  }

  // string shape = 14;
  if (!this->_internal_shape().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_plot_style());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional bool lines_visible = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool shapes_visible = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  // bool gradient_visible = 5;
  if (this->_internal_gradient_visible() != 0) {
    total_size += 1 + 1;
  }

  // optional double shape_size = 12;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_SeriesDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_SeriesDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_SeriesDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_SeriesDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_SeriesDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_SeriesDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_sources_.MergeFrom(from._impl_.data_sources_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_line_color().empty()) {
    _this->_internal_set_line_color(from._internal_line_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_point_label_format(from._internal_point_label_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_x_tool_tip_pattern(from._internal_x_tool_tip_pattern());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_y_tool_tip_pattern(from._internal_y_tool_tip_pattern());
    }
  }
  if (!from._internal_shape_label().empty()) {
    _this->_internal_set_shape_label(from._internal_shape_label());
  }
  if (!from._internal_shape_color().empty()) {
    _this->_internal_set_shape_color(from._internal_shape_color());
  }
  if (!from._internal_shape().empty()) {
    _this->_internal_set_shape(from._internal_shape());
  }
  if (from._internal_plot_style() != 0) {
    _this->_internal_set_plot_style(from._internal_plot_style());
  }
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lines_visible_ = from._impl_.lines_visible_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shapes_visible_ = from._impl_.shapes_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_gradient_visible() != 0) {
    _this->_internal_set_gradient_visible(from._internal_gradient_visible());
  }
  if (cached_has_bits & 0x00000020u) {
    _this->_internal_set_shape_size(from._internal_shape_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_SeriesDescriptor::CopyFrom(const FigureDescriptor_SeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_SeriesDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_SeriesDescriptor::InternalSwap(FigureDescriptor_SeriesDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_sources_.InternalSwap(&other->_impl_.data_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.line_color_, lhs_arena,
      &other->_impl_.line_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.point_label_format_, lhs_arena,
      &other->_impl_.point_label_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x_tool_tip_pattern_, lhs_arena,
      &other->_impl_.x_tool_tip_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.y_tool_tip_pattern_, lhs_arena,
      &other->_impl_.y_tool_tip_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shape_label_, lhs_arena,
      &other->_impl_.shape_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shape_color_, lhs_arena,
      &other->_impl_.shape_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shape_, lhs_arena,
      &other->_impl_.shape_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_size_)
      + sizeof(FigureDescriptor_SeriesDescriptor::_impl_.shape_size_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.plot_style_)>(
          reinterpret_cast<char*>(&_impl_.plot_style_),
          reinterpret_cast<char*>(&other->_impl_.plot_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_SeriesDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[46]);
}

// ===================================================================

class FigureDescriptor_MultiSeriesDescriptor::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& line_color(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_color(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& lines_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& points_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& gradient_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_label_format(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& x_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& y_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_label(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault& point_size(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_shape(const FigureDescriptor_MultiSeriesDescriptor* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::line_color(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.line_color_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_color(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_color_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::lines_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.lines_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::points_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.points_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::gradient_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.gradient_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_label_format(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_label_format_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::x_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.x_tool_tip_pattern_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::y_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.y_tool_tip_pattern_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_label(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_label_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_size(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_size_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault&
FigureDescriptor_MultiSeriesDescriptor::_Internal::point_shape(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_shape_;
}
FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
}
FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(const FigureDescriptor_MultiSeriesDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_MultiSeriesDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_sources_){from._impl_.data_sources_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.line_color_){nullptr}
    , decltype(_impl_.point_color_){nullptr}
    , decltype(_impl_.lines_visible_){nullptr}
    , decltype(_impl_.points_visible_){nullptr}
    , decltype(_impl_.gradient_visible_){nullptr}
    , decltype(_impl_.point_label_format_){nullptr}
    , decltype(_impl_.x_tool_tip_pattern_){nullptr}
    , decltype(_impl_.y_tool_tip_pattern_){nullptr}
    , decltype(_impl_.point_label_){nullptr}
    , decltype(_impl_.point_size_){nullptr}
    , decltype(_impl_.point_shape_){nullptr}
    , decltype(_impl_.plot_style_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_line_color()) {
    _this->_impl_.line_color_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from._impl_.line_color_);
  }
  if (from._internal_has_point_color()) {
    _this->_impl_.point_color_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from._impl_.point_color_);
  }
  if (from._internal_has_lines_visible()) {
    _this->_impl_.lines_visible_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault(*from._impl_.lines_visible_);
  }
  if (from._internal_has_points_visible()) {
    _this->_impl_.points_visible_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault(*from._impl_.points_visible_);
  }
  if (from._internal_has_gradient_visible()) {
    _this->_impl_.gradient_visible_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault(*from._impl_.gradient_visible_);
  }
  if (from._internal_has_point_label_format()) {
    _this->_impl_.point_label_format_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from._impl_.point_label_format_);
  }
  if (from._internal_has_x_tool_tip_pattern()) {
    _this->_impl_.x_tool_tip_pattern_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from._impl_.x_tool_tip_pattern_);
  }
  if (from._internal_has_y_tool_tip_pattern()) {
    _this->_impl_.y_tool_tip_pattern_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from._impl_.y_tool_tip_pattern_);
  }
  if (from._internal_has_point_label()) {
    _this->_impl_.point_label_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from._impl_.point_label_);
  }
  if (from._internal_has_point_size()) {
    _this->_impl_.point_size_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault(*from._impl_.point_size_);
  }
  if (from._internal_has_point_shape()) {
    _this->_impl_.point_shape_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault(*from._impl_.point_shape_);
  }
  _this->_impl_.plot_style_ = from._impl_.plot_style_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
}

inline void FigureDescriptor_MultiSeriesDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_sources_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.line_color_){nullptr}
    , decltype(_impl_.point_color_){nullptr}
    , decltype(_impl_.lines_visible_){nullptr}
    , decltype(_impl_.points_visible_){nullptr}
    , decltype(_impl_.gradient_visible_){nullptr}
    , decltype(_impl_.point_label_format_){nullptr}
    , decltype(_impl_.x_tool_tip_pattern_){nullptr}
    , decltype(_impl_.y_tool_tip_pattern_){nullptr}
    , decltype(_impl_.point_label_){nullptr}
    , decltype(_impl_.point_size_){nullptr}
    , decltype(_impl_.point_shape_){nullptr}
    , decltype(_impl_.plot_style_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_MultiSeriesDescriptor::~FigureDescriptor_MultiSeriesDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_MultiSeriesDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_sources_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.line_color_;
  if (this != internal_default_instance()) delete _impl_.point_color_;
  if (this != internal_default_instance()) delete _impl_.lines_visible_;
  if (this != internal_default_instance()) delete _impl_.points_visible_;
  if (this != internal_default_instance()) delete _impl_.gradient_visible_;
  if (this != internal_default_instance()) delete _impl_.point_label_format_;
  if (this != internal_default_instance()) delete _impl_.x_tool_tip_pattern_;
  if (this != internal_default_instance()) delete _impl_.y_tool_tip_pattern_;
  if (this != internal_default_instance()) delete _impl_.point_label_;
  if (this != internal_default_instance()) delete _impl_.point_size_;
  if (this != internal_default_instance()) delete _impl_.point_shape_;
}

void FigureDescriptor_MultiSeriesDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_MultiSeriesDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_sources_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.line_color_ != nullptr) {
    delete _impl_.line_color_;
  }
  _impl_.line_color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_color_ != nullptr) {
    delete _impl_.point_color_;
  }
  _impl_.point_color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lines_visible_ != nullptr) {
    delete _impl_.lines_visible_;
  }
  _impl_.lines_visible_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.points_visible_ != nullptr) {
    delete _impl_.points_visible_;
  }
  _impl_.points_visible_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gradient_visible_ != nullptr) {
    delete _impl_.gradient_visible_;
  }
  _impl_.gradient_visible_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_label_format_ != nullptr) {
    delete _impl_.point_label_format_;
  }
  _impl_.point_label_format_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.x_tool_tip_pattern_ != nullptr) {
    delete _impl_.x_tool_tip_pattern_;
  }
  _impl_.x_tool_tip_pattern_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.y_tool_tip_pattern_ != nullptr) {
    delete _impl_.y_tool_tip_pattern_;
  }
  _impl_.y_tool_tip_pattern_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_label_ != nullptr) {
    delete _impl_.point_label_;
  }
  _impl_.point_label_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_size_ != nullptr) {
    delete _impl_.point_size_;
  }
  _impl_.point_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_shape_ != nullptr) {
    delete _impl_.point_shape_;
  }
  _impl_.point_shape_ = nullptr;
  _impl_.plot_style_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_MultiSeriesDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_plot_style(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesPlotStyle>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.name"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lines_visible(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_visible(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gradient_visible(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_label_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_tool_tip_pattern(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_y_tool_tip_pattern(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_label(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_MultiSeriesDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_plot_style(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
  if (this->_internal_has_line_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::line_color(this),
        _Internal::line_color(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
  if (this->_internal_has_point_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::point_color(this),
        _Internal::point_color(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
  if (this->_internal_has_lines_visible()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::lines_visible(this),
        _Internal::lines_visible(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
  if (this->_internal_has_points_visible()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::points_visible(this),
        _Internal::points_visible(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
  if (this->_internal_has_gradient_visible()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::gradient_visible(this),
        _Internal::gradient_visible(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
  if (this->_internal_has_point_label_format()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::point_label_format(this),
        _Internal::point_label_format(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
  if (this->_internal_has_x_tool_tip_pattern()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::x_tool_tip_pattern(this),
        _Internal::x_tool_tip_pattern(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
  if (this->_internal_has_y_tool_tip_pattern()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::y_tool_tip_pattern(this),
        _Internal::y_tool_tip_pattern(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
  if (this->_internal_has_point_label()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::point_label(this),
        _Internal::point_label(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
  if (this->_internal_has_point_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::point_size(this),
        _Internal::point_size(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
  if (this->_internal_has_point_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::point_shape(this),
        _Internal::point_shape(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  return target;
}

size_t FigureDescriptor_MultiSeriesDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->_impl_.data_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
  if (this->_internal_has_line_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.line_color_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
  if (this->_internal_has_point_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_color_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
  if (this->_internal_has_lines_visible()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lines_visible_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
  if (this->_internal_has_points_visible()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.points_visible_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
  if (this->_internal_has_gradient_visible()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gradient_visible_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
  if (this->_internal_has_point_label_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_label_format_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
  if (this->_internal_has_x_tool_tip_pattern()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.x_tool_tip_pattern_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
  if (this->_internal_has_y_tool_tip_pattern()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.y_tool_tip_pattern_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
  if (this->_internal_has_point_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_label_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
  if (this->_internal_has_point_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_size_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
  if (this->_internal_has_point_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_shape_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_plot_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_MultiSeriesDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_MultiSeriesDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_MultiSeriesDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_MultiSeriesDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_MultiSeriesDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_MultiSeriesDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_sources_.MergeFrom(from._impl_.data_sources_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_line_color()) {
    _this->_internal_mutable_line_color()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
        from._internal_line_color());
  }
  if (from._internal_has_point_color()) {
    _this->_internal_mutable_point_color()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
        from._internal_point_color());
  }
  if (from._internal_has_lines_visible()) {
    _this->_internal_mutable_lines_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(
        from._internal_lines_visible());
  }
  if (from._internal_has_points_visible()) {
    _this->_internal_mutable_points_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(
        from._internal_points_visible());
  }
  if (from._internal_has_gradient_visible()) {
    _this->_internal_mutable_gradient_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(
        from._internal_gradient_visible());
  }
  if (from._internal_has_point_label_format()) {
    _this->_internal_mutable_point_label_format()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
        from._internal_point_label_format());
  }
  if (from._internal_has_x_tool_tip_pattern()) {
    _this->_internal_mutable_x_tool_tip_pattern()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
        from._internal_x_tool_tip_pattern());
  }
  if (from._internal_has_y_tool_tip_pattern()) {
    _this->_internal_mutable_y_tool_tip_pattern()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
        from._internal_y_tool_tip_pattern());
  }
  if (from._internal_has_point_label()) {
    _this->_internal_mutable_point_label()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
        from._internal_point_label());
  }
  if (from._internal_has_point_size()) {
    _this->_internal_mutable_point_size()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault::MergeFrom(
        from._internal_point_size());
  }
  if (from._internal_has_point_shape()) {
    _this->_internal_mutable_point_shape()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
        from._internal_point_shape());
  }
  if (from._internal_plot_style() != 0) {
    _this->_internal_set_plot_style(from._internal_plot_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_MultiSeriesDescriptor::CopyFrom(const FigureDescriptor_MultiSeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_MultiSeriesDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_MultiSeriesDescriptor::InternalSwap(FigureDescriptor_MultiSeriesDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_sources_.InternalSwap(&other->_impl_.data_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.plot_style_)
      + sizeof(FigureDescriptor_MultiSeriesDescriptor::_impl_.plot_style_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.line_color_)>(
          reinterpret_cast<char*>(&_impl_.line_color_),
          reinterpret_cast<char*>(&other->_impl_.line_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_MultiSeriesDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[47]);
}

// ===================================================================

class FigureDescriptor_StringMapWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_StringMapWithDefault>()._impl_._has_bits_);
  static void set_has_default_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
}
FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(const FigureDescriptor_StringMapWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_StringMapWithDefault* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.default_string_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.default_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_string()) {
    _this->_impl_.default_string_.Set(from._internal_default_string(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
}

inline void FigureDescriptor_StringMapWithDefault::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.default_string_){}
  };
  _impl_.default_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_StringMapWithDefault::~FigureDescriptor_StringMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_StringMapWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.values_.~RepeatedPtrField();
  _impl_.default_string_.Destroy();
}

void FigureDescriptor_StringMapWithDefault::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_StringMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.default_string_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_StringMapWithDefault::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string default_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_default_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.default_string"));
        } else
          goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_StringMapWithDefault::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string default_string = 1;
  if (_internal_has_default_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_string().data(), static_cast<int>(this->_internal_default_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.default_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_default_string(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.values");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  return target;
}

size_t FigureDescriptor_StringMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keys_.Get(i));
  }

  // repeated string values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  // optional string default_string = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_StringMapWithDefault::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_StringMapWithDefault::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_StringMapWithDefault::GetClassData() const { return &_class_data_; }


void FigureDescriptor_StringMapWithDefault::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_StringMapWithDefault*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_StringMapWithDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_default_string()) {
    _this->_internal_set_default_string(from._internal_default_string());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_StringMapWithDefault::CopyFrom(const FigureDescriptor_StringMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_StringMapWithDefault::IsInitialized() const {
  return true;
}

void FigureDescriptor_StringMapWithDefault::InternalSwap(FigureDescriptor_StringMapWithDefault* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_string_, lhs_arena,
      &other->_impl_.default_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_StringMapWithDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[48]);
}

// ===================================================================

class FigureDescriptor_DoubleMapWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_DoubleMapWithDefault>()._impl_._has_bits_);
  static void set_has_default_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
}
FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(const FigureDescriptor_DoubleMapWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_DoubleMapWithDefault* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.default_double_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.default_double_ = from._impl_.default_double_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
}

inline void FigureDescriptor_DoubleMapWithDefault::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.default_double_){0}
  };
}

FigureDescriptor_DoubleMapWithDefault::~FigureDescriptor_DoubleMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_DoubleMapWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.values_.~RepeatedField();
}

void FigureDescriptor_DoubleMapWithDefault::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_DoubleMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  _impl_.default_double_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_DoubleMapWithDefault::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double default_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_default_double(&has_bits);
          _impl_.default_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault.keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_DoubleMapWithDefault::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional double default_double = 1;
  if (_internal_has_default_double()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_default_double(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated double values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  return target;
}

size_t FigureDescriptor_DoubleMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keys_.Get(i));
  }

  // repeated double values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional double default_double = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_DoubleMapWithDefault::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_DoubleMapWithDefault::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_DoubleMapWithDefault::GetClassData() const { return &_class_data_; }


void FigureDescriptor_DoubleMapWithDefault::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_DoubleMapWithDefault*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_DoubleMapWithDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_default_double()) {
    _this->_internal_set_default_double(from._internal_default_double());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_DoubleMapWithDefault::CopyFrom(const FigureDescriptor_DoubleMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_DoubleMapWithDefault::IsInitialized() const {
  return true;
}

void FigureDescriptor_DoubleMapWithDefault::InternalSwap(FigureDescriptor_DoubleMapWithDefault* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.default_double_, other->_impl_.default_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_DoubleMapWithDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[49]);
}

// ===================================================================

class FigureDescriptor_BoolMapWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_BoolMapWithDefault>()._impl_._has_bits_);
  static void set_has_default_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
}
FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(const FigureDescriptor_BoolMapWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_BoolMapWithDefault* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.default_bool_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.default_bool_ = from._impl_.default_bool_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
}

inline void FigureDescriptor_BoolMapWithDefault::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.default_bool_){false}
  };
}

FigureDescriptor_BoolMapWithDefault::~FigureDescriptor_BoolMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_BoolMapWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.values_.~RepeatedField();
}

void FigureDescriptor_BoolMapWithDefault::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_BoolMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  _impl_.default_bool_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BoolMapWithDefault::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool default_bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_default_bool(&has_bits);
          _impl_.default_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault.keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bool values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_BoolMapWithDefault::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool default_bool = 1;
  if (_internal_has_default_bool()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_default_bool(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated bool values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  return target;
}

size_t FigureDescriptor_BoolMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keys_.Get(i));
  }

  // repeated bool values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional bool default_bool = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_BoolMapWithDefault::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_BoolMapWithDefault::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_BoolMapWithDefault::GetClassData() const { return &_class_data_; }


void FigureDescriptor_BoolMapWithDefault::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BoolMapWithDefault*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BoolMapWithDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_default_bool()) {
    _this->_internal_set_default_bool(from._internal_default_bool());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BoolMapWithDefault::CopyFrom(const FigureDescriptor_BoolMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BoolMapWithDefault::IsInitialized() const {
  return true;
}

void FigureDescriptor_BoolMapWithDefault::InternalSwap(FigureDescriptor_BoolMapWithDefault* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.default_bool_, other->_impl_.default_bool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BoolMapWithDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[50]);
}

// ===================================================================

class FigureDescriptor_AxisDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_AxisDescriptor>()._impl_._has_bits_);
  static void set_has_format_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gap_between_major_ticks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor& business_calendar_descriptor(const FigureDescriptor_AxisDescriptor* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor&
FigureDescriptor_AxisDescriptor::_Internal::business_calendar_descriptor(const FigureDescriptor_AxisDescriptor* msg) {
  return *msg->_impl_.business_calendar_descriptor_;
}
FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
}
FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(const FigureDescriptor_AxisDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_AxisDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.major_tick_locations_){from._impl_.major_tick_locations_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.label_font_){}
    , decltype(_impl_.ticks_font_){}
    , decltype(_impl_.format_pattern_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.business_calendar_descriptor_){nullptr}
    , decltype(_impl_.format_type_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.min_range_){}
    , decltype(_impl_.position_){}
    , decltype(_impl_.log_){}
    , decltype(_impl_.minor_ticks_visible_){}
    , decltype(_impl_.major_ticks_visible_){}
    , decltype(_impl_.invert_){}
    , decltype(_impl_.max_range_){}
    , decltype(_impl_.gap_between_major_ticks_){}
    , decltype(_impl_.minor_tick_count_){}
    , decltype(_impl_.is_time_axis_){}
    , decltype(_impl_.tick_label_angle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label_font().empty()) {
    _this->_impl_.label_font_.Set(from._internal_label_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ticks_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticks_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticks_font().empty()) {
    _this->_impl_.ticks_font_.Set(from._internal_ticks_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.format_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_format_pattern()) {
    _this->_impl_.format_pattern_.Set(from._internal_format_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color().empty()) {
    _this->_impl_.color_.Set(from._internal_color(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_business_calendar_descriptor()) {
    _this->_impl_.business_calendar_descriptor_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor(*from._impl_.business_calendar_descriptor_);
  }
  ::memcpy(&_impl_.format_type_, &from._impl_.format_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tick_label_angle_) -
    reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.tick_label_angle_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
}

inline void FigureDescriptor_AxisDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.major_tick_locations_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.label_font_){}
    , decltype(_impl_.ticks_font_){}
    , decltype(_impl_.format_pattern_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.business_calendar_descriptor_){nullptr}
    , decltype(_impl_.format_type_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.min_range_){0}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.log_){false}
    , decltype(_impl_.minor_ticks_visible_){false}
    , decltype(_impl_.major_ticks_visible_){false}
    , decltype(_impl_.invert_){false}
    , decltype(_impl_.max_range_){0}
    , decltype(_impl_.gap_between_major_ticks_){0}
    , decltype(_impl_.minor_tick_count_){0}
    , decltype(_impl_.is_time_axis_){false}
    , decltype(_impl_.tick_label_angle_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticks_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticks_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_AxisDescriptor::~FigureDescriptor_AxisDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_AxisDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.major_tick_locations_.~RepeatedField();
  _impl_.id_.Destroy();
  _impl_.label_.Destroy();
  _impl_.label_font_.Destroy();
  _impl_.ticks_font_.Destroy();
  _impl_.format_pattern_.Destroy();
  _impl_.color_.Destroy();
  if (this != internal_default_instance()) delete _impl_.business_calendar_descriptor_;
}

void FigureDescriptor_AxisDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_AxisDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.major_tick_locations_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.label_font_.ClearToEmpty();
  _impl_.ticks_font_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.format_pattern_.ClearNonDefaultToEmpty();
  }
  _impl_.color_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.business_calendar_descriptor_ != nullptr) {
    delete _impl_.business_calendar_descriptor_;
  }
  _impl_.business_calendar_descriptor_ = nullptr;
  ::memset(&_impl_.format_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_range_) -
      reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.max_range_));
  _impl_.gap_between_major_ticks_ = 0;
  ::memset(&_impl_.minor_tick_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tick_label_angle_) -
      reinterpret_cast<char*>(&_impl_.minor_tick_count_)) + sizeof(_impl_.tick_label_angle_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_AxisDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.id"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisFormatType>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisType>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // bool log = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label"));
        } else
          goto handle_unusual;
        continue;
      // string label_font = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_label_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label_font"));
        } else
          goto handle_unusual;
        continue;
      // string ticks_font = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ticks_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.ticks_font"));
        } else
          goto handle_unusual;
        continue;
      // optional string format_pattern = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_format_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.format_pattern"));
        } else
          goto handle_unusual;
        continue;
      // string color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.color"));
        } else
          goto handle_unusual;
        continue;
      // double min_range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.min_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_range = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool minor_ticks_visible = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.minor_ticks_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool major_ticks_visible = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.major_ticks_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minor_tick_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.minor_tick_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gap_between_major_ticks = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_gap_between_major_ticks(&has_bits);
          _impl_.gap_between_major_ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double major_tick_locations = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_major_tick_locations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 137) {
          _internal_add_major_tick_locations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double tick_label_angle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.tick_label_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool invert = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.invert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_time_axis = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.is_time_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_business_calendar_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_AxisDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
  if (this->_internal_format_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_position(), target);
  }

  // bool log = 5;
  if (this->_internal_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_log(), target);
  }

  // string label = 6;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_label(), target);
  }

  // string label_font = 7;
  if (!this->_internal_label_font().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label_font().data(), static_cast<int>(this->_internal_label_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label_font");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_label_font(), target);
  }

  // string ticks_font = 8;
  if (!this->_internal_ticks_font().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticks_font().data(), static_cast<int>(this->_internal_ticks_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.ticks_font");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ticks_font(), target);
  }

  // optional string format_pattern = 9;
  if (_internal_has_format_pattern()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format_pattern().data(), static_cast<int>(this->_internal_format_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.format_pattern");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_format_pattern(), target);
  }

  // string color = 10;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.color");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_color(), target);
  }

  // double min_range = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_range = this->_internal_min_range();
  uint64_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_min_range(), target);
  }

  // double max_range = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_range = this->_internal_max_range();
  uint64_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_range(), target);
  }

  // bool minor_ticks_visible = 13;
  if (this->_internal_minor_ticks_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_minor_ticks_visible(), target);
  }

  // bool major_ticks_visible = 14;
  if (this->_internal_major_ticks_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_major_ticks_visible(), target);
  }

  // int32 minor_tick_count = 15;
  if (this->_internal_minor_tick_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_minor_tick_count(), target);
  }

  // optional double gap_between_major_ticks = 16;
  if (_internal_has_gap_between_major_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_gap_between_major_ticks(), target);
  }

  // repeated double major_tick_locations = 17;
  if (this->_internal_major_tick_locations_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_major_tick_locations(), target);
  }

  // double tick_label_angle = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tick_label_angle = this->_internal_tick_label_angle();
  uint64_t raw_tick_label_angle;
  memcpy(&raw_tick_label_angle, &tmp_tick_label_angle, sizeof(tmp_tick_label_angle));
  if (raw_tick_label_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_tick_label_angle(), target);
  }

  // bool invert = 19;
  if (this->_internal_invert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_invert(), target);
  }

  // bool is_time_axis = 20;
  if (this->_internal_is_time_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_is_time_axis(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
  if (this->_internal_has_business_calendar_descriptor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::business_calendar_descriptor(this),
        _Internal::business_calendar_descriptor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  return target;
}

size_t FigureDescriptor_AxisDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double major_tick_locations = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_major_tick_locations_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string label = 6;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string label_font = 7;
  if (!this->_internal_label_font().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label_font());
  }

  // string ticks_font = 8;
  if (!this->_internal_ticks_font().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticks_font());
  }

  // optional string format_pattern = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format_pattern());
  }

  // string color = 10;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
  if (this->_internal_has_business_calendar_descriptor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.business_calendar_descriptor_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
  if (this->_internal_format_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_format_type());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double min_range = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_range = this->_internal_min_range();
  uint64_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    total_size += 1 + 8;
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_position());
  }

  // bool log = 5;
  if (this->_internal_log() != 0) {
    total_size += 1 + 1;
  }

  // bool minor_ticks_visible = 13;
  if (this->_internal_minor_ticks_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool major_ticks_visible = 14;
  if (this->_internal_major_ticks_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool invert = 19;
  if (this->_internal_invert() != 0) {
    total_size += 2 + 1;
  }

  // double max_range = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_range = this->_internal_max_range();
  uint64_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    total_size += 1 + 8;
  }

  // optional double gap_between_major_ticks = 16;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 + 8;
  }

  // int32 minor_tick_count = 15;
  if (this->_internal_minor_tick_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor_tick_count());
  }

  // bool is_time_axis = 20;
  if (this->_internal_is_time_axis() != 0) {
    total_size += 2 + 1;
  }

  // double tick_label_angle = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tick_label_angle = this->_internal_tick_label_angle();
  uint64_t raw_tick_label_angle;
  memcpy(&raw_tick_label_angle, &tmp_tick_label_angle, sizeof(tmp_tick_label_angle));
  if (raw_tick_label_angle != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_AxisDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_AxisDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_AxisDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_AxisDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_AxisDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_AxisDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.major_tick_locations_.MergeFrom(from._impl_.major_tick_locations_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_label_font().empty()) {
    _this->_internal_set_label_font(from._internal_label_font());
  }
  if (!from._internal_ticks_font().empty()) {
    _this->_internal_set_ticks_font(from._internal_ticks_font());
  }
  if (from._internal_has_format_pattern()) {
    _this->_internal_set_format_pattern(from._internal_format_pattern());
  }
  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_has_business_calendar_descriptor()) {
    _this->_internal_mutable_business_calendar_descriptor()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor::MergeFrom(
        from._internal_business_calendar_descriptor());
  }
  if (from._internal_format_type() != 0) {
    _this->_internal_set_format_type(from._internal_format_type());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_range = from._internal_min_range();
  uint64_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    _this->_internal_set_min_range(from._internal_min_range());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  if (from._internal_log() != 0) {
    _this->_internal_set_log(from._internal_log());
  }
  if (from._internal_minor_ticks_visible() != 0) {
    _this->_internal_set_minor_ticks_visible(from._internal_minor_ticks_visible());
  }
  if (from._internal_major_ticks_visible() != 0) {
    _this->_internal_set_major_ticks_visible(from._internal_major_ticks_visible());
  }
  if (from._internal_invert() != 0) {
    _this->_internal_set_invert(from._internal_invert());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_range = from._internal_max_range();
  uint64_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    _this->_internal_set_max_range(from._internal_max_range());
  }
  if (from._internal_has_gap_between_major_ticks()) {
    _this->_internal_set_gap_between_major_ticks(from._internal_gap_between_major_ticks());
  }
  if (from._internal_minor_tick_count() != 0) {
    _this->_internal_set_minor_tick_count(from._internal_minor_tick_count());
  }
  if (from._internal_is_time_axis() != 0) {
    _this->_internal_set_is_time_axis(from._internal_is_time_axis());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tick_label_angle = from._internal_tick_label_angle();
  uint64_t raw_tick_label_angle;
  memcpy(&raw_tick_label_angle, &tmp_tick_label_angle, sizeof(tmp_tick_label_angle));
  if (raw_tick_label_angle != 0) {
    _this->_internal_set_tick_label_angle(from._internal_tick_label_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_AxisDescriptor::CopyFrom(const FigureDescriptor_AxisDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_AxisDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_AxisDescriptor::InternalSwap(FigureDescriptor_AxisDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.major_tick_locations_.InternalSwap(&other->_impl_.major_tick_locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_font_, lhs_arena,
      &other->_impl_.label_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticks_font_, lhs_arena,
      &other->_impl_.ticks_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_pattern_, lhs_arena,
      &other->_impl_.format_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.color_, lhs_arena,
      &other->_impl_.color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.tick_label_angle_)
      + sizeof(FigureDescriptor_AxisDescriptor::_impl_.tick_label_angle_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.business_calendar_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.business_calendar_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.business_calendar_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_AxisDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[51]);
}

// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
}
FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.open_){}
    , decltype(_impl_.close_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.open_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open().empty()) {
    _this->_impl_.open_.Set(from._internal_open(), 
      _this->GetArenaForAllocation());
  }
  _impl_.close_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.close_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_close().empty()) {
    _this->_impl_.close_.Set(from._internal_close(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
}

inline void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.open_){}
    , decltype(_impl_.close_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.open_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.close_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.close_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::~FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.open_.Destroy();
  _impl_.close_.Destroy();
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.open_.ClearToEmpty();
  _impl_.close_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_open();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.open"));
        } else
          goto handle_unusual;
        continue;
      // string close = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_close();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.close"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string open = 1;
  if (!this->_internal_open().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open().data(), static_cast<int>(this->_internal_open().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.open");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_open(), target);
  }

  // string close = 2;
  if (!this->_internal_close().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close().data(), static_cast<int>(this->_internal_close().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.close");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string open = 1;
  if (!this->_internal_open().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open());
  }

  // string close = 2;
  if (!this->_internal_close().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::GetClassData() const { return &_class_data_; }


void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_open().empty()) {
    _this->_internal_set_open(from._internal_open());
  }
  if (!from._internal_close().empty()) {
    _this->_internal_set_close(from._internal_close());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_, lhs_arena,
      &other->_impl_.open_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.close_, lhs_arena,
      &other->_impl_.close_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[52]);
}

// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_Holiday::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate& date(const FigureDescriptor_BusinessCalendarDescriptor_Holiday* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate&
FigureDescriptor_BusinessCalendarDescriptor_Holiday::_Internal::date(const FigureDescriptor_BusinessCalendarDescriptor_Holiday* msg) {
  return *msg->_impl_.date_;
}
FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
}
FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(const FigureDescriptor_BusinessCalendarDescriptor_Holiday& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_BusinessCalendarDescriptor_Holiday* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.business_periods_){from._impl_.business_periods_}
    , decltype(_impl_.date_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(*from._impl_.date_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
}

inline void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.business_periods_){arena}
    , decltype(_impl_.date_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FigureDescriptor_BusinessCalendarDescriptor_Holiday::~FigureDescriptor_BusinessCalendarDescriptor_Holiday() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.business_periods_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.date_;
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.business_periods_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.date_ != nullptr) {
    delete _impl_.date_;
  }
  _impl_.date_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_Holiday::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_business_periods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_BusinessCalendarDescriptor_Holiday::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
  if (this->_internal_has_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_business_periods_size()); i < n; i++) {
    const auto& repfield = this->_internal_business_periods(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor_Holiday::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
  total_size += 1UL * this->_internal_business_periods_size();
  for (const auto& msg : this->_impl_.business_periods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
  if (this->_internal_has_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor_Holiday::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_BusinessCalendarDescriptor_Holiday::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_BusinessCalendarDescriptor_Holiday::GetClassData() const { return &_class_data_; }


void FigureDescriptor_BusinessCalendarDescriptor_Holiday::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor_Holiday*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor_Holiday&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.business_periods_.MergeFrom(from._impl_.business_periods_);
  if (from._internal_has_date()) {
    _this->_internal_mutable_date()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeFrom(
        from._internal_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_Holiday& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor_Holiday::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_Holiday* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.business_periods_.InternalSwap(&other->_impl_.business_periods_);
  swap(_impl_.date_, other->_impl_.date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor_Holiday::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[53]);
}

// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
}
FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(const FigureDescriptor_BusinessCalendarDescriptor_LocalDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_BusinessCalendarDescriptor_LocalDate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.year_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.day_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.year_, &from._impl_.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.day_) -
    reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.day_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
}

inline void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.year_){0}
    , decltype(_impl_.month_){0}
    , decltype(_impl_.day_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FigureDescriptor_BusinessCalendarDescriptor_LocalDate::~FigureDescriptor_BusinessCalendarDescriptor_LocalDate() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.day_) -
      reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.day_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor_LocalDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_year());
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_month());
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_BusinessCalendarDescriptor_LocalDate::GetClassData() const { return &_class_data_; }


void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor_LocalDate*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor_LocalDate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_year() != 0) {
    _this->_internal_set_year(from._internal_year());
  }
  if (from._internal_month() != 0) {
    _this->_internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_LocalDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor_LocalDate::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_LocalDate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.day_)
      + sizeof(FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_impl_.day_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.year_)>(
          reinterpret_cast<char*>(&_impl_.year_),
          reinterpret_cast<char*>(&other->_impl_.year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor_LocalDate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[54]);
}

// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
}
FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(const FigureDescriptor_BusinessCalendarDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_BusinessCalendarDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.business_days_){from._impl_.business_days_}
    , /*decltype(_impl_._business_days_cached_byte_size_)*/{0}
    , decltype(_impl_.business_periods_){from._impl_.business_periods_}
    , decltype(_impl_.holidays_){from._impl_.holidays_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.time_zone_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_zone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_zone().empty()) {
    _this->_impl_.time_zone_.Set(from._internal_time_zone(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
}

inline void FigureDescriptor_BusinessCalendarDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.business_days_){arena}
    , /*decltype(_impl_._business_days_cached_byte_size_)*/{0}
    , decltype(_impl_.business_periods_){arena}
    , decltype(_impl_.holidays_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.time_zone_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_zone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_BusinessCalendarDescriptor::~FigureDescriptor_BusinessCalendarDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_BusinessCalendarDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.business_days_.~RepeatedField();
  _impl_.business_periods_.~RepeatedPtrField();
  _impl_.holidays_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.time_zone_.Destroy();
}

void FigureDescriptor_BusinessCalendarDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_BusinessCalendarDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.business_days_.Clear();
  _impl_.business_periods_.Clear();
  _impl_.holidays_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.time_zone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.name"));
        } else
          goto handle_unusual;
        continue;
      // string time_zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.time_zone"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_business_days(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_business_days(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_business_periods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_holidays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_BusinessCalendarDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string time_zone = 2;
  if (!this->_internal_time_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone().data(), static_cast<int>(this->_internal_time_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.time_zone");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time_zone(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
  {
    int byte_size = _impl_._business_days_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, _impl_.business_days_, byte_size, target);
    }
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_business_periods_size()); i < n; i++) {
    const auto& repfield = this->_internal_business_periods(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_holidays_size()); i < n; i++) {
    const auto& repfield = this->_internal_holidays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  return target;
}

size_t FigureDescriptor_BusinessCalendarDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_business_days_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_business_days(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._business_days_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
  total_size += 1UL * this->_internal_business_periods_size();
  for (const auto& msg : this->_impl_.business_periods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
  total_size += 1UL * this->_internal_holidays_size();
  for (const auto& msg : this->_impl_.holidays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string time_zone = 2;
  if (!this->_internal_time_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_BusinessCalendarDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_BusinessCalendarDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_BusinessCalendarDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.business_days_.MergeFrom(from._impl_.business_days_);
  _this->_impl_.business_periods_.MergeFrom(from._impl_.business_periods_);
  _this->_impl_.holidays_.MergeFrom(from._impl_.holidays_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_time_zone().empty()) {
    _this->_internal_set_time_zone(from._internal_time_zone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_BusinessCalendarDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_BusinessCalendarDescriptor::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.business_days_.InternalSwap(&other->_impl_.business_days_);
  _impl_.business_periods_.InternalSwap(&other->_impl_.business_periods_);
  _impl_.holidays_.InternalSwap(&other->_impl_.holidays_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_zone_, lhs_arena,
      &other->_impl_.time_zone_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_BusinessCalendarDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[55]);
}

// ===================================================================

class FigureDescriptor_MultiSeriesSourceDescriptor::_Internal {
 public:
};

FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
}
FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(const FigureDescriptor_MultiSeriesSourceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_MultiSeriesSourceDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.axis_id_){}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.partitioned_table_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.axis_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axis_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_axis_id().empty()) {
    _this->_impl_.axis_id_.Set(from._internal_axis_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitioned_table_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitioned_table_id_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
}

inline void FigureDescriptor_MultiSeriesSourceDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.axis_id_){}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.partitioned_table_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.axis_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axis_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_MultiSeriesSourceDescriptor::~FigureDescriptor_MultiSeriesSourceDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_MultiSeriesSourceDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.axis_id_.Destroy();
  _impl_.column_name_.Destroy();
}

void FigureDescriptor_MultiSeriesSourceDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_MultiSeriesSourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.axis_id_.ClearToEmpty();
  _impl_.column_name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitioned_table_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitioned_table_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_MultiSeriesSourceDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_axis_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.axis_id"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 partitioned_table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partitioned_table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string column_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.column_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_MultiSeriesSourceDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_axis_id().data(), static_cast<int>(this->_internal_axis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.axis_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_axis_id(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 partitioned_table_id = 3;
  if (this->_internal_partitioned_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partitioned_table_id(), target);
  }

  // string column_name = 4;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  return target;
}

size_t FigureDescriptor_MultiSeriesSourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_axis_id());
  }

  // string column_name = 4;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 partitioned_table_id = 3;
  if (this->_internal_partitioned_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partitioned_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_MultiSeriesSourceDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_MultiSeriesSourceDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_MultiSeriesSourceDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_MultiSeriesSourceDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_MultiSeriesSourceDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_MultiSeriesSourceDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_axis_id().empty()) {
    _this->_internal_set_axis_id(from._internal_axis_id());
  }
  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_partitioned_table_id() != 0) {
    _this->_internal_set_partitioned_table_id(from._internal_partitioned_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_MultiSeriesSourceDescriptor::CopyFrom(const FigureDescriptor_MultiSeriesSourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_MultiSeriesSourceDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_MultiSeriesSourceDescriptor::InternalSwap(FigureDescriptor_MultiSeriesSourceDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.axis_id_, lhs_arena,
      &other->_impl_.axis_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.partitioned_table_id_)
      + sizeof(FigureDescriptor_MultiSeriesSourceDescriptor::_impl_.partitioned_table_id_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_MultiSeriesSourceDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[56]);
}

// ===================================================================

class FigureDescriptor_SourceDescriptor::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor& one_click(const FigureDescriptor_SourceDescriptor* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor&
FigureDescriptor_SourceDescriptor::_Internal::one_click(const FigureDescriptor_SourceDescriptor* msg) {
  return *msg->_impl_.one_click_;
}
FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
}
FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(const FigureDescriptor_SourceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_SourceDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.axis_id_){}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.column_type_){}
    , decltype(_impl_.one_click_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.table_id_){}
    , decltype(_impl_.partitioned_table_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.axis_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axis_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_axis_id().empty()) {
    _this->_impl_.axis_id_.Set(from._internal_axis_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.column_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_type().empty()) {
    _this->_impl_.column_type_.Set(from._internal_column_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_one_click()) {
    _this->_impl_.one_click_ = new ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor(*from._impl_.one_click_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitioned_table_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitioned_table_id_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
}

inline void FigureDescriptor_SourceDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.axis_id_){}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.column_type_){}
    , decltype(_impl_.one_click_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.table_id_){0}
    , decltype(_impl_.partitioned_table_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.axis_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axis_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.column_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor_SourceDescriptor::~FigureDescriptor_SourceDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_SourceDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.axis_id_.Destroy();
  _impl_.column_name_.Destroy();
  _impl_.column_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.one_click_;
}

void FigureDescriptor_SourceDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_SourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.axis_id_.ClearToEmpty();
  _impl_.column_name_.ClearToEmpty();
  _impl_.column_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.one_click_ != nullptr) {
    delete _impl_.one_click_;
  }
  _impl_.one_click_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitioned_table_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitioned_table_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_SourceDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_axis_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.axis_id"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 partitioned_table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.partitioned_table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string column_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_name"));
        } else
          goto handle_unusual;
        continue;
      // string column_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_column_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_type"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_click(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_SourceDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_axis_id().data(), static_cast<int>(this->_internal_axis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.axis_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_axis_id(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 table_id = 3;
  if (this->_internal_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_table_id(), target);
  }

  // int32 partitioned_table_id = 4;
  if (this->_internal_partitioned_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_partitioned_table_id(), target);
  }

  // string column_name = 5;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_column_name(), target);
  }

  // string column_type = 6;
  if (!this->_internal_column_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_type().data(), static_cast<int>(this->_internal_column_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_column_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
  if (this->_internal_has_one_click()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::one_click(this),
        _Internal::one_click(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  return target;
}

size_t FigureDescriptor_SourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_axis_id());
  }

  // string column_name = 5;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // string column_type = 6;
  if (!this->_internal_column_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_type());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
  if (this->_internal_has_one_click()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.one_click_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 table_id = 3;
  if (this->_internal_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_table_id());
  }

  // int32 partitioned_table_id = 4;
  if (this->_internal_partitioned_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partitioned_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_SourceDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_SourceDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_SourceDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_SourceDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_SourceDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_SourceDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_axis_id().empty()) {
    _this->_internal_set_axis_id(from._internal_axis_id());
  }
  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (!from._internal_column_type().empty()) {
    _this->_internal_set_column_type(from._internal_column_type());
  }
  if (from._internal_has_one_click()) {
    _this->_internal_mutable_one_click()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor::MergeFrom(
        from._internal_one_click());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_table_id() != 0) {
    _this->_internal_set_table_id(from._internal_table_id());
  }
  if (from._internal_partitioned_table_id() != 0) {
    _this->_internal_set_partitioned_table_id(from._internal_partitioned_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_SourceDescriptor::CopyFrom(const FigureDescriptor_SourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_SourceDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_SourceDescriptor::InternalSwap(FigureDescriptor_SourceDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.axis_id_, lhs_arena,
      &other->_impl_.axis_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_type_, lhs_arena,
      &other->_impl_.column_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.partitioned_table_id_)
      + sizeof(FigureDescriptor_SourceDescriptor::_impl_.partitioned_table_id_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.one_click_)>(
          reinterpret_cast<char*>(&_impl_.one_click_),
          reinterpret_cast<char*>(&other->_impl_.one_click_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_SourceDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[57]);
}

// ===================================================================

class FigureDescriptor_OneClickDescriptor::_Internal {
 public:
};

FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
}
FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(const FigureDescriptor_OneClickDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor_OneClickDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){from._impl_.columns_}
    , decltype(_impl_.column_types_){from._impl_.column_types_}
    , decltype(_impl_.require_all_filters_to_display_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.require_all_filters_to_display_ = from._impl_.require_all_filters_to_display_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
}

inline void FigureDescriptor_OneClickDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){arena}
    , decltype(_impl_.column_types_){arena}
    , decltype(_impl_.require_all_filters_to_display_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FigureDescriptor_OneClickDescriptor::~FigureDescriptor_OneClickDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor_OneClickDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_.~RepeatedPtrField();
  _impl_.column_types_.~RepeatedPtrField();
}

void FigureDescriptor_OneClickDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor_OneClickDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_.Clear();
  _impl_.column_types_.Clear();
  _impl_.require_all_filters_to_display_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor_OneClickDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.column_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool require_all_filters_to_display = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.require_all_filters_to_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor_OneClickDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string columns = 1;
  for (int i = 0, n = this->_internal_columns_size(); i < n; i++) {
    const auto& s = this->_internal_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.columns");
    target = stream->WriteString(1, s, target);
  }

  // repeated string column_types = 2;
  for (int i = 0, n = this->_internal_column_types_size(); i < n; i++) {
    const auto& s = this->_internal_column_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.column_types");
    target = stream->WriteString(2, s, target);
  }

  // bool require_all_filters_to_display = 3;
  if (this->_internal_require_all_filters_to_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_require_all_filters_to_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  return target;
}

size_t FigureDescriptor_OneClickDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_.size());
  for (int i = 0, n = _impl_.columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_.Get(i));
  }

  // repeated string column_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_types_.size());
  for (int i = 0, n = _impl_.column_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_types_.Get(i));
  }

  // bool require_all_filters_to_display = 3;
  if (this->_internal_require_all_filters_to_display() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor_OneClickDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor_OneClickDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor_OneClickDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor_OneClickDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_OneClickDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_OneClickDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_.MergeFrom(from._impl_.columns_);
  _this->_impl_.column_types_.MergeFrom(from._impl_.column_types_);
  if (from._internal_require_all_filters_to_display() != 0) {
    _this->_internal_set_require_all_filters_to_display(from._internal_require_all_filters_to_display());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_OneClickDescriptor::CopyFrom(const FigureDescriptor_OneClickDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor_OneClickDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor_OneClickDescriptor::InternalSwap(FigureDescriptor_OneClickDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_.InternalSwap(&other->_impl_.columns_);
  _impl_.column_types_.InternalSwap(&other->_impl_.column_types_);
  swap(_impl_.require_all_filters_to_display_, other->_impl_.require_all_filters_to_display_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor_OneClickDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[58]);
}

// ===================================================================

class FigureDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor::FigureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
}
FigureDescriptor::FigureDescriptor(const FigureDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FigureDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.charts_){from._impl_.charts_}
    , decltype(_impl_.errors_){from._impl_.errors_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.title_font_){}
    , decltype(_impl_.title_color_){}
    , decltype(_impl_.update_interval_){}
    , decltype(_impl_.cols_){}
    , decltype(_impl_.rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title_font().empty()) {
    _this->_impl_.title_font_.Set(from._internal_title_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title_color().empty()) {
    _this->_impl_.title_color_.Set(from._internal_title_color(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.update_interval_, &from._impl_.update_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rows_) -
    reinterpret_cast<char*>(&_impl_.update_interval_)) + sizeof(_impl_.rows_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
}

inline void FigureDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.charts_){arena}
    , decltype(_impl_.errors_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.title_font_){}
    , decltype(_impl_.title_color_){}
    , decltype(_impl_.update_interval_){int64_t{0}}
    , decltype(_impl_.cols_){0}
    , decltype(_impl_.rows_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FigureDescriptor::~FigureDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FigureDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.charts_.~RepeatedPtrField();
  _impl_.errors_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.title_font_.Destroy();
  _impl_.title_color_.Destroy();
}

void FigureDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FigureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.charts_.Clear();
  _impl_.errors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_.title_font_.ClearToEmpty();
  _impl_.title_color_.ClearToEmpty();
  ::memset(&_impl_.update_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rows_) -
      reinterpret_cast<char*>(&_impl_.update_interval_)) + sizeof(_impl_.rows_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FigureDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title"));
        } else
          goto handle_unusual;
        continue;
      // string title_font = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_font"));
        } else
          goto handle_unusual;
        continue;
      // string title_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_color"));
        } else
          goto handle_unusual;
        continue;
      // int64 update_interval = 7 [jstype = JS_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.update_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cols = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string errors = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_errors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.errors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FigureDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string title = 1;
  if (_internal_has_title()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string title_font = 2;
  if (!this->_internal_title_font().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_font().data(), static_cast<int>(this->_internal_title_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_font");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title_font(), target);
  }

  // string title_color = 3;
  if (!this->_internal_title_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_color().data(), static_cast<int>(this->_internal_title_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_color");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title_color(), target);
  }

  // int64 update_interval = 7 [jstype = JS_STRING];
  if (this->_internal_update_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_update_interval(), target);
  }

  // int32 cols = 8;
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_cols(), target);
  }

  // int32 rows = 9;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_rows(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_charts_size()); i < n; i++) {
    const auto& repfield = this->_internal_charts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string errors = 13;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.errors");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  return target;
}

size_t FigureDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
  total_size += 1UL * this->_internal_charts_size();
  for (const auto& msg : this->_impl_.charts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string errors = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.errors_.size());
  for (int i = 0, n = _impl_.errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.errors_.Get(i));
  }

  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string title_font = 2;
  if (!this->_internal_title_font().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_font());
  }

  // string title_color = 3;
  if (!this->_internal_title_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_color());
  }

  // int64 update_interval = 7 [jstype = JS_STRING];
  if (this->_internal_update_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_interval());
  }

  // int32 cols = 8;
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cols());
  }

  // int32 rows = 9;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FigureDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FigureDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FigureDescriptor::GetClassData() const { return &_class_data_; }


void FigureDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.charts_.MergeFrom(from._impl_.charts_);
  _this->_impl_.errors_.MergeFrom(from._impl_.errors_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_title_font().empty()) {
    _this->_internal_set_title_font(from._internal_title_font());
  }
  if (!from._internal_title_color().empty()) {
    _this->_internal_set_title_color(from._internal_title_color());
  }
  if (from._internal_update_interval() != 0) {
    _this->_internal_set_update_interval(from._internal_update_interval());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor::CopyFrom(const FigureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FigureDescriptor::IsInitialized() const {
  return true;
}

void FigureDescriptor::InternalSwap(FigureDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.charts_.InternalSwap(&other->_impl_.charts_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_font_, lhs_arena,
      &other->_impl_.title_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_color_, lhs_arena,
      &other->_impl_.title_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.rows_)
      + sizeof(FigureDescriptor::_impl_.rows_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.update_interval_)>(
          reinterpret_cast<char*>(&_impl_.update_interval_),
          reinterpret_cast<char*>(&other->_impl_.update_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FigureDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[59]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::DocumentRange*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::DocumentRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::DocumentRange >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::Position*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::MarkupContent*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::MarkupContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::MarkupContent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CompletionContext*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CompletionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CompletionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::CompletionItem*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::CompletionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::TextEdit*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::TextEdit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::TextEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::SignatureInformation*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::SignatureInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::SignatureInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::ParameterInformation*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::ParameterInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::ParameterInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetHoverRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetHoverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetHoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetHoverResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetHoverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetHoverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::Diagnostic*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::Diagnostic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::Diagnostic >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
