// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/console.proto

#include "deephaven/proto/console.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {

inline constexpr VersionedTextDocumentIdentifier::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VersionedTextDocumentIdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionedTextDocumentIdentifierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionedTextDocumentIdentifierDefaultTypeInternal() {}
  union {
    VersionedTextDocumentIdentifier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionedTextDocumentIdentifierDefaultTypeInternal _VersionedTextDocumentIdentifier_default_instance_;

inline constexpr TextDocumentItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        language_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TextDocumentItem::TextDocumentItem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TextDocumentItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextDocumentItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextDocumentItemDefaultTypeInternal() {}
  union {
    TextDocumentItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextDocumentItemDefaultTypeInternal _TextDocumentItem_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : line_{0},
        character_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;

inline constexpr MarkupContent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarkupContent::MarkupContent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MarkupContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkupContentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkupContentDefaultTypeInternal() {}
  union {
    MarkupContent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkupContentDefaultTypeInternal _MarkupContent_default_instance_;

inline constexpr LogSubscriptionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : levels_{},
        last_seen_log_timestamp_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogSubscriptionRequest::LogSubscriptionRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogSubscriptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogSubscriptionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogSubscriptionRequestDefaultTypeInternal() {}
  union {
    LogSubscriptionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogSubscriptionRequestDefaultTypeInternal _LogSubscriptionRequest_default_instance_;

inline constexpr LogSubscriptionData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : log_level_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        micros_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogSubscriptionData::LogSubscriptionData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogSubscriptionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogSubscriptionDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogSubscriptionDataDefaultTypeInternal() {}
  union {
    LogSubscriptionData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogSubscriptionDataDefaultTypeInternal _LogSubscriptionData_default_instance_;

inline constexpr GetHeapInfoResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : max_memory_{::int64_t{0}},
        total_memory_{::int64_t{0}},
        free_memory_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetHeapInfoResponse::GetHeapInfoResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetHeapInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeapInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeapInfoResponseDefaultTypeInternal() {}
  union {
    GetHeapInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeapInfoResponseDefaultTypeInternal _GetHeapInfoResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetHeapInfoRequest::GetHeapInfoRequest(::_pbi::ConstantInitialized) {}
struct GetHeapInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeapInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeapInfoRequestDefaultTypeInternal() {}
  union {
    GetHeapInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeapInfoRequestDefaultTypeInternal _GetHeapInfoRequest_default_instance_;

inline constexpr GetConsoleTypesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : console_types_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetConsoleTypesResponse::GetConsoleTypesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetConsoleTypesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsoleTypesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsoleTypesResponseDefaultTypeInternal() {}
  union {
    GetConsoleTypesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsoleTypesResponseDefaultTypeInternal _GetConsoleTypesResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetConsoleTypesRequest::GetConsoleTypesRequest(::_pbi::ConstantInitialized) {}
struct GetConsoleTypesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsoleTypesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsoleTypesRequestDefaultTypeInternal() {}
  union {
    GetConsoleTypesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsoleTypesRequestDefaultTypeInternal _GetConsoleTypesRequest_default_instance_;

inline constexpr FigureDescriptor_StringMapWithDefault::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        keys_{},
        values_{},
        default_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_StringMapWithDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_StringMapWithDefaultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_StringMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_StringMapWithDefault _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_StringMapWithDefaultDefaultTypeInternal _FigureDescriptor_StringMapWithDefault_default_instance_;

inline constexpr FigureDescriptor_OneClickDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : columns_{},
        column_types_{},
        require_all_filters_to_display_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_OneClickDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_OneClickDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_OneClickDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_OneClickDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_OneClickDescriptorDefaultTypeInternal _FigureDescriptor_OneClickDescriptor_default_instance_;

inline constexpr FigureDescriptor_MultiSeriesSourceDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : axis_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceType >(0)},
        partitioned_table_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_MultiSeriesSourceDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_MultiSeriesSourceDescriptorDefaultTypeInternal _FigureDescriptor_MultiSeriesSourceDescriptor_default_instance_;

inline constexpr FigureDescriptor_DoubleMapWithDefault::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        keys_{},
        values_{},
        default_double_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_DoubleMapWithDefault _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_DoubleMapWithDefaultDefaultTypeInternal _FigureDescriptor_DoubleMapWithDefault_default_instance_;

inline constexpr FigureDescriptor_BusinessCalendarDescriptor_LocalDate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : year_{0},
        month_{0},
        day_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_LocalDate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptor_LocalDateDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_LocalDate_default_instance_;

inline constexpr FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : open_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        close_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriodDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod_default_instance_;

inline constexpr FigureDescriptor_BoolMapWithDefault::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        keys_{},
        values_{},
        default_bool_{false} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal() {}
  union {
    FigureDescriptor_BoolMapWithDefault _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BoolMapWithDefaultDefaultTypeInternal _FigureDescriptor_BoolMapWithDefault_default_instance_;

inline constexpr Diagnostic_CodeDescription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : href_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Diagnostic_CodeDescription::Diagnostic_CodeDescription(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Diagnostic_CodeDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Diagnostic_CodeDescriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Diagnostic_CodeDescriptionDefaultTypeInternal() {}
  union {
    Diagnostic_CodeDescription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Diagnostic_CodeDescriptionDefaultTypeInternal _Diagnostic_CodeDescription_default_instance_;

inline constexpr CompletionContext::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : trigger_character_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trigger_kind_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CompletionContext::CompletionContext(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CompletionContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionContextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionContextDefaultTypeInternal() {}
  union {
    CompletionContext _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionContextDefaultTypeInternal _CompletionContext_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CancelCommandResponse::CancelCommandResponse(::_pbi::ConstantInitialized) {}
struct CancelCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelCommandResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelCommandResponseDefaultTypeInternal() {}
  union {
    CancelCommandResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelCommandResponseDefaultTypeInternal _CancelCommandResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CancelAutoCompleteResponse::CancelAutoCompleteResponse(::_pbi::ConstantInitialized) {}
struct CancelAutoCompleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelAutoCompleteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelAutoCompleteResponseDefaultTypeInternal() {}
  union {
    CancelAutoCompleteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelAutoCompleteResponseDefaultTypeInternal _CancelAutoCompleteResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR BrowserNextResponse::BrowserNextResponse(::_pbi::ConstantInitialized) {}
struct BrowserNextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrowserNextResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrowserNextResponseDefaultTypeInternal() {}
  union {
    BrowserNextResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrowserNextResponseDefaultTypeInternal _BrowserNextResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR BindTableToVariableResponse::BindTableToVariableResponse(::_pbi::ConstantInitialized) {}
struct BindTableToVariableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BindTableToVariableResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BindTableToVariableResponseDefaultTypeInternal() {}
  union {
    BindTableToVariableResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BindTableToVariableResponseDefaultTypeInternal _BindTableToVariableResponse_default_instance_;

inline constexpr StartConsoleResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StartConsoleResponse::StartConsoleResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StartConsoleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartConsoleResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartConsoleResponseDefaultTypeInternal() {}
  union {
    StartConsoleResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartConsoleResponseDefaultTypeInternal _StartConsoleResponse_default_instance_;

inline constexpr StartConsoleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        session_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StartConsoleRequest::StartConsoleRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StartConsoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartConsoleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartConsoleRequestDefaultTypeInternal() {}
  union {
    StartConsoleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartConsoleRequestDefaultTypeInternal _StartConsoleRequest_default_instance_;

inline constexpr ParameterInformation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        documentation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ParameterInformation::ParameterInformation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ParameterInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParameterInformationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParameterInformationDefaultTypeInternal() {}
  union {
    ParameterInformation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParameterInformationDefaultTypeInternal _ParameterInformation_default_instance_;

inline constexpr OpenDocumentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        console_id_{nullptr},
        text_document_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR OpenDocumentRequest::OpenDocumentRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OpenDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpenDocumentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpenDocumentRequestDefaultTypeInternal() {}
  union {
    OpenDocumentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpenDocumentRequestDefaultTypeInternal _OpenDocumentRequest_default_instance_;

inline constexpr GetHoverRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_document_{nullptr},
        position_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetHoverRequest::GetHoverRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetHoverRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHoverRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHoverRequestDefaultTypeInternal() {}
  union {
    GetHoverRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHoverRequestDefaultTypeInternal _GetHoverRequest_default_instance_;

inline constexpr GetDiagnosticRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        identifier_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        previous_result_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        text_document_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetDiagnosticRequest::GetDiagnosticRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetDiagnosticRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDiagnosticRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDiagnosticRequestDefaultTypeInternal() {}
  union {
    GetDiagnosticRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDiagnosticRequestDefaultTypeInternal _GetDiagnosticRequest_default_instance_;

inline constexpr GetCompletionItemsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        console_id_{nullptr},
        context_{nullptr},
        text_document_{nullptr},
        position_{nullptr},
        request_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetCompletionItemsRequest::GetCompletionItemsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetCompletionItemsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompletionItemsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompletionItemsRequestDefaultTypeInternal() {}
  union {
    GetCompletionItemsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompletionItemsRequestDefaultTypeInternal _GetCompletionItemsRequest_default_instance_;

inline constexpr FigureDescriptor_SourceDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        axis_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        column_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        one_click_{nullptr},
        type_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceType >(0)},
        table_id_{0},
        partitioned_table_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_SourceDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_SourceDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_SourceDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_SourceDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_SourceDescriptorDefaultTypeInternal _FigureDescriptor_SourceDescriptor_default_instance_;

inline constexpr FigureDescriptor_MultiSeriesDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_sources_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        line_color_{nullptr},
        point_color_{nullptr},
        lines_visible_{nullptr},
        points_visible_{nullptr},
        gradient_visible_{nullptr},
        point_label_format_{nullptr},
        x_tool_tip_pattern_{nullptr},
        y_tool_tip_pattern_{nullptr},
        point_label_{nullptr},
        point_size_{nullptr},
        point_shape_{nullptr},
        plot_style_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesPlotStyle >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_MultiSeriesDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_MultiSeriesDescriptorDefaultTypeInternal _FigureDescriptor_MultiSeriesDescriptor_default_instance_;

inline constexpr FigureDescriptor_BusinessCalendarDescriptor_Holiday::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        business_periods_{},
        date_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor_Holiday _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptor_HolidayDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_Holiday_default_instance_;

inline constexpr ExecuteCommandRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        console_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ExecuteCommandRequest::ExecuteCommandRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExecuteCommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteCommandRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteCommandRequestDefaultTypeInternal() {}
  union {
    ExecuteCommandRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteCommandRequestDefaultTypeInternal _ExecuteCommandRequest_default_instance_;

inline constexpr DocumentRange::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        start_{nullptr},
        end_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DocumentRange::DocumentRange(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DocumentRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentRangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentRangeDefaultTypeInternal() {}
  union {
    DocumentRange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentRangeDefaultTypeInternal _DocumentRange_default_instance_;

inline constexpr CloseDocumentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        console_id_{nullptr},
        text_document_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CloseDocumentRequest::CloseDocumentRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CloseDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseDocumentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseDocumentRequestDefaultTypeInternal() {}
  union {
    CloseDocumentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseDocumentRequestDefaultTypeInternal _CloseDocumentRequest_default_instance_;

inline constexpr CancelCommandRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        console_id_{nullptr},
        command_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CancelCommandRequest::CancelCommandRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CancelCommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelCommandRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelCommandRequestDefaultTypeInternal() {}
  union {
    CancelCommandRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelCommandRequestDefaultTypeInternal _CancelCommandRequest_default_instance_;

inline constexpr CancelAutoCompleteRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        console_id_{nullptr},
        request_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CancelAutoCompleteRequest::CancelAutoCompleteRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CancelAutoCompleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelAutoCompleteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelAutoCompleteRequestDefaultTypeInternal() {}
  union {
    CancelAutoCompleteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelAutoCompleteRequestDefaultTypeInternal _CancelAutoCompleteRequest_default_instance_;

inline constexpr BindTableToVariableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        variable_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        console_id_{nullptr},
        table_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BindTableToVariableRequest::BindTableToVariableRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BindTableToVariableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BindTableToVariableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BindTableToVariableRequestDefaultTypeInternal() {}
  union {
    BindTableToVariableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BindTableToVariableRequestDefaultTypeInternal _BindTableToVariableRequest_default_instance_;

inline constexpr TextEdit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        range_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TextEdit::TextEdit(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TextEditDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextEditDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextEditDefaultTypeInternal() {}
  union {
    TextEdit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextEditDefaultTypeInternal _TextEdit_default_instance_;

inline constexpr SignatureInformation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        parameters_{},
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        documentation_{nullptr},
        active_parameter_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SignatureInformation::SignatureInformation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SignatureInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureInformationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureInformationDefaultTypeInternal() {}
  union {
    SignatureInformation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureInformationDefaultTypeInternal _SignatureInformation_default_instance_;

inline constexpr GetHoverResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        contents_{nullptr},
        range_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetHoverResponse::GetHoverResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetHoverResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHoverResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHoverResponseDefaultTypeInternal() {}
  union {
    GetHoverResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHoverResponseDefaultTypeInternal _GetHoverResponse_default_instance_;

inline constexpr FigureDescriptor_SeriesDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_sources_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        line_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        point_label_format_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        x_tool_tip_pattern_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        y_tool_tip_pattern_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shape_label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shape_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shape_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        plot_style_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesPlotStyle >(0)},
        lines_visible_{false},
        shapes_visible_{false},
        gradient_visible_{false},
        shape_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_SeriesDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_SeriesDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_SeriesDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_SeriesDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_SeriesDescriptorDefaultTypeInternal _FigureDescriptor_SeriesDescriptor_default_instance_;

inline constexpr FigureDescriptor_BusinessCalendarDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : business_days_{},
        _business_days_cached_byte_size_{0},
        business_periods_{},
        holidays_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_zone_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_BusinessCalendarDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_BusinessCalendarDescriptorDefaultTypeInternal _FigureDescriptor_BusinessCalendarDescriptor_default_instance_;

inline constexpr Diagnostic::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tags_{},
        _tags_cached_byte_size_{0},
        code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        range_{nullptr},
        code_description_{nullptr},
        severity_{static_cast< ::io::deephaven::proto::backplane::script::grpc::Diagnostic_DiagnosticSeverity >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Diagnostic::Diagnostic(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DiagnosticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiagnosticDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiagnosticDefaultTypeInternal() {}
  union {
    Diagnostic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiagnosticDefaultTypeInternal _Diagnostic_default_instance_;

inline constexpr ChangeDocumentRequest_TextDocumentContentChangeEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        range_{nullptr},
        range_length_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest_TextDocumentContentChangeEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeDocumentRequest_TextDocumentContentChangeEventDefaultTypeInternal _ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_;

inline constexpr GetSignatureHelpResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signatures_{},
        active_signature_{0},
        active_parameter_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetSignatureHelpResponse::GetSignatureHelpResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetSignatureHelpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSignatureHelpResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSignatureHelpResponseDefaultTypeInternal() {}
  union {
    GetSignatureHelpResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSignatureHelpResponseDefaultTypeInternal _GetSignatureHelpResponse_default_instance_;

inline constexpr GetPullDiagnosticResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        items_{},
        kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR GetPullDiagnosticResponse::GetPullDiagnosticResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetPullDiagnosticResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPullDiagnosticResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPullDiagnosticResponseDefaultTypeInternal() {}
  union {
    GetPullDiagnosticResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPullDiagnosticResponseDefaultTypeInternal _GetPullDiagnosticResponse_default_instance_;

inline constexpr GetPublishDiagnosticResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        diagnostics_{},
        uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetPublishDiagnosticResponse::GetPublishDiagnosticResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetPublishDiagnosticResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPublishDiagnosticResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPublishDiagnosticResponseDefaultTypeInternal() {}
  union {
    GetPublishDiagnosticResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPublishDiagnosticResponseDefaultTypeInternal _GetPublishDiagnosticResponse_default_instance_;

inline constexpr FigureDescriptor_AxisDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        major_tick_locations_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        label_font_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticks_font_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        format_pattern_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        business_calendar_descriptor_{nullptr},
        format_type_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisFormatType >(0)},
        type_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisType >(0)},
        min_range_{0},
        position_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor_AxisPosition >(0)},
        log_{false},
        minor_ticks_visible_{false},
        major_ticks_visible_{false},
        invert_{false},
        max_range_{0},
        gap_between_major_ticks_{0},
        minor_tick_count_{0},
        is_time_axis_{false},
        tick_label_angle_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_AxisDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_AxisDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_AxisDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_AxisDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_AxisDescriptorDefaultTypeInternal _FigureDescriptor_AxisDescriptor_default_instance_;

inline constexpr CompletionItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        additional_text_edits_{},
        commit_characters_{},
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        detail_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sort_text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        filter_text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        text_edit_{nullptr},
        documentation_{nullptr},
        start_{0},
        length_{0},
        kind_{0},
        deprecated_{false},
        preselect_{false},
        insert_text_format_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CompletionItem::CompletionItem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CompletionItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionItemDefaultTypeInternal() {}
  union {
    CompletionItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionItemDefaultTypeInternal _CompletionItem_default_instance_;

inline constexpr ChangeDocumentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        content_changes_{},
        console_id_{nullptr},
        text_document_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ChangeDocumentRequest::ChangeDocumentRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChangeDocumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeDocumentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeDocumentRequestDefaultTypeInternal() {}
  union {
    ChangeDocumentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeDocumentRequestDefaultTypeInternal _ChangeDocumentRequest_default_instance_;

inline constexpr SignatureHelpContext::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        trigger_character_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        active_signature_help_{nullptr},
        trigger_kind_{0},
        is_retrigger_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SignatureHelpContext::SignatureHelpContext(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SignatureHelpContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureHelpContextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureHelpContextDefaultTypeInternal() {}
  union {
    SignatureHelpContext _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureHelpContextDefaultTypeInternal _SignatureHelpContext_default_instance_;

inline constexpr GetCompletionItemsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : items_{},
        request_id_{0},
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetCompletionItemsResponse::GetCompletionItemsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetCompletionItemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCompletionItemsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCompletionItemsResponseDefaultTypeInternal() {}
  union {
    GetCompletionItemsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCompletionItemsResponseDefaultTypeInternal _GetCompletionItemsResponse_default_instance_;

inline constexpr FigureDescriptor_ChartDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        series_{},
        multi_series_{},
        axes_{},
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_font_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        legend_font_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        legend_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        colspan_{0},
        rowspan_{0},
        chart_type_{static_cast< ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor_ChartType >(0)},
        show_legend_{false},
        is3d_{false},
        column_{0},
        row_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptor_ChartDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptor_ChartDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptor_ChartDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor_ChartDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptor_ChartDescriptorDefaultTypeInternal _FigureDescriptor_ChartDescriptor_default_instance_;

inline constexpr ExecuteCommandResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        changes_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ExecuteCommandResponse::ExecuteCommandResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExecuteCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteCommandResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteCommandResponseDefaultTypeInternal() {}
  union {
    ExecuteCommandResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteCommandResponseDefaultTypeInternal _ExecuteCommandResponse_default_instance_;

inline constexpr GetSignatureHelpRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        context_{nullptr},
        text_document_{nullptr},
        position_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetSignatureHelpRequest::GetSignatureHelpRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetSignatureHelpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSignatureHelpRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSignatureHelpRequestDefaultTypeInternal() {}
  union {
    GetSignatureHelpRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSignatureHelpRequestDefaultTypeInternal _GetSignatureHelpRequest_default_instance_;

inline constexpr FigureDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        charts_{},
        errors_{},
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_font_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        update_interval_{::int64_t{0}},
        cols_{0},
        rows_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FigureDescriptor::FigureDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FigureDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FigureDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FigureDescriptorDefaultTypeInternal() {}
  union {
    FigureDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FigureDescriptorDefaultTypeInternal _FigureDescriptor_default_instance_;

inline constexpr AutoCompleteResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : request_id_{0},
        success_{false},
        response_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AutoCompleteResponse::AutoCompleteResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AutoCompleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoCompleteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoCompleteResponseDefaultTypeInternal() {}
  union {
    AutoCompleteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoCompleteResponseDefaultTypeInternal _AutoCompleteResponse_default_instance_;

inline constexpr AutoCompleteRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        console_id_{nullptr},
        request_id_{0},
        request_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AutoCompleteRequest::AutoCompleteRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AutoCompleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoCompleteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoCompleteRequestDefaultTypeInternal() {}
  union {
    AutoCompleteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoCompleteRequestDefaultTypeInternal _AutoCompleteRequest_default_instance_;
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::_pb::Metadata file_level_metadata_deephaven_2fproto_2fconsole_2eproto[60];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[9];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_deephaven_2fproto_2fconsole_2eproto = nullptr;
const ::uint32_t TableStruct_deephaven_2fproto_2fconsole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse, _impl_.console_types_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _impl_.result_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest, _impl_.session_type_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse, _impl_.result_id_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _impl_.max_memory_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _impl_.total_memory_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse, _impl_.free_memory_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _impl_.last_seen_log_timestamp_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest, _impl_.levels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _impl_.micros_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _impl_.log_level_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest, _impl_.code_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse, _impl_.changes_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _impl_.variable_name_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest, _impl_.table_id_),
    0,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest, _impl_.command_id_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest, _impl_.request_id_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_.request_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_.request_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_.success_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_.response_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest, _impl_.text_document_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.language_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest, _impl_.text_document_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_length_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.text_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _impl_.text_document_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest, _impl_.content_changes_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::DocumentRange, _impl_.end_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier, _impl_.version_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _impl_.line_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Position, _impl_.character_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::MarkupContent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::MarkupContent, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::MarkupContent, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.console_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.context_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.text_document_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest, _impl_.request_id_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _impl_.trigger_kind_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionContext, _impl_.trigger_character_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _impl_.items_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.detail_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.deprecated_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.preselect_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.text_edit_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.sort_text_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.filter_text_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.insert_text_format_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.additional_text_edits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.commit_characters_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::CompletionItem, _impl_.documentation_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _impl_.range_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::TextEdit, _impl_.text_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _impl_.context_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _impl_.text_document_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest, _impl_.position_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.trigger_kind_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.trigger_character_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.is_retrigger_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext, _impl_.active_signature_help_),
    ~0u,
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_.signatures_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_.active_signature_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse, _impl_.active_parameter_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.documentation_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.parameters_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::SignatureInformation, _impl_.active_parameter_),
    ~0u,
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ParameterInformation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ParameterInformation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ParameterInformation, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::ParameterInformation, _impl_.documentation_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest, _impl_.text_document_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest, _impl_.position_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse, _impl_.contents_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse, _impl_.range_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_.text_document_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest, _impl_.previous_result_id_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_.result_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse, _impl_.items_),
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse, _impl_.diagnostics_),
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription, _impl_.href_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.range_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.severity_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.code_description_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.source_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.tags_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::Diagnostic, _impl_.data_),
    3,
    ~0u,
    0,
    4,
    1,
    ~0u,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.colspan_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.rowspan_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.series_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.multi_series_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.axes_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.chart_type_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.title_font_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.title_color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.show_legend_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.legend_font_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.legend_color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.is3d_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.column_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor, _impl_.row_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.plot_style_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.lines_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shapes_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.gradient_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.line_color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.point_label_format_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.x_tool_tip_pattern_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.y_tool_tip_pattern_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_label_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_size_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.shape_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor, _impl_.data_sources_),
    ~0u,
    ~0u,
    3,
    4,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    5,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.plot_style_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.line_color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.lines_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.points_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.gradient_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_format_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.x_tool_tip_pattern_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.y_tool_tip_pattern_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_size_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.point_shape_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor, _impl_.data_sources_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_.default_string_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault, _impl_.values_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_.default_double_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault, _impl_.values_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_.default_bool_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault, _impl_.values_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.format_type_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.log_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.label_font_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.ticks_font_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.format_pattern_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.min_range_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.max_range_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.minor_ticks_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.major_ticks_visible_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.minor_tick_count_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.gap_between_major_ticks_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.major_tick_locations_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.tick_label_angle_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.invert_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.is_time_axis_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor, _impl_.business_calendar_descriptor_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.open_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.close_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.date_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.business_periods_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.year_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.month_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.day_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.time_zone_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_days_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_periods_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor, _impl_.holidays_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.axis_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.partitioned_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.column_name_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.axis_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.partitioned_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.column_name_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.column_type_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor, _impl_.one_click_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _impl_.columns_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _impl_.column_types_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor, _impl_.require_all_filters_to_display_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.title_font_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.title_color_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.update_interval_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.cols_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.rows_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.charts_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor, _impl_.errors_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesRequest)},
        {8, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetConsoleTypesResponse)},
        {17, 27, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleRequest)},
        {29, 38, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::StartConsoleResponse)},
        {39, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoRequest)},
        {47, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHeapInfoResponse)},
        {58, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionRequest)},
        {68, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::LogSubscriptionData)},
        {79, 89, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandRequest)},
        {91, 101, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ExecuteCommandResponse)},
        {103, 114, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableRequest)},
        {117, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BindTableToVariableResponse)},
        {125, 135, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandRequest)},
        {137, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelCommandResponse)},
        {145, 155, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteRequest)},
        {157, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CancelAutoCompleteResponse)},
        {165, 183, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest)},
        {192, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse)},
        {208, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::BrowserNextResponse)},
        {216, 226, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest)},
        {228, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextDocumentItem)},
        {240, 250, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest)},
        {252, 263, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent)},
        {266, 277, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest)},
        {280, 290, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::DocumentRange)},
        {292, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier)},
        {302, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Position)},
        {312, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::MarkupContent)},
        {322, 335, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest)},
        {340, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionContext)},
        {350, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse)},
        {361, 383, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::CompletionItem)},
        {397, 407, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::TextEdit)},
        {409, 420, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest)},
        {423, 435, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext)},
        {439, 450, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse)},
        {453, 465, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::SignatureInformation)},
        {469, 479, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::ParameterInformation)},
        {481, 491, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest)},
        {493, 503, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse)},
        {505, 516, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest)},
        {519, 530, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse)},
        {533, 544, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse)},
        {547, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription)},
        {556, 572, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::Diagnostic)},
        {580, 603, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor)},
        {618, 640, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor)},
        {654, 676, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor)},
        {690, 701, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault)},
        {704, 715, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault)},
        {718, 729, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault)},
        {732, 761, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor)},
        {782, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod)},
        {792, 802, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday)},
        {804, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate)},
        {815, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor)},
        {828, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor)},
        {840, 855, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor)},
        {862, -1, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor)},
        {873, 889, -1, sizeof(::io::deephaven::proto::backplane::script::grpc::FigureDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetConsoleTypesResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_StartConsoleRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_StartConsoleResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetHeapInfoRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetHeapInfoResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_LogSubscriptionData_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_ExecuteCommandResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_BindTableToVariableResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_CancelCommandRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_CancelCommandResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_CancelAutoCompleteRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_CancelAutoCompleteResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_AutoCompleteRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_AutoCompleteResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_BrowserNextResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_OpenDocumentRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_TextDocumentItem_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_CloseDocumentRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_ChangeDocumentRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_DocumentRange_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_VersionedTextDocumentIdentifier_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_Position_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_MarkupContent_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_CompletionContext_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetCompletionItemsResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_CompletionItem_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_TextEdit_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetSignatureHelpRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_SignatureHelpContext_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetSignatureHelpResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_SignatureInformation_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_ParameterInformation_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetHoverRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetHoverResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetDiagnosticRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetPullDiagnosticResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_GetPublishDiagnosticResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_Diagnostic_CodeDescription_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_Diagnostic_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_ChartDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_SeriesDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_MultiSeriesDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_StringMapWithDefault_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_DoubleMapWithDefault_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BoolMapWithDefault_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_AxisDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_Holiday_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_LocalDate_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_BusinessCalendarDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_MultiSeriesSourceDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_SourceDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_OneClickDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::script::grpc::_FigureDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_deephaven_2fproto_2fconsole_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035deephaven/proto/console.proto\022(io.deep"
    "haven.proto.backplane.script.grpc\032\034deeph"
    "aven/proto/ticket.proto\032!deephaven/proto"
    "/application.proto\"\030\n\026GetConsoleTypesReq"
    "uest\"0\n\027GetConsoleTypesResponse\022\025\n\rconso"
    "le_types\030\001 \003(\t\"i\n\023StartConsoleRequest\022<\n"
    "\tresult_id\030\001 \001(\0132).io.deephaven.proto.ba"
    "ckplane.grpc.Ticket\022\024\n\014session_type\030\002 \001("
    "\t\"T\n\024StartConsoleResponse\022<\n\tresult_id\030\001"
    " \001(\0132).io.deephaven.proto.backplane.grpc"
    ".Ticket\"\024\n\022GetHeapInfoRequest\"`\n\023GetHeap"
    "InfoResponse\022\026\n\nmax_memory\030\001 \001(\003B\0020\001\022\030\n\014"
    "total_memory\030\002 \001(\003B\0020\001\022\027\n\013free_memory\030\003 "
    "\001(\003B\0020\001\"M\n\026LogSubscriptionRequest\022#\n\027las"
    "t_seen_log_timestamp\030\001 \001(\003B\0020\001\022\016\n\006levels"
    "\030\002 \003(\t\"S\n\023LogSubscriptionData\022\022\n\006micros\030"
    "\001 \001(\003B\0020\001\022\021\n\tlog_level\030\002 \001(\t\022\017\n\007message\030"
    "\003 \001(\tJ\004\010\004\020\005\"j\n\025ExecuteCommandRequest\022=\n\n"
    "console_id\030\001 \001(\0132).io.deephaven.proto.ba"
    "ckplane.grpc.Ticket\022\014\n\004code\030\003 \001(\tJ\004\010\002\020\003\""
    "w\n\026ExecuteCommandResponse\022\025\n\rerror_messa"
    "ge\030\001 \001(\t\022F\n\007changes\030\002 \001(\01325.io.deephaven"
    ".proto.backplane.grpc.FieldsChangeUpdate"
    "\"\265\001\n\032BindTableToVariableRequest\022=\n\nconso"
    "le_id\030\001 \001(\0132).io.deephaven.proto.backpla"
    "ne.grpc.Ticket\022\025\n\rvariable_name\030\003 \001(\t\022;\n"
    "\010table_id\030\004 \001(\0132).io.deephaven.proto.bac"
    "kplane.grpc.TicketJ\004\010\002\020\003\"\035\n\033BindTableToV"
    "ariableResponse\"\224\001\n\024CancelCommandRequest"
    "\022=\n\nconsole_id\030\001 \001(\0132).io.deephaven.prot"
    "o.backplane.grpc.Ticket\022=\n\ncommand_id\030\002 "
    "\001(\0132).io.deephaven.proto.backplane.grpc."
    "Ticket\"\027\n\025CancelCommandResponse\"n\n\031Cance"
    "lAutoCompleteRequest\022=\n\nconsole_id\030\001 \001(\013"
    "2).io.deephaven.proto.backplane.grpc.Tic"
    "ket\022\022\n\nrequest_id\030\002 \001(\005\"\034\n\032CancelAutoCom"
    "pleteResponse\"\361\005\n\023AutoCompleteRequest\022=\n"
    "\nconsole_id\030\005 \001(\0132).io.deephaven.proto.b"
    "ackplane.grpc.Ticket\022\022\n\nrequest_id\030\006 \001(\005"
    "\022V\n\ropen_document\030\001 \001(\0132=.io.deephaven.p"
    "roto.backplane.script.grpc.OpenDocumentR"
    "equestH\000\022Z\n\017change_document\030\002 \001(\0132\?.io.d"
    "eephaven.proto.backplane.script.grpc.Cha"
    "ngeDocumentRequestH\000\022c\n\024get_completion_i"
    "tems\030\003 \001(\0132C.io.deephaven.proto.backplan"
    "e.script.grpc.GetCompletionItemsRequestH"
    "\000\022_\n\022get_signature_help\030\007 \001(\0132A.io.deeph"
    "aven.proto.backplane.script.grpc.GetSign"
    "atureHelpRequestH\000\022N\n\tget_hover\030\010 \001(\01329."
    "io.deephaven.proto.backplane.script.grpc"
    ".GetHoverRequestH\000\022X\n\016get_diagnostic\030\t \001"
    "(\0132>.io.deephaven.proto.backplane.script"
    ".grpc.GetDiagnosticRequestH\000\022X\n\016close_do"
    "cument\030\004 \001(\0132>.io.deephaven.proto.backpl"
    "ane.script.grpc.CloseDocumentRequestH\000B\t"
    "\n\007request\"\221\004\n\024AutoCompleteResponse\022\022\n\nre"
    "quest_id\030\002 \001(\005\022\017\n\007success\030\003 \001(\010\022`\n\020compl"
    "etion_items\030\001 \001(\0132D.io.deephaven.proto.b"
    "ackplane.script.grpc.GetCompletionItemsR"
    "esponseH\000\022X\n\nsignatures\030\004 \001(\0132B.io.deeph"
    "aven.proto.backplane.script.grpc.GetSign"
    "atureHelpResponseH\000\022K\n\005hover\030\005 \001(\0132:.io."
    "deephaven.proto.backplane.script.grpc.Ge"
    "tHoverResponseH\000\022Y\n\ndiagnostic\030\006 \001(\0132C.i"
    "o.deephaven.proto.backplane.script.grpc."
    "GetPullDiagnosticResponseH\000\022d\n\022diagnosti"
    "c_publish\030\007 \001(\0132F.io.deephaven.proto.bac"
    "kplane.script.grpc.GetPublishDiagnosticR"
    "esponseH\000B\n\n\010response\"\025\n\023BrowserNextResp"
    "onse\"\253\001\n\023OpenDocumentRequest\022A\n\nconsole_"
    "id\030\001 \001(\0132).io.deephaven.proto.backplane."
    "grpc.TicketB\002\030\001\022Q\n\rtext_document\030\002 \001(\0132:"
    ".io.deephaven.proto.backplane.script.grp"
    "c.TextDocumentItem\"S\n\020TextDocumentItem\022\013"
    "\n\003uri\030\001 \001(\t\022\023\n\013language_id\030\002 \001(\t\022\017\n\007vers"
    "ion\030\003 \001(\005\022\014\n\004text\030\004 \001(\t\"\273\001\n\024CloseDocumen"
    "tRequest\022A\n\nconsole_id\030\001 \001(\0132).io.deepha"
    "ven.proto.backplane.grpc.TicketB\002\030\001\022`\n\rt"
    "ext_document\030\002 \001(\0132I.io.deephaven.proto."
    "backplane.script.grpc.VersionedTextDocum"
    "entIdentifier\"\304\003\n\025ChangeDocumentRequest\022"
    "A\n\nconsole_id\030\001 \001(\0132).io.deephaven.proto"
    ".backplane.grpc.TicketB\002\030\001\022`\n\rtext_docum"
    "ent\030\002 \001(\0132I.io.deephaven.proto.backplane"
    ".script.grpc.VersionedTextDocumentIdenti"
    "fier\022w\n\017content_changes\030\003 \003(\0132^.io.deeph"
    "aven.proto.backplane.script.grpc.ChangeD"
    "ocumentRequest.TextDocumentContentChange"
    "Event\032\214\001\n\036TextDocumentContentChangeEvent"
    "\022F\n\005range\030\001 \001(\01327.io.deephaven.proto.bac"
    "kplane.script.grpc.DocumentRange\022\024\n\014rang"
    "e_length\030\002 \001(\005\022\014\n\004text\030\003 \001(\t\"\223\001\n\rDocumen"
    "tRange\022A\n\005start\030\001 \001(\01322.io.deephaven.pro"
    "to.backplane.script.grpc.Position\022\?\n\003end"
    "\030\002 \001(\01322.io.deephaven.proto.backplane.sc"
    "ript.grpc.Position\"\?\n\037VersionedTextDocum"
    "entIdentifier\022\013\n\003uri\030\001 \001(\t\022\017\n\007version\030\002 "
    "\001(\005\"+\n\010Position\022\014\n\004line\030\001 \001(\005\022\021\n\tcharact"
    "er\030\002 \001(\005\",\n\rMarkupContent\022\014\n\004kind\030\001 \001(\t\022"
    "\r\n\005value\030\002 \001(\t\"\354\002\n\031GetCompletionItemsReq"
    "uest\022A\n\nconsole_id\030\001 \001(\0132).io.deephaven."
    "proto.backplane.grpc.TicketB\002\030\001\022L\n\007conte"
    "xt\030\002 \001(\0132;.io.deephaven.proto.backplane."
    "script.grpc.CompletionContext\022`\n\rtext_do"
    "cument\030\003 \001(\0132I.io.deephaven.proto.backpl"
    "ane.script.grpc.VersionedTextDocumentIde"
    "ntifier\022D\n\010position\030\004 \001(\01322.io.deephaven"
    ".proto.backplane.script.grpc.Position\022\026\n"
    "\nrequest_id\030\005 \001(\005B\002\030\001\"D\n\021CompletionConte"
    "xt\022\024\n\014trigger_kind\030\001 \001(\005\022\031\n\021trigger_char"
    "acter\030\002 \001(\t\"\222\001\n\032GetCompletionItemsRespon"
    "se\022G\n\005items\030\001 \003(\01328.io.deephaven.proto.b"
    "ackplane.script.grpc.CompletionItem\022\026\n\nr"
    "equest_id\030\002 \001(\005B\002\030\001\022\023\n\007success\030\003 \001(\010B\002\030\001"
    "\"\322\003\n\016CompletionItem\022\r\n\005start\030\001 \001(\005\022\016\n\006le"
    "ngth\030\002 \001(\005\022\r\n\005label\030\003 \001(\t\022\014\n\004kind\030\004 \001(\005\022"
    "\016\n\006detail\030\005 \001(\t\022\022\n\ndeprecated\030\007 \001(\010\022\021\n\tp"
    "reselect\030\010 \001(\010\022E\n\ttext_edit\030\t \001(\01322.io.d"
    "eephaven.proto.backplane.script.grpc.Tex"
    "tEdit\022\021\n\tsort_text\030\n \001(\t\022\023\n\013filter_text\030"
    "\013 \001(\t\022\032\n\022insert_text_format\030\014 \001(\005\022Q\n\025add"
    "itional_text_edits\030\r \003(\01322.io.deephaven."
    "proto.backplane.script.grpc.TextEdit\022\031\n\021"
    "commit_characters\030\016 \003(\t\022N\n\rdocumentation"
    "\030\017 \001(\01327.io.deephaven.proto.backplane.sc"
    "ript.grpc.MarkupContentJ\004\010\006\020\007\"`\n\010TextEdi"
    "t\022F\n\005range\030\001 \001(\01327.io.deephaven.proto.ba"
    "ckplane.script.grpc.DocumentRange\022\014\n\004tex"
    "t\030\002 \001(\t\"\222\002\n\027GetSignatureHelpRequest\022O\n\007c"
    "ontext\030\001 \001(\0132>.io.deephaven.proto.backpl"
    "ane.script.grpc.SignatureHelpContext\022`\n\r"
    "text_document\030\002 \001(\0132I.io.deephaven.proto"
    ".backplane.script.grpc.VersionedTextDocu"
    "mentIdentifier\022D\n\010position\030\003 \001(\01322.io.de"
    "ephaven.proto.backplane.script.grpc.Posi"
    "tion\"\333\001\n\024SignatureHelpContext\022\024\n\014trigger"
    "_kind\030\001 \001(\005\022\036\n\021trigger_character\030\002 \001(\tH\000"
    "\210\001\001\022\024\n\014is_retrigger\030\003 \001(\010\022a\n\025active_sign"
    "ature_help\030\004 \001(\0132B.io.deephaven.proto.ba"
    "ckplane.script.grpc.GetSignatureHelpResp"
    "onseB\024\n\022_trigger_character\"\326\001\n\030GetSignat"
    "ureHelpResponse\022R\n\nsignatures\030\001 \003(\0132>.io"
    ".deephaven.proto.backplane.script.grpc.S"
    "ignatureInformation\022\035\n\020active_signature\030"
    "\002 \001(\005H\000\210\001\001\022\035\n\020active_parameter\030\003 \001(\005H\001\210\001"
    "\001B\023\n\021_active_signatureB\023\n\021_active_parame"
    "ter\"\375\001\n\024SignatureInformation\022\r\n\005label\030\001 "
    "\001(\t\022N\n\rdocumentation\030\002 \001(\01327.io.deephave"
    "n.proto.backplane.script.grpc.MarkupCont"
    "ent\022R\n\nparameters\030\003 \003(\0132>.io.deephaven.p"
    "roto.backplane.script.grpc.ParameterInfo"
    "rmation\022\035\n\020active_parameter\030\004 \001(\005H\000\210\001\001B\023"
    "\n\021_active_parameter\"u\n\024ParameterInformat"
    "ion\022\r\n\005label\030\001 \001(\t\022N\n\rdocumentation\030\002 \001("
    "\01327.io.deephaven.proto.backplane.script."
    "grpc.MarkupContent\"\271\001\n\017GetHoverRequest\022`"
    "\n\rtext_document\030\001 \001(\0132I.io.deephaven.pro"
    "to.backplane.script.grpc.VersionedTextDo"
    "cumentIdentifier\022D\n\010position\030\002 \001(\01322.io."
    "deephaven.proto.backplane.script.grpc.Po"
    "sition\"\245\001\n\020GetHoverResponse\022I\n\010contents\030"
    "\001 \001(\01327.io.deephaven.proto.backplane.scr"
    "ipt.grpc.MarkupContent\022F\n\005range\030\002 \001(\01327."
    "io.deephaven.proto.backplane.script.grpc"
    ".DocumentRange\"\330\001\n\024GetDiagnosticRequest\022"
    "`\n\rtext_document\030\001 \001(\0132I.io.deephaven.pr"
    "oto.backplane.script.grpc.VersionedTextD"
    "ocumentIdentifier\022\027\n\nidentifier\030\002 \001(\tH\000\210"
    "\001\001\022\037\n\022previous_result_id\030\003 \001(\tH\001\210\001\001B\r\n\013_"
    "identifierB\025\n\023_previous_result_id\"\224\001\n\031Ge"
    "tPullDiagnosticResponse\022\014\n\004kind\030\001 \001(\t\022\026\n"
    "\tresult_id\030\002 \001(\tH\000\210\001\001\022C\n\005items\030\003 \003(\01324.i"
    "o.deephaven.proto.backplane.script.grpc."
    "DiagnosticB\014\n\n_result_id\"\230\001\n\034GetPublishD"
    "iagnosticResponse\022\013\n\003uri\030\001 \001(\t\022\024\n\007versio"
    "n\030\002 \001(\005H\000\210\001\001\022I\n\013diagnostics\030\003 \003(\01324.io.d"
    "eephaven.proto.backplane.script.grpc.Dia"
    "gnosticB\n\n\010_version\"\247\005\n\nDiagnostic\022F\n\005ra"
    "nge\030\001 \001(\01327.io.deephaven.proto.backplane"
    ".script.grpc.DocumentRange\022Y\n\010severity\030\002"
    " \001(\0162G.io.deephaven.proto.backplane.scri"
    "pt.grpc.Diagnostic.DiagnosticSeverity\022\021\n"
    "\004code\030\003 \001(\tH\000\210\001\001\022c\n\020code_description\030\004 \001"
    "(\0132D.io.deephaven.proto.backplane.script"
    ".grpc.Diagnostic.CodeDescriptionH\001\210\001\001\022\023\n"
    "\006source\030\005 \001(\tH\002\210\001\001\022\017\n\007message\030\006 \001(\t\022P\n\004t"
    "ags\030\007 \003(\0162B.io.deephaven.proto.backplane"
    ".script.grpc.Diagnostic.DiagnosticTag\022\021\n"
    "\004data\030\t \001(\014H\003\210\001\001\032\037\n\017CodeDescription\022\014\n\004h"
    "ref\030\001 \001(\t\"]\n\022DiagnosticSeverity\022\024\n\020NOT_S"
    "ET_SEVERITY\020\000\022\t\n\005ERROR\020\001\022\013\n\007WARNING\020\002\022\017\n"
    "\013INFORMATION\020\003\022\010\n\004HINT\020\004\"A\n\rDiagnosticTa"
    "g\022\017\n\013NOT_SET_TAG\020\000\022\017\n\013UNNECESSARY\020\001\022\016\n\nD"
    "EPRECATED\020\002B\007\n\005_codeB\023\n\021_code_descriptio"
    "nB\t\n\007_sourceB\007\n\005_data\"\3460\n\020FigureDescript"
    "or\022\022\n\005title\030\001 \001(\tH\000\210\001\001\022\022\n\ntitle_font\030\002 \001"
    "(\t\022\023\n\013title_color\030\003 \001(\t\022\033\n\017update_interv"
    "al\030\007 \001(\003B\0020\001\022\014\n\004cols\030\010 \001(\005\022\014\n\004rows\030\t \001(\005"
    "\022Z\n\006charts\030\n \003(\0132J.io.deephaven.proto.ba"
    "ckplane.script.grpc.FigureDescriptor.Cha"
    "rtDescriptor\022\016\n\006errors\030\r \003(\t\032\316\005\n\017ChartDe"
    "scriptor\022\017\n\007colspan\030\001 \001(\005\022\017\n\007rowspan\030\002 \001"
    "(\005\022[\n\006series\030\003 \003(\0132K.io.deephaven.proto."
    "backplane.script.grpc.FigureDescriptor.S"
    "eriesDescriptor\022f\n\014multi_series\030\004 \003(\0132P."
    "io.deephaven.proto.backplane.script.grpc"
    ".FigureDescriptor.MultiSeriesDescriptor\022"
    "W\n\004axes\030\005 \003(\0132I.io.deephaven.proto.backp"
    "lane.script.grpc.FigureDescriptor.AxisDe"
    "scriptor\022h\n\nchart_type\030\006 \001(\0162T.io.deepha"
    "ven.proto.backplane.script.grpc.FigureDe"
    "scriptor.ChartDescriptor.ChartType\022\022\n\005ti"
    "tle\030\007 \001(\tH\000\210\001\001\022\022\n\ntitle_font\030\010 \001(\t\022\023\n\013ti"
    "tle_color\030\t \001(\t\022\023\n\013show_legend\030\n \001(\010\022\023\n\013"
    "legend_font\030\013 \001(\t\022\024\n\014legend_color\030\014 \001(\t\022"
    "\014\n\004is3d\030\r \001(\010\022\016\n\006column\030\016 \001(\005\022\013\n\003row\030\017 \001"
    "(\005\"_\n\tChartType\022\006\n\002XY\020\000\022\007\n\003PIE\020\001\022\014\n\004OHLC"
    "\020\002\032\002\010\001\022\014\n\010CATEGORY\020\003\022\007\n\003XYZ\020\004\022\017\n\013CATEGOR"
    "Y_3D\020\005\022\013\n\007TREEMAP\020\006B\010\n\006_title\032\376\004\n\020Series"
    "Descriptor\022^\n\nplot_style\030\001 \001(\0162J.io.deep"
    "haven.proto.backplane.script.grpc.Figure"
    "Descriptor.SeriesPlotStyle\022\014\n\004name\030\002 \001(\t"
    "\022\032\n\rlines_visible\030\003 \001(\010H\000\210\001\001\022\033\n\016shapes_v"
    "isible\030\004 \001(\010H\001\210\001\001\022\030\n\020gradient_visible\030\005 "
    "\001(\010\022\022\n\nline_color\030\006 \001(\t\022\037\n\022point_label_f"
    "ormat\030\010 \001(\tH\002\210\001\001\022\037\n\022x_tool_tip_pattern\030\t"
    " \001(\tH\003\210\001\001\022\037\n\022y_tool_tip_pattern\030\n \001(\tH\004\210"
    "\001\001\022\023\n\013shape_label\030\013 \001(\t\022\027\n\nshape_size\030\014 "
    "\001(\001H\005\210\001\001\022\023\n\013shape_color\030\r \001(\t\022\r\n\005shape\030\016"
    " \001(\t\022a\n\014data_sources\030\017 \003(\0132K.io.deephave"
    "n.proto.backplane.script.grpc.FigureDesc"
    "riptor.SourceDescriptorB\020\n\016_lines_visibl"
    "eB\021\n\017_shapes_visibleB\025\n\023_point_label_for"
    "matB\025\n\023_x_tool_tip_patternB\025\n\023_y_tool_ti"
    "p_patternB\r\n\013_shape_sizeJ\004\010\007\020\010\032\354\n\n\025Multi"
    "SeriesDescriptor\022^\n\nplot_style\030\001 \001(\0162J.i"
    "o.deephaven.proto.backplane.script.grpc."
    "FigureDescriptor.SeriesPlotStyle\022\014\n\004name"
    "\030\002 \001(\t\022c\n\nline_color\030\003 \001(\0132O.io.deephave"
    "n.proto.backplane.script.grpc.FigureDesc"
    "riptor.StringMapWithDefault\022d\n\013point_col"
    "or\030\004 \001(\0132O.io.deephaven.proto.backplane."
    "script.grpc.FigureDescriptor.StringMapWi"
    "thDefault\022d\n\rlines_visible\030\005 \001(\0132M.io.de"
    "ephaven.proto.backplane.script.grpc.Figu"
    "reDescriptor.BoolMapWithDefault\022e\n\016point"
    "s_visible\030\006 \001(\0132M.io.deephaven.proto.bac"
    "kplane.script.grpc.FigureDescriptor.Bool"
    "MapWithDefault\022g\n\020gradient_visible\030\007 \001(\013"
    "2M.io.deephaven.proto.backplane.script.g"
    "rpc.FigureDescriptor.BoolMapWithDefault\022"
    "k\n\022point_label_format\030\010 \001(\0132O.io.deephav"
    "en.proto.backplane.script.grpc.FigureDes"
    "criptor.StringMapWithDefault\022k\n\022x_tool_t"
    "ip_pattern\030\t \001(\0132O.io.deephaven.proto.ba"
    "ckplane.script.grpc.FigureDescriptor.Str"
    "ingMapWithDefault\022k\n\022y_tool_tip_pattern\030"
    "\n \001(\0132O.io.deephaven.proto.backplane.scr"
    "ipt.grpc.FigureDescriptor.StringMapWithD"
    "efault\022d\n\013point_label\030\013 \001(\0132O.io.deephav"
    "en.proto.backplane.script.grpc.FigureDes"
    "criptor.StringMapWithDefault\022c\n\npoint_si"
    "ze\030\014 \001(\0132O.io.deephaven.proto.backplane."
    "script.grpc.FigureDescriptor.DoubleMapWi"
    "thDefault\022d\n\013point_shape\030\r \001(\0132O.io.deep"
    "haven.proto.backplane.script.grpc.Figure"
    "Descriptor.StringMapWithDefault\022l\n\014data_"
    "sources\030\016 \003(\0132V.io.deephaven.proto.backp"
    "lane.script.grpc.FigureDescriptor.MultiS"
    "eriesSourceDescriptor\032d\n\024StringMapWithDe"
    "fault\022\033\n\016default_string\030\001 \001(\tH\000\210\001\001\022\014\n\004ke"
    "ys\030\002 \003(\t\022\016\n\006values\030\003 \003(\tB\021\n\017_default_str"
    "ing\032d\n\024DoubleMapWithDefault\022\033\n\016default_d"
    "ouble\030\001 \001(\001H\000\210\001\001\022\014\n\004keys\030\002 \003(\t\022\016\n\006values"
    "\030\003 \003(\001B\021\n\017_default_double\032^\n\022BoolMapWith"
    "Default\022\031\n\014default_bool\030\001 \001(\010H\000\210\001\001\022\014\n\004ke"
    "ys\030\002 \003(\t\022\016\n\006values\030\003 \003(\010B\017\n\r_default_boo"
    "l\032\246\010\n\016AxisDescriptor\022\n\n\002id\030\001 \001(\t\022m\n\013form"
    "at_type\030\002 \001(\0162X.io.deephaven.proto.backp"
    "lane.script.grpc.FigureDescriptor.AxisDe"
    "scriptor.AxisFormatType\022`\n\004type\030\003 \001(\0162R."
    "io.deephaven.proto.backplane.script.grpc"
    ".FigureDescriptor.AxisDescriptor.AxisTyp"
    "e\022h\n\010position\030\004 \001(\0162V.io.deephaven.proto"
    ".backplane.script.grpc.FigureDescriptor."
    "AxisDescriptor.AxisPosition\022\013\n\003log\030\005 \001(\010"
    "\022\r\n\005label\030\006 \001(\t\022\022\n\nlabel_font\030\007 \001(\t\022\022\n\nt"
    "icks_font\030\010 \001(\t\022\033\n\016format_pattern\030\t \001(\tH"
    "\000\210\001\001\022\r\n\005color\030\n \001(\t\022\021\n\tmin_range\030\013 \001(\001\022\021"
    "\n\tmax_range\030\014 \001(\001\022\033\n\023minor_ticks_visible"
    "\030\r \001(\010\022\033\n\023major_ticks_visible\030\016 \001(\010\022\030\n\020m"
    "inor_tick_count\030\017 \001(\005\022$\n\027gap_between_maj"
    "or_ticks\030\020 \001(\001H\001\210\001\001\022\034\n\024major_tick_locati"
    "ons\030\021 \003(\001\022\030\n\020tick_label_angle\030\022 \001(\001\022\016\n\006i"
    "nvert\030\023 \001(\010\022\024\n\014is_time_axis\030\024 \001(\010\022{\n\034bus"
    "iness_calendar_descriptor\030\025 \001(\0132U.io.dee"
    "phaven.proto.backplane.script.grpc.Figur"
    "eDescriptor.BusinessCalendarDescriptor\"*"
    "\n\016AxisFormatType\022\014\n\010CATEGORY\020\000\022\n\n\006NUMBER"
    "\020\001\"C\n\010AxisType\022\005\n\001X\020\000\022\005\n\001Y\020\001\022\t\n\005SHAPE\020\002\022"
    "\010\n\004SIZE\020\003\022\t\n\005LABEL\020\004\022\t\n\005COLOR\020\005\"B\n\014AxisP"
    "osition\022\007\n\003TOP\020\000\022\n\n\006BOTTOM\020\001\022\010\n\004LEFT\020\002\022\t"
    "\n\005RIGHT\020\003\022\010\n\004NONE\020\004B\021\n\017_format_patternB\032"
    "\n\030_gap_between_major_ticks\032\360\006\n\032BusinessC"
    "alendarDescriptor\022\014\n\004name\030\001 \001(\t\022\021\n\ttime_"
    "zone\030\002 \001(\t\022v\n\rbusiness_days\030\003 \003(\0162_.io.d"
    "eephaven.proto.backplane.script.grpc.Fig"
    "ureDescriptor.BusinessCalendarDescriptor"
    ".DayOfWeek\022~\n\020business_periods\030\004 \003(\0132d.i"
    "o.deephaven.proto.backplane.script.grpc."
    "FigureDescriptor.BusinessCalendarDescrip"
    "tor.BusinessPeriod\022o\n\010holidays\030\005 \003(\0132].i"
    "o.deephaven.proto.backplane.script.grpc."
    "FigureDescriptor.BusinessCalendarDescrip"
    "tor.Holiday\032-\n\016BusinessPeriod\022\014\n\004open\030\001 "
    "\001(\t\022\r\n\005close\030\002 \001(\t\032\370\001\n\007Holiday\022m\n\004date\030\001"
    " \001(\0132_.io.deephaven.proto.backplane.scri"
    "pt.grpc.FigureDescriptor.BusinessCalenda"
    "rDescriptor.LocalDate\022~\n\020business_period"
    "s\030\002 \003(\0132d.io.deephaven.proto.backplane.s"
    "cript.grpc.FigureDescriptor.BusinessCale"
    "ndarDescriptor.BusinessPeriod\0325\n\tLocalDa"
    "te\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003"
    " \001(\005\"g\n\tDayOfWeek\022\n\n\006SUNDAY\020\000\022\n\n\006MONDAY\020"
    "\001\022\013\n\007TUESDAY\020\002\022\r\n\tWEDNESDAY\020\003\022\014\n\010THURSDA"
    "Y\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010SATURDAY\020\006\032\266\001\n\033MultiS"
    "eriesSourceDescriptor\022\017\n\007axis_id\030\001 \001(\t\022S"
    "\n\004type\030\002 \001(\0162E.io.deephaven.proto.backpl"
    "ane.script.grpc.FigureDescriptor.SourceT"
    "ype\022\034\n\024partitioned_table_id\030\003 \001(\005\022\023\n\013col"
    "umn_name\030\004 \001(\t\032\264\002\n\020SourceDescriptor\022\017\n\007a"
    "xis_id\030\001 \001(\t\022S\n\004type\030\002 \001(\0162E.io.deephave"
    "n.proto.backplane.script.grpc.FigureDesc"
    "riptor.SourceType\022\020\n\010table_id\030\003 \001(\005\022\034\n\024p"
    "artitioned_table_id\030\004 \001(\005\022\023\n\013column_name"
    "\030\005 \001(\t\022\023\n\013column_type\030\006 \001(\t\022`\n\tone_click"
    "\030\007 \001(\0132M.io.deephaven.proto.backplane.sc"
    "ript.grpc.FigureDescriptor.OneClickDescr"
    "iptor\032c\n\022OneClickDescriptor\022\017\n\007columns\030\001"
    " \003(\t\022\024\n\014column_types\030\002 \003(\t\022&\n\036require_al"
    "l_filters_to_display\030\003 \001(\010\"\246\001\n\017SeriesPlo"
    "tStyle\022\007\n\003BAR\020\000\022\017\n\013STACKED_BAR\020\001\022\010\n\004LINE"
    "\020\002\022\010\n\004AREA\020\003\022\020\n\014STACKED_AREA\020\004\022\007\n\003PIE\020\005\022"
    "\r\n\tHISTOGRAM\020\006\022\010\n\004OHLC\020\007\022\013\n\007SCATTER\020\010\022\010\n"
    "\004STEP\020\t\022\r\n\tERROR_BAR\020\n\022\013\n\007TREEMAP\020\013\"\322\001\n\n"
    "SourceType\022\005\n\001X\020\000\022\005\n\001Y\020\001\022\005\n\001Z\020\002\022\t\n\005X_LOW"
    "\020\003\022\n\n\006X_HIGH\020\004\022\t\n\005Y_LOW\020\005\022\n\n\006Y_HIGH\020\006\022\010\n"
    "\004TIME\020\007\022\010\n\004OPEN\020\010\022\010\n\004HIGH\020\t\022\007\n\003LOW\020\n\022\t\n\005"
    "CLOSE\020\013\022\t\n\005SHAPE\020\014\022\010\n\004SIZE\020\r\022\t\n\005LABEL\020\016\022"
    "\t\n\005COLOR\020\017\022\n\n\006PARENT\020\020\022\016\n\nHOVER_TEXT\020\021\022\010"
    "\n\004TEXT\020\022B\010\n\006_titleJ\004\010\013\020\014J\004\010\014\020\r2\262\r\n\016Conso"
    "leService\022\230\001\n\017GetConsoleTypes\022@.io.deeph"
    "aven.proto.backplane.script.grpc.GetCons"
    "oleTypesRequest\032A.io.deephaven.proto.bac"
    "kplane.script.grpc.GetConsoleTypesRespon"
    "se\"\000\022\217\001\n\014StartConsole\022=.io.deephaven.pro"
    "to.backplane.script.grpc.StartConsoleReq"
    "uest\032>.io.deephaven.proto.backplane.scri"
    "pt.grpc.StartConsoleResponse\"\000\022\214\001\n\013GetHe"
    "apInfo\022<.io.deephaven.proto.backplane.sc"
    "ript.grpc.GetHeapInfoRequest\032=.io.deepha"
    "ven.proto.backplane.script.grpc.GetHeapI"
    "nfoResponse\"\000\022\226\001\n\017SubscribeToLogs\022@.io.d"
    "eephaven.proto.backplane.script.grpc.Log"
    "SubscriptionRequest\032=.io.deephaven.proto"
    ".backplane.script.grpc.LogSubscriptionDa"
    "ta\"\0000\001\022\225\001\n\016ExecuteCommand\022\?.io.deephaven"
    ".proto.backplane.script.grpc.ExecuteComm"
    "andRequest\032@.io.deephaven.proto.backplan"
    "e.script.grpc.ExecuteCommandResponse\"\000\022\222"
    "\001\n\rCancelCommand\022>.io.deephaven.proto.ba"
    "ckplane.script.grpc.CancelCommandRequest"
    "\032\?.io.deephaven.proto.backplane.script.g"
    "rpc.CancelCommandResponse\"\000\022\244\001\n\023BindTabl"
    "eToVariable\022D.io.deephaven.proto.backpla"
    "ne.script.grpc.BindTableToVariableReques"
    "t\032E.io.deephaven.proto.backplane.script."
    "grpc.BindTableToVariableResponse\"\000\022\231\001\n\022A"
    "utoCompleteStream\022=.io.deephaven.proto.b"
    "ackplane.script.grpc.AutoCompleteRequest"
    "\032>.io.deephaven.proto.backplane.script.g"
    "rpc.AutoCompleteResponse\"\000(\0010\001\022\241\001\n\022Cance"
    "lAutoComplete\022C.io.deephaven.proto.backp"
    "lane.script.grpc.CancelAutoCompleteReque"
    "st\032D.io.deephaven.proto.backplane.script"
    ".grpc.CancelAutoCompleteResponse\"\000\022\233\001\n\026O"
    "penAutoCompleteStream\022=.io.deephaven.pro"
    "to.backplane.script.grpc.AutoCompleteReq"
    "uest\032>.io.deephaven.proto.backplane.scri"
    "pt.grpc.AutoCompleteResponse\"\0000\001\022\230\001\n\026Nex"
    "tAutoCompleteStream\022=.io.deephaven.proto"
    ".backplane.script.grpc.AutoCompleteReque"
    "st\032=.io.deephaven.proto.backplane.script"
    ".grpc.BrowserNextResponse\"\000BCH\001P\001Z=githu"
    "b.com/deephaven/deephaven-core/go/intern"
    "al/proto/consoleb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2fconsole_2eproto_deps[2] =
    {
        &::descriptor_table_deephaven_2fproto_2fapplication_2eproto,
        &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::absl::once_flag descriptor_table_deephaven_2fproto_2fconsole_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2fconsole_2eproto = {
    false,
    false,
    15824,
    descriptor_table_protodef_deephaven_2fproto_2fconsole_2eproto,
    "deephaven/proto/console.proto",
    &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
    descriptor_table_deephaven_2fproto_2fconsole_2eproto_deps,
    2,
    60,
    schemas,
    file_default_instances,
    TableStruct_deephaven_2fproto_2fconsole_2eproto::offsets,
    file_level_metadata_deephaven_2fproto_2fconsole_2eproto,
    file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2fconsole_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter() {
  return &descriptor_table_deephaven_2fproto_2fconsole_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2fconsole_2eproto(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace script {
namespace grpc {
const ::google::protobuf::EnumDescriptor* Diagnostic_DiagnosticSeverity_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Diagnostic_DiagnosticSeverity_internal_data_[] = {
    327680u, 0u, };
bool Diagnostic_DiagnosticSeverity_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Diagnostic_DiagnosticSeverity Diagnostic::NOT_SET_SEVERITY;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::ERROR;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::WARNING;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::INFORMATION;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::HINT;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::DiagnosticSeverity_MIN;
constexpr Diagnostic_DiagnosticSeverity Diagnostic::DiagnosticSeverity_MAX;
constexpr int Diagnostic::DiagnosticSeverity_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Diagnostic_DiagnosticTag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Diagnostic_DiagnosticTag_internal_data_[] = {
    196608u, 0u, };
bool Diagnostic_DiagnosticTag_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Diagnostic_DiagnosticTag Diagnostic::NOT_SET_TAG;
constexpr Diagnostic_DiagnosticTag Diagnostic::UNNECESSARY;
constexpr Diagnostic_DiagnosticTag Diagnostic::DEPRECATED;
constexpr Diagnostic_DiagnosticTag Diagnostic::DiagnosticTag_MIN;
constexpr Diagnostic_DiagnosticTag Diagnostic::DiagnosticTag_MAX;
constexpr int Diagnostic::DiagnosticTag_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FigureDescriptor_ChartDescriptor_ChartType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t FigureDescriptor_ChartDescriptor_ChartType_internal_data_[] = {
    458752u, 0u, };
bool FigureDescriptor_ChartDescriptor_ChartType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::XY;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::PIE;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::OHLC;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::CATEGORY;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::XYZ;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::CATEGORY_3D;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::TREEMAP;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::ChartType_MIN;
constexpr FigureDescriptor_ChartDescriptor_ChartType FigureDescriptor_ChartDescriptor::ChartType_MAX;
constexpr int FigureDescriptor_ChartDescriptor::ChartType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisFormatType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t FigureDescriptor_AxisDescriptor_AxisFormatType_internal_data_[] = {
    131072u, 0u, };
bool FigureDescriptor_AxisDescriptor_AxisFormatType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::CATEGORY;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::NUMBER;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::AxisFormatType_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisFormatType FigureDescriptor_AxisDescriptor::AxisFormatType_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisFormatType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t FigureDescriptor_AxisDescriptor_AxisType_internal_data_[] = {
    393216u, 0u, };
bool FigureDescriptor_AxisDescriptor_AxisType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::X;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::Y;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::SHAPE;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::SIZE;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::LABEL;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::COLOR;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::AxisType_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisType FigureDescriptor_AxisDescriptor::AxisType_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FigureDescriptor_AxisDescriptor_AxisPosition_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t FigureDescriptor_AxisDescriptor_AxisPosition_internal_data_[] = {
    327680u, 0u, };
bool FigureDescriptor_AxisDescriptor_AxisPosition_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::TOP;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::BOTTOM;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::LEFT;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::RIGHT;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::NONE;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::AxisPosition_MIN;
constexpr FigureDescriptor_AxisDescriptor_AxisPosition FigureDescriptor_AxisDescriptor::AxisPosition_MAX;
constexpr int FigureDescriptor_AxisDescriptor::AxisPosition_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_internal_data_[] = {
    458752u, 0u, };
bool FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::SUNDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::MONDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::TUESDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::WEDNESDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::THURSDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::FRIDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::SATURDAY;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_MIN;
constexpr FigureDescriptor_BusinessCalendarDescriptor_DayOfWeek FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_MAX;
constexpr int FigureDescriptor_BusinessCalendarDescriptor::DayOfWeek_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FigureDescriptor_SeriesPlotStyle_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t FigureDescriptor_SeriesPlotStyle_internal_data_[] = {
    786432u, 0u, };
bool FigureDescriptor_SeriesPlotStyle_IsValid(int value) {
  return 0 <= value && value <= 11;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STACKED_BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::LINE;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::AREA;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STACKED_AREA;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::PIE;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::HISTOGRAM;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::OHLC;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SCATTER;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::STEP;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::ERROR_BAR;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::TREEMAP;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SeriesPlotStyle_MIN;
constexpr FigureDescriptor_SeriesPlotStyle FigureDescriptor::SeriesPlotStyle_MAX;
constexpr int FigureDescriptor::SeriesPlotStyle_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FigureDescriptor_SourceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2fconsole_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2fconsole_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t FigureDescriptor_SourceType_internal_data_[] = {
    1245184u, 0u, };
bool FigureDescriptor_SourceType_IsValid(int value) {
  return 0 <= value && value <= 18;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FigureDescriptor_SourceType FigureDescriptor::X;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y;
constexpr FigureDescriptor_SourceType FigureDescriptor::Z;
constexpr FigureDescriptor_SourceType FigureDescriptor::X_LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::X_HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y_LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::Y_HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::TIME;
constexpr FigureDescriptor_SourceType FigureDescriptor::OPEN;
constexpr FigureDescriptor_SourceType FigureDescriptor::HIGH;
constexpr FigureDescriptor_SourceType FigureDescriptor::LOW;
constexpr FigureDescriptor_SourceType FigureDescriptor::CLOSE;
constexpr FigureDescriptor_SourceType FigureDescriptor::SHAPE;
constexpr FigureDescriptor_SourceType FigureDescriptor::SIZE;
constexpr FigureDescriptor_SourceType FigureDescriptor::LABEL;
constexpr FigureDescriptor_SourceType FigureDescriptor::COLOR;
constexpr FigureDescriptor_SourceType FigureDescriptor::PARENT;
constexpr FigureDescriptor_SourceType FigureDescriptor::HOVER_TEXT;
constexpr FigureDescriptor_SourceType FigureDescriptor::TEXT;
constexpr FigureDescriptor_SourceType FigureDescriptor::SourceType_MIN;
constexpr FigureDescriptor_SourceType FigureDescriptor::SourceType_MAX;
constexpr int FigureDescriptor::SourceType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class GetConsoleTypesRequest::_Internal {
 public:
};

GetConsoleTypesRequest::GetConsoleTypesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}
GetConsoleTypesRequest::GetConsoleTypesRequest(
    ::google::protobuf::Arena* arena,
    const GetConsoleTypesRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetConsoleTypesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesRequest)
}









::google::protobuf::Metadata GetConsoleTypesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[0]);
}
// ===================================================================

class GetConsoleTypesResponse::_Internal {
 public:
};

GetConsoleTypesResponse::GetConsoleTypesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetConsoleTypesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : console_types_{visibility, arena, from.console_types_},
        _cached_size_{0} {}

GetConsoleTypesResponse::GetConsoleTypesResponse(
    ::google::protobuf::Arena* arena,
    const GetConsoleTypesResponse& from)
    : ::google::protobuf::Message(arena) {
  GetConsoleTypesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetConsoleTypesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : console_types_{visibility, arena},
        _cached_size_{0} {}

inline void GetConsoleTypesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetConsoleTypesResponse::~GetConsoleTypesResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetConsoleTypesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetConsoleTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.console_types_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetConsoleTypesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 86, 2> GetConsoleTypesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetConsoleTypesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string console_types = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsoleTypesResponse, _impl_.console_types_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string console_types = 1;
    {PROTOBUF_FIELD_OFFSET(GetConsoleTypesResponse, _impl_.console_types_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\100\15\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse"
    "console_types"
  }},
};

::uint8_t* GetConsoleTypesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string console_types = 1;
  for (int i = 0, n = this->_internal_console_types_size(); i < n; ++i) {
    const auto& s = this->_internal_console_types().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse.console_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  return target;
}

::size_t GetConsoleTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string console_types = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_console_types().size());
  for (int i = 0, n = _internal_console_types().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_console_types().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetConsoleTypesResponse::_class_data_ = {
    GetConsoleTypesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetConsoleTypesResponse::GetClassData() const {
  return &_class_data_;
}

void GetConsoleTypesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetConsoleTypesResponse*>(&to_msg);
  auto& from = static_cast<const GetConsoleTypesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_console_types()->MergeFrom(from._internal_console_types());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsoleTypesResponse::CopyFrom(const GetConsoleTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetConsoleTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetConsoleTypesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetConsoleTypesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetConsoleTypesResponse::InternalSwap(GetConsoleTypesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.console_types_.InternalSwap(&other->_impl_.console_types_);
}

::google::protobuf::Metadata GetConsoleTypesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[1]);
}
// ===================================================================

class StartConsoleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StartConsoleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartConsoleRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const StartConsoleRequest* msg);
  static void set_has_result_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& StartConsoleRequest::_Internal::result_id(const StartConsoleRequest* msg) {
  return *msg->_impl_.result_id_;
}
void StartConsoleRequest::clear_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StartConsoleRequest::StartConsoleRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}
inline PROTOBUF_NDEBUG_INLINE StartConsoleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        session_type_(arena, from.session_type_) {}

StartConsoleRequest::StartConsoleRequest(
    ::google::protobuf::Arena* arena,
    const StartConsoleRequest& from)
    : ::google::protobuf::Message(arena) {
  StartConsoleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
}
inline PROTOBUF_NDEBUG_INLINE StartConsoleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        session_type_(arena) {}

inline void StartConsoleRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_id_ = {};
}
StartConsoleRequest::~StartConsoleRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StartConsoleRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.session_type_.Destroy();
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StartConsoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_id_ != nullptr);
    _impl_.result_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StartConsoleRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 81, 2> StartConsoleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StartConsoleRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StartConsoleRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string session_type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StartConsoleRequest, _impl_.session_type_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StartConsoleRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(StartConsoleRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string session_type = 2;
    {PROTOBUF_FIELD_OFFSET(StartConsoleRequest, _impl_.session_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\74\0\14\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest"
    "session_type"
  }},
};

::uint8_t* StartConsoleRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // string session_type = 2;
  if (!this->_internal_session_type().empty()) {
    const std::string& _s = this->_internal_session_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.StartConsoleRequest.session_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  return target;
}

::size_t StartConsoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_type = 2;
  if (!this->_internal_session_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_type());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StartConsoleRequest::_class_data_ = {
    StartConsoleRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StartConsoleRequest::GetClassData() const {
  return &_class_data_;
}

void StartConsoleRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StartConsoleRequest*>(&to_msg);
  auto& from = static_cast<const StartConsoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_type().empty()) {
    _this->_internal_set_session_type(from._internal_session_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StartConsoleRequest::CopyFrom(const StartConsoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StartConsoleRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StartConsoleRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StartConsoleRequest::InternalSwap(StartConsoleRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_type_, &other->_impl_.session_type_, arena);
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::google::protobuf::Metadata StartConsoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[2]);
}
// ===================================================================

class StartConsoleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StartConsoleResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartConsoleResponse, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const StartConsoleResponse* msg);
  static void set_has_result_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& StartConsoleResponse::_Internal::result_id(const StartConsoleResponse* msg) {
  return *msg->_impl_.result_id_;
}
void StartConsoleResponse::clear_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StartConsoleResponse::StartConsoleResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}
inline PROTOBUF_NDEBUG_INLINE StartConsoleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StartConsoleResponse::StartConsoleResponse(
    ::google::protobuf::Arena* arena,
    const StartConsoleResponse& from)
    : ::google::protobuf::Message(arena) {
  StartConsoleResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
}
inline PROTOBUF_NDEBUG_INLINE StartConsoleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StartConsoleResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_id_ = {};
}
StartConsoleResponse::~StartConsoleResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StartConsoleResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StartConsoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_id_ != nullptr);
    _impl_.result_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StartConsoleResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StartConsoleResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StartConsoleResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StartConsoleResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StartConsoleResponse, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(StartConsoleResponse, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

::uint8_t* StartConsoleResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  return target;
}

::size_t StartConsoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StartConsoleResponse::_class_data_ = {
    StartConsoleResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StartConsoleResponse::GetClassData() const {
  return &_class_data_;
}

void StartConsoleResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StartConsoleResponse*>(&to_msg);
  auto& from = static_cast<const StartConsoleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StartConsoleResponse::CopyFrom(const StartConsoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.StartConsoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StartConsoleResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StartConsoleResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StartConsoleResponse::InternalSwap(StartConsoleResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::google::protobuf::Metadata StartConsoleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[3]);
}
// ===================================================================

class GetHeapInfoRequest::_Internal {
 public:
};

GetHeapInfoRequest::GetHeapInfoRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoRequest)
}
GetHeapInfoRequest::GetHeapInfoRequest(
    ::google::protobuf::Arena* arena,
    const GetHeapInfoRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetHeapInfoRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoRequest)
}









::google::protobuf::Metadata GetHeapInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[4]);
}
// ===================================================================

class GetHeapInfoResponse::_Internal {
 public:
};

GetHeapInfoResponse::GetHeapInfoResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
}
GetHeapInfoResponse::GetHeapInfoResponse(
    ::google::protobuf::Arena* arena, const GetHeapInfoResponse& from)
    : GetHeapInfoResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GetHeapInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetHeapInfoResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_memory_),
           0,
           offsetof(Impl_, free_memory_) -
               offsetof(Impl_, max_memory_) +
               sizeof(Impl_::free_memory_));
}
GetHeapInfoResponse::~GetHeapInfoResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetHeapInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetHeapInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_memory_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.free_memory_) -
      reinterpret_cast<char*>(&_impl_.max_memory_)) + sizeof(_impl_.free_memory_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetHeapInfoResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GetHeapInfoResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetHeapInfoResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 max_memory = 1 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetHeapInfoResponse, _impl_.max_memory_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.max_memory_)}},
    // int64 total_memory = 2 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetHeapInfoResponse, _impl_.total_memory_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.total_memory_)}},
    // int64 free_memory = 3 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetHeapInfoResponse, _impl_.free_memory_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.free_memory_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 max_memory = 1 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.max_memory_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 total_memory = 2 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.total_memory_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 free_memory = 3 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.free_memory_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GetHeapInfoResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 max_memory = 1 [jstype = JS_STRING];
  if (this->_internal_max_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_max_memory(), target);
  }

  // int64 total_memory = 2 [jstype = JS_STRING];
  if (this->_internal_total_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_total_memory(), target);
  }

  // int64 free_memory = 3 [jstype = JS_STRING];
  if (this->_internal_free_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_free_memory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  return target;
}

::size_t GetHeapInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_memory = 1 [jstype = JS_STRING];
  if (this->_internal_max_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_max_memory());
  }

  // int64 total_memory = 2 [jstype = JS_STRING];
  if (this->_internal_total_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total_memory());
  }

  // int64 free_memory = 3 [jstype = JS_STRING];
  if (this->_internal_free_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_free_memory());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetHeapInfoResponse::_class_data_ = {
    GetHeapInfoResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetHeapInfoResponse::GetClassData() const {
  return &_class_data_;
}

void GetHeapInfoResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetHeapInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetHeapInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_memory() != 0) {
    _this->_internal_set_max_memory(from._internal_max_memory());
  }
  if (from._internal_total_memory() != 0) {
    _this->_internal_set_total_memory(from._internal_total_memory());
  }
  if (from._internal_free_memory() != 0) {
    _this->_internal_set_free_memory(from._internal_free_memory());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHeapInfoResponse::CopyFrom(const GetHeapInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetHeapInfoResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetHeapInfoResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetHeapInfoResponse::InternalSwap(GetHeapInfoResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.free_memory_)
      + sizeof(GetHeapInfoResponse::_impl_.free_memory_)
      - PROTOBUF_FIELD_OFFSET(GetHeapInfoResponse, _impl_.max_memory_)>(
          reinterpret_cast<char*>(&_impl_.max_memory_),
          reinterpret_cast<char*>(&other->_impl_.max_memory_));
}

::google::protobuf::Metadata GetHeapInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[5]);
}
// ===================================================================

class LogSubscriptionRequest::_Internal {
 public:
};

LogSubscriptionRequest::LogSubscriptionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}
inline PROTOBUF_NDEBUG_INLINE LogSubscriptionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : levels_{visibility, arena, from.levels_},
        _cached_size_{0} {}

LogSubscriptionRequest::LogSubscriptionRequest(
    ::google::protobuf::Arena* arena,
    const LogSubscriptionRequest& from)
    : ::google::protobuf::Message(arena) {
  LogSubscriptionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.last_seen_log_timestamp_ = from._impl_.last_seen_log_timestamp_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
}
inline PROTOBUF_NDEBUG_INLINE LogSubscriptionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : levels_{visibility, arena},
        _cached_size_{0} {}

inline void LogSubscriptionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.last_seen_log_timestamp_ = {};
}
LogSubscriptionRequest::~LogSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogSubscriptionRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.levels_.Clear();
  _impl_.last_seen_log_timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogSubscriptionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 78, 2> LogSubscriptionRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogSubscriptionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string levels = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LogSubscriptionRequest, _impl_.levels_)}},
    // int64 last_seen_log_timestamp = 1 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogSubscriptionRequest, _impl_.last_seen_log_timestamp_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LogSubscriptionRequest, _impl_.last_seen_log_timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 last_seen_log_timestamp = 1 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(LogSubscriptionRequest, _impl_.last_seen_log_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated string levels = 2;
    {PROTOBUF_FIELD_OFFSET(LogSubscriptionRequest, _impl_.levels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\77\0\6\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest"
    "levels"
  }},
};

::uint8_t* LogSubscriptionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 last_seen_log_timestamp = 1 [jstype = JS_STRING];
  if (this->_internal_last_seen_log_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_last_seen_log_timestamp(), target);
  }

  // repeated string levels = 2;
  for (int i = 0, n = this->_internal_levels_size(); i < n; ++i) {
    const auto& s = this->_internal_levels().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest.levels");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  return target;
}

::size_t LogSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string levels = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_levels().size());
  for (int i = 0, n = _internal_levels().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_levels().Get(i));
  }
  // int64 last_seen_log_timestamp = 1 [jstype = JS_STRING];
  if (this->_internal_last_seen_log_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_seen_log_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogSubscriptionRequest::_class_data_ = {
    LogSubscriptionRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogSubscriptionRequest::GetClassData() const {
  return &_class_data_;
}

void LogSubscriptionRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogSubscriptionRequest*>(&to_msg);
  auto& from = static_cast<const LogSubscriptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_levels()->MergeFrom(from._internal_levels());
  if (from._internal_last_seen_log_timestamp() != 0) {
    _this->_internal_set_last_seen_log_timestamp(from._internal_last_seen_log_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogSubscriptionRequest::CopyFrom(const LogSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogSubscriptionRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogSubscriptionRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogSubscriptionRequest::InternalSwap(LogSubscriptionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.levels_.InternalSwap(&other->_impl_.levels_);
        swap(_impl_.last_seen_log_timestamp_, other->_impl_.last_seen_log_timestamp_);
}

::google::protobuf::Metadata LogSubscriptionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[6]);
}
// ===================================================================

class LogSubscriptionData::_Internal {
 public:
};

LogSubscriptionData::LogSubscriptionData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}
inline PROTOBUF_NDEBUG_INLINE LogSubscriptionData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : log_level_(arena, from.log_level_),
        message_(arena, from.message_),
        _cached_size_{0} {}

LogSubscriptionData::LogSubscriptionData(
    ::google::protobuf::Arena* arena,
    const LogSubscriptionData& from)
    : ::google::protobuf::Message(arena) {
  LogSubscriptionData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.micros_ = from._impl_.micros_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
}
inline PROTOBUF_NDEBUG_INLINE LogSubscriptionData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : log_level_(arena),
        message_(arena),
        _cached_size_{0} {}

inline void LogSubscriptionData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.micros_ = {};
}
LogSubscriptionData::~LogSubscriptionData() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogSubscriptionData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.log_level_.Destroy();
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogSubscriptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_level_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.micros_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogSubscriptionData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 85, 2> LogSubscriptionData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogSubscriptionData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 micros = 1 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogSubscriptionData, _impl_.micros_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LogSubscriptionData, _impl_.micros_)}},
    // string log_level = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LogSubscriptionData, _impl_.log_level_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LogSubscriptionData, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 micros = 1 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(LogSubscriptionData, _impl_.micros_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string log_level = 2;
    {PROTOBUF_FIELD_OFFSET(LogSubscriptionData, _impl_.log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(LogSubscriptionData, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\74\0\11\7\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData"
    "log_level"
    "message"
  }},
};

::uint8_t* LogSubscriptionData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 micros = 1 [jstype = JS_STRING];
  if (this->_internal_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_micros(), target);
  }

  // string log_level = 2;
  if (!this->_internal_log_level().empty()) {
    const std::string& _s = this->_internal_log_level();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.log_level");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.LogSubscriptionData.message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  return target;
}

::size_t LogSubscriptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_level = 2;
  if (!this->_internal_log_level().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_log_level());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // int64 micros = 1 [jstype = JS_STRING];
  if (this->_internal_micros() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_micros());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogSubscriptionData::_class_data_ = {
    LogSubscriptionData::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogSubscriptionData::GetClassData() const {
  return &_class_data_;
}

void LogSubscriptionData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogSubscriptionData*>(&to_msg);
  auto& from = static_cast<const LogSubscriptionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log_level().empty()) {
    _this->_internal_set_log_level(from._internal_log_level());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_micros() != 0) {
    _this->_internal_set_micros(from._internal_micros());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogSubscriptionData::CopyFrom(const LogSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.LogSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogSubscriptionData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogSubscriptionData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogSubscriptionData::InternalSwap(LogSubscriptionData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_level_, &other->_impl_.log_level_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.micros_, other->_impl_.micros_);
}

::google::protobuf::Metadata LogSubscriptionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[7]);
}
// ===================================================================

class ExecuteCommandRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecuteCommandRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExecuteCommandRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const ExecuteCommandRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& ExecuteCommandRequest::_Internal::console_id(const ExecuteCommandRequest* msg) {
  return *msg->_impl_.console_id_;
}
void ExecuteCommandRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExecuteCommandRequest::ExecuteCommandRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}
inline PROTOBUF_NDEBUG_INLINE ExecuteCommandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        code_(arena, from.code_) {}

ExecuteCommandRequest::ExecuteCommandRequest(
    ::google::protobuf::Arena* arena,
    const ExecuteCommandRequest& from)
    : ::google::protobuf::Message(arena) {
  ExecuteCommandRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
}
inline PROTOBUF_NDEBUG_INLINE ExecuteCommandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        code_(arena) {}

inline void ExecuteCommandRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.console_id_ = {};
}
ExecuteCommandRequest::~ExecuteCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExecuteCommandRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.code_.Destroy();
  delete _impl_.console_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ExecuteCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.console_id_ != nullptr);
    _impl_.console_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExecuteCommandRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 2, 1, 75, 2> ExecuteCommandRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExecuteCommandRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967290,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExecuteCommandRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExecuteCommandRequest, _impl_.console_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ExecuteCommandRequest, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {PROTOBUF_FIELD_OFFSET(ExecuteCommandRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string code = 3;
    {PROTOBUF_FIELD_OFFSET(ExecuteCommandRequest, _impl_.code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\76\0\4\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest"
    "code"
  }},
};

::uint8_t* ExecuteCommandRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    const std::string& _s = this->_internal_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest.code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  return target;
}

::size_t ExecuteCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_code());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ExecuteCommandRequest::_class_data_ = {
    ExecuteCommandRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ExecuteCommandRequest::GetClassData() const {
  return &_class_data_;
}

void ExecuteCommandRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ExecuteCommandRequest*>(&to_msg);
  auto& from = static_cast<const ExecuteCommandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteCommandRequest::CopyFrom(const ExecuteCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExecuteCommandRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ExecuteCommandRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ExecuteCommandRequest::InternalSwap(ExecuteCommandRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_, &other->_impl_.code_, arena);
  swap(_impl_.console_id_, other->_impl_.console_id_);
}

::google::protobuf::Metadata ExecuteCommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[8]);
}
// ===================================================================

class ExecuteCommandResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecuteCommandResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExecuteCommandResponse, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate& changes(const ExecuteCommandResponse* msg);
  static void set_has_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate& ExecuteCommandResponse::_Internal::changes(const ExecuteCommandResponse* msg) {
  return *msg->_impl_.changes_;
}
void ExecuteCommandResponse::clear_changes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.changes_ != nullptr) _impl_.changes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExecuteCommandResponse::ExecuteCommandResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}
inline PROTOBUF_NDEBUG_INLINE ExecuteCommandResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        error_message_(arena, from.error_message_) {}

ExecuteCommandResponse::ExecuteCommandResponse(
    ::google::protobuf::Arena* arena,
    const ExecuteCommandResponse& from)
    : ::google::protobuf::Message(arena) {
  ExecuteCommandResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.changes_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>(arena, *from._impl_.changes_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
}
inline PROTOBUF_NDEBUG_INLINE ExecuteCommandResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        error_message_(arena) {}

inline void ExecuteCommandResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.changes_ = {};
}
ExecuteCommandResponse::~ExecuteCommandResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExecuteCommandResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.error_message_.Destroy();
  delete _impl_.changes_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ExecuteCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.changes_ != nullptr);
    _impl_.changes_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExecuteCommandResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 85, 2> ExecuteCommandResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExecuteCommandResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExecuteCommandResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.FieldsChangeUpdate changes = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ExecuteCommandResponse, _impl_.changes_)}},
    // string error_message = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ExecuteCommandResponse, _impl_.error_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string error_message = 1;
    {PROTOBUF_FIELD_OFFSET(ExecuteCommandResponse, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.FieldsChangeUpdate changes = 2;
    {PROTOBUF_FIELD_OFFSET(ExecuteCommandResponse, _impl_.changes_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate>()},
  }}, {{
    "\77\15\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse"
    "error_message"
  }},
};

::uint8_t* ExecuteCommandResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse.error_message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.FieldsChangeUpdate changes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::changes(this),
        _Internal::changes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  return target;
}

::size_t ExecuteCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // .io.deephaven.proto.backplane.grpc.FieldsChangeUpdate changes = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.changes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ExecuteCommandResponse::_class_data_ = {
    ExecuteCommandResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ExecuteCommandResponse::GetClassData() const {
  return &_class_data_;
}

void ExecuteCommandResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ExecuteCommandResponse*>(&to_msg);
  auto& from = static_cast<const ExecuteCommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_changes()->::io::deephaven::proto::backplane::grpc::FieldsChangeUpdate::MergeFrom(
        from._internal_changes());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteCommandResponse::CopyFrom(const ExecuteCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ExecuteCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExecuteCommandResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ExecuteCommandResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ExecuteCommandResponse::InternalSwap(ExecuteCommandResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  swap(_impl_.changes_, other->_impl_.changes_);
}

::google::protobuf::Metadata ExecuteCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[9]);
}
// ===================================================================

class BindTableToVariableRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BindTableToVariableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const BindTableToVariableRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::grpc::Ticket& table_id(const BindTableToVariableRequest* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& BindTableToVariableRequest::_Internal::console_id(const BindTableToVariableRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& BindTableToVariableRequest::_Internal::table_id(const BindTableToVariableRequest* msg) {
  return *msg->_impl_.table_id_;
}
void BindTableToVariableRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BindTableToVariableRequest::clear_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
BindTableToVariableRequest::BindTableToVariableRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}
inline PROTOBUF_NDEBUG_INLINE BindTableToVariableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        variable_name_(arena, from.variable_name_) {}

BindTableToVariableRequest::BindTableToVariableRequest(
    ::google::protobuf::Arena* arena,
    const BindTableToVariableRequest& from)
    : ::google::protobuf::Message(arena) {
  BindTableToVariableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.table_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.table_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
}
inline PROTOBUF_NDEBUG_INLINE BindTableToVariableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        variable_name_(arena) {}

inline void BindTableToVariableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, table_id_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::table_id_));
}
BindTableToVariableRequest::~BindTableToVariableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BindTableToVariableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.variable_name_.Destroy();
  delete _impl_.console_id_;
  delete _impl_.table_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BindTableToVariableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.console_id_ != nullptr);
      _impl_.console_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BindTableToVariableRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 89, 2> BindTableToVariableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967282,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BindTableToVariableRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.table_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.console_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string variable_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.variable_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string variable_name = 3;
    {PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.variable_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
    {PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.table_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\103\0\15\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest"
    "variable_name"
  }},
};

::uint8_t* BindTableToVariableRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // string variable_name = 3;
  if (!this->_internal_variable_name().empty()) {
    const std::string& _s = this->_internal_variable_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest.variable_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  return target;
}

::size_t BindTableToVariableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_name = 3;
  if (!this->_internal_variable_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_variable_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
    }

    // .io.deephaven.proto.backplane.grpc.Ticket table_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.table_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BindTableToVariableRequest::_class_data_ = {
    BindTableToVariableRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BindTableToVariableRequest::GetClassData() const {
  return &_class_data_;
}

void BindTableToVariableRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BindTableToVariableRequest*>(&to_msg);
  auto& from = static_cast<const BindTableToVariableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_variable_name().empty()) {
    _this->_internal_set_variable_name(from._internal_variable_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_console_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_table_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BindTableToVariableRequest::CopyFrom(const BindTableToVariableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.BindTableToVariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BindTableToVariableRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BindTableToVariableRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BindTableToVariableRequest::InternalSwap(BindTableToVariableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.variable_name_, &other->_impl_.variable_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.table_id_)
      + sizeof(BindTableToVariableRequest::_impl_.table_id_)
      - PROTOBUF_FIELD_OFFSET(BindTableToVariableRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::google::protobuf::Metadata BindTableToVariableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[10]);
}
// ===================================================================

class BindTableToVariableResponse::_Internal {
 public:
};

BindTableToVariableResponse::BindTableToVariableResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}
BindTableToVariableResponse::BindTableToVariableResponse(
    ::google::protobuf::Arena* arena,
    const BindTableToVariableResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  BindTableToVariableResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BindTableToVariableResponse)
}









::google::protobuf::Metadata BindTableToVariableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[11]);
}
// ===================================================================

class CancelCommandRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CancelCommandRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CancelCommandRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::grpc::Ticket& command_id(const CancelCommandRequest* msg);
  static void set_has_command_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& CancelCommandRequest::_Internal::console_id(const CancelCommandRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& CancelCommandRequest::_Internal::command_id(const CancelCommandRequest* msg) {
  return *msg->_impl_.command_id_;
}
void CancelCommandRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CancelCommandRequest::clear_command_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.command_id_ != nullptr) _impl_.command_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CancelCommandRequest::CancelCommandRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}
inline PROTOBUF_NDEBUG_INLINE CancelCommandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CancelCommandRequest::CancelCommandRequest(
    ::google::protobuf::Arena* arena,
    const CancelCommandRequest& from)
    : ::google::protobuf::Message(arena) {
  CancelCommandRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.command_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.command_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
}
inline PROTOBUF_NDEBUG_INLINE CancelCommandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CancelCommandRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, command_id_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::command_id_));
}
CancelCommandRequest::~CancelCommandRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CancelCommandRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.console_id_;
  delete _impl_.command_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CancelCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.console_id_ != nullptr);
      _impl_.console_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.command_id_ != nullptr);
      _impl_.command_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CancelCommandRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CancelCommandRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CancelCommandRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.command_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.console_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
    {PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.command_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

::uint8_t* CancelCommandRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::command_id(this),
        _Internal::command_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  return target;
}

::size_t CancelCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
    }

    // .io.deephaven.proto.backplane.grpc.Ticket command_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CancelCommandRequest::_class_data_ = {
    CancelCommandRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CancelCommandRequest::GetClassData() const {
  return &_class_data_;
}

void CancelCommandRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CancelCommandRequest*>(&to_msg);
  auto& from = static_cast<const CancelCommandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_console_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_command_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_command_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CancelCommandRequest::CopyFrom(const CancelCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CancelCommandRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CancelCommandRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CancelCommandRequest::InternalSwap(CancelCommandRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.command_id_)
      + sizeof(CancelCommandRequest::_impl_.command_id_)
      - PROTOBUF_FIELD_OFFSET(CancelCommandRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::google::protobuf::Metadata CancelCommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[12]);
}
// ===================================================================

class CancelCommandResponse::_Internal {
 public:
};

CancelCommandResponse::CancelCommandResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}
CancelCommandResponse::CancelCommandResponse(
    ::google::protobuf::Arena* arena,
    const CancelCommandResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  CancelCommandResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelCommandResponse)
}









::google::protobuf::Metadata CancelCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[13]);
}
// ===================================================================

class CancelAutoCompleteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CancelAutoCompleteRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CancelAutoCompleteRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& CancelAutoCompleteRequest::_Internal::console_id(const CancelAutoCompleteRequest* msg) {
  return *msg->_impl_.console_id_;
}
void CancelAutoCompleteRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CancelAutoCompleteRequest::CancelAutoCompleteRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
}
inline PROTOBUF_NDEBUG_INLINE CancelAutoCompleteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CancelAutoCompleteRequest::CancelAutoCompleteRequest(
    ::google::protobuf::Arena* arena,
    const CancelAutoCompleteRequest& from)
    : ::google::protobuf::Message(arena) {
  CancelAutoCompleteRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.request_id_ = from._impl_.request_id_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
}
inline PROTOBUF_NDEBUG_INLINE CancelAutoCompleteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CancelAutoCompleteRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, request_id_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::request_id_));
}
CancelAutoCompleteRequest::~CancelAutoCompleteRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CancelAutoCompleteRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.console_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CancelAutoCompleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.console_id_ != nullptr);
    _impl_.console_id_->Clear();
  }
  _impl_.request_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CancelAutoCompleteRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> CancelAutoCompleteRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CancelAutoCompleteRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 request_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CancelAutoCompleteRequest, _impl_.request_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.request_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.console_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
    {PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 request_id = 2;
    {PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.request_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

::uint8_t* CancelAutoCompleteRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  return target;
}

::size_t CancelAutoCompleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
  }

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CancelAutoCompleteRequest::_class_data_ = {
    CancelAutoCompleteRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CancelAutoCompleteRequest::GetClassData() const {
  return &_class_data_;
}

void CancelAutoCompleteRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CancelAutoCompleteRequest*>(&to_msg);
  auto& from = static_cast<const CancelAutoCompleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CancelAutoCompleteRequest::CopyFrom(const CancelAutoCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CancelAutoCompleteRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CancelAutoCompleteRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CancelAutoCompleteRequest::InternalSwap(CancelAutoCompleteRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.request_id_)
      + sizeof(CancelAutoCompleteRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(CancelAutoCompleteRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::google::protobuf::Metadata CancelAutoCompleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[14]);
}
// ===================================================================

class CancelAutoCompleteResponse::_Internal {
 public:
};

CancelAutoCompleteResponse::CancelAutoCompleteResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteResponse)
}
CancelAutoCompleteResponse::CancelAutoCompleteResponse(
    ::google::protobuf::Arena* arena,
    const CancelAutoCompleteResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  CancelAutoCompleteResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CancelAutoCompleteResponse)
}









::google::protobuf::Metadata CancelAutoCompleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[15]);
}
// ===================================================================

class AutoCompleteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoCompleteRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteRequest, _impl_._oneof_case_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const AutoCompleteRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest& open_document(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest& change_document(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest& get_completion_items(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest& get_signature_help(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetHoverRequest& get_hover(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest& get_diagnostic(const AutoCompleteRequest* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest& close_document(const AutoCompleteRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket& AutoCompleteRequest::_Internal::console_id(const AutoCompleteRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest& AutoCompleteRequest::_Internal::open_document(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.open_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest& AutoCompleteRequest::_Internal::change_document(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.change_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest& AutoCompleteRequest::_Internal::get_completion_items(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_completion_items_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest& AutoCompleteRequest::_Internal::get_signature_help(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_signature_help_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetHoverRequest& AutoCompleteRequest::_Internal::get_hover(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_hover_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest& AutoCompleteRequest::_Internal::get_diagnostic(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.get_diagnostic_;
}
const ::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest& AutoCompleteRequest::_Internal::close_document(const AutoCompleteRequest* msg) {
  return *msg->_impl_.request_.close_document_;
}
void AutoCompleteRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AutoCompleteRequest::set_allocated_open_document(::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest* open_document) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (open_document) {
    ::google::protobuf::Arena* submessage_arena = open_document->GetArena();
    if (message_arena != submessage_arena) {
      open_document = ::google::protobuf::internal::GetOwnedMessage(message_arena, open_document, submessage_arena);
    }
    set_has_open_document();
    _impl_.request_.open_document_ = open_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.open_document)
}
void AutoCompleteRequest::set_allocated_change_document(::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest* change_document) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (change_document) {
    ::google::protobuf::Arena* submessage_arena = change_document->GetArena();
    if (message_arena != submessage_arena) {
      change_document = ::google::protobuf::internal::GetOwnedMessage(message_arena, change_document, submessage_arena);
    }
    set_has_change_document();
    _impl_.request_.change_document_ = change_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.change_document)
}
void AutoCompleteRequest::set_allocated_get_completion_items(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest* get_completion_items) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (get_completion_items) {
    ::google::protobuf::Arena* submessage_arena = get_completion_items->GetArena();
    if (message_arena != submessage_arena) {
      get_completion_items = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_completion_items, submessage_arena);
    }
    set_has_get_completion_items();
    _impl_.request_.get_completion_items_ = get_completion_items;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_completion_items)
}
void AutoCompleteRequest::set_allocated_get_signature_help(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest* get_signature_help) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (get_signature_help) {
    ::google::protobuf::Arena* submessage_arena = get_signature_help->GetArena();
    if (message_arena != submessage_arena) {
      get_signature_help = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_signature_help, submessage_arena);
    }
    set_has_get_signature_help();
    _impl_.request_.get_signature_help_ = get_signature_help;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_signature_help)
}
void AutoCompleteRequest::set_allocated_get_hover(::io::deephaven::proto::backplane::script::grpc::GetHoverRequest* get_hover) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (get_hover) {
    ::google::protobuf::Arena* submessage_arena = get_hover->GetArena();
    if (message_arena != submessage_arena) {
      get_hover = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_hover, submessage_arena);
    }
    set_has_get_hover();
    _impl_.request_.get_hover_ = get_hover;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_hover)
}
void AutoCompleteRequest::set_allocated_get_diagnostic(::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest* get_diagnostic) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (get_diagnostic) {
    ::google::protobuf::Arena* submessage_arena = get_diagnostic->GetArena();
    if (message_arena != submessage_arena) {
      get_diagnostic = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_diagnostic, submessage_arena);
    }
    set_has_get_diagnostic();
    _impl_.request_.get_diagnostic_ = get_diagnostic;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.get_diagnostic)
}
void AutoCompleteRequest::set_allocated_close_document(::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest* close_document) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (close_document) {
    ::google::protobuf::Arena* submessage_arena = close_document->GetArena();
    if (message_arena != submessage_arena) {
      close_document = ::google::protobuf::internal::GetOwnedMessage(message_arena, close_document, submessage_arena);
    }
    set_has_close_document();
    _impl_.request_.close_document_ = close_document;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest.close_document)
}
AutoCompleteRequest::AutoCompleteRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
}
inline PROTOBUF_NDEBUG_INLINE AutoCompleteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        request_{},
        _oneof_case_{from._oneof_case_[0]} {}

AutoCompleteRequest::AutoCompleteRequest(
    ::google::protobuf::Arena* arena,
    const AutoCompleteRequest& from)
    : ::google::protobuf::Message(arena) {
  AutoCompleteRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.request_id_ = from._impl_.request_id_;
  switch (request_case()) {
    case REQUEST_NOT_SET:
      break;
      case kOpenDocument:
        _impl_.request_.open_document_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest>(arena, *from._impl_.request_.open_document_);
        break;
      case kChangeDocument:
        _impl_.request_.change_document_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest>(arena, *from._impl_.request_.change_document_);
        break;
      case kGetCompletionItems:
        _impl_.request_.get_completion_items_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest>(arena, *from._impl_.request_.get_completion_items_);
        break;
      case kGetSignatureHelp:
        _impl_.request_.get_signature_help_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest>(arena, *from._impl_.request_.get_signature_help_);
        break;
      case kGetHover:
        _impl_.request_.get_hover_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetHoverRequest>(arena, *from._impl_.request_.get_hover_);
        break;
      case kGetDiagnostic:
        _impl_.request_.get_diagnostic_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest>(arena, *from._impl_.request_.get_diagnostic_);
        break;
      case kCloseDocument:
        _impl_.request_.close_document_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest>(arena, *from._impl_.request_.close_document_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
}
inline PROTOBUF_NDEBUG_INLINE AutoCompleteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        request_{},
        _oneof_case_{} {}

inline void AutoCompleteRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, request_id_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::request_id_));
}
AutoCompleteRequest::~AutoCompleteRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AutoCompleteRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.console_id_;
  if (has_request()) {
    clear_request();
  }
  _impl_.~Impl_();
}

void AutoCompleteRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (request_case()) {
    case kOpenDocument: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.open_document_;
      }
      break;
    }
    case kChangeDocument: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.change_document_;
      }
      break;
    }
    case kGetCompletionItems: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.get_completion_items_;
      }
      break;
    }
    case kGetSignatureHelp: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.get_signature_help_;
      }
      break;
    }
    case kGetHover: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.get_hover_;
      }
      break;
    }
    case kGetDiagnostic: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.get_diagnostic_;
      }
      break;
    }
    case kCloseDocument: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.close_document_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


PROTOBUF_NOINLINE void AutoCompleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.console_id_ != nullptr);
    _impl_.console_id_->Clear();
  }
  _impl_.request_id_ = 0;
  clear_request();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AutoCompleteRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 9, 8, 0, 2> AutoCompleteRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_._has_bits_),
    0, // no _extensions_
    9, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AutoCompleteRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 request_id = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AutoCompleteRequest, _impl_.request_id_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 4, PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.console_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_.open_document_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_.change_document_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_.get_completion_items_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_.close_document_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 5;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 request_id = 6;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest get_signature_help = 7;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_.get_signature_help_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.GetHoverRequest get_hover = 8;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_.get_hover_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest get_diagnostic = 9;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_.get_diagnostic_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetHoverRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest>()},
  }}, {{
  }},
};

::uint8_t* AutoCompleteRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (request_case()) {
    case kOpenDocument: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::open_document(this),
          _Internal::open_document(this).GetCachedSize(), target, stream);
      break;
    }
    case kChangeDocument: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::change_document(this),
          _Internal::change_document(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetCompletionItems: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::get_completion_items(this),
          _Internal::get_completion_items(this).GetCachedSize(), target, stream);
      break;
    }
    case kCloseDocument: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::close_document(this),
          _Internal::close_document(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 6;
  if (this->_internal_request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_request_id(), target);
  }

  switch (request_case()) {
    case kGetSignatureHelp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::get_signature_help(this),
          _Internal::get_signature_help(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetHover: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::get_hover(this),
          _Internal::get_hover(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetDiagnostic: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::get_diagnostic(this),
          _Internal::get_diagnostic(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  return target;
}

::size_t AutoCompleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
  }

  // int32 request_id = 6;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_request_id());
  }

  switch (request_case()) {
    // .io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest open_document = 1;
    case kOpenDocument: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.open_document_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest change_document = 2;
    case kChangeDocument: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.change_document_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest get_completion_items = 3;
    case kGetCompletionItems: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.get_completion_items_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest get_signature_help = 7;
    case kGetSignatureHelp: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.get_signature_help_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetHoverRequest get_hover = 8;
    case kGetHover: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.get_hover_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest get_diagnostic = 9;
    case kGetDiagnostic: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.get_diagnostic_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest close_document = 4;
    case kCloseDocument: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.close_document_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AutoCompleteRequest::_class_data_ = {
    AutoCompleteRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AutoCompleteRequest::GetClassData() const {
  return &_class_data_;
}

void AutoCompleteRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AutoCompleteRequest*>(&to_msg);
  auto& from = static_cast<const AutoCompleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_console_id());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  switch (from.request_case()) {
    case kOpenDocument: {
      _this->_internal_mutable_open_document()->::io::deephaven::proto::backplane::script::grpc::OpenDocumentRequest::MergeFrom(
          from._internal_open_document());
      break;
    }
    case kChangeDocument: {
      _this->_internal_mutable_change_document()->::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest::MergeFrom(
          from._internal_change_document());
      break;
    }
    case kGetCompletionItems: {
      _this->_internal_mutable_get_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsRequest::MergeFrom(
          from._internal_get_completion_items());
      break;
    }
    case kGetSignatureHelp: {
      _this->_internal_mutable_get_signature_help()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpRequest::MergeFrom(
          from._internal_get_signature_help());
      break;
    }
    case kGetHover: {
      _this->_internal_mutable_get_hover()->::io::deephaven::proto::backplane::script::grpc::GetHoverRequest::MergeFrom(
          from._internal_get_hover());
      break;
    }
    case kGetDiagnostic: {
      _this->_internal_mutable_get_diagnostic()->::io::deephaven::proto::backplane::script::grpc::GetDiagnosticRequest::MergeFrom(
          from._internal_get_diagnostic());
      break;
    }
    case kCloseDocument: {
      _this->_internal_mutable_close_document()->::io::deephaven::proto::backplane::script::grpc::CloseDocumentRequest::MergeFrom(
          from._internal_close_document());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AutoCompleteRequest::CopyFrom(const AutoCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AutoCompleteRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AutoCompleteRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AutoCompleteRequest::InternalSwap(AutoCompleteRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.request_id_)
      + sizeof(AutoCompleteRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(AutoCompleteRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AutoCompleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[16]);
}
// ===================================================================

class AutoCompleteResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::script::grpc::AutoCompleteResponse, _impl_._oneof_case_);
  static const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse& completion_items(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse& signatures(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetHoverResponse& hover(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse& diagnostic(const AutoCompleteResponse* msg);
  static const ::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse& diagnostic_publish(const AutoCompleteResponse* msg);
};

const ::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse& AutoCompleteResponse::_Internal::completion_items(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.completion_items_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse& AutoCompleteResponse::_Internal::signatures(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.signatures_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetHoverResponse& AutoCompleteResponse::_Internal::hover(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.hover_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse& AutoCompleteResponse::_Internal::diagnostic(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.diagnostic_;
}
const ::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse& AutoCompleteResponse::_Internal::diagnostic_publish(const AutoCompleteResponse* msg) {
  return *msg->_impl_.response_.diagnostic_publish_;
}
void AutoCompleteResponse::set_allocated_completion_items(::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse* completion_items) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (completion_items) {
    ::google::protobuf::Arena* submessage_arena = completion_items->GetArena();
    if (message_arena != submessage_arena) {
      completion_items = ::google::protobuf::internal::GetOwnedMessage(message_arena, completion_items, submessage_arena);
    }
    set_has_completion_items();
    _impl_.response_.completion_items_ = completion_items;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.completion_items)
}
void AutoCompleteResponse::set_allocated_signatures(::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse* signatures) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (signatures) {
    ::google::protobuf::Arena* submessage_arena = signatures->GetArena();
    if (message_arena != submessage_arena) {
      signatures = ::google::protobuf::internal::GetOwnedMessage(message_arena, signatures, submessage_arena);
    }
    set_has_signatures();
    _impl_.response_.signatures_ = signatures;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.signatures)
}
void AutoCompleteResponse::set_allocated_hover(::io::deephaven::proto::backplane::script::grpc::GetHoverResponse* hover) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (hover) {
    ::google::protobuf::Arena* submessage_arena = hover->GetArena();
    if (message_arena != submessage_arena) {
      hover = ::google::protobuf::internal::GetOwnedMessage(message_arena, hover, submessage_arena);
    }
    set_has_hover();
    _impl_.response_.hover_ = hover;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.hover)
}
void AutoCompleteResponse::set_allocated_diagnostic(::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse* diagnostic) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (diagnostic) {
    ::google::protobuf::Arena* submessage_arena = diagnostic->GetArena();
    if (message_arena != submessage_arena) {
      diagnostic = ::google::protobuf::internal::GetOwnedMessage(message_arena, diagnostic, submessage_arena);
    }
    set_has_diagnostic();
    _impl_.response_.diagnostic_ = diagnostic;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.diagnostic)
}
void AutoCompleteResponse::set_allocated_diagnostic_publish(::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse* diagnostic_publish) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (diagnostic_publish) {
    ::google::protobuf::Arena* submessage_arena = diagnostic_publish->GetArena();
    if (message_arena != submessage_arena) {
      diagnostic_publish = ::google::protobuf::internal::GetOwnedMessage(message_arena, diagnostic_publish, submessage_arena);
    }
    set_has_diagnostic_publish();
    _impl_.response_.diagnostic_publish_ = diagnostic_publish;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse.diagnostic_publish)
}
AutoCompleteResponse::AutoCompleteResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
}
inline PROTOBUF_NDEBUG_INLINE AutoCompleteResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : response_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AutoCompleteResponse::AutoCompleteResponse(
    ::google::protobuf::Arena* arena,
    const AutoCompleteResponse& from)
    : ::google::protobuf::Message(arena) {
  AutoCompleteResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, request_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, request_id_),
           offsetof(Impl_, success_) -
               offsetof(Impl_, request_id_) +
               sizeof(Impl_::success_));
  switch (response_case()) {
    case RESPONSE_NOT_SET:
      break;
      case kCompletionItems:
        _impl_.response_.completion_items_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse>(arena, *from._impl_.response_.completion_items_);
        break;
      case kSignatures:
        _impl_.response_.signatures_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse>(arena, *from._impl_.response_.signatures_);
        break;
      case kHover:
        _impl_.response_.hover_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetHoverResponse>(arena, *from._impl_.response_.hover_);
        break;
      case kDiagnostic:
        _impl_.response_.diagnostic_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse>(arena, *from._impl_.response_.diagnostic_);
        break;
      case kDiagnosticPublish:
        _impl_.response_.diagnostic_publish_ = CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse>(arena, *from._impl_.response_.diagnostic_publish_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
}
inline PROTOBUF_NDEBUG_INLINE AutoCompleteResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : response_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AutoCompleteResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, request_id_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, request_id_) +
               sizeof(Impl_::success_));
}
AutoCompleteResponse::~AutoCompleteResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AutoCompleteResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_response()) {
    clear_response();
  }
  _impl_.~Impl_();
}

void AutoCompleteResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (response_case()) {
    case kCompletionItems: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.completion_items_;
      }
      break;
    }
    case kSignatures: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.signatures_;
      }
      break;
    }
    case kHover: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.hover_;
      }
      break;
    }
    case kDiagnostic: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.diagnostic_;
      }
      break;
    }
    case kDiagnosticPublish: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.diagnostic_publish_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


PROTOBUF_NOINLINE void AutoCompleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.request_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  clear_response();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AutoCompleteResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 7, 5, 0, 2> AutoCompleteResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AutoCompleteResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 request_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AutoCompleteResponse, _impl_.request_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.request_id_)}},
    // bool success = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AutoCompleteResponse, _impl_.success_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.response_.completion_items_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 request_id = 2;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.request_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool success = 3;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse signatures = 4;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.response_.signatures_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.GetHoverResponse hover = 5;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.response_.hover_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse diagnostic = 6;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.response_.diagnostic_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse diagnostic_publish = 7;
    {PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.response_.diagnostic_publish_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetHoverResponse>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse>()},
  }}, {{
  }},
};

::uint8_t* AutoCompleteResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
  if (response_case() == kCompletionItems) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::completion_items(this),
        _Internal::completion_items(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_request_id(), target);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_success(), target);
  }

  switch (response_case()) {
    case kSignatures: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::signatures(this),
          _Internal::signatures(this).GetCachedSize(), target, stream);
      break;
    }
    case kHover: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::hover(this),
          _Internal::hover(this).GetCachedSize(), target, stream);
      break;
    }
    case kDiagnostic: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::diagnostic(this),
          _Internal::diagnostic(this).GetCachedSize(), target, stream);
      break;
    }
    case kDiagnosticPublish: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::diagnostic_publish(this),
          _Internal::diagnostic_publish(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  return target;
}

::size_t AutoCompleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 request_id = 2;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_request_id());
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  switch (response_case()) {
    // .io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse completion_items = 1;
    case kCompletionItems: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.completion_items_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse signatures = 4;
    case kSignatures: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.signatures_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetHoverResponse hover = 5;
    case kHover: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.hover_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse diagnostic = 6;
    case kDiagnostic: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.diagnostic_);
      break;
    }
    // .io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse diagnostic_publish = 7;
    case kDiagnosticPublish: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.diagnostic_publish_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AutoCompleteResponse::_class_data_ = {
    AutoCompleteResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AutoCompleteResponse::GetClassData() const {
  return &_class_data_;
}

void AutoCompleteResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AutoCompleteResponse*>(&to_msg);
  auto& from = static_cast<const AutoCompleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  switch (from.response_case()) {
    case kCompletionItems: {
      _this->_internal_mutable_completion_items()->::io::deephaven::proto::backplane::script::grpc::GetCompletionItemsResponse::MergeFrom(
          from._internal_completion_items());
      break;
    }
    case kSignatures: {
      _this->_internal_mutable_signatures()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse::MergeFrom(
          from._internal_signatures());
      break;
    }
    case kHover: {
      _this->_internal_mutable_hover()->::io::deephaven::proto::backplane::script::grpc::GetHoverResponse::MergeFrom(
          from._internal_hover());
      break;
    }
    case kDiagnostic: {
      _this->_internal_mutable_diagnostic()->::io::deephaven::proto::backplane::script::grpc::GetPullDiagnosticResponse::MergeFrom(
          from._internal_diagnostic());
      break;
    }
    case kDiagnosticPublish: {
      _this->_internal_mutable_diagnostic_publish()->::io::deephaven::proto::backplane::script::grpc::GetPublishDiagnosticResponse::MergeFrom(
          from._internal_diagnostic_publish());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AutoCompleteResponse::CopyFrom(const AutoCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.AutoCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AutoCompleteResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AutoCompleteResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AutoCompleteResponse::InternalSwap(AutoCompleteResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.success_)
      + sizeof(AutoCompleteResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AutoCompleteResponse, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AutoCompleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[17]);
}
// ===================================================================

class BrowserNextResponse::_Internal {
 public:
};

BrowserNextResponse::BrowserNextResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
}
BrowserNextResponse::BrowserNextResponse(
    ::google::protobuf::Arena* arena,
    const BrowserNextResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  BrowserNextResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.BrowserNextResponse)
}









::google::protobuf::Metadata BrowserNextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[18]);
}
// ===================================================================

class OpenDocumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenDocumentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const OpenDocumentRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& text_document(const OpenDocumentRequest* msg);
  static void set_has_text_document(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& OpenDocumentRequest::_Internal::console_id(const OpenDocumentRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::TextDocumentItem& OpenDocumentRequest::_Internal::text_document(const OpenDocumentRequest* msg) {
  return *msg->_impl_.text_document_;
}
void OpenDocumentRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OpenDocumentRequest::OpenDocumentRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE OpenDocumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

OpenDocumentRequest::OpenDocumentRequest(
    ::google::protobuf::Arena* arena,
    const OpenDocumentRequest& from)
    : ::google::protobuf::Message(arena) {
  OpenDocumentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.text_document_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::TextDocumentItem>(arena, *from._impl_.text_document_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE OpenDocumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OpenDocumentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, text_document_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::text_document_));
}
OpenDocumentRequest::~OpenDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OpenDocumentRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.console_id_;
  delete _impl_.text_document_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OpenDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.console_id_ != nullptr);
      _impl_.console_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.text_document_ != nullptr);
      _impl_.text_document_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OpenDocumentRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> OpenDocumentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OpenDocumentRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.text_document_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.console_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
    {PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.text_document_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::TextDocumentItem>()},
  }}, {{
  }},
};

::uint8_t* OpenDocumentRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  return target;
}

::size_t OpenDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
    }

    // .io.deephaven.proto.backplane.script.grpc.TextDocumentItem text_document = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_document_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OpenDocumentRequest::_class_data_ = {
    OpenDocumentRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OpenDocumentRequest::GetClassData() const {
  return &_class_data_;
}

void OpenDocumentRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OpenDocumentRequest*>(&to_msg);
  auto& from = static_cast<const OpenDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_console_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::TextDocumentItem::MergeFrom(
          from._internal_text_document());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OpenDocumentRequest::CopyFrom(const OpenDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.OpenDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OpenDocumentRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OpenDocumentRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OpenDocumentRequest::InternalSwap(OpenDocumentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.text_document_)
      + sizeof(OpenDocumentRequest::_impl_.text_document_)
      - PROTOBUF_FIELD_OFFSET(OpenDocumentRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::google::protobuf::Metadata OpenDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[19]);
}
// ===================================================================

class TextDocumentItem::_Internal {
 public:
};

TextDocumentItem::TextDocumentItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}
inline PROTOBUF_NDEBUG_INLINE TextDocumentItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : uri_(arena, from.uri_),
        language_id_(arena, from.language_id_),
        text_(arena, from.text_),
        _cached_size_{0} {}

TextDocumentItem::TextDocumentItem(
    ::google::protobuf::Arena* arena,
    const TextDocumentItem& from)
    : ::google::protobuf::Message(arena) {
  TextDocumentItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.version_ = from._impl_.version_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
}
inline PROTOBUF_NDEBUG_INLINE TextDocumentItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : uri_(arena),
        language_id_(arena),
        text_(arena),
        _cached_size_{0} {}

inline void TextDocumentItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.version_ = {};
}
TextDocumentItem::~TextDocumentItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TextDocumentItem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.language_id_.Destroy();
  _impl_.text_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TextDocumentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.language_id_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TextDocumentItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 84, 2> TextDocumentItem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TextDocumentItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string text = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.text_)}},
    // string uri = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.uri_)}},
    // string language_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.language_id_)}},
    // int32 version = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TextDocumentItem, _impl_.version_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uri = 1;
    {PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.uri_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string language_id = 2;
    {PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.language_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 version = 3;
    {PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string text = 4;
    {PROTOBUF_FIELD_OFFSET(TextDocumentItem, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\71\3\13\0\4\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.TextDocumentItem"
    "uri"
    "language_id"
    "text"
  }},
};

::uint8_t* TextDocumentItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string language_id = 2;
  if (!this->_internal_language_id().empty()) {
    const std::string& _s = this->_internal_language_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.language_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_version(), target);
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.TextDocumentItem.text");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  return target;
}

::size_t TextDocumentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // string language_id = 2;
  if (!this->_internal_language_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_language_id());
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TextDocumentItem::_class_data_ = {
    TextDocumentItem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TextDocumentItem::GetClassData() const {
  return &_class_data_;
}

void TextDocumentItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TextDocumentItem*>(&to_msg);
  auto& from = static_cast<const TextDocumentItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_language_id().empty()) {
    _this->_internal_set_language_id(from._internal_language_id());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TextDocumentItem::CopyFrom(const TextDocumentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextDocumentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TextDocumentItem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TextDocumentItem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TextDocumentItem::InternalSwap(TextDocumentItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, &other->_impl_.uri_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.language_id_, &other->_impl_.language_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
        swap(_impl_.version_, other->_impl_.version_);
}

::google::protobuf::Metadata TextDocumentItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[20]);
}
// ===================================================================

class CloseDocumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseDocumentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const CloseDocumentRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const CloseDocumentRequest* msg);
  static void set_has_text_document(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& CloseDocumentRequest::_Internal::console_id(const CloseDocumentRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& CloseDocumentRequest::_Internal::text_document(const CloseDocumentRequest* msg) {
  return *msg->_impl_.text_document_;
}
void CloseDocumentRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CloseDocumentRequest::CloseDocumentRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE CloseDocumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CloseDocumentRequest::CloseDocumentRequest(
    ::google::protobuf::Arena* arena,
    const CloseDocumentRequest& from)
    : ::google::protobuf::Message(arena) {
  CloseDocumentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.text_document_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(arena, *from._impl_.text_document_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE CloseDocumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CloseDocumentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, text_document_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::text_document_));
}
CloseDocumentRequest::~CloseDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CloseDocumentRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.console_id_;
  delete _impl_.text_document_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CloseDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.console_id_ != nullptr);
      _impl_.console_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.text_document_ != nullptr);
      _impl_.text_document_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CloseDocumentRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CloseDocumentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CloseDocumentRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.text_document_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.console_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    {PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.text_document_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>()},
  }}, {{
  }},
};

::uint8_t* CloseDocumentRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  return target;
}

::size_t CloseDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
    }

    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_document_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CloseDocumentRequest::_class_data_ = {
    CloseDocumentRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CloseDocumentRequest::GetClassData() const {
  return &_class_data_;
}

void CloseDocumentRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CloseDocumentRequest*>(&to_msg);
  auto& from = static_cast<const CloseDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_console_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
          from._internal_text_document());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CloseDocumentRequest::CopyFrom(const CloseDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CloseDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CloseDocumentRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CloseDocumentRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CloseDocumentRequest::InternalSwap(CloseDocumentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.text_document_)
      + sizeof(CloseDocumentRequest::_impl_.text_document_)
      - PROTOBUF_FIELD_OFFSET(CloseDocumentRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::google::protobuf::Metadata CloseDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[21]);
}
// ===================================================================

class ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeDocumentRequest_TextDocumentContentChangeEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& ChangeDocumentRequest_TextDocumentContentChangeEvent::_Internal::range(const ChangeDocumentRequest_TextDocumentContentChangeEvent* msg) {
  return *msg->_impl_.range_;
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}
inline PROTOBUF_NDEBUG_INLINE ChangeDocumentRequest_TextDocumentContentChangeEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        text_(arena, from.text_) {}

ChangeDocumentRequest_TextDocumentContentChangeEvent::ChangeDocumentRequest_TextDocumentContentChangeEvent(
    ::google::protobuf::Arena* arena,
    const ChangeDocumentRequest_TextDocumentContentChangeEvent& from)
    : ::google::protobuf::Message(arena) {
  ChangeDocumentRequest_TextDocumentContentChangeEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.range_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::DocumentRange>(arena, *from._impl_.range_)
                : nullptr;
  _impl_.range_length_ = from._impl_.range_length_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
}
inline PROTOBUF_NDEBUG_INLINE ChangeDocumentRequest_TextDocumentContentChangeEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        text_(arena) {}

inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, range_),
           0,
           offsetof(Impl_, range_length_) -
               offsetof(Impl_, range_) +
               sizeof(Impl_::range_length_));
}
ChangeDocumentRequest_TextDocumentContentChangeEvent::~ChangeDocumentRequest_TextDocumentContentChangeEvent() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChangeDocumentRequest_TextDocumentContentChangeEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  delete _impl_.range_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChangeDocumentRequest_TextDocumentContentChangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  _impl_.range_length_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 106, 2> ChangeDocumentRequest_TextDocumentContentChangeEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChangeDocumentRequest_TextDocumentContentChangeEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_)}},
    // int32 range_length = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_length_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_length_)}},
    // string text = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
    {PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 range_length = 2;
    {PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string text = 3;
    {PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::DocumentRange>()},
  }}, {{
    "\135\0\0\4\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent"
    "text"
  }},
};

::uint8_t* ChangeDocumentRequest_TextDocumentContentChangeEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // int32 range_length = 2;
  if (this->_internal_range_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_range_length(), target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent.text");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  return target;
}

::size_t ChangeDocumentRequest_TextDocumentContentChangeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.range_);
  }

  // int32 range_length = 2;
  if (this->_internal_range_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_range_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChangeDocumentRequest_TextDocumentContentChangeEvent::_class_data_ = {
    ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChangeDocumentRequest_TextDocumentContentChangeEvent::GetClassData() const {
  return &_class_data_;
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChangeDocumentRequest_TextDocumentContentChangeEvent*>(&to_msg);
  auto& from = static_cast<const ChangeDocumentRequest_TextDocumentContentChangeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
        from._internal_range());
  }
  if (from._internal_range_length() != 0) {
    _this->_internal_set_range_length(from._internal_range_length());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeDocumentRequest_TextDocumentContentChangeEvent::CopyFrom(const ChangeDocumentRequest_TextDocumentContentChangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChangeDocumentRequest_TextDocumentContentChangeEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChangeDocumentRequest_TextDocumentContentChangeEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChangeDocumentRequest_TextDocumentContentChangeEvent::InternalSwap(ChangeDocumentRequest_TextDocumentContentChangeEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_length_)
      + sizeof(ChangeDocumentRequest_TextDocumentContentChangeEvent::_impl_.range_length_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest_TextDocumentContentChangeEvent, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::google::protobuf::Metadata ChangeDocumentRequest_TextDocumentContentChangeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[22]);
}
// ===================================================================

class ChangeDocumentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeDocumentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const ChangeDocumentRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const ChangeDocumentRequest* msg);
  static void set_has_text_document(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& ChangeDocumentRequest::_Internal::console_id(const ChangeDocumentRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& ChangeDocumentRequest::_Internal::text_document(const ChangeDocumentRequest* msg) {
  return *msg->_impl_.text_document_;
}
void ChangeDocumentRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChangeDocumentRequest::ChangeDocumentRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChangeDocumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        content_changes_{visibility, arena, from.content_changes_} {}

ChangeDocumentRequest::ChangeDocumentRequest(
    ::google::protobuf::Arena* arena,
    const ChangeDocumentRequest& from)
    : ::google::protobuf::Message(arena) {
  ChangeDocumentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.text_document_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(arena, *from._impl_.text_document_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChangeDocumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        content_changes_{visibility, arena} {}

inline void ChangeDocumentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, text_document_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::text_document_));
}
ChangeDocumentRequest::~ChangeDocumentRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChangeDocumentRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.console_id_;
  delete _impl_.text_document_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChangeDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_changes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.console_id_ != nullptr);
      _impl_.console_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.text_document_ != nullptr);
      _impl_.text_document_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChangeDocumentRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> ChangeDocumentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChangeDocumentRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.console_id_)}},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.text_document_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.content_changes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    {PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.text_document_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
    {PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.content_changes_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::ChangeDocumentRequest_TextDocumentContentChangeEvent>()},
  }}, {{
  }},
};

::uint8_t* ChangeDocumentRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_changes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  return target;
}

::size_t ChangeDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent content_changes = 3;
  total_size += 1UL * this->_internal_content_changes_size();
  for (const auto& msg : this->_internal_content_changes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
    }

    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_document_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChangeDocumentRequest::_class_data_ = {
    ChangeDocumentRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChangeDocumentRequest::GetClassData() const {
  return &_class_data_;
}

void ChangeDocumentRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChangeDocumentRequest*>(&to_msg);
  auto& from = static_cast<const ChangeDocumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content_changes()->MergeFrom(
      from._internal_content_changes());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_console_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
          from._internal_text_document());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeDocumentRequest::CopyFrom(const ChangeDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChangeDocumentRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChangeDocumentRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChangeDocumentRequest::InternalSwap(ChangeDocumentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_changes_.InternalSwap(&other->_impl_.content_changes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.text_document_)
      + sizeof(ChangeDocumentRequest::_impl_.text_document_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::google::protobuf::Metadata ChangeDocumentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[23]);
}
// ===================================================================

class DocumentRange::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentRange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::Position& start(const DocumentRange* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::Position& end(const DocumentRange* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::Position& DocumentRange::_Internal::start(const DocumentRange* msg) {
  return *msg->_impl_.start_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position& DocumentRange::_Internal::end(const DocumentRange* msg) {
  return *msg->_impl_.end_;
}
DocumentRange::DocumentRange(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}
inline PROTOBUF_NDEBUG_INLINE DocumentRange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DocumentRange::DocumentRange(
    ::google::protobuf::Arena* arena,
    const DocumentRange& from)
    : ::google::protobuf::Message(arena) {
  DocumentRange* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(arena, *from._impl_.start_)
                : nullptr;
  _impl_.end_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(arena, *from._impl_.end_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
}
inline PROTOBUF_NDEBUG_INLINE DocumentRange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DocumentRange::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_),
           0,
           offsetof(Impl_, end_) -
               offsetof(Impl_, start_) +
               sizeof(Impl_::end_));
}
DocumentRange::~DocumentRange() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DocumentRange::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.start_;
  delete _impl_.end_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DocumentRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DocumentRange::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> DocumentRange::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DocumentRange_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.end_)}},
    // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.start_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
    {PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.start_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
    {PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.end_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Position>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Position>()},
  }}, {{
  }},
};

::uint8_t* DocumentRange::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  return target;
}

::size_t DocumentRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.script.grpc.Position start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.start_);
    }

    // .io.deephaven.proto.backplane.script.grpc.Position end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.end_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DocumentRange::_class_data_ = {
    DocumentRange::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DocumentRange::GetClassData() const {
  return &_class_data_;
}

void DocumentRange::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DocumentRange*>(&to_msg);
  auto& from = static_cast<const DocumentRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
          from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
          from._internal_end());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentRange::CopyFrom(const DocumentRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.DocumentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DocumentRange::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DocumentRange::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DocumentRange::InternalSwap(DocumentRange* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.end_)
      + sizeof(DocumentRange::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(DocumentRange, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::google::protobuf::Metadata DocumentRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[24]);
}
// ===================================================================

class VersionedTextDocumentIdentifier::_Internal {
 public:
};

VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}
inline PROTOBUF_NDEBUG_INLINE VersionedTextDocumentIdentifier::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : uri_(arena, from.uri_),
        _cached_size_{0} {}

VersionedTextDocumentIdentifier::VersionedTextDocumentIdentifier(
    ::google::protobuf::Arena* arena,
    const VersionedTextDocumentIdentifier& from)
    : ::google::protobuf::Message(arena) {
  VersionedTextDocumentIdentifier* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.version_ = from._impl_.version_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
}
inline PROTOBUF_NDEBUG_INLINE VersionedTextDocumentIdentifier::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : uri_(arena),
        _cached_size_{0} {}

inline void VersionedTextDocumentIdentifier::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.version_ = {};
}
VersionedTextDocumentIdentifier::~VersionedTextDocumentIdentifier() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VersionedTextDocumentIdentifier::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VersionedTextDocumentIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VersionedTextDocumentIdentifier::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 84, 2> VersionedTextDocumentIdentifier::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VersionedTextDocumentIdentifier_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VersionedTextDocumentIdentifier, _impl_.version_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VersionedTextDocumentIdentifier, _impl_.version_)}},
    // string uri = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VersionedTextDocumentIdentifier, _impl_.uri_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uri = 1;
    {PROTOBUF_FIELD_OFFSET(VersionedTextDocumentIdentifier, _impl_.uri_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 version = 2;
    {PROTOBUF_FIELD_OFFSET(VersionedTextDocumentIdentifier, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\110\3\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier"
    "uri"
  }},
};

::uint8_t* VersionedTextDocumentIdentifier::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier.uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  return target;
}

::size_t VersionedTextDocumentIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VersionedTextDocumentIdentifier::_class_data_ = {
    VersionedTextDocumentIdentifier::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VersionedTextDocumentIdentifier::GetClassData() const {
  return &_class_data_;
}

void VersionedTextDocumentIdentifier::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VersionedTextDocumentIdentifier*>(&to_msg);
  auto& from = static_cast<const VersionedTextDocumentIdentifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VersionedTextDocumentIdentifier::CopyFrom(const VersionedTextDocumentIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VersionedTextDocumentIdentifier::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VersionedTextDocumentIdentifier::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VersionedTextDocumentIdentifier::InternalSwap(VersionedTextDocumentIdentifier* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, &other->_impl_.uri_, arena);
        swap(_impl_.version_, other->_impl_.version_);
}

::google::protobuf::Metadata VersionedTextDocumentIdentifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[25]);
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Position)
}
Position::Position(
    ::google::protobuf::Arena* arena, const Position& from)
    : Position(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, line_),
           0,
           offsetof(Impl_, character_) -
               offsetof(Impl_, line_) +
               sizeof(Impl_::character_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Position)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Position::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Position)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.line_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.character_) -
      reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.character_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Position::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Position_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 character = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Position, _impl_.character_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.character_)}},
    // int32 line = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Position, _impl_.line_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.line_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 line = 1;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.line_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 character = 2;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.character_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Position::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Position)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_line(), target);
  }

  // int32 character = 2;
  if (this->_internal_character() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Position)
  return target;
}

::size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Position)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_line());
  }

  // int32 character = 2;
  if (this->_internal_character() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_character());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Position::_class_data_ = {
    Position::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Position::GetClassData() const {
  return &_class_data_;
}

void Position::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  if (from._internal_character() != 0) {
    _this->_internal_set_character(from._internal_character());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Position::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Position::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.character_)
      + sizeof(Position::_impl_.character_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.line_)>(
          reinterpret_cast<char*>(&_impl_.line_),
          reinterpret_cast<char*>(&other->_impl_.line_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[26]);
}
// ===================================================================

class MarkupContent::_Internal {
 public:
};

MarkupContent::MarkupContent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.MarkupContent)
}
inline PROTOBUF_NDEBUG_INLINE MarkupContent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : kind_(arena, from.kind_),
        value_(arena, from.value_),
        _cached_size_{0} {}

MarkupContent::MarkupContent(
    ::google::protobuf::Arena* arena,
    const MarkupContent& from)
    : ::google::protobuf::Message(arena) {
  MarkupContent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.MarkupContent)
}
inline PROTOBUF_NDEBUG_INLINE MarkupContent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : kind_(arena),
        value_(arena),
        _cached_size_{0} {}

inline void MarkupContent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MarkupContent::~MarkupContent() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MarkupContent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.kind_.Destroy();
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MarkupContent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kind_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MarkupContent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 72, 2> MarkupContent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MarkupContent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MarkupContent, _impl_.value_)}},
    // string kind = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarkupContent, _impl_.kind_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string kind = 1;
    {PROTOBUF_FIELD_OFFSET(MarkupContent, _impl_.kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(MarkupContent, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\66\4\5\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.MarkupContent"
    "kind"
    "value"
  }},
};

::uint8_t* MarkupContent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    const std::string& _s = this->_internal_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.MarkupContent.kind");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.MarkupContent.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  return target;
}

::size_t MarkupContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_kind());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MarkupContent::_class_data_ = {
    MarkupContent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MarkupContent::GetClassData() const {
  return &_class_data_;
}

void MarkupContent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MarkupContent*>(&to_msg);
  auto& from = static_cast<const MarkupContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kind().empty()) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarkupContent::CopyFrom(const MarkupContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.MarkupContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MarkupContent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MarkupContent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MarkupContent::InternalSwap(MarkupContent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kind_, &other->_impl_.kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
}

::google::protobuf::Metadata MarkupContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[27]);
}
// ===================================================================

class GetCompletionItemsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCompletionItemsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& console_id(const GetCompletionItemsRequest* msg);
  static void set_has_console_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& context(const GetCompletionItemsRequest* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetCompletionItemsRequest* msg);
  static void set_has_text_document(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetCompletionItemsRequest* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& GetCompletionItemsRequest::_Internal::console_id(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.console_id_;
}
const ::io::deephaven::proto::backplane::script::grpc::CompletionContext& GetCompletionItemsRequest::_Internal::context(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.context_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& GetCompletionItemsRequest::_Internal::text_document(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position& GetCompletionItemsRequest::_Internal::position(const GetCompletionItemsRequest* msg) {
  return *msg->_impl_.position_;
}
void GetCompletionItemsRequest::clear_console_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.console_id_ != nullptr) _impl_.console_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetCompletionItemsRequest::GetCompletionItemsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetCompletionItemsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetCompletionItemsRequest::GetCompletionItemsRequest(
    ::google::protobuf::Arena* arena,
    const GetCompletionItemsRequest& from)
    : ::google::protobuf::Message(arena) {
  GetCompletionItemsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.console_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.console_id_)
                : nullptr;
  _impl_.context_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::CompletionContext>(arena, *from._impl_.context_)
                : nullptr;
  _impl_.text_document_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(arena, *from._impl_.text_document_)
                : nullptr;
  _impl_.position_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.request_id_ = from._impl_.request_id_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetCompletionItemsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetCompletionItemsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, console_id_),
           0,
           offsetof(Impl_, request_id_) -
               offsetof(Impl_, console_id_) +
               sizeof(Impl_::request_id_));
}
GetCompletionItemsRequest::~GetCompletionItemsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCompletionItemsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.console_id_;
  delete _impl_.context_;
  delete _impl_.text_document_;
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetCompletionItemsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.console_id_ != nullptr);
      _impl_.console_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.context_ != nullptr);
      _impl_.context_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.text_document_ != nullptr);
      _impl_.text_document_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  _impl_.request_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetCompletionItemsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> GetCompletionItemsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCompletionItemsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.console_id_)}},
    // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.context_)}},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.text_document_)}},
    // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.position_)}},
    // int32 request_id = 5 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCompletionItemsRequest, _impl_.request_id_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.request_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.console_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.context_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.text_document_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.position_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 request_id = 5 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.request_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::CompletionContext>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Position>()},
  }}, {{
  }},
};

::uint8_t* GetCompletionItemsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::console_id(this),
        _Internal::console_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // int32 request_id = 5 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  return target;
}

::size_t GetCompletionItemsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .io.deephaven.proto.backplane.grpc.Ticket console_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.console_id_);
    }

    // .io.deephaven.proto.backplane.script.grpc.CompletionContext context = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.context_);
    }

    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_document_);
    }

    // .io.deephaven.proto.backplane.script.grpc.Position position = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

  }
  // int32 request_id = 5 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetCompletionItemsRequest::_class_data_ = {
    GetCompletionItemsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetCompletionItemsRequest::GetClassData() const {
  return &_class_data_;
}

void GetCompletionItemsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetCompletionItemsRequest*>(&to_msg);
  auto& from = static_cast<const GetCompletionItemsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_console_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_console_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_context()->::io::deephaven::proto::backplane::script::grpc::CompletionContext::MergeFrom(
          from._internal_context());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
          from._internal_text_document());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
          from._internal_position());
    }
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompletionItemsRequest::CopyFrom(const GetCompletionItemsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetCompletionItemsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetCompletionItemsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetCompletionItemsRequest::InternalSwap(GetCompletionItemsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.request_id_)
      + sizeof(GetCompletionItemsRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(GetCompletionItemsRequest, _impl_.console_id_)>(
          reinterpret_cast<char*>(&_impl_.console_id_),
          reinterpret_cast<char*>(&other->_impl_.console_id_));
}

::google::protobuf::Metadata GetCompletionItemsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[28]);
}
// ===================================================================

class CompletionContext::_Internal {
 public:
};

CompletionContext::CompletionContext(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}
inline PROTOBUF_NDEBUG_INLINE CompletionContext::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : trigger_character_(arena, from.trigger_character_),
        _cached_size_{0} {}

CompletionContext::CompletionContext(
    ::google::protobuf::Arena* arena,
    const CompletionContext& from)
    : ::google::protobuf::Message(arena) {
  CompletionContext* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.trigger_kind_ = from._impl_.trigger_kind_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
}
inline PROTOBUF_NDEBUG_INLINE CompletionContext::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : trigger_character_(arena),
        _cached_size_{0} {}

inline void CompletionContext::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.trigger_kind_ = {};
}
CompletionContext::~CompletionContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CompletionContext::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.trigger_character_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CompletionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trigger_character_.ClearToEmpty();
  _impl_.trigger_kind_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CompletionContext::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 84, 2> CompletionContext::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CompletionContext_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string trigger_character = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionContext, _impl_.trigger_character_)}},
    // int32 trigger_kind = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompletionContext, _impl_.trigger_kind_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionContext, _impl_.trigger_kind_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 trigger_kind = 1;
    {PROTOBUF_FIELD_OFFSET(CompletionContext, _impl_.trigger_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string trigger_character = 2;
    {PROTOBUF_FIELD_OFFSET(CompletionContext, _impl_.trigger_character_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\72\0\21\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.CompletionContext"
    "trigger_character"
  }},
};

::uint8_t* CompletionContext::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_trigger_kind(), target);
  }

  // string trigger_character = 2;
  if (!this->_internal_trigger_character().empty()) {
    const std::string& _s = this->_internal_trigger_character();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.CompletionContext.trigger_character");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  return target;
}

::size_t CompletionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trigger_character = 2;
  if (!this->_internal_trigger_character().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_trigger_character());
  }

  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_trigger_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CompletionContext::_class_data_ = {
    CompletionContext::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CompletionContext::GetClassData() const {
  return &_class_data_;
}

void CompletionContext::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CompletionContext*>(&to_msg);
  auto& from = static_cast<const CompletionContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trigger_character().empty()) {
    _this->_internal_set_trigger_character(from._internal_trigger_character());
  }
  if (from._internal_trigger_kind() != 0) {
    _this->_internal_set_trigger_kind(from._internal_trigger_kind());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionContext::CopyFrom(const CompletionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CompletionContext::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CompletionContext::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CompletionContext::InternalSwap(CompletionContext* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trigger_character_, &other->_impl_.trigger_character_, arena);
        swap(_impl_.trigger_kind_, other->_impl_.trigger_kind_);
}

::google::protobuf::Metadata CompletionContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[29]);
}
// ===================================================================

class GetCompletionItemsResponse::_Internal {
 public:
};

GetCompletionItemsResponse::GetCompletionItemsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCompletionItemsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : items_{visibility, arena, from.items_},
        _cached_size_{0} {}

GetCompletionItemsResponse::GetCompletionItemsResponse(
    ::google::protobuf::Arena* arena,
    const GetCompletionItemsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetCompletionItemsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, request_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, request_id_),
           offsetof(Impl_, success_) -
               offsetof(Impl_, request_id_) +
               sizeof(Impl_::success_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCompletionItemsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : items_{visibility, arena},
        _cached_size_{0} {}

inline void GetCompletionItemsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, request_id_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, request_id_) +
               sizeof(Impl_::success_));
}
GetCompletionItemsResponse::~GetCompletionItemsResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCompletionItemsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetCompletionItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.request_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetCompletionItemsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> GetCompletionItemsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCompletionItemsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.items_)}},
    // int32 request_id = 2 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCompletionItemsResponse, _impl_.request_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.request_id_)}},
    // bool success = 3 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetCompletionItemsResponse, _impl_.success_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.items_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 request_id = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.request_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool success = 3 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::CompletionItem>()},
  }}, {{
  }},
};

::uint8_t* GetCompletionItemsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 request_id = 2 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_request_id(), target);
  }

  // bool success = 3 [deprecated = true];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  return target;
}

::size_t GetCompletionItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.CompletionItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 request_id = 2 [deprecated = true];
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_request_id());
  }

  // bool success = 3 [deprecated = true];
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetCompletionItemsResponse::_class_data_ = {
    GetCompletionItemsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetCompletionItemsResponse::GetClassData() const {
  return &_class_data_;
}

void GetCompletionItemsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetCompletionItemsResponse*>(&to_msg);
  auto& from = static_cast<const GetCompletionItemsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCompletionItemsResponse::CopyFrom(const GetCompletionItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetCompletionItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetCompletionItemsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetCompletionItemsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetCompletionItemsResponse::InternalSwap(GetCompletionItemsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.success_)
      + sizeof(GetCompletionItemsResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetCompletionItemsResponse, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::google::protobuf::Metadata GetCompletionItemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[30]);
}
// ===================================================================

class CompletionItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CompletionItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::TextEdit& text_edit(const CompletionItem* msg);
  static void set_has_text_edit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& documentation(const CompletionItem* msg);
  static void set_has_documentation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::TextEdit& CompletionItem::_Internal::text_edit(const CompletionItem* msg) {
  return *msg->_impl_.text_edit_;
}
const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& CompletionItem::_Internal::documentation(const CompletionItem* msg) {
  return *msg->_impl_.documentation_;
}
CompletionItem::CompletionItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}
inline PROTOBUF_NDEBUG_INLINE CompletionItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        additional_text_edits_{visibility, arena, from.additional_text_edits_},
        commit_characters_{visibility, arena, from.commit_characters_},
        label_(arena, from.label_),
        detail_(arena, from.detail_),
        sort_text_(arena, from.sort_text_),
        filter_text_(arena, from.filter_text_) {}

CompletionItem::CompletionItem(
    ::google::protobuf::Arena* arena,
    const CompletionItem& from)
    : ::google::protobuf::Message(arena) {
  CompletionItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.text_edit_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::TextEdit>(arena, *from._impl_.text_edit_)
                : nullptr;
  _impl_.documentation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::MarkupContent>(arena, *from._impl_.documentation_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_),
           offsetof(Impl_, insert_text_format_) -
               offsetof(Impl_, start_) +
               sizeof(Impl_::insert_text_format_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
}
inline PROTOBUF_NDEBUG_INLINE CompletionItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        additional_text_edits_{visibility, arena},
        commit_characters_{visibility, arena},
        label_(arena),
        detail_(arena),
        sort_text_(arena),
        filter_text_(arena) {}

inline void CompletionItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, text_edit_),
           0,
           offsetof(Impl_, insert_text_format_) -
               offsetof(Impl_, text_edit_) +
               sizeof(Impl_::insert_text_format_));
}
CompletionItem::~CompletionItem() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CompletionItem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.label_.Destroy();
  _impl_.detail_.Destroy();
  _impl_.sort_text_.Destroy();
  _impl_.filter_text_.Destroy();
  delete _impl_.text_edit_;
  delete _impl_.documentation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CompletionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_text_edits_.Clear();
  _impl_.commit_characters_.Clear();
  _impl_.label_.ClearToEmpty();
  _impl_.detail_.ClearToEmpty();
  _impl_.sort_text_.ClearToEmpty();
  _impl_.filter_text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.text_edit_ != nullptr);
      _impl_.text_edit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.documentation_ != nullptr);
      _impl_.documentation_->Clear();
    }
  }
  ::memset(&_impl_.start_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.insert_text_format_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.insert_text_format_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CompletionItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 3, 120, 2> CompletionItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934560,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CompletionItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 start = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompletionItem, _impl_.start_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.start_)}},
    // int32 length = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompletionItem, _impl_.length_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.length_)}},
    // string label = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.label_)}},
    // int32 kind = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompletionItem, _impl_.kind_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.kind_)}},
    // string detail = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.detail_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool deprecated = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CompletionItem, _impl_.deprecated_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.deprecated_)}},
    // bool preselect = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CompletionItem, _impl_.preselect_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.preselect_)}},
    // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.text_edit_)}},
    // string sort_text = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.sort_text_)}},
    // string filter_text = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.filter_text_)}},
    // int32 insert_text_format = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompletionItem, _impl_.insert_text_format_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.insert_text_format_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 1, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.additional_text_edits_)}},
    // repeated string commit_characters = 14;
    {::_pbi::TcParser::FastUR1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.commit_characters_)}},
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 1, 2, PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.documentation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 start = 1;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.start_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 length = 2;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string label = 3;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.label_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 kind = 4;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string detail = 5;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.detail_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool deprecated = 7;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.deprecated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool preselect = 8;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.preselect_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.text_edit_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string sort_text = 10;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.sort_text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string filter_text = 11;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.filter_text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 insert_text_format = 12;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.insert_text_format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.additional_text_edits_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string commit_characters = 14;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.commit_characters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 15;
    {PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.documentation_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::TextEdit>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::TextEdit>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::MarkupContent>()},
  }}, {{
    "\67\0\0\5\0\6\0\0\0\11\13\0\0\21\0\0"
    "io.deephaven.proto.backplane.script.grpc.CompletionItem"
    "label"
    "detail"
    "sort_text"
    "filter_text"
    "commit_characters"
  }},
};

::uint8_t* CompletionItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_start(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_length(), target);
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.CompletionItem.label");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 kind = 4;
  if (this->_internal_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_kind(), target);
  }

  // string detail = 5;
  if (!this->_internal_detail().empty()) {
    const std::string& _s = this->_internal_detail();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.CompletionItem.detail");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bool deprecated = 7;
  if (this->_internal_deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_deprecated(), target);
  }

  // bool preselect = 8;
  if (this->_internal_preselect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_preselect(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::text_edit(this),
        _Internal::text_edit(this).GetCachedSize(), target, stream);
  }

  // string sort_text = 10;
  if (!this->_internal_sort_text().empty()) {
    const std::string& _s = this->_internal_sort_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.CompletionItem.sort_text");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string filter_text = 11;
  if (!this->_internal_filter_text().empty()) {
    const std::string& _s = this->_internal_filter_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.CompletionItem.filter_text");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // int32 insert_text_format = 12;
  if (this->_internal_insert_text_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_insert_text_format(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_text_edits_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_text_edits().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string commit_characters = 14;
  for (int i = 0, n = this->_internal_commit_characters_size(); i < n; ++i) {
    const auto& s = this->_internal_commit_characters().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.CompletionItem.commit_characters");
    target = stream->WriteString(14, s, target);
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 15;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, _Internal::documentation(this),
        _Internal::documentation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  return target;
}

::size_t CompletionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.TextEdit additional_text_edits = 13;
  total_size += 1UL * this->_internal_additional_text_edits_size();
  for (const auto& msg : this->_internal_additional_text_edits()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string commit_characters = 14;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_commit_characters().size());
  for (int i = 0, n = _internal_commit_characters().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_commit_characters().Get(i));
  }
  // string label = 3;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // string detail = 5;
  if (!this->_internal_detail().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_detail());
  }

  // string sort_text = 10;
  if (!this->_internal_sort_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sort_text());
  }

  // string filter_text = 11;
  if (!this->_internal_filter_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_filter_text());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.script.grpc.TextEdit text_edit = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_edit_);
    }

    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.documentation_);
    }

  }
  // int32 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_start());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_length());
  }

  // int32 kind = 4;
  if (this->_internal_kind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_kind());
  }

  // bool deprecated = 7;
  if (this->_internal_deprecated() != 0) {
    total_size += 2;
  }

  // bool preselect = 8;
  if (this->_internal_preselect() != 0) {
    total_size += 2;
  }

  // int32 insert_text_format = 12;
  if (this->_internal_insert_text_format() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_insert_text_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CompletionItem::_class_data_ = {
    CompletionItem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CompletionItem::GetClassData() const {
  return &_class_data_;
}

void CompletionItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CompletionItem*>(&to_msg);
  auto& from = static_cast<const CompletionItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_additional_text_edits()->MergeFrom(
      from._internal_additional_text_edits());
  _this->_internal_mutable_commit_characters()->MergeFrom(from._internal_commit_characters());
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_detail().empty()) {
    _this->_internal_set_detail(from._internal_detail());
  }
  if (!from._internal_sort_text().empty()) {
    _this->_internal_set_sort_text(from._internal_sort_text());
  }
  if (!from._internal_filter_text().empty()) {
    _this->_internal_set_filter_text(from._internal_filter_text());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_text_edit()->::io::deephaven::proto::backplane::script::grpc::TextEdit::MergeFrom(
          from._internal_text_edit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_documentation()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
          from._internal_documentation());
    }
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if (from._internal_deprecated() != 0) {
    _this->_internal_set_deprecated(from._internal_deprecated());
  }
  if (from._internal_preselect() != 0) {
    _this->_internal_set_preselect(from._internal_preselect());
  }
  if (from._internal_insert_text_format() != 0) {
    _this->_internal_set_insert_text_format(from._internal_insert_text_format());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionItem::CopyFrom(const CompletionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.CompletionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CompletionItem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CompletionItem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CompletionItem::InternalSwap(CompletionItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.additional_text_edits_.InternalSwap(&other->_impl_.additional_text_edits_);
  _impl_.commit_characters_.InternalSwap(&other->_impl_.commit_characters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.detail_, &other->_impl_.detail_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sort_text_, &other->_impl_.sort_text_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filter_text_, &other->_impl_.filter_text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.insert_text_format_)
      + sizeof(CompletionItem::_impl_.insert_text_format_)
      - PROTOBUF_FIELD_OFFSET(CompletionItem, _impl_.text_edit_)>(
          reinterpret_cast<char*>(&_impl_.text_edit_),
          reinterpret_cast<char*>(&other->_impl_.text_edit_));
}

::google::protobuf::Metadata CompletionItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[31]);
}
// ===================================================================

class TextEdit::_Internal {
 public:
  using HasBits = decltype(std::declval<TextEdit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TextEdit, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const TextEdit* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& TextEdit::_Internal::range(const TextEdit* msg) {
  return *msg->_impl_.range_;
}
TextEdit::TextEdit(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}
inline PROTOBUF_NDEBUG_INLINE TextEdit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        text_(arena, from.text_) {}

TextEdit::TextEdit(
    ::google::protobuf::Arena* arena,
    const TextEdit& from)
    : ::google::protobuf::Message(arena) {
  TextEdit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.range_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::DocumentRange>(arena, *from._impl_.range_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
}
inline PROTOBUF_NDEBUG_INLINE TextEdit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        text_(arena) {}

inline void TextEdit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.range_ = {};
}
TextEdit::~TextEdit() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.TextEdit)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TextEdit::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  delete _impl_.range_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TextEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TextEdit::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 62, 2> TextEdit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TextEdit, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TextEdit_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TextEdit, _impl_.text_)}},
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TextEdit, _impl_.range_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
    {PROTOBUF_FIELD_OFFSET(TextEdit, _impl_.range_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(TextEdit, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::DocumentRange>()},
  }}, {{
    "\61\0\4\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.TextEdit"
    "text"
  }},
};

::uint8_t* TextEdit::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.TextEdit.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.TextEdit)
  return target;
}

::size_t TextEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TextEdit::_class_data_ = {
    TextEdit::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TextEdit::GetClassData() const {
  return &_class_data_;
}

void TextEdit::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TextEdit*>(&to_msg);
  auto& from = static_cast<const TextEdit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
        from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TextEdit::CopyFrom(const TextEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.TextEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TextEdit::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TextEdit::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TextEdit::InternalSwap(TextEdit* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  swap(_impl_.range_, other->_impl_.range_);
}

::google::protobuf::Metadata TextEdit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[32]);
}
// ===================================================================

class GetSignatureHelpRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignatureHelpRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext& context(const GetSignatureHelpRequest* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetSignatureHelpRequest* msg);
  static void set_has_text_document(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetSignatureHelpRequest* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext& GetSignatureHelpRequest::_Internal::context(const GetSignatureHelpRequest* msg) {
  return *msg->_impl_.context_;
}
const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& GetSignatureHelpRequest::_Internal::text_document(const GetSignatureHelpRequest* msg) {
  return *msg->_impl_.text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position& GetSignatureHelpRequest::_Internal::position(const GetSignatureHelpRequest* msg) {
  return *msg->_impl_.position_;
}
GetSignatureHelpRequest::GetSignatureHelpRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetSignatureHelpRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetSignatureHelpRequest::GetSignatureHelpRequest(
    ::google::protobuf::Arena* arena,
    const GetSignatureHelpRequest& from)
    : ::google::protobuf::Message(arena) {
  GetSignatureHelpRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.context_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext>(arena, *from._impl_.context_)
                : nullptr;
  _impl_.text_document_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(arena, *from._impl_.text_document_)
                : nullptr;
  _impl_.position_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(arena, *from._impl_.position_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetSignatureHelpRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetSignatureHelpRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, context_),
           0,
           offsetof(Impl_, position_) -
               offsetof(Impl_, context_) +
               sizeof(Impl_::position_));
}
GetSignatureHelpRequest::~GetSignatureHelpRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetSignatureHelpRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.context_;
  delete _impl_.text_document_;
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetSignatureHelpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.context_ != nullptr);
      _impl_.context_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.text_document_ != nullptr);
      _impl_.text_document_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetSignatureHelpRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> GetSignatureHelpRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetSignatureHelpRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.script.grpc.SignatureHelpContext context = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.context_)}},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.text_document_)}},
    // .io.deephaven.proto.backplane.script.grpc.Position position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.SignatureHelpContext context = 1;
    {PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    {PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.text_document_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.Position position = 3;
    {PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.position_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Position>()},
  }}, {{
  }},
};

::uint8_t* GetSignatureHelpRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.SignatureHelpContext context = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  return target;
}

::size_t GetSignatureHelpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .io.deephaven.proto.backplane.script.grpc.SignatureHelpContext context = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.context_);
    }

    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_document_);
    }

    // .io.deephaven.proto.backplane.script.grpc.Position position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetSignatureHelpRequest::_class_data_ = {
    GetSignatureHelpRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetSignatureHelpRequest::GetClassData() const {
  return &_class_data_;
}

void GetSignatureHelpRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetSignatureHelpRequest*>(&to_msg);
  auto& from = static_cast<const GetSignatureHelpRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_context()->::io::deephaven::proto::backplane::script::grpc::SignatureHelpContext::MergeFrom(
          from._internal_context());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
          from._internal_text_document());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
          from._internal_position());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignatureHelpRequest::CopyFrom(const GetSignatureHelpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetSignatureHelpRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetSignatureHelpRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetSignatureHelpRequest::InternalSwap(GetSignatureHelpRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.position_)
      + sizeof(GetSignatureHelpRequest::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(GetSignatureHelpRequest, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

::google::protobuf::Metadata GetSignatureHelpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[33]);
}
// ===================================================================

class SignatureHelpContext::_Internal {
 public:
  using HasBits = decltype(std::declval<SignatureHelpContext>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_._has_bits_);
  static void set_has_trigger_character(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse& active_signature_help(const SignatureHelpContext* msg);
  static void set_has_active_signature_help(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse& SignatureHelpContext::_Internal::active_signature_help(const SignatureHelpContext* msg) {
  return *msg->_impl_.active_signature_help_;
}
SignatureHelpContext::SignatureHelpContext(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
}
inline PROTOBUF_NDEBUG_INLINE SignatureHelpContext::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        trigger_character_(arena, from.trigger_character_) {}

SignatureHelpContext::SignatureHelpContext(
    ::google::protobuf::Arena* arena,
    const SignatureHelpContext& from)
    : ::google::protobuf::Message(arena) {
  SignatureHelpContext* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.active_signature_help_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse>(arena, *from._impl_.active_signature_help_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trigger_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, trigger_kind_),
           offsetof(Impl_, is_retrigger_) -
               offsetof(Impl_, trigger_kind_) +
               sizeof(Impl_::is_retrigger_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
}
inline PROTOBUF_NDEBUG_INLINE SignatureHelpContext::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        trigger_character_(arena) {}

inline void SignatureHelpContext::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, active_signature_help_),
           0,
           offsetof(Impl_, is_retrigger_) -
               offsetof(Impl_, active_signature_help_) +
               sizeof(Impl_::is_retrigger_));
}
SignatureHelpContext::~SignatureHelpContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SignatureHelpContext::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.trigger_character_.Destroy();
  delete _impl_.active_signature_help_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SignatureHelpContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.trigger_character_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.active_signature_help_ != nullptr);
      _impl_.active_signature_help_->Clear();
    }
  }
  ::memset(&_impl_.trigger_kind_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_retrigger_) -
      reinterpret_cast<char*>(&_impl_.trigger_kind_)) + sizeof(_impl_.is_retrigger_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SignatureHelpContext::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 87, 2> SignatureHelpContext::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SignatureHelpContext_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse active_signature_help = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.active_signature_help_)}},
    // int32 trigger_kind = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SignatureHelpContext, _impl_.trigger_kind_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.trigger_kind_)}},
    // optional string trigger_character = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.trigger_character_)}},
    // bool is_retrigger = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SignatureHelpContext, _impl_.is_retrigger_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.is_retrigger_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 trigger_kind = 1;
    {PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.trigger_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional string trigger_character = 2;
    {PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.trigger_character_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_retrigger = 3;
    {PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.is_retrigger_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse active_signature_help = 4;
    {PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.active_signature_help_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse>()},
  }}, {{
    "\75\0\21\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.SignatureHelpContext"
    "trigger_character"
  }},
};

::uint8_t* SignatureHelpContext::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_trigger_kind(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string trigger_character = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_trigger_character();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.SignatureHelpContext.trigger_character");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool is_retrigger = 3;
  if (this->_internal_is_retrigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_retrigger(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse active_signature_help = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::active_signature_help(this),
        _Internal::active_signature_help(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  return target;
}

::size_t SignatureHelpContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string trigger_character = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_trigger_character());
    }

    // .io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse active_signature_help = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.active_signature_help_);
    }

  }
  // int32 trigger_kind = 1;
  if (this->_internal_trigger_kind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_trigger_kind());
  }

  // bool is_retrigger = 3;
  if (this->_internal_is_retrigger() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SignatureHelpContext::_class_data_ = {
    SignatureHelpContext::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SignatureHelpContext::GetClassData() const {
  return &_class_data_;
}

void SignatureHelpContext::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SignatureHelpContext*>(&to_msg);
  auto& from = static_cast<const SignatureHelpContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_trigger_character(from._internal_trigger_character());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_active_signature_help()->::io::deephaven::proto::backplane::script::grpc::GetSignatureHelpResponse::MergeFrom(
          from._internal_active_signature_help());
    }
  }
  if (from._internal_trigger_kind() != 0) {
    _this->_internal_set_trigger_kind(from._internal_trigger_kind());
  }
  if (from._internal_is_retrigger() != 0) {
    _this->_internal_set_is_retrigger(from._internal_is_retrigger());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureHelpContext::CopyFrom(const SignatureHelpContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.SignatureHelpContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SignatureHelpContext::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SignatureHelpContext::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SignatureHelpContext::InternalSwap(SignatureHelpContext* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trigger_character_, &other->_impl_.trigger_character_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.is_retrigger_)
      + sizeof(SignatureHelpContext::_impl_.is_retrigger_)
      - PROTOBUF_FIELD_OFFSET(SignatureHelpContext, _impl_.active_signature_help_)>(
          reinterpret_cast<char*>(&_impl_.active_signature_help_),
          reinterpret_cast<char*>(&other->_impl_.active_signature_help_));
}

::google::protobuf::Metadata SignatureHelpContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[34]);
}
// ===================================================================

class GetSignatureHelpResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSignatureHelpResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_._has_bits_);
  static void set_has_active_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetSignatureHelpResponse::GetSignatureHelpResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetSignatureHelpResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signatures_{visibility, arena, from.signatures_} {}

GetSignatureHelpResponse::GetSignatureHelpResponse(
    ::google::protobuf::Arena* arena,
    const GetSignatureHelpResponse& from)
    : ::google::protobuf::Message(arena) {
  GetSignatureHelpResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, active_signature_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, active_signature_),
           offsetof(Impl_, active_parameter_) -
               offsetof(Impl_, active_signature_) +
               sizeof(Impl_::active_parameter_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetSignatureHelpResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        signatures_{visibility, arena} {}

inline void GetSignatureHelpResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, active_signature_),
           0,
           offsetof(Impl_, active_parameter_) -
               offsetof(Impl_, active_signature_) +
               sizeof(Impl_::active_parameter_));
}
GetSignatureHelpResponse::~GetSignatureHelpResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetSignatureHelpResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetSignatureHelpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.active_signature_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.active_parameter_) -
        reinterpret_cast<char*>(&_impl_.active_signature_)) + sizeof(_impl_.active_parameter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetSignatureHelpResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> GetSignatureHelpResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetSignatureHelpResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .io.deephaven.proto.backplane.script.grpc.SignatureInformation signatures = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.signatures_)}},
    // optional int32 active_signature = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetSignatureHelpResponse, _impl_.active_signature_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_signature_)}},
    // optional int32 active_parameter = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetSignatureHelpResponse, _impl_.active_parameter_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_parameter_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .io.deephaven.proto.backplane.script.grpc.SignatureInformation signatures = 1;
    {PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.signatures_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 active_signature = 2;
    {PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_signature_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 active_parameter = 3;
    {PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_parameter_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::SignatureInformation>()},
  }}, {{
  }},
};

::uint8_t* GetSignatureHelpResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.SignatureInformation signatures = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 active_signature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_active_signature(), target);
  }

  // optional int32 active_parameter = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_active_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  return target;
}

::size_t GetSignatureHelpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.SignatureInformation signatures = 1;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->_internal_signatures()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 active_signature = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_active_signature());
    }

    // optional int32 active_parameter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_active_parameter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetSignatureHelpResponse::_class_data_ = {
    GetSignatureHelpResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetSignatureHelpResponse::GetClassData() const {
  return &_class_data_;
}

void GetSignatureHelpResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetSignatureHelpResponse*>(&to_msg);
  auto& from = static_cast<const GetSignatureHelpResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(
      from._internal_signatures());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.active_signature_ = from._impl_.active_signature_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.active_parameter_ = from._impl_.active_parameter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignatureHelpResponse::CopyFrom(const GetSignatureHelpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetSignatureHelpResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetSignatureHelpResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetSignatureHelpResponse::InternalSwap(GetSignatureHelpResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_parameter_)
      + sizeof(GetSignatureHelpResponse::_impl_.active_parameter_)
      - PROTOBUF_FIELD_OFFSET(GetSignatureHelpResponse, _impl_.active_signature_)>(
          reinterpret_cast<char*>(&_impl_.active_signature_),
          reinterpret_cast<char*>(&other->_impl_.active_signature_));
}

::google::protobuf::Metadata GetSignatureHelpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[35]);
}
// ===================================================================

class SignatureInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<SignatureInformation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& documentation(const SignatureInformation* msg);
  static void set_has_documentation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& SignatureInformation::_Internal::documentation(const SignatureInformation* msg) {
  return *msg->_impl_.documentation_;
}
SignatureInformation::SignatureInformation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
}
inline PROTOBUF_NDEBUG_INLINE SignatureInformation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        parameters_{visibility, arena, from.parameters_},
        label_(arena, from.label_) {}

SignatureInformation::SignatureInformation(
    ::google::protobuf::Arena* arena,
    const SignatureInformation& from)
    : ::google::protobuf::Message(arena) {
  SignatureInformation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.documentation_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::MarkupContent>(arena, *from._impl_.documentation_)
                : nullptr;
  _impl_.active_parameter_ = from._impl_.active_parameter_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
}
inline PROTOBUF_NDEBUG_INLINE SignatureInformation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        parameters_{visibility, arena},
        label_(arena) {}

inline void SignatureInformation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, documentation_),
           0,
           offsetof(Impl_, active_parameter_) -
               offsetof(Impl_, documentation_) +
               sizeof(Impl_::active_parameter_));
}
SignatureInformation::~SignatureInformation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SignatureInformation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.label_.Destroy();
  delete _impl_.documentation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SignatureInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.label_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.documentation_ != nullptr);
    _impl_.documentation_->Clear();
  }
  _impl_.active_parameter_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SignatureInformation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 75, 2> SignatureInformation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SignatureInformation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional int32 active_parameter = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SignatureInformation, _impl_.active_parameter_), 1>(),
     {32, 1, 0, PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.active_parameter_)}},
    // string label = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.label_)}},
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.documentation_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.ParameterInformation parameters = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.parameters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string label = 1;
    {PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.label_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
    {PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.documentation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.script.grpc.ParameterInformation parameters = 3;
    {PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.parameters_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 active_parameter = 4;
    {PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.active_parameter_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::MarkupContent>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::ParameterInformation>()},
  }}, {{
    "\75\5\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.SignatureInformation"
    "label"
  }},
};

::uint8_t* SignatureInformation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.SignatureInformation.label");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::documentation(this),
        _Internal::documentation(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.ParameterInformation parameters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameters().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 active_parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_active_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  return target;
}

::size_t SignatureInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.ParameterInformation parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->_internal_parameters()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.documentation_);
    }

    // optional int32 active_parameter = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_active_parameter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SignatureInformation::_class_data_ = {
    SignatureInformation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SignatureInformation::GetClassData() const {
  return &_class_data_;
}

void SignatureInformation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SignatureInformation*>(&to_msg);
  auto& from = static_cast<const SignatureInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_parameters()->MergeFrom(
      from._internal_parameters());
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_documentation()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
          from._internal_documentation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.active_parameter_ = from._impl_.active_parameter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureInformation::CopyFrom(const SignatureInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.SignatureInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SignatureInformation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SignatureInformation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SignatureInformation::InternalSwap(SignatureInformation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.active_parameter_)
      + sizeof(SignatureInformation::_impl_.active_parameter_)
      - PROTOBUF_FIELD_OFFSET(SignatureInformation, _impl_.documentation_)>(
          reinterpret_cast<char*>(&_impl_.documentation_),
          reinterpret_cast<char*>(&other->_impl_.documentation_));
}

::google::protobuf::Metadata SignatureInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[36]);
}
// ===================================================================

class ParameterInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<ParameterInformation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ParameterInformation, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& documentation(const ParameterInformation* msg);
  static void set_has_documentation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& ParameterInformation::_Internal::documentation(const ParameterInformation* msg) {
  return *msg->_impl_.documentation_;
}
ParameterInformation::ParameterInformation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
}
inline PROTOBUF_NDEBUG_INLINE ParameterInformation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        label_(arena, from.label_) {}

ParameterInformation::ParameterInformation(
    ::google::protobuf::Arena* arena,
    const ParameterInformation& from)
    : ::google::protobuf::Message(arena) {
  ParameterInformation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.documentation_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::MarkupContent>(arena, *from._impl_.documentation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
}
inline PROTOBUF_NDEBUG_INLINE ParameterInformation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        label_(arena) {}

inline void ParameterInformation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.documentation_ = {};
}
ParameterInformation::~ParameterInformation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ParameterInformation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.label_.Destroy();
  delete _impl_.documentation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ParameterInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.documentation_ != nullptr);
    _impl_.documentation_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ParameterInformation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 75, 2> ParameterInformation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ParameterInformation, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ParameterInformation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ParameterInformation, _impl_.documentation_)}},
    // string label = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ParameterInformation, _impl_.label_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string label = 1;
    {PROTOBUF_FIELD_OFFSET(ParameterInformation, _impl_.label_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
    {PROTOBUF_FIELD_OFFSET(ParameterInformation, _impl_.documentation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::MarkupContent>()},
  }}, {{
    "\75\5\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.ParameterInformation"
    "label"
  }},
};

::uint8_t* ParameterInformation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.ParameterInformation.label");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::documentation(this),
        _Internal::documentation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  return target;
}

::size_t ParameterInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // .io.deephaven.proto.backplane.script.grpc.MarkupContent documentation = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.documentation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ParameterInformation::_class_data_ = {
    ParameterInformation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ParameterInformation::GetClassData() const {
  return &_class_data_;
}

void ParameterInformation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ParameterInformation*>(&to_msg);
  auto& from = static_cast<const ParameterInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_documentation()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
        from._internal_documentation());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterInformation::CopyFrom(const ParameterInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.ParameterInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ParameterInformation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ParameterInformation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ParameterInformation::InternalSwap(ParameterInformation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  swap(_impl_.documentation_, other->_impl_.documentation_);
}

::google::protobuf::Metadata ParameterInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[37]);
}
// ===================================================================

class GetHoverRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHoverRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetHoverRequest* msg);
  static void set_has_text_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::Position& position(const GetHoverRequest* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& GetHoverRequest::_Internal::text_document(const GetHoverRequest* msg) {
  return *msg->_impl_.text_document_;
}
const ::io::deephaven::proto::backplane::script::grpc::Position& GetHoverRequest::_Internal::position(const GetHoverRequest* msg) {
  return *msg->_impl_.position_;
}
GetHoverRequest::GetHoverRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetHoverRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetHoverRequest::GetHoverRequest(
    ::google::protobuf::Arena* arena,
    const GetHoverRequest& from)
    : ::google::protobuf::Message(arena) {
  GetHoverRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.text_document_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(arena, *from._impl_.text_document_)
                : nullptr;
  _impl_.position_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Position>(arena, *from._impl_.position_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetHoverRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetHoverRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, text_document_),
           0,
           offsetof(Impl_, position_) -
               offsetof(Impl_, text_document_) +
               sizeof(Impl_::position_));
}
GetHoverRequest::~GetHoverRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetHoverRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.text_document_;
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetHoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.text_document_ != nullptr);
      _impl_.text_document_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetHoverRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetHoverRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetHoverRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.script.grpc.Position position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.position_)}},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.text_document_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
    {PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.text_document_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.Position position = 2;
    {PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Position>()},
  }}, {{
  }},
};

::uint8_t* GetHoverRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Position position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  return target;
}

::size_t GetHoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_document_);
    }

    // .io.deephaven.proto.backplane.script.grpc.Position position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetHoverRequest::_class_data_ = {
    GetHoverRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetHoverRequest::GetClassData() const {
  return &_class_data_;
}

void GetHoverRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetHoverRequest*>(&to_msg);
  auto& from = static_cast<const GetHoverRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
          from._internal_text_document());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::io::deephaven::proto::backplane::script::grpc::Position::MergeFrom(
          from._internal_position());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHoverRequest::CopyFrom(const GetHoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetHoverRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetHoverRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetHoverRequest::InternalSwap(GetHoverRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.position_)
      + sizeof(GetHoverRequest::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(GetHoverRequest, _impl_.text_document_)>(
          reinterpret_cast<char*>(&_impl_.text_document_),
          reinterpret_cast<char*>(&other->_impl_.text_document_));
}

::google::protobuf::Metadata GetHoverRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[38]);
}
// ===================================================================

class GetHoverResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHoverResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& contents(const GetHoverResponse* msg);
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const GetHoverResponse* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::MarkupContent& GetHoverResponse::_Internal::contents(const GetHoverResponse* msg) {
  return *msg->_impl_.contents_;
}
const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& GetHoverResponse::_Internal::range(const GetHoverResponse* msg) {
  return *msg->_impl_.range_;
}
GetHoverResponse::GetHoverResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHoverResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetHoverResponse::GetHoverResponse(
    ::google::protobuf::Arena* arena,
    const GetHoverResponse& from)
    : ::google::protobuf::Message(arena) {
  GetHoverResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.contents_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::MarkupContent>(arena, *from._impl_.contents_)
                : nullptr;
  _impl_.range_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::DocumentRange>(arena, *from._impl_.range_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHoverResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetHoverResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, contents_),
           0,
           offsetof(Impl_, range_) -
               offsetof(Impl_, contents_) +
               sizeof(Impl_::range_));
}
GetHoverResponse::~GetHoverResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetHoverResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.contents_;
  delete _impl_.range_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetHoverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.contents_ != nullptr);
      _impl_.contents_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetHoverResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetHoverResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetHoverResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.range_)}},
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent contents = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.contents_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent contents = 1;
    {PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.contents_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 2;
    {PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.range_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::MarkupContent>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::DocumentRange>()},
  }}, {{
  }},
};

::uint8_t* GetHoverResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.MarkupContent contents = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::contents(this),
        _Internal::contents(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  return target;
}

::size_t GetHoverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.script.grpc.MarkupContent contents = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.contents_);
    }

    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.range_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetHoverResponse::_class_data_ = {
    GetHoverResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetHoverResponse::GetClassData() const {
  return &_class_data_;
}

void GetHoverResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetHoverResponse*>(&to_msg);
  auto& from = static_cast<const GetHoverResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_contents()->::io::deephaven::proto::backplane::script::grpc::MarkupContent::MergeFrom(
          from._internal_contents());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
          from._internal_range());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHoverResponse::CopyFrom(const GetHoverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetHoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetHoverResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetHoverResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetHoverResponse::InternalSwap(GetHoverResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.range_)
      + sizeof(GetHoverResponse::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(GetHoverResponse, _impl_.contents_)>(
          reinterpret_cast<char*>(&_impl_.contents_),
          reinterpret_cast<char*>(&other->_impl_.contents_));
}

::google::protobuf::Metadata GetHoverResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[39]);
}
// ===================================================================

class GetDiagnosticRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDiagnosticRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& text_document(const GetDiagnosticRequest* msg);
  static void set_has_text_document(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_result_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier& GetDiagnosticRequest::_Internal::text_document(const GetDiagnosticRequest* msg) {
  return *msg->_impl_.text_document_;
}
GetDiagnosticRequest::GetDiagnosticRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetDiagnosticRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        identifier_(arena, from.identifier_),
        previous_result_id_(arena, from.previous_result_id_) {}

GetDiagnosticRequest::GetDiagnosticRequest(
    ::google::protobuf::Arena* arena,
    const GetDiagnosticRequest& from)
    : ::google::protobuf::Message(arena) {
  GetDiagnosticRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.text_document_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>(arena, *from._impl_.text_document_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetDiagnosticRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        identifier_(arena),
        previous_result_id_(arena) {}

inline void GetDiagnosticRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.text_document_ = {};
}
GetDiagnosticRequest::~GetDiagnosticRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetDiagnosticRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.previous_result_id_.Destroy();
  delete _impl_.text_document_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetDiagnosticRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.previous_result_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.text_document_ != nullptr);
      _impl_.text_document_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetDiagnosticRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 98, 2> GetDiagnosticRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetDiagnosticRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 2, 0, PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_.text_document_)}},
    // optional string identifier = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_.identifier_)}},
    // optional string previous_result_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_.previous_result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
    {PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_.text_document_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string identifier = 2;
    {PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_.identifier_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string previous_result_id = 3;
    {PROTOBUF_FIELD_OFFSET(GetDiagnosticRequest, _impl_.previous_result_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier>()},
  }}, {{
    "\75\0\12\22\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest"
    "identifier"
    "previous_result_id"
  }},
};

::uint8_t* GetDiagnosticRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::text_document(this),
        _Internal::text_document(this).GetCachedSize(), target, stream);
  }

  // optional string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string previous_result_id = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_previous_result_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest.previous_result_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  return target;
}

::size_t GetDiagnosticRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional string previous_result_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_previous_result_id());
    }

    // .io.deephaven.proto.backplane.script.grpc.VersionedTextDocumentIdentifier text_document = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_document_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetDiagnosticRequest::_class_data_ = {
    GetDiagnosticRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetDiagnosticRequest::GetClassData() const {
  return &_class_data_;
}

void GetDiagnosticRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetDiagnosticRequest*>(&to_msg);
  auto& from = static_cast<const GetDiagnosticRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_previous_result_id(from._internal_previous_result_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_text_document()->::io::deephaven::proto::backplane::script::grpc::VersionedTextDocumentIdentifier::MergeFrom(
          from._internal_text_document());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDiagnosticRequest::CopyFrom(const GetDiagnosticRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetDiagnosticRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetDiagnosticRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetDiagnosticRequest::InternalSwap(GetDiagnosticRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, &other->_impl_.identifier_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.previous_result_id_, &other->_impl_.previous_result_id_, arena);
  swap(_impl_.text_document_, other->_impl_.text_document_);
}

::google::protobuf::Metadata GetDiagnosticRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[40]);
}
// ===================================================================

class GetPullDiagnosticResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPullDiagnosticResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_._has_bits_);
  static void set_has_result_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetPullDiagnosticResponse::GetPullDiagnosticResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetPullDiagnosticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        items_{visibility, arena, from.items_},
        kind_(arena, from.kind_),
        result_id_(arena, from.result_id_) {}

GetPullDiagnosticResponse::GetPullDiagnosticResponse(
    ::google::protobuf::Arena* arena,
    const GetPullDiagnosticResponse& from)
    : ::google::protobuf::Message(arena) {
  GetPullDiagnosticResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetPullDiagnosticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        items_{visibility, arena},
        kind_(arena),
        result_id_(arena) {}

inline void GetPullDiagnosticResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetPullDiagnosticResponse::~GetPullDiagnosticResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetPullDiagnosticResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.kind_.Destroy();
  _impl_.result_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetPullDiagnosticResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.kind_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.result_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetPullDiagnosticResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 88, 2> GetPullDiagnosticResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetPullDiagnosticResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string kind = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_.kind_)}},
    // optional string result_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_.result_id_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic items = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string kind = 1;
    {PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_.kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string result_id = 2;
    {PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic items = 3;
    {PROTOBUF_FIELD_OFFSET(GetPullDiagnosticResponse, _impl_.items_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Diagnostic>()},
  }}, {{
    "\102\4\11\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse"
    "kind"
    "result_id"
  }},
};

::uint8_t* GetPullDiagnosticResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    const std::string& _s = this->_internal_kind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse.kind");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string result_id = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_result_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse.result_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  return target;
}

::size_t GetPullDiagnosticResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string kind = 1;
  if (!this->_internal_kind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_kind());
  }

  // optional string result_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_result_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetPullDiagnosticResponse::_class_data_ = {
    GetPullDiagnosticResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetPullDiagnosticResponse::GetClassData() const {
  return &_class_data_;
}

void GetPullDiagnosticResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetPullDiagnosticResponse*>(&to_msg);
  auto& from = static_cast<const GetPullDiagnosticResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  if (!from._internal_kind().empty()) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_result_id(from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetPullDiagnosticResponse::CopyFrom(const GetPullDiagnosticResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetPullDiagnosticResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetPullDiagnosticResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetPullDiagnosticResponse::InternalSwap(GetPullDiagnosticResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kind_, &other->_impl_.kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_id_, &other->_impl_.result_id_, arena);
}

::google::protobuf::Metadata GetPullDiagnosticResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[41]);
}
// ===================================================================

class GetPublishDiagnosticResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPublishDiagnosticResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetPublishDiagnosticResponse::GetPublishDiagnosticResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetPublishDiagnosticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        diagnostics_{visibility, arena, from.diagnostics_},
        uri_(arena, from.uri_) {}

GetPublishDiagnosticResponse::GetPublishDiagnosticResponse(
    ::google::protobuf::Arena* arena,
    const GetPublishDiagnosticResponse& from)
    : ::google::protobuf::Message(arena) {
  GetPublishDiagnosticResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.version_ = from._impl_.version_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetPublishDiagnosticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        diagnostics_{visibility, arena},
        uri_(arena) {}

inline void GetPublishDiagnosticResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.version_ = {};
}
GetPublishDiagnosticResponse::~GetPublishDiagnosticResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetPublishDiagnosticResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetPublishDiagnosticResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.diagnostics_.Clear();
  _impl_.uri_.ClearToEmpty();
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetPublishDiagnosticResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 81, 2> GetPublishDiagnosticResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetPublishDiagnosticResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uri = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_.uri_)}},
    // optional int32 version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetPublishDiagnosticResponse, _impl_.version_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_.version_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic diagnostics = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_.diagnostics_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uri = 1;
    {PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_.uri_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 version = 2;
    {PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic diagnostics = 3;
    {PROTOBUF_FIELD_OFFSET(GetPublishDiagnosticResponse, _impl_.diagnostics_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Diagnostic>()},
  }}, {{
    "\105\3\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse"
    "uri"
  }},
};

::uint8_t* GetPublishDiagnosticResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse.uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_version(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic diagnostics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_diagnostics_size()); i < n; i++) {
    const auto& repfield = this->_internal_diagnostics().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  return target;
}

::size_t GetPublishDiagnosticResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic diagnostics = 3;
  total_size += 1UL * this->_internal_diagnostics_size();
  for (const auto& msg : this->_internal_diagnostics()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // optional int32 version = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetPublishDiagnosticResponse::_class_data_ = {
    GetPublishDiagnosticResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetPublishDiagnosticResponse::GetClassData() const {
  return &_class_data_;
}

void GetPublishDiagnosticResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetPublishDiagnosticResponse*>(&to_msg);
  auto& from = static_cast<const GetPublishDiagnosticResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_diagnostics()->MergeFrom(
      from._internal_diagnostics());
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetPublishDiagnosticResponse::CopyFrom(const GetPublishDiagnosticResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.GetPublishDiagnosticResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetPublishDiagnosticResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetPublishDiagnosticResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetPublishDiagnosticResponse::InternalSwap(GetPublishDiagnosticResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.diagnostics_.InternalSwap(&other->_impl_.diagnostics_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, &other->_impl_.uri_, arena);
        swap(_impl_.version_, other->_impl_.version_);
}

::google::protobuf::Metadata GetPublishDiagnosticResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[42]);
}
// ===================================================================

class Diagnostic_CodeDescription::_Internal {
 public:
};

Diagnostic_CodeDescription::Diagnostic_CodeDescription(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
}
inline PROTOBUF_NDEBUG_INLINE Diagnostic_CodeDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : href_(arena, from.href_),
        _cached_size_{0} {}

Diagnostic_CodeDescription::Diagnostic_CodeDescription(
    ::google::protobuf::Arena* arena,
    const Diagnostic_CodeDescription& from)
    : ::google::protobuf::Message(arena) {
  Diagnostic_CodeDescription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
}
inline PROTOBUF_NDEBUG_INLINE Diagnostic_CodeDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : href_(arena),
        _cached_size_{0} {}

inline void Diagnostic_CodeDescription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Diagnostic_CodeDescription::~Diagnostic_CodeDescription() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Diagnostic_CodeDescription::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.href_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Diagnostic_CodeDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.href_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Diagnostic_CodeDescription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 80, 2> Diagnostic_CodeDescription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Diagnostic_CodeDescription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string href = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Diagnostic_CodeDescription, _impl_.href_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string href = 1;
    {PROTOBUF_FIELD_OFFSET(Diagnostic_CodeDescription, _impl_.href_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\103\4\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription"
    "href"
  }},
};

::uint8_t* Diagnostic_CodeDescription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string href = 1;
  if (!this->_internal_href().empty()) {
    const std::string& _s = this->_internal_href();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription.href");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  return target;
}

::size_t Diagnostic_CodeDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string href = 1;
  if (!this->_internal_href().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_href());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Diagnostic_CodeDescription::_class_data_ = {
    Diagnostic_CodeDescription::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Diagnostic_CodeDescription::GetClassData() const {
  return &_class_data_;
}

void Diagnostic_CodeDescription::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Diagnostic_CodeDescription*>(&to_msg);
  auto& from = static_cast<const Diagnostic_CodeDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_href().empty()) {
    _this->_internal_set_href(from._internal_href());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Diagnostic_CodeDescription::CopyFrom(const Diagnostic_CodeDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Diagnostic_CodeDescription::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Diagnostic_CodeDescription::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Diagnostic_CodeDescription::InternalSwap(Diagnostic_CodeDescription* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.href_, &other->_impl_.href_, arena);
}

::google::protobuf::Metadata Diagnostic_CodeDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[43]);
}
// ===================================================================

class Diagnostic::_Internal {
 public:
  using HasBits = decltype(std::declval<Diagnostic>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& range(const Diagnostic* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription& code_description(const Diagnostic* msg);
  static void set_has_code_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::DocumentRange& Diagnostic::_Internal::range(const Diagnostic* msg) {
  return *msg->_impl_.range_;
}
const ::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription& Diagnostic::_Internal::code_description(const Diagnostic* msg) {
  return *msg->_impl_.code_description_;
}
Diagnostic::Diagnostic(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic)
}
inline PROTOBUF_NDEBUG_INLINE Diagnostic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tags_{visibility, arena, from.tags_},
        _tags_cached_byte_size_{0},
        code_(arena, from.code_),
        source_(arena, from.source_),
        message_(arena, from.message_),
        data_(arena, from.data_) {}

Diagnostic::Diagnostic(
    ::google::protobuf::Arena* arena,
    const Diagnostic& from)
    : ::google::protobuf::Message(arena) {
  Diagnostic* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.range_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::DocumentRange>(arena, *from._impl_.range_)
                : nullptr;
  _impl_.code_description_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription>(arena, *from._impl_.code_description_)
                : nullptr;
  _impl_.severity_ = from._impl_.severity_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.Diagnostic)
}
inline PROTOBUF_NDEBUG_INLINE Diagnostic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tags_{visibility, arena},
        _tags_cached_byte_size_{0},
        code_(arena),
        source_(arena),
        message_(arena),
        data_(arena) {}

inline void Diagnostic::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, range_),
           0,
           offsetof(Impl_, severity_) -
               offsetof(Impl_, range_) +
               sizeof(Impl_::severity_));
}
Diagnostic::~Diagnostic() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Diagnostic::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.code_.Destroy();
  _impl_.source_.Destroy();
  _impl_.message_.Destroy();
  _impl_.data_.Destroy();
  delete _impl_.range_;
  delete _impl_.code_description_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Diagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.message_.ClearToEmpty();
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.code_description_ != nullptr);
      _impl_.code_description_->Clear();
    }
  }
  _impl_.severity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Diagnostic::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 2, 85, 2> Diagnostic::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Diagnostic_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 3, 0, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.range_)}},
    // .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity severity = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Diagnostic, _impl_.severity_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.severity_)}},
    // optional string code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.code_)}},
    // optional .io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription code_description = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 4, 1, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.code_description_)}},
    // optional string source = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.source_)}},
    // string message = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.message_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag tags = 7;
    {::_pbi::TcParser::FastV32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.tags_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes data = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 2, 0, PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.range_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity severity = 2;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.severity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string code = 3;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.code_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription code_description = 4;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.code_description_), _Internal::kHasBitsOffset + 4, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string source = 5;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.source_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 6;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag tags = 7;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.tags_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // optional bytes data = 9;
    {PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.data_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::DocumentRange>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription>()},
  }}, {{
    "\63\0\0\4\0\6\7\0\0\0\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.Diagnostic"
    "code"
    "source"
    "message"
  }},
};

::uint8_t* Diagnostic::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity severity = 2;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_severity(), target);
  }

  // optional string code = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.Diagnostic.code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription code_description = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::code_description(this),
        _Internal::code_description(this).GetCachedSize(), target, stream);
  }

  // optional string source = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_source();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.Diagnostic.source");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string message = 6;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.Diagnostic.message");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag tags = 7;
  {
    std::size_t byte_size = _impl_._tags_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(7, _internal_tags(),
                                       byte_size, target);
    }
  }

  // optional bytes data = 9;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  return target;
}

::size_t Diagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticTag tags = 7;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_tags_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_tags().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._tags_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_code());
    }

    // optional string source = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_source());
    }

  }
  // string message = 6;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional bytes data = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_data());
    }

    // .io.deephaven.proto.backplane.script.grpc.DocumentRange range = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.range_);
    }

    // optional .io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription code_description = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.code_description_);
    }

  }
  // .io.deephaven.proto.backplane.script.grpc.Diagnostic.DiagnosticSeverity severity = 2;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Diagnostic::_class_data_ = {
    Diagnostic::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Diagnostic::GetClassData() const {
  return &_class_data_;
}

void Diagnostic::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Diagnostic*>(&to_msg);
  auto& from = static_cast<const Diagnostic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_source(from._internal_source());
    }
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_range()->::io::deephaven::proto::backplane::script::grpc::DocumentRange::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_code_description()->::io::deephaven::proto::backplane::script::grpc::Diagnostic_CodeDescription::MergeFrom(
          from._internal_code_description());
    }
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Diagnostic::CopyFrom(const Diagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.Diagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Diagnostic::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Diagnostic::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Diagnostic::InternalSwap(Diagnostic* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_, &other->_impl_.code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, &other->_impl_.source_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.severity_)
      + sizeof(Diagnostic::_impl_.severity_)
      - PROTOBUF_FIELD_OFFSET(Diagnostic, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::google::protobuf::Metadata Diagnostic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[44]);
}
// ===================================================================

class FigureDescriptor_ChartDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_ChartDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_ChartDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        series_{visibility, arena, from.series_},
        multi_series_{visibility, arena, from.multi_series_},
        axes_{visibility, arena, from.axes_},
        title_(arena, from.title_),
        title_font_(arena, from.title_font_),
        title_color_(arena, from.title_color_),
        legend_font_(arena, from.legend_font_),
        legend_color_(arena, from.legend_color_) {}

FigureDescriptor_ChartDescriptor::FigureDescriptor_ChartDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_ChartDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_ChartDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, colspan_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, colspan_),
           offsetof(Impl_, row_) -
               offsetof(Impl_, colspan_) +
               sizeof(Impl_::row_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_ChartDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        series_{visibility, arena},
        multi_series_{visibility, arena},
        axes_{visibility, arena},
        title_(arena),
        title_font_(arena),
        title_color_(arena),
        legend_font_(arena),
        legend_color_(arena) {}

inline void FigureDescriptor_ChartDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, colspan_),
           0,
           offsetof(Impl_, row_) -
               offsetof(Impl_, colspan_) +
               sizeof(Impl_::row_));
}
FigureDescriptor_ChartDescriptor::~FigureDescriptor_ChartDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_ChartDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.title_.Destroy();
  _impl_.title_font_.Destroy();
  _impl_.title_color_.Destroy();
  _impl_.legend_font_.Destroy();
  _impl_.legend_color_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_ChartDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.series_.Clear();
  _impl_.multi_series_.Clear();
  _impl_.axes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_.title_font_.ClearToEmpty();
  _impl_.title_color_.ClearToEmpty();
  _impl_.legend_font_.ClearToEmpty();
  _impl_.legend_color_.ClearToEmpty();
  ::memset(&_impl_.colspan_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.row_) -
      reinterpret_cast<char*>(&_impl_.colspan_)) + sizeof(_impl_.row_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_ChartDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 3, 139, 2> FigureDescriptor_ChartDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_ChartDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 colspan = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_ChartDescriptor, _impl_.colspan_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.colspan_)}},
    // int32 rowspan = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_ChartDescriptor, _impl_.rowspan_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.rowspan_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.series_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.multi_series_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.axes_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_ChartDescriptor, _impl_.chart_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.chart_type_)}},
    // optional string title = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.title_)}},
    // string title_font = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.title_font_)}},
    // string title_color = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.title_color_)}},
    // bool show_legend = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_ChartDescriptor, _impl_.show_legend_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.show_legend_)}},
    // string legend_font = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.legend_font_)}},
    // string legend_color = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.legend_color_)}},
    // bool is3d = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_ChartDescriptor, _impl_.is3d_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.is3d_)}},
    // int32 column = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_ChartDescriptor, _impl_.column_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.column_)}},
    // int32 row = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_ChartDescriptor, _impl_.row_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.row_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 colspan = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.colspan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 rowspan = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.rowspan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.series_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.multi_series_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.axes_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.chart_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string title = 7;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.title_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title_font = 8;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.title_font_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title_color = 9;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.title_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool show_legend = 10;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.show_legend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string legend_font = 11;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.legend_font_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string legend_color = 12;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.legend_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is3d = 13;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.is3d_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 column = 14;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 row = 15;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.row_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SeriesDescriptor>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesDescriptor>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_AxisDescriptor>()},
  }}, {{
    "\111\0\0\0\0\0\0\5\12\13\0\13\14\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor"
    "title"
    "title_font"
    "title_color"
    "legend_font"
    "legend_color"
  }},
};

::uint8_t* FigureDescriptor_ChartDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 colspan = 1;
  if (this->_internal_colspan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_colspan(), target);
  }

  // int32 rowspan = 2;
  if (this->_internal_rowspan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_rowspan(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_size()); i < n; i++) {
    const auto& repfield = this->_internal_series().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_multi_series_size()); i < n; i++) {
    const auto& repfield = this->_internal_multi_series().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_axes_size()); i < n; i++) {
    const auto& repfield = this->_internal_axes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
  if (this->_internal_chart_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_chart_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string title_font = 8;
  if (!this->_internal_title_font().empty()) {
    const std::string& _s = this->_internal_title_font();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_font");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string title_color = 9;
  if (!this->_internal_title_color().empty()) {
    const std::string& _s = this->_internal_title_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.title_color");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // bool show_legend = 10;
  if (this->_internal_show_legend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_show_legend(), target);
  }

  // string legend_font = 11;
  if (!this->_internal_legend_font().empty()) {
    const std::string& _s = this->_internal_legend_font();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_font");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string legend_color = 12;
  if (!this->_internal_legend_color().empty()) {
    const std::string& _s = this->_internal_legend_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.legend_color");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // bool is3d = 13;
  if (this->_internal_is3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_is3d(), target);
  }

  // int32 column = 14;
  if (this->_internal_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_column(), target);
  }

  // int32 row = 15;
  if (this->_internal_row() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  return target;
}

::size_t FigureDescriptor_ChartDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor series = 3;
  total_size += 1UL * this->_internal_series_size();
  for (const auto& msg : this->_internal_series()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor multi_series = 4;
  total_size += 1UL * this->_internal_multi_series_size();
  for (const auto& msg : this->_internal_multi_series()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor axes = 5;
  total_size += 1UL * this->_internal_axes_size();
  for (const auto& msg : this->_internal_axes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional string title = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string title_font = 8;
  if (!this->_internal_title_font().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title_font());
  }

  // string title_color = 9;
  if (!this->_internal_title_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title_color());
  }

  // string legend_font = 11;
  if (!this->_internal_legend_font().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_legend_font());
  }

  // string legend_color = 12;
  if (!this->_internal_legend_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_legend_color());
  }

  // int32 colspan = 1;
  if (this->_internal_colspan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_colspan());
  }

  // int32 rowspan = 2;
  if (this->_internal_rowspan() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rowspan());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor.ChartType chart_type = 6;
  if (this->_internal_chart_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_chart_type());
  }

  // bool show_legend = 10;
  if (this->_internal_show_legend() != 0) {
    total_size += 2;
  }

  // bool is3d = 13;
  if (this->_internal_is3d() != 0) {
    total_size += 2;
  }

  // int32 column = 14;
  if (this->_internal_column() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_column());
  }

  // int32 row = 15;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_row());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_ChartDescriptor::_class_data_ = {
    FigureDescriptor_ChartDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_ChartDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_ChartDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_ChartDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_ChartDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_series()->MergeFrom(
      from._internal_series());
  _this->_internal_mutable_multi_series()->MergeFrom(
      from._internal_multi_series());
  _this->_internal_mutable_axes()->MergeFrom(
      from._internal_axes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_title_font().empty()) {
    _this->_internal_set_title_font(from._internal_title_font());
  }
  if (!from._internal_title_color().empty()) {
    _this->_internal_set_title_color(from._internal_title_color());
  }
  if (!from._internal_legend_font().empty()) {
    _this->_internal_set_legend_font(from._internal_legend_font());
  }
  if (!from._internal_legend_color().empty()) {
    _this->_internal_set_legend_color(from._internal_legend_color());
  }
  if (from._internal_colspan() != 0) {
    _this->_internal_set_colspan(from._internal_colspan());
  }
  if (from._internal_rowspan() != 0) {
    _this->_internal_set_rowspan(from._internal_rowspan());
  }
  if (from._internal_chart_type() != 0) {
    _this->_internal_set_chart_type(from._internal_chart_type());
  }
  if (from._internal_show_legend() != 0) {
    _this->_internal_set_show_legend(from._internal_show_legend());
  }
  if (from._internal_is3d() != 0) {
    _this->_internal_set_is3d(from._internal_is3d());
  }
  if (from._internal_column() != 0) {
    _this->_internal_set_column(from._internal_column());
  }
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_ChartDescriptor::CopyFrom(const FigureDescriptor_ChartDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_ChartDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_ChartDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_ChartDescriptor::InternalSwap(FigureDescriptor_ChartDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.series_.InternalSwap(&other->_impl_.series_);
  _impl_.multi_series_.InternalSwap(&other->_impl_.multi_series_);
  _impl_.axes_.InternalSwap(&other->_impl_.axes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_font_, &other->_impl_.title_font_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_color_, &other->_impl_.title_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.legend_font_, &other->_impl_.legend_font_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.legend_color_, &other->_impl_.legend_color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.row_)
      + sizeof(FigureDescriptor_ChartDescriptor::_impl_.row_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_ChartDescriptor, _impl_.colspan_)>(
          reinterpret_cast<char*>(&_impl_.colspan_),
          reinterpret_cast<char*>(&other->_impl_.colspan_));
}

::google::protobuf::Metadata FigureDescriptor_ChartDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[45]);
}
// ===================================================================

class FigureDescriptor_SeriesDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_SeriesDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_._has_bits_);
  static void set_has_lines_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shapes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_point_label_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_SeriesDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_sources_{visibility, arena, from.data_sources_},
        name_(arena, from.name_),
        line_color_(arena, from.line_color_),
        point_label_format_(arena, from.point_label_format_),
        x_tool_tip_pattern_(arena, from.x_tool_tip_pattern_),
        y_tool_tip_pattern_(arena, from.y_tool_tip_pattern_),
        shape_label_(arena, from.shape_label_),
        shape_color_(arena, from.shape_color_),
        shape_(arena, from.shape_) {}

FigureDescriptor_SeriesDescriptor::FigureDescriptor_SeriesDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_SeriesDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_SeriesDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, plot_style_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, plot_style_),
           offsetof(Impl_, shape_size_) -
               offsetof(Impl_, plot_style_) +
               sizeof(Impl_::shape_size_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_SeriesDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        data_sources_{visibility, arena},
        name_(arena),
        line_color_(arena),
        point_label_format_(arena),
        x_tool_tip_pattern_(arena),
        y_tool_tip_pattern_(arena),
        shape_label_(arena),
        shape_color_(arena),
        shape_(arena) {}

inline void FigureDescriptor_SeriesDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, plot_style_),
           0,
           offsetof(Impl_, shape_size_) -
               offsetof(Impl_, plot_style_) +
               sizeof(Impl_::shape_size_));
}
FigureDescriptor_SeriesDescriptor::~FigureDescriptor_SeriesDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_SeriesDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.line_color_.Destroy();
  _impl_.point_label_format_.Destroy();
  _impl_.x_tool_tip_pattern_.Destroy();
  _impl_.y_tool_tip_pattern_.Destroy();
  _impl_.shape_label_.Destroy();
  _impl_.shape_color_.Destroy();
  _impl_.shape_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_SeriesDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_sources_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.line_color_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.point_label_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_tool_tip_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.y_tool_tip_pattern_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.shape_label_.ClearToEmpty();
  _impl_.shape_color_.ClearToEmpty();
  _impl_.shape_.ClearToEmpty();
  _impl_.plot_style_ = 0;
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.lines_visible_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.shapes_visible_) -
        reinterpret_cast<char*>(&_impl_.lines_visible_)) + sizeof(_impl_.shapes_visible_));
  }
  _impl_.gradient_visible_ = false;
  _impl_.shape_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_SeriesDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 1, 186, 2> FigureDescriptor_SeriesDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934592,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_SeriesDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_SeriesDescriptor, _impl_.plot_style_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.plot_style_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.name_)}},
    // optional bool lines_visible = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_SeriesDescriptor, _impl_.lines_visible_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.lines_visible_)}},
    // optional bool shapes_visible = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_SeriesDescriptor, _impl_.shapes_visible_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shapes_visible_)}},
    // bool gradient_visible = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_SeriesDescriptor, _impl_.gradient_visible_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.gradient_visible_)}},
    // string line_color = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.line_color_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string point_label_format = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.point_label_format_)}},
    // optional string x_tool_tip_pattern = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.x_tool_tip_pattern_)}},
    // optional string y_tool_tip_pattern = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 2, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.y_tool_tip_pattern_)}},
    // string shape_label = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_label_)}},
    // optional double shape_size = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 5, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_size_)}},
    // string shape_color = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_color_)}},
    // string shape = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.data_sources_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.plot_style_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool lines_visible = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.lines_visible_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool shapes_visible = 4;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shapes_visible_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool gradient_visible = 5;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.gradient_visible_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string line_color = 6;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.line_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string point_label_format = 8;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.point_label_format_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string x_tool_tip_pattern = 9;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.x_tool_tip_pattern_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string y_tool_tip_pattern = 10;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.y_tool_tip_pattern_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string shape_label = 11;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_label_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double shape_size = 12;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_size_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // string shape_color = 13;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string shape = 14;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.data_sources_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_SourceDescriptor>()},
  }}, {{
    "\112\0\4\0\0\0\12\22\22\22\13\0\13\5\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor"
    "name"
    "line_color"
    "point_label_format"
    "x_tool_tip_pattern"
    "y_tool_tip_pattern"
    "shape_label"
    "shape_color"
    "shape"
  }},
};

::uint8_t* FigureDescriptor_SeriesDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_plot_style(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool lines_visible = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_lines_visible(), target);
  }

  // optional bool shapes_visible = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_shapes_visible(), target);
  }

  // bool gradient_visible = 5;
  if (this->_internal_gradient_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_gradient_visible(), target);
  }

  // string line_color = 6;
  if (!this->_internal_line_color().empty()) {
    const std::string& _s = this->_internal_line_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.line_color");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string point_label_format = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_point_label_format();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.point_label_format");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string x_tool_tip_pattern = 9;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_x_tool_tip_pattern();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.x_tool_tip_pattern");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string y_tool_tip_pattern = 10;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_y_tool_tip_pattern();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.y_tool_tip_pattern");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string shape_label = 11;
  if (!this->_internal_shape_label().empty()) {
    const std::string& _s = this->_internal_shape_label();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_label");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional double shape_size = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_shape_size(), target);
  }

  // string shape_color = 13;
  if (!this->_internal_shape_color().empty()) {
    const std::string& _s = this->_internal_shape_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape_color");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string shape = 14;
  if (!this->_internal_shape().empty()) {
    const std::string& _s = this->_internal_shape();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor.shape");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_sources().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  return target;
}

::size_t FigureDescriptor_SeriesDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor data_sources = 15;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->_internal_data_sources()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string line_color = 6;
  if (!this->_internal_line_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_line_color());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string point_label_format = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_point_label_format());
    }

    // optional string x_tool_tip_pattern = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_x_tool_tip_pattern());
    }

    // optional string y_tool_tip_pattern = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_y_tool_tip_pattern());
    }

  }
  // string shape_label = 11;
  if (!this->_internal_shape_label().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_shape_label());
  }

  // string shape_color = 13;
  if (!this->_internal_shape_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_shape_color());
  }

  // string shape = 14;
  if (!this->_internal_shape().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_shape());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_plot_style());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional bool lines_visible = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool shapes_visible = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  // bool gradient_visible = 5;
  if (this->_internal_gradient_visible() != 0) {
    total_size += 2;
  }

  // optional double shape_size = 12;
  if (cached_has_bits & 0x00000020u) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_SeriesDescriptor::_class_data_ = {
    FigureDescriptor_SeriesDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_SeriesDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_SeriesDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_SeriesDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_SeriesDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_sources()->MergeFrom(
      from._internal_data_sources());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_line_color().empty()) {
    _this->_internal_set_line_color(from._internal_line_color());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_point_label_format(from._internal_point_label_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_x_tool_tip_pattern(from._internal_x_tool_tip_pattern());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_y_tool_tip_pattern(from._internal_y_tool_tip_pattern());
    }
  }
  if (!from._internal_shape_label().empty()) {
    _this->_internal_set_shape_label(from._internal_shape_label());
  }
  if (!from._internal_shape_color().empty()) {
    _this->_internal_set_shape_color(from._internal_shape_color());
  }
  if (!from._internal_shape().empty()) {
    _this->_internal_set_shape(from._internal_shape());
  }
  if (from._internal_plot_style() != 0) {
    _this->_internal_set_plot_style(from._internal_plot_style());
  }
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lines_visible_ = from._impl_.lines_visible_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shapes_visible_ = from._impl_.shapes_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_gradient_visible() != 0) {
    _this->_internal_set_gradient_visible(from._internal_gradient_visible());
  }
  if (cached_has_bits & 0x00000020u) {
    _this->_internal_set_shape_size(from._internal_shape_size());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_SeriesDescriptor::CopyFrom(const FigureDescriptor_SeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_SeriesDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_SeriesDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_SeriesDescriptor::InternalSwap(FigureDescriptor_SeriesDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_sources_.InternalSwap(&other->_impl_.data_sources_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.line_color_, &other->_impl_.line_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.point_label_format_, &other->_impl_.point_label_format_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x_tool_tip_pattern_, &other->_impl_.x_tool_tip_pattern_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.y_tool_tip_pattern_, &other->_impl_.y_tool_tip_pattern_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shape_label_, &other->_impl_.shape_label_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shape_color_, &other->_impl_.shape_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shape_, &other->_impl_.shape_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.shape_size_)
      + sizeof(FigureDescriptor_SeriesDescriptor::_impl_.shape_size_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_SeriesDescriptor, _impl_.plot_style_)>(
          reinterpret_cast<char*>(&_impl_.plot_style_),
          reinterpret_cast<char*>(&other->_impl_.plot_style_));
}

::google::protobuf::Metadata FigureDescriptor_SeriesDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[46]);
}
// ===================================================================

class FigureDescriptor_MultiSeriesDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_MultiSeriesDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& line_color(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_line_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_color(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_point_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& lines_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_lines_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& points_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_points_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& gradient_visible(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_gradient_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_label_format(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_point_label_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& x_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_x_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& y_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_y_tool_tip_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_label(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_point_label(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault& point_size(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_point_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& point_shape(const FigureDescriptor_MultiSeriesDescriptor* msg);
  static void set_has_point_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::line_color(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.line_color_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::point_color(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_color_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::lines_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.lines_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::points_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.points_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::gradient_visible(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.gradient_visible_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::point_label_format(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_label_format_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::x_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.x_tool_tip_pattern_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::y_tool_tip_pattern(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.y_tool_tip_pattern_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::point_label(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_label_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::point_size(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_size_;
}
const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault& FigureDescriptor_MultiSeriesDescriptor::_Internal::point_shape(const FigureDescriptor_MultiSeriesDescriptor* msg) {
  return *msg->_impl_.point_shape_;
}
FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_MultiSeriesDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_sources_{visibility, arena, from.data_sources_},
        name_(arena, from.name_) {}

FigureDescriptor_MultiSeriesDescriptor::FigureDescriptor_MultiSeriesDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_MultiSeriesDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_MultiSeriesDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.line_color_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>(arena, *from._impl_.line_color_)
                : nullptr;
  _impl_.point_color_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>(arena, *from._impl_.point_color_)
                : nullptr;
  _impl_.lines_visible_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault>(arena, *from._impl_.lines_visible_)
                : nullptr;
  _impl_.points_visible_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault>(arena, *from._impl_.points_visible_)
                : nullptr;
  _impl_.gradient_visible_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault>(arena, *from._impl_.gradient_visible_)
                : nullptr;
  _impl_.point_label_format_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>(arena, *from._impl_.point_label_format_)
                : nullptr;
  _impl_.x_tool_tip_pattern_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>(arena, *from._impl_.x_tool_tip_pattern_)
                : nullptr;
  _impl_.y_tool_tip_pattern_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>(arena, *from._impl_.y_tool_tip_pattern_)
                : nullptr;
  _impl_.point_label_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>(arena, *from._impl_.point_label_)
                : nullptr;
  _impl_.point_size_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault>(arena, *from._impl_.point_size_)
                : nullptr;
  _impl_.point_shape_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>(arena, *from._impl_.point_shape_)
                : nullptr;
  _impl_.plot_style_ = from._impl_.plot_style_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_MultiSeriesDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        data_sources_{visibility, arena},
        name_(arena) {}

inline void FigureDescriptor_MultiSeriesDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, line_color_),
           0,
           offsetof(Impl_, plot_style_) -
               offsetof(Impl_, line_color_) +
               sizeof(Impl_::plot_style_));
}
FigureDescriptor_MultiSeriesDescriptor::~FigureDescriptor_MultiSeriesDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_MultiSeriesDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.line_color_;
  delete _impl_.point_color_;
  delete _impl_.lines_visible_;
  delete _impl_.points_visible_;
  delete _impl_.gradient_visible_;
  delete _impl_.point_label_format_;
  delete _impl_.x_tool_tip_pattern_;
  delete _impl_.y_tool_tip_pattern_;
  delete _impl_.point_label_;
  delete _impl_.point_size_;
  delete _impl_.point_shape_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_MultiSeriesDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_sources_.Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.line_color_ != nullptr);
      _impl_.line_color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.point_color_ != nullptr);
      _impl_.point_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.lines_visible_ != nullptr);
      _impl_.lines_visible_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.points_visible_ != nullptr);
      _impl_.points_visible_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.gradient_visible_ != nullptr);
      _impl_.gradient_visible_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.point_label_format_ != nullptr);
      _impl_.point_label_format_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.x_tool_tip_pattern_ != nullptr);
      _impl_.x_tool_tip_pattern_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.y_tool_tip_pattern_ != nullptr);
      _impl_.y_tool_tip_pattern_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.point_label_ != nullptr);
      _impl_.point_label_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.point_size_ != nullptr);
      _impl_.point_size_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.point_shape_ != nullptr);
      _impl_.point_shape_->Clear();
    }
  }
  _impl_.plot_style_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_MultiSeriesDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 12, 100, 2> FigureDescriptor_MultiSeriesDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_MultiSeriesDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_MultiSeriesDescriptor, _impl_.plot_style_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.plot_style_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.name_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.line_color_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_color_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.lines_visible_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.points_visible_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 4, 4, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.gradient_visible_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 5, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_format_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 6, 6, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.x_tool_tip_pattern_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 7, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.y_tool_tip_pattern_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 8, 8, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 9, 9, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_size_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 10, 10, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_shape_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 11, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.data_sources_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.plot_style_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.line_color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_color_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.lines_visible_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.points_visible_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.gradient_visible_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_format_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.x_tool_tip_pattern_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.y_tool_tip_pattern_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_label_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_size_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.point_shape_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.data_sources_), -1, 11,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_MultiSeriesSourceDescriptor>()},
  }}, {{
    "\117\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor"
    "name"
  }},
};

::uint8_t* FigureDescriptor_MultiSeriesDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_plot_style(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::line_color(this),
        _Internal::line_color(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::point_color(this),
        _Internal::point_color(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::lines_visible(this),
        _Internal::lines_visible(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::points_visible(this),
        _Internal::points_visible(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::gradient_visible(this),
        _Internal::gradient_visible(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::point_label_format(this),
        _Internal::point_label_format(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::x_tool_tip_pattern(this),
        _Internal::x_tool_tip_pattern(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::y_tool_tip_pattern(this),
        _Internal::y_tool_tip_pattern(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::point_label(this),
        _Internal::point_label(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::point_size(this),
        _Internal::point_size(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::point_shape(this),
        _Internal::point_shape(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_sources().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  return target;
}

::size_t FigureDescriptor_MultiSeriesDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor data_sources = 14;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->_internal_data_sources()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault line_color = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.line_color_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_color = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point_color_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault lines_visible = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lines_visible_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault points_visible = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.points_visible_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault gradient_visible = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gradient_visible_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label_format = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point_label_format_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault x_tool_tip_pattern = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.x_tool_tip_pattern_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault y_tool_tip_pattern = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.y_tool_tip_pattern_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_label = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point_label_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault point_size = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point_size_);
    }

    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault point_shape = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point_shape_);
    }

  }
  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesPlotStyle plot_style = 1;
  if (this->_internal_plot_style() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_plot_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_MultiSeriesDescriptor::_class_data_ = {
    FigureDescriptor_MultiSeriesDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_MultiSeriesDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_MultiSeriesDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_MultiSeriesDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_MultiSeriesDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_sources()->MergeFrom(
      from._internal_data_sources());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_line_color()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
          from._internal_line_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_point_color()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
          from._internal_point_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lines_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(
          from._internal_lines_visible());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_points_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(
          from._internal_points_visible());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_gradient_visible()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BoolMapWithDefault::MergeFrom(
          from._internal_gradient_visible());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_point_label_format()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
          from._internal_point_label_format());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_x_tool_tip_pattern()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
          from._internal_x_tool_tip_pattern());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_y_tool_tip_pattern()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
          from._internal_y_tool_tip_pattern());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_point_label()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
          from._internal_point_label());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_point_size()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_DoubleMapWithDefault::MergeFrom(
          from._internal_point_size());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_point_shape()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_StringMapWithDefault::MergeFrom(
          from._internal_point_shape());
    }
  }
  if (from._internal_plot_style() != 0) {
    _this->_internal_set_plot_style(from._internal_plot_style());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_MultiSeriesDescriptor::CopyFrom(const FigureDescriptor_MultiSeriesDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_MultiSeriesDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_MultiSeriesDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_MultiSeriesDescriptor::InternalSwap(FigureDescriptor_MultiSeriesDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_sources_.InternalSwap(&other->_impl_.data_sources_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.plot_style_)
      + sizeof(FigureDescriptor_MultiSeriesDescriptor::_impl_.plot_style_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesDescriptor, _impl_.line_color_)>(
          reinterpret_cast<char*>(&_impl_.line_color_),
          reinterpret_cast<char*>(&other->_impl_.line_color_));
}

::google::protobuf::Metadata FigureDescriptor_MultiSeriesDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[47]);
}
// ===================================================================

class FigureDescriptor_StringMapWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_StringMapWithDefault>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_._has_bits_);
  static void set_has_default_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_StringMapWithDefault::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        keys_{visibility, arena, from.keys_},
        values_{visibility, arena, from.values_},
        default_string_(arena, from.default_string_) {}

FigureDescriptor_StringMapWithDefault::FigureDescriptor_StringMapWithDefault(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_StringMapWithDefault& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_StringMapWithDefault* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_StringMapWithDefault::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        keys_{visibility, arena},
        values_{visibility, arena},
        default_string_(arena) {}

inline void FigureDescriptor_StringMapWithDefault::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FigureDescriptor_StringMapWithDefault::~FigureDescriptor_StringMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_StringMapWithDefault::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.default_string_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_StringMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.default_string_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_StringMapWithDefault::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 111, 2> FigureDescriptor_StringMapWithDefault::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FigureDescriptor_StringMapWithDefault_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string default_string = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_.default_string_)}},
    // repeated string keys = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_.keys_)}},
    // repeated string values = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string default_string = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_.default_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string keys = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_.keys_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string values = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_StringMapWithDefault, _impl_.values_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\116\16\4\6\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault"
    "default_string"
    "keys"
    "values"
  }},
};

::uint8_t* FigureDescriptor_StringMapWithDefault::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string default_string = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_default_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.default_string");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_keys().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; ++i) {
    const auto& s = this->_internal_values().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault.values");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  return target;
}

::size_t FigureDescriptor_StringMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_keys().size());
  for (int i = 0, n = _internal_keys().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_keys().Get(i));
  }
  // repeated string values = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_values().size());
  for (int i = 0, n = _internal_values().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_values().Get(i));
  }
  // optional string default_string = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_default_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_StringMapWithDefault::_class_data_ = {
    FigureDescriptor_StringMapWithDefault::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_StringMapWithDefault::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_StringMapWithDefault::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_StringMapWithDefault*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_StringMapWithDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_default_string(from._internal_default_string());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_StringMapWithDefault::CopyFrom(const FigureDescriptor_StringMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_StringMapWithDefault::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_StringMapWithDefault::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_StringMapWithDefault::InternalSwap(FigureDescriptor_StringMapWithDefault* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.default_string_, &other->_impl_.default_string_, arena);
}

::google::protobuf::Metadata FigureDescriptor_StringMapWithDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[48]);
}
// ===================================================================

class FigureDescriptor_DoubleMapWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_DoubleMapWithDefault>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_._has_bits_);
  static void set_has_default_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_DoubleMapWithDefault::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        keys_{visibility, arena, from.keys_},
        values_{visibility, arena, from.values_} {}

FigureDescriptor_DoubleMapWithDefault::FigureDescriptor_DoubleMapWithDefault(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_DoubleMapWithDefault& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_DoubleMapWithDefault* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.default_double_ = from._impl_.default_double_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_DoubleMapWithDefault::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        keys_{visibility, arena},
        values_{visibility, arena} {}

inline void FigureDescriptor_DoubleMapWithDefault::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.default_double_ = {};
}
FigureDescriptor_DoubleMapWithDefault::~FigureDescriptor_DoubleMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_DoubleMapWithDefault::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_DoubleMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  _impl_.default_double_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_DoubleMapWithDefault::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 91, 2> FigureDescriptor_DoubleMapWithDefault::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FigureDescriptor_DoubleMapWithDefault_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double default_double = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_.default_double_)}},
    // repeated string keys = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_.keys_)}},
    // repeated double values = 3;
    {::_pbi::TcParser::FastF64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double default_double = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_.default_double_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated string keys = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_.keys_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated double values = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_DoubleMapWithDefault, _impl_.values_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
    "\116\0\4\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault"
    "keys"
  }},
};

::uint8_t* FigureDescriptor_DoubleMapWithDefault::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double default_double = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_default_double(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_keys().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated double values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  return target;
}

::size_t FigureDescriptor_DoubleMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_keys().size());
  for (int i = 0, n = _internal_keys().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_keys().Get(i));
  }
  // repeated double values = 3;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // optional double default_double = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_DoubleMapWithDefault::_class_data_ = {
    FigureDescriptor_DoubleMapWithDefault::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_DoubleMapWithDefault::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_DoubleMapWithDefault::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_DoubleMapWithDefault*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_DoubleMapWithDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_default_double(from._internal_default_double());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_DoubleMapWithDefault::CopyFrom(const FigureDescriptor_DoubleMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_DoubleMapWithDefault::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_DoubleMapWithDefault::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_DoubleMapWithDefault::InternalSwap(FigureDescriptor_DoubleMapWithDefault* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
        swap(_impl_.default_double_, other->_impl_.default_double_);
}

::google::protobuf::Metadata FigureDescriptor_DoubleMapWithDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[49]);
}
// ===================================================================

class FigureDescriptor_BoolMapWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_BoolMapWithDefault>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_._has_bits_);
  static void set_has_default_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BoolMapWithDefault::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        keys_{visibility, arena, from.keys_},
        values_{visibility, arena, from.values_} {}

FigureDescriptor_BoolMapWithDefault::FigureDescriptor_BoolMapWithDefault(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_BoolMapWithDefault& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_BoolMapWithDefault* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.default_bool_ = from._impl_.default_bool_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BoolMapWithDefault::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        keys_{visibility, arena},
        values_{visibility, arena} {}

inline void FigureDescriptor_BoolMapWithDefault::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.default_bool_ = {};
}
FigureDescriptor_BoolMapWithDefault::~FigureDescriptor_BoolMapWithDefault() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_BoolMapWithDefault::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_BoolMapWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  _impl_.default_bool_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_BoolMapWithDefault::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 89, 2> FigureDescriptor_BoolMapWithDefault::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FigureDescriptor_BoolMapWithDefault_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool default_bool = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_BoolMapWithDefault, _impl_.default_bool_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_.default_bool_)}},
    // repeated string keys = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_.keys_)}},
    // repeated bool values = 3;
    {::_pbi::TcParser::FastV8P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool default_bool = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_.default_bool_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated string keys = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_.keys_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated bool values = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BoolMapWithDefault, _impl_.values_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
  }},
  // no aux_entries
  {{
    "\114\0\4\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault"
    "keys"
  }},
};

::uint8_t* FigureDescriptor_BoolMapWithDefault::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool default_bool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_default_bool(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_keys().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated bool values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  return target;
}

::size_t FigureDescriptor_BoolMapWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_keys().size());
  for (int i = 0, n = _internal_keys().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_keys().Get(i));
  }
  // repeated bool values = 3;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // optional bool default_bool = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_BoolMapWithDefault::_class_data_ = {
    FigureDescriptor_BoolMapWithDefault::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_BoolMapWithDefault::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_BoolMapWithDefault::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BoolMapWithDefault*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BoolMapWithDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_default_bool(from._internal_default_bool());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BoolMapWithDefault::CopyFrom(const FigureDescriptor_BoolMapWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_BoolMapWithDefault::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_BoolMapWithDefault::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_BoolMapWithDefault::InternalSwap(FigureDescriptor_BoolMapWithDefault* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
        swap(_impl_.default_bool_, other->_impl_.default_bool_);
}

::google::protobuf::Metadata FigureDescriptor_BoolMapWithDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[50]);
}
// ===================================================================

class FigureDescriptor_AxisDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_AxisDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_._has_bits_);
  static void set_has_format_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gap_between_major_ticks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor& business_calendar_descriptor(const FigureDescriptor_AxisDescriptor* msg);
  static void set_has_business_calendar_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor& FigureDescriptor_AxisDescriptor::_Internal::business_calendar_descriptor(const FigureDescriptor_AxisDescriptor* msg) {
  return *msg->_impl_.business_calendar_descriptor_;
}
FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_AxisDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        major_tick_locations_{visibility, arena, from.major_tick_locations_},
        id_(arena, from.id_),
        label_(arena, from.label_),
        label_font_(arena, from.label_font_),
        ticks_font_(arena, from.ticks_font_),
        format_pattern_(arena, from.format_pattern_),
        color_(arena, from.color_) {}

FigureDescriptor_AxisDescriptor::FigureDescriptor_AxisDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_AxisDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_AxisDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.business_calendar_descriptor_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor>(arena, *from._impl_.business_calendar_descriptor_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, format_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, format_type_),
           offsetof(Impl_, tick_label_angle_) -
               offsetof(Impl_, format_type_) +
               sizeof(Impl_::tick_label_angle_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_AxisDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        major_tick_locations_{visibility, arena},
        id_(arena),
        label_(arena),
        label_font_(arena),
        ticks_font_(arena),
        format_pattern_(arena),
        color_(arena) {}

inline void FigureDescriptor_AxisDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, business_calendar_descriptor_),
           0,
           offsetof(Impl_, tick_label_angle_) -
               offsetof(Impl_, business_calendar_descriptor_) +
               sizeof(Impl_::tick_label_angle_));
}
FigureDescriptor_AxisDescriptor::~FigureDescriptor_AxisDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_AxisDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.label_.Destroy();
  _impl_.label_font_.Destroy();
  _impl_.ticks_font_.Destroy();
  _impl_.format_pattern_.Destroy();
  _impl_.color_.Destroy();
  delete _impl_.business_calendar_descriptor_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_AxisDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.major_tick_locations_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.label_font_.ClearToEmpty();
  _impl_.ticks_font_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.format_pattern_.ClearNonDefaultToEmpty();
  }
  _impl_.color_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    ABSL_DCHECK(_impl_.business_calendar_descriptor_ != nullptr);
    _impl_.business_calendar_descriptor_->Clear();
  }
  ::memset(&_impl_.format_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_range_) -
      reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.max_range_));
  _impl_.gap_between_major_ticks_ = 0;
  ::memset(&_impl_.minor_tick_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tick_label_angle_) -
      reinterpret_cast<char*>(&_impl_.minor_tick_count_)) + sizeof(_impl_.tick_label_angle_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_AxisDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 1, 143, 2> FigureDescriptor_AxisDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_AxisDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.id_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_AxisDescriptor, _impl_.format_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.format_type_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_AxisDescriptor, _impl_.type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.type_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_AxisDescriptor, _impl_.position_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.position_)}},
    // bool log = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_AxisDescriptor, _impl_.log_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.log_)}},
    // string label = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.label_)}},
    // string label_font = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.label_font_)}},
    // string ticks_font = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.ticks_font_)}},
    // optional string format_pattern = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.format_pattern_)}},
    // string color = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.color_)}},
    // double min_range = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.min_range_)}},
    // double max_range = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.max_range_)}},
    // bool minor_ticks_visible = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_AxisDescriptor, _impl_.minor_ticks_visible_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.minor_ticks_visible_)}},
    // bool major_ticks_visible = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_AxisDescriptor, _impl_.major_ticks_visible_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.major_ticks_visible_)}},
    // int32 minor_tick_count = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_AxisDescriptor, _impl_.minor_tick_count_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.minor_tick_count_)}},
    // optional double gap_between_major_ticks = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 2, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.gap_between_major_ticks_)}},
    // repeated double major_tick_locations = 17;
    {::_pbi::TcParser::FastF64P2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.major_tick_locations_)}},
    // double tick_label_angle = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.tick_label_angle_)}},
    // bool invert = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.invert_)}},
    // bool is_time_axis = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.is_time_axis_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 1, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.business_calendar_descriptor_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.format_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.position_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool log = 5;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.log_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string label = 6;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.label_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string label_font = 7;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.label_font_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticks_font = 8;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.ticks_font_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string format_pattern = 9;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.format_pattern_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string color = 10;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double min_range = 11;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.min_range_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double max_range = 12;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.max_range_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool minor_ticks_visible = 13;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.minor_ticks_visible_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool major_ticks_visible = 14;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.major_ticks_visible_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 minor_tick_count = 15;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.minor_tick_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional double gap_between_major_ticks = 16;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.gap_between_major_ticks_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated double major_tick_locations = 17;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.major_tick_locations_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // double tick_label_angle = 18;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.tick_label_angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool invert = 19;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.invert_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_time_axis = 20;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.is_time_axis_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.business_calendar_descriptor_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor>()},
  }}, {{
    "\110\2\0\0\0\0\5\12\12\16\5\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor"
    "id"
    "label"
    "label_font"
    "ticks_font"
    "format_pattern"
    "color"
  }},
};

::uint8_t* FigureDescriptor_AxisDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
  if (this->_internal_format_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_format_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_position(), target);
  }

  // bool log = 5;
  if (this->_internal_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_log(), target);
  }

  // string label = 6;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string label_font = 7;
  if (!this->_internal_label_font().empty()) {
    const std::string& _s = this->_internal_label_font();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.label_font");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string ticks_font = 8;
  if (!this->_internal_ticks_font().empty()) {
    const std::string& _s = this->_internal_ticks_font();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.ticks_font");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string format_pattern = 9;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_format_pattern();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.format_pattern");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string color = 10;
  if (!this->_internal_color().empty()) {
    const std::string& _s = this->_internal_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.color");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // double min_range = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_min_range = this->_internal_min_range();
  ::uint64_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_min_range(), target);
  }

  // double max_range = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_max_range = this->_internal_max_range();
  ::uint64_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_max_range(), target);
  }

  // bool minor_ticks_visible = 13;
  if (this->_internal_minor_ticks_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_minor_ticks_visible(), target);
  }

  // bool major_ticks_visible = 14;
  if (this->_internal_major_ticks_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_major_ticks_visible(), target);
  }

  // int32 minor_tick_count = 15;
  if (this->_internal_minor_tick_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_minor_tick_count(), target);
  }

  // optional double gap_between_major_ticks = 16;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_gap_between_major_ticks(), target);
  }

  // repeated double major_tick_locations = 17;
  if (this->_internal_major_tick_locations_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_major_tick_locations(), target);
  }

  // double tick_label_angle = 18;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_tick_label_angle = this->_internal_tick_label_angle();
  ::uint64_t raw_tick_label_angle;
  memcpy(&raw_tick_label_angle, &tmp_tick_label_angle, sizeof(tmp_tick_label_angle));
  if (raw_tick_label_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        18, this->_internal_tick_label_angle(), target);
  }

  // bool invert = 19;
  if (this->_internal_invert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_invert(), target);
  }

  // bool is_time_axis = 20;
  if (this->_internal_is_time_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_is_time_axis(), target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::business_calendar_descriptor(this),
        _Internal::business_calendar_descriptor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  return target;
}

::size_t FigureDescriptor_AxisDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double major_tick_locations = 17;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_major_tick_locations_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string label = 6;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // string label_font = 7;
  if (!this->_internal_label_font().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_label_font());
  }

  // string ticks_font = 8;
  if (!this->_internal_ticks_font().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ticks_font());
  }

  // optional string format_pattern = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_format_pattern());
  }

  // string color = 10;
  if (!this->_internal_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_color());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor business_calendar_descriptor = 21;
  if (cached_has_bits & 0x00000002u) {
    total_size +=
        2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.business_calendar_descriptor_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisFormatType format_type = 2;
  if (this->_internal_format_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_format_type());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double min_range = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_min_range = this->_internal_min_range();
  ::uint64_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    total_size += 9;
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor.AxisPosition position = 4;
  if (this->_internal_position() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_position());
  }

  // bool log = 5;
  if (this->_internal_log() != 0) {
    total_size += 2;
  }

  // bool minor_ticks_visible = 13;
  if (this->_internal_minor_ticks_visible() != 0) {
    total_size += 2;
  }

  // bool major_ticks_visible = 14;
  if (this->_internal_major_ticks_visible() != 0) {
    total_size += 2;
  }

  // bool invert = 19;
  if (this->_internal_invert() != 0) {
    total_size += 3;
  }

  // double max_range = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_max_range = this->_internal_max_range();
  ::uint64_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    total_size += 9;
  }

  // optional double gap_between_major_ticks = 16;
  if (cached_has_bits & 0x00000004u) {
    total_size += 10;
  }

  // int32 minor_tick_count = 15;
  if (this->_internal_minor_tick_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_minor_tick_count());
  }

  // bool is_time_axis = 20;
  if (this->_internal_is_time_axis() != 0) {
    total_size += 3;
  }

  // double tick_label_angle = 18;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_tick_label_angle = this->_internal_tick_label_angle();
  ::uint64_t raw_tick_label_angle;
  memcpy(&raw_tick_label_angle, &tmp_tick_label_angle, sizeof(tmp_tick_label_angle));
  if (raw_tick_label_angle != 0) {
    total_size += 10;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_AxisDescriptor::_class_data_ = {
    FigureDescriptor_AxisDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_AxisDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_AxisDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_AxisDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_AxisDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_major_tick_locations()->MergeFrom(from._internal_major_tick_locations());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_label_font().empty()) {
    _this->_internal_set_label_font(from._internal_label_font());
  }
  if (!from._internal_ticks_font().empty()) {
    _this->_internal_set_ticks_font(from._internal_ticks_font());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_format_pattern(from._internal_format_pattern());
  }
  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_internal_mutable_business_calendar_descriptor()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor::MergeFrom(
        from._internal_business_calendar_descriptor());
  }
  if (from._internal_format_type() != 0) {
    _this->_internal_set_format_type(from._internal_format_type());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_min_range = from._internal_min_range();
  ::uint64_t raw_min_range;
  memcpy(&raw_min_range, &tmp_min_range, sizeof(tmp_min_range));
  if (raw_min_range != 0) {
    _this->_internal_set_min_range(from._internal_min_range());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  if (from._internal_log() != 0) {
    _this->_internal_set_log(from._internal_log());
  }
  if (from._internal_minor_ticks_visible() != 0) {
    _this->_internal_set_minor_ticks_visible(from._internal_minor_ticks_visible());
  }
  if (from._internal_major_ticks_visible() != 0) {
    _this->_internal_set_major_ticks_visible(from._internal_major_ticks_visible());
  }
  if (from._internal_invert() != 0) {
    _this->_internal_set_invert(from._internal_invert());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_max_range = from._internal_max_range();
  ::uint64_t raw_max_range;
  memcpy(&raw_max_range, &tmp_max_range, sizeof(tmp_max_range));
  if (raw_max_range != 0) {
    _this->_internal_set_max_range(from._internal_max_range());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_internal_set_gap_between_major_ticks(from._internal_gap_between_major_ticks());
  }
  if (from._internal_minor_tick_count() != 0) {
    _this->_internal_set_minor_tick_count(from._internal_minor_tick_count());
  }
  if (from._internal_is_time_axis() != 0) {
    _this->_internal_set_is_time_axis(from._internal_is_time_axis());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_tick_label_angle = from._internal_tick_label_angle();
  ::uint64_t raw_tick_label_angle;
  memcpy(&raw_tick_label_angle, &tmp_tick_label_angle, sizeof(tmp_tick_label_angle));
  if (raw_tick_label_angle != 0) {
    _this->_internal_set_tick_label_angle(from._internal_tick_label_angle());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_AxisDescriptor::CopyFrom(const FigureDescriptor_AxisDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_AxisDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_AxisDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_AxisDescriptor::InternalSwap(FigureDescriptor_AxisDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.major_tick_locations_.InternalSwap(&other->_impl_.major_tick_locations_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_font_, &other->_impl_.label_font_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticks_font_, &other->_impl_.ticks_font_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_pattern_, &other->_impl_.format_pattern_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.tick_label_angle_)
      + sizeof(FigureDescriptor_AxisDescriptor::_impl_.tick_label_angle_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_AxisDescriptor, _impl_.business_calendar_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.business_calendar_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.business_calendar_descriptor_));
}

::google::protobuf::Metadata FigureDescriptor_AxisDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[51]);
}
// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : open_(arena, from.open_),
        close_(arena, from.close_),
        _cached_size_{0} {}

FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : open_(arena),
        close_(arena),
        _cached_size_{0} {}

inline void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::~FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.open_.Destroy();
  _impl_.close_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.open_.ClearToEmpty();
  _impl_.close_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 117, 2> FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string close = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.close_)}},
    // string open = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.open_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string open = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.open_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string close = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod, _impl_.close_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\143\4\5\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod"
    "open"
    "close"
  }},
};

::uint8_t* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string open = 1;
  if (!this->_internal_open().empty()) {
    const std::string& _s = this->_internal_open();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.open");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string close = 2;
  if (!this->_internal_close().empty()) {
    const std::string& _s = this->_internal_close();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.close");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  return target;
}

::size_t FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string open = 1;
  if (!this->_internal_open().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_open());
  }

  // string close = 2;
  if (!this->_internal_close().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_close());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::_class_data_ = {
    FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_open().empty()) {
    _this->_internal_set_open(from._internal_open());
  }
  if (!from._internal_close().empty()) {
    _this->_internal_set_close(from._internal_close());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.open_, &other->_impl_.open_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.close_, &other->_impl_.close_, arena);
}

::google::protobuf::Metadata FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[52]);
}
// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_Holiday::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_BusinessCalendarDescriptor_Holiday>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate& date(const FigureDescriptor_BusinessCalendarDescriptor_Holiday* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate& FigureDescriptor_BusinessCalendarDescriptor_Holiday::_Internal::date(const FigureDescriptor_BusinessCalendarDescriptor_Holiday* msg) {
  return *msg->_impl_.date_;
}
FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BusinessCalendarDescriptor_Holiday::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        business_periods_{visibility, arena, from.business_periods_} {}

FigureDescriptor_BusinessCalendarDescriptor_Holiday::FigureDescriptor_BusinessCalendarDescriptor_Holiday(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_BusinessCalendarDescriptor_Holiday& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_BusinessCalendarDescriptor_Holiday* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate>(arena, *from._impl_.date_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BusinessCalendarDescriptor_Holiday::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        business_periods_{visibility, arena} {}

inline void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.date_ = {};
}
FigureDescriptor_BusinessCalendarDescriptor_Holiday::~FigureDescriptor_BusinessCalendarDescriptor_Holiday() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_BusinessCalendarDescriptor_Holiday::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.date_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_BusinessCalendarDescriptor_Holiday::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.business_periods_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.date_ != nullptr);
    _impl_.date_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_Holiday::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> FigureDescriptor_BusinessCalendarDescriptor_Holiday::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_BusinessCalendarDescriptor_Holiday_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.business_periods_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.date_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_Holiday, _impl_.business_periods_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod>()},
  }}, {{
  }},
};

::uint8_t* FigureDescriptor_BusinessCalendarDescriptor_Holiday::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_business_periods_size()); i < n; i++) {
    const auto& repfield = this->_internal_business_periods().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  return target;
}

::size_t FigureDescriptor_BusinessCalendarDescriptor_Holiday::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 2;
  total_size += 1UL * this->_internal_business_periods_size();
  for (const auto& msg : this->_internal_business_periods()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate date = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.date_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor_Holiday::_class_data_ = {
    FigureDescriptor_BusinessCalendarDescriptor_Holiday::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_BusinessCalendarDescriptor_Holiday::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor_Holiday*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor_Holiday&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_business_periods()->MergeFrom(
      from._internal_business_periods());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_date()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeFrom(
        from._internal_date());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor_Holiday::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_Holiday& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_BusinessCalendarDescriptor_Holiday::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_BusinessCalendarDescriptor_Holiday::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_BusinessCalendarDescriptor_Holiday::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_Holiday* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.business_periods_.InternalSwap(&other->_impl_.business_periods_);
  swap(_impl_.date_, other->_impl_.date_);
}

::google::protobuf::Metadata FigureDescriptor_BusinessCalendarDescriptor_Holiday::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[53]);
}
// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
}
FigureDescriptor_BusinessCalendarDescriptor_LocalDate::FigureDescriptor_BusinessCalendarDescriptor_LocalDate(
    ::google::protobuf::Arena* arena, const FigureDescriptor_BusinessCalendarDescriptor_LocalDate& from)
    : FigureDescriptor_BusinessCalendarDescriptor_LocalDate(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BusinessCalendarDescriptor_LocalDate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, year_),
           0,
           offsetof(Impl_, day_) -
               offsetof(Impl_, year_) +
               sizeof(Impl_::day_));
}
FigureDescriptor_BusinessCalendarDescriptor_LocalDate::~FigureDescriptor_BusinessCalendarDescriptor_LocalDate() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.year_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.day_) -
      reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.day_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FigureDescriptor_BusinessCalendarDescriptor_LocalDate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 year = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.year_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.year_)}},
    // int32 month = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.month_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.month_)}},
    // int32 day = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.day_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.day_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 year = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.year_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 month = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.month_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 day = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.day_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  return target;
}

::size_t FigureDescriptor_BusinessCalendarDescriptor_LocalDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_day());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_class_data_ = {
    FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor_LocalDate*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor_LocalDate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_year() != 0) {
    _this->_internal_set_year(from._internal_year());
  }
  if (from._internal_month() != 0) {
    _this->_internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor_LocalDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_BusinessCalendarDescriptor_LocalDate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_BusinessCalendarDescriptor_LocalDate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_BusinessCalendarDescriptor_LocalDate::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor_LocalDate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.day_)
      + sizeof(FigureDescriptor_BusinessCalendarDescriptor_LocalDate::_impl_.day_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor_LocalDate, _impl_.year_)>(
          reinterpret_cast<char*>(&_impl_.year_),
          reinterpret_cast<char*>(&other->_impl_.year_));
}

::google::protobuf::Metadata FigureDescriptor_BusinessCalendarDescriptor_LocalDate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[54]);
}
// ===================================================================

class FigureDescriptor_BusinessCalendarDescriptor::_Internal {
 public:
};

FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BusinessCalendarDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : business_days_{visibility, arena, from.business_days_},
        _business_days_cached_byte_size_{0},
        business_periods_{visibility, arena, from.business_periods_},
        holidays_{visibility, arena, from.holidays_},
        name_(arena, from.name_),
        time_zone_(arena, from.time_zone_),
        _cached_size_{0} {}

FigureDescriptor_BusinessCalendarDescriptor::FigureDescriptor_BusinessCalendarDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_BusinessCalendarDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_BusinessCalendarDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_BusinessCalendarDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : business_days_{visibility, arena},
        _business_days_cached_byte_size_{0},
        business_periods_{visibility, arena},
        holidays_{visibility, arena},
        name_(arena),
        time_zone_(arena),
        _cached_size_{0} {}

inline void FigureDescriptor_BusinessCalendarDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FigureDescriptor_BusinessCalendarDescriptor::~FigureDescriptor_BusinessCalendarDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_BusinessCalendarDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.time_zone_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_BusinessCalendarDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.business_days_.Clear();
  _impl_.business_periods_.Clear();
  _impl_.holidays_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.time_zone_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_BusinessCalendarDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 106, 2> FigureDescriptor_BusinessCalendarDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_BusinessCalendarDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.name_)}},
    // string time_zone = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.time_zone_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_days_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_periods_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.holidays_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string time_zone = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.time_zone_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_days_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.business_periods_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_BusinessCalendarDescriptor, _impl_.holidays_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_BusinessPeriod>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_BusinessCalendarDescriptor_Holiday>()},
  }}, {{
    "\124\4\11\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor"
    "name"
    "time_zone"
  }},
};

::uint8_t* FigureDescriptor_BusinessCalendarDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string time_zone = 2;
  if (!this->_internal_time_zone().empty()) {
    const std::string& _s = this->_internal_time_zone();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.time_zone");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
  {
    std::size_t byte_size = _impl_._business_days_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(3, _internal_business_days(),
                                       byte_size, target);
    }
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_business_periods_size()); i < n; i++) {
    const auto& repfield = this->_internal_business_periods().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_holidays_size()); i < n; i++) {
    const auto& repfield = this->_internal_holidays().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  return target;
}

::size_t FigureDescriptor_BusinessCalendarDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek business_days = 3;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_business_days_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_business_days().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._business_days_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod business_periods = 4;
  total_size += 1UL * this->_internal_business_periods_size();
  for (const auto& msg : this->_internal_business_periods()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday holidays = 5;
  total_size += 1UL * this->_internal_holidays_size();
  for (const auto& msg : this->_internal_holidays()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string time_zone = 2;
  if (!this->_internal_time_zone().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_time_zone());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_BusinessCalendarDescriptor::_class_data_ = {
    FigureDescriptor_BusinessCalendarDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_BusinessCalendarDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_BusinessCalendarDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_BusinessCalendarDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_BusinessCalendarDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_business_days()->MergeFrom(from._internal_business_days());
  _this->_internal_mutable_business_periods()->MergeFrom(
      from._internal_business_periods());
  _this->_internal_mutable_holidays()->MergeFrom(
      from._internal_holidays());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_time_zone().empty()) {
    _this->_internal_set_time_zone(from._internal_time_zone());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_BusinessCalendarDescriptor::CopyFrom(const FigureDescriptor_BusinessCalendarDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_BusinessCalendarDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_BusinessCalendarDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_BusinessCalendarDescriptor::InternalSwap(FigureDescriptor_BusinessCalendarDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.business_days_.InternalSwap(&other->_impl_.business_days_);
  _impl_.business_periods_.InternalSwap(&other->_impl_.business_periods_);
  _impl_.holidays_.InternalSwap(&other->_impl_.holidays_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_zone_, &other->_impl_.time_zone_, arena);
}

::google::protobuf::Metadata FigureDescriptor_BusinessCalendarDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[55]);
}
// ===================================================================

class FigureDescriptor_MultiSeriesSourceDescriptor::_Internal {
 public:
};

FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_MultiSeriesSourceDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : axis_id_(arena, from.axis_id_),
        column_name_(arena, from.column_name_),
        _cached_size_{0} {}

FigureDescriptor_MultiSeriesSourceDescriptor::FigureDescriptor_MultiSeriesSourceDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_MultiSeriesSourceDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_MultiSeriesSourceDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, partitioned_table_id_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::partitioned_table_id_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_MultiSeriesSourceDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : axis_id_(arena),
        column_name_(arena),
        _cached_size_{0} {}

inline void FigureDescriptor_MultiSeriesSourceDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, partitioned_table_id_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::partitioned_table_id_));
}
FigureDescriptor_MultiSeriesSourceDescriptor::~FigureDescriptor_MultiSeriesSourceDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_MultiSeriesSourceDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.axis_id_.Destroy();
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_MultiSeriesSourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.axis_id_.ClearToEmpty();
  _impl_.column_name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.partitioned_table_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitioned_table_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_MultiSeriesSourceDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 112, 2> FigureDescriptor_MultiSeriesSourceDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FigureDescriptor_MultiSeriesSourceDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string column_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.column_name_)}},
    // string axis_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.axis_id_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.type_)}},
    // int32 partitioned_table_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.partitioned_table_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.partitioned_table_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string axis_id = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.axis_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 partitioned_table_id = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.partitioned_table_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string column_name = 4;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\125\7\0\0\13\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor"
    "axis_id"
    "column_name"
  }},
};

::uint8_t* FigureDescriptor_MultiSeriesSourceDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    const std::string& _s = this->_internal_axis_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.axis_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // int32 partitioned_table_id = 3;
  if (this->_internal_partitioned_table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_partitioned_table_id(), target);
  }

  // string column_name = 4;
  if (!this->_internal_column_name().empty()) {
    const std::string& _s = this->_internal_column_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  return target;
}

::size_t FigureDescriptor_MultiSeriesSourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_axis_id());
  }

  // string column_name = 4;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 partitioned_table_id = 3;
  if (this->_internal_partitioned_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_partitioned_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_MultiSeriesSourceDescriptor::_class_data_ = {
    FigureDescriptor_MultiSeriesSourceDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_MultiSeriesSourceDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_MultiSeriesSourceDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_MultiSeriesSourceDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_MultiSeriesSourceDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_axis_id().empty()) {
    _this->_internal_set_axis_id(from._internal_axis_id());
  }
  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_partitioned_table_id() != 0) {
    _this->_internal_set_partitioned_table_id(from._internal_partitioned_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_MultiSeriesSourceDescriptor::CopyFrom(const FigureDescriptor_MultiSeriesSourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_MultiSeriesSourceDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_MultiSeriesSourceDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_MultiSeriesSourceDescriptor::InternalSwap(FigureDescriptor_MultiSeriesSourceDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.axis_id_, &other->_impl_.axis_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.partitioned_table_id_)
      + sizeof(FigureDescriptor_MultiSeriesSourceDescriptor::_impl_.partitioned_table_id_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_MultiSeriesSourceDescriptor, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata FigureDescriptor_MultiSeriesSourceDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[56]);
}
// ===================================================================

class FigureDescriptor_SourceDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor_SourceDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor& one_click(const FigureDescriptor_SourceDescriptor* msg);
  static void set_has_one_click(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor& FigureDescriptor_SourceDescriptor::_Internal::one_click(const FigureDescriptor_SourceDescriptor* msg) {
  return *msg->_impl_.one_click_;
}
FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_SourceDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        axis_id_(arena, from.axis_id_),
        column_name_(arena, from.column_name_),
        column_type_(arena, from.column_type_) {}

FigureDescriptor_SourceDescriptor::FigureDescriptor_SourceDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_SourceDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_SourceDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.one_click_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor>(arena, *from._impl_.one_click_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, partitioned_table_id_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::partitioned_table_id_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_SourceDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        axis_id_(arena),
        column_name_(arena),
        column_type_(arena) {}

inline void FigureDescriptor_SourceDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, one_click_),
           0,
           offsetof(Impl_, partitioned_table_id_) -
               offsetof(Impl_, one_click_) +
               sizeof(Impl_::partitioned_table_id_));
}
FigureDescriptor_SourceDescriptor::~FigureDescriptor_SourceDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_SourceDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.axis_id_.Destroy();
  _impl_.column_name_.Destroy();
  _impl_.column_type_.Destroy();
  delete _impl_.one_click_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_SourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.axis_id_.ClearToEmpty();
  _impl_.column_name_.ClearToEmpty();
  _impl_.column_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.one_click_ != nullptr);
    _impl_.one_click_->Clear();
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.partitioned_table_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitioned_table_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_SourceDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 112, 2> FigureDescriptor_SourceDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_SourceDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string axis_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.axis_id_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_SourceDescriptor, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.type_)}},
    // int32 table_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_SourceDescriptor, _impl_.table_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.table_id_)}},
    // int32 partitioned_table_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor_SourceDescriptor, _impl_.partitioned_table_id_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.partitioned_table_id_)}},
    // string column_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.column_name_)}},
    // string column_type = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.column_type_)}},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.one_click_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string axis_id = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.axis_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 table_id = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.table_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 partitioned_table_id = 4;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.partitioned_table_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string column_name = 5;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.column_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string column_type = 6;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.column_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.one_click_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor>()},
  }}, {{
    "\112\7\0\0\0\13\13\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor"
    "axis_id"
    "column_name"
    "column_type"
  }},
};

::uint8_t* FigureDescriptor_SourceDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    const std::string& _s = this->_internal_axis_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.axis_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // int32 table_id = 3;
  if (this->_internal_table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_table_id(), target);
  }

  // int32 partitioned_table_id = 4;
  if (this->_internal_partitioned_table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_partitioned_table_id(), target);
  }

  // string column_name = 5;
  if (!this->_internal_column_name().empty()) {
    const std::string& _s = this->_internal_column_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string column_type = 6;
  if (!this->_internal_column_type().empty()) {
    const std::string& _s = this->_internal_column_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor.column_type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::one_click(this),
        _Internal::one_click(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  return target;
}

::size_t FigureDescriptor_SourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string axis_id = 1;
  if (!this->_internal_axis_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_axis_id());
  }

  // string column_name = 5;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_column_name());
  }

  // string column_type = 6;
  if (!this->_internal_column_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_column_type());
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor one_click = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.one_click_);
  }

  // .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 table_id = 3;
  if (this->_internal_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_table_id());
  }

  // int32 partitioned_table_id = 4;
  if (this->_internal_partitioned_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_partitioned_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_SourceDescriptor::_class_data_ = {
    FigureDescriptor_SourceDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_SourceDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_SourceDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_SourceDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_SourceDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_axis_id().empty()) {
    _this->_internal_set_axis_id(from._internal_axis_id());
  }
  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (!from._internal_column_type().empty()) {
    _this->_internal_set_column_type(from._internal_column_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_one_click()->::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_OneClickDescriptor::MergeFrom(
        from._internal_one_click());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_table_id() != 0) {
    _this->_internal_set_table_id(from._internal_table_id());
  }
  if (from._internal_partitioned_table_id() != 0) {
    _this->_internal_set_partitioned_table_id(from._internal_partitioned_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_SourceDescriptor::CopyFrom(const FigureDescriptor_SourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_SourceDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_SourceDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_SourceDescriptor::InternalSwap(FigureDescriptor_SourceDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.axis_id_, &other->_impl_.axis_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_type_, &other->_impl_.column_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.partitioned_table_id_)
      + sizeof(FigureDescriptor_SourceDescriptor::_impl_.partitioned_table_id_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor_SourceDescriptor, _impl_.one_click_)>(
          reinterpret_cast<char*>(&_impl_.one_click_),
          reinterpret_cast<char*>(&other->_impl_.one_click_));
}

::google::protobuf::Metadata FigureDescriptor_SourceDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[57]);
}
// ===================================================================

class FigureDescriptor_OneClickDescriptor::_Internal {
 public:
};

FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_OneClickDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : columns_{visibility, arena, from.columns_},
        column_types_{visibility, arena, from.column_types_},
        _cached_size_{0} {}

FigureDescriptor_OneClickDescriptor::FigureDescriptor_OneClickDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor_OneClickDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor_OneClickDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.require_all_filters_to_display_ = from._impl_.require_all_filters_to_display_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor_OneClickDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : columns_{visibility, arena},
        column_types_{visibility, arena},
        _cached_size_{0} {}

inline void FigureDescriptor_OneClickDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.require_all_filters_to_display_ = {};
}
FigureDescriptor_OneClickDescriptor::~FigureDescriptor_OneClickDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor_OneClickDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor_OneClickDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_.Clear();
  _impl_.column_types_.Clear();
  _impl_.require_all_filters_to_display_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor_OneClickDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 104, 2> FigureDescriptor_OneClickDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FigureDescriptor_OneClickDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string columns = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_OneClickDescriptor, _impl_.columns_)}},
    // repeated string column_types = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_OneClickDescriptor, _impl_.column_types_)}},
    // bool require_all_filters_to_display = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FigureDescriptor_OneClickDescriptor, _impl_.require_all_filters_to_display_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor_OneClickDescriptor, _impl_.require_all_filters_to_display_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string columns = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_OneClickDescriptor, _impl_.columns_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string column_types = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_OneClickDescriptor, _impl_.column_types_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool require_all_filters_to_display = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor_OneClickDescriptor, _impl_.require_all_filters_to_display_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\114\7\14\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor"
    "columns"
    "column_types"
  }},
};

::uint8_t* FigureDescriptor_OneClickDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string columns = 1;
  for (int i = 0, n = this->_internal_columns_size(); i < n; ++i) {
    const auto& s = this->_internal_columns().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.columns");
    target = stream->WriteString(1, s, target);
  }

  // repeated string column_types = 2;
  for (int i = 0, n = this->_internal_column_types_size(); i < n; ++i) {
    const auto& s = this->_internal_column_types().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor.column_types");
    target = stream->WriteString(2, s, target);
  }

  // bool require_all_filters_to_display = 3;
  if (this->_internal_require_all_filters_to_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_require_all_filters_to_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  return target;
}

::size_t FigureDescriptor_OneClickDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_columns().size());
  for (int i = 0, n = _internal_columns().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_columns().Get(i));
  }
  // repeated string column_types = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_column_types().size());
  for (int i = 0, n = _internal_column_types().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_column_types().Get(i));
  }
  // bool require_all_filters_to_display = 3;
  if (this->_internal_require_all_filters_to_display() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor_OneClickDescriptor::_class_data_ = {
    FigureDescriptor_OneClickDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor_OneClickDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor_OneClickDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor_OneClickDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor_OneClickDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns()->MergeFrom(from._internal_columns());
  _this->_internal_mutable_column_types()->MergeFrom(from._internal_column_types());
  if (from._internal_require_all_filters_to_display() != 0) {
    _this->_internal_set_require_all_filters_to_display(from._internal_require_all_filters_to_display());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor_OneClickDescriptor::CopyFrom(const FigureDescriptor_OneClickDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor_OneClickDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor_OneClickDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor_OneClickDescriptor::InternalSwap(FigureDescriptor_OneClickDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_.InternalSwap(&other->_impl_.columns_);
  _impl_.column_types_.InternalSwap(&other->_impl_.column_types_);
        swap(_impl_.require_all_filters_to_display_, other->_impl_.require_all_filters_to_display_);
}

::google::protobuf::Metadata FigureDescriptor_OneClickDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[58]);
}
// ===================================================================

class FigureDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FigureDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FigureDescriptor::FigureDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        charts_{visibility, arena, from.charts_},
        errors_{visibility, arena, from.errors_},
        title_(arena, from.title_),
        title_font_(arena, from.title_font_),
        title_color_(arena, from.title_color_) {}

FigureDescriptor::FigureDescriptor(
    ::google::protobuf::Arena* arena,
    const FigureDescriptor& from)
    : ::google::protobuf::Message(arena) {
  FigureDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, update_interval_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, update_interval_),
           offsetof(Impl_, rows_) -
               offsetof(Impl_, update_interval_) +
               sizeof(Impl_::rows_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE FigureDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        charts_{visibility, arena},
        errors_{visibility, arena},
        title_(arena),
        title_font_(arena),
        title_color_(arena) {}

inline void FigureDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, update_interval_),
           0,
           offsetof(Impl_, rows_) -
               offsetof(Impl_, update_interval_) +
               sizeof(Impl_::rows_));
}
FigureDescriptor::~FigureDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FigureDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.title_.Destroy();
  _impl_.title_font_.Destroy();
  _impl_.title_color_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FigureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.charts_.Clear();
  _impl_.errors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_.title_font_.ClearToEmpty();
  _impl_.title_color_.ClearToEmpty();
  ::memset(&_impl_.update_interval_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rows_) -
      reinterpret_cast<char*>(&_impl_.update_interval_)) + sizeof(_impl_.rows_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FigureDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 1, 106, 2> FigureDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294962232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FigureDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string title = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.title_)}},
    // string title_font = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.title_font_)}},
    // string title_color = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.title_color_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // int64 update_interval = 7 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FigureDescriptor, _impl_.update_interval_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.update_interval_)}},
    // int32 cols = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor, _impl_.cols_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.cols_)}},
    // int32 rows = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FigureDescriptor, _impl_.rows_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.rows_)}},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.charts_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string errors = 13;
    {::_pbi::TcParser::FastUR1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.errors_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string title = 1;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.title_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title_font = 2;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.title_font_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title_color = 3;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.title_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 update_interval = 7 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.update_interval_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 cols = 8;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.cols_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 rows = 9;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.rows_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.charts_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string errors = 13;
    {PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.errors_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::script::grpc::FigureDescriptor_ChartDescriptor>()},
  }}, {{
    "\71\5\12\13\0\0\0\0\6\0\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.script.grpc.FigureDescriptor"
    "title"
    "title_font"
    "title_color"
    "errors"
  }},
};

::uint8_t* FigureDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string title_font = 2;
  if (!this->_internal_title_font().empty()) {
    const std::string& _s = this->_internal_title_font();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_font");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string title_color = 3;
  if (!this->_internal_title_color().empty()) {
    const std::string& _s = this->_internal_title_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.title_color");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int64 update_interval = 7 [jstype = JS_STRING];
  if (this->_internal_update_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<7>(
            stream, this->_internal_update_interval(), target);
  }

  // int32 cols = 8;
  if (this->_internal_cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_cols(), target);
  }

  // int32 rows = 9;
  if (this->_internal_rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_rows(), target);
  }

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_charts_size()); i < n; i++) {
    const auto& repfield = this->_internal_charts().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string errors = 13;
  for (int i = 0, n = this->_internal_errors_size(); i < n; ++i) {
    const auto& s = this->_internal_errors().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.script.grpc.FigureDescriptor.errors");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  return target;
}

::size_t FigureDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor charts = 10;
  total_size += 1UL * this->_internal_charts_size();
  for (const auto& msg : this->_internal_charts()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string errors = 13;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_errors().size());
  for (int i = 0, n = _internal_errors().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_errors().Get(i));
  }
  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string title_font = 2;
  if (!this->_internal_title_font().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title_font());
  }

  // string title_color = 3;
  if (!this->_internal_title_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title_color());
  }

  // int64 update_interval = 7 [jstype = JS_STRING];
  if (this->_internal_update_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_update_interval());
  }

  // int32 cols = 8;
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cols());
  }

  // int32 rows = 9;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FigureDescriptor::_class_data_ = {
    FigureDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FigureDescriptor::GetClassData() const {
  return &_class_data_;
}

void FigureDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FigureDescriptor*>(&to_msg);
  auto& from = static_cast<const FigureDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_charts()->MergeFrom(
      from._internal_charts());
  _this->_internal_mutable_errors()->MergeFrom(from._internal_errors());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_title_font().empty()) {
    _this->_internal_set_title_font(from._internal_title_font());
  }
  if (!from._internal_title_color().empty()) {
    _this->_internal_set_title_color(from._internal_title_color());
  }
  if (from._internal_update_interval() != 0) {
    _this->_internal_set_update_interval(from._internal_update_interval());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FigureDescriptor::CopyFrom(const FigureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.script.grpc.FigureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FigureDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FigureDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FigureDescriptor::InternalSwap(FigureDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.charts_.InternalSwap(&other->_impl_.charts_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_font_, &other->_impl_.title_font_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_color_, &other->_impl_.title_color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.rows_)
      + sizeof(FigureDescriptor::_impl_.rows_)
      - PROTOBUF_FIELD_OFFSET(FigureDescriptor, _impl_.update_interval_)>(
          reinterpret_cast<char*>(&_impl_.update_interval_),
          reinterpret_cast<char*>(&other->_impl_.update_interval_));
}

::google::protobuf::Metadata FigureDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fconsole_2eproto_getter, &descriptor_table_deephaven_2fproto_2fconsole_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fconsole_2eproto[59]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace script
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
