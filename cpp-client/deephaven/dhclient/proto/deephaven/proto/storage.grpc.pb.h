// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/storage.proto
// Original file comments:
//
// Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending
#ifndef GRPC_deephaven_2fproto_2fstorage_2eproto__INCLUDED
#define GRPC_deephaven_2fproto_2fstorage_2eproto__INCLUDED

#include "deephaven/proto/storage.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

//
// Shared storage management service.
//
// Operations may fail (or omit data) if the current session does not have permission to read or write that resource.
//
// Paths will be "/" delimited and must start with a leading slash.
class StorageService final {
 public:
  static constexpr char const* service_full_name() {
    return "io.deephaven.proto.backplane.grpc.StorageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the files and directories present in a given directory. Will return an error
    virtual ::grpc::Status ListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>> AsyncListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>>(AsyncListItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>> PrepareAsyncListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>>(PrepareAsyncListItemsRaw(context, request, cq));
    }
    // Reads the file at the given path. Client can optionally specify an etag, asking the server
    // not to send the file if it hasn't changed.
    virtual ::grpc::Status FetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>> AsyncFetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>>(AsyncFetchFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>> PrepareAsyncFetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>>(PrepareAsyncFetchFileRaw(context, request, cq));
    }
    // Can create new files or modify existing with client provided contents.
    virtual ::grpc::Status SaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>> AsyncSaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>>(AsyncSaveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>> PrepareAsyncSaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>>(PrepareAsyncSaveFileRaw(context, request, cq));
    }
    // Moves a file from one path to another.
    virtual ::grpc::Status MoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>> AsyncMoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>>(AsyncMoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>> PrepareAsyncMoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>>(PrepareAsyncMoveItemRaw(context, request, cq));
    }
    // Creates a directory at the given path.
    virtual ::grpc::Status CreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>> AsyncCreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>>(AsyncCreateDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>> PrepareAsyncCreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>>(PrepareAsyncCreateDirectoryRaw(context, request, cq));
    }
    // Deletes the file or directory at the given path. Directories must be empty to be deleted.
    virtual ::grpc::Status DeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>> AsyncDeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>>(AsyncDeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>> PrepareAsyncDeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>>(PrepareAsyncDeleteItemRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Lists the files and directories present in a given directory. Will return an error
      virtual void ListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Reads the file at the given path. Client can optionally specify an etag, asking the server
      // not to send the file if it hasn't changed.
      virtual void FetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Can create new files or modify existing with client provided contents.
      virtual void SaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Moves a file from one path to another.
      virtual void MoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a directory at the given path.
      virtual void CreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes the file or directory at the given path. Directories must be empty to be deleted.
      virtual void DeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>* AsyncListItemsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>* PrepareAsyncListItemsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>* AsyncFetchFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>* PrepareAsyncFetchFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>* AsyncSaveFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>* PrepareAsyncSaveFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>* AsyncMoveItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>* PrepareAsyncMoveItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* AsyncCreateDirectoryRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* PrepareAsyncCreateDirectoryRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>> AsyncListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>>(AsyncListItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>> PrepareAsyncListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>>(PrepareAsyncListItemsRaw(context, request, cq));
    }
    ::grpc::Status FetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>> AsyncFetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>>(AsyncFetchFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>> PrepareAsyncFetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>>(PrepareAsyncFetchFileRaw(context, request, cq));
    }
    ::grpc::Status SaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>> AsyncSaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>>(AsyncSaveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>> PrepareAsyncSaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>>(PrepareAsyncSaveFileRaw(context, request, cq));
    }
    ::grpc::Status MoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>> AsyncMoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>>(AsyncMoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>> PrepareAsyncMoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>>(PrepareAsyncMoveItemRaw(context, request, cq));
    }
    ::grpc::Status CreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>> AsyncCreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>>(AsyncCreateDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>> PrepareAsyncCreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>>(PrepareAsyncCreateDirectoryRaw(context, request, cq));
    }
    ::grpc::Status DeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>> AsyncDeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>>(AsyncDeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>> PrepareAsyncDeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>>(PrepareAsyncDeleteItemRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListItems(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response, std::function<void(::grpc::Status)>) override;
      void SaveFile(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDirectory(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteItem(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>* AsyncListItemsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>* PrepareAsyncListItemsRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>* AsyncFetchFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>* PrepareAsyncFetchFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>* AsyncSaveFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>* PrepareAsyncSaveFileRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>* AsyncMoveItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>* PrepareAsyncMoveItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* AsyncCreateDirectoryRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* PrepareAsyncCreateDirectoryRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListItems_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchFile_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveFile_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveItem_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteItem_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the files and directories present in a given directory. Will return an error
    virtual ::grpc::Status ListItems(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response);
    // Reads the file at the given path. Client can optionally specify an etag, asking the server
    // not to send the file if it hasn't changed.
    virtual ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response);
    // Can create new files or modify existing with client provided contents.
    virtual ::grpc::Status SaveFile(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response);
    // Moves a file from one path to another.
    virtual ::grpc::Status MoveItem(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response);
    // Creates a directory at the given path.
    virtual ::grpc::Status CreateDirectory(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response);
    // Deletes the file or directory at the given path. Directories must be empty to be deleted.
    virtual ::grpc::Status DeleteItem(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListItems() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListItems(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListItems(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::ListItemsRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::ListItemsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchFile(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::FetchFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::FetchFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SaveFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFile(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::SaveFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::SaveFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveItem() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveItem(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::MoveItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::MoveItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDirectory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirectory(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDirectory(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteItem() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteItem(::grpc::ServerContext* context, ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListItems<WithAsyncMethod_FetchFile<WithAsyncMethod_SaveFile<WithAsyncMethod_MoveItem<WithAsyncMethod_CreateDirectory<WithAsyncMethod_DeleteItem<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListItems() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::ListItemsRequest, ::io::deephaven::proto::backplane::grpc::ListItemsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* request, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* response) { return this->ListItems(context, request, response); }));}
    void SetMessageAllocatorFor_ListItems(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::ListItemsRequest, ::io::deephaven::proto::backplane::grpc::ListItemsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::ListItemsRequest, ::io::deephaven::proto::backplane::grpc::ListItemsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListItems(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListItems(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::FetchFileRequest, ::io::deephaven::proto::backplane::grpc::FetchFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* request, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* response) { return this->FetchFile(context, request, response); }));}
    void SetMessageAllocatorFor_FetchFile(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::FetchFileRequest, ::io::deephaven::proto::backplane::grpc::FetchFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::FetchFileRequest, ::io::deephaven::proto::backplane::grpc::FetchFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchFile(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SaveFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::SaveFileRequest, ::io::deephaven::proto::backplane::grpc::SaveFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* request, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* response) { return this->SaveFile(context, request, response); }));}
    void SetMessageAllocatorFor_SaveFile(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::SaveFileRequest, ::io::deephaven::proto::backplane::grpc::SaveFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::SaveFileRequest, ::io::deephaven::proto::backplane::grpc::SaveFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveItem() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::MoveItemRequest, ::io::deephaven::proto::backplane::grpc::MoveItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* request, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* response) { return this->MoveItem(context, request, response); }));}
    void SetMessageAllocatorFor_MoveItem(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::MoveItemRequest, ::io::deephaven::proto::backplane::grpc::MoveItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::MoveItemRequest, ::io::deephaven::proto::backplane::grpc::MoveItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveItem(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateDirectory() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* request, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* response) { return this->CreateDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDirectory(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirectory(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteItem() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::DeleteItemRequest, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* request, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* response) { return this->DeleteItem(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteItem(
        ::grpc::MessageAllocator< ::io::deephaven::proto::backplane::grpc::DeleteItemRequest, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::io::deephaven::proto::backplane::grpc::DeleteItemRequest, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListItems<WithCallbackMethod_FetchFile<WithCallbackMethod_SaveFile<WithCallbackMethod_MoveItem<WithCallbackMethod_CreateDirectory<WithCallbackMethod_DeleteItem<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListItems() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListItems(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SaveFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveItem() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDirectory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirectory(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteItem() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListItems() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListItems(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListItems(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SaveFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveItem() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDirectory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirectory(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteItem() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListItems() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListItems(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListItems(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListItems(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SaveFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SaveFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveItem() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateDirectory() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirectory(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteItem() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListItems() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::ListItemsRequest, ::io::deephaven::proto::backplane::grpc::ListItemsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::ListItemsRequest, ::io::deephaven::proto::backplane::grpc::ListItemsResponse>* streamer) {
                       return this->StreamedListItems(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListItems(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::ListItemsRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::ListItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListItems(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::ListItemsRequest,::io::deephaven::proto::backplane::grpc::ListItemsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::FetchFileRequest, ::io::deephaven::proto::backplane::grpc::FetchFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::FetchFileRequest, ::io::deephaven::proto::backplane::grpc::FetchFileResponse>* streamer) {
                       return this->StreamedFetchFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::FetchFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::FetchFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::FetchFileRequest,::io::deephaven::proto::backplane::grpc::FetchFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SaveFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::SaveFileRequest, ::io::deephaven::proto::backplane::grpc::SaveFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::SaveFileRequest, ::io::deephaven::proto::backplane::grpc::SaveFileResponse>* streamer) {
                       return this->StreamedSaveFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::SaveFileRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::SaveFileRequest,::io::deephaven::proto::backplane::grpc::SaveFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveItem() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::MoveItemRequest, ::io::deephaven::proto::backplane::grpc::MoveItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::MoveItemRequest, ::io::deephaven::proto::backplane::grpc::MoveItemResponse>* streamer) {
                       return this->StreamedMoveItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::MoveItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::MoveItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::MoveItemRequest,::io::deephaven::proto::backplane::grpc::MoveItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDirectory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* streamer) {
                       return this->StreamedCreateDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDirectory(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::CreateDirectoryRequest,::io::deephaven::proto::backplane::grpc::CreateDirectoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteItem() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::io::deephaven::proto::backplane::grpc::DeleteItemRequest, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::io::deephaven::proto::backplane::grpc::DeleteItemRequest, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* streamer) {
                       return this->StreamedDeleteItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::io::deephaven::proto::backplane::grpc::DeleteItemRequest* /*request*/, ::io::deephaven::proto::backplane::grpc::DeleteItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::io::deephaven::proto::backplane::grpc::DeleteItemRequest,::io::deephaven::proto::backplane::grpc::DeleteItemResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListItems<WithStreamedUnaryMethod_FetchFile<WithStreamedUnaryMethod_SaveFile<WithStreamedUnaryMethod_MoveItem<WithStreamedUnaryMethod_CreateDirectory<WithStreamedUnaryMethod_DeleteItem<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListItems<WithStreamedUnaryMethod_FetchFile<WithStreamedUnaryMethod_SaveFile<WithStreamedUnaryMethod_MoveItem<WithStreamedUnaryMethod_CreateDirectory<WithStreamedUnaryMethod_DeleteItem<Service > > > > > > StreamedService;
};

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


#endif  // GRPC_deephaven_2fproto_2fstorage_2eproto__INCLUDED
