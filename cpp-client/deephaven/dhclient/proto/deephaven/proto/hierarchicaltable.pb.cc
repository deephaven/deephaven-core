// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/hierarchicaltable.proto

#include "deephaven/proto/hierarchicaltable.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
      template <typename>
PROTOBUF_CONSTEXPR TreeResponse::TreeResponse(::_pbi::ConstantInitialized) {}
struct TreeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeResponseDefaultTypeInternal() {}
  union {
    TreeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeResponseDefaultTypeInternal _TreeResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR RollupResponse::RollupResponse(::_pbi::ConstantInitialized) {}
struct RollupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollupResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollupResponseDefaultTypeInternal() {}
  union {
    RollupResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollupResponseDefaultTypeInternal _RollupResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR HierarchicalTableViewResponse::HierarchicalTableViewResponse(::_pbi::ConstantInitialized) {}
struct HierarchicalTableViewResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableViewResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableViewResponseDefaultTypeInternal() {}
  union {
    HierarchicalTableViewResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableViewResponseDefaultTypeInternal _HierarchicalTableViewResponse_default_instance_;

inline constexpr HierarchicalTableDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : snapshot_schema_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_static_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HierarchicalTableDescriptor::HierarchicalTableDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HierarchicalTableDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableDescriptorDefaultTypeInternal() {}
  union {
    HierarchicalTableDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableDescriptorDefaultTypeInternal _HierarchicalTableDescriptor_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR HierarchicalTableApplyResponse::HierarchicalTableApplyResponse(::_pbi::ConstantInitialized) {}
struct HierarchicalTableApplyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableApplyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableApplyResponseDefaultTypeInternal() {}
  union {
    HierarchicalTableApplyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableApplyResponseDefaultTypeInternal _HierarchicalTableApplyResponse_default_instance_;

inline constexpr TreeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        identifier_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        parent_identifier_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_tree_table_id_{nullptr},
        source_table_id_{nullptr},
        promote_orphans_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TreeRequest::TreeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TreeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreeRequestDefaultTypeInternal() {}
  union {
    TreeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreeRequestDefaultTypeInternal _TreeRequest_default_instance_;

inline constexpr HierarchicalTableViewKeyTableDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        key_table_action_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_table_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HierarchicalTableViewKeyTableDescriptor::HierarchicalTableViewKeyTableDescriptor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal() {}
  union {
    HierarchicalTableViewKeyTableDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal _HierarchicalTableViewKeyTableDescriptor_default_instance_;

inline constexpr HierarchicalTableSourceExportRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_table_id_{nullptr},
        hierarchical_table_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HierarchicalTableSourceExportRequest::HierarchicalTableSourceExportRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HierarchicalTableSourceExportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableSourceExportRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableSourceExportRequestDefaultTypeInternal() {}
  union {
    HierarchicalTableSourceExportRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableSourceExportRequestDefaultTypeInternal _HierarchicalTableSourceExportRequest_default_instance_;

inline constexpr HierarchicalTableViewRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_view_id_{nullptr},
        expansions_{nullptr},
        target_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR HierarchicalTableViewRequest::HierarchicalTableViewRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HierarchicalTableViewRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableViewRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableViewRequestDefaultTypeInternal() {}
  union {
    HierarchicalTableViewRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableViewRequestDefaultTypeInternal _HierarchicalTableViewRequest_default_instance_;

inline constexpr HierarchicalTableApplyRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filters_{},
        sorts_{},
        result_hierarchical_table_id_{nullptr},
        input_hierarchical_table_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HierarchicalTableApplyRequest::HierarchicalTableApplyRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HierarchicalTableApplyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalTableApplyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalTableApplyRequestDefaultTypeInternal() {}
  union {
    HierarchicalTableApplyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalTableApplyRequestDefaultTypeInternal _HierarchicalTableApplyRequest_default_instance_;

inline constexpr RollupRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        aggregations_{},
        group_by_columns_{},
        result_rollup_table_id_{nullptr},
        source_table_id_{nullptr},
        include_constituents_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RollupRequest::RollupRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RollupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RollupRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RollupRequestDefaultTypeInternal() {}
  union {
    RollupRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RollupRequestDefaultTypeInternal _RollupRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::_pb::Metadata file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[11];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto = nullptr;
const ::uint32_t TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _impl_.result_rollup_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _impl_.source_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _impl_.aggregations_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _impl_.include_constituents_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupRequest, _impl_.group_by_columns_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RollupResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _impl_.result_tree_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _impl_.source_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _impl_.identifier_column_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _impl_.parent_identifier_column_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeRequest, _impl_.promote_orphans_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TreeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, _impl_.result_hierarchical_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, _impl_.input_hierarchical_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, _impl_.filters_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest, _impl_.sorts_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor, _impl_.snapshot_schema_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor, _impl_.is_static_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _impl_.result_view_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _impl_.expansions_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _impl_.target_),
    0,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, _impl_.key_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor, _impl_.key_table_action_column_),
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, _impl_.result_table_id_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest, _impl_.hierarchical_table_id_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::io::deephaven::proto::backplane::grpc::RollupRequest)},
        {18, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::RollupResponse)},
        {26, 39, -1, sizeof(::io::deephaven::proto::backplane::grpc::TreeRequest)},
        {44, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TreeResponse)},
        {52, 64, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest)},
        {68, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse)},
        {76, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor)},
        {86, 99, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest)},
        {103, 113, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor)},
        {115, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse)},
        {123, 133, -1, sizeof(::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::io::deephaven::proto::backplane::grpc::_RollupRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_RollupResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_TreeRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_TreeResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HierarchicalTableApplyRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HierarchicalTableApplyResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HierarchicalTableDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewKeyTableDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HierarchicalTableSourceExportRequest_default_instance_._instance,
};
const char descriptor_table_protodef_deephaven_2fproto_2fhierarchicaltable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'deephaven/proto/hierarchicaltable.prot"
    "o\022!io.deephaven.proto.backplane.grpc\032\033de"
    "ephaven/proto/table.proto\032\034deephaven/pro"
    "to/ticket.proto\"\234\002\n\rRollupRequest\022I\n\026res"
    "ult_rollup_table_id\030\001 \001(\0132).io.deephaven"
    ".proto.backplane.grpc.Ticket\022B\n\017source_t"
    "able_id\030\002 \001(\0132).io.deephaven.proto.backp"
    "lane.grpc.Ticket\022D\n\014aggregations\030\003 \003(\0132."
    ".io.deephaven.proto.backplane.grpc.Aggre"
    "gation\022\034\n\024include_constituents\030\004 \001(\010\022\030\n\020"
    "group_by_columns\030\005 \003(\t\"\020\n\016RollupResponse"
    "\"\360\001\n\013TreeRequest\022G\n\024result_tree_table_id"
    "\030\001 \001(\0132).io.deephaven.proto.backplane.gr"
    "pc.Ticket\022B\n\017source_table_id\030\002 \001(\0132).io."
    "deephaven.proto.backplane.grpc.Ticket\022\031\n"
    "\021identifier_column\030\003 \001(\t\022 \n\030parent_ident"
    "ifier_column\030\004 \001(\t\022\027\n\017promote_orphans\030\005 "
    "\001(\010\"\016\n\014TreeResponse\"\301\002\n\035HierarchicalTabl"
    "eApplyRequest\022O\n\034result_hierarchical_tab"
    "le_id\030\001 \001(\0132).io.deephaven.proto.backpla"
    "ne.grpc.Ticket\022N\n\033input_hierarchical_tab"
    "le_id\030\002 \001(\0132).io.deephaven.proto.backpla"
    "ne.grpc.Ticket\022=\n\007filters\030\003 \003(\0132,.io.dee"
    "phaven.proto.backplane.grpc.Condition\022@\n"
    "\005sorts\030\004 \003(\01321.io.deephaven.proto.backpl"
    "ane.grpc.SortDescriptor\" \n\036HierarchicalT"
    "ableApplyResponse\"I\n\033HierarchicalTableDe"
    "scriptor\022\027\n\017snapshot_schema\030\001 \001(\014\022\021\n\tis_"
    "static\030\002 \001(\010\"\336\002\n\034HierarchicalTableViewRe"
    "quest\022A\n\016result_view_id\030\001 \001(\0132).io.deeph"
    "aven.proto.backplane.grpc.Ticket\022J\n\025hier"
    "archical_table_id\030\002 \001(\0132).io.deephaven.p"
    "roto.backplane.grpc.TicketH\000\022E\n\020existing"
    "_view_id\030\003 \001(\0132).io.deephaven.proto.back"
    "plane.grpc.TicketH\000\022^\n\nexpansions\030\004 \001(\0132"
    "J.io.deephaven.proto.backplane.grpc.Hier"
    "archicalTableViewKeyTableDescriptorB\010\n\006t"
    "arget\"\254\001\n\'HierarchicalTableViewKeyTableD"
    "escriptor\022\?\n\014key_table_id\030\001 \001(\0132).io.dee"
    "phaven.proto.backplane.grpc.Ticket\022$\n\027ke"
    "y_table_action_column\030\002 \001(\tH\000\210\001\001B\032\n\030_key"
    "_table_action_column\"\037\n\035HierarchicalTabl"
    "eViewResponse\"\264\001\n$HierarchicalTableSourc"
    "eExportRequest\022B\n\017result_table_id\030\001 \001(\0132"
    ").io.deephaven.proto.backplane.grpc.Tick"
    "et\022H\n\025hierarchical_table_id\030\002 \001(\0132).io.d"
    "eephaven.proto.backplane.grpc.Ticket2\251\005\n"
    "\030HierarchicalTableService\022m\n\006Rollup\0220.io"
    ".deephaven.proto.backplane.grpc.RollupRe"
    "quest\0321.io.deephaven.proto.backplane.grp"
    "c.RollupResponse\022g\n\004Tree\022..io.deephaven."
    "proto.backplane.grpc.TreeRequest\032/.io.de"
    "ephaven.proto.backplane.grpc.TreeRespons"
    "e\022\214\001\n\005Apply\022@.io.deephaven.proto.backpla"
    "ne.grpc.HierarchicalTableApplyRequest\032A."
    "io.deephaven.proto.backplane.grpc.Hierar"
    "chicalTableApplyResponse\022\211\001\n\004View\022\?.io.d"
    "eephaven.proto.backplane.grpc.Hierarchic"
    "alTableViewRequest\032@.io.deephaven.proto."
    "backplane.grpc.HierarchicalTableViewResp"
    "onse\022\231\001\n\014ExportSource\022G.io.deephaven.pro"
    "to.backplane.grpc.HierarchicalTableSourc"
    "eExportRequest\032@.io.deephaven.proto.back"
    "plane.grpc.ExportedTableCreationResponse"
    "BMH\001P\001ZGgithub.com/deephaven/deephaven-c"
    "ore/go/internal/proto/hierarchicaltableb"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_deps[2] =
    {
        &::descriptor_table_deephaven_2fproto_2ftable_2eproto,
        &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::absl::once_flag descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto = {
    false,
    false,
    2647,
    descriptor_table_protodef_deephaven_2fproto_2fhierarchicaltable_2eproto,
    "deephaven/proto/hierarchicaltable.proto",
    &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
    descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_deps,
    2,
    11,
    schemas,
    file_default_instances,
    TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto::offsets,
    file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto,
    file_level_enum_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2fhierarchicaltable_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter() {
  return &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2fhierarchicaltable_2eproto(&descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
// ===================================================================

class RollupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RollupRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_rollup_table_id(const RollupRequest* msg);
  static void set_has_result_rollup_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id(const RollupRequest* msg);
  static void set_has_source_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::_Internal::result_rollup_table_id(const RollupRequest* msg) {
  return *msg->_impl_.result_rollup_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::_Internal::source_table_id(const RollupRequest* msg) {
  return *msg->_impl_.source_table_id_;
}
void RollupRequest::clear_result_rollup_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_rollup_table_id_ != nullptr) _impl_.result_rollup_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RollupRequest::clear_source_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.source_table_id_ != nullptr) _impl_.source_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RollupRequest::clear_aggregations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregations_.Clear();
}
RollupRequest::RollupRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RollupRequest)
}
inline PROTOBUF_NDEBUG_INLINE RollupRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        aggregations_{visibility, arena, from.aggregations_},
        group_by_columns_{visibility, arena, from.group_by_columns_} {}

RollupRequest::RollupRequest(
    ::google::protobuf::Arena* arena,
    const RollupRequest& from)
    : ::google::protobuf::Message(arena) {
  RollupRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_rollup_table_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_rollup_table_id_)
                : nullptr;
  _impl_.source_table_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.source_table_id_)
                : nullptr;
  _impl_.include_constituents_ = from._impl_.include_constituents_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RollupRequest)
}
inline PROTOBUF_NDEBUG_INLINE RollupRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        aggregations_{visibility, arena},
        group_by_columns_{visibility, arena} {}

inline void RollupRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_rollup_table_id_),
           0,
           offsetof(Impl_, include_constituents_) -
               offsetof(Impl_, result_rollup_table_id_) +
               sizeof(Impl_::include_constituents_));
}
RollupRequest::~RollupRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RollupRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RollupRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_rollup_table_id_;
  delete _impl_.source_table_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RollupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aggregations_.Clear();
  _impl_.group_by_columns_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_rollup_table_id_ != nullptr);
      _impl_.result_rollup_table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_table_id_ != nullptr);
      _impl_.source_table_id_->Clear();
    }
  }
  _impl_.include_constituents_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RollupRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 72, 2> RollupRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RollupRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.result_rollup_table_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.source_table_id_)}},
    // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.aggregations_)}},
    // bool include_constituents = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RollupRequest, _impl_.include_constituents_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.include_constituents_)}},
    // repeated string group_by_columns = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.group_by_columns_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
    {PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.result_rollup_table_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
    {PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.source_table_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
    {PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.aggregations_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool include_constituents = 4;
    {PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.include_constituents_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string group_by_columns = 5;
    {PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.group_by_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation>()},
  }}, {{
    "\57\0\0\0\0\20\0\0"
    "io.deephaven.proto.backplane.grpc.RollupRequest"
    "group_by_columns"
  }},
};

::uint8_t* RollupRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::result_rollup_table_id(this),
        _Internal::result_rollup_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::source_table_id(this),
        _Internal::source_table_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregations_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregations().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool include_constituents = 4;
  if (this->_internal_include_constituents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_include_constituents(), target);
  }

  // repeated string group_by_columns = 5;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; ++i) {
    const auto& s = this->_internal_group_by_columns().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RollupRequest)
  return target;
}

::size_t RollupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
  total_size += 1UL * this->_internal_aggregations_size();
  for (const auto& msg : this->_internal_aggregations()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string group_by_columns = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_group_by_columns().size());
  for (int i = 0, n = _internal_group_by_columns().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_group_by_columns().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_rollup_table_id_);
    }

    // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.source_table_id_);
    }

  }
  // bool include_constituents = 4;
  if (this->_internal_include_constituents() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RollupRequest::_class_data_ = {
    RollupRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RollupRequest::GetClassData() const {
  return &_class_data_;
}

void RollupRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RollupRequest*>(&to_msg);
  auto& from = static_cast<const RollupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_aggregations()->MergeFrom(
      from._internal_aggregations());
  _this->_internal_mutable_group_by_columns()->MergeFrom(from._internal_group_by_columns());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_result_rollup_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_result_rollup_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_source_table_id());
    }
  }
  if (from._internal_include_constituents() != 0) {
    _this->_internal_set_include_constituents(from._internal_include_constituents());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RollupRequest::CopyFrom(const RollupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RollupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RollupRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RollupRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RollupRequest::InternalSwap(RollupRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.aggregations_.InternalSwap(&other->_impl_.aggregations_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.include_constituents_)
      + sizeof(RollupRequest::_impl_.include_constituents_)
      - PROTOBUF_FIELD_OFFSET(RollupRequest, _impl_.result_rollup_table_id_)>(
          reinterpret_cast<char*>(&_impl_.result_rollup_table_id_),
          reinterpret_cast<char*>(&other->_impl_.result_rollup_table_id_));
}

::google::protobuf::Metadata RollupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[0]);
}
// ===================================================================

class RollupResponse::_Internal {
 public:
};

RollupResponse::RollupResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RollupResponse)
}
RollupResponse::RollupResponse(
    ::google::protobuf::Arena* arena,
    const RollupResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  RollupResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RollupResponse)
}









::google::protobuf::Metadata RollupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[1]);
}
// ===================================================================

class TreeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TreeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_tree_table_id(const TreeRequest* msg);
  static void set_has_result_tree_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id(const TreeRequest* msg);
  static void set_has_source_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::_Internal::result_tree_table_id(const TreeRequest* msg) {
  return *msg->_impl_.result_tree_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::_Internal::source_table_id(const TreeRequest* msg) {
  return *msg->_impl_.source_table_id_;
}
void TreeRequest::clear_result_tree_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_tree_table_id_ != nullptr) _impl_.result_tree_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TreeRequest::clear_source_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.source_table_id_ != nullptr) _impl_.source_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TreeRequest::TreeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TreeRequest)
}
inline PROTOBUF_NDEBUG_INLINE TreeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        identifier_column_(arena, from.identifier_column_),
        parent_identifier_column_(arena, from.parent_identifier_column_) {}

TreeRequest::TreeRequest(
    ::google::protobuf::Arena* arena,
    const TreeRequest& from)
    : ::google::protobuf::Message(arena) {
  TreeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_tree_table_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_tree_table_id_)
                : nullptr;
  _impl_.source_table_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.source_table_id_)
                : nullptr;
  _impl_.promote_orphans_ = from._impl_.promote_orphans_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TreeRequest)
}
inline PROTOBUF_NDEBUG_INLINE TreeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        identifier_column_(arena),
        parent_identifier_column_(arena) {}

inline void TreeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_tree_table_id_),
           0,
           offsetof(Impl_, promote_orphans_) -
               offsetof(Impl_, result_tree_table_id_) +
               sizeof(Impl_::promote_orphans_));
}
TreeRequest::~TreeRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TreeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TreeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.identifier_column_.Destroy();
  _impl_.parent_identifier_column_.Destroy();
  delete _impl_.result_tree_table_id_;
  delete _impl_.source_table_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TreeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_column_.ClearToEmpty();
  _impl_.parent_identifier_column_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_tree_table_id_ != nullptr);
      _impl_.result_tree_table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_table_id_ != nullptr);
      _impl_.source_table_id_->Clear();
    }
  }
  _impl_.promote_orphans_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TreeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 95, 2> TreeRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TreeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.result_tree_table_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.source_table_id_)}},
    // string identifier_column = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.identifier_column_)}},
    // string parent_identifier_column = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.parent_identifier_column_)}},
    // bool promote_orphans = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TreeRequest, _impl_.promote_orphans_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.promote_orphans_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
    {PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.result_tree_table_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
    {PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.source_table_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string identifier_column = 3;
    {PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.identifier_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string parent_identifier_column = 4;
    {PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.parent_identifier_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool promote_orphans = 5;
    {PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.promote_orphans_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\55\0\0\21\30\0\0\0"
    "io.deephaven.proto.backplane.grpc.TreeRequest"
    "identifier_column"
    "parent_identifier_column"
  }},
};

::uint8_t* TreeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::result_tree_table_id(this),
        _Internal::result_tree_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::source_table_id(this),
        _Internal::source_table_id(this).GetCachedSize(), target, stream);
  }

  // string identifier_column = 3;
  if (!this->_internal_identifier_column().empty()) {
    const std::string& _s = this->_internal_identifier_column();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string parent_identifier_column = 4;
  if (!this->_internal_parent_identifier_column().empty()) {
    const std::string& _s = this->_internal_parent_identifier_column();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool promote_orphans = 5;
  if (this->_internal_promote_orphans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_promote_orphans(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TreeRequest)
  return target;
}

::size_t TreeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier_column = 3;
  if (!this->_internal_identifier_column().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier_column());
  }

  // string parent_identifier_column = 4;
  if (!this->_internal_parent_identifier_column().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_parent_identifier_column());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_tree_table_id_);
    }

    // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.source_table_id_);
    }

  }
  // bool promote_orphans = 5;
  if (this->_internal_promote_orphans() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TreeRequest::_class_data_ = {
    TreeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TreeRequest::GetClassData() const {
  return &_class_data_;
}

void TreeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TreeRequest*>(&to_msg);
  auto& from = static_cast<const TreeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier_column().empty()) {
    _this->_internal_set_identifier_column(from._internal_identifier_column());
  }
  if (!from._internal_parent_identifier_column().empty()) {
    _this->_internal_set_parent_identifier_column(from._internal_parent_identifier_column());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_result_tree_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_result_tree_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_source_table_id());
    }
  }
  if (from._internal_promote_orphans() != 0) {
    _this->_internal_set_promote_orphans(from._internal_promote_orphans());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TreeRequest::CopyFrom(const TreeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TreeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TreeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TreeRequest::InternalSwap(TreeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_column_, &other->_impl_.identifier_column_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_identifier_column_, &other->_impl_.parent_identifier_column_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.promote_orphans_)
      + sizeof(TreeRequest::_impl_.promote_orphans_)
      - PROTOBUF_FIELD_OFFSET(TreeRequest, _impl_.result_tree_table_id_)>(
          reinterpret_cast<char*>(&_impl_.result_tree_table_id_),
          reinterpret_cast<char*>(&other->_impl_.result_tree_table_id_));
}

::google::protobuf::Metadata TreeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[2]);
}
// ===================================================================

class TreeResponse::_Internal {
 public:
};

TreeResponse::TreeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TreeResponse)
}
TreeResponse::TreeResponse(
    ::google::protobuf::Arena* arena,
    const TreeResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  TreeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TreeResponse)
}









::google::protobuf::Metadata TreeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[3]);
}
// ===================================================================

class HierarchicalTableApplyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalTableApplyRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_hierarchical_table_id(const HierarchicalTableApplyRequest* msg);
  static void set_has_result_hierarchical_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::grpc::Ticket& input_hierarchical_table_id(const HierarchicalTableApplyRequest* msg);
  static void set_has_input_hierarchical_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::_Internal::result_hierarchical_table_id(const HierarchicalTableApplyRequest* msg) {
  return *msg->_impl_.result_hierarchical_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::_Internal::input_hierarchical_table_id(const HierarchicalTableApplyRequest* msg) {
  return *msg->_impl_.input_hierarchical_table_id_;
}
void HierarchicalTableApplyRequest::clear_result_hierarchical_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_hierarchical_table_id_ != nullptr) _impl_.result_hierarchical_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HierarchicalTableApplyRequest::clear_input_hierarchical_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.input_hierarchical_table_id_ != nullptr) _impl_.input_hierarchical_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HierarchicalTableApplyRequest::clear_filters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filters_.Clear();
}
void HierarchicalTableApplyRequest::clear_sorts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sorts_.Clear();
}
HierarchicalTableApplyRequest::HierarchicalTableApplyRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableApplyRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filters_{visibility, arena, from.filters_},
        sorts_{visibility, arena, from.sorts_} {}

HierarchicalTableApplyRequest::HierarchicalTableApplyRequest(
    ::google::protobuf::Arena* arena,
    const HierarchicalTableApplyRequest& from)
    : ::google::protobuf::Message(arena) {
  HierarchicalTableApplyRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_hierarchical_table_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_hierarchical_table_id_)
                : nullptr;
  _impl_.input_hierarchical_table_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.input_hierarchical_table_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableApplyRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        filters_{visibility, arena},
        sorts_{visibility, arena} {}

inline void HierarchicalTableApplyRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_hierarchical_table_id_),
           0,
           offsetof(Impl_, input_hierarchical_table_id_) -
               offsetof(Impl_, result_hierarchical_table_id_) +
               sizeof(Impl_::input_hierarchical_table_id_));
}
HierarchicalTableApplyRequest::~HierarchicalTableApplyRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HierarchicalTableApplyRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_hierarchical_table_id_;
  delete _impl_.input_hierarchical_table_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HierarchicalTableApplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _impl_.sorts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_hierarchical_table_id_ != nullptr);
      _impl_.result_hierarchical_table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.input_hierarchical_table_id_ != nullptr);
      _impl_.input_hierarchical_table_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HierarchicalTableApplyRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> HierarchicalTableApplyRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HierarchicalTableApplyRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.sorts_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.result_hierarchical_table_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.input_hierarchical_table_id_)}},
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.filters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.result_hierarchical_table_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.input_hierarchical_table_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.filters_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.sorts_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Condition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SortDescriptor>()},
  }}, {{
  }},
};

::uint8_t* HierarchicalTableApplyRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::result_hierarchical_table_id(this),
        _Internal::result_hierarchical_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::input_hierarchical_table_id(this),
        _Internal::input_hierarchical_table_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorts_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorts().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  return target;
}

::size_t HierarchicalTableApplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_internal_filters()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->_internal_sorts()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_hierarchical_table_id_);
    }

    // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.input_hierarchical_table_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HierarchicalTableApplyRequest::_class_data_ = {
    HierarchicalTableApplyRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HierarchicalTableApplyRequest::GetClassData() const {
  return &_class_data_;
}

void HierarchicalTableApplyRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HierarchicalTableApplyRequest*>(&to_msg);
  auto& from = static_cast<const HierarchicalTableApplyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_filters()->MergeFrom(
      from._internal_filters());
  _this->_internal_mutable_sorts()->MergeFrom(
      from._internal_sorts());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_result_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_result_hierarchical_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_input_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_input_hierarchical_table_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableApplyRequest::CopyFrom(const HierarchicalTableApplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HierarchicalTableApplyRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HierarchicalTableApplyRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HierarchicalTableApplyRequest::InternalSwap(HierarchicalTableApplyRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  _impl_.sorts_.InternalSwap(&other->_impl_.sorts_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.input_hierarchical_table_id_)
      + sizeof(HierarchicalTableApplyRequest::_impl_.input_hierarchical_table_id_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalTableApplyRequest, _impl_.result_hierarchical_table_id_)>(
          reinterpret_cast<char*>(&_impl_.result_hierarchical_table_id_),
          reinterpret_cast<char*>(&other->_impl_.result_hierarchical_table_id_));
}

::google::protobuf::Metadata HierarchicalTableApplyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[4]);
}
// ===================================================================

class HierarchicalTableApplyResponse::_Internal {
 public:
};

HierarchicalTableApplyResponse::HierarchicalTableApplyResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse)
}
HierarchicalTableApplyResponse::HierarchicalTableApplyResponse(
    ::google::protobuf::Arena* arena,
    const HierarchicalTableApplyResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  HierarchicalTableApplyResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse)
}









::google::protobuf::Metadata HierarchicalTableApplyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[5]);
}
// ===================================================================

class HierarchicalTableDescriptor::_Internal {
 public:
};

HierarchicalTableDescriptor::HierarchicalTableDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : snapshot_schema_(arena, from.snapshot_schema_),
        _cached_size_{0} {}

HierarchicalTableDescriptor::HierarchicalTableDescriptor(
    ::google::protobuf::Arena* arena,
    const HierarchicalTableDescriptor& from)
    : ::google::protobuf::Message(arena) {
  HierarchicalTableDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.is_static_ = from._impl_.is_static_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : snapshot_schema_(arena),
        _cached_size_{0} {}

inline void HierarchicalTableDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_static_ = {};
}
HierarchicalTableDescriptor::~HierarchicalTableDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HierarchicalTableDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.snapshot_schema_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HierarchicalTableDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snapshot_schema_.ClearToEmpty();
  _impl_.is_static_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HierarchicalTableDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> HierarchicalTableDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HierarchicalTableDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool is_static = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HierarchicalTableDescriptor, _impl_.is_static_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HierarchicalTableDescriptor, _impl_.is_static_)}},
    // bytes snapshot_schema = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HierarchicalTableDescriptor, _impl_.snapshot_schema_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes snapshot_schema = 1;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableDescriptor, _impl_.snapshot_schema_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bool is_static = 2;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableDescriptor, _impl_.is_static_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* HierarchicalTableDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes snapshot_schema = 1;
  if (!this->_internal_snapshot_schema().empty()) {
    const std::string& _s = this->_internal_snapshot_schema();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bool is_static = 2;
  if (this->_internal_is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_static(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  return target;
}

::size_t HierarchicalTableDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes snapshot_schema = 1;
  if (!this->_internal_snapshot_schema().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_snapshot_schema());
  }

  // bool is_static = 2;
  if (this->_internal_is_static() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HierarchicalTableDescriptor::_class_data_ = {
    HierarchicalTableDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HierarchicalTableDescriptor::GetClassData() const {
  return &_class_data_;
}

void HierarchicalTableDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HierarchicalTableDescriptor*>(&to_msg);
  auto& from = static_cast<const HierarchicalTableDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_snapshot_schema().empty()) {
    _this->_internal_set_snapshot_schema(from._internal_snapshot_schema());
  }
  if (from._internal_is_static() != 0) {
    _this->_internal_set_is_static(from._internal_is_static());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableDescriptor::CopyFrom(const HierarchicalTableDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HierarchicalTableDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HierarchicalTableDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HierarchicalTableDescriptor::InternalSwap(HierarchicalTableDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.snapshot_schema_, &other->_impl_.snapshot_schema_, arena);
        swap(_impl_.is_static_, other->_impl_.is_static_);
}

::google::protobuf::Metadata HierarchicalTableDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[6]);
}
// ===================================================================

class HierarchicalTableViewRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalTableViewRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest, _impl_._oneof_case_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_view_id(const HierarchicalTableViewRequest* msg);
  static void set_has_result_view_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id(const HierarchicalTableViewRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& existing_view_id(const HierarchicalTableViewRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& expansions(const HierarchicalTableViewRequest* msg);
  static void set_has_expansions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_Internal::result_view_id(const HierarchicalTableViewRequest* msg) {
  return *msg->_impl_.result_view_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_Internal::hierarchical_table_id(const HierarchicalTableViewRequest* msg) {
  return *msg->_impl_.target_.hierarchical_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_Internal::existing_view_id(const HierarchicalTableViewRequest* msg) {
  return *msg->_impl_.target_.existing_view_id_;
}
const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& HierarchicalTableViewRequest::_Internal::expansions(const HierarchicalTableViewRequest* msg) {
  return *msg->_impl_.expansions_;
}
void HierarchicalTableViewRequest::clear_result_view_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_view_id_ != nullptr) _impl_.result_view_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HierarchicalTableViewRequest::set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_target();
  if (hierarchical_table_id) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(hierarchical_table_id)->GetArena();
    if (message_arena != submessage_arena) {
      hierarchical_table_id = ::google::protobuf::internal::GetOwnedMessage(message_arena, hierarchical_table_id, submessage_arena);
    }
    set_has_hierarchical_table_id();
    _impl_.target_.hierarchical_table_id_ = hierarchical_table_id;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
}
void HierarchicalTableViewRequest::clear_hierarchical_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (target_case() == kHierarchicalTableId) {
    if (GetArena() == nullptr) {
      delete _impl_.target_.hierarchical_table_id_;
    }
    clear_has_target();
  }
}
void HierarchicalTableViewRequest::set_allocated_existing_view_id(::io::deephaven::proto::backplane::grpc::Ticket* existing_view_id) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_target();
  if (existing_view_id) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(existing_view_id)->GetArena();
    if (message_arena != submessage_arena) {
      existing_view_id = ::google::protobuf::internal::GetOwnedMessage(message_arena, existing_view_id, submessage_arena);
    }
    set_has_existing_view_id();
    _impl_.target_.existing_view_id_ = existing_view_id;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
}
void HierarchicalTableViewRequest::clear_existing_view_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (target_case() == kExistingViewId) {
    if (GetArena() == nullptr) {
      delete _impl_.target_.existing_view_id_;
    }
    clear_has_target();
  }
}
HierarchicalTableViewRequest::HierarchicalTableViewRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableViewRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        target_{},
        _oneof_case_{from._oneof_case_[0]} {}

HierarchicalTableViewRequest::HierarchicalTableViewRequest(
    ::google::protobuf::Arena* arena,
    const HierarchicalTableViewRequest& from)
    : ::google::protobuf::Message(arena) {
  HierarchicalTableViewRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_view_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_view_id_)
                : nullptr;
  _impl_.expansions_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor>(arena, *from._impl_.expansions_)
                : nullptr;
  switch (target_case()) {
    case TARGET_NOT_SET:
      break;
      case kHierarchicalTableId:
        _impl_.target_.hierarchical_table_id_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.target_.hierarchical_table_id_);
        break;
      case kExistingViewId:
        _impl_.target_.existing_view_id_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.target_.existing_view_id_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableViewRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        target_{},
        _oneof_case_{} {}

inline void HierarchicalTableViewRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_view_id_),
           0,
           offsetof(Impl_, expansions_) -
               offsetof(Impl_, result_view_id_) +
               sizeof(Impl_::expansions_));
}
HierarchicalTableViewRequest::~HierarchicalTableViewRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HierarchicalTableViewRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_view_id_;
  delete _impl_.expansions_;
  if (has_target()) {
    clear_target();
  }
  _impl_.~Impl_();
}

void HierarchicalTableViewRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (target_case()) {
    case kHierarchicalTableId: {
      if (GetArena() == nullptr) {
        delete _impl_.target_.hierarchical_table_id_;
      }
      break;
    }
    case kExistingViewId: {
      if (GetArena() == nullptr) {
        delete _impl_.target_.existing_view_id_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}


PROTOBUF_NOINLINE void HierarchicalTableViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_view_id_ != nullptr);
      _impl_.result_view_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.expansions_ != nullptr);
      _impl_.expansions_->Clear();
    }
  }
  clear_target();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HierarchicalTableViewRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 4, 0, 2> HierarchicalTableViewRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HierarchicalTableViewRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 3, PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.expansions_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.result_view_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.result_view_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.target_.hierarchical_table_id_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.target_.existing_view_id_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.expansions_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor>()},
  }}, {{
  }},
};

::uint8_t* HierarchicalTableViewRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::result_view_id(this),
        _Internal::result_view_id(this).GetCachedSize(), target, stream);
  }

  switch (target_case()) {
    case kHierarchicalTableId: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::hierarchical_table_id(this),
          _Internal::hierarchical_table_id(this).GetCachedSize(), target, stream);
      break;
    }
    case kExistingViewId: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::existing_view_id(this),
          _Internal::existing_view_id(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::expansions(this),
        _Internal::expansions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  return target;
}

::size_t HierarchicalTableViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_view_id_);
    }

    // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expansions_);
    }

  }
  switch (target_case()) {
    // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
    case kHierarchicalTableId: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_.hierarchical_table_id_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
    case kExistingViewId: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_.existing_view_id_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HierarchicalTableViewRequest::_class_data_ = {
    HierarchicalTableViewRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HierarchicalTableViewRequest::GetClassData() const {
  return &_class_data_;
}

void HierarchicalTableViewRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HierarchicalTableViewRequest*>(&to_msg);
  auto& from = static_cast<const HierarchicalTableViewRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_result_view_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_result_view_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_expansions()->::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor::MergeFrom(
          from._internal_expansions());
    }
  }
  switch (from.target_case()) {
    case kHierarchicalTableId: {
      _this->_internal_mutable_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_hierarchical_table_id());
      break;
    }
    case kExistingViewId: {
      _this->_internal_mutable_existing_view_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_existing_view_id());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableViewRequest::CopyFrom(const HierarchicalTableViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HierarchicalTableViewRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HierarchicalTableViewRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HierarchicalTableViewRequest::InternalSwap(HierarchicalTableViewRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.expansions_)
      + sizeof(HierarchicalTableViewRequest::_impl_.expansions_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalTableViewRequest, _impl_.result_view_id_)>(
          reinterpret_cast<char*>(&_impl_.result_view_id_),
          reinterpret_cast<char*>(&other->_impl_.result_view_id_));
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata HierarchicalTableViewRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[7]);
}
// ===================================================================

class HierarchicalTableViewKeyTableDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalTableViewKeyTableDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HierarchicalTableViewKeyTableDescriptor, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& key_table_id(const HierarchicalTableViewKeyTableDescriptor* msg);
  static void set_has_key_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_table_action_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewKeyTableDescriptor::_Internal::key_table_id(const HierarchicalTableViewKeyTableDescriptor* msg) {
  return *msg->_impl_.key_table_id_;
}
void HierarchicalTableViewKeyTableDescriptor::clear_key_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.key_table_id_ != nullptr) _impl_.key_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
HierarchicalTableViewKeyTableDescriptor::HierarchicalTableViewKeyTableDescriptor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableViewKeyTableDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        key_table_action_column_(arena, from.key_table_action_column_) {}

HierarchicalTableViewKeyTableDescriptor::HierarchicalTableViewKeyTableDescriptor(
    ::google::protobuf::Arena* arena,
    const HierarchicalTableViewKeyTableDescriptor& from)
    : ::google::protobuf::Message(arena) {
  HierarchicalTableViewKeyTableDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.key_table_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.key_table_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableViewKeyTableDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        key_table_action_column_(arena) {}

inline void HierarchicalTableViewKeyTableDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.key_table_id_ = {};
}
HierarchicalTableViewKeyTableDescriptor::~HierarchicalTableViewKeyTableDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HierarchicalTableViewKeyTableDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_table_action_column_.Destroy();
  delete _impl_.key_table_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HierarchicalTableViewKeyTableDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_table_action_column_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.key_table_id_ != nullptr);
      _impl_.key_table_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HierarchicalTableViewKeyTableDescriptor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 105, 2> HierarchicalTableViewKeyTableDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HierarchicalTableViewKeyTableDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HierarchicalTableViewKeyTableDescriptor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string key_table_action_column = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(HierarchicalTableViewKeyTableDescriptor, _impl_.key_table_action_column_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(HierarchicalTableViewKeyTableDescriptor, _impl_.key_table_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableViewKeyTableDescriptor, _impl_.key_table_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string key_table_action_column = 2;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableViewKeyTableDescriptor, _impl_.key_table_action_column_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\111\0\27\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor"
    "key_table_action_column"
  }},
};

::uint8_t* HierarchicalTableViewKeyTableDescriptor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::key_table_id(this),
        _Internal::key_table_id(this).GetCachedSize(), target, stream);
  }

  // optional string key_table_action_column = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_key_table_action_column();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  return target;
}

::size_t HierarchicalTableViewKeyTableDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key_table_action_column = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_key_table_action_column());
    }

    // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.key_table_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HierarchicalTableViewKeyTableDescriptor::_class_data_ = {
    HierarchicalTableViewKeyTableDescriptor::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HierarchicalTableViewKeyTableDescriptor::GetClassData() const {
  return &_class_data_;
}

void HierarchicalTableViewKeyTableDescriptor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HierarchicalTableViewKeyTableDescriptor*>(&to_msg);
  auto& from = static_cast<const HierarchicalTableViewKeyTableDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key_table_action_column(from._internal_key_table_action_column());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_key_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_key_table_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableViewKeyTableDescriptor::CopyFrom(const HierarchicalTableViewKeyTableDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HierarchicalTableViewKeyTableDescriptor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HierarchicalTableViewKeyTableDescriptor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HierarchicalTableViewKeyTableDescriptor::InternalSwap(HierarchicalTableViewKeyTableDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_table_action_column_, &other->_impl_.key_table_action_column_, arena);
  swap(_impl_.key_table_id_, other->_impl_.key_table_id_);
}

::google::protobuf::Metadata HierarchicalTableViewKeyTableDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[8]);
}
// ===================================================================

class HierarchicalTableViewResponse::_Internal {
 public:
};

HierarchicalTableViewResponse::HierarchicalTableViewResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse)
}
HierarchicalTableViewResponse::HierarchicalTableViewResponse(
    ::google::protobuf::Arena* arena,
    const HierarchicalTableViewResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  HierarchicalTableViewResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse)
}









::google::protobuf::Metadata HierarchicalTableViewResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[9]);
}
// ===================================================================

class HierarchicalTableSourceExportRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalTableSourceExportRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_table_id(const HierarchicalTableSourceExportRequest* msg);
  static void set_has_result_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id(const HierarchicalTableSourceExportRequest* msg);
  static void set_has_hierarchical_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::_Internal::result_table_id(const HierarchicalTableSourceExportRequest* msg) {
  return *msg->_impl_.result_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::_Internal::hierarchical_table_id(const HierarchicalTableSourceExportRequest* msg) {
  return *msg->_impl_.hierarchical_table_id_;
}
void HierarchicalTableSourceExportRequest::clear_result_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_table_id_ != nullptr) _impl_.result_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HierarchicalTableSourceExportRequest::clear_hierarchical_table_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hierarchical_table_id_ != nullptr) _impl_.hierarchical_table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
HierarchicalTableSourceExportRequest::HierarchicalTableSourceExportRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableSourceExportRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HierarchicalTableSourceExportRequest::HierarchicalTableSourceExportRequest(
    ::google::protobuf::Arena* arena,
    const HierarchicalTableSourceExportRequest& from)
    : ::google::protobuf::Message(arena) {
  HierarchicalTableSourceExportRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_table_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_table_id_)
                : nullptr;
  _impl_.hierarchical_table_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.hierarchical_table_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
}
inline PROTOBUF_NDEBUG_INLINE HierarchicalTableSourceExportRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HierarchicalTableSourceExportRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_table_id_),
           0,
           offsetof(Impl_, hierarchical_table_id_) -
               offsetof(Impl_, result_table_id_) +
               sizeof(Impl_::hierarchical_table_id_));
}
HierarchicalTableSourceExportRequest::~HierarchicalTableSourceExportRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HierarchicalTableSourceExportRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_table_id_;
  delete _impl_.hierarchical_table_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HierarchicalTableSourceExportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_table_id_ != nullptr);
      _impl_.result_table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.hierarchical_table_id_ != nullptr);
      _impl_.hierarchical_table_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HierarchicalTableSourceExportRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> HierarchicalTableSourceExportRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HierarchicalTableSourceExportRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_.hierarchical_table_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_.result_table_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_.result_table_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
    {PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_.hierarchical_table_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

::uint8_t* HierarchicalTableSourceExportRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::result_table_id(this),
        _Internal::result_table_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::hierarchical_table_id(this),
        _Internal::hierarchical_table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  return target;
}

::size_t HierarchicalTableSourceExportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_table_id_);
    }

    // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.hierarchical_table_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HierarchicalTableSourceExportRequest::_class_data_ = {
    HierarchicalTableSourceExportRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HierarchicalTableSourceExportRequest::GetClassData() const {
  return &_class_data_;
}

void HierarchicalTableSourceExportRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HierarchicalTableSourceExportRequest*>(&to_msg);
  auto& from = static_cast<const HierarchicalTableSourceExportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_result_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_result_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_hierarchical_table_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_hierarchical_table_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalTableSourceExportRequest::CopyFrom(const HierarchicalTableSourceExportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HierarchicalTableSourceExportRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HierarchicalTableSourceExportRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HierarchicalTableSourceExportRequest::InternalSwap(HierarchicalTableSourceExportRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_.hierarchical_table_id_)
      + sizeof(HierarchicalTableSourceExportRequest::_impl_.hierarchical_table_id_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalTableSourceExportRequest, _impl_.result_table_id_)>(
          reinterpret_cast<char*>(&_impl_.result_table_id_),
          reinterpret_cast<char*>(&other->_impl_.result_table_id_));
}

::google::protobuf::Metadata HierarchicalTableSourceExportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_getter, &descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fhierarchicaltable_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
