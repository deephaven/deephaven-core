// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2fconfig_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class AuthenticationConstantsRequest;
struct AuthenticationConstantsRequestDefaultTypeInternal;
extern AuthenticationConstantsRequestDefaultTypeInternal _AuthenticationConstantsRequest_default_instance_;
class AuthenticationConstantsResponse;
struct AuthenticationConstantsResponseDefaultTypeInternal;
extern AuthenticationConstantsResponseDefaultTypeInternal _AuthenticationConstantsResponse_default_instance_;
class AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse;
struct AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUseDefaultTypeInternal;
extern AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUseDefaultTypeInternal _AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse_default_instance_;
class ConfigValue;
struct ConfigValueDefaultTypeInternal;
extern ConfigValueDefaultTypeInternal _ConfigValue_default_instance_;
class ConfigurationConstantsRequest;
struct ConfigurationConstantsRequestDefaultTypeInternal;
extern ConfigurationConstantsRequestDefaultTypeInternal _ConfigurationConstantsRequest_default_instance_;
class ConfigurationConstantsResponse;
struct ConfigurationConstantsResponseDefaultTypeInternal;
extern ConfigurationConstantsResponseDefaultTypeInternal _ConfigurationConstantsResponse_default_instance_;
class ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse;
struct ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUseDefaultTypeInternal;
extern ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUseDefaultTypeInternal _ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::AuthenticationConstantsRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ConfigValue* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ConfigValue>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ConfigurationConstantsRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class AuthenticationConstantsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.AuthenticationConstantsRequest) */ {
 public:
  inline AuthenticationConstantsRequest() : AuthenticationConstantsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AuthenticationConstantsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationConstantsRequest(const AuthenticationConstantsRequest& from);
  AuthenticationConstantsRequest(AuthenticationConstantsRequest&& from) noexcept
    : AuthenticationConstantsRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticationConstantsRequest& operator=(const AuthenticationConstantsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationConstantsRequest& operator=(AuthenticationConstantsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationConstantsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationConstantsRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticationConstantsRequest*>(
               &_AuthenticationConstantsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationConstantsRequest& a, AuthenticationConstantsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationConstantsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationConstantsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationConstantsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationConstantsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AuthenticationConstantsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AuthenticationConstantsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.AuthenticationConstantsRequest";
  }
  protected:
  explicit AuthenticationConstantsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.AuthenticationConstantsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_deephaven_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationConstantsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ConfigurationConstantsRequest) */ {
 public:
  inline ConfigurationConstantsRequest() : ConfigurationConstantsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ConfigurationConstantsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationConstantsRequest(const ConfigurationConstantsRequest& from);
  ConfigurationConstantsRequest(ConfigurationConstantsRequest&& from) noexcept
    : ConfigurationConstantsRequest() {
    *this = ::std::move(from);
  }

  inline ConfigurationConstantsRequest& operator=(const ConfigurationConstantsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationConstantsRequest& operator=(ConfigurationConstantsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigurationConstantsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationConstantsRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigurationConstantsRequest*>(
               &_ConfigurationConstantsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigurationConstantsRequest& a, ConfigurationConstantsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationConstantsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationConstantsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigurationConstantsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigurationConstantsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ConfigurationConstantsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ConfigurationConstantsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ConfigurationConstantsRequest";
  }
  protected:
  explicit ConfigurationConstantsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ConfigurationConstantsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_deephaven_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse, 
    std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse, 
    std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse& other);
  static const AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse*>(&_AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "io.deephaven.proto.backplane.grpc.AuthenticationConstantsResponse.ConfigValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_deephaven_2fproto_2fconfig_2eproto;
};

// -------------------------------------------------------------------

class AuthenticationConstantsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.AuthenticationConstantsResponse) */ {
 public:
  inline AuthenticationConstantsResponse() : AuthenticationConstantsResponse(nullptr) {}
  ~AuthenticationConstantsResponse() override;
  explicit PROTOBUF_CONSTEXPR AuthenticationConstantsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationConstantsResponse(const AuthenticationConstantsResponse& from);
  AuthenticationConstantsResponse(AuthenticationConstantsResponse&& from) noexcept
    : AuthenticationConstantsResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticationConstantsResponse& operator=(const AuthenticationConstantsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationConstantsResponse& operator=(AuthenticationConstantsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationConstantsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationConstantsResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticationConstantsResponse*>(
               &_AuthenticationConstantsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticationConstantsResponse& a, AuthenticationConstantsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationConstantsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationConstantsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationConstantsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationConstantsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationConstantsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticationConstantsResponse& from) {
    AuthenticationConstantsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationConstantsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.AuthenticationConstantsResponse";
  }
  protected:
  explicit AuthenticationConstantsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConfigValuesFieldNumber = 1,
  };
  // map<string, .io.deephaven.proto.backplane.grpc.ConfigValue> config_values = 1;
  int config_values_size() const;
  private:
  int _internal_config_values_size() const;
  public:
  void clear_config_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
      _internal_config_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
      _internal_mutable_config_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
      config_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
      mutable_config_values();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.AuthenticationConstantsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AuthenticationConstantsResponse_ConfigValuesEntry_DoNotUse,
        std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> config_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse, 
    std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse, 
    std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse& other);
  static const ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse*>(&_ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "io.deephaven.proto.backplane.grpc.ConfigurationConstantsResponse.ConfigValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_deephaven_2fproto_2fconfig_2eproto;
};

// -------------------------------------------------------------------

class ConfigurationConstantsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ConfigurationConstantsResponse) */ {
 public:
  inline ConfigurationConstantsResponse() : ConfigurationConstantsResponse(nullptr) {}
  ~ConfigurationConstantsResponse() override;
  explicit PROTOBUF_CONSTEXPR ConfigurationConstantsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationConstantsResponse(const ConfigurationConstantsResponse& from);
  ConfigurationConstantsResponse(ConfigurationConstantsResponse&& from) noexcept
    : ConfigurationConstantsResponse() {
    *this = ::std::move(from);
  }

  inline ConfigurationConstantsResponse& operator=(const ConfigurationConstantsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationConstantsResponse& operator=(ConfigurationConstantsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigurationConstantsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationConstantsResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigurationConstantsResponse*>(
               &_ConfigurationConstantsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConfigurationConstantsResponse& a, ConfigurationConstantsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationConstantsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationConstantsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigurationConstantsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigurationConstantsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigurationConstantsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigurationConstantsResponse& from) {
    ConfigurationConstantsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationConstantsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ConfigurationConstantsResponse";
  }
  protected:
  explicit ConfigurationConstantsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConfigValuesFieldNumber = 1,
  };
  // map<string, .io.deephaven.proto.backplane.grpc.ConfigValue> config_values = 1;
  int config_values_size() const;
  private:
  int _internal_config_values_size() const;
  public:
  void clear_config_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
      _internal_config_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
      _internal_mutable_config_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
      config_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
      mutable_config_values();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ConfigurationConstantsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ConfigurationConstantsResponse_ConfigValuesEntry_DoNotUse,
        std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> config_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConfigValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ConfigValue) */ {
 public:
  inline ConfigValue() : ConfigValue(nullptr) {}
  ~ConfigValue() override;
  explicit PROTOBUF_CONSTEXPR ConfigValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigValue(const ConfigValue& from);
  ConfigValue(ConfigValue&& from) noexcept
    : ConfigValue() {
    *this = ::std::move(from);
  }

  inline ConfigValue& operator=(const ConfigValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigValue& operator=(ConfigValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigValue& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kStringValue = 3,
    KIND_NOT_SET = 0,
  };

  static inline const ConfigValue* internal_default_instance() {
    return reinterpret_cast<const ConfigValue*>(
               &_ConfigValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConfigValue& a, ConfigValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigValue& from) {
    ConfigValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ConfigValue";
  }
  protected:
  explicit ConfigValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 3,
  };
  // string string_value = 3;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ConfigValue)
 private:
  class _Internal;
  void set_has_string_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    } kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticationConstantsRequest

// -------------------------------------------------------------------

// ConfigurationConstantsRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuthenticationConstantsResponse

// map<string, .io.deephaven.proto.backplane.grpc.ConfigValue> config_values = 1;
inline int AuthenticationConstantsResponse::_internal_config_values_size() const {
  return _impl_.config_values_.size();
}
inline int AuthenticationConstantsResponse::config_values_size() const {
  return _internal_config_values_size();
}
inline void AuthenticationConstantsResponse::clear_config_values() {
  _impl_.config_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
AuthenticationConstantsResponse::_internal_config_values() const {
  return _impl_.config_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
AuthenticationConstantsResponse::config_values() const {
  // @@protoc_insertion_point(field_map:io.deephaven.proto.backplane.grpc.AuthenticationConstantsResponse.config_values)
  return _internal_config_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
AuthenticationConstantsResponse::_internal_mutable_config_values() {
  return _impl_.config_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
AuthenticationConstantsResponse::mutable_config_values() {
  // @@protoc_insertion_point(field_mutable_map:io.deephaven.proto.backplane.grpc.AuthenticationConstantsResponse.config_values)
  return _internal_mutable_config_values();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConfigurationConstantsResponse

// map<string, .io.deephaven.proto.backplane.grpc.ConfigValue> config_values = 1;
inline int ConfigurationConstantsResponse::_internal_config_values_size() const {
  return _impl_.config_values_.size();
}
inline int ConfigurationConstantsResponse::config_values_size() const {
  return _internal_config_values_size();
}
inline void ConfigurationConstantsResponse::clear_config_values() {
  _impl_.config_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
ConfigurationConstantsResponse::_internal_config_values() const {
  return _impl_.config_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >&
ConfigurationConstantsResponse::config_values() const {
  // @@protoc_insertion_point(field_map:io.deephaven.proto.backplane.grpc.ConfigurationConstantsResponse.config_values)
  return _internal_config_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
ConfigurationConstantsResponse::_internal_mutable_config_values() {
  return _impl_.config_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::deephaven::proto::backplane::grpc::ConfigValue >*
ConfigurationConstantsResponse::mutable_config_values() {
  // @@protoc_insertion_point(field_mutable_map:io.deephaven.proto.backplane.grpc.ConfigurationConstantsResponse.config_values)
  return _internal_mutable_config_values();
}

// -------------------------------------------------------------------

// ConfigValue

// string string_value = 3;
inline bool ConfigValue::_internal_has_string_value() const {
  return kind_case() == kStringValue;
}
inline bool ConfigValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void ConfigValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void ConfigValue::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.kind_.string_value_.Destroy();
    clear_has_kind();
  }
}
inline const std::string& ConfigValue::string_value() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ConfigValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void ConfigValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  _impl_.kind_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ConfigValue.string_value)
}
inline std::string* ConfigValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ConfigValue.string_value)
  return _s;
}
inline const std::string& ConfigValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.kind_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  _impl_.kind_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  return _impl_.kind_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* ConfigValue::release_string_value() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ConfigValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_kind();
    return _impl_.kind_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void ConfigValue::set_allocated_string_value(std::string* string_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.kind_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ConfigValue.string_value)
}

inline bool ConfigValue::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void ConfigValue::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline ConfigValue::KindCase ConfigValue::kind_case() const {
  return ConfigValue::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fconfig_2eproto
