// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deephaven/proto/partitionedtable.proto

#include "deephaven/proto/partitionedtable.pb.h"
#include "deephaven/proto/partitionedtable.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

static const char* PartitionedTableService_method_names[] = {
  "/io.deephaven.proto.backplane.grpc.PartitionedTableService/PartitionBy",
  "/io.deephaven.proto.backplane.grpc.PartitionedTableService/Merge",
  "/io.deephaven.proto.backplane.grpc.PartitionedTableService/GetTable",
};

std::unique_ptr< PartitionedTableService::Stub> PartitionedTableService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PartitionedTableService::Stub> stub(new PartitionedTableService::Stub(channel, options));
  return stub;
}

PartitionedTableService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PartitionBy_(PartitionedTableService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Merge_(PartitionedTableService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTable_(PartitionedTableService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PartitionedTableService::Stub::PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PartitionBy_, context, request, response);
}

void PartitionedTableService::Stub::async::PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartitionBy_, context, request, response, std::move(f));
}

void PartitionedTableService::Stub::async::PartitionBy(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartitionBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* PartitionedTableService::Stub::PrepareAsyncPartitionByRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::PartitionByResponse, ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PartitionBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::PartitionByResponse>* PartitionedTableService::Stub::AsyncPartitionByRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartitionByRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PartitionedTableService::Stub::Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Merge_, context, request, response);
}

void PartitionedTableService::Stub::async::Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Merge_, context, request, response, std::move(f));
}

void PartitionedTableService::Stub::async::Merge(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Merge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PartitionedTableService::Stub::PrepareAsyncMergeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::io::deephaven::proto::backplane::grpc::MergeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Merge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PartitionedTableService::Stub::AsyncMergeRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMergeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PartitionedTableService::Stub::GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTable_, context, request, response);
}

void PartitionedTableService::Stub::async::GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTable_, context, request, response, std::move(f));
}

void PartitionedTableService::Stub::async::GetTable(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PartitionedTableService::Stub::PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>* PartitionedTableService::Stub::AsyncGetTableRaw(::grpc::ClientContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

PartitionedTableService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PartitionedTableService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PartitionedTableService::Service, ::io::deephaven::proto::backplane::grpc::PartitionByRequest, ::io::deephaven::proto::backplane::grpc::PartitionByResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PartitionedTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* req,
             ::io::deephaven::proto::backplane::grpc::PartitionByResponse* resp) {
               return service->PartitionBy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PartitionedTableService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PartitionedTableService::Service, ::io::deephaven::proto::backplane::grpc::MergeRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PartitionedTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::MergeRequest* req,
             ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* resp) {
               return service->Merge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PartitionedTableService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PartitionedTableService::Service, ::io::deephaven::proto::backplane::grpc::GetTableRequest, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PartitionedTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::io::deephaven::proto::backplane::grpc::GetTableRequest* req,
             ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* resp) {
               return service->GetTable(ctx, req, resp);
             }, this)));
}

PartitionedTableService::Service::~Service() {
}

::grpc::Status PartitionedTableService::Service::PartitionBy(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest* request, ::io::deephaven::proto::backplane::grpc::PartitionByResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PartitionedTableService::Service::Merge(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::MergeRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PartitionedTableService::Service::GetTable(::grpc::ServerContext* context, const ::io::deephaven::proto::backplane::grpc::GetTableRequest* request, ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace io
}  // namespace deephaven
}  // namespace proto
}  // namespace backplane
}  // namespace grpc

