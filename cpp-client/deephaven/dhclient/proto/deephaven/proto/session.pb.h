// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/session.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fsession_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fsession_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fsession_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fsession_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_deephaven_2fproto_2fsession_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class CloseSessionResponse;
struct CloseSessionResponseDefaultTypeInternal;
extern CloseSessionResponseDefaultTypeInternal _CloseSessionResponse_default_instance_;
class ExportNotification;
struct ExportNotificationDefaultTypeInternal;
extern ExportNotificationDefaultTypeInternal _ExportNotification_default_instance_;
class ExportNotificationRequest;
struct ExportNotificationRequestDefaultTypeInternal;
extern ExportNotificationRequestDefaultTypeInternal _ExportNotificationRequest_default_instance_;
class ExportRequest;
struct ExportRequestDefaultTypeInternal;
extern ExportRequestDefaultTypeInternal _ExportRequest_default_instance_;
class ExportResponse;
struct ExportResponseDefaultTypeInternal;
extern ExportResponseDefaultTypeInternal _ExportResponse_default_instance_;
class HandshakeRequest;
struct HandshakeRequestDefaultTypeInternal;
extern HandshakeRequestDefaultTypeInternal _HandshakeRequest_default_instance_;
class HandshakeResponse;
struct HandshakeResponseDefaultTypeInternal;
extern HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
class PublishRequest;
struct PublishRequestDefaultTypeInternal;
extern PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
class PublishResponse;
struct PublishResponseDefaultTypeInternal;
extern PublishResponseDefaultTypeInternal _PublishResponse_default_instance_;
class ReleaseRequest;
struct ReleaseRequestDefaultTypeInternal;
extern ReleaseRequestDefaultTypeInternal _ReleaseRequest_default_instance_;
class ReleaseResponse;
struct ReleaseResponseDefaultTypeInternal;
extern ReleaseResponseDefaultTypeInternal _ReleaseResponse_default_instance_;
class TerminationNotificationRequest;
struct TerminationNotificationRequestDefaultTypeInternal;
extern TerminationNotificationRequestDefaultTypeInternal _TerminationNotificationRequest_default_instance_;
class TerminationNotificationResponse;
struct TerminationNotificationResponseDefaultTypeInternal;
extern TerminationNotificationResponseDefaultTypeInternal _TerminationNotificationResponse_default_instance_;
class TerminationNotificationResponse_StackTrace;
struct TerminationNotificationResponse_StackTraceDefaultTypeInternal;
extern TerminationNotificationResponse_StackTraceDefaultTypeInternal _TerminationNotificationResponse_StackTrace_default_instance_;
class WrappedAuthenticationRequest;
struct WrappedAuthenticationRequestDefaultTypeInternal;
extern WrappedAuthenticationRequestDefaultTypeInternal _WrappedAuthenticationRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
enum ExportNotification_State : int {
  ExportNotification_State_UNKNOWN = 0,
  ExportNotification_State_PENDING = 1,
  ExportNotification_State_PUBLISHING = 2,
  ExportNotification_State_QUEUED = 3,
  ExportNotification_State_RUNNING = 4,
  ExportNotification_State_EXPORTED = 5,
  ExportNotification_State_RELEASED = 6,
  ExportNotification_State_CANCELLED = 7,
  ExportNotification_State_FAILED = 8,
  ExportNotification_State_DEPENDENCY_FAILED = 9,
  ExportNotification_State_DEPENDENCY_NEVER_FOUND = 10,
  ExportNotification_State_DEPENDENCY_CANCELLED = 11,
  ExportNotification_State_DEPENDENCY_RELEASED = 12,
  ExportNotification_State_ExportNotification_State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExportNotification_State_ExportNotification_State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExportNotification_State_IsValid(int value);
extern const uint32_t ExportNotification_State_internal_data_[];
constexpr ExportNotification_State ExportNotification_State_State_MIN = static_cast<ExportNotification_State>(0);
constexpr ExportNotification_State ExportNotification_State_State_MAX = static_cast<ExportNotification_State>(12);
constexpr int ExportNotification_State_State_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
ExportNotification_State_descriptor();
template <typename T>
const std::string& ExportNotification_State_Name(T value) {
  static_assert(std::is_same<T, ExportNotification_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return ExportNotification_State_Name(static_cast<ExportNotification_State>(value));
}
template <>
inline const std::string& ExportNotification_State_Name(ExportNotification_State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExportNotification_State_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool ExportNotification_State_Parse(absl::string_view name, ExportNotification_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExportNotification_State>(
      ExportNotification_State_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WrappedAuthenticationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest) */ {
 public:
  inline WrappedAuthenticationRequest() : WrappedAuthenticationRequest(nullptr) {}
  ~WrappedAuthenticationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WrappedAuthenticationRequest(::google::protobuf::internal::ConstantInitialized);

  inline WrappedAuthenticationRequest(const WrappedAuthenticationRequest& from)
      : WrappedAuthenticationRequest(nullptr, from) {}
  WrappedAuthenticationRequest(WrappedAuthenticationRequest&& from) noexcept
    : WrappedAuthenticationRequest() {
    *this = ::std::move(from);
  }

  inline WrappedAuthenticationRequest& operator=(const WrappedAuthenticationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedAuthenticationRequest& operator=(WrappedAuthenticationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrappedAuthenticationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrappedAuthenticationRequest* internal_default_instance() {
    return reinterpret_cast<const WrappedAuthenticationRequest*>(
               &_WrappedAuthenticationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrappedAuthenticationRequest& a, WrappedAuthenticationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WrappedAuthenticationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrappedAuthenticationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrappedAuthenticationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WrappedAuthenticationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WrappedAuthenticationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WrappedAuthenticationRequest& from) {
    WrappedAuthenticationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WrappedAuthenticationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest";
  }
  protected:
  explicit WrappedAuthenticationRequest(::google::protobuf::Arena* arena);
  WrappedAuthenticationRequest(::google::protobuf::Arena* arena, const WrappedAuthenticationRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 4,
    kPayloadFieldNumber = 5,
  };
  // string type = 4;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // bytes payload = 5;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class TerminationNotificationResponse_StackTrace final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace) */ {
 public:
  inline TerminationNotificationResponse_StackTrace() : TerminationNotificationResponse_StackTrace(nullptr) {}
  ~TerminationNotificationResponse_StackTrace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TerminationNotificationResponse_StackTrace(::google::protobuf::internal::ConstantInitialized);

  inline TerminationNotificationResponse_StackTrace(const TerminationNotificationResponse_StackTrace& from)
      : TerminationNotificationResponse_StackTrace(nullptr, from) {}
  TerminationNotificationResponse_StackTrace(TerminationNotificationResponse_StackTrace&& from) noexcept
    : TerminationNotificationResponse_StackTrace() {
    *this = ::std::move(from);
  }

  inline TerminationNotificationResponse_StackTrace& operator=(const TerminationNotificationResponse_StackTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminationNotificationResponse_StackTrace& operator=(TerminationNotificationResponse_StackTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminationNotificationResponse_StackTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminationNotificationResponse_StackTrace* internal_default_instance() {
    return reinterpret_cast<const TerminationNotificationResponse_StackTrace*>(
               &_TerminationNotificationResponse_StackTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TerminationNotificationResponse_StackTrace& a, TerminationNotificationResponse_StackTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminationNotificationResponse_StackTrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminationNotificationResponse_StackTrace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminationNotificationResponse_StackTrace* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminationNotificationResponse_StackTrace>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TerminationNotificationResponse_StackTrace& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TerminationNotificationResponse_StackTrace& from) {
    TerminationNotificationResponse_StackTrace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TerminationNotificationResponse_StackTrace* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace";
  }
  protected:
  explicit TerminationNotificationResponse_StackTrace(::google::protobuf::Arena* arena);
  TerminationNotificationResponse_StackTrace(::google::protobuf::Arena* arena, const TerminationNotificationResponse_StackTrace& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 3,
    kTypeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // repeated string elements = 3;
  int elements_size() const;
  private:
  int _internal_elements_size() const;

  public:
  void clear_elements() ;
  const std::string& elements(int index) const;
  std::string* mutable_elements(int index);
  void set_elements(int index, const std::string& value);
  void set_elements(int index, std::string&& value);
  void set_elements(int index, const char* value);
  void set_elements(int index, const char* value, std::size_t size);
  void set_elements(int index, absl::string_view value);
  std::string* add_elements();
  void add_elements(const std::string& value);
  void add_elements(std::string&& value);
  void add_elements(const char* value);
  void add_elements(const char* value, std::size_t size);
  void add_elements(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& elements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_elements();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_elements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_elements();

  public:
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      104, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> elements_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class TerminationNotificationRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TerminationNotificationRequest) */ {
 public:
  inline TerminationNotificationRequest() : TerminationNotificationRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TerminationNotificationRequest(::google::protobuf::internal::ConstantInitialized);

  inline TerminationNotificationRequest(const TerminationNotificationRequest& from)
      : TerminationNotificationRequest(nullptr, from) {}
  TerminationNotificationRequest(TerminationNotificationRequest&& from) noexcept
    : TerminationNotificationRequest() {
    *this = ::std::move(from);
  }

  inline TerminationNotificationRequest& operator=(const TerminationNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminationNotificationRequest& operator=(TerminationNotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminationNotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminationNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const TerminationNotificationRequest*>(
               &_TerminationNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TerminationNotificationRequest& a, TerminationNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminationNotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminationNotificationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminationNotificationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminationNotificationRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TerminationNotificationRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TerminationNotificationRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TerminationNotificationRequest";
  }
  protected:
  explicit TerminationNotificationRequest(::google::protobuf::Arena* arena);
  TerminationNotificationRequest(::google::protobuf::Arena* arena, const TerminationNotificationRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TerminationNotificationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class ReleaseResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ReleaseResponse) */ {
 public:
  inline ReleaseResponse() : ReleaseResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReleaseResponse(::google::protobuf::internal::ConstantInitialized);

  inline ReleaseResponse(const ReleaseResponse& from)
      : ReleaseResponse(nullptr, from) {}
  ReleaseResponse(ReleaseResponse&& from) noexcept
    : ReleaseResponse() {
    *this = ::std::move(from);
  }

  inline ReleaseResponse& operator=(const ReleaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseResponse& operator=(ReleaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseResponse* internal_default_instance() {
    return reinterpret_cast<const ReleaseResponse*>(
               &_ReleaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReleaseResponse& a, ReleaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReleaseResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReleaseResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ReleaseResponse";
  }
  protected:
  explicit ReleaseResponse(::google::protobuf::Arena* arena);
  ReleaseResponse(::google::protobuf::Arena* arena, const ReleaseResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ReleaseResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class PublishResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.PublishResponse) */ {
 public:
  inline PublishResponse() : PublishResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PublishResponse(::google::protobuf::internal::ConstantInitialized);

  inline PublishResponse(const PublishResponse& from)
      : PublishResponse(nullptr, from) {}
  PublishResponse(PublishResponse&& from) noexcept
    : PublishResponse() {
    *this = ::std::move(from);
  }

  inline PublishResponse& operator=(const PublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishResponse& operator=(PublishResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishResponse* internal_default_instance() {
    return reinterpret_cast<const PublishResponse*>(
               &_PublishResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublishResponse& a, PublishResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PublishResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PublishResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.PublishResponse";
  }
  protected:
  explicit PublishResponse(::google::protobuf::Arena* arena);
  PublishResponse(::google::protobuf::Arena* arena, const PublishResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.PublishResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class HandshakeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HandshakeResponse) */ {
 public:
  inline HandshakeResponse() : HandshakeResponse(nullptr) {}
  ~HandshakeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HandshakeResponse(::google::protobuf::internal::ConstantInitialized);

  inline HandshakeResponse(const HandshakeResponse& from)
      : HandshakeResponse(nullptr, from) {}
  HandshakeResponse(HandshakeResponse&& from) noexcept
    : HandshakeResponse() {
    *this = ::std::move(from);
  }

  inline HandshakeResponse& operator=(const HandshakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeResponse& operator=(HandshakeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeResponse*>(
               &_HandshakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HandshakeResponse& a, HandshakeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandshakeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HandshakeResponse& from) {
    HandshakeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HandshakeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HandshakeResponse";
  }
  protected:
  explicit HandshakeResponse(::google::protobuf::Arena* arena);
  HandshakeResponse(::google::protobuf::Arena* arena, const HandshakeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataHeaderFieldNumber = 1,
    kSessionTokenFieldNumber = 2,
    kTokenDeadlineTimeMillisFieldNumber = 3,
    kTokenExpirationDelayMillisFieldNumber = 4,
  };
  // bytes metadata_header = 1 [deprecated = true];
  [[deprecated]]  void clear_metadata_header() ;
  [[deprecated]] const std::string& metadata_header() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_metadata_header(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_metadata_header();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_metadata_header();
  [[deprecated]] void set_allocated_metadata_header(std::string* value);

  private:
  const std::string& _internal_metadata_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_header(
      const std::string& value);
  std::string* _internal_mutable_metadata_header();

  public:
  // bytes session_token = 2 [deprecated = true];
  [[deprecated]]  void clear_session_token() ;
  [[deprecated]] const std::string& session_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_session_token(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_session_token();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_session_token();
  [[deprecated]] void set_allocated_session_token(std::string* value);

  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(
      const std::string& value);
  std::string* _internal_mutable_session_token();

  public:
  // sint64 token_deadline_time_millis = 3 [deprecated = true, jstype = JS_STRING];
  [[deprecated]]  void clear_token_deadline_time_millis() ;
  [[deprecated]] ::int64_t token_deadline_time_millis() const;
  [[deprecated]] void set_token_deadline_time_millis(::int64_t value);

  private:
  ::int64_t _internal_token_deadline_time_millis() const;
  void _internal_set_token_deadline_time_millis(::int64_t value);

  public:
  // sint64 token_expiration_delay_millis = 4 [deprecated = true, jstype = JS_STRING];
  [[deprecated]]  void clear_token_expiration_delay_millis() ;
  [[deprecated]] ::int64_t token_expiration_delay_millis() const;
  [[deprecated]] void set_token_expiration_delay_millis(::int64_t value);

  private:
  ::int64_t _internal_token_expiration_delay_millis() const;
  void _internal_set_token_expiration_delay_millis(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HandshakeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr metadata_header_;
    ::google::protobuf::internal::ArenaStringPtr session_token_;
    ::int64_t token_deadline_time_millis_;
    ::int64_t token_expiration_delay_millis_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class HandshakeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HandshakeRequest) */ {
 public:
  inline HandshakeRequest() : HandshakeRequest(nullptr) {}
  ~HandshakeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HandshakeRequest(::google::protobuf::internal::ConstantInitialized);

  inline HandshakeRequest(const HandshakeRequest& from)
      : HandshakeRequest(nullptr, from) {}
  HandshakeRequest(HandshakeRequest&& from) noexcept
    : HandshakeRequest() {
    *this = ::std::move(from);
  }

  inline HandshakeRequest& operator=(const HandshakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeRequest& operator=(HandshakeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandshakeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeRequest* internal_default_instance() {
    return reinterpret_cast<const HandshakeRequest*>(
               &_HandshakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandshakeRequest& a, HandshakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandshakeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandshakeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandshakeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HandshakeRequest& from) {
    HandshakeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HandshakeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HandshakeRequest";
  }
  protected:
  explicit HandshakeRequest(::google::protobuf::Arena* arena);
  HandshakeRequest(::google::protobuf::Arena* arena, const HandshakeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kAuthProtocolFieldNumber = 1,
  };
  // bytes payload = 2 [deprecated = true];
  [[deprecated]]  void clear_payload() ;
  [[deprecated]] const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_payload(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_payload();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_payload();
  [[deprecated]] void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // sint32 auth_protocol = 1 [deprecated = true];
  [[deprecated]]  void clear_auth_protocol() ;
  [[deprecated]] ::int32_t auth_protocol() const;
  [[deprecated]] void set_auth_protocol(::int32_t value);

  private:
  ::int32_t _internal_auth_protocol() const;
  void _internal_set_auth_protocol(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HandshakeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::int32_t auth_protocol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class ExportResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportResponse) */ {
 public:
  inline ExportResponse() : ExportResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExportResponse(::google::protobuf::internal::ConstantInitialized);

  inline ExportResponse(const ExportResponse& from)
      : ExportResponse(nullptr, from) {}
  ExportResponse(ExportResponse&& from) noexcept
    : ExportResponse() {
    *this = ::std::move(from);
  }

  inline ExportResponse& operator=(const ExportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportResponse& operator=(ExportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportResponse*>(
               &_ExportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExportResponse& a, ExportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExportResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExportResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportResponse";
  }
  protected:
  explicit ExportResponse(::google::protobuf::Arena* arena);
  ExportResponse(::google::protobuf::Arena* arena, const ExportResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class ExportNotificationRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportNotificationRequest) */ {
 public:
  inline ExportNotificationRequest() : ExportNotificationRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExportNotificationRequest(::google::protobuf::internal::ConstantInitialized);

  inline ExportNotificationRequest(const ExportNotificationRequest& from)
      : ExportNotificationRequest(nullptr, from) {}
  ExportNotificationRequest(ExportNotificationRequest&& from) noexcept
    : ExportNotificationRequest() {
    *this = ::std::move(from);
  }

  inline ExportNotificationRequest& operator=(const ExportNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportNotificationRequest& operator=(ExportNotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportNotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const ExportNotificationRequest*>(
               &_ExportNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ExportNotificationRequest& a, ExportNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportNotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportNotificationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportNotificationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportNotificationRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExportNotificationRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExportNotificationRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportNotificationRequest";
  }
  protected:
  explicit ExportNotificationRequest(::google::protobuf::Arena* arena);
  ExportNotificationRequest(::google::protobuf::Arena* arena, const ExportNotificationRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportNotificationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class CloseSessionResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.CloseSessionResponse) */ {
 public:
  inline CloseSessionResponse() : CloseSessionResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CloseSessionResponse(::google::protobuf::internal::ConstantInitialized);

  inline CloseSessionResponse(const CloseSessionResponse& from)
      : CloseSessionResponse(nullptr, from) {}
  CloseSessionResponse(CloseSessionResponse&& from) noexcept
    : CloseSessionResponse() {
    *this = ::std::move(from);
  }

  inline CloseSessionResponse& operator=(const CloseSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSessionResponse& operator=(CloseSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSessionResponse* internal_default_instance() {
    return reinterpret_cast<const CloseSessionResponse*>(
               &_CloseSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseSessionResponse& a, CloseSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSessionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseSessionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseSessionResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseSessionResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseSessionResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.CloseSessionResponse";
  }
  protected:
  explicit CloseSessionResponse(::google::protobuf::Arena* arena);
  CloseSessionResponse(::google::protobuf::Arena* arena, const CloseSessionResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.CloseSessionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class TerminationNotificationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse) */ {
 public:
  inline TerminationNotificationResponse() : TerminationNotificationResponse(nullptr) {}
  ~TerminationNotificationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TerminationNotificationResponse(::google::protobuf::internal::ConstantInitialized);

  inline TerminationNotificationResponse(const TerminationNotificationResponse& from)
      : TerminationNotificationResponse(nullptr, from) {}
  TerminationNotificationResponse(TerminationNotificationResponse&& from) noexcept
    : TerminationNotificationResponse() {
    *this = ::std::move(from);
  }

  inline TerminationNotificationResponse& operator=(const TerminationNotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminationNotificationResponse& operator=(TerminationNotificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminationNotificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminationNotificationResponse* internal_default_instance() {
    return reinterpret_cast<const TerminationNotificationResponse*>(
               &_TerminationNotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TerminationNotificationResponse& a, TerminationNotificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminationNotificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminationNotificationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminationNotificationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminationNotificationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TerminationNotificationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TerminationNotificationResponse& from) {
    TerminationNotificationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TerminationNotificationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TerminationNotificationResponse";
  }
  protected:
  explicit TerminationNotificationResponse(::google::protobuf::Arena* arena);
  TerminationNotificationResponse(::google::protobuf::Arena* arena, const TerminationNotificationResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StackTrace = TerminationNotificationResponse_StackTrace;

  // accessors -------------------------------------------------------

  enum : int {
    kStackTracesFieldNumber = 4,
    kReasonFieldNumber = 2,
    kAbnormalTerminationFieldNumber = 1,
    kIsFromUncaughtExceptionFieldNumber = 3,
  };
  // repeated .io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace stack_traces = 4;
  int stack_traces_size() const;
  private:
  int _internal_stack_traces_size() const;

  public:
  void clear_stack_traces() ;
  ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* mutable_stack_traces(int index);
  ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace >*
      mutable_stack_traces();
  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace>& _internal_stack_traces() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace>* _internal_mutable_stack_traces();
  public:
  const ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace& stack_traces(int index) const;
  ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* add_stack_traces();
  const ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace >&
      stack_traces() const;
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // bool abnormal_termination = 1;
  void clear_abnormal_termination() ;
  bool abnormal_termination() const;
  void set_abnormal_termination(bool value);

  private:
  bool _internal_abnormal_termination() const;
  void _internal_set_abnormal_termination(bool value);

  public:
  // bool is_from_uncaught_exception = 3;
  void clear_is_from_uncaught_exception() ;
  bool is_from_uncaught_exception() const;
  void set_is_from_uncaught_exception(bool value);

  private:
  bool _internal_is_from_uncaught_exception() const;
  void _internal_set_is_from_uncaught_exception(bool value);

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      80, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace > stack_traces_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool abnormal_termination_;
    bool is_from_uncaught_exception_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class ReleaseRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ReleaseRequest) */ {
 public:
  inline ReleaseRequest() : ReleaseRequest(nullptr) {}
  ~ReleaseRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReleaseRequest(::google::protobuf::internal::ConstantInitialized);

  inline ReleaseRequest(const ReleaseRequest& from)
      : ReleaseRequest(nullptr, from) {}
  ReleaseRequest(ReleaseRequest&& from) noexcept
    : ReleaseRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseRequest& operator=(const ReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseRequest& operator=(ReleaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseRequest*>(
               &_ReleaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReleaseRequest& a, ReleaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReleaseRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReleaseRequest& from) {
    ReleaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReleaseRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ReleaseRequest";
  }
  protected:
  explicit ReleaseRequest(::google::protobuf::Arena* arena);
  ReleaseRequest(::google::protobuf::Arena* arena, const ReleaseRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket id = 1;
  bool has_id() const;
  void clear_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_id();
  void set_allocated_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ReleaseRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::io::deephaven::proto::backplane::grpc::Ticket* id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class PublishRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.PublishRequest) */ {
 public:
  inline PublishRequest() : PublishRequest(nullptr) {}
  ~PublishRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PublishRequest(::google::protobuf::internal::ConstantInitialized);

  inline PublishRequest(const PublishRequest& from)
      : PublishRequest(nullptr, from) {}
  PublishRequest(PublishRequest&& from) noexcept
    : PublishRequest() {
    *this = ::std::move(from);
  }

  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRequest& operator=(PublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRequest*>(
               &_PublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PublishRequest& a, PublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PublishRequest& from) {
    PublishRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PublishRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.PublishRequest";
  }
  protected:
  explicit PublishRequest(::google::protobuf::Arena* arena);
  PublishRequest(::google::protobuf::Arena* arena, const PublishRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kResultIdFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
  bool has_source_id() const;
  void clear_source_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& source_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_source_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_source_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_source_id();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  bool has_result_id() const;
  void clear_result_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_id();
  void set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.PublishRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::io::deephaven::proto::backplane::grpc::Ticket* source_id_;
    ::io::deephaven::proto::backplane::grpc::Ticket* result_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class ExportRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportRequest) */ {
 public:
  inline ExportRequest() : ExportRequest(nullptr) {}
  ~ExportRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExportRequest(::google::protobuf::internal::ConstantInitialized);

  inline ExportRequest(const ExportRequest& from)
      : ExportRequest(nullptr, from) {}
  ExportRequest(ExportRequest&& from) noexcept
    : ExportRequest() {
    *this = ::std::move(from);
  }

  inline ExportRequest& operator=(const ExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportRequest& operator=(ExportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportRequest*>(
               &_ExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExportRequest& a, ExportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExportRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExportRequest& from) {
    ExportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExportRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportRequest";
  }
  protected:
  explicit ExportRequest(::google::protobuf::Arena* arena);
  ExportRequest(::google::protobuf::Arena* arena, const ExportRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kResultIdFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
  bool has_source_id() const;
  void clear_source_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& source_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_source_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_source_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_source_id();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  bool has_result_id() const;
  void clear_result_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_id();
  void set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::io::deephaven::proto::backplane::grpc::Ticket* source_id_;
    ::io::deephaven::proto::backplane::grpc::Ticket* result_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};// -------------------------------------------------------------------

class ExportNotification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ExportNotification) */ {
 public:
  inline ExportNotification() : ExportNotification(nullptr) {}
  ~ExportNotification() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExportNotification(::google::protobuf::internal::ConstantInitialized);

  inline ExportNotification(const ExportNotification& from)
      : ExportNotification(nullptr, from) {}
  ExportNotification(ExportNotification&& from) noexcept
    : ExportNotification() {
    *this = ::std::move(from);
  }

  inline ExportNotification& operator=(const ExportNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportNotification& operator=(ExportNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportNotification* internal_default_instance() {
    return reinterpret_cast<const ExportNotification*>(
               &_ExportNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExportNotification& a, ExportNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportNotification* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExportNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExportNotification& from) {
    ExportNotification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExportNotification* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ExportNotification";
  }
  protected:
  explicit ExportNotification(::google::protobuf::Arena* arena);
  ExportNotification(::google::protobuf::Arena* arena, const ExportNotification& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using State = ExportNotification_State;
  static constexpr State UNKNOWN = ExportNotification_State_UNKNOWN;
  static constexpr State PENDING = ExportNotification_State_PENDING;
  static constexpr State PUBLISHING = ExportNotification_State_PUBLISHING;
  static constexpr State QUEUED = ExportNotification_State_QUEUED;
  static constexpr State RUNNING = ExportNotification_State_RUNNING;
  static constexpr State EXPORTED = ExportNotification_State_EXPORTED;
  static constexpr State RELEASED = ExportNotification_State_RELEASED;
  static constexpr State CANCELLED = ExportNotification_State_CANCELLED;
  static constexpr State FAILED = ExportNotification_State_FAILED;
  static constexpr State DEPENDENCY_FAILED = ExportNotification_State_DEPENDENCY_FAILED;
  static constexpr State DEPENDENCY_NEVER_FOUND = ExportNotification_State_DEPENDENCY_NEVER_FOUND;
  static constexpr State DEPENDENCY_CANCELLED = ExportNotification_State_DEPENDENCY_CANCELLED;
  static constexpr State DEPENDENCY_RELEASED = ExportNotification_State_DEPENDENCY_RELEASED;
  static inline bool State_IsValid(int value) {
    return ExportNotification_State_IsValid(value);
  }
  static constexpr State State_MIN = ExportNotification_State_State_MIN;
  static constexpr State State_MAX = ExportNotification_State_State_MAX;
  static constexpr int State_ARRAYSIZE = ExportNotification_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* State_descriptor() {
    return ExportNotification_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return ExportNotification_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return ExportNotification_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 3,
    kDependentHandleFieldNumber = 4,
    kTicketFieldNumber = 1,
    kExportStateFieldNumber = 2,
  };
  // string context = 3;
  void clear_context() ;
  const std::string& context() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* value);

  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(
      const std::string& value);
  std::string* _internal_mutable_context();

  public:
  // string dependent_handle = 4;
  void clear_dependent_handle() ;
  const std::string& dependent_handle() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dependent_handle(Arg_&& arg, Args_... args);
  std::string* mutable_dependent_handle();
  PROTOBUF_NODISCARD std::string* release_dependent_handle();
  void set_allocated_dependent_handle(std::string* value);

  private:
  const std::string& _internal_dependent_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dependent_handle(
      const std::string& value);
  std::string* _internal_mutable_dependent_handle();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
  bool has_ticket() const;
  void clear_ticket() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& ticket() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_ticket();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_ticket();
  void set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_ticket();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_ticket() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_ticket();

  public:
  // .io.deephaven.proto.backplane.grpc.ExportNotification.State export_state = 2;
  void clear_export_state() ;
  ::io::deephaven::proto::backplane::grpc::ExportNotification_State export_state() const;
  void set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value);

  private:
  ::io::deephaven::proto::backplane::grpc::ExportNotification_State _internal_export_state() const;
  void _internal_set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value);

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ExportNotification)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr dependent_handle_;
    ::io::deephaven::proto::backplane::grpc::Ticket* ticket_;
    int export_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fsession_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WrappedAuthenticationRequest

// string type = 4;
inline void WrappedAuthenticationRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& WrappedAuthenticationRequest::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrappedAuthenticationRequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.type)
}
inline std::string* WrappedAuthenticationRequest::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.type)
  return _s;
}
inline const std::string& WrappedAuthenticationRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void WrappedAuthenticationRequest::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* WrappedAuthenticationRequest::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* WrappedAuthenticationRequest::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.type)
  return _impl_.type_.Release();
}
inline void WrappedAuthenticationRequest::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.type)
}

// bytes payload = 5;
inline void WrappedAuthenticationRequest::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& WrappedAuthenticationRequest::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WrappedAuthenticationRequest::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.payload)
}
inline std::string* WrappedAuthenticationRequest::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.payload)
  return _s;
}
inline const std::string& WrappedAuthenticationRequest::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void WrappedAuthenticationRequest::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* WrappedAuthenticationRequest::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* WrappedAuthenticationRequest::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.payload)
  return _impl_.payload_.Release();
}
inline void WrappedAuthenticationRequest::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.WrappedAuthenticationRequest.payload)
}

// -------------------------------------------------------------------

// HandshakeRequest

// sint32 auth_protocol = 1 [deprecated = true];
inline void HandshakeRequest::clear_auth_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.auth_protocol_ = 0;
}
inline ::int32_t HandshakeRequest::auth_protocol() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeRequest.auth_protocol)
  return _internal_auth_protocol();
}
inline void HandshakeRequest::set_auth_protocol(::int32_t value) {
  _internal_set_auth_protocol(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeRequest.auth_protocol)
}
inline ::int32_t HandshakeRequest::_internal_auth_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.auth_protocol_;
}
inline void HandshakeRequest::_internal_set_auth_protocol(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.auth_protocol_ = value;
}

// bytes payload = 2 [deprecated = true];
inline void HandshakeRequest::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& HandshakeRequest::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeRequest::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
}
inline std::string* HandshakeRequest::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
  return _s;
}
inline const std::string& HandshakeRequest::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void HandshakeRequest::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* HandshakeRequest::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* HandshakeRequest::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
  return _impl_.payload_.Release();
}
inline void HandshakeRequest::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HandshakeRequest.payload)
}

// -------------------------------------------------------------------

// HandshakeResponse

// bytes metadata_header = 1 [deprecated = true];
inline void HandshakeResponse::clear_metadata_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_header_.ClearToEmpty();
}
inline const std::string& HandshakeResponse::metadata_header() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
  return _internal_metadata_header();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeResponse::set_metadata_header(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_header_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
}
inline std::string* HandshakeResponse::mutable_metadata_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata_header();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
  return _s;
}
inline const std::string& HandshakeResponse::_internal_metadata_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_header_.Get();
}
inline void HandshakeResponse::_internal_set_metadata_header(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_header_.Set(value, GetArena());
}
inline std::string* HandshakeResponse::_internal_mutable_metadata_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.metadata_header_.Mutable( GetArena());
}
inline std::string* HandshakeResponse::release_metadata_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
  return _impl_.metadata_header_.Release();
}
inline void HandshakeResponse::set_allocated_metadata_header(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_header_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_header_.IsDefault()) {
          _impl_.metadata_header_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HandshakeResponse.metadata_header)
}

// bytes session_token = 2 [deprecated = true];
inline void HandshakeResponse::clear_session_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_token_.ClearToEmpty();
}
inline const std::string& HandshakeResponse::session_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
  return _internal_session_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandshakeResponse::set_session_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_token_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
}
inline std::string* HandshakeResponse::mutable_session_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
  return _s;
}
inline const std::string& HandshakeResponse::_internal_session_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_token_.Get();
}
inline void HandshakeResponse::_internal_set_session_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_token_.Set(value, GetArena());
}
inline std::string* HandshakeResponse::_internal_mutable_session_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_token_.Mutable( GetArena());
}
inline std::string* HandshakeResponse::release_session_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
  return _impl_.session_token_.Release();
}
inline void HandshakeResponse::set_allocated_session_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_token_.IsDefault()) {
          _impl_.session_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HandshakeResponse.session_token)
}

// sint64 token_deadline_time_millis = 3 [deprecated = true, jstype = JS_STRING];
inline void HandshakeResponse::clear_token_deadline_time_millis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_deadline_time_millis_ = ::int64_t{0};
}
inline ::int64_t HandshakeResponse::token_deadline_time_millis() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_deadline_time_millis)
  return _internal_token_deadline_time_millis();
}
inline void HandshakeResponse::set_token_deadline_time_millis(::int64_t value) {
  _internal_set_token_deadline_time_millis(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_deadline_time_millis)
}
inline ::int64_t HandshakeResponse::_internal_token_deadline_time_millis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_deadline_time_millis_;
}
inline void HandshakeResponse::_internal_set_token_deadline_time_millis(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_deadline_time_millis_ = value;
}

// sint64 token_expiration_delay_millis = 4 [deprecated = true, jstype = JS_STRING];
inline void HandshakeResponse::clear_token_expiration_delay_millis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_expiration_delay_millis_ = ::int64_t{0};
}
inline ::int64_t HandshakeResponse::token_expiration_delay_millis() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_expiration_delay_millis)
  return _internal_token_expiration_delay_millis();
}
inline void HandshakeResponse::set_token_expiration_delay_millis(::int64_t value) {
  _internal_set_token_expiration_delay_millis(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HandshakeResponse.token_expiration_delay_millis)
}
inline ::int64_t HandshakeResponse::_internal_token_expiration_delay_millis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_expiration_delay_millis_;
}
inline void HandshakeResponse::_internal_set_token_expiration_delay_millis(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_expiration_delay_millis_ = value;
}

// -------------------------------------------------------------------

// CloseSessionResponse

// -------------------------------------------------------------------

// ReleaseRequest

// .io.deephaven.proto.backplane.grpc.Ticket id = 1;
inline bool ReleaseRequest::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ReleaseRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ReleaseRequest::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
  return _internal_id();
}
inline void ReleaseRequest::unsafe_arena_set_allocated_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::unsafe_arena_release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ReleaseRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
  return _msg;
}
inline void ReleaseRequest::set_allocated_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ReleaseRequest.id)
}

// -------------------------------------------------------------------

// ReleaseResponse

// -------------------------------------------------------------------

// ExportRequest

// .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
inline bool ExportRequest::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::_internal_source_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::source_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
  return _internal_source_id();
}
inline void ExportRequest::unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }
  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::unsafe_arena_release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::_internal_mutable_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::mutable_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
  return _msg;
}
inline void ExportRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.source_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
inline bool ExportRequest::has_result_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::_internal_result_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportRequest::result_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
  return _internal_result_id();
}
inline void ExportRequest::unsafe_arena_set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_id_);
  }
  _impl_.result_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::release_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.result_id_;
  _impl_.result_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::unsafe_arena_release_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.result_id_;
  _impl_.result_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::_internal_mutable_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.result_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.result_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportRequest::mutable_result_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
  return _msg;
}
inline void ExportRequest::set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.result_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportRequest.result_id)
}

// -------------------------------------------------------------------

// ExportResponse

// -------------------------------------------------------------------

// PublishRequest

// .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
inline bool PublishRequest::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PublishRequest::_internal_source_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PublishRequest::source_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PublishRequest.source_id)
  return _internal_source_id();
}
inline void PublishRequest::unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }
  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.PublishRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::unsafe_arena_release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.PublishRequest.source_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::_internal_mutable_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::mutable_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PublishRequest.source_id)
  return _msg;
}
inline void PublishRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.PublishRequest.source_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
inline bool PublishRequest::has_result_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PublishRequest::_internal_result_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.result_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& PublishRequest::result_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.PublishRequest.result_id)
  return _internal_result_id();
}
inline void PublishRequest::unsafe_arena_set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_id_);
  }
  _impl_.result_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.PublishRequest.result_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::release_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.result_id_;
  _impl_.result_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::unsafe_arena_release_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.PublishRequest.result_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.result_id_;
  _impl_.result_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::_internal_mutable_result_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.result_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.result_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.result_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* PublishRequest::mutable_result_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.PublishRequest.result_id)
  return _msg;
}
inline void PublishRequest::set_allocated_result_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.result_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.PublishRequest.result_id)
}

// -------------------------------------------------------------------

// PublishResponse

// -------------------------------------------------------------------

// ExportNotificationRequest

// -------------------------------------------------------------------

// ExportNotification

// .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
inline bool ExportNotification::has_ticket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ticket_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportNotification::_internal_ticket() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& ExportNotification::ticket() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
  return _internal_ticket();
}
inline void ExportNotification::unsafe_arena_set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ticket_);
  }
  _impl_.ticket_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::release_ticket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.ticket_;
  _impl_.ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::unsafe_arena_release_ticket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.ticket_;
  _impl_.ticket_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::_internal_mutable_ticket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.ticket_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.ticket_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* ExportNotification::mutable_ticket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
  return _msg;
}
inline void ExportNotification::set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ticket_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ticket_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.ticket)
}

// .io.deephaven.proto.backplane.grpc.ExportNotification.State export_state = 2;
inline void ExportNotification::clear_export_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.export_state_ = 0;
}
inline ::io::deephaven::proto::backplane::grpc::ExportNotification_State ExportNotification::export_state() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.export_state)
  return _internal_export_state();
}
inline void ExportNotification::set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value) {
  _internal_set_export_state(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportNotification.export_state)
}
inline ::io::deephaven::proto::backplane::grpc::ExportNotification_State ExportNotification::_internal_export_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::io::deephaven::proto::backplane::grpc::ExportNotification_State>(_impl_.export_state_);
}
inline void ExportNotification::_internal_set_export_state(::io::deephaven::proto::backplane::grpc::ExportNotification_State value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.export_state_ = value;
}

// string context = 3;
inline void ExportNotification::clear_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.context_.ClearToEmpty();
}
inline const std::string& ExportNotification::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExportNotification::set_context(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportNotification.context)
}
inline std::string* ExportNotification::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportNotification.context)
  return _s;
}
inline const std::string& ExportNotification::_internal_context() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.context_.Get();
}
inline void ExportNotification::_internal_set_context(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.context_.Set(value, GetArena());
}
inline std::string* ExportNotification::_internal_mutable_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.context_.Mutable( GetArena());
}
inline std::string* ExportNotification::release_context() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportNotification.context)
  return _impl_.context_.Release();
}
inline void ExportNotification::set_allocated_context(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.context_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.context_.IsDefault()) {
          _impl_.context_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.context)
}

// string dependent_handle = 4;
inline void ExportNotification::clear_dependent_handle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dependent_handle_.ClearToEmpty();
}
inline const std::string& ExportNotification::dependent_handle() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
  return _internal_dependent_handle();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExportNotification::set_dependent_handle(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dependent_handle_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
}
inline std::string* ExportNotification::mutable_dependent_handle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dependent_handle();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
  return _s;
}
inline const std::string& ExportNotification::_internal_dependent_handle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dependent_handle_.Get();
}
inline void ExportNotification::_internal_set_dependent_handle(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dependent_handle_.Set(value, GetArena());
}
inline std::string* ExportNotification::_internal_mutable_dependent_handle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dependent_handle_.Mutable( GetArena());
}
inline std::string* ExportNotification::release_dependent_handle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
  return _impl_.dependent_handle_.Release();
}
inline void ExportNotification::set_allocated_dependent_handle(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dependent_handle_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dependent_handle_.IsDefault()) {
          _impl_.dependent_handle_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ExportNotification.dependent_handle)
}

// -------------------------------------------------------------------

// TerminationNotificationRequest

// -------------------------------------------------------------------

// TerminationNotificationResponse_StackTrace

// string type = 1;
inline void TerminationNotificationResponse_StackTrace::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& TerminationNotificationResponse_StackTrace::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TerminationNotificationResponse_StackTrace::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
}
inline std::string* TerminationNotificationResponse_StackTrace::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
  return _s;
}
inline const std::string& TerminationNotificationResponse_StackTrace::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void TerminationNotificationResponse_StackTrace::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* TerminationNotificationResponse_StackTrace::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* TerminationNotificationResponse_StackTrace::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
  return _impl_.type_.Release();
}
inline void TerminationNotificationResponse_StackTrace::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.type)
}

// string message = 2;
inline void TerminationNotificationResponse_StackTrace::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& TerminationNotificationResponse_StackTrace::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TerminationNotificationResponse_StackTrace::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
}
inline std::string* TerminationNotificationResponse_StackTrace::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
  return _s;
}
inline const std::string& TerminationNotificationResponse_StackTrace::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void TerminationNotificationResponse_StackTrace::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* TerminationNotificationResponse_StackTrace::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* TerminationNotificationResponse_StackTrace::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
  return _impl_.message_.Release();
}
inline void TerminationNotificationResponse_StackTrace::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.message)
}

// repeated string elements = 3;
inline int TerminationNotificationResponse_StackTrace::_internal_elements_size() const {
  return _internal_elements().size();
}
inline int TerminationNotificationResponse_StackTrace::elements_size() const {
  return _internal_elements_size();
}
inline void TerminationNotificationResponse_StackTrace::clear_elements() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.elements_.Clear();
}
inline std::string* TerminationNotificationResponse_StackTrace::add_elements()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_elements()->Add();
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return _s;
}
inline const std::string& TerminationNotificationResponse_StackTrace::elements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return _internal_elements().Get(index);
}
inline std::string* TerminationNotificationResponse_StackTrace::mutable_elements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return _internal_mutable_elements()->Mutable(index);
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, const std::string& value) {
  _internal_mutable_elements()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, std::string&& value) {
  _internal_mutable_elements()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_elements()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_elements()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::set_elements(int index, absl::string_view value) {
  _internal_mutable_elements()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_elements()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_elements()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_elements()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_elements()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline void TerminationNotificationResponse_StackTrace::add_elements(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_elements()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TerminationNotificationResponse_StackTrace::elements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  return _internal_elements();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TerminationNotificationResponse_StackTrace::mutable_elements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace.elements)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_elements();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TerminationNotificationResponse_StackTrace::_internal_elements() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.elements_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TerminationNotificationResponse_StackTrace::_internal_mutable_elements() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.elements_;
}

// -------------------------------------------------------------------

// TerminationNotificationResponse

// bool abnormal_termination = 1;
inline void TerminationNotificationResponse::clear_abnormal_termination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.abnormal_termination_ = false;
}
inline bool TerminationNotificationResponse::abnormal_termination() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.abnormal_termination)
  return _internal_abnormal_termination();
}
inline void TerminationNotificationResponse::set_abnormal_termination(bool value) {
  _internal_set_abnormal_termination(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.abnormal_termination)
}
inline bool TerminationNotificationResponse::_internal_abnormal_termination() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.abnormal_termination_;
}
inline void TerminationNotificationResponse::_internal_set_abnormal_termination(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.abnormal_termination_ = value;
}

// string reason = 2;
inline void TerminationNotificationResponse::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& TerminationNotificationResponse::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TerminationNotificationResponse::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
}
inline std::string* TerminationNotificationResponse::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
  return _s;
}
inline const std::string& TerminationNotificationResponse::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void TerminationNotificationResponse::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* TerminationNotificationResponse::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* TerminationNotificationResponse::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
  return _impl_.reason_.Release();
}
inline void TerminationNotificationResponse::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.reason)
}

// bool is_from_uncaught_exception = 3;
inline void TerminationNotificationResponse::clear_is_from_uncaught_exception() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_from_uncaught_exception_ = false;
}
inline bool TerminationNotificationResponse::is_from_uncaught_exception() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.is_from_uncaught_exception)
  return _internal_is_from_uncaught_exception();
}
inline void TerminationNotificationResponse::set_is_from_uncaught_exception(bool value) {
  _internal_set_is_from_uncaught_exception(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.is_from_uncaught_exception)
}
inline bool TerminationNotificationResponse::_internal_is_from_uncaught_exception() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_from_uncaught_exception_;
}
inline void TerminationNotificationResponse::_internal_set_is_from_uncaught_exception(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_from_uncaught_exception_ = value;
}

// repeated .io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace stack_traces = 4;
inline int TerminationNotificationResponse::_internal_stack_traces_size() const {
  return _internal_stack_traces().size();
}
inline int TerminationNotificationResponse::stack_traces_size() const {
  return _internal_stack_traces_size();
}
inline void TerminationNotificationResponse::clear_stack_traces() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stack_traces_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* TerminationNotificationResponse::mutable_stack_traces(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return _internal_mutable_stack_traces()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace>* TerminationNotificationResponse::mutable_stack_traces()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stack_traces();
}
inline const ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace& TerminationNotificationResponse::stack_traces(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return _internal_stack_traces().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* TerminationNotificationResponse::add_stack_traces() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace* _add = _internal_mutable_stack_traces()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace>& TerminationNotificationResponse::stack_traces() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.stack_traces)
  return _internal_stack_traces();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace>&
TerminationNotificationResponse::_internal_stack_traces() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stack_traces_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TerminationNotificationResponse_StackTrace>*
TerminationNotificationResponse::_internal_mutable_stack_traces() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stack_traces_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::io::deephaven::proto::backplane::grpc::ExportNotification_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::io::deephaven::proto::backplane::grpc::ExportNotification_State>() {
  return ::io::deephaven::proto::backplane::grpc::ExportNotification_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fsession_2eproto_2epb_2eh
