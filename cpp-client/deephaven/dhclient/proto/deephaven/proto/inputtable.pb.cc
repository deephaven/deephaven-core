// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: deephaven/proto/inputtable.proto
// Protobuf C++ Version: 5.28.1

#include "deephaven/proto/inputtable.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
              template <typename>
PROTOBUF_CONSTEXPR DeleteTableResponse::DeleteTableResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DeleteTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTableResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTableResponseDefaultTypeInternal() {}
  union {
    DeleteTableResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTableResponseDefaultTypeInternal _DeleteTableResponse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AddTableResponse::AddTableResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AddTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTableResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTableResponseDefaultTypeInternal() {}
  union {
    AddTableResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTableResponseDefaultTypeInternal _AddTableResponse_default_instance_;

inline constexpr DeleteTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        input_table_{nullptr},
        table_to_remove_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DeleteTableRequest::DeleteTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeleteTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTableRequestDefaultTypeInternal() {}
  union {
    DeleteTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTableRequestDefaultTypeInternal _DeleteTableRequest_default_instance_;

inline constexpr AddTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        input_table_{nullptr},
        table_to_add_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AddTableRequest::AddTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTableRequestDefaultTypeInternal() {}
  union {
    AddTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTableRequestDefaultTypeInternal _AddTableRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_deephaven_2fproto_2finputtable_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_deephaven_2fproto_2finputtable_2eproto = nullptr;
const ::uint32_t
    TableStruct_deephaven_2fproto_2finputtable_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AddTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AddTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AddTableRequest, _impl_.input_table_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AddTableRequest, _impl_.table_to_add_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AddTableResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DeleteTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DeleteTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DeleteTableRequest, _impl_.input_table_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DeleteTableRequest, _impl_.table_to_remove_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DeleteTableResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::io::deephaven::proto::backplane::grpc::AddTableRequest)},
        {12, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AddTableResponse)},
        {20, 30, -1, sizeof(::io::deephaven::proto::backplane::grpc::DeleteTableRequest)},
        {32, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::DeleteTableResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::io::deephaven::proto::backplane::grpc::_AddTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AddTableResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_DeleteTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_DeleteTableResponse_default_instance_._instance,
};
const char descriptor_table_protodef_deephaven_2fproto_2finputtable_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n deephaven/proto/inputtable.proto\022!io.d"
    "eephaven.proto.backplane.grpc\032\034deephaven"
    "/proto/ticket.proto\"\222\001\n\017AddTableRequest\022"
    ">\n\013input_table\030\001 \001(\0132).io.deephaven.prot"
    "o.backplane.grpc.Ticket\022\?\n\014table_to_add\030"
    "\002 \001(\0132).io.deephaven.proto.backplane.grp"
    "c.Ticket\"\022\n\020AddTableResponse\"\230\001\n\022DeleteT"
    "ableRequest\022>\n\013input_table\030\001 \001(\0132).io.de"
    "ephaven.proto.backplane.grpc.Ticket\022B\n\017t"
    "able_to_remove\030\002 \001(\0132).io.deephaven.prot"
    "o.backplane.grpc.Ticket\"\025\n\023DeleteTableRe"
    "sponse2\246\002\n\021InputTableService\022\201\001\n\024AddTabl"
    "eToInputTable\0222.io.deephaven.proto.backp"
    "lane.grpc.AddTableRequest\0323.io.deephaven"
    ".proto.backplane.grpc.AddTableResponse\"\000"
    "\022\214\001\n\031DeleteTableFromInputTable\0225.io.deep"
    "haven.proto.backplane.grpc.DeleteTableRe"
    "quest\0326.io.deephaven.proto.backplane.grp"
    "c.DeleteTableResponse\"\000BFH\001P\001Z@github.co"
    "m/deephaven/deephaven-core/go/internal/p"
    "roto/inputtableb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2finputtable_2eproto_deps[1] =
    {
        &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::absl::once_flag descriptor_table_deephaven_2fproto_2finputtable_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2finputtable_2eproto = {
    false,
    false,
    823,
    descriptor_table_protodef_deephaven_2fproto_2finputtable_2eproto,
    "deephaven/proto/inputtable.proto",
    &descriptor_table_deephaven_2fproto_2finputtable_2eproto_once,
    descriptor_table_deephaven_2fproto_2finputtable_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_deephaven_2fproto_2finputtable_2eproto::offsets,
    file_level_enum_descriptors_deephaven_2fproto_2finputtable_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2finputtable_2eproto,
};
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
// ===================================================================

class AddTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_._has_bits_);
};

void AddTableRequest::clear_input_table() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_table_ != nullptr) _impl_.input_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AddTableRequest::clear_table_to_add() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.table_to_add_ != nullptr) _impl_.table_to_add_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AddTableRequest::AddTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AddTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE AddTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AddTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AddTableRequest::AddTableRequest(
    ::google::protobuf::Arena* arena,
    const AddTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.input_table_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.input_table_)
                        : nullptr;
  _impl_.table_to_add_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.table_to_add_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AddTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE AddTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AddTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, input_table_),
           0,
           offsetof(Impl_, table_to_add_) -
               offsetof(Impl_, input_table_) +
               sizeof(Impl_::table_to_add_));
}
AddTableRequest::~AddTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AddTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.input_table_;
  delete _impl_.table_to_add_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AddTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AddTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<AddTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<AddTableRequest>(), &AddTableRequest::ByteSizeLong,
                &AddTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_._cached_size_),
            false,
        },
        &AddTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2finputtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> AddTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AddTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket table_to_add = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_.table_to_add_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_.input_table_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
    {PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_.input_table_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket table_to_add = 2;
    {PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_.table_to_add_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AddTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AddTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.input_table_ != nullptr);
      _impl_.input_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.table_to_add_ != nullptr);
      _impl_.table_to_add_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddTableRequest& this_ = static_cast<const AddTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AddTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.input_table_, this_._impl_.input_table_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket table_to_add = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.table_to_add_, this_._impl_.table_to_add_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AddTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddTableRequest::ByteSizeLong(const MessageLite& base) {
          const AddTableRequest& this_ = static_cast<const AddTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddTableRequest::ByteSizeLong() const {
          const AddTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AddTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.input_table_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket table_to_add = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.table_to_add_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddTableRequest*>(&to_msg);
  auto& from = static_cast<const AddTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AddTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.input_table_ != nullptr);
      if (_this->_impl_.input_table_ == nullptr) {
        _this->_impl_.input_table_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.input_table_);
      } else {
        _this->_impl_.input_table_->MergeFrom(*from._impl_.input_table_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.table_to_add_ != nullptr);
      if (_this->_impl_.table_to_add_ == nullptr) {
        _this->_impl_.table_to_add_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.table_to_add_);
      } else {
        _this->_impl_.table_to_add_->MergeFrom(*from._impl_.table_to_add_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddTableRequest::CopyFrom(const AddTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AddTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddTableRequest::InternalSwap(AddTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_.table_to_add_)
      + sizeof(AddTableRequest::_impl_.table_to_add_)
      - PROTOBUF_FIELD_OFFSET(AddTableRequest, _impl_.input_table_)>(
          reinterpret_cast<char*>(&_impl_.input_table_),
          reinterpret_cast<char*>(&other->_impl_.input_table_));
}

::google::protobuf::Metadata AddTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddTableResponse::_Internal {
 public:
};

AddTableResponse::AddTableResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AddTableResponse)
}
AddTableResponse::AddTableResponse(
    ::google::protobuf::Arena* arena,
    const AddTableResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddTableResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AddTableResponse)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AddTableResponse::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AddTableResponse_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AddTableResponse::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AddTableResponse>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AddTableResponse>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AddTableResponse>(), &AddTableResponse::ByteSizeLong,
                &AddTableResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AddTableResponse, _impl_._cached_size_),
            false,
        },
        &AddTableResponse::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2finputtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AddTableResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AddTableResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AddTableResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AddTableResponse::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DeleteTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_._has_bits_);
};

void DeleteTableRequest::clear_input_table() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_table_ != nullptr) _impl_.input_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DeleteTableRequest::clear_table_to_remove() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.table_to_remove_ != nullptr) _impl_.table_to_remove_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DeleteTableRequest::DeleteTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::DeleteTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DeleteTableRequest::DeleteTableRequest(
    ::google::protobuf::Arena* arena,
    const DeleteTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.input_table_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.input_table_)
                        : nullptr;
  _impl_.table_to_remove_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.table_to_remove_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DeleteTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, input_table_),
           0,
           offsetof(Impl_, table_to_remove_) -
               offsetof(Impl_, input_table_) +
               sizeof(Impl_::table_to_remove_));
}
DeleteTableRequest::~DeleteTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeleteTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.input_table_;
  delete _impl_.table_to_remove_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DeleteTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DeleteTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DeleteTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DeleteTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<DeleteTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<DeleteTableRequest>(), &DeleteTableRequest::ByteSizeLong,
                &DeleteTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_._cached_size_),
            false,
        },
        &DeleteTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2finputtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DeleteTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> DeleteTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::DeleteTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket table_to_remove = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_.table_to_remove_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_.input_table_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
    {PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_.input_table_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket table_to_remove = 2;
    {PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_.table_to_remove_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DeleteTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.input_table_ != nullptr);
      _impl_.input_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.table_to_remove_ != nullptr);
      _impl_.table_to_remove_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DeleteTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DeleteTableRequest& this_ = static_cast<const DeleteTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DeleteTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DeleteTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.input_table_, this_._impl_.input_table_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket table_to_remove = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.table_to_remove_, this_._impl_.table_to_remove_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DeleteTableRequest::ByteSizeLong(const MessageLite& base) {
          const DeleteTableRequest& this_ = static_cast<const DeleteTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DeleteTableRequest::ByteSizeLong() const {
          const DeleteTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket input_table = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.input_table_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket table_to_remove = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.table_to_remove_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DeleteTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeleteTableRequest*>(&to_msg);
  auto& from = static_cast<const DeleteTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.input_table_ != nullptr);
      if (_this->_impl_.input_table_ == nullptr) {
        _this->_impl_.input_table_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.input_table_);
      } else {
        _this->_impl_.input_table_->MergeFrom(*from._impl_.input_table_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.table_to_remove_ != nullptr);
      if (_this->_impl_.table_to_remove_ == nullptr) {
        _this->_impl_.table_to_remove_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.table_to_remove_);
      } else {
        _this->_impl_.table_to_remove_->MergeFrom(*from._impl_.table_to_remove_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTableRequest::CopyFrom(const DeleteTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.DeleteTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeleteTableRequest::InternalSwap(DeleteTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_.table_to_remove_)
      + sizeof(DeleteTableRequest::_impl_.table_to_remove_)
      - PROTOBUF_FIELD_OFFSET(DeleteTableRequest, _impl_.input_table_)>(
          reinterpret_cast<char*>(&_impl_.input_table_),
          reinterpret_cast<char*>(&other->_impl_.input_table_));
}

::google::protobuf::Metadata DeleteTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteTableResponse::_Internal {
 public:
};

DeleteTableResponse::DeleteTableResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.DeleteTableResponse)
}
DeleteTableResponse::DeleteTableResponse(
    ::google::protobuf::Arena* arena,
    const DeleteTableResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteTableResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.DeleteTableResponse)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DeleteTableResponse::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_DeleteTableResponse_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DeleteTableResponse::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<DeleteTableResponse>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DeleteTableResponse>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DeleteTableResponse>(), &DeleteTableResponse::ByteSizeLong,
                &DeleteTableResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DeleteTableResponse, _impl_._cached_size_),
            false,
        },
        &DeleteTableResponse::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2finputtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DeleteTableResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DeleteTableResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::DeleteTableResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DeleteTableResponse::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_deephaven_2fproto_2finputtable_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
