// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/table.proto

#include "deephaven/proto/table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
PROTOBUF_CONSTEXPR TableReference::TableReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ref_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TableReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableReferenceDefaultTypeInternal() {}
  union {
    TableReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableReferenceDefaultTypeInternal _TableReference_default_instance_;
PROTOBUF_CONSTEXPR ExportedTableCreationResponse::ExportedTableCreationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schema_header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.is_static_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExportedTableCreationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportedTableCreationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportedTableCreationResponseDefaultTypeInternal() {}
  union {
    ExportedTableCreationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportedTableCreationResponseDefaultTypeInternal _ExportedTableCreationResponse_default_instance_;
PROTOBUF_CONSTEXPR FetchTableRequest::FetchTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchTableRequestDefaultTypeInternal() {}
  union {
    FetchTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchTableRequestDefaultTypeInternal _FetchTableRequest_default_instance_;
PROTOBUF_CONSTEXPR ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApplyPreviewColumnsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyPreviewColumnsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyPreviewColumnsRequestDefaultTypeInternal() {}
  union {
    ApplyPreviewColumnsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyPreviewColumnsRequestDefaultTypeInternal _ApplyPreviewColumnsRequest_default_instance_;
PROTOBUF_CONSTEXPR ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(
    ::_pbi::ConstantInitialized) {}
struct ExportedTableUpdatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportedTableUpdatesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportedTableUpdatesRequestDefaultTypeInternal() {}
  union {
    ExportedTableUpdatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportedTableUpdatesRequestDefaultTypeInternal _ExportedTableUpdatesRequest_default_instance_;
PROTOBUF_CONSTEXPR ExportedTableUpdateMessage::ExportedTableUpdateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.update_failure_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.export_id_)*/nullptr
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExportedTableUpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportedTableUpdateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportedTableUpdateMessageDefaultTypeInternal() {}
  union {
    ExportedTableUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportedTableUpdateMessageDefaultTypeInternal _ExportedTableUpdateMessage_default_instance_;
PROTOBUF_CONSTEXPR EmptyTableRequest::EmptyTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmptyTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyTableRequestDefaultTypeInternal() {}
  union {
    EmptyTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyTableRequestDefaultTypeInternal _EmptyTableRequest_default_instance_;
PROTOBUF_CONSTEXPR TimeTableRequest::TimeTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.blink_table_)*/false
  , /*decltype(_impl_.start_time_)*/{}
  , /*decltype(_impl_.period_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TimeTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeTableRequestDefaultTypeInternal() {}
  union {
    TimeTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeTableRequestDefaultTypeInternal _TimeTableRequest_default_instance_;
PROTOBUF_CONSTEXPR SelectOrUpdateRequest::SelectOrUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_specs_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectOrUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectOrUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectOrUpdateRequestDefaultTypeInternal() {}
  union {
    SelectOrUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectOrUpdateRequestDefaultTypeInternal _SelectOrUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR MathContext::MathContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.precision_)*/0
  , /*decltype(_impl_.rounding_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MathContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MathContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MathContextDefaultTypeInternal() {}
  union {
    MathContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MathContextDefaultTypeInternal _MathContext_default_instance_;
PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTicks::UpdateByWindowScale_UpdateByWindowTicks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ticks_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal() {}
  union {
    UpdateByWindowScale_UpdateByWindowTicks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal _UpdateByWindowScale_UpdateByWindowTicks_default_instance_;
PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTime::UpdateByWindowScale_UpdateByWindowTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.window_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal() {}
  union {
    UpdateByWindowScale_UpdateByWindowTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal _UpdateByWindowScale_UpdateByWindowTime_default_instance_;
PROTOBUF_CONSTEXPR UpdateByWindowScale::UpdateByWindowScale(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateByWindowScaleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByWindowScaleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByWindowScaleDefaultTypeInternal() {}
  union {
    UpdateByWindowScale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByWindowScaleDefaultTypeInternal _UpdateByWindowScale_default_instance_;
PROTOBUF_CONSTEXPR UpdateByEmOptions::UpdateByEmOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.big_value_context_)*/nullptr
  , /*decltype(_impl_.on_null_value_)*/0
  , /*decltype(_impl_.on_nan_value_)*/0
  , /*decltype(_impl_.on_null_time_)*/0
  , /*decltype(_impl_.on_negative_delta_time_)*/0
  , /*decltype(_impl_.on_zero_delta_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByEmOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByEmOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByEmOptionsDefaultTypeInternal() {}
  union {
    UpdateByEmOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByEmOptionsDefaultTypeInternal _UpdateByEmOptions_default_instance_;
PROTOBUF_CONSTEXPR UpdateByDeltaOptions::UpdateByDeltaOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.null_behavior_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByDeltaOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByDeltaOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByDeltaOptionsDefaultTypeInternal() {}
  union {
    UpdateByDeltaOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByDeltaOptionsDefaultTypeInternal _UpdateByDeltaOptions_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOptions::UpdateByRequest_UpdateByOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.math_context_)*/nullptr
  , /*decltype(_impl_.use_redirection_)*/false
  , /*decltype(_impl_.chunk_capacity_)*/0
  , /*decltype(_impl_.max_static_sparse_memory_overhead_)*/0
  , /*decltype(_impl_.maximum_load_factor_)*/0
  , /*decltype(_impl_.target_load_factor_)*/0
  , /*decltype(_impl_.initial_hash_table_size_)*/0} {}
struct UpdateByRequest_UpdateByOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOptionsDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOptionsDefaultTypeInternal _UpdateByRequest_UpdateByOptions_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum(
    ::_pbi::ConstantInitialized) {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin(
    ::_pbi::ConstantInitialized) {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax(
    ::_pbi::ConstantInitialized) {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct(
    ::_pbi::ConstantInitialized) {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill(
    ::_pbi::ConstantInitialized) {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.formula_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reverse_window_scale_)*/nullptr
  , /*decltype(_impl_.forward_window_scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn::UpdateByRequest_UpdateByOperation_UpdateByColumn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_pairs_)*/{}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation::UpdateByRequest_UpdateByOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateByRequest_UpdateByOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperationDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperationDefaultTypeInternal _UpdateByRequest_UpdateByOperation_default_instance_;
PROTOBUF_CONSTEXPR UpdateByRequest::UpdateByRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operations_)*/{}
  , /*decltype(_impl_.group_by_columns_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateByRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequestDefaultTypeInternal() {}
  union {
    UpdateByRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequestDefaultTypeInternal _UpdateByRequest_default_instance_;
PROTOBUF_CONSTEXPR SelectDistinctRequest::SelectDistinctRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_names_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectDistinctRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectDistinctRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectDistinctRequestDefaultTypeInternal() {}
  union {
    SelectDistinctRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectDistinctRequestDefaultTypeInternal _SelectDistinctRequest_default_instance_;
PROTOBUF_CONSTEXPR DropColumnsRequest::DropColumnsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_names_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropColumnsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropColumnsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropColumnsRequestDefaultTypeInternal() {}
  union {
    DropColumnsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropColumnsRequestDefaultTypeInternal _DropColumnsRequest_default_instance_;
PROTOBUF_CONSTEXPR UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnstructuredFilterTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnstructuredFilterTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnstructuredFilterTableRequestDefaultTypeInternal() {}
  union {
    UnstructuredFilterTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnstructuredFilterTableRequestDefaultTypeInternal _UnstructuredFilterTableRequest_default_instance_;
PROTOBUF_CONSTEXPR HeadOrTailRequest::HeadOrTailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeadOrTailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeadOrTailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeadOrTailRequestDefaultTypeInternal() {}
  union {
    HeadOrTailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeadOrTailRequestDefaultTypeInternal _HeadOrTailRequest_default_instance_;
PROTOBUF_CONSTEXPR HeadOrTailByRequest::HeadOrTailByRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_by_column_specs_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.num_rows_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeadOrTailByRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeadOrTailByRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeadOrTailByRequestDefaultTypeInternal() {}
  union {
    HeadOrTailByRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeadOrTailByRequestDefaultTypeInternal _HeadOrTailByRequest_default_instance_;
PROTOBUF_CONSTEXPR UngroupRequest::UngroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_to_ungroup_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.null_fill_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UngroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UngroupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UngroupRequestDefaultTypeInternal() {}
  union {
    UngroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UngroupRequestDefaultTypeInternal _UngroupRequest_default_instance_;
PROTOBUF_CONSTEXPR MergeTablesRequest::MergeTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_ids_)*/{}
  , /*decltype(_impl_.key_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MergeTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeTablesRequestDefaultTypeInternal() {}
  union {
    MergeTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeTablesRequestDefaultTypeInternal _MergeTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR SnapshotTableRequest::SnapshotTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotTableRequestDefaultTypeInternal() {}
  union {
    SnapshotTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotTableRequestDefaultTypeInternal _SnapshotTableRequest_default_instance_;
PROTOBUF_CONSTEXPR SnapshotWhenTableRequest::SnapshotWhenTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stamp_columns_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.base_id_)*/nullptr
  , /*decltype(_impl_.trigger_id_)*/nullptr
  , /*decltype(_impl_.initial_)*/false
  , /*decltype(_impl_.incremental_)*/false
  , /*decltype(_impl_.history_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotWhenTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotWhenTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotWhenTableRequestDefaultTypeInternal() {}
  union {
    SnapshotWhenTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotWhenTableRequestDefaultTypeInternal _SnapshotWhenTableRequest_default_instance_;
PROTOBUF_CONSTEXPR CrossJoinTablesRequest::CrossJoinTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_to_match_)*/{}
  , /*decltype(_impl_.columns_to_add_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_.reserve_bits_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrossJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossJoinTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossJoinTablesRequestDefaultTypeInternal() {}
  union {
    CrossJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossJoinTablesRequestDefaultTypeInternal _CrossJoinTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR NaturalJoinTablesRequest::NaturalJoinTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_to_match_)*/{}
  , /*decltype(_impl_.columns_to_add_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NaturalJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NaturalJoinTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NaturalJoinTablesRequestDefaultTypeInternal() {}
  union {
    NaturalJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NaturalJoinTablesRequestDefaultTypeInternal _NaturalJoinTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR ExactJoinTablesRequest::ExactJoinTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_to_match_)*/{}
  , /*decltype(_impl_.columns_to_add_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExactJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExactJoinTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExactJoinTablesRequestDefaultTypeInternal() {}
  union {
    ExactJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExactJoinTablesRequestDefaultTypeInternal _ExactJoinTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR LeftJoinTablesRequest::LeftJoinTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_to_match_)*/{}
  , /*decltype(_impl_.columns_to_add_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeftJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeftJoinTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeftJoinTablesRequestDefaultTypeInternal() {}
  union {
    LeftJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeftJoinTablesRequestDefaultTypeInternal _LeftJoinTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR AsOfJoinTablesRequest::AsOfJoinTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_to_match_)*/{}
  , /*decltype(_impl_.columns_to_add_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_.as_of_match_rule_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AsOfJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AsOfJoinTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AsOfJoinTablesRequestDefaultTypeInternal() {}
  union {
    AsOfJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AsOfJoinTablesRequestDefaultTypeInternal _AsOfJoinTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR AjRajTablesRequest::AjRajTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exact_match_columns_)*/{}
  , /*decltype(_impl_.columns_to_add_)*/{}
  , /*decltype(_impl_.as_of_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AjRajTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AjRajTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AjRajTablesRequestDefaultTypeInternal() {}
  union {
    AjRajTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AjRajTablesRequestDefaultTypeInternal _AjRajTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR RangeJoinTablesRequest::RangeJoinTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exact_match_columns_)*/{}
  , /*decltype(_impl_.aggregations_)*/{}
  , /*decltype(_impl_.left_start_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.right_range_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.left_end_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_.range_start_rule_)*/0
  , /*decltype(_impl_.range_end_rule_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeJoinTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeJoinTablesRequestDefaultTypeInternal() {}
  union {
    RangeJoinTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeJoinTablesRequestDefaultTypeInternal _RangeJoinTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_pairs_)*/{}
  , /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.avg_median_)*/false
  , /*decltype(_impl_.percentile_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComboAggregateRequest_AggregateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComboAggregateRequest_AggregateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComboAggregateRequest_AggregateDefaultTypeInternal() {}
  union {
    ComboAggregateRequest_Aggregate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComboAggregateRequest_AggregateDefaultTypeInternal _ComboAggregateRequest_Aggregate_default_instance_;
PROTOBUF_CONSTEXPR ComboAggregateRequest::ComboAggregateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aggregates_)*/{}
  , /*decltype(_impl_.group_by_columns_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.force_combo_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComboAggregateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComboAggregateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComboAggregateRequestDefaultTypeInternal() {}
  union {
    ComboAggregateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComboAggregateRequestDefaultTypeInternal _ComboAggregateRequest_default_instance_;
PROTOBUF_CONSTEXPR AggregateAllRequest::AggregateAllRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_by_columns_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggregateAllRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateAllRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateAllRequestDefaultTypeInternal() {}
  union {
    AggregateAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateAllRequestDefaultTypeInternal _AggregateAllRequest_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecApproximatePercentile::AggSpec_AggSpecApproximatePercentile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.percentile_)*/0
  , /*decltype(_impl_.compression_)*/0} {}
struct AggSpec_AggSpecApproximatePercentileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecApproximatePercentileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecApproximatePercentileDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecApproximatePercentile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecApproximatePercentileDefaultTypeInternal _AggSpec_AggSpecApproximatePercentile_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecCountDistinct::AggSpec_AggSpecCountDistinct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_nulls_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecCountDistinctDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecCountDistinctDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecCountDistinctDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecCountDistinct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecCountDistinctDefaultTypeInternal _AggSpec_AggSpecCountDistinct_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecDistinct::AggSpec_AggSpecDistinct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.include_nulls_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecDistinctDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecDistinctDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecDistinctDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecDistinct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecDistinctDefaultTypeInternal _AggSpec_AggSpecDistinct_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecFormula::AggSpec_AggSpecFormula(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.formula_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecFormulaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecFormulaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecFormulaDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecFormula _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecFormulaDefaultTypeInternal _AggSpec_AggSpecFormula_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecMedian::AggSpec_AggSpecMedian(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.average_evenly_divided_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecMedianDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecMedianDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecMedianDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecMedian _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecMedianDefaultTypeInternal _AggSpec_AggSpecMedian_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecPercentile::AggSpec_AggSpecPercentile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.percentile_)*/0
  , /*decltype(_impl_.average_evenly_divided_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecPercentileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecPercentileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecPercentileDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecPercentile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecPercentileDefaultTypeInternal _AggSpec_AggSpecPercentile_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecSorted::AggSpec_AggSpecSorted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecSortedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecSortedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecSortedDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecSorted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecSortedDefaultTypeInternal _AggSpec_AggSpecSorted_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecSortedColumn::AggSpec_AggSpecSortedColumn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecSortedColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecSortedColumnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecSortedColumnDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecSortedColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecSortedColumnDefaultTypeInternal _AggSpec_AggSpecSortedColumn_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecTDigest::AggSpec_AggSpecTDigest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.compression_)*/0} {}
struct AggSpec_AggSpecTDigestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecTDigestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecTDigestDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecTDigest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecTDigestDefaultTypeInternal _AggSpec_AggSpecTDigest_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecUnique::AggSpec_AggSpecUnique(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.non_unique_sentinel_)*/nullptr
  , /*decltype(_impl_.include_nulls_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecUniqueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecUniqueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecUniqueDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecUnique _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecUniqueDefaultTypeInternal _AggSpec_AggSpecUnique_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecNonUniqueSentinel::AggSpec_AggSpecNonUniqueSentinel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecNonUniqueSentinel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal _AggSpec_AggSpecNonUniqueSentinel_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecWeighted::AggSpec_AggSpecWeighted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggSpec_AggSpecWeightedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecWeightedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecWeightedDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecWeighted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecWeightedDefaultTypeInternal _AggSpec_AggSpecWeighted_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecAbsSum::AggSpec_AggSpecAbsSum(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecAbsSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecAbsSumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecAbsSumDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecAbsSum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecAbsSumDefaultTypeInternal _AggSpec_AggSpecAbsSum_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecAvg::AggSpec_AggSpecAvg(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecAvgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecAvgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecAvgDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecAvg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecAvgDefaultTypeInternal _AggSpec_AggSpecAvg_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecFirst::AggSpec_AggSpecFirst(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecFirstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecFirstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecFirstDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecFirst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecFirstDefaultTypeInternal _AggSpec_AggSpecFirst_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecFreeze::AggSpec_AggSpecFreeze(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecFreezeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecFreezeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecFreezeDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecFreeze _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecFreezeDefaultTypeInternal _AggSpec_AggSpecFreeze_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecGroup::AggSpec_AggSpecGroup(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecGroupDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecGroupDefaultTypeInternal _AggSpec_AggSpecGroup_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecLast::AggSpec_AggSpecLast(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecLastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecLastDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecLastDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecLast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecLastDefaultTypeInternal _AggSpec_AggSpecLast_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecMax::AggSpec_AggSpecMax(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecMaxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecMaxDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecMax _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecMaxDefaultTypeInternal _AggSpec_AggSpecMax_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecMin::AggSpec_AggSpecMin(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecMinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecMinDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecMin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecMinDefaultTypeInternal _AggSpec_AggSpecMin_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecStd::AggSpec_AggSpecStd(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecStdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecStdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecStdDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecStd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecStdDefaultTypeInternal _AggSpec_AggSpecStd_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecSum::AggSpec_AggSpecSum(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecSumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecSumDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecSum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecSumDefaultTypeInternal _AggSpec_AggSpecSum_default_instance_;
PROTOBUF_CONSTEXPR AggSpec_AggSpecVar::AggSpec_AggSpecVar(
    ::_pbi::ConstantInitialized) {}
struct AggSpec_AggSpecVarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecVarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecVarDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecVarDefaultTypeInternal _AggSpec_AggSpecVar_default_instance_;
PROTOBUF_CONSTEXPR AggSpec::AggSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AggSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpecDefaultTypeInternal() {}
  union {
    AggSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpecDefaultTypeInternal _AggSpec_default_instance_;
PROTOBUF_CONSTEXPR AggregateRequest::AggregateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aggregations_)*/{}
  , /*decltype(_impl_.group_by_columns_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.initial_groups_id_)*/nullptr
  , /*decltype(_impl_.preserve_empty_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggregateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateRequestDefaultTypeInternal() {}
  union {
    AggregateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateRequestDefaultTypeInternal _AggregateRequest_default_instance_;
PROTOBUF_CONSTEXPR Aggregation_AggregationColumns::Aggregation_AggregationColumns(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_pairs_)*/{}
  , /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Aggregation_AggregationColumnsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationColumnsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationColumnsDefaultTypeInternal() {}
  union {
    Aggregation_AggregationColumns _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationColumnsDefaultTypeInternal _Aggregation_AggregationColumns_default_instance_;
PROTOBUF_CONSTEXPR Aggregation_AggregationCount::Aggregation_AggregationCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Aggregation_AggregationCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationCountDefaultTypeInternal() {}
  union {
    Aggregation_AggregationCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationCountDefaultTypeInternal _Aggregation_AggregationCount_default_instance_;
PROTOBUF_CONSTEXPR Aggregation_AggregationRowKey::Aggregation_AggregationRowKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Aggregation_AggregationRowKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationRowKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationRowKeyDefaultTypeInternal() {}
  union {
    Aggregation_AggregationRowKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationRowKeyDefaultTypeInternal _Aggregation_AggregationRowKey_default_instance_;
PROTOBUF_CONSTEXPR Aggregation_AggregationPartition::Aggregation_AggregationPartition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_group_by_columns_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Aggregation_AggregationPartitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationPartitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationPartitionDefaultTypeInternal() {}
  union {
    Aggregation_AggregationPartition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationPartitionDefaultTypeInternal _Aggregation_AggregationPartition_default_instance_;
PROTOBUF_CONSTEXPR Aggregation::Aggregation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregationDefaultTypeInternal() {}
  union {
    Aggregation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregationDefaultTypeInternal _Aggregation_default_instance_;
PROTOBUF_CONSTEXPR SortDescriptor::SortDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_absolute_)*/false
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SortDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortDescriptorDefaultTypeInternal() {}
  union {
    SortDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortDescriptorDefaultTypeInternal _SortDescriptor_default_instance_;
PROTOBUF_CONSTEXPR SortTableRequest::SortTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sorts_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SortTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortTableRequestDefaultTypeInternal() {}
  union {
    SortTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortTableRequestDefaultTypeInternal _SortTableRequest_default_instance_;
PROTOBUF_CONSTEXPR FilterTableRequest::FilterTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FilterTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterTableRequestDefaultTypeInternal() {}
  union {
    FilterTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterTableRequestDefaultTypeInternal _FilterTableRequest_default_instance_;
PROTOBUF_CONSTEXPR SeekRowRequest::SeekRowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.seek_value_)*/nullptr
  , /*decltype(_impl_.starting_row_)*/int64_t{0}
  , /*decltype(_impl_.insensitive_)*/false
  , /*decltype(_impl_.contains_)*/false
  , /*decltype(_impl_.is_backward_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeekRowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekRowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekRowRequestDefaultTypeInternal() {}
  union {
    SeekRowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekRowRequestDefaultTypeInternal _SeekRowRequest_default_instance_;
PROTOBUF_CONSTEXPR SeekRowResponse::SeekRowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_row_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SeekRowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekRowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekRowResponseDefaultTypeInternal() {}
  union {
    SeekRowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekRowResponseDefaultTypeInternal _SeekRowResponse_default_instance_;
PROTOBUF_CONSTEXPR Reference::Reference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {
    Reference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceDefaultTypeInternal _Reference_default_instance_;
PROTOBUF_CONSTEXPR Literal::Literal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LiteralDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiteralDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiteralDefaultTypeInternal() {}
  union {
    Literal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiteralDefaultTypeInternal _Literal_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR Condition::Condition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionDefaultTypeInternal() {}
  union {
    Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionDefaultTypeInternal _Condition_default_instance_;
PROTOBUF_CONSTEXPR AndCondition::AndCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AndConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndConditionDefaultTypeInternal() {}
  union {
    AndCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndConditionDefaultTypeInternal _AndCondition_default_instance_;
PROTOBUF_CONSTEXPR OrCondition::OrCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrConditionDefaultTypeInternal() {}
  union {
    OrCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrConditionDefaultTypeInternal _OrCondition_default_instance_;
PROTOBUF_CONSTEXPR NotCondition::NotCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotConditionDefaultTypeInternal() {}
  union {
    NotCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotConditionDefaultTypeInternal _NotCondition_default_instance_;
PROTOBUF_CONSTEXPR CompareCondition::CompareCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lhs_)*/nullptr
  , /*decltype(_impl_.rhs_)*/nullptr
  , /*decltype(_impl_.operation_)*/0
  , /*decltype(_impl_.case_sensitivity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompareConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompareConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompareConditionDefaultTypeInternal() {}
  union {
    CompareCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompareConditionDefaultTypeInternal _CompareCondition_default_instance_;
PROTOBUF_CONSTEXPR InCondition::InCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candidates_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.case_sensitivity_)*/0
  , /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InConditionDefaultTypeInternal() {}
  union {
    InCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InConditionDefaultTypeInternal _InCondition_default_instance_;
PROTOBUF_CONSTEXPR InvokeCondition::InvokeCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InvokeConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvokeConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvokeConditionDefaultTypeInternal() {}
  union {
    InvokeCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvokeConditionDefaultTypeInternal _InvokeCondition_default_instance_;
PROTOBUF_CONSTEXPR IsNullCondition::IsNullCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reference_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsNullConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsNullConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsNullConditionDefaultTypeInternal() {}
  union {
    IsNullCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsNullConditionDefaultTypeInternal _IsNullCondition_default_instance_;
PROTOBUF_CONSTEXPR MatchesCondition::MatchesCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.regex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reference_)*/nullptr
  , /*decltype(_impl_.case_sensitivity_)*/0
  , /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchesConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchesConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchesConditionDefaultTypeInternal() {}
  union {
    MatchesCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchesConditionDefaultTypeInternal _MatchesCondition_default_instance_;
PROTOBUF_CONSTEXPR ContainsCondition::ContainsCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.search_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reference_)*/nullptr
  , /*decltype(_impl_.case_sensitivity_)*/0
  , /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContainsConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainsConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainsConditionDefaultTypeInternal() {}
  union {
    ContainsCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainsConditionDefaultTypeInternal _ContainsCondition_default_instance_;
PROTOBUF_CONSTEXPR SearchCondition::SearchCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optional_references_)*/{}
  , /*decltype(_impl_.search_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchConditionDefaultTypeInternal() {}
  union {
    SearchCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchConditionDefaultTypeInternal _SearchCondition_default_instance_;
PROTOBUF_CONSTEXPR FlattenRequest::FlattenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlattenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlattenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlattenRequestDefaultTypeInternal() {}
  union {
    FlattenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlattenRequestDefaultTypeInternal _FlattenRequest_default_instance_;
PROTOBUF_CONSTEXPR MetaTableRequest::MetaTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaTableRequestDefaultTypeInternal() {}
  union {
    MetaTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaTableRequestDefaultTypeInternal _MetaTableRequest_default_instance_;
PROTOBUF_CONSTEXPR RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_date_nanos_)*/int64_t{0}
  , /*decltype(_impl_.max_date_nanos_)*/int64_t{0}} {}
struct RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal() {}
  union {
    RunChartDownsampleRequest_ZoomRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal _RunChartDownsampleRequest_ZoomRange_default_instance_;
PROTOBUF_CONSTEXPR RunChartDownsampleRequest::RunChartDownsampleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.y_column_names_)*/{}
  , /*decltype(_impl_.x_column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.zoom_range_)*/nullptr
  , /*decltype(_impl_.pixel_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunChartDownsampleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunChartDownsampleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunChartDownsampleRequestDefaultTypeInternal() {}
  union {
    RunChartDownsampleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunChartDownsampleRequestDefaultTypeInternal _RunChartDownsampleRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(
    ::_pbi::ConstantInitialized) {}
struct CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_InMemoryAppendOnly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal _CreateInputTableRequest_InputTableKind_InMemoryAppendOnly_default_instance_;
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_columns_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_InMemoryKeyBacked _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal _CreateInputTableRequest_InputTableKind_InMemoryKeyBacked_default_instance_;
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_Blink::CreateInputTableRequest_InputTableKind_Blink(
    ::_pbi::ConstantInitialized) {}
struct CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_Blink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal _CreateInputTableRequest_InputTableKind_Blink_default_instance_;
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CreateInputTableRequest_InputTableKindDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKindDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKindDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKindDefaultTypeInternal _CreateInputTableRequest_InputTableKind_default_instance_;
PROTOBUF_CONSTEXPR CreateInputTableRequest::CreateInputTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.kind_)*/nullptr
  , /*decltype(_impl_.definition_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CreateInputTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequestDefaultTypeInternal() {}
  union {
    CreateInputTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequestDefaultTypeInternal _CreateInputTableRequest_default_instance_;
PROTOBUF_CONSTEXPR WhereInRequest::WhereInRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_to_match_)*/{}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.left_id_)*/nullptr
  , /*decltype(_impl_.right_id_)*/nullptr
  , /*decltype(_impl_.inverted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WhereInRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhereInRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhereInRequestDefaultTypeInternal() {}
  union {
    WhereInRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhereInRequestDefaultTypeInternal _WhereInRequest_default_instance_;
PROTOBUF_CONSTEXPR ColumnStatisticsRequest::ColumnStatisticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_id_)*/nullptr
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.unique_value_limit_)*/0} {}
struct ColumnStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnStatisticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnStatisticsRequestDefaultTypeInternal() {}
  union {
    ColumnStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnStatisticsRequestDefaultTypeInternal _ColumnStatisticsRequest_default_instance_;
PROTOBUF_CONSTEXPR BatchTableRequest_Operation::BatchTableRequest_Operation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.op_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BatchTableRequest_OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchTableRequest_OperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchTableRequest_OperationDefaultTypeInternal() {}
  union {
    BatchTableRequest_Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchTableRequest_OperationDefaultTypeInternal _BatchTableRequest_Operation_default_instance_;
PROTOBUF_CONSTEXPR BatchTableRequest::BatchTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ops_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchTableRequestDefaultTypeInternal() {}
  union {
    BatchTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchTableRequestDefaultTypeInternal _BatchTableRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::_pb::Metadata file_level_metadata_deephaven_2fproto_2ftable_2eproto[122];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[12];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_deephaven_2fproto_2ftable_2eproto = nullptr;

const uint32_t TableStruct_deephaven_2fproto_2ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _impl_.ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.error_info_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.schema_header_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.is_static_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _impl_.result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _impl_.result_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _impl_.export_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _impl_.update_failure_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.result_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.blink_table_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _impl_.column_specs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MathContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MathContext, _impl_.precision_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MathContext, _impl_.rounding_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks, _impl_.ticks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _impl_.column_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _impl_.window_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_null_value_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_nan_value_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_null_time_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_negative_delta_time_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_zero_delta_time_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.big_value_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions, _impl_.null_behavior_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.use_redirection_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.chunk_capacity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.max_static_sparse_memory_overhead_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.initial_hash_table_size_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.maximum_load_factor_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.target_load_factor_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.math_context_),
  0,
  1,
  2,
  5,
  3,
  4,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.forward_window_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.forward_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.weight_column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.reverse_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.forward_window_scale_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.param_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.match_pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.operations_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.group_by_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _impl_.column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _impl_.column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _impl_.num_rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.num_rows_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.group_by_column_specs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.null_fill_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.columns_to_ungroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _impl_.source_ids_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _impl_.key_column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _impl_.source_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.base_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.trigger_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.initial_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.incremental_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.history_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.stamp_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.columns_to_add_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.reserve_bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.columns_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.columns_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.columns_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.columns_to_add_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.as_of_match_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.exact_match_columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.as_of_column_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.columns_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.exact_match_columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.left_start_column_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.range_start_rule_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.right_range_column_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.range_end_rule_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.left_end_column_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.aggregations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.match_pairs_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.percentile_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.avg_median_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.aggregates_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.group_by_columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.force_combo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.group_by_columns_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _impl_.percentile_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _impl_.compression_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct, _impl_.count_nulls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct, _impl_.include_nulls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula, _impl_.param_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian, _impl_.average_evenly_divided_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile, _impl_.percentile_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile, _impl_.average_evenly_divided_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted, _impl_.columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest, _impl_.compression_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique, _impl_.include_nulls_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique, _impl_.non_unique_sentinel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted, _impl_.weight_column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.initial_groups_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.preserve_empty_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.aggregations_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.group_by_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns, _impl_.match_pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount, _impl_.column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey, _impl_.column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition, _impl_.include_group_by_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _impl_.is_absolute_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _impl_.direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _impl_.sorts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.starting_row_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.seek_value_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.insensitive_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.contains_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.is_backward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowResponse, _impl_.result_row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Reference, _impl_.column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AndCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AndCondition, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OrCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OrCondition, _impl_.filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NotCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NotCondition, _impl_.filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.lhs_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.rhs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.candidates_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _impl_.arguments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::IsNullCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::IsNullCondition, _impl_.reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.reference_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.regex_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.reference_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.search_string_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.case_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, _impl_.search_string_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, _impl_.optional_references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _impl_.source_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MetaTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MetaTableRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MetaTableRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _impl_.min_date_nanos_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _impl_.max_date_nanos_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.pixel_count_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.zoom_range_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.x_column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.y_column_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _impl_.key_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_.result_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_.definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.left_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.right_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.inverted_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.columns_to_match_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.result_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.unique_value_limit_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _impl_.op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, _impl_.ops_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TableReference)},
  { 9, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse)},
  { 21, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchTableRequest)},
  { 29, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest)},
  { 37, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest)},
  { 43, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage)},
  { 52, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::EmptyTableRequest)},
  { 60, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TimeTableRequest)},
  { 74, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest)},
  { 83, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::MathContext)},
  { 91, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks)},
  { 98, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime)},
  { 108, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale)},
  { 117, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions)},
  { 129, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions)},
  { 136, 149, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions)},
  { 156, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum)},
  { 162, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin)},
  { 168, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax)},
  { 174, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct)},
  { 180, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill)},
  { 186, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma)},
  { 194, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms)},
  { 202, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin)},
  { 210, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax)},
  { 218, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd)},
  { 226, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta)},
  { 233, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum)},
  { 241, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup)},
  { 249, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg)},
  { 257, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin)},
  { 265, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax)},
  { 273, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct)},
  { 281, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount)},
  { 289, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd)},
  { 297, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg)},
  { 306, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula)},
  { 316, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec)},
  { 344, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn)},
  { 352, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation)},
  { 360, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest)},
  { 371, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest)},
  { 380, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::DropColumnsRequest)},
  { 389, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest)},
  { 398, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest)},
  { 407, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest)},
  { 417, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UngroupRequest)},
  { 427, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::MergeTablesRequest)},
  { 436, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest)},
  { 444, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest)},
  { 457, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest)},
  { 469, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest)},
  { 480, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest)},
  { 491, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest)},
  { 502, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest)},
  { 514, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest)},
  { 526, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest)},
  { 542, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate)},
  { 553, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest)},
  { 564, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggregateAllRequest)},
  { 574, 582, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile)},
  { 584, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct)},
  { 591, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct)},
  { 598, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula)},
  { 606, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian)},
  { 613, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile)},
  { 621, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted)},
  { 628, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn)},
  { 635, 642, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest)},
  { 643, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique)},
  { 651, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel)},
  { 668, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted)},
  { 675, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum)},
  { 681, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg)},
  { 687, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst)},
  { 693, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze)},
  { 699, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup)},
  { 705, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast)},
  { 711, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax)},
  { 717, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin)},
  { 723, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd)},
  { 729, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum)},
  { 735, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar)},
  { 741, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec)},
  { 771, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggregateRequest)},
  { 783, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns)},
  { 791, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount)},
  { 798, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey)},
  { 805, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition)},
  { 813, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation)},
  { 825, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortDescriptor)},
  { 834, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortTableRequest)},
  { 843, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FilterTableRequest)},
  { 852, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SeekRowRequest)},
  { 865, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SeekRowResponse)},
  { 872, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Reference)},
  { 879, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Literal)},
  { 891, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Value)},
  { 900, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Condition)},
  { 917, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AndCondition)},
  { 924, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::OrCondition)},
  { 931, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::NotCondition)},
  { 938, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CompareCondition)},
  { 948, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::InCondition)},
  { 958, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::InvokeCondition)},
  { 967, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::IsNullCondition)},
  { 974, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::MatchesCondition)},
  { 984, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ContainsCondition)},
  { 994, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SearchCondition)},
  { 1002, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FlattenRequest)},
  { 1010, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::MetaTableRequest)},
  { 1018, 1026, -1, sizeof(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange)},
  { 1028, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest)},
  { 1040, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly)},
  { 1046, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked)},
  { 1053, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink)},
  { 1059, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind)},
  { 1069, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest)},
  { 1080, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::WhereInRequest)},
  { 1091, 1101, -1, sizeof(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest)},
  { 1105, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation)},
  { 1152, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ExportedTableCreationResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_FetchTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ApplyPreviewColumnsRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ExportedTableUpdatesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ExportedTableUpdateMessage_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_EmptyTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_TimeTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_MathContext_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByWindowScale_UpdateByWindowTicks_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByWindowScale_UpdateByWindowTime_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByWindowScale_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByEmOptions_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByDeltaOptions_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOptions_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SelectDistinctRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_DropColumnsRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UnstructuredFilterTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HeadOrTailRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_HeadOrTailByRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_UngroupRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_MergeTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SnapshotTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SnapshotWhenTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_CrossJoinTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_NaturalJoinTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ExactJoinTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_LeftJoinTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AsOfJoinTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AjRajTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_RangeJoinTablesRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_Aggregate_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggregateAllRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecApproximatePercentile_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecCountDistinct_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecDistinct_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecFormula_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecMedian_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecPercentile_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecSorted_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecSortedColumn_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecTDigest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecUnique_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecNonUniqueSentinel_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecWeighted_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecAbsSum_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecAvg_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecFirst_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecFreeze_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecGroup_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecLast_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecMax_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecMin_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecStd_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecSum_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecVar_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggSpec_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AggregateRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationColumns_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationCount_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationRowKey_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationPartition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Aggregation_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SortDescriptor_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SortTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_FilterTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SeekRowRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SeekRowResponse_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Reference_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Literal_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Value_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_Condition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_AndCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_OrCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_NotCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_CompareCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_InCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_InvokeCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_IsNullCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_MatchesCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ContainsCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_SearchCondition_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_FlattenRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_MetaTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_RunChartDownsampleRequest_ZoomRange_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_RunChartDownsampleRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_InMemoryAppendOnly_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_InMemoryKeyBacked_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_Blink_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_WhereInRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_ColumnStatisticsRequest_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_BatchTableRequest_Operation_default_instance_._instance,
  &::io::deephaven::proto::backplane::grpc::_BatchTableRequest_default_instance_._instance,
};

const char descriptor_table_protodef_deephaven_2fproto_2ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033deephaven/proto/table.proto\022!io.deepha"
  "ven.proto.backplane.grpc\032\034deephaven/prot"
  "o/ticket.proto\"l\n\016TableReference\022;\n\006tick"
  "et\030\001 \001(\0132).io.deephaven.proto.backplane."
  "grpc.TicketH\000\022\026\n\014batch_offset\030\002 \001(\021H\000B\005\n"
  "\003ref\"\306\001\n\035ExportedTableCreationResponse\022D"
  "\n\tresult_id\030\001 \001(\01321.io.deephaven.proto.b"
  "ackplane.grpc.TableReference\022\017\n\007success\030"
  "\002 \001(\010\022\022\n\nerror_info\030\003 \001(\t\022\025\n\rschema_head"
  "er\030\004 \001(\014\022\021\n\tis_static\030\005 \001(\010\022\020\n\004size\030\006 \001("
  "\022B\0020\001\"\227\001\n\021FetchTableRequest\022D\n\tsource_id"
  "\030\001 \001(\01321.io.deephaven.proto.backplane.gr"
  "pc.TableReference\022<\n\tresult_id\030\002 \001(\0132).i"
  "o.deephaven.proto.backplane.grpc.Ticket\""
  "\240\001\n\032ApplyPreviewColumnsRequest\022D\n\tsource"
  "_id\030\001 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022<\n\tresult_id\030\002 \001(\0132"
  ").io.deephaven.proto.backplane.grpc.Tick"
  "et\"\035\n\033ExportedTableUpdatesRequest\"\214\001\n\032Ex"
  "portedTableUpdateMessage\022<\n\texport_id\030\001 "
  "\001(\0132).io.deephaven.proto.backplane.grpc."
  "Ticket\022\020\n\004size\030\002 \001(\022B\0020\001\022\036\n\026update_failu"
  "re_message\030\003 \001(\t\"c\n\021EmptyTableRequest\022<\n"
  "\tresult_id\030\001 \001(\0132).io.deephaven.proto.ba"
  "ckplane.grpc.Ticket\022\020\n\004size\030\002 \001(\022B\0020\001\"\357\001"
  "\n\020TimeTableRequest\022<\n\tresult_id\030\001 \001(\0132)."
  "io.deephaven.proto.backplane.grpc.Ticket"
  "\022\036\n\020start_time_nanos\030\002 \001(\022B\0020\001H\000\022\033\n\021star"
  "t_time_string\030\005 \001(\tH\000\022\032\n\014period_nanos\030\003 "
  "\001(\022B\0020\001H\001\022\027\n\rperiod_string\030\006 \001(\tH\001\022\023\n\013bl"
  "ink_table\030\004 \001(\010B\014\n\nstart_timeB\010\n\006period\""
  "\261\001\n\025SelectOrUpdateRequest\022<\n\tresult_id\030\001"
  " \001(\0132).io.deephaven.proto.backplane.grpc"
  ".Ticket\022D\n\tsource_id\030\002 \001(\01321.io.deephave"
  "n.proto.backplane.grpc.TableReference\022\024\n"
  "\014column_specs\030\003 \003(\t\"\214\002\n\013MathContext\022\021\n\tp"
  "recision\030\001 \001(\021\022R\n\rrounding_mode\030\002 \001(\0162;."
  "io.deephaven.proto.backplane.grpc.MathCo"
  "ntext.RoundingMode\"\225\001\n\014RoundingMode\022\037\n\033R"
  "OUNDING_MODE_NOT_SPECIFIED\020\000\022\006\n\002UP\020\001\022\010\n\004"
  "DOWN\020\002\022\013\n\007CEILING\020\003\022\t\n\005FLOOR\020\004\022\013\n\007HALF_U"
  "P\020\005\022\r\n\tHALF_DOWN\020\006\022\r\n\tHALF_EVEN\020\007\022\017\n\013UNN"
  "ECESSARY\020\010\"\333\002\n\023UpdateByWindowScale\022[\n\005ti"
  "cks\030\001 \001(\0132J.io.deephaven.proto.backplane"
  ".grpc.UpdateByWindowScale.UpdateByWindow"
  "TicksH\000\022Y\n\004time\030\002 \001(\0132I.io.deephaven.pro"
  "to.backplane.grpc.UpdateByWindowScale.Up"
  "dateByWindowTimeH\000\032$\n\023UpdateByWindowTick"
  "s\022\r\n\005ticks\030\001 \001(\001\032^\n\022UpdateByWindowTime\022\016"
  "\n\006column\030\001 \001(\t\022\023\n\005nanos\030\002 \001(\022B\0020\001H\000\022\031\n\017d"
  "uration_string\030\003 \001(\tH\000B\010\n\006windowB\006\n\004type"
  "\"\341\003\n\021UpdateByEmOptions\022I\n\ron_null_value\030"
  "\001 \001(\01622.io.deephaven.proto.backplane.grp"
  "c.BadDataBehavior\022H\n\014on_nan_value\030\002 \001(\0162"
  "2.io.deephaven.proto.backplane.grpc.BadD"
  "ataBehavior\022H\n\014on_null_time\030\003 \001(\01622.io.d"
  "eephaven.proto.backplane.grpc.BadDataBeh"
  "avior\022R\n\026on_negative_delta_time\030\004 \001(\01622."
  "io.deephaven.proto.backplane.grpc.BadDat"
  "aBehavior\022N\n\022on_zero_delta_time\030\005 \001(\01622."
  "io.deephaven.proto.backplane.grpc.BadDat"
  "aBehavior\022I\n\021big_value_context\030\006 \001(\0132..i"
  "o.deephaven.proto.backplane.grpc.MathCon"
  "text\"f\n\024UpdateByDeltaOptions\022N\n\rnull_beh"
  "avior\030\001 \001(\01627.io.deephaven.proto.backpla"
  "ne.grpc.UpdateByNullBehavior\"\2337\n\017UpdateB"
  "yRequest\022<\n\tresult_id\030\001 \001(\0132).io.deephav"
  "en.proto.backplane.grpc.Ticket\022D\n\tsource"
  "_id\030\002 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022S\n\007options\030\003 \001(\0132B."
  "io.deephaven.proto.backplane.grpc.Update"
  "ByRequest.UpdateByOptions\022X\n\noperations\030"
  "\004 \003(\0132D.io.deephaven.proto.backplane.grp"
  "c.UpdateByRequest.UpdateByOperation\022\030\n\020g"
  "roup_by_columns\030\005 \003(\t\032\303\003\n\017UpdateByOption"
  "s\022\034\n\017use_redirection\030\001 \001(\010H\000\210\001\001\022\033\n\016chunk"
  "_capacity\030\002 \001(\005H\001\210\001\001\022.\n!max_static_spars"
  "e_memory_overhead\030\003 \001(\001H\002\210\001\001\022$\n\027initial_"
  "hash_table_size\030\004 \001(\005H\003\210\001\001\022 \n\023maximum_lo"
  "ad_factor\030\005 \001(\001H\004\210\001\001\022\037\n\022target_load_fact"
  "or\030\006 \001(\001H\005\210\001\001\022D\n\014math_context\030\007 \001(\0132..io"
  ".deephaven.proto.backplane.grpc.MathCont"
  "extB\022\n\020_use_redirectionB\021\n\017_chunk_capaci"
  "tyB$\n\"_max_static_sparse_memory_overhead"
  "B\032\n\030_initial_hash_table_sizeB\026\n\024_maximum"
  "_load_factorB\025\n\023_target_load_factor\032\3640\n\021"
  "UpdateByOperation\022e\n\006column\030\001 \001(\0132S.io.d"
  "eephaven.proto.backplane.grpc.UpdateByRe"
  "quest.UpdateByOperation.UpdateByColumnH\000"
  "\032\357/\n\016UpdateByColumn\022n\n\004spec\030\001 \001(\0132`.io.d"
  "eephaven.proto.backplane.grpc.UpdateByRe"
  "quest.UpdateByOperation.UpdateByColumn.U"
  "pdateBySpec\022\023\n\013match_pairs\030\002 \003(\t\032\327.\n\014Upd"
  "ateBySpec\022\205\001\n\003sum\030\001 \001(\0132v.io.deephaven.p"
  "roto.backplane.grpc.UpdateByRequest.Upda"
  "teByOperation.UpdateByColumn.UpdateBySpe"
  "c.UpdateByCumulativeSumH\000\022\205\001\n\003min\030\002 \001(\0132"
  "v.io.deephaven.proto.backplane.grpc.Upda"
  "teByRequest.UpdateByOperation.UpdateByCo"
  "lumn.UpdateBySpec.UpdateByCumulativeMinH"
  "\000\022\205\001\n\003max\030\003 \001(\0132v.io.deephaven.proto.bac"
  "kplane.grpc.UpdateByRequest.UpdateByOper"
  "ation.UpdateByColumn.UpdateBySpec.Update"
  "ByCumulativeMaxH\000\022\215\001\n\007product\030\004 \001(\0132z.io"
  ".deephaven.proto.backplane.grpc.UpdateBy"
  "Request.UpdateByOperation.UpdateByColumn"
  ".UpdateBySpec.UpdateByCumulativeProductH"
  "\000\022}\n\004fill\030\005 \001(\0132m.io.deephaven.proto.bac"
  "kplane.grpc.UpdateByRequest.UpdateByOper"
  "ation.UpdateByColumn.UpdateBySpec.Update"
  "ByFillH\000\022{\n\003ema\030\006 \001(\0132l.io.deephaven.pro"
  "to.backplane.grpc.UpdateByRequest.Update"
  "ByOperation.UpdateByColumn.UpdateBySpec."
  "UpdateByEmaH\000\022\212\001\n\013rolling_sum\030\007 \001(\0132s.io"
  ".deephaven.proto.backplane.grpc.UpdateBy"
  "Request.UpdateByOperation.UpdateByColumn"
  ".UpdateBySpec.UpdateByRollingSumH\000\022\216\001\n\rr"
  "olling_group\030\010 \001(\0132u.io.deephaven.proto."
  "backplane.grpc.UpdateByRequest.UpdateByO"
  "peration.UpdateByColumn.UpdateBySpec.Upd"
  "ateByRollingGroupH\000\022\212\001\n\013rolling_avg\030\t \001("
  "\0132s.io.deephaven.proto.backplane.grpc.Up"
  "dateByRequest.UpdateByOperation.UpdateBy"
  "Column.UpdateBySpec.UpdateByRollingAvgH\000"
  "\022\212\001\n\013rolling_min\030\n \001(\0132s.io.deephaven.pr"
  "oto.backplane.grpc.UpdateByRequest.Updat"
  "eByOperation.UpdateByColumn.UpdateBySpec"
  ".UpdateByRollingMinH\000\022\212\001\n\013rolling_max\030\013 "
  "\001(\0132s.io.deephaven.proto.backplane.grpc."
  "UpdateByRequest.UpdateByOperation.Update"
  "ByColumn.UpdateBySpec.UpdateByRollingMax"
  "H\000\022\222\001\n\017rolling_product\030\014 \001(\0132w.io.deepha"
  "ven.proto.backplane.grpc.UpdateByRequest"
  ".UpdateByOperation.UpdateByColumn.Update"
  "BySpec.UpdateByRollingProductH\000\022\177\n\005delta"
  "\030\r \001(\0132n.io.deephaven.proto.backplane.gr"
  "pc.UpdateByRequest.UpdateByOperation.Upd"
  "ateByColumn.UpdateBySpec.UpdateByDeltaH\000"
  "\022{\n\003ems\030\016 \001(\0132l.io.deephaven.proto.backp"
  "lane.grpc.UpdateByRequest.UpdateByOperat"
  "ion.UpdateByColumn.UpdateBySpec.UpdateBy"
  "EmsH\000\022\200\001\n\006em_min\030\017 \001(\0132n.io.deephaven.pr"
  "oto.backplane.grpc.UpdateByRequest.Updat"
  "eByOperation.UpdateByColumn.UpdateBySpec"
  ".UpdateByEmMinH\000\022\200\001\n\006em_max\030\020 \001(\0132n.io.d"
  "eephaven.proto.backplane.grpc.UpdateByRe"
  "quest.UpdateByOperation.UpdateByColumn.U"
  "pdateBySpec.UpdateByEmMaxH\000\022\200\001\n\006em_std\030\021"
  " \001(\0132n.io.deephaven.proto.backplane.grpc"
  ".UpdateByRequest.UpdateByOperation.Updat"
  "eByColumn.UpdateBySpec.UpdateByEmStdH\000\022\216"
  "\001\n\rrolling_count\030\022 \001(\0132u.io.deephaven.pr"
  "oto.backplane.grpc.UpdateByRequest.Updat"
  "eByOperation.UpdateByColumn.UpdateBySpec"
  ".UpdateByRollingCountH\000\022\212\001\n\013rolling_std\030"
  "\023 \001(\0132s.io.deephaven.proto.backplane.grp"
  "c.UpdateByRequest.UpdateByOperation.Upda"
  "teByColumn.UpdateBySpec.UpdateByRollingS"
  "tdH\000\022\214\001\n\014rolling_wavg\030\024 \001(\0132t.io.deephav"
  "en.proto.backplane.grpc.UpdateByRequest."
  "UpdateByOperation.UpdateByColumn.UpdateB"
  "ySpec.UpdateByRollingWAvgH\000\022\222\001\n\017rolling_"
  "formula\030\025 \001(\0132w.io.deephaven.proto.backp"
  "lane.grpc.UpdateByRequest.UpdateByOperat"
  "ion.UpdateByColumn.UpdateBySpec.UpdateBy"
  "RollingFormulaH\000\032\027\n\025UpdateByCumulativeSu"
  "m\032\027\n\025UpdateByCumulativeMin\032\027\n\025UpdateByCu"
  "mulativeMax\032\033\n\031UpdateByCumulativeProduct"
  "\032\016\n\014UpdateByFill\032\242\001\n\013UpdateByEma\022E\n\007opti"
  "ons\030\001 \001(\01324.io.deephaven.proto.backplane"
  ".grpc.UpdateByEmOptions\022L\n\014window_scale\030"
  "\002 \001(\01326.io.deephaven.proto.backplane.grp"
  "c.UpdateByWindowScale\032\242\001\n\013UpdateByEms\022E\n"
  "\007options\030\001 \001(\01324.io.deephaven.proto.back"
  "plane.grpc.UpdateByEmOptions\022L\n\014window_s"
  "cale\030\002 \001(\01326.io.deephaven.proto.backplan"
  "e.grpc.UpdateByWindowScale\032\244\001\n\rUpdateByE"
  "mMin\022E\n\007options\030\001 \001(\01324.io.deephaven.pro"
  "to.backplane.grpc.UpdateByEmOptions\022L\n\014w"
  "indow_scale\030\002 \001(\01326.io.deephaven.proto.b"
  "ackplane.grpc.UpdateByWindowScale\032\244\001\n\rUp"
  "dateByEmMax\022E\n\007options\030\001 \001(\01324.io.deepha"
  "ven.proto.backplane.grpc.UpdateByEmOptio"
  "ns\022L\n\014window_scale\030\002 \001(\01326.io.deephaven."
  "proto.backplane.grpc.UpdateByWindowScale"
  "\032\244\001\n\rUpdateByEmStd\022E\n\007options\030\001 \001(\01324.io"
  ".deephaven.proto.backplane.grpc.UpdateBy"
  "EmOptions\022L\n\014window_scale\030\002 \001(\01326.io.dee"
  "phaven.proto.backplane.grpc.UpdateByWind"
  "owScale\032Y\n\rUpdateByDelta\022H\n\007options\030\001 \001("
  "\01327.io.deephaven.proto.backplane.grpc.Up"
  "dateByDeltaOptions\032\300\001\n\022UpdateByRollingSu"
  "m\022T\n\024reverse_window_scale\030\001 \001(\01326.io.dee"
  "phaven.proto.backplane.grpc.UpdateByWind"
  "owScale\022T\n\024forward_window_scale\030\002 \001(\01326."
  "io.deephaven.proto.backplane.grpc.Update"
  "ByWindowScale\032\302\001\n\024UpdateByRollingGroup\022T"
  "\n\024reverse_window_scale\030\001 \001(\01326.io.deepha"
  "ven.proto.backplane.grpc.UpdateByWindowS"
  "cale\022T\n\024forward_window_scale\030\002 \001(\01326.io."
  "deephaven.proto.backplane.grpc.UpdateByW"
  "indowScale\032\300\001\n\022UpdateByRollingAvg\022T\n\024rev"
  "erse_window_scale\030\001 \001(\01326.io.deephaven.p"
  "roto.backplane.grpc.UpdateByWindowScale\022"
  "T\n\024forward_window_scale\030\002 \001(\01326.io.deeph"
  "aven.proto.backplane.grpc.UpdateByWindow"
  "Scale\032\300\001\n\022UpdateByRollingMin\022T\n\024reverse_"
  "window_scale\030\001 \001(\01326.io.deephaven.proto."
  "backplane.grpc.UpdateByWindowScale\022T\n\024fo"
  "rward_window_scale\030\002 \001(\01326.io.deephaven."
  "proto.backplane.grpc.UpdateByWindowScale"
  "\032\300\001\n\022UpdateByRollingMax\022T\n\024reverse_windo"
  "w_scale\030\001 \001(\01326.io.deephaven.proto.backp"
  "lane.grpc.UpdateByWindowScale\022T\n\024forward"
  "_window_scale\030\002 \001(\01326.io.deephaven.proto"
  ".backplane.grpc.UpdateByWindowScale\032\304\001\n\026"
  "UpdateByRollingProduct\022T\n\024reverse_window"
  "_scale\030\001 \001(\01326.io.deephaven.proto.backpl"
  "ane.grpc.UpdateByWindowScale\022T\n\024forward_"
  "window_scale\030\002 \001(\01326.io.deephaven.proto."
  "backplane.grpc.UpdateByWindowScale\032\302\001\n\024U"
  "pdateByRollingCount\022T\n\024reverse_window_sc"
  "ale\030\001 \001(\01326.io.deephaven.proto.backplane"
  ".grpc.UpdateByWindowScale\022T\n\024forward_win"
  "dow_scale\030\002 \001(\01326.io.deephaven.proto.bac"
  "kplane.grpc.UpdateByWindowScale\032\300\001\n\022Upda"
  "teByRollingStd\022T\n\024reverse_window_scale\030\001"
  " \001(\01326.io.deephaven.proto.backplane.grpc"
  ".UpdateByWindowScale\022T\n\024forward_window_s"
  "cale\030\002 \001(\01326.io.deephaven.proto.backplan"
  "e.grpc.UpdateByWindowScale\032\330\001\n\023UpdateByR"
  "ollingWAvg\022T\n\024reverse_window_scale\030\001 \001(\013"
  "26.io.deephaven.proto.backplane.grpc.Upd"
  "ateByWindowScale\022T\n\024forward_window_scale"
  "\030\002 \001(\01326.io.deephaven.proto.backplane.gr"
  "pc.UpdateByWindowScale\022\025\n\rweight_column\030"
  "\003 \001(\t\032\352\001\n\026UpdateByRollingFormula\022T\n\024reve"
  "rse_window_scale\030\001 \001(\01326.io.deephaven.pr"
  "oto.backplane.grpc.UpdateByWindowScale\022T"
  "\n\024forward_window_scale\030\002 \001(\01326.io.deepha"
  "ven.proto.backplane.grpc.UpdateByWindowS"
  "cale\022\017\n\007formula\030\003 \001(\t\022\023\n\013param_token\030\004 \001"
  "(\tB\006\n\004typeB\006\n\004type\"\261\001\n\025SelectDistinctReq"
  "uest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.p"
  "roto.backplane.grpc.Ticket\022D\n\tsource_id\030"
  "\002 \001(\01321.io.deephaven.proto.backplane.grp"
  "c.TableReference\022\024\n\014column_names\030\003 \003(\t\"\256"
  "\001\n\022DropColumnsRequest\022<\n\tresult_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.pr"
  "oto.backplane.grpc.TableReference\022\024\n\014col"
  "umn_names\030\003 \003(\t\"\265\001\n\036UnstructuredFilterTa"
  "bleRequest\022<\n\tresult_id\030\001 \001(\0132).io.deeph"
  "aven.proto.backplane.grpc.Ticket\022D\n\tsour"
  "ce_id\030\002 \001(\01321.io.deephaven.proto.backpla"
  "ne.grpc.TableReference\022\017\n\007filters\030\003 \003(\t\""
  "\255\001\n\021HeadOrTailRequest\022<\n\tresult_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.pr"
  "oto.backplane.grpc.TableReference\022\024\n\010num"
  "_rows\030\003 \001(\022B\0020\001\"\316\001\n\023HeadOrTailByRequest\022"
  "<\n\tresult_id\030\001 \001(\0132).io.deephaven.proto."
  "backplane.grpc.Ticket\022D\n\tsource_id\030\002 \001(\013"
  "21.io.deephaven.proto.backplane.grpc.Tab"
  "leReference\022\024\n\010num_rows\030\003 \001(\022B\0020\001\022\035\n\025gro"
  "up_by_column_specs\030\004 \003(\t\"\303\001\n\016UngroupRequ"
  "est\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.pr"
  "oto.backplane.grpc.Ticket\022D\n\tsource_id\030\002"
  " \001(\01321.io.deephaven.proto.backplane.grpc"
  ".TableReference\022\021\n\tnull_fill\030\003 \001(\010\022\032\n\022co"
  "lumns_to_ungroup\030\004 \003(\t\"\255\001\n\022MergeTablesRe"
  "quest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven."
  "proto.backplane.grpc.Ticket\022E\n\nsource_id"
  "s\030\002 \003(\01321.io.deephaven.proto.backplane.g"
  "rpc.TableReference\022\022\n\nkey_column\030\003 \001(\t\"\232"
  "\001\n\024SnapshotTableRequest\022<\n\tresult_id\030\001 \001"
  "(\0132).io.deephaven.proto.backplane.grpc.T"
  "icket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven."
  "proto.backplane.grpc.TableReference\"\261\002\n\030"
  "SnapshotWhenTableRequest\022<\n\tresult_id\030\001 "
  "\001(\0132).io.deephaven.proto.backplane.grpc."
  "Ticket\022B\n\007base_id\030\002 \001(\01321.io.deephaven.p"
  "roto.backplane.grpc.TableReference\022E\n\ntr"
  "igger_id\030\003 \001(\01321.io.deephaven.proto.back"
  "plane.grpc.TableReference\022\017\n\007initial\030\004 \001"
  "(\010\022\023\n\013incremental\030\005 \001(\010\022\017\n\007history\030\006 \001(\010"
  "\022\025\n\rstamp_columns\030\007 \003(\t\"\247\002\n\026CrossJoinTab"
  "lesRequest\022<\n\tresult_id\030\001 \001(\0132).io.deeph"
  "aven.proto.backplane.grpc.Ticket\022B\n\007left"
  "_id\030\002 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022C\n\010right_id\030\003 \001(\01321"
  ".io.deephaven.proto.backplane.grpc.Table"
  "Reference\022\030\n\020columns_to_match\030\004 \003(\t\022\026\n\016c"
  "olumns_to_add\030\005 \003(\t\022\024\n\014reserve_bits\030\006 \001("
  "\005\"\223\002\n\030NaturalJoinTablesRequest\022<\n\tresult"
  "_id\030\001 \001(\0132).io.deephaven.proto.backplane"
  ".grpc.Ticket\022B\n\007left_id\030\002 \001(\01321.io.deeph"
  "aven.proto.backplane.grpc.TableReference"
  "\022C\n\010right_id\030\003 \001(\01321.io.deephaven.proto."
  "backplane.grpc.TableReference\022\030\n\020columns"
  "_to_match\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\""
  "\221\002\n\026ExactJoinTablesRequest\022<\n\tresult_id\030"
  "\001 \001(\0132).io.deephaven.proto.backplane.grp"
  "c.Ticket\022B\n\007left_id\030\002 \001(\01321.io.deephaven"
  ".proto.backplane.grpc.TableReference\022C\n\010"
  "right_id\030\003 \001(\01321.io.deephaven.proto.back"
  "plane.grpc.TableReference\022\030\n\020columns_to_"
  "match\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\"\220\002\n\025"
  "LeftJoinTablesRequest\022<\n\tresult_id\030\001 \001(\013"
  "2).io.deephaven.proto.backplane.grpc.Tic"
  "ket\022B\n\007left_id\030\002 \001(\01321.io.deephaven.prot"
  "o.backplane.grpc.TableReference\022C\n\010right"
  "_id\030\003 \001(\01321.io.deephaven.proto.backplane"
  ".grpc.TableReference\022\030\n\020columns_to_match"
  "\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\"\321\003\n\025AsOfJ"
  "oinTablesRequest\022<\n\tresult_id\030\001 \001(\0132).io"
  ".deephaven.proto.backplane.grpc.Ticket\022B"
  "\n\007left_id\030\002 \001(\01321.io.deephaven.proto.bac"
  "kplane.grpc.TableReference\022C\n\010right_id\030\003"
  " \001(\01321.io.deephaven.proto.backplane.grpc"
  ".TableReference\022\030\n\020columns_to_match\030\004 \003("
  "\t\022\026\n\016columns_to_add\030\005 \003(\t\022\\\n\020as_of_match"
  "_rule\030\007 \001(\0162B.io.deephaven.proto.backpla"
  "ne.grpc.AsOfJoinTablesRequest.MatchRule\""
  "]\n\tMatchRule\022\023\n\017LESS_THAN_EQUAL\020\000\022\r\n\tLES"
  "S_THAN\020\001\022\026\n\022GREATER_THAN_EQUAL\020\002\022\020\n\014GREA"
  "TER_THAN\020\003\032\002\030\001:\002\030\001\"\246\002\n\022AjRajTablesReques"
  "t\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.prot"
  "o.backplane.grpc.Ticket\022B\n\007left_id\030\002 \001(\013"
  "21.io.deephaven.proto.backplane.grpc.Tab"
  "leReference\022C\n\010right_id\030\003 \001(\01321.io.deeph"
  "aven.proto.backplane.grpc.TableReference"
  "\022\033\n\023exact_match_columns\030\004 \003(\t\022\024\n\014as_of_c"
  "olumn\030\005 \001(\t\022\026\n\016columns_to_add\030\006 \003(\t\"\313\006\n\026"
  "RangeJoinTablesRequest\022<\n\tresult_id\030\001 \001("
  "\0132).io.deephaven.proto.backplane.grpc.Ti"
  "cket\022B\n\007left_id\030\002 \001(\01321.io.deephaven.pro"
  "to.backplane.grpc.TableReference\022C\n\010righ"
  "t_id\030\003 \001(\01321.io.deephaven.proto.backplan"
  "e.grpc.TableReference\022\033\n\023exact_match_col"
  "umns\030\004 \003(\t\022\031\n\021left_start_column\030\005 \001(\t\022b\n"
  "\020range_start_rule\030\006 \001(\0162H.io.deephaven.p"
  "roto.backplane.grpc.RangeJoinTablesReque"
  "st.RangeStartRule\022\032\n\022right_range_column\030"
  "\007 \001(\t\022^\n\016range_end_rule\030\010 \001(\0162F.io.deeph"
  "aven.proto.backplane.grpc.RangeJoinTable"
  "sRequest.RangeEndRule\022\027\n\017left_end_column"
  "\030\t \001(\t\022D\n\014aggregations\030\n \003(\0132..io.deepha"
  "ven.proto.backplane.grpc.Aggregation\"v\n\016"
  "RangeStartRule\022\025\n\021START_UNSPECIFIED\020\000\022\r\n"
  "\tLESS_THAN\020\001\022\026\n\022LESS_THAN_OR_EQUAL\020\002\022&\n\""
  "LESS_THAN_OR_EQUAL_ALLOW_PRECEDING\020\003\"{\n\014"
  "RangeEndRule\022\023\n\017END_UNSPECIFIED\020\000\022\020\n\014GRE"
  "ATER_THAN\020\001\022\031\n\025GREATER_THAN_OR_EQUAL\020\002\022)"
  "\n%GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING\020"
  "\003\"\376\004\n\025ComboAggregateRequest\022<\n\tresult_id"
  "\030\001 \001(\0132).io.deephaven.proto.backplane.gr"
  "pc.Ticket\022D\n\tsource_id\030\002 \001(\01321.io.deepha"
  "ven.proto.backplane.grpc.TableReference\022"
  "V\n\naggregates\030\003 \003(\0132B.io.deephaven.proto"
  ".backplane.grpc.ComboAggregateRequest.Ag"
  "gregate\022\030\n\020group_by_columns\030\004 \003(\t\022\023\n\013for"
  "ce_combo\030\005 \001(\010\032\255\001\n\tAggregate\022N\n\004type\030\001 \001"
  "(\0162@.io.deephaven.proto.backplane.grpc.C"
  "omboAggregateRequest.AggType\022\023\n\013match_pa"
  "irs\030\002 \003(\t\022\023\n\013column_name\030\003 \001(\t\022\022\n\npercen"
  "tile\030\004 \001(\001\022\022\n\navg_median\030\005 \001(\010\"\245\001\n\007AggTy"
  "pe\022\007\n\003SUM\020\000\022\013\n\007ABS_SUM\020\001\022\t\n\005GROUP\020\002\022\007\n\003A"
  "VG\020\003\022\t\n\005COUNT\020\004\022\t\n\005FIRST\020\005\022\010\n\004LAST\020\006\022\007\n\003"
  "MIN\020\007\022\007\n\003MAX\020\010\022\n\n\006MEDIAN\020\t\022\016\n\nPERCENTILE"
  "\020\n\022\007\n\003STD\020\013\022\007\n\003VAR\020\014\022\020\n\014WEIGHTED_AVG\020\r:\002"
  "\030\001\"\355\001\n\023AggregateAllRequest\022<\n\tresult_id\030"
  "\001 \001(\0132).io.deephaven.proto.backplane.grp"
  "c.Ticket\022D\n\tsource_id\030\002 \001(\01321.io.deephav"
  "en.proto.backplane.grpc.TableReference\0228"
  "\n\004spec\030\003 \001(\0132*.io.deephaven.proto.backpl"
  "ane.grpc.AggSpec\022\030\n\020group_by_columns\030\004 \003"
  "(\t\"\327\027\n\007AggSpec\022K\n\007abs_sum\030\001 \001(\01328.io.dee"
  "phaven.proto.backplane.grpc.AggSpec.AggS"
  "pecAbsSumH\000\022i\n\026approximate_percentile\030\002 "
  "\001(\0132G.io.deephaven.proto.backplane.grpc."
  "AggSpec.AggSpecApproximatePercentileH\000\022D"
  "\n\003avg\030\003 \001(\01325.io.deephaven.proto.backpla"
  "ne.grpc.AggSpec.AggSpecAvgH\000\022Y\n\016count_di"
  "stinct\030\004 \001(\0132\?.io.deephaven.proto.backpl"
  "ane.grpc.AggSpec.AggSpecCountDistinctH\000\022"
  "N\n\010distinct\030\005 \001(\0132:.io.deephaven.proto.b"
  "ackplane.grpc.AggSpec.AggSpecDistinctH\000\022"
  "H\n\005first\030\006 \001(\01327.io.deephaven.proto.back"
  "plane.grpc.AggSpec.AggSpecFirstH\000\022L\n\007for"
  "mula\030\007 \001(\01329.io.deephaven.proto.backplan"
  "e.grpc.AggSpec.AggSpecFormulaH\000\022J\n\006freez"
  "e\030\010 \001(\01328.io.deephaven.proto.backplane.g"
  "rpc.AggSpec.AggSpecFreezeH\000\022H\n\005group\030\t \001"
  "(\01327.io.deephaven.proto.backplane.grpc.A"
  "ggSpec.AggSpecGroupH\000\022F\n\004last\030\n \001(\01326.io"
  ".deephaven.proto.backplane.grpc.AggSpec."
  "AggSpecLastH\000\022D\n\003max\030\013 \001(\01325.io.deephave"
  "n.proto.backplane.grpc.AggSpec.AggSpecMa"
  "xH\000\022J\n\006median\030\014 \001(\01328.io.deephaven.proto"
  ".backplane.grpc.AggSpec.AggSpecMedianH\000\022"
  "D\n\003min\030\r \001(\01325.io.deephaven.proto.backpl"
  "ane.grpc.AggSpec.AggSpecMinH\000\022R\n\npercent"
  "ile\030\016 \001(\0132<.io.deephaven.proto.backplane"
  ".grpc.AggSpec.AggSpecPercentileH\000\022P\n\014sor"
  "ted_first\030\017 \001(\01328.io.deephaven.proto.bac"
  "kplane.grpc.AggSpec.AggSpecSortedH\000\022O\n\013s"
  "orted_last\030\020 \001(\01328.io.deephaven.proto.ba"
  "ckplane.grpc.AggSpec.AggSpecSortedH\000\022D\n\003"
  "std\030\021 \001(\01325.io.deephaven.proto.backplane"
  ".grpc.AggSpec.AggSpecStdH\000\022D\n\003sum\030\022 \001(\0132"
  "5.io.deephaven.proto.backplane.grpc.AggS"
  "pec.AggSpecSumH\000\022M\n\010t_digest\030\023 \001(\01329.io."
  "deephaven.proto.backplane.grpc.AggSpec.A"
  "ggSpecTDigestH\000\022J\n\006unique\030\024 \001(\01328.io.dee"
  "phaven.proto.backplane.grpc.AggSpec.AggS"
  "pecUniqueH\000\022R\n\014weighted_avg\030\025 \001(\0132:.io.d"
  "eephaven.proto.backplane.grpc.AggSpec.Ag"
  "gSpecWeightedH\000\022R\n\014weighted_sum\030\026 \001(\0132:."
  "io.deephaven.proto.backplane.grpc.AggSpe"
  "c.AggSpecWeightedH\000\022D\n\003var\030\027 \001(\01325.io.de"
  "ephaven.proto.backplane.grpc.AggSpec.Agg"
  "SpecVarH\000\032\\\n\034AggSpecApproximatePercentil"
  "e\022\022\n\npercentile\030\001 \001(\001\022\030\n\013compression\030\002 \001"
  "(\001H\000\210\001\001B\016\n\014_compression\032+\n\024AggSpecCountD"
  "istinct\022\023\n\013count_nulls\030\001 \001(\010\032(\n\017AggSpecD"
  "istinct\022\025\n\rinclude_nulls\030\001 \001(\010\0326\n\016AggSpe"
  "cFormula\022\017\n\007formula\030\001 \001(\t\022\023\n\013param_token"
  "\030\002 \001(\t\032/\n\rAggSpecMedian\022\036\n\026average_evenl"
  "y_divided\030\001 \001(\010\032G\n\021AggSpecPercentile\022\022\n\n"
  "percentile\030\001 \001(\001\022\036\n\026average_evenly_divid"
  "ed\030\002 \001(\010\032`\n\rAggSpecSorted\022O\n\007columns\030\001 \003"
  "(\0132>.io.deephaven.proto.backplane.grpc.A"
  "ggSpec.AggSpecSortedColumn\032*\n\023AggSpecSor"
  "tedColumn\022\023\n\013column_name\030\001 \001(\t\032:\n\016AggSpe"
  "cTDigest\022\030\n\013compression\030\001 \001(\001H\000\210\001\001B\016\n\014_c"
  "ompression\032\210\001\n\rAggSpecUnique\022\025\n\rinclude_"
  "nulls\030\001 \001(\010\022`\n\023non_unique_sentinel\030\002 \001(\013"
  "2C.io.deephaven.proto.backplane.grpc.Agg"
  "Spec.AggSpecNonUniqueSentinel\032\265\002\n\030AggSpe"
  "cNonUniqueSentinel\022B\n\nnull_value\030\001 \001(\0162,"
  ".io.deephaven.proto.backplane.grpc.NullV"
  "alueH\000\022\026\n\014string_value\030\002 \001(\tH\000\022\023\n\tint_va"
  "lue\030\003 \001(\021H\000\022\030\n\nlong_value\030\004 \001(\022B\0020\001H\000\022\025\n"
  "\013float_value\030\005 \001(\002H\000\022\026\n\014double_value\030\006 \001"
  "(\001H\000\022\024\n\nbool_value\030\007 \001(\010H\000\022\024\n\nbyte_value"
  "\030\010 \001(\021H\000\022\025\n\013short_value\030\t \001(\021H\000\022\024\n\nchar_"
  "value\030\n \001(\021H\000B\006\n\004type\032(\n\017AggSpecWeighted"
  "\022\025\n\rweight_column\030\001 \001(\t\032\017\n\rAggSpecAbsSum"
  "\032\014\n\nAggSpecAvg\032\016\n\014AggSpecFirst\032\017\n\rAggSpe"
  "cFreeze\032\016\n\014AggSpecGroup\032\r\n\013AggSpecLast\032\014"
  "\n\nAggSpecMax\032\014\n\nAggSpecMin\032\014\n\nAggSpecStd"
  "\032\014\n\nAggSpecSum\032\014\n\nAggSpecVarB\006\n\004type\"\334\002\n"
  "\020AggregateRequest\022<\n\tresult_id\030\001 \001(\0132).i"
  "o.deephaven.proto.backplane.grpc.Ticket\022"
  "D\n\tsource_id\030\002 \001(\01321.io.deephaven.proto."
  "backplane.grpc.TableReference\022L\n\021initial"
  "_groups_id\030\003 \001(\01321.io.deephaven.proto.ba"
  "ckplane.grpc.TableReference\022\026\n\016preserve_"
  "empty\030\004 \001(\010\022D\n\014aggregations\030\005 \003(\0132..io.d"
  "eephaven.proto.backplane.grpc.Aggregatio"
  "n\022\030\n\020group_by_columns\030\006 \003(\t\"\323\005\n\013Aggregat"
  "ion\022T\n\007columns\030\001 \001(\0132A.io.deephaven.prot"
  "o.backplane.grpc.Aggregation.Aggregation"
  "ColumnsH\000\022P\n\005count\030\002 \001(\0132\?.io.deephaven."
  "proto.backplane.grpc.Aggregation.Aggrega"
  "tionCountH\000\022Y\n\rfirst_row_key\030\003 \001(\0132@.io."
  "deephaven.proto.backplane.grpc.Aggregati"
  "on.AggregationRowKeyH\000\022X\n\014last_row_key\030\004"
  " \001(\0132@.io.deephaven.proto.backplane.grpc"
  ".Aggregation.AggregationRowKeyH\000\022X\n\tpart"
  "ition\030\005 \001(\0132C.io.deephaven.proto.backpla"
  "ne.grpc.Aggregation.AggregationPartition"
  "H\000\032c\n\022AggregationColumns\0228\n\004spec\030\001 \001(\0132*"
  ".io.deephaven.proto.backplane.grpc.AggSp"
  "ec\022\023\n\013match_pairs\030\002 \003(\t\032\'\n\020AggregationCo"
  "unt\022\023\n\013column_name\030\001 \001(\t\032(\n\021AggregationR"
  "owKey\022\023\n\013column_name\030\001 \001(\t\032M\n\024Aggregatio"
  "nPartition\022\023\n\013column_name\030\001 \001(\t\022 \n\030inclu"
  "de_group_by_columns\030\002 \001(\010B\006\n\004type\"\341\001\n\016So"
  "rtDescriptor\022\023\n\013column_name\030\001 \001(\t\022\023\n\013is_"
  "absolute\030\002 \001(\010\022R\n\tdirection\030\003 \001(\0162\?.io.d"
  "eephaven.proto.backplane.grpc.SortDescri"
  "ptor.SortDirection\"Q\n\rSortDirection\022\013\n\007U"
  "NKNOWN\020\000\022\027\n\nDESCENDING\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tASC"
  "ENDING\020\001\022\013\n\007REVERSE\020\002\"\330\001\n\020SortTableReque"
  "st\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.pro"
  "to.backplane.grpc.Ticket\022D\n\tsource_id\030\002 "
  "\001(\01321.io.deephaven.proto.backplane.grpc."
  "TableReference\022@\n\005sorts\030\003 \003(\01321.io.deeph"
  "aven.proto.backplane.grpc.SortDescriptor"
  "\"\327\001\n\022FilterTableRequest\022<\n\tresult_id\030\001 \001"
  "(\0132).io.deephaven.proto.backplane.grpc.T"
  "icket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven."
  "proto.backplane.grpc.TableReference\022=\n\007f"
  "ilters\030\003 \003(\0132,.io.deephaven.proto.backpl"
  "ane.grpc.Condition\"\371\001\n\016SeekRowRequest\022<\n"
  "\tsource_id\030\001 \001(\0132).io.deephaven.proto.ba"
  "ckplane.grpc.Ticket\022\030\n\014starting_row\030\002 \001("
  "\022B\0020\001\022\023\n\013column_name\030\003 \001(\t\022>\n\nseek_value"
  "\030\004 \001(\0132*.io.deephaven.proto.backplane.gr"
  "pc.Literal\022\023\n\013insensitive\030\005 \001(\010\022\020\n\010conta"
  "ins\030\006 \001(\010\022\023\n\013is_backward\030\007 \001(\010\")\n\017SeekRo"
  "wResponse\022\026\n\nresult_row\030\001 \001(\022B\0020\001\" \n\tRef"
  "erence\022\023\n\013column_name\030\001 \001(\t\"\221\001\n\007Literal\022"
  "\026\n\014string_value\030\001 \001(\tH\000\022\026\n\014double_value\030"
  "\002 \001(\001H\000\022\024\n\nbool_value\030\003 \001(\010H\000\022\030\n\nlong_va"
  "lue\030\004 \001(\022B\0020\001H\000\022\035\n\017nano_time_value\030\005 \001(\022"
  "B\0020\001H\000B\007\n\005value\"\221\001\n\005Value\022A\n\treference\030\001"
  " \001(\0132,.io.deephaven.proto.backplane.grpc"
  ".ReferenceH\000\022=\n\007literal\030\002 \001(\0132*.io.deeph"
  "aven.proto.backplane.grpc.LiteralH\000B\006\n\004d"
  "ata\"\274\005\n\tCondition\022>\n\003and\030\001 \001(\0132/.io.deep"
  "haven.proto.backplane.grpc.AndConditionH"
  "\000\022<\n\002or\030\002 \001(\0132..io.deephaven.proto.backp"
  "lane.grpc.OrConditionH\000\022>\n\003not\030\003 \001(\0132/.i"
  "o.deephaven.proto.backplane.grpc.NotCond"
  "itionH\000\022F\n\007compare\030\004 \001(\01323.io.deephaven."
  "proto.backplane.grpc.CompareConditionH\000\022"
  "<\n\002in\030\005 \001(\0132..io.deephaven.proto.backpla"
  "ne.grpc.InConditionH\000\022D\n\006invoke\030\006 \001(\01322."
  "io.deephaven.proto.backplane.grpc.Invoke"
  "ConditionH\000\022E\n\007is_null\030\007 \001(\01322.io.deepha"
  "ven.proto.backplane.grpc.IsNullCondition"
  "H\000\022F\n\007matches\030\010 \001(\01323.io.deephaven.proto"
  ".backplane.grpc.MatchesConditionH\000\022H\n\010co"
  "ntains\030\t \001(\01324.io.deephaven.proto.backpl"
  "ane.grpc.ContainsConditionH\000\022D\n\006search\030\n"
  " \001(\01322.io.deephaven.proto.backplane.grpc"
  ".SearchConditionH\000B\006\n\004data\"M\n\014AndConditi"
  "on\022=\n\007filters\030\001 \003(\0132,.io.deephaven.proto"
  ".backplane.grpc.Condition\"L\n\013OrCondition"
  "\022=\n\007filters\030\001 \003(\0132,.io.deephaven.proto.b"
  "ackplane.grpc.Condition\"L\n\014NotCondition\022"
  "<\n\006filter\030\001 \001(\0132,.io.deephaven.proto.bac"
  "kplane.grpc.Condition\"\254\003\n\020CompareConditi"
  "on\022W\n\toperation\030\001 \001(\0162D.io.deephaven.pro"
  "to.backplane.grpc.CompareCondition.Compa"
  "reOperation\022L\n\020case_sensitivity\030\002 \001(\01622."
  "io.deephaven.proto.backplane.grpc.CaseSe"
  "nsitivity\0225\n\003lhs\030\003 \001(\0132(.io.deephaven.pr"
  "oto.backplane.grpc.Value\0225\n\003rhs\030\004 \001(\0132(."
  "io.deephaven.proto.backplane.grpc.Value\""
  "\202\001\n\020CompareOperation\022\r\n\tLESS_THAN\020\000\022\026\n\022L"
  "ESS_THAN_OR_EQUAL\020\001\022\020\n\014GREATER_THAN\020\002\022\031\n"
  "\025GREATER_THAN_OR_EQUAL\020\003\022\n\n\006EQUALS\020\004\022\016\n\n"
  "NOT_EQUALS\020\005\"\225\002\n\013InCondition\0228\n\006target\030\001"
  " \001(\0132(.io.deephaven.proto.backplane.grpc"
  ".Value\022<\n\ncandidates\030\002 \003(\0132(.io.deephave"
  "n.proto.backplane.grpc.Value\022L\n\020case_sen"
  "sitivity\030\003 \001(\01622.io.deephaven.proto.back"
  "plane.grpc.CaseSensitivity\022@\n\nmatch_type"
  "\030\004 \001(\0162,.io.deephaven.proto.backplane.gr"
  "pc.MatchType\"\230\001\n\017InvokeCondition\022\016\n\006meth"
  "od\030\001 \001(\t\0228\n\006target\030\002 \001(\0132(.io.deephaven."
  "proto.backplane.grpc.Value\022;\n\targuments\030"
  "\003 \003(\0132(.io.deephaven.proto.backplane.grp"
  "c.Value\"R\n\017IsNullCondition\022\?\n\treference\030"
  "\001 \001(\0132,.io.deephaven.proto.backplane.grp"
  "c.Reference\"\362\001\n\020MatchesCondition\022\?\n\trefe"
  "rence\030\001 \001(\0132,.io.deephaven.proto.backpla"
  "ne.grpc.Reference\022\r\n\005regex\030\002 \001(\t\022L\n\020case"
  "_sensitivity\030\003 \001(\01622.io.deephaven.proto."
  "backplane.grpc.CaseSensitivity\022@\n\nmatch_"
  "type\030\004 \001(\0162,.io.deephaven.proto.backplan"
  "e.grpc.MatchType\"\373\001\n\021ContainsCondition\022\?"
  "\n\treference\030\001 \001(\0132,.io.deephaven.proto.b"
  "ackplane.grpc.Reference\022\025\n\rsearch_string"
  "\030\002 \001(\t\022L\n\020case_sensitivity\030\003 \001(\01622.io.de"
  "ephaven.proto.backplane.grpc.CaseSensiti"
  "vity\022@\n\nmatch_type\030\004 \001(\0162,.io.deephaven."
  "proto.backplane.grpc.MatchType\"s\n\017Search"
  "Condition\022\025\n\rsearch_string\030\001 \001(\t\022I\n\023opti"
  "onal_references\030\002 \003(\0132,.io.deephaven.pro"
  "to.backplane.grpc.Reference\"\224\001\n\016FlattenR"
  "equest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven"
  ".proto.backplane.grpc.Ticket\022D\n\tsource_i"
  "d\030\002 \001(\01321.io.deephaven.proto.backplane.g"
  "rpc.TableReference\"\226\001\n\020MetaTableRequest\022"
  "<\n\tresult_id\030\001 \001(\0132).io.deephaven.proto."
  "backplane.grpc.Ticket\022D\n\tsource_id\030\002 \001(\013"
  "21.io.deephaven.proto.backplane.grpc.Tab"
  "leReference\"\264\003\n\031RunChartDownsampleReques"
  "t\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.prot"
  "o.backplane.grpc.Ticket\022D\n\tsource_id\030\002 \001"
  "(\01321.io.deephaven.proto.backplane.grpc.T"
  "ableReference\022\023\n\013pixel_count\030\003 \001(\005\022Z\n\nzo"
  "om_range\030\004 \001(\0132F.io.deephaven.proto.back"
  "plane.grpc.RunChartDownsampleRequest.Zoo"
  "mRange\022\025\n\rx_column_name\030\005 \001(\t\022\026\n\016y_colum"
  "n_names\030\006 \003(\t\032s\n\tZoomRange\022\037\n\016min_date_n"
  "anos\030\001 \001(\003B\0020\001H\000\210\001\001\022\037\n\016max_date_nanos\030\002 "
  "\001(\003B\0020\001H\001\210\001\001B\021\n\017_min_date_nanosB\021\n\017_max_"
  "date_nanos\"\340\005\n\027CreateInputTableRequest\022<"
  "\n\tresult_id\030\001 \001(\0132).io.deephaven.proto.b"
  "ackplane.grpc.Ticket\022L\n\017source_table_id\030"
  "\002 \001(\01321.io.deephaven.proto.backplane.grp"
  "c.TableReferenceH\000\022\020\n\006schema\030\003 \001(\014H\000\022W\n\004"
  "kind\030\004 \001(\0132I.io.deephaven.proto.backplan"
  "e.grpc.CreateInputTableRequest.InputTabl"
  "eKind\032\277\003\n\016InputTableKind\022}\n\025in_memory_ap"
  "pend_only\030\001 \001(\0132\\.io.deephaven.proto.bac"
  "kplane.grpc.CreateInputTableRequest.Inpu"
  "tTableKind.InMemoryAppendOnlyH\000\022{\n\024in_me"
  "mory_key_backed\030\002 \001(\0132[.io.deephaven.pro"
  "to.backplane.grpc.CreateInputTableReques"
  "t.InputTableKind.InMemoryKeyBackedH\000\022`\n\005"
  "blink\030\003 \001(\0132O.io.deephaven.proto.backpla"
  "ne.grpc.CreateInputTableRequest.InputTab"
  "leKind.BlinkH\000\032\024\n\022InMemoryAppendOnly\032(\n\021"
  "InMemoryKeyBacked\022\023\n\013key_columns\030\001 \003(\t\032\007"
  "\n\005BlinkB\006\n\004kindB\014\n\ndefinition\"\203\002\n\016WhereI"
  "nRequest\022<\n\tresult_id\030\001 \001(\0132).io.deephav"
  "en.proto.backplane.grpc.Ticket\022B\n\007left_i"
  "d\030\002 \001(\01321.io.deephaven.proto.backplane.g"
  "rpc.TableReference\022C\n\010right_id\030\003 \001(\01321.i"
  "o.deephaven.proto.backplane.grpc.TableRe"
  "ference\022\020\n\010inverted\030\004 \001(\010\022\030\n\020columns_to_"
  "match\030\005 \003(\t\"\352\001\n\027ColumnStatisticsRequest\022"
  "<\n\tresult_id\030\001 \001(\0132).io.deephaven.proto."
  "backplane.grpc.Ticket\022D\n\tsource_id\030\002 \001(\013"
  "21.io.deephaven.proto.backplane.grpc.Tab"
  "leReference\022\023\n\013column_name\030\003 \001(\t\022\037\n\022uniq"
  "ue_value_limit\030\004 \001(\005H\000\210\001\001B\025\n\023_unique_val"
  "ue_limit\"\310\031\n\021BatchTableRequest\022K\n\003ops\030\001 "
  "\003(\0132>.io.deephaven.proto.backplane.grpc."
  "BatchTableRequest.Operation\032\345\030\n\tOperatio"
  "n\022K\n\013empty_table\030\001 \001(\01324.io.deephaven.pr"
  "oto.backplane.grpc.EmptyTableRequestH\000\022I"
  "\n\ntime_table\030\002 \001(\01323.io.deephaven.proto."
  "backplane.grpc.TimeTableRequestH\000\022M\n\014dro"
  "p_columns\030\003 \001(\01325.io.deephaven.proto.bac"
  "kplane.grpc.DropColumnsRequestH\000\022J\n\006upda"
  "te\030\004 \001(\01328.io.deephaven.proto.backplane."
  "grpc.SelectOrUpdateRequestH\000\022O\n\013lazy_upd"
  "ate\030\005 \001(\01328.io.deephaven.proto.backplane"
  ".grpc.SelectOrUpdateRequestH\000\022H\n\004view\030\006 "
  "\001(\01328.io.deephaven.proto.backplane.grpc."
  "SelectOrUpdateRequestH\000\022O\n\013update_view\030\007"
  " \001(\01328.io.deephaven.proto.backplane.grpc"
  ".SelectOrUpdateRequestH\000\022J\n\006select\030\010 \001(\013"
  "28.io.deephaven.proto.backplane.grpc.Sel"
  "ectOrUpdateRequestH\000\022S\n\017select_distinct\030"
  "\t \001(\01328.io.deephaven.proto.backplane.grp"
  "c.SelectDistinctRequestH\000\022G\n\006filter\030\n \001("
  "\01325.io.deephaven.proto.backplane.grpc.Fi"
  "lterTableRequestH\000\022`\n\023unstructured_filte"
  "r\030\013 \001(\0132A.io.deephaven.proto.backplane.g"
  "rpc.UnstructuredFilterTableRequestH\000\022C\n\004"
  "sort\030\014 \001(\01323.io.deephaven.proto.backplan"
  "e.grpc.SortTableRequestH\000\022D\n\004head\030\r \001(\0132"
  "4.io.deephaven.proto.backplane.grpc.Head"
  "OrTailRequestH\000\022D\n\004tail\030\016 \001(\01324.io.deeph"
  "aven.proto.backplane.grpc.HeadOrTailRequ"
  "estH\000\022I\n\007head_by\030\017 \001(\01326.io.deephaven.pr"
  "oto.backplane.grpc.HeadOrTailByRequestH\000"
  "\022I\n\007tail_by\030\020 \001(\01326.io.deephaven.proto.b"
  "ackplane.grpc.HeadOrTailByRequestH\000\022D\n\007u"
  "ngroup\030\021 \001(\01321.io.deephaven.proto.backpl"
  "ane.grpc.UngroupRequestH\000\022F\n\005merge\030\022 \001(\013"
  "25.io.deephaven.proto.backplane.grpc.Mer"
  "geTablesRequestH\000\022S\n\017combo_aggregate\030\023 \001"
  "(\01328.io.deephaven.proto.backplane.grpc.C"
  "omboAggregateRequestH\000\022D\n\007flatten\030\025 \001(\0132"
  "1.io.deephaven.proto.backplane.grpc.Flat"
  "tenRequestH\000\022\\\n\024run_chart_downsample\030\026 \001"
  "(\0132<.io.deephaven.proto.backplane.grpc.R"
  "unChartDownsampleRequestH\000\022O\n\ncross_join"
  "\030\027 \001(\01329.io.deephaven.proto.backplane.gr"
  "pc.CrossJoinTablesRequestH\000\022S\n\014natural_j"
  "oin\030\030 \001(\0132;.io.deephaven.proto.backplane"
  ".grpc.NaturalJoinTablesRequestH\000\022O\n\nexac"
  "t_join\030\031 \001(\01329.io.deephaven.proto.backpl"
  "ane.grpc.ExactJoinTablesRequestH\000\022M\n\tlef"
  "t_join\030\032 \001(\01328.io.deephaven.proto.backpl"
  "ane.grpc.LeftJoinTablesRequestH\000\022R\n\nas_o"
  "f_join\030\033 \001(\01328.io.deephaven.proto.backpl"
  "ane.grpc.AsOfJoinTablesRequestB\002\030\001H\000\022K\n\013"
  "fetch_table\030\034 \001(\01324.io.deephaven.proto.b"
  "ackplane.grpc.FetchTableRequestH\000\022^\n\025app"
  "ly_preview_columns\030\036 \001(\0132=.io.deephaven."
  "proto.backplane.grpc.ApplyPreviewColumns"
  "RequestH\000\022X\n\022create_input_table\030\037 \001(\0132:."
  "io.deephaven.proto.backplane.grpc.Create"
  "InputTableRequestH\000\022G\n\tupdate_by\030  \001(\01322"
  ".io.deephaven.proto.backplane.grpc.Updat"
  "eByRequestH\000\022E\n\010where_in\030! \001(\01321.io.deep"
  "haven.proto.backplane.grpc.WhereInReques"
  "tH\000\022O\n\raggregate_all\030\" \001(\01326.io.deephave"
  "n.proto.backplane.grpc.AggregateAllReque"
  "stH\000\022H\n\taggregate\030# \001(\01323.io.deephaven.p"
  "roto.backplane.grpc.AggregateRequestH\000\022K"
  "\n\010snapshot\030$ \001(\01327.io.deephaven.proto.ba"
  "ckplane.grpc.SnapshotTableRequestH\000\022T\n\rs"
  "napshot_when\030% \001(\0132;.io.deephaven.proto."
  "backplane.grpc.SnapshotWhenTableRequestH"
  "\000\022I\n\nmeta_table\030& \001(\01323.io.deephaven.pro"
  "to.backplane.grpc.MetaTableRequestH\000\022O\n\n"
  "range_join\030\' \001(\01329.io.deephaven.proto.ba"
  "ckplane.grpc.RangeJoinTablesRequestH\000\022C\n"
  "\002aj\030( \001(\01325.io.deephaven.proto.backplane"
  ".grpc.AjRajTablesRequestH\000\022D\n\003raj\030) \001(\0132"
  "5.io.deephaven.proto.backplane.grpc.AjRa"
  "jTablesRequestH\000\022W\n\021column_statistics\030* "
  "\001(\0132:.io.deephaven.proto.backplane.grpc."
  "ColumnStatisticsRequestH\000B\004\n\002opJ\004\010\024\020\025J\004\010"
  "\035\020\036*b\n\017BadDataBehavior\022#\n\037BAD_DATA_BEHAV"
  "IOR_NOT_SPECIFIED\020\000\022\t\n\005THROW\020\001\022\t\n\005RESET\020"
  "\002\022\010\n\004SKIP\020\003\022\n\n\006POISON\020\004*t\n\024UpdateByNullB"
  "ehavior\022\037\n\033NULL_BEHAVIOR_NOT_SPECIFIED\020\000"
  "\022\022\n\016NULL_DOMINATES\020\001\022\023\n\017VALUE_DOMINATES\020"
  "\002\022\022\n\016ZERO_DOMINATES\020\003*\033\n\tNullValue\022\016\n\nNU"
  "LL_VALUE\020\000*2\n\017CaseSensitivity\022\016\n\nMATCH_C"
  "ASE\020\000\022\017\n\013IGNORE_CASE\020\001*&\n\tMatchType\022\013\n\007R"
  "EGULAR\020\000\022\014\n\010INVERTED\020\0012\2500\n\014TableService\022"
  "\221\001\n GetExportedTableCreationResponse\022).i"
  "o.deephaven.proto.backplane.grpc.Ticket\032"
  "@.io.deephaven.proto.backplane.grpc.Expo"
  "rtedTableCreationResponse\"\000\022\206\001\n\nFetchTab"
  "le\0224.io.deephaven.proto.backplane.grpc.F"
  "etchTableRequest\032@.io.deephaven.proto.ba"
  "ckplane.grpc.ExportedTableCreationRespon"
  "se\"\000\022\230\001\n\023ApplyPreviewColumns\022=.io.deepha"
  "ven.proto.backplane.grpc.ApplyPreviewCol"
  "umnsRequest\032@.io.deephaven.proto.backpla"
  "ne.grpc.ExportedTableCreationResponse\"\000\022"
  "\206\001\n\nEmptyTable\0224.io.deephaven.proto.back"
  "plane.grpc.EmptyTableRequest\032@.io.deepha"
  "ven.proto.backplane.grpc.ExportedTableCr"
  "eationResponse\"\000\022\204\001\n\tTimeTable\0223.io.deep"
  "haven.proto.backplane.grpc.TimeTableRequ"
  "est\032@.io.deephaven.proto.backplane.grpc."
  "ExportedTableCreationResponse\"\000\022\210\001\n\013Drop"
  "Columns\0225.io.deephaven.proto.backplane.g"
  "rpc.DropColumnsRequest\032@.io.deephaven.pr"
  "oto.backplane.grpc.ExportedTableCreation"
  "Response\"\000\022\206\001\n\006Update\0228.io.deephaven.pro"
  "to.backplane.grpc.SelectOrUpdateRequest\032"
  "@.io.deephaven.proto.backplane.grpc.Expo"
  "rtedTableCreationResponse\"\000\022\212\001\n\nLazyUpda"
  "te\0228.io.deephaven.proto.backplane.grpc.S"
  "electOrUpdateRequest\032@.io.deephaven.prot"
  "o.backplane.grpc.ExportedTableCreationRe"
  "sponse\"\000\022\204\001\n\004View\0228.io.deephaven.proto.b"
  "ackplane.grpc.SelectOrUpdateRequest\032@.io"
  ".deephaven.proto.backplane.grpc.Exported"
  "TableCreationResponse\"\000\022\212\001\n\nUpdateView\0228"
  ".io.deephaven.proto.backplane.grpc.Selec"
  "tOrUpdateRequest\032@.io.deephaven.proto.ba"
  "ckplane.grpc.ExportedTableCreationRespon"
  "se\"\000\022\206\001\n\006Select\0228.io.deephaven.proto.bac"
  "kplane.grpc.SelectOrUpdateRequest\032@.io.d"
  "eephaven.proto.backplane.grpc.ExportedTa"
  "bleCreationResponse\"\000\022\202\001\n\010UpdateBy\0222.io."
  "deephaven.proto.backplane.grpc.UpdateByR"
  "equest\032@.io.deephaven.proto.backplane.gr"
  "pc.ExportedTableCreationResponse\"\000\022\216\001\n\016S"
  "electDistinct\0228.io.deephaven.proto.backp"
  "lane.grpc.SelectDistinctRequest\032@.io.dee"
  "phaven.proto.backplane.grpc.ExportedTabl"
  "eCreationResponse\"\000\022\203\001\n\006Filter\0225.io.deep"
  "haven.proto.backplane.grpc.FilterTableRe"
  "quest\032@.io.deephaven.proto.backplane.grp"
  "c.ExportedTableCreationResponse\"\000\022\233\001\n\022Un"
  "structuredFilter\022A.io.deephaven.proto.ba"
  "ckplane.grpc.UnstructuredFilterTableRequ"
  "est\032@.io.deephaven.proto.backplane.grpc."
  "ExportedTableCreationResponse\"\000\022\177\n\004Sort\022"
  "3.io.deephaven.proto.backplane.grpc.Sort"
  "TableRequest\032@.io.deephaven.proto.backpl"
  "ane.grpc.ExportedTableCreationResponse\"\000"
  "\022\200\001\n\004Head\0224.io.deephaven.proto.backplane"
  ".grpc.HeadOrTailRequest\032@.io.deephaven.p"
  "roto.backplane.grpc.ExportedTableCreatio"
  "nResponse\"\000\022\200\001\n\004Tail\0224.io.deephaven.prot"
  "o.backplane.grpc.HeadOrTailRequest\032@.io."
  "deephaven.proto.backplane.grpc.ExportedT"
  "ableCreationResponse\"\000\022\204\001\n\006HeadBy\0226.io.d"
  "eephaven.proto.backplane.grpc.HeadOrTail"
  "ByRequest\032@.io.deephaven.proto.backplane"
  ".grpc.ExportedTableCreationResponse\"\000\022\204\001"
  "\n\006TailBy\0226.io.deephaven.proto.backplane."
  "grpc.HeadOrTailByRequest\032@.io.deephaven."
  "proto.backplane.grpc.ExportedTableCreati"
  "onResponse\"\000\022\200\001\n\007Ungroup\0221.io.deephaven."
  "proto.backplane.grpc.UngroupRequest\032@.io"
  ".deephaven.proto.backplane.grpc.Exported"
  "TableCreationResponse\"\000\022\210\001\n\013MergeTables\022"
  "5.io.deephaven.proto.backplane.grpc.Merg"
  "eTablesRequest\032@.io.deephaven.proto.back"
  "plane.grpc.ExportedTableCreationResponse"
  "\"\000\022\220\001\n\017CrossJoinTables\0229.io.deephaven.pr"
  "oto.backplane.grpc.CrossJoinTablesReques"
  "t\032@.io.deephaven.proto.backplane.grpc.Ex"
  "portedTableCreationResponse\"\000\022\224\001\n\021Natura"
  "lJoinTables\022;.io.deephaven.proto.backpla"
  "ne.grpc.NaturalJoinTablesRequest\032@.io.de"
  "ephaven.proto.backplane.grpc.ExportedTab"
  "leCreationResponse\"\000\022\220\001\n\017ExactJoinTables"
  "\0229.io.deephaven.proto.backplane.grpc.Exa"
  "ctJoinTablesRequest\032@.io.deephaven.proto"
  ".backplane.grpc.ExportedTableCreationRes"
  "ponse\"\000\022\216\001\n\016LeftJoinTables\0228.io.deephave"
  "n.proto.backplane.grpc.LeftJoinTablesReq"
  "uest\032@.io.deephaven.proto.backplane.grpc"
  ".ExportedTableCreationResponse\"\000\022\221\001\n\016AsO"
  "fJoinTables\0228.io.deephaven.proto.backpla"
  "ne.grpc.AsOfJoinTablesRequest\032@.io.deeph"
  "aven.proto.backplane.grpc.ExportedTableC"
  "reationResponse\"\003\210\002\001\022\205\001\n\010AjTables\0225.io.d"
  "eephaven.proto.backplane.grpc.AjRajTable"
  "sRequest\032@.io.deephaven.proto.backplane."
  "grpc.ExportedTableCreationResponse\"\000\022\206\001\n"
  "\tRajTables\0225.io.deephaven.proto.backplan"
  "e.grpc.AjRajTablesRequest\032@.io.deephaven"
  ".proto.backplane.grpc.ExportedTableCreat"
  "ionResponse\"\000\022\220\001\n\017RangeJoinTables\0229.io.d"
  "eephaven.proto.backplane.grpc.RangeJoinT"
  "ablesRequest\032@.io.deephaven.proto.backpl"
  "ane.grpc.ExportedTableCreationResponse\"\000"
  "\022\221\001\n\016ComboAggregate\0228.io.deephaven.proto"
  ".backplane.grpc.ComboAggregateRequest\032@."
  "io.deephaven.proto.backplane.grpc.Export"
  "edTableCreationResponse\"\003\210\002\001\022\212\001\n\014Aggrega"
  "teAll\0226.io.deephaven.proto.backplane.grp"
  "c.AggregateAllRequest\032@.io.deephaven.pro"
  "to.backplane.grpc.ExportedTableCreationR"
  "esponse\"\000\022\204\001\n\tAggregate\0223.io.deephaven.p"
  "roto.backplane.grpc.AggregateRequest\032@.i"
  "o.deephaven.proto.backplane.grpc.Exporte"
  "dTableCreationResponse\"\000\022\207\001\n\010Snapshot\0227."
  "io.deephaven.proto.backplane.grpc.Snapsh"
  "otTableRequest\032@.io.deephaven.proto.back"
  "plane.grpc.ExportedTableCreationResponse"
  "\"\000\022\217\001\n\014SnapshotWhen\022;.io.deephaven.proto"
  ".backplane.grpc.SnapshotWhenTableRequest"
  "\032@.io.deephaven.proto.backplane.grpc.Exp"
  "ortedTableCreationResponse\"\000\022\200\001\n\007Flatten"
  "\0221.io.deephaven.proto.backplane.grpc.Fla"
  "ttenRequest\032@.io.deephaven.proto.backpla"
  "ne.grpc.ExportedTableCreationResponse\"\000\022"
  "\226\001\n\022RunChartDownsample\022<.io.deephaven.pr"
  "oto.backplane.grpc.RunChartDownsampleReq"
  "uest\032@.io.deephaven.proto.backplane.grpc"
  ".ExportedTableCreationResponse\"\000\022\222\001\n\020Cre"
  "ateInputTable\022:.io.deephaven.proto.backp"
  "lane.grpc.CreateInputTableRequest\032@.io.d"
  "eephaven.proto.backplane.grpc.ExportedTa"
  "bleCreationResponse\"\000\022\200\001\n\007WhereIn\0221.io.d"
  "eephaven.proto.backplane.grpc.WhereInReq"
  "uest\032@.io.deephaven.proto.backplane.grpc"
  ".ExportedTableCreationResponse\"\000\022\203\001\n\005Bat"
  "ch\0224.io.deephaven.proto.backplane.grpc.B"
  "atchTableRequest\032@.io.deephaven.proto.ba"
  "ckplane.grpc.ExportedTableCreationRespon"
  "se\"\0000\001\022\231\001\n\024ExportedTableUpdates\022>.io.dee"
  "phaven.proto.backplane.grpc.ExportedTabl"
  "eUpdatesRequest\032=.io.deephaven.proto.bac"
  "kplane.grpc.ExportedTableUpdateMessage\"\000"
  "0\001\022r\n\007SeekRow\0221.io.deephaven.proto.backp"
  "lane.grpc.SeekRowRequest\0322.io.deephaven."
  "proto.backplane.grpc.SeekRowResponse\"\000\022\204"
  "\001\n\tMetaTable\0223.io.deephaven.proto.backpl"
  "ane.grpc.MetaTableRequest\032@.io.deephaven"
  ".proto.backplane.grpc.ExportedTableCreat"
  "ionResponse\"\000\022\231\001\n\027ComputeColumnStatistic"
  "s\022:.io.deephaven.proto.backplane.grpc.Co"
  "lumnStatisticsRequest\032@.io.deephaven.pro"
  "to.backplane.grpc.ExportedTableCreationR"
  "esponse\"\000BAH\001P\001Z;github.com/deephaven/de"
  "ephaven-core/go/internal/proto/tableb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2ftable_2eproto_deps[1] = {
  &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::_pbi::once_flag descriptor_table_deephaven_2fproto_2ftable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2ftable_2eproto = {
    false, false, 34844, descriptor_table_protodef_deephaven_2fproto_2ftable_2eproto,
    "deephaven/proto/table.proto",
    &descriptor_table_deephaven_2fproto_2ftable_2eproto_once, descriptor_table_deephaven_2fproto_2ftable_2eproto_deps, 1, 122,
    schemas, file_default_instances, TableStruct_deephaven_2fproto_2ftable_2eproto::offsets,
    file_level_metadata_deephaven_2fproto_2ftable_2eproto, file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2ftable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_deephaven_2fproto_2ftable_2eproto_getter() {
  return &descriptor_table_deephaven_2fproto_2ftable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2ftable_2eproto(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MathContext_RoundingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[0];
}
bool MathContext_RoundingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MathContext_RoundingMode MathContext::ROUNDING_MODE_NOT_SPECIFIED;
constexpr MathContext_RoundingMode MathContext::UP;
constexpr MathContext_RoundingMode MathContext::DOWN;
constexpr MathContext_RoundingMode MathContext::CEILING;
constexpr MathContext_RoundingMode MathContext::FLOOR;
constexpr MathContext_RoundingMode MathContext::HALF_UP;
constexpr MathContext_RoundingMode MathContext::HALF_DOWN;
constexpr MathContext_RoundingMode MathContext::HALF_EVEN;
constexpr MathContext_RoundingMode MathContext::UNNECESSARY;
constexpr MathContext_RoundingMode MathContext::RoundingMode_MIN;
constexpr MathContext_RoundingMode MathContext::RoundingMode_MAX;
constexpr int MathContext::RoundingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AsOfJoinTablesRequest_MatchRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[1];
}
bool AsOfJoinTablesRequest_MatchRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::LESS_THAN_EQUAL;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::LESS_THAN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::GREATER_THAN_EQUAL;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::GREATER_THAN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::MatchRule_MIN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::MatchRule_MAX;
constexpr int AsOfJoinTablesRequest::MatchRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeJoinTablesRequest_RangeStartRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[2];
}
bool RangeJoinTablesRequest_RangeStartRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::START_UNSPECIFIED;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::LESS_THAN;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::LESS_THAN_OR_EQUAL;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::LESS_THAN_OR_EQUAL_ALLOW_PRECEDING;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::RangeStartRule_MIN;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::RangeStartRule_MAX;
constexpr int RangeJoinTablesRequest::RangeStartRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeJoinTablesRequest_RangeEndRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[3];
}
bool RangeJoinTablesRequest_RangeEndRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::END_UNSPECIFIED;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::GREATER_THAN;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::GREATER_THAN_OR_EQUAL;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::RangeEndRule_MIN;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::RangeEndRule_MAX;
constexpr int RangeJoinTablesRequest::RangeEndRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComboAggregateRequest_AggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[4];
}
bool ComboAggregateRequest_AggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::ABS_SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::GROUP;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::COUNT;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::FIRST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::LAST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MAX;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MEDIAN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::PERCENTILE;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::STD;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::VAR;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::WEIGHTED_AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MAX;
constexpr int ComboAggregateRequest::AggType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortDescriptor_SortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[5];
}
bool SortDescriptor_SortDirection_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SortDescriptor_SortDirection SortDescriptor::UNKNOWN;
constexpr SortDescriptor_SortDirection SortDescriptor::DESCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::ASCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::REVERSE;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MIN;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MAX;
constexpr int SortDescriptor::SortDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompareCondition_CompareOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[6];
}
bool CompareCondition_CompareOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CompareCondition_CompareOperation CompareCondition::LESS_THAN;
constexpr CompareCondition_CompareOperation CompareCondition::LESS_THAN_OR_EQUAL;
constexpr CompareCondition_CompareOperation CompareCondition::GREATER_THAN;
constexpr CompareCondition_CompareOperation CompareCondition::GREATER_THAN_OR_EQUAL;
constexpr CompareCondition_CompareOperation CompareCondition::EQUALS;
constexpr CompareCondition_CompareOperation CompareCondition::NOT_EQUALS;
constexpr CompareCondition_CompareOperation CompareCondition::CompareOperation_MIN;
constexpr CompareCondition_CompareOperation CompareCondition::CompareOperation_MAX;
constexpr int CompareCondition::CompareOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BadDataBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[7];
}
bool BadDataBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateByNullBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[8];
}
bool UpdateByNullBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NullValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[9];
}
bool NullValue_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaseSensitivity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[10];
}
bool CaseSensitivity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[11];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TableReference::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& ticket(const TableReference* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
TableReference::_Internal::ticket(const TableReference* msg) {
  return *msg->_impl_.ref_.ticket_;
}
void TableReference::set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ref();
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket));
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    set_has_ticket();
    _impl_.ref_.ticket_ = ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TableReference.ticket)
}
void TableReference::clear_ticket() {
  if (_internal_has_ticket()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ref_.ticket_;
    }
    clear_has_ref();
  }
}
TableReference::TableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}
TableReference::TableReference(const TableReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ref();
  switch (from.ref_case()) {
    case kTicket: {
      _this->_internal_mutable_ticket()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_ticket());
      break;
    }
    case kBatchOffset: {
      _this->_internal_set_batch_offset(from._internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}

inline void TableReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ref();
}

TableReference::~TableReference() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TableReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ref()) {
    clear_ref();
  }
}

void TableReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableReference::clear_ref() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  switch (ref_case()) {
    case kTicket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ref_.ticket_;
      }
      break;
    }
    case kBatchOffset: {
      // No need to clear
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REF_NOT_SET;
}


void TableReference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ref();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 batch_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_batch_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TableReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
  if (_internal_has_ticket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ticket(this),
        _Internal::ticket(this).GetCachedSize(), target, stream);
  }

  // sint32 batch_offset = 2;
  if (_internal_has_batch_offset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_batch_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TableReference)
  return target;
}

size_t TableReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TableReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ref_case()) {
    // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
    case kTicket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ref_.ticket_);
      break;
    }
    // sint32 batch_offset = 2;
    case kBatchOffset: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableReference::GetClassData() const { return &_class_data_; }


void TableReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableReference*>(&to_msg);
  auto& from = static_cast<const TableReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ref_case()) {
    case kTicket: {
      _this->_internal_mutable_ticket()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
          from._internal_ticket());
      break;
    }
    case kBatchOffset: {
      _this->_internal_set_batch_offset(from._internal_batch_offset());
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableReference::CopyFrom(const TableReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableReference::IsInitialized() const {
  return true;
}

void TableReference::InternalSwap(TableReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ref_, other->_impl_.ref_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[0]);
}

// ===================================================================

class ExportedTableCreationResponse::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& result_id(const ExportedTableCreationResponse* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
ExportedTableCreationResponse::_Internal::result_id(const ExportedTableCreationResponse* msg) {
  return *msg->_impl_.result_id_;
}
ExportedTableCreationResponse::ExportedTableCreationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}
ExportedTableCreationResponse::ExportedTableCreationResponse(const ExportedTableCreationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExportedTableCreationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.schema_header_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.size_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.is_static_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_info().empty()) {
    _this->_impl_.error_info_.Set(from._internal_error_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.schema_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_header().empty()) {
    _this->_impl_.schema_header_.Set(from._internal_schema_header(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.result_id_);
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_static_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.is_static_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}

inline void ExportedTableCreationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_info_){}
    , decltype(_impl_.schema_header_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.is_static_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.schema_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExportedTableCreationResponse::~ExportedTableCreationResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExportedTableCreationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_info_.Destroy();
  _impl_.schema_header_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void ExportedTableCreationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExportedTableCreationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_info_.ClearToEmpty();
  _impl_.schema_header_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_static_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.is_static_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableCreationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info"));
        } else
          goto handle_unusual;
        continue;
      // bytes schema_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_schema_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_static = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 6 [jstype = JS_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExportedTableCreationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error_info = 3;
  if (!this->_internal_error_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_info().data(), static_cast<int>(this->_internal_error_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_info(), target);
  }

  // bytes schema_header = 4;
  if (!this->_internal_schema_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_schema_header(), target);
  }

  // bool is_static = 5;
  if (this->_internal_is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_static(), target);
  }

  // sint64 size = 6 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  return target;
}

size_t ExportedTableCreationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_info = 3;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_info());
  }

  // bytes schema_header = 4;
  if (!this->_internal_schema_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_schema_header());
  }

  // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // sint64 size = 6 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool is_static = 5;
  if (this->_internal_is_static() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportedTableCreationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExportedTableCreationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportedTableCreationResponse::GetClassData() const { return &_class_data_; }


void ExportedTableCreationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExportedTableCreationResponse*>(&to_msg);
  auto& from = static_cast<const ExportedTableCreationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_schema_header().empty()) {
    _this->_internal_set_schema_header(from._internal_schema_header());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_is_static() != 0) {
    _this->_internal_set_is_static(from._internal_is_static());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportedTableCreationResponse::CopyFrom(const ExportedTableCreationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableCreationResponse::IsInitialized() const {
  return true;
}

void ExportedTableCreationResponse::InternalSwap(ExportedTableCreationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_info_, lhs_arena,
      &other->_impl_.error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_header_, lhs_arena,
      &other->_impl_.schema_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.is_static_)
      + sizeof(ExportedTableCreationResponse::_impl_.is_static_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableCreationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[1]);
}

// ===================================================================

class FetchTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FetchTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FetchTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
FetchTableRequest::_Internal::source_id(const FetchTableRequest* msg) {
  return *msg->_impl_.source_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
FetchTableRequest::_Internal::result_id(const FetchTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
void FetchTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
FetchTableRequest::FetchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
}
FetchTableRequest::FetchTableRequest(const FetchTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
}

inline void FetchTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchTableRequest::~FetchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void FetchTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  return target;
}

size_t FetchTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchTableRequest::GetClassData() const { return &_class_data_; }


void FetchTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchTableRequest*>(&to_msg);
  auto& from = static_cast<const FetchTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchTableRequest::CopyFrom(const FetchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchTableRequest::IsInitialized() const {
  return true;
}

void FetchTableRequest::InternalSwap(FetchTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.result_id_)
      + sizeof(FetchTableRequest::_impl_.result_id_)
      - PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[2]);
}

// ===================================================================

class ApplyPreviewColumnsRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const ApplyPreviewColumnsRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const ApplyPreviewColumnsRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::TableReference&
ApplyPreviewColumnsRequest::_Internal::source_id(const ApplyPreviewColumnsRequest* msg) {
  return *msg->_impl_.source_id_;
}
const ::io::deephaven::proto::backplane::grpc::Ticket&
ApplyPreviewColumnsRequest::_Internal::result_id(const ApplyPreviewColumnsRequest* msg) {
  return *msg->_impl_.result_id_;
}
void ApplyPreviewColumnsRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
}
ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(const ApplyPreviewColumnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyPreviewColumnsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
}

inline void ApplyPreviewColumnsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ApplyPreviewColumnsRequest::~ApplyPreviewColumnsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyPreviewColumnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void ApplyPreviewColumnsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyPreviewColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyPreviewColumnsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyPreviewColumnsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  return target;
}

size_t ApplyPreviewColumnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyPreviewColumnsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyPreviewColumnsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyPreviewColumnsRequest::GetClassData() const { return &_class_data_; }


void ApplyPreviewColumnsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyPreviewColumnsRequest*>(&to_msg);
  auto& from = static_cast<const ApplyPreviewColumnsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyPreviewColumnsRequest::CopyFrom(const ApplyPreviewColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPreviewColumnsRequest::IsInitialized() const {
  return true;
}

void ApplyPreviewColumnsRequest::InternalSwap(ApplyPreviewColumnsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.result_id_)
      + sizeof(ApplyPreviewColumnsRequest::_impl_.result_id_)
      - PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyPreviewColumnsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[3]);
}

// ===================================================================

class ExportedTableUpdatesRequest::_Internal {
 public:
};

ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}
ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(const ExportedTableUpdatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ExportedTableUpdatesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportedTableUpdatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportedTableUpdatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableUpdatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[4]);
}

// ===================================================================

class ExportedTableUpdateMessage::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& export_id(const ExportedTableUpdateMessage* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ExportedTableUpdateMessage::_Internal::export_id(const ExportedTableUpdateMessage* msg) {
  return *msg->_impl_.export_id_;
}
void ExportedTableUpdateMessage::clear_export_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.export_id_ != nullptr) {
    delete _impl_.export_id_;
  }
  _impl_.export_id_ = nullptr;
}
ExportedTableUpdateMessage::ExportedTableUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}
ExportedTableUpdateMessage::ExportedTableUpdateMessage(const ExportedTableUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExportedTableUpdateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.update_failure_message_){}
    , decltype(_impl_.export_id_){nullptr}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.update_failure_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_failure_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_failure_message().empty()) {
    _this->_impl_.update_failure_message_.Set(from._internal_update_failure_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_export_id()) {
    _this->_impl_.export_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.export_id_);
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}

inline void ExportedTableUpdateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.update_failure_message_){}
    , decltype(_impl_.export_id_){nullptr}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.update_failure_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_failure_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExportedTableUpdateMessage::~ExportedTableUpdateMessage() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExportedTableUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.update_failure_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.export_id_;
}

void ExportedTableUpdateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExportedTableUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.update_failure_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.export_id_ != nullptr) {
    delete _impl_.export_id_;
  }
  _impl_.export_id_ = nullptr;
  _impl_.size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportedTableUpdateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string update_failure_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_update_failure_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExportedTableUpdateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
  if (this->_internal_has_export_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::export_id(this),
        _Internal::export_id(this).GetCachedSize(), target, stream);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_size(), target);
  }

  // string update_failure_message = 3;
  if (!this->_internal_update_failure_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_failure_message().data(), static_cast<int>(this->_internal_update_failure_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_update_failure_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  return target;
}

size_t ExportedTableUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string update_failure_message = 3;
  if (!this->_internal_update_failure_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_failure_message());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
  if (this->_internal_has_export_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.export_id_);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportedTableUpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExportedTableUpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportedTableUpdateMessage::GetClassData() const { return &_class_data_; }


void ExportedTableUpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExportedTableUpdateMessage*>(&to_msg);
  auto& from = static_cast<const ExportedTableUpdateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_update_failure_message().empty()) {
    _this->_internal_set_update_failure_message(from._internal_update_failure_message());
  }
  if (from._internal_has_export_id()) {
    _this->_internal_mutable_export_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_export_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportedTableUpdateMessage::CopyFrom(const ExportedTableUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedTableUpdateMessage::IsInitialized() const {
  return true;
}

void ExportedTableUpdateMessage::InternalSwap(ExportedTableUpdateMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.update_failure_message_, lhs_arena,
      &other->_impl_.update_failure_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.size_)
      + sizeof(ExportedTableUpdateMessage::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.export_id_)>(
          reinterpret_cast<char*>(&_impl_.export_id_),
          reinterpret_cast<char*>(&other->_impl_.export_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportedTableUpdateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[5]);
}

// ===================================================================

class EmptyTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const EmptyTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
EmptyTableRequest::_Internal::result_id(const EmptyTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
void EmptyTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
EmptyTableRequest::EmptyTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}
EmptyTableRequest::EmptyTableRequest(const EmptyTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmptyTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}

inline void EmptyTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EmptyTableRequest::~EmptyTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmptyTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void EmptyTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmptyTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _impl_.size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 size = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmptyTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  return target;
}

size_t EmptyTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // sint64 size = 2 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmptyTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyTableRequest::GetClassData() const { return &_class_data_; }


void EmptyTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmptyTableRequest*>(&to_msg);
  auto& from = static_cast<const EmptyTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyTableRequest::CopyFrom(const EmptyTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyTableRequest::IsInitialized() const {
  return true;
}

void EmptyTableRequest::InternalSwap(EmptyTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.size_)
      + sizeof(EmptyTableRequest::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[6]);
}

// ===================================================================

class TimeTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const TimeTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
TimeTableRequest::_Internal::result_id(const TimeTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
void TimeTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
TimeTableRequest::TimeTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}
TimeTableRequest::TimeTableRequest(const TimeTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.blink_table_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.period_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  _this->_impl_.blink_table_ = from._impl_.blink_table_;
  clear_has_start_time();
  switch (from.start_time_case()) {
    case kStartTimeNanos: {
      _this->_internal_set_start_time_nanos(from._internal_start_time_nanos());
      break;
    }
    case kStartTimeString: {
      _this->_internal_set_start_time_string(from._internal_start_time_string());
      break;
    }
    case START_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_period();
  switch (from.period_case()) {
    case kPeriodNanos: {
      _this->_internal_set_period_nanos(from._internal_period_nanos());
      break;
    }
    case kPeriodString: {
      _this->_internal_set_period_string(from._internal_period_string());
      break;
    }
    case PERIOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}

inline void TimeTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.blink_table_){false}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.period_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_start_time();
  clear_has_period();
}

TimeTableRequest::~TimeTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (has_start_time()) {
    clear_start_time();
  }
  if (has_period()) {
    clear_period();
  }
}

void TimeTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeTableRequest::clear_start_time() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  switch (start_time_case()) {
    case kStartTimeNanos: {
      // No need to clear
      break;
    }
    case kStartTimeString: {
      _impl_.start_time_.start_time_string_.Destroy();
      break;
    }
    case START_TIME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = START_TIME_NOT_SET;
}

void TimeTableRequest::clear_period() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  switch (period_case()) {
    case kPeriodNanos: {
      // No need to clear
      break;
    }
    case kPeriodString: {
      _impl_.period_.period_string_.Destroy();
      break;
    }
    case PERIOD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = PERIOD_NOT_SET;
}


void TimeTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _impl_.blink_table_ = false;
  clear_start_time();
  clear_period();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 start_time_nanos = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_start_time_nanos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 period_nanos = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_period_nanos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blink_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.blink_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string start_time_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_start_time_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.TimeTableRequest.start_time_string"));
        } else
          goto handle_unusual;
        continue;
      // string period_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_period_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.TimeTableRequest.period_string"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // sint64 start_time_nanos = 2 [jstype = JS_STRING];
  if (_internal_has_start_time_nanos()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_start_time_nanos(), target);
  }

  // sint64 period_nanos = 3 [jstype = JS_STRING];
  if (_internal_has_period_nanos()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(3, this->_internal_period_nanos(), target);
  }

  // bool blink_table = 4;
  if (this->_internal_blink_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_blink_table(), target);
  }

  // string start_time_string = 5;
  if (_internal_has_start_time_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_time_string().data(), static_cast<int>(this->_internal_start_time_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.TimeTableRequest.start_time_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_start_time_string(), target);
  }

  // string period_string = 6;
  if (_internal_has_period_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_period_string().data(), static_cast<int>(this->_internal_period_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.TimeTableRequest.period_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_period_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  return target;
}

size_t TimeTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // bool blink_table = 4;
  if (this->_internal_blink_table() != 0) {
    total_size += 1 + 1;
  }

  switch (start_time_case()) {
    // sint64 start_time_nanos = 2 [jstype = JS_STRING];
    case kStartTimeNanos: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_start_time_nanos());
      break;
    }
    // string start_time_string = 5;
    case kStartTimeString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_time_string());
      break;
    }
    case START_TIME_NOT_SET: {
      break;
    }
  }
  switch (period_case()) {
    // sint64 period_nanos = 3 [jstype = JS_STRING];
    case kPeriodNanos: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_period_nanos());
      break;
    }
    // string period_string = 6;
    case kPeriodString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_period_string());
      break;
    }
    case PERIOD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeTableRequest::GetClassData() const { return &_class_data_; }


void TimeTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeTableRequest*>(&to_msg);
  auto& from = static_cast<const TimeTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_blink_table() != 0) {
    _this->_internal_set_blink_table(from._internal_blink_table());
  }
  switch (from.start_time_case()) {
    case kStartTimeNanos: {
      _this->_internal_set_start_time_nanos(from._internal_start_time_nanos());
      break;
    }
    case kStartTimeString: {
      _this->_internal_set_start_time_string(from._internal_start_time_string());
      break;
    }
    case START_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.period_case()) {
    case kPeriodNanos: {
      _this->_internal_set_period_nanos(from._internal_period_nanos());
      break;
    }
    case kPeriodString: {
      _this->_internal_set_period_string(from._internal_period_string());
      break;
    }
    case PERIOD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeTableRequest::CopyFrom(const TimeTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTableRequest::IsInitialized() const {
  return true;
}

void TimeTableRequest::InternalSwap(TimeTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.blink_table_)
      + sizeof(TimeTableRequest::_impl_.blink_table_)
      - PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
  swap(_impl_.start_time_, other->_impl_.start_time_);
  swap(_impl_.period_, other->_impl_.period_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[7]);
}

// ===================================================================

class SelectOrUpdateRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SelectOrUpdateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SelectOrUpdateRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SelectOrUpdateRequest::_Internal::result_id(const SelectOrUpdateRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SelectOrUpdateRequest::_Internal::source_id(const SelectOrUpdateRequest* msg) {
  return *msg->_impl_.source_id_;
}
void SelectOrUpdateRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
SelectOrUpdateRequest::SelectOrUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}
SelectOrUpdateRequest::SelectOrUpdateRequest(const SelectOrUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectOrUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_specs_){from._impl_.column_specs_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}

inline void SelectOrUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_specs_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectOrUpdateRequest::~SelectOrUpdateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectOrUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_specs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void SelectOrUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectOrUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_specs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectOrUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_specs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_specs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectOrUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // repeated string column_specs = 3;
  for (int i = 0, n = this->_internal_column_specs_size(); i < n; i++) {
    const auto& s = this->_internal_column_specs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  return target;
}

size_t SelectOrUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_specs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_specs_.size());
  for (int i = 0, n = _impl_.column_specs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_specs_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectOrUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectOrUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectOrUpdateRequest::GetClassData() const { return &_class_data_; }


void SelectOrUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectOrUpdateRequest*>(&to_msg);
  auto& from = static_cast<const SelectOrUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_specs_.MergeFrom(from._impl_.column_specs_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectOrUpdateRequest::CopyFrom(const SelectOrUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectOrUpdateRequest::IsInitialized() const {
  return true;
}

void SelectOrUpdateRequest::InternalSwap(SelectOrUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_specs_.InternalSwap(&other->_impl_.column_specs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.source_id_)
      + sizeof(SelectOrUpdateRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectOrUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[8]);
}

// ===================================================================

class MathContext::_Internal {
 public:
};

MathContext::MathContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MathContext)
}
MathContext::MathContext(const MathContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MathContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.precision_){}
    , decltype(_impl_.rounding_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.precision_, &from._impl_.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rounding_mode_) -
    reinterpret_cast<char*>(&_impl_.precision_)) + sizeof(_impl_.rounding_mode_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MathContext)
}

inline void MathContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.precision_){0}
    , decltype(_impl_.rounding_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MathContext::~MathContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MathContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MathContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MathContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MathContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MathContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rounding_mode_) -
      reinterpret_cast<char*>(&_impl_.precision_)) + sizeof(_impl_.rounding_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MathContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MathContext.RoundingMode rounding_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rounding_mode(static_cast<::io::deephaven::proto::backplane::grpc::MathContext_RoundingMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MathContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MathContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 precision = 1;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_precision(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MathContext.RoundingMode rounding_mode = 2;
  if (this->_internal_rounding_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rounding_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MathContext)
  return target;
}

size_t MathContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MathContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 precision = 1;
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_precision());
  }

  // .io.deephaven.proto.backplane.grpc.MathContext.RoundingMode rounding_mode = 2;
  if (this->_internal_rounding_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rounding_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MathContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MathContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MathContext::GetClassData() const { return &_class_data_; }


void MathContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MathContext*>(&to_msg);
  auto& from = static_cast<const MathContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MathContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_rounding_mode() != 0) {
    _this->_internal_set_rounding_mode(from._internal_rounding_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MathContext::CopyFrom(const MathContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MathContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MathContext::IsInitialized() const {
  return true;
}

void MathContext::InternalSwap(MathContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MathContext, _impl_.rounding_mode_)
      + sizeof(MathContext::_impl_.rounding_mode_)
      - PROTOBUF_FIELD_OFFSET(MathContext, _impl_.precision_)>(
          reinterpret_cast<char*>(&_impl_.precision_),
          reinterpret_cast<char*>(&other->_impl_.precision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MathContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[9]);
}

// ===================================================================

class UpdateByWindowScale_UpdateByWindowTicks::_Internal {
 public:
};

UpdateByWindowScale_UpdateByWindowTicks::UpdateByWindowScale_UpdateByWindowTicks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
}
UpdateByWindowScale_UpdateByWindowTicks::UpdateByWindowScale_UpdateByWindowTicks(const UpdateByWindowScale_UpdateByWindowTicks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByWindowScale_UpdateByWindowTicks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ticks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ticks_ = from._impl_.ticks_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
}

inline void UpdateByWindowScale_UpdateByWindowTicks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ticks_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByWindowScale_UpdateByWindowTicks::~UpdateByWindowScale_UpdateByWindowTicks() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByWindowScale_UpdateByWindowTicks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateByWindowScale_UpdateByWindowTicks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByWindowScale_UpdateByWindowTicks::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticks_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByWindowScale_UpdateByWindowTicks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ticks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.ticks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByWindowScale_UpdateByWindowTicks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ticks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ticks = this->_internal_ticks();
  uint64_t raw_ticks;
  memcpy(&raw_ticks, &tmp_ticks, sizeof(tmp_ticks));
  if (raw_ticks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_ticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  return target;
}

size_t UpdateByWindowScale_UpdateByWindowTicks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ticks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ticks = this->_internal_ticks();
  uint64_t raw_ticks;
  memcpy(&raw_ticks, &tmp_ticks, sizeof(tmp_ticks));
  if (raw_ticks != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByWindowScale_UpdateByWindowTicks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByWindowScale_UpdateByWindowTicks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByWindowScale_UpdateByWindowTicks::GetClassData() const { return &_class_data_; }


void UpdateByWindowScale_UpdateByWindowTicks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByWindowScale_UpdateByWindowTicks*>(&to_msg);
  auto& from = static_cast<const UpdateByWindowScale_UpdateByWindowTicks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ticks = from._internal_ticks();
  uint64_t raw_ticks;
  memcpy(&raw_ticks, &tmp_ticks, sizeof(tmp_ticks));
  if (raw_ticks != 0) {
    _this->_internal_set_ticks(from._internal_ticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByWindowScale_UpdateByWindowTicks::CopyFrom(const UpdateByWindowScale_UpdateByWindowTicks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByWindowScale_UpdateByWindowTicks::IsInitialized() const {
  return true;
}

void UpdateByWindowScale_UpdateByWindowTicks::InternalSwap(UpdateByWindowScale_UpdateByWindowTicks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ticks_, other->_impl_.ticks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByWindowScale_UpdateByWindowTicks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[10]);
}

// ===================================================================

class UpdateByWindowScale_UpdateByWindowTime::_Internal {
 public:
};

UpdateByWindowScale_UpdateByWindowTime::UpdateByWindowScale_UpdateByWindowTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
}
UpdateByWindowScale_UpdateByWindowTime::UpdateByWindowScale_UpdateByWindowTime(const UpdateByWindowScale_UpdateByWindowTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByWindowScale_UpdateByWindowTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_){}
    , decltype(_impl_.window_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column().empty()) {
    _this->_impl_.column_.Set(from._internal_column(), 
      _this->GetArenaForAllocation());
  }
  clear_has_window();
  switch (from.window_case()) {
    case kNanos: {
      _this->_internal_set_nanos(from._internal_nanos());
      break;
    }
    case kDurationString: {
      _this->_internal_set_duration_string(from._internal_duration_string());
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
}

inline void UpdateByWindowScale_UpdateByWindowTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_){}
    , decltype(_impl_.window_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_window();
}

UpdateByWindowScale_UpdateByWindowTime::~UpdateByWindowScale_UpdateByWindowTime() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByWindowScale_UpdateByWindowTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_.Destroy();
  if (has_window()) {
    clear_window();
  }
}

void UpdateByWindowScale_UpdateByWindowTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByWindowScale_UpdateByWindowTime::clear_window() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  switch (window_case()) {
    case kNanos: {
      // No need to clear
      break;
    }
    case kDurationString: {
      _impl_.window_.duration_string_.Destroy();
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WINDOW_NOT_SET;
}


void UpdateByWindowScale_UpdateByWindowTime::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.ClearToEmpty();
  clear_window();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByWindowScale_UpdateByWindowTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime.column"));
        } else
          goto handle_unusual;
        continue;
      // sint64 nanos = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_nanos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string duration_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_duration_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime.duration_string"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByWindowScale_UpdateByWindowTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column().data(), static_cast<int>(this->_internal_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime.column");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column(), target);
  }

  // sint64 nanos = 2 [jstype = JS_STRING];
  if (_internal_has_nanos()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_nanos(), target);
  }

  // string duration_string = 3;
  if (_internal_has_duration_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_duration_string().data(), static_cast<int>(this->_internal_duration_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime.duration_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_duration_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  return target;
}

size_t UpdateByWindowScale_UpdateByWindowTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column());
  }

  switch (window_case()) {
    // sint64 nanos = 2 [jstype = JS_STRING];
    case kNanos: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_nanos());
      break;
    }
    // string duration_string = 3;
    case kDurationString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration_string());
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByWindowScale_UpdateByWindowTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByWindowScale_UpdateByWindowTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByWindowScale_UpdateByWindowTime::GetClassData() const { return &_class_data_; }


void UpdateByWindowScale_UpdateByWindowTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByWindowScale_UpdateByWindowTime*>(&to_msg);
  auto& from = static_cast<const UpdateByWindowScale_UpdateByWindowTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column().empty()) {
    _this->_internal_set_column(from._internal_column());
  }
  switch (from.window_case()) {
    case kNanos: {
      _this->_internal_set_nanos(from._internal_nanos());
      break;
    }
    case kDurationString: {
      _this->_internal_set_duration_string(from._internal_duration_string());
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByWindowScale_UpdateByWindowTime::CopyFrom(const UpdateByWindowScale_UpdateByWindowTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByWindowScale_UpdateByWindowTime::IsInitialized() const {
  return true;
}

void UpdateByWindowScale_UpdateByWindowTime::InternalSwap(UpdateByWindowScale_UpdateByWindowTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_, lhs_arena,
      &other->_impl_.column_, rhs_arena
  );
  swap(_impl_.window_, other->_impl_.window_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByWindowScale_UpdateByWindowTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[11]);
}

// ===================================================================

class UpdateByWindowScale::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks& ticks(const UpdateByWindowScale* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime& time(const UpdateByWindowScale* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks&
UpdateByWindowScale::_Internal::ticks(const UpdateByWindowScale* msg) {
  return *msg->_impl_.type_.ticks_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime&
UpdateByWindowScale::_Internal::time(const UpdateByWindowScale* msg) {
  return *msg->_impl_.type_.time_;
}
void UpdateByWindowScale::set_allocated_ticks(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks* ticks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (ticks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ticks);
    if (message_arena != submessage_arena) {
      ticks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticks, submessage_arena);
    }
    set_has_ticks();
    _impl_.type_.ticks_ = ticks;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.ticks)
}
void UpdateByWindowScale::set_allocated_time(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time);
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    _impl_.type_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.time)
}
UpdateByWindowScale::UpdateByWindowScale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
}
UpdateByWindowScale::UpdateByWindowScale(const UpdateByWindowScale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByWindowScale* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTicks: {
      _this->_internal_mutable_ticks()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks::MergeFrom(
          from._internal_ticks());
      break;
    }
    case kTime: {
      _this->_internal_mutable_time()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime::MergeFrom(
          from._internal_time());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
}

inline void UpdateByWindowScale::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

UpdateByWindowScale::~UpdateByWindowScale() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByWindowScale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void UpdateByWindowScale::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByWindowScale::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  switch (type_case()) {
    case kTicks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.ticks_;
      }
      break;
    }
    case kTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.time_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void UpdateByWindowScale::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByWindowScale::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks ticks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByWindowScale::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks ticks = 1;
  if (_internal_has_ticks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ticks(this),
        _Internal::ticks(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime time = 2;
  if (_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  return target;
}

size_t UpdateByWindowScale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks ticks = 1;
    case kTicks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.ticks_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime time = 2;
    case kTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.time_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByWindowScale::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByWindowScale::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByWindowScale::GetClassData() const { return &_class_data_; }


void UpdateByWindowScale::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByWindowScale*>(&to_msg);
  auto& from = static_cast<const UpdateByWindowScale&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTicks: {
      _this->_internal_mutable_ticks()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks::MergeFrom(
          from._internal_ticks());
      break;
    }
    case kTime: {
      _this->_internal_mutable_time()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime::MergeFrom(
          from._internal_time());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByWindowScale::CopyFrom(const UpdateByWindowScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByWindowScale::IsInitialized() const {
  return true;
}

void UpdateByWindowScale::InternalSwap(UpdateByWindowScale* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByWindowScale::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[12]);
}

// ===================================================================

class UpdateByEmOptions::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::MathContext& big_value_context(const UpdateByEmOptions* msg);
};

const ::io::deephaven::proto::backplane::grpc::MathContext&
UpdateByEmOptions::_Internal::big_value_context(const UpdateByEmOptions* msg) {
  return *msg->_impl_.big_value_context_;
}
UpdateByEmOptions::UpdateByEmOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
}
UpdateByEmOptions::UpdateByEmOptions(const UpdateByEmOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByEmOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.big_value_context_){nullptr}
    , decltype(_impl_.on_null_value_){}
    , decltype(_impl_.on_nan_value_){}
    , decltype(_impl_.on_null_time_){}
    , decltype(_impl_.on_negative_delta_time_){}
    , decltype(_impl_.on_zero_delta_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_big_value_context()) {
    _this->_impl_.big_value_context_ = new ::io::deephaven::proto::backplane::grpc::MathContext(*from._impl_.big_value_context_);
  }
  ::memcpy(&_impl_.on_null_value_, &from._impl_.on_null_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.on_zero_delta_time_) -
    reinterpret_cast<char*>(&_impl_.on_null_value_)) + sizeof(_impl_.on_zero_delta_time_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
}

inline void UpdateByEmOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.big_value_context_){nullptr}
    , decltype(_impl_.on_null_value_){0}
    , decltype(_impl_.on_nan_value_){0}
    , decltype(_impl_.on_null_time_){0}
    , decltype(_impl_.on_negative_delta_time_){0}
    , decltype(_impl_.on_zero_delta_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByEmOptions::~UpdateByEmOptions() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByEmOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.big_value_context_;
}

void UpdateByEmOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByEmOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.big_value_context_ != nullptr) {
    delete _impl_.big_value_context_;
  }
  _impl_.big_value_context_ = nullptr;
  ::memset(&_impl_.on_null_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.on_zero_delta_time_) -
      reinterpret_cast<char*>(&_impl_.on_null_value_)) + sizeof(_impl_.on_zero_delta_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByEmOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_on_null_value(static_cast<::io::deephaven::proto::backplane::grpc::BadDataBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_nan_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_on_nan_value(static_cast<::io::deephaven::proto::backplane::grpc::BadDataBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_on_null_time(static_cast<::io::deephaven::proto::backplane::grpc::BadDataBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_negative_delta_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_on_negative_delta_time(static_cast<::io::deephaven::proto::backplane::grpc::BadDataBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_zero_delta_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_on_zero_delta_time(static_cast<::io::deephaven::proto::backplane::grpc::BadDataBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MathContext big_value_context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_big_value_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByEmOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_value = 1;
  if (this->_internal_on_null_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_on_null_value(), target);
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_nan_value = 2;
  if (this->_internal_on_nan_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_on_nan_value(), target);
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_time = 3;
  if (this->_internal_on_null_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_on_null_time(), target);
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_negative_delta_time = 4;
  if (this->_internal_on_negative_delta_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_on_negative_delta_time(), target);
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_zero_delta_time = 5;
  if (this->_internal_on_zero_delta_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_on_zero_delta_time(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MathContext big_value_context = 6;
  if (this->_internal_has_big_value_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::big_value_context(this),
        _Internal::big_value_context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  return target;
}

size_t UpdateByEmOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.MathContext big_value_context = 6;
  if (this->_internal_has_big_value_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.big_value_context_);
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_value = 1;
  if (this->_internal_on_null_value() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_on_null_value());
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_nan_value = 2;
  if (this->_internal_on_nan_value() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_on_nan_value());
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_time = 3;
  if (this->_internal_on_null_time() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_on_null_time());
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_negative_delta_time = 4;
  if (this->_internal_on_negative_delta_time() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_on_negative_delta_time());
  }

  // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_zero_delta_time = 5;
  if (this->_internal_on_zero_delta_time() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_on_zero_delta_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByEmOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByEmOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByEmOptions::GetClassData() const { return &_class_data_; }


void UpdateByEmOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByEmOptions*>(&to_msg);
  auto& from = static_cast<const UpdateByEmOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_big_value_context()) {
    _this->_internal_mutable_big_value_context()->::io::deephaven::proto::backplane::grpc::MathContext::MergeFrom(
        from._internal_big_value_context());
  }
  if (from._internal_on_null_value() != 0) {
    _this->_internal_set_on_null_value(from._internal_on_null_value());
  }
  if (from._internal_on_nan_value() != 0) {
    _this->_internal_set_on_nan_value(from._internal_on_nan_value());
  }
  if (from._internal_on_null_time() != 0) {
    _this->_internal_set_on_null_time(from._internal_on_null_time());
  }
  if (from._internal_on_negative_delta_time() != 0) {
    _this->_internal_set_on_negative_delta_time(from._internal_on_negative_delta_time());
  }
  if (from._internal_on_zero_delta_time() != 0) {
    _this->_internal_set_on_zero_delta_time(from._internal_on_zero_delta_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByEmOptions::CopyFrom(const UpdateByEmOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByEmOptions::IsInitialized() const {
  return true;
}

void UpdateByEmOptions::InternalSwap(UpdateByEmOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_zero_delta_time_)
      + sizeof(UpdateByEmOptions::_impl_.on_zero_delta_time_)
      - PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.big_value_context_)>(
          reinterpret_cast<char*>(&_impl_.big_value_context_),
          reinterpret_cast<char*>(&other->_impl_.big_value_context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByEmOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[13]);
}

// ===================================================================

class UpdateByDeltaOptions::_Internal {
 public:
};

UpdateByDeltaOptions::UpdateByDeltaOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
}
UpdateByDeltaOptions::UpdateByDeltaOptions(const UpdateByDeltaOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByDeltaOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.null_behavior_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.null_behavior_ = from._impl_.null_behavior_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
}

inline void UpdateByDeltaOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.null_behavior_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByDeltaOptions::~UpdateByDeltaOptions() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByDeltaOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateByDeltaOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByDeltaOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.null_behavior_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByDeltaOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByNullBehavior null_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_null_behavior(static_cast<::io::deephaven::proto::backplane::grpc::UpdateByNullBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByDeltaOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByNullBehavior null_behavior = 1;
  if (this->_internal_null_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_null_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  return target;
}

size_t UpdateByDeltaOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByNullBehavior null_behavior = 1;
  if (this->_internal_null_behavior() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_null_behavior());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByDeltaOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByDeltaOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByDeltaOptions::GetClassData() const { return &_class_data_; }


void UpdateByDeltaOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByDeltaOptions*>(&to_msg);
  auto& from = static_cast<const UpdateByDeltaOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_null_behavior() != 0) {
    _this->_internal_set_null_behavior(from._internal_null_behavior());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByDeltaOptions::CopyFrom(const UpdateByDeltaOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByDeltaOptions::IsInitialized() const {
  return true;
}

void UpdateByDeltaOptions::InternalSwap(UpdateByDeltaOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.null_behavior_, other->_impl_.null_behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByDeltaOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[14]);
}

// ===================================================================

class UpdateByRequest_UpdateByOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateByRequest_UpdateByOptions>()._impl_._has_bits_);
  static void set_has_use_redirection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chunk_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_static_sparse_memory_overhead(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_hash_table_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maximum_load_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_load_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::io::deephaven::proto::backplane::grpc::MathContext& math_context(const UpdateByRequest_UpdateByOptions* msg);
};

const ::io::deephaven::proto::backplane::grpc::MathContext&
UpdateByRequest_UpdateByOptions::_Internal::math_context(const UpdateByRequest_UpdateByOptions* msg) {
  return *msg->_impl_.math_context_;
}
UpdateByRequest_UpdateByOptions::UpdateByRequest_UpdateByOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
}
UpdateByRequest_UpdateByOptions::UpdateByRequest_UpdateByOptions(const UpdateByRequest_UpdateByOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.math_context_){nullptr}
    , decltype(_impl_.use_redirection_){}
    , decltype(_impl_.chunk_capacity_){}
    , decltype(_impl_.max_static_sparse_memory_overhead_){}
    , decltype(_impl_.maximum_load_factor_){}
    , decltype(_impl_.target_load_factor_){}
    , decltype(_impl_.initial_hash_table_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_math_context()) {
    _this->_impl_.math_context_ = new ::io::deephaven::proto::backplane::grpc::MathContext(*from._impl_.math_context_);
  }
  ::memcpy(&_impl_.use_redirection_, &from._impl_.use_redirection_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initial_hash_table_size_) -
    reinterpret_cast<char*>(&_impl_.use_redirection_)) + sizeof(_impl_.initial_hash_table_size_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
}

inline void UpdateByRequest_UpdateByOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.math_context_){nullptr}
    , decltype(_impl_.use_redirection_){false}
    , decltype(_impl_.chunk_capacity_){0}
    , decltype(_impl_.max_static_sparse_memory_overhead_){0}
    , decltype(_impl_.maximum_load_factor_){0}
    , decltype(_impl_.target_load_factor_){0}
    , decltype(_impl_.initial_hash_table_size_){0}
  };
}

UpdateByRequest_UpdateByOptions::~UpdateByRequest_UpdateByOptions() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.math_context_;
}

void UpdateByRequest_UpdateByOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.math_context_ != nullptr) {
    delete _impl_.math_context_;
  }
  _impl_.math_context_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.use_redirection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.initial_hash_table_size_) -
        reinterpret_cast<char*>(&_impl_.use_redirection_)) + sizeof(_impl_.initial_hash_table_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_redirection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_redirection(&has_bits);
          _impl_.use_redirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chunk_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chunk_capacity(&has_bits);
          _impl_.chunk_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_static_sparse_memory_overhead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_static_sparse_memory_overhead(&has_bits);
          _impl_.max_static_sparse_memory_overhead_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 initial_hash_table_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_initial_hash_table_size(&has_bits);
          _impl_.initial_hash_table_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double maximum_load_factor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_maximum_load_factor(&has_bits);
          _impl_.maximum_load_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double target_load_factor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_target_load_factor(&has_bits);
          _impl_.target_load_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MathContext math_context = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_math_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool use_redirection = 1;
  if (_internal_has_use_redirection()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_redirection(), target);
  }

  // optional int32 chunk_capacity = 2;
  if (_internal_has_chunk_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_chunk_capacity(), target);
  }

  // optional double max_static_sparse_memory_overhead = 3;
  if (_internal_has_max_static_sparse_memory_overhead()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_static_sparse_memory_overhead(), target);
  }

  // optional int32 initial_hash_table_size = 4;
  if (_internal_has_initial_hash_table_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_initial_hash_table_size(), target);
  }

  // optional double maximum_load_factor = 5;
  if (_internal_has_maximum_load_factor()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_maximum_load_factor(), target);
  }

  // optional double target_load_factor = 6;
  if (_internal_has_target_load_factor()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_target_load_factor(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MathContext math_context = 7;
  if (this->_internal_has_math_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::math_context(this),
        _Internal::math_context(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  return target;
}

size_t UpdateByRequest_UpdateByOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.MathContext math_context = 7;
  if (this->_internal_has_math_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.math_context_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool use_redirection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 chunk_capacity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chunk_capacity());
    }

    // optional double max_static_sparse_memory_overhead = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double maximum_load_factor = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double target_load_factor = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 initial_hash_table_size = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_initial_hash_table_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOptions::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOptions*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_math_context()) {
    _this->_internal_mutable_math_context()->::io::deephaven::proto::backplane::grpc::MathContext::MergeFrom(
        from._internal_math_context());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.use_redirection_ = from._impl_.use_redirection_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chunk_capacity_ = from._impl_.chunk_capacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_static_sparse_memory_overhead_ = from._impl_.max_static_sparse_memory_overhead_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.maximum_load_factor_ = from._impl_.maximum_load_factor_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.target_load_factor_ = from._impl_.target_load_factor_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.initial_hash_table_size_ = from._impl_.initial_hash_table_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOptions::CopyFrom(const UpdateByRequest_UpdateByOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOptions::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOptions::InternalSwap(UpdateByRequest_UpdateByOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.initial_hash_table_size_)
      + sizeof(UpdateByRequest_UpdateByOptions::_impl_.initial_hash_table_size_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.math_context_)>(
          reinterpret_cast<char*>(&_impl_.math_context_),
          reinterpret_cast<char*>(&other->_impl_.math_context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[15]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[16]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[17]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[18]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[19]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[20]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions& options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_Internal::options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* msg) {
  return *msg->_impl_.options_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_Internal::window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* msg) {
  return *msg->_impl_.window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions(*from._impl_.options_);
  }
  if (from._internal_has_window_scale()) {
    _this->_impl_.window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_scale_ != nullptr) {
    delete _impl_.window_scale_;
  }
  _impl_.window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::window_scale(this),
        _Internal::window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::io::deephaven::proto::backplane::grpc::UpdateByEmOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_window_scale()) {
    _this->_internal_mutable_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[21]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions& options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_Internal::options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* msg) {
  return *msg->_impl_.options_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_Internal::window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* msg) {
  return *msg->_impl_.window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions(*from._impl_.options_);
  }
  if (from._internal_has_window_scale()) {
    _this->_impl_.window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_scale_ != nullptr) {
    delete _impl_.window_scale_;
  }
  _impl_.window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::window_scale(this),
        _Internal::window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::io::deephaven::proto::backplane::grpc::UpdateByEmOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_window_scale()) {
    _this->_internal_mutable_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[22]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions& options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_Internal::options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* msg) {
  return *msg->_impl_.options_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_Internal::window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* msg) {
  return *msg->_impl_.window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions(*from._impl_.options_);
  }
  if (from._internal_has_window_scale()) {
    _this->_impl_.window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_scale_ != nullptr) {
    delete _impl_.window_scale_;
  }
  _impl_.window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::window_scale(this),
        _Internal::window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::io::deephaven::proto::backplane::grpc::UpdateByEmOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_window_scale()) {
    _this->_internal_mutable_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[23]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions& options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_Internal::options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* msg) {
  return *msg->_impl_.options_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_Internal::window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* msg) {
  return *msg->_impl_.window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions(*from._impl_.options_);
  }
  if (from._internal_has_window_scale()) {
    _this->_impl_.window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_scale_ != nullptr) {
    delete _impl_.window_scale_;
  }
  _impl_.window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::window_scale(this),
        _Internal::window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::io::deephaven::proto::backplane::grpc::UpdateByEmOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_window_scale()) {
    _this->_internal_mutable_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[24]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions& options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_Internal::options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* msg) {
  return *msg->_impl_.options_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_Internal::window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* msg) {
  return *msg->_impl_.window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions(*from._impl_.options_);
  }
  if (from._internal_has_window_scale()) {
    _this->_impl_.window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.window_scale_ != nullptr) {
    delete _impl_.window_scale_;
  }
  _impl_.window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::window_scale(this),
        _Internal::window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
  if (this->_internal_has_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::io::deephaven::proto::backplane::grpc::UpdateByEmOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_window_scale()) {
    _this->_internal_mutable_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[25]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions& options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_Internal::options(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* msg) {
  return *msg->_impl_.options_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions(*from._impl_.options_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions options = 1;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions::MergeFrom(
        from._internal_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.options_, other->_impl_.options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[26]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[27]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[28]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[29]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[30]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[31]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[32]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[33]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[34]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_column_){}
    , decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.weight_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weight_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weight_column().empty()) {
    _this->_impl_.weight_column_.Set(from._internal_weight_column(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_column_){}
    , decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.weight_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weight_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weight_column_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weight_column_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string weight_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_weight_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg.weight_column"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  // string weight_column = 3;
  if (!this->_internal_weight_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weight_column().data(), static_cast<int>(this->_internal_weight_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg.weight_column");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_weight_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string weight_column = 3;
  if (!this->_internal_weight_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weight_column());
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_weight_column().empty()) {
    _this->_internal_set_weight_column(from._internal_weight_column());
  }
  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weight_column_, lhs_arena,
      &other->_impl_.weight_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[35]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_Internal::reverse_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* msg) {
  return *msg->_impl_.reverse_window_scale_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_Internal::forward_window_scale(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* msg) {
  return *msg->_impl_.forward_window_scale_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.formula_){}
    , decltype(_impl_.param_token_){}
    , decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.formula_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formula_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_formula().empty()) {
    _this->_impl_.formula_.Set(from._internal_formula(), 
      _this->GetArenaForAllocation());
  }
  _impl_.param_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_param_token().empty()) {
    _this->_impl_.param_token_.Set(from._internal_param_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reverse_window_scale()) {
    _this->_impl_.reverse_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.reverse_window_scale_);
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_impl_.forward_window_scale_ = new ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale(*from._impl_.forward_window_scale_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.formula_){}
    , decltype(_impl_.param_token_){}
    , decltype(_impl_.reverse_window_scale_){nullptr}
    , decltype(_impl_.forward_window_scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.formula_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formula_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formula_.Destroy();
  _impl_.param_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reverse_window_scale_;
  if (this != internal_default_instance()) delete _impl_.forward_window_scale_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_.ClearToEmpty();
  _impl_.param_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.reverse_window_scale_ != nullptr) {
    delete _impl_.reverse_window_scale_;
  }
  _impl_.reverse_window_scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forward_window_scale_ != nullptr) {
    delete _impl_.forward_window_scale_;
  }
  _impl_.forward_window_scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_window_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string formula = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_formula();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.formula"));
        } else
          goto handle_unusual;
        continue;
      // string param_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_param_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.param_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reverse_window_scale(this),
        _Internal::reverse_window_scale(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward_window_scale(this),
        _Internal::forward_window_scale(this).GetCachedSize(), target, stream);
  }

  // string formula = 3;
  if (!this->_internal_formula().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formula().data(), static_cast<int>(this->_internal_formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.formula");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_formula(), target);
  }

  // string param_token = 4;
  if (!this->_internal_param_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param_token().data(), static_cast<int>(this->_internal_param_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.param_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_param_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string formula = 3;
  if (!this->_internal_formula().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formula());
  }

  // string param_token = 4;
  if (!this->_internal_param_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param_token());
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
  if (this->_internal_has_reverse_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reverse_window_scale_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
  if (this->_internal_has_forward_window_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forward_window_scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_formula().empty()) {
    _this->_internal_set_formula(from._internal_formula());
  }
  if (!from._internal_param_token().empty()) {
    _this->_internal_set_param_token(from._internal_param_token());
  }
  if (from._internal_has_reverse_window_scale()) {
    _this->_internal_mutable_reverse_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_reverse_window_scale());
  }
  if (from._internal_has_forward_window_scale()) {
    _this->_internal_mutable_forward_window_scale()->::io::deephaven::proto::backplane::grpc::UpdateByWindowScale::MergeFrom(
        from._internal_forward_window_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.formula_, lhs_arena,
      &other->_impl_.formula_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param_token_, lhs_arena,
      &other->_impl_.param_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[36]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum& sum(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin& min(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax& max(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct& product(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill& fill(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& ema(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& rolling_sum(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& rolling_group(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& rolling_avg(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& rolling_min(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& rolling_max(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& rolling_product(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& delta(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& ems(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& em_min(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& em_max(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& em_std(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& rolling_count(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& rolling_std(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& rolling_wavg(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& rolling_formula(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::sum(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.sum_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::min(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.min_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::max(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.max_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::product(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.product_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::fill(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.fill_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::ema(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.ema_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_sum(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_sum_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_group(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_group_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_avg(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_avg_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_min(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_min_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_max(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_max_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_product(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_product_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::delta(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.delta_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::ems(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.ems_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::em_min(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.em_min_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::em_max(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.em_max_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::em_std(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.em_std_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_count(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_count_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_std(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_std_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_wavg(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_wavg_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula&
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal::rolling_formula(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* msg) {
  return *msg->_impl_.type_.rolling_formula_;
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_sum(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum* sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sum);
    if (message_arena != submessage_arena) {
      sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sum, submessage_arena);
    }
    set_has_sum();
    _impl_.type_.sum_ = sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.sum)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_min(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    set_has_min();
    _impl_.type_.min_ = min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.min)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_max(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    set_has_max();
    _impl_.type_.max_ = max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.max)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_product(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    set_has_product();
    _impl_.type_.product_ = product;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.product)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_fill(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fill);
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    set_has_fill();
    _impl_.type_.fill_ = fill;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.fill)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_ema(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* ema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (ema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ema);
    if (message_arena != submessage_arena) {
      ema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ema, submessage_arena);
    }
    set_has_ema();
    _impl_.type_.ema_ = ema;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.ema)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_sum(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* rolling_sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_sum);
    if (message_arena != submessage_arena) {
      rolling_sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_sum, submessage_arena);
    }
    set_has_rolling_sum();
    _impl_.type_.rolling_sum_ = rolling_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_sum)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_group(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* rolling_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_group);
    if (message_arena != submessage_arena) {
      rolling_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_group, submessage_arena);
    }
    set_has_rolling_group();
    _impl_.type_.rolling_group_ = rolling_group;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_group)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_avg(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* rolling_avg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_avg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_avg);
    if (message_arena != submessage_arena) {
      rolling_avg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_avg, submessage_arena);
    }
    set_has_rolling_avg();
    _impl_.type_.rolling_avg_ = rolling_avg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_avg)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_min(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* rolling_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_min);
    if (message_arena != submessage_arena) {
      rolling_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_min, submessage_arena);
    }
    set_has_rolling_min();
    _impl_.type_.rolling_min_ = rolling_min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_min)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_max(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* rolling_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_max);
    if (message_arena != submessage_arena) {
      rolling_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_max, submessage_arena);
    }
    set_has_rolling_max();
    _impl_.type_.rolling_max_ = rolling_max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_max)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_product(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* rolling_product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_product);
    if (message_arena != submessage_arena) {
      rolling_product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_product, submessage_arena);
    }
    set_has_rolling_product();
    _impl_.type_.rolling_product_ = rolling_product;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_product)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_delta(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delta);
    if (message_arena != submessage_arena) {
      delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delta, submessage_arena);
    }
    set_has_delta();
    _impl_.type_.delta_ = delta;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.delta)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_ems(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* ems) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (ems) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ems);
    if (message_arena != submessage_arena) {
      ems = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ems, submessage_arena);
    }
    set_has_ems();
    _impl_.type_.ems_ = ems;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.ems)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_em_min(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* em_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (em_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(em_min);
    if (message_arena != submessage_arena) {
      em_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, em_min, submessage_arena);
    }
    set_has_em_min();
    _impl_.type_.em_min_ = em_min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.em_min)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_em_max(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* em_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (em_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(em_max);
    if (message_arena != submessage_arena) {
      em_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, em_max, submessage_arena);
    }
    set_has_em_max();
    _impl_.type_.em_max_ = em_max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.em_max)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_em_std(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* em_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (em_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(em_std);
    if (message_arena != submessage_arena) {
      em_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, em_std, submessage_arena);
    }
    set_has_em_std();
    _impl_.type_.em_std_ = em_std;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.em_std)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_count(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* rolling_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_count);
    if (message_arena != submessage_arena) {
      rolling_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_count, submessage_arena);
    }
    set_has_rolling_count();
    _impl_.type_.rolling_count_ = rolling_count;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_count)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_std(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* rolling_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_std);
    if (message_arena != submessage_arena) {
      rolling_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_std, submessage_arena);
    }
    set_has_rolling_std();
    _impl_.type_.rolling_std_ = rolling_std;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_std)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_wavg(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* rolling_wavg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_wavg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_wavg);
    if (message_arena != submessage_arena) {
      rolling_wavg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_wavg, submessage_arena);
    }
    set_has_rolling_wavg();
    _impl_.type_.rolling_wavg_ = rolling_wavg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_wavg)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_formula(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* rolling_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (rolling_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rolling_formula);
    if (message_arena != submessage_arena) {
      rolling_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rolling_formula, submessage_arena);
    }
    set_has_rolling_formula();
    _impl_.type_.rolling_formula_ = rolling_formula;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_formula)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kSum: {
      _this->_internal_mutable_sum()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::MergeFrom(
          from._internal_sum());
      break;
    }
    case kMin: {
      _this->_internal_mutable_min()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::MergeFrom(
          from._internal_min());
      break;
    }
    case kMax: {
      _this->_internal_mutable_max()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::MergeFrom(
          from._internal_max());
      break;
    }
    case kProduct: {
      _this->_internal_mutable_product()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::MergeFrom(
          from._internal_product());
      break;
    }
    case kFill: {
      _this->_internal_mutable_fill()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::MergeFrom(
          from._internal_fill());
      break;
    }
    case kEma: {
      _this->_internal_mutable_ema()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::MergeFrom(
          from._internal_ema());
      break;
    }
    case kRollingSum: {
      _this->_internal_mutable_rolling_sum()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::MergeFrom(
          from._internal_rolling_sum());
      break;
    }
    case kRollingGroup: {
      _this->_internal_mutable_rolling_group()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::MergeFrom(
          from._internal_rolling_group());
      break;
    }
    case kRollingAvg: {
      _this->_internal_mutable_rolling_avg()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::MergeFrom(
          from._internal_rolling_avg());
      break;
    }
    case kRollingMin: {
      _this->_internal_mutable_rolling_min()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::MergeFrom(
          from._internal_rolling_min());
      break;
    }
    case kRollingMax: {
      _this->_internal_mutable_rolling_max()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::MergeFrom(
          from._internal_rolling_max());
      break;
    }
    case kRollingProduct: {
      _this->_internal_mutable_rolling_product()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::MergeFrom(
          from._internal_rolling_product());
      break;
    }
    case kDelta: {
      _this->_internal_mutable_delta()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::MergeFrom(
          from._internal_delta());
      break;
    }
    case kEms: {
      _this->_internal_mutable_ems()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::MergeFrom(
          from._internal_ems());
      break;
    }
    case kEmMin: {
      _this->_internal_mutable_em_min()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::MergeFrom(
          from._internal_em_min());
      break;
    }
    case kEmMax: {
      _this->_internal_mutable_em_max()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::MergeFrom(
          from._internal_em_max());
      break;
    }
    case kEmStd: {
      _this->_internal_mutable_em_std()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::MergeFrom(
          from._internal_em_std());
      break;
    }
    case kRollingCount: {
      _this->_internal_mutable_rolling_count()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::MergeFrom(
          from._internal_rolling_count());
      break;
    }
    case kRollingStd: {
      _this->_internal_mutable_rolling_std()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::MergeFrom(
          from._internal_rolling_std());
      break;
    }
    case kRollingWavg: {
      _this->_internal_mutable_rolling_wavg()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::MergeFrom(
          from._internal_rolling_wavg());
      break;
    }
    case kRollingFormula: {
      _this->_internal_mutable_rolling_formula()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::MergeFrom(
          from._internal_rolling_formula());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  switch (type_case()) {
    case kSum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.sum_;
      }
      break;
    }
    case kMin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.min_;
      }
      break;
    }
    case kMax: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.max_;
      }
      break;
    }
    case kProduct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.product_;
      }
      break;
    }
    case kFill: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.fill_;
      }
      break;
    }
    case kEma: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.ema_;
      }
      break;
    }
    case kRollingSum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_sum_;
      }
      break;
    }
    case kRollingGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_group_;
      }
      break;
    }
    case kRollingAvg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_avg_;
      }
      break;
    }
    case kRollingMin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_min_;
      }
      break;
    }
    case kRollingMax: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_max_;
      }
      break;
    }
    case kRollingProduct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_product_;
      }
      break;
    }
    case kDelta: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.delta_;
      }
      break;
    }
    case kEms: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.ems_;
      }
      break;
    }
    case kEmMin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.em_min_;
      }
      break;
    }
    case kEmMax: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.em_max_;
      }
      break;
    }
    case kEmStd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.em_std_;
      }
      break;
    }
    case kRollingCount: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_count_;
      }
      break;
    }
    case kRollingStd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_std_;
      }
      break;
    }
    case kRollingWavg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_wavg_;
      }
      break;
    }
    case kRollingFormula: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.rolling_formula_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum sum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct product = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill fill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma ema = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum rolling_sum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_sum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup rolling_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg rolling_avg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_avg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin rolling_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax rolling_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct rolling_product = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta delta = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_delta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms ems = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ems(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin em_min = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_em_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax em_max = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_em_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd em_std = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_em_std(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount rolling_count = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd rolling_std = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_std(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg rolling_wavg = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_wavg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula rolling_formula = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_rolling_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum sum = 1;
  if (_internal_has_sum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sum(this),
        _Internal::sum(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin min = 2;
  if (_internal_has_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::min(this),
        _Internal::min(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax max = 3;
  if (_internal_has_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct product = 4;
  if (_internal_has_product()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::product(this),
        _Internal::product(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill fill = 5;
  if (_internal_has_fill()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma ema = 6;
  if (_internal_has_ema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::ema(this),
        _Internal::ema(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum rolling_sum = 7;
  if (_internal_has_rolling_sum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::rolling_sum(this),
        _Internal::rolling_sum(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup rolling_group = 8;
  if (_internal_has_rolling_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::rolling_group(this),
        _Internal::rolling_group(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg rolling_avg = 9;
  if (_internal_has_rolling_avg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::rolling_avg(this),
        _Internal::rolling_avg(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin rolling_min = 10;
  if (_internal_has_rolling_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::rolling_min(this),
        _Internal::rolling_min(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax rolling_max = 11;
  if (_internal_has_rolling_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::rolling_max(this),
        _Internal::rolling_max(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct rolling_product = 12;
  if (_internal_has_rolling_product()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::rolling_product(this),
        _Internal::rolling_product(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta delta = 13;
  if (_internal_has_delta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::delta(this),
        _Internal::delta(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms ems = 14;
  if (_internal_has_ems()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ems(this),
        _Internal::ems(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin em_min = 15;
  if (_internal_has_em_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::em_min(this),
        _Internal::em_min(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax em_max = 16;
  if (_internal_has_em_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::em_max(this),
        _Internal::em_max(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd em_std = 17;
  if (_internal_has_em_std()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::em_std(this),
        _Internal::em_std(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount rolling_count = 18;
  if (_internal_has_rolling_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::rolling_count(this),
        _Internal::rolling_count(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd rolling_std = 19;
  if (_internal_has_rolling_std()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::rolling_std(this),
        _Internal::rolling_std(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg rolling_wavg = 20;
  if (_internal_has_rolling_wavg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::rolling_wavg(this),
        _Internal::rolling_wavg(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula rolling_formula = 21;
  if (_internal_has_rolling_formula()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::rolling_formula(this),
        _Internal::rolling_formula(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum sum = 1;
    case kSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.sum_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin min = 2;
    case kMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.min_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax max = 3;
    case kMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.max_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct product = 4;
    case kProduct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.product_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill fill = 5;
    case kFill: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.fill_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma ema = 6;
    case kEma: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.ema_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum rolling_sum = 7;
    case kRollingSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_sum_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup rolling_group = 8;
    case kRollingGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_group_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg rolling_avg = 9;
    case kRollingAvg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_avg_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin rolling_min = 10;
    case kRollingMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_min_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax rolling_max = 11;
    case kRollingMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_max_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct rolling_product = 12;
    case kRollingProduct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_product_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta delta = 13;
    case kDelta: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.delta_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms ems = 14;
    case kEms: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.ems_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin em_min = 15;
    case kEmMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.em_min_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax em_max = 16;
    case kEmMax: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.em_max_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd em_std = 17;
    case kEmStd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.em_std_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount rolling_count = 18;
    case kRollingCount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_count_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd rolling_std = 19;
    case kRollingStd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_std_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg rolling_wavg = 20;
    case kRollingWavg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_wavg_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula rolling_formula = 21;
    case kRollingFormula: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.rolling_formula_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kSum: {
      _this->_internal_mutable_sum()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::MergeFrom(
          from._internal_sum());
      break;
    }
    case kMin: {
      _this->_internal_mutable_min()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::MergeFrom(
          from._internal_min());
      break;
    }
    case kMax: {
      _this->_internal_mutable_max()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::MergeFrom(
          from._internal_max());
      break;
    }
    case kProduct: {
      _this->_internal_mutable_product()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::MergeFrom(
          from._internal_product());
      break;
    }
    case kFill: {
      _this->_internal_mutable_fill()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::MergeFrom(
          from._internal_fill());
      break;
    }
    case kEma: {
      _this->_internal_mutable_ema()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::MergeFrom(
          from._internal_ema());
      break;
    }
    case kRollingSum: {
      _this->_internal_mutable_rolling_sum()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::MergeFrom(
          from._internal_rolling_sum());
      break;
    }
    case kRollingGroup: {
      _this->_internal_mutable_rolling_group()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::MergeFrom(
          from._internal_rolling_group());
      break;
    }
    case kRollingAvg: {
      _this->_internal_mutable_rolling_avg()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::MergeFrom(
          from._internal_rolling_avg());
      break;
    }
    case kRollingMin: {
      _this->_internal_mutable_rolling_min()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::MergeFrom(
          from._internal_rolling_min());
      break;
    }
    case kRollingMax: {
      _this->_internal_mutable_rolling_max()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::MergeFrom(
          from._internal_rolling_max());
      break;
    }
    case kRollingProduct: {
      _this->_internal_mutable_rolling_product()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::MergeFrom(
          from._internal_rolling_product());
      break;
    }
    case kDelta: {
      _this->_internal_mutable_delta()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::MergeFrom(
          from._internal_delta());
      break;
    }
    case kEms: {
      _this->_internal_mutable_ems()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::MergeFrom(
          from._internal_ems());
      break;
    }
    case kEmMin: {
      _this->_internal_mutable_em_min()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::MergeFrom(
          from._internal_em_min());
      break;
    }
    case kEmMax: {
      _this->_internal_mutable_em_max()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::MergeFrom(
          from._internal_em_max());
      break;
    }
    case kEmStd: {
      _this->_internal_mutable_em_std()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::MergeFrom(
          from._internal_em_std());
      break;
    }
    case kRollingCount: {
      _this->_internal_mutable_rolling_count()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::MergeFrom(
          from._internal_rolling_count());
      break;
    }
    case kRollingStd: {
      _this->_internal_mutable_rolling_std()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::MergeFrom(
          from._internal_rolling_std());
      break;
    }
    case kRollingWavg: {
      _this->_internal_mutable_rolling_wavg()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::MergeFrom(
          from._internal_rolling_wavg());
      break;
    }
    case kRollingFormula: {
      _this->_internal_mutable_rolling_formula()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::MergeFrom(
          from._internal_rolling_formula());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[37]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& spec(const UpdateByRequest_UpdateByOperation_UpdateByColumn* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec&
UpdateByRequest_UpdateByOperation_UpdateByColumn::_Internal::spec(const UpdateByRequest_UpdateByOperation_UpdateByColumn* msg) {
  return *msg->_impl_.spec_;
}
UpdateByRequest_UpdateByOperation_UpdateByColumn::UpdateByRequest_UpdateByOperation_UpdateByColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn::UpdateByRequest_UpdateByOperation_UpdateByColumn(const UpdateByRequest_UpdateByOperation_UpdateByColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation_UpdateByColumn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_pairs_){from._impl_.match_pairs_}
    , decltype(_impl_.spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec(*from._impl_.spec_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_pairs_){arena}
    , decltype(_impl_.spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest_UpdateByOperation_UpdateByColumn::~UpdateByRequest_UpdateByOperation_UpdateByColumn() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_pairs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.spec_;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_pairs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation_UpdateByColumn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string match_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_pairs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.match_pairs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec spec = 1;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // repeated string match_pairs = 2;
  for (int i = 0, n = this->_internal_match_pairs_size(); i < n; i++) {
    const auto& s = this->_internal_match_pairs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.match_pairs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  return target;
}

size_t UpdateByRequest_UpdateByOperation_UpdateByColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_pairs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.match_pairs_.size());
  for (int i = 0, n = _impl_.match_pairs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.match_pairs_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation_UpdateByColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation_UpdateByColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation_UpdateByColumn::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation_UpdateByColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_pairs_.MergeFrom(from._impl_.match_pairs_);
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::MergeFrom(
        from._internal_spec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation_UpdateByColumn::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.match_pairs_.InternalSwap(&other->_impl_.match_pairs_);
  swap(_impl_.spec_, other->_impl_.spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[38]);
}

// ===================================================================

class UpdateByRequest_UpdateByOperation::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn& column(const UpdateByRequest_UpdateByOperation* msg);
};

const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn&
UpdateByRequest_UpdateByOperation::_Internal::column(const UpdateByRequest_UpdateByOperation* msg) {
  return *msg->_impl_.type_.column_;
}
void UpdateByRequest_UpdateByOperation::set_allocated_column(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn* column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(column);
    if (message_arena != submessage_arena) {
      column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    set_has_column();
    _impl_.type_.column_ = column;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.column)
}
UpdateByRequest_UpdateByOperation::UpdateByRequest_UpdateByOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
}
UpdateByRequest_UpdateByOperation::UpdateByRequest_UpdateByOperation(const UpdateByRequest_UpdateByOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest_UpdateByOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kColumn: {
      _this->_internal_mutable_column()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn::MergeFrom(
          from._internal_column());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
}

inline void UpdateByRequest_UpdateByOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

UpdateByRequest_UpdateByOperation::~UpdateByRequest_UpdateByOperation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest_UpdateByOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void UpdateByRequest_UpdateByOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest_UpdateByOperation::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  switch (type_case()) {
    case kColumn: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.column_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void UpdateByRequest_UpdateByOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest_UpdateByOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest_UpdateByOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn column = 1;
  if (_internal_has_column()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column(this),
        _Internal::column(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  return target;
}

size_t UpdateByRequest_UpdateByOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn column = 1;
    case kColumn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.column_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest_UpdateByOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest_UpdateByOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest_UpdateByOperation::GetClassData() const { return &_class_data_; }


void UpdateByRequest_UpdateByOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kColumn: {
      _this->_internal_mutable_column()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn::MergeFrom(
          from._internal_column());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation::CopyFrom(const UpdateByRequest_UpdateByOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest_UpdateByOperation::IsInitialized() const {
  return true;
}

void UpdateByRequest_UpdateByOperation::InternalSwap(UpdateByRequest_UpdateByOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest_UpdateByOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[39]);
}

// ===================================================================

class UpdateByRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const UpdateByRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const UpdateByRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions& options(const UpdateByRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
UpdateByRequest::_Internal::result_id(const UpdateByRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
UpdateByRequest::_Internal::source_id(const UpdateByRequest* msg) {
  return *msg->_impl_.source_id_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions&
UpdateByRequest::_Internal::options(const UpdateByRequest* msg) {
  return *msg->_impl_.options_;
}
void UpdateByRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
UpdateByRequest::UpdateByRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest)
}
UpdateByRequest::UpdateByRequest(const UpdateByRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateByRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){from._impl_.operations_}
    , decltype(_impl_.group_by_columns_){from._impl_.group_by_columns_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions(*from._impl_.options_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest)
}

inline void UpdateByRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){arena}
    , decltype(_impl_.group_by_columns_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.options_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateByRequest::~UpdateByRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateByRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operations_.~RepeatedPtrField();
  _impl_.group_by_columns_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.options_;
}

void UpdateByRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateByRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operations_.Clear();
  _impl_.group_by_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateByRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation operations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UpdateByRequest.group_by_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateByRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions options = 3;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation operations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operations_size()); i < n; i++) {
    const auto& repfield = this->_internal_operations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string group_by_columns = 5;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UpdateByRequest.group_by_columns");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  return target;
}

size_t UpdateByRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation operations = 4;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->_impl_.operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string group_by_columns = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.group_by_columns_.size());
  for (int i = 0, n = _impl_.group_by_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.group_by_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions options = 3;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateByRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateByRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateByRequest::GetClassData() const { return &_class_data_; }


void UpdateByRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateByRequest*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operations_.MergeFrom(from._impl_.operations_);
  _this->_impl_.group_by_columns_.MergeFrom(from._impl_.group_by_columns_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions::MergeFrom(
        from._internal_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest::CopyFrom(const UpdateByRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateByRequest::IsInitialized() const {
  return true;
}

void UpdateByRequest::InternalSwap(UpdateByRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operations_.InternalSwap(&other->_impl_.operations_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.options_)
      + sizeof(UpdateByRequest::_impl_.options_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateByRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[40]);
}

// ===================================================================

class SelectDistinctRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SelectDistinctRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SelectDistinctRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SelectDistinctRequest::_Internal::result_id(const SelectDistinctRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SelectDistinctRequest::_Internal::source_id(const SelectDistinctRequest* msg) {
  return *msg->_impl_.source_id_;
}
void SelectDistinctRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
SelectDistinctRequest::SelectDistinctRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}
SelectDistinctRequest::SelectDistinctRequest(const SelectDistinctRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectDistinctRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){from._impl_.column_names_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}

inline void SelectDistinctRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectDistinctRequest::~SelectDistinctRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectDistinctRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void SelectDistinctRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectDistinctRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectDistinctRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectDistinctRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  return target;
}

size_t SelectDistinctRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_names_.size());
  for (int i = 0, n = _impl_.column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_names_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectDistinctRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectDistinctRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectDistinctRequest::GetClassData() const { return &_class_data_; }


void SelectDistinctRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectDistinctRequest*>(&to_msg);
  auto& from = static_cast<const SelectDistinctRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_names_.MergeFrom(from._impl_.column_names_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectDistinctRequest::CopyFrom(const SelectDistinctRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectDistinctRequest::IsInitialized() const {
  return true;
}

void SelectDistinctRequest::InternalSwap(SelectDistinctRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.source_id_)
      + sizeof(SelectDistinctRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectDistinctRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[41]);
}

// ===================================================================

class DropColumnsRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const DropColumnsRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const DropColumnsRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
DropColumnsRequest::_Internal::result_id(const DropColumnsRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
DropColumnsRequest::_Internal::source_id(const DropColumnsRequest* msg) {
  return *msg->_impl_.source_id_;
}
void DropColumnsRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
DropColumnsRequest::DropColumnsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}
DropColumnsRequest::DropColumnsRequest(const DropColumnsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropColumnsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){from._impl_.column_names_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}

inline void DropColumnsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropColumnsRequest::~DropColumnsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropColumnsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void DropColumnsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropColumnsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropColumnsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // repeated string column_names = 3;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  return target;
}

size_t DropColumnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_names_.size());
  for (int i = 0, n = _impl_.column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_names_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropColumnsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropColumnsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropColumnsRequest::GetClassData() const { return &_class_data_; }


void DropColumnsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropColumnsRequest*>(&to_msg);
  auto& from = static_cast<const DropColumnsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_names_.MergeFrom(from._impl_.column_names_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropColumnsRequest::CopyFrom(const DropColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropColumnsRequest::IsInitialized() const {
  return true;
}

void DropColumnsRequest::InternalSwap(DropColumnsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.source_id_)
      + sizeof(DropColumnsRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropColumnsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[42]);
}

// ===================================================================

class UnstructuredFilterTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const UnstructuredFilterTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const UnstructuredFilterTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
UnstructuredFilterTableRequest::_Internal::result_id(const UnstructuredFilterTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
UnstructuredFilterTableRequest::_Internal::source_id(const UnstructuredFilterTableRequest* msg) {
  return *msg->_impl_.source_id_;
}
void UnstructuredFilterTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}
UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(const UnstructuredFilterTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnstructuredFilterTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}

inline void UnstructuredFilterTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnstructuredFilterTableRequest::~UnstructuredFilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnstructuredFilterTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void UnstructuredFilterTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnstructuredFilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnstructuredFilterTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnstructuredFilterTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // repeated string filters = 3;
  for (int i = 0, n = this->_internal_filters_size(); i < n; i++) {
    const auto& s = this->_internal_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  return target;
}

size_t UnstructuredFilterTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.filters_.size());
  for (int i = 0, n = _impl_.filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.filters_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnstructuredFilterTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnstructuredFilterTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnstructuredFilterTableRequest::GetClassData() const { return &_class_data_; }


void UnstructuredFilterTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnstructuredFilterTableRequest*>(&to_msg);
  auto& from = static_cast<const UnstructuredFilterTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnstructuredFilterTableRequest::CopyFrom(const UnstructuredFilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnstructuredFilterTableRequest::IsInitialized() const {
  return true;
}

void UnstructuredFilterTableRequest::InternalSwap(UnstructuredFilterTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.source_id_)
      + sizeof(UnstructuredFilterTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnstructuredFilterTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[43]);
}

// ===================================================================

class HeadOrTailRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const HeadOrTailRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const HeadOrTailRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HeadOrTailRequest::_Internal::result_id(const HeadOrTailRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
HeadOrTailRequest::_Internal::source_id(const HeadOrTailRequest* msg) {
  return *msg->_impl_.source_id_;
}
void HeadOrTailRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
HeadOrTailRequest::HeadOrTailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}
HeadOrTailRequest::HeadOrTailRequest(const HeadOrTailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeadOrTailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.num_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  _this->_impl_.num_rows_ = from._impl_.num_rows_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}

inline void HeadOrTailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeadOrTailRequest::~HeadOrTailRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeadOrTailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void HeadOrTailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeadOrTailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _impl_.num_rows_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadOrTailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 num_rows = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeadOrTailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(3, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  return target;
}

size_t HeadOrTailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeadOrTailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeadOrTailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeadOrTailRequest::GetClassData() const { return &_class_data_; }


void HeadOrTailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeadOrTailRequest*>(&to_msg);
  auto& from = static_cast<const HeadOrTailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeadOrTailRequest::CopyFrom(const HeadOrTailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrTailRequest::IsInitialized() const {
  return true;
}

void HeadOrTailRequest::InternalSwap(HeadOrTailRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.num_rows_)
      + sizeof(HeadOrTailRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadOrTailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[44]);
}

// ===================================================================

class HeadOrTailByRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const HeadOrTailByRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const HeadOrTailByRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
HeadOrTailByRequest::_Internal::result_id(const HeadOrTailByRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
HeadOrTailByRequest::_Internal::source_id(const HeadOrTailByRequest* msg) {
  return *msg->_impl_.source_id_;
}
void HeadOrTailByRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
HeadOrTailByRequest::HeadOrTailByRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}
HeadOrTailByRequest::HeadOrTailByRequest(const HeadOrTailByRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeadOrTailByRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_by_column_specs_){from._impl_.group_by_column_specs_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.num_rows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  _this->_impl_.num_rows_ = from._impl_.num_rows_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}

inline void HeadOrTailByRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_by_column_specs_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.num_rows_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeadOrTailByRequest::~HeadOrTailByRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeadOrTailByRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_by_column_specs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void HeadOrTailByRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeadOrTailByRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_by_column_specs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _impl_.num_rows_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadOrTailByRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 num_rows = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_column_specs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_column_specs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeadOrTailByRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(3, this->_internal_num_rows(), target);
  }

  // repeated string group_by_column_specs = 4;
  for (int i = 0, n = this->_internal_group_by_column_specs_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_column_specs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  return target;
}

size_t HeadOrTailByRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string group_by_column_specs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.group_by_column_specs_.size());
  for (int i = 0, n = _impl_.group_by_column_specs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.group_by_column_specs_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // sint64 num_rows = 3 [jstype = JS_STRING];
  if (this->_internal_num_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_num_rows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeadOrTailByRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeadOrTailByRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeadOrTailByRequest::GetClassData() const { return &_class_data_; }


void HeadOrTailByRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeadOrTailByRequest*>(&to_msg);
  auto& from = static_cast<const HeadOrTailByRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_by_column_specs_.MergeFrom(from._impl_.group_by_column_specs_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_num_rows() != 0) {
    _this->_internal_set_num_rows(from._internal_num_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeadOrTailByRequest::CopyFrom(const HeadOrTailByRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadOrTailByRequest::IsInitialized() const {
  return true;
}

void HeadOrTailByRequest::InternalSwap(HeadOrTailByRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.group_by_column_specs_.InternalSwap(&other->_impl_.group_by_column_specs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.num_rows_)
      + sizeof(HeadOrTailByRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadOrTailByRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[45]);
}

// ===================================================================

class UngroupRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const UngroupRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const UngroupRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
UngroupRequest::_Internal::result_id(const UngroupRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
UngroupRequest::_Internal::source_id(const UngroupRequest* msg) {
  return *msg->_impl_.source_id_;
}
void UngroupRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
UngroupRequest::UngroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}
UngroupRequest::UngroupRequest(const UngroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UngroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_ungroup_){from._impl_.columns_to_ungroup_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.null_fill_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  _this->_impl_.null_fill_ = from._impl_.null_fill_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}

inline void UngroupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_ungroup_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.null_fill_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UngroupRequest::~UngroupRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UngroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_to_ungroup_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void UngroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UngroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_ungroup_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _impl_.null_fill_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UngroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool null_fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.null_fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_ungroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_ungroup();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UngroupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // bool null_fill = 3;
  if (this->_internal_null_fill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_null_fill(), target);
  }

  // repeated string columns_to_ungroup = 4;
  for (int i = 0, n = this->_internal_columns_to_ungroup_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_ungroup(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UngroupRequest)
  return target;
}

size_t UngroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_ungroup = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_ungroup_.size());
  for (int i = 0, n = _impl_.columns_to_ungroup_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_ungroup_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // bool null_fill = 3;
  if (this->_internal_null_fill() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UngroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UngroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UngroupRequest::GetClassData() const { return &_class_data_; }


void UngroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UngroupRequest*>(&to_msg);
  auto& from = static_cast<const UngroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_to_ungroup_.MergeFrom(from._impl_.columns_to_ungroup_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_null_fill() != 0) {
    _this->_internal_set_null_fill(from._internal_null_fill());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UngroupRequest::CopyFrom(const UngroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UngroupRequest::IsInitialized() const {
  return true;
}

void UngroupRequest::InternalSwap(UngroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_to_ungroup_.InternalSwap(&other->_impl_.columns_to_ungroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.null_fill_)
      + sizeof(UngroupRequest::_impl_.null_fill_)
      - PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UngroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[46]);
}

// ===================================================================

class MergeTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const MergeTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
MergeTablesRequest::_Internal::result_id(const MergeTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
void MergeTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
MergeTablesRequest::MergeTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}
MergeTablesRequest::MergeTablesRequest(const MergeTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_ids_){from._impl_.source_ids_}
    , decltype(_impl_.key_column_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_column().empty()) {
    _this->_impl_.key_column_.Set(from._internal_key_column(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}

inline void MergeTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_ids_){arena}
    , decltype(_impl_.key_column_){}
    , decltype(_impl_.result_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MergeTablesRequest::~MergeTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_ids_.~RepeatedPtrField();
  _impl_.key_column_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
}

void MergeTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_ids_.Clear();
  _impl_.key_column_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string key_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string key_column = 3;
  if (!this->_internal_key_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_column().data(), static_cast<int>(this->_internal_key_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  return target;
}

size_t MergeTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
  total_size += 1UL * this->_internal_source_ids_size();
  for (const auto& msg : this->_impl_.source_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key_column = 3;
  if (!this->_internal_key_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_column());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeTablesRequest::GetClassData() const { return &_class_data_; }


void MergeTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeTablesRequest*>(&to_msg);
  auto& from = static_cast<const MergeTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_ids_.MergeFrom(from._impl_.source_ids_);
  if (!from._internal_key_column().empty()) {
    _this->_internal_set_key_column(from._internal_key_column());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeTablesRequest::CopyFrom(const MergeTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTablesRequest::IsInitialized() const {
  return true;
}

void MergeTablesRequest::InternalSwap(MergeTablesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.source_ids_.InternalSwap(&other->_impl_.source_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_column_, lhs_arena,
      &other->_impl_.key_column_, rhs_arena
  );
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[47]);
}

// ===================================================================

class SnapshotTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SnapshotTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SnapshotTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SnapshotTableRequest::_Internal::result_id(const SnapshotTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SnapshotTableRequest::_Internal::source_id(const SnapshotTableRequest* msg) {
  return *msg->_impl_.source_id_;
}
void SnapshotTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
SnapshotTableRequest::SnapshotTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}
SnapshotTableRequest::SnapshotTableRequest(const SnapshotTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}

inline void SnapshotTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotTableRequest::~SnapshotTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void SnapshotTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  return target;
}

size_t SnapshotTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotTableRequest::GetClassData() const { return &_class_data_; }


void SnapshotTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotTableRequest*>(&to_msg);
  auto& from = static_cast<const SnapshotTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotTableRequest::CopyFrom(const SnapshotTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotTableRequest::IsInitialized() const {
  return true;
}

void SnapshotTableRequest::InternalSwap(SnapshotTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.source_id_)
      + sizeof(SnapshotTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[48]);
}

// ===================================================================

class SnapshotWhenTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SnapshotWhenTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& base_id(const SnapshotWhenTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& trigger_id(const SnapshotWhenTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SnapshotWhenTableRequest::_Internal::result_id(const SnapshotWhenTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SnapshotWhenTableRequest::_Internal::base_id(const SnapshotWhenTableRequest* msg) {
  return *msg->_impl_.base_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SnapshotWhenTableRequest::_Internal::trigger_id(const SnapshotWhenTableRequest* msg) {
  return *msg->_impl_.trigger_id_;
}
void SnapshotWhenTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
SnapshotWhenTableRequest::SnapshotWhenTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
}
SnapshotWhenTableRequest::SnapshotWhenTableRequest(const SnapshotWhenTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotWhenTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stamp_columns_){from._impl_.stamp_columns_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.base_id_){nullptr}
    , decltype(_impl_.trigger_id_){nullptr}
    , decltype(_impl_.initial_){}
    , decltype(_impl_.incremental_){}
    , decltype(_impl_.history_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_base_id()) {
    _this->_impl_.base_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.base_id_);
  }
  if (from._internal_has_trigger_id()) {
    _this->_impl_.trigger_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.trigger_id_);
  }
  ::memcpy(&_impl_.initial_, &from._impl_.initial_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.history_) -
    reinterpret_cast<char*>(&_impl_.initial_)) + sizeof(_impl_.history_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
}

inline void SnapshotWhenTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stamp_columns_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.base_id_){nullptr}
    , decltype(_impl_.trigger_id_){nullptr}
    , decltype(_impl_.initial_){false}
    , decltype(_impl_.incremental_){false}
    , decltype(_impl_.history_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotWhenTableRequest::~SnapshotWhenTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotWhenTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stamp_columns_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.base_id_;
  if (this != internal_default_instance()) delete _impl_.trigger_id_;
}

void SnapshotWhenTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotWhenTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stamp_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.base_id_ != nullptr) {
    delete _impl_.base_id_;
  }
  _impl_.base_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_id_ != nullptr) {
    delete _impl_.trigger_id_;
  }
  _impl_.trigger_id_ = nullptr;
  ::memset(&_impl_.initial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.history_) -
      reinterpret_cast<char*>(&_impl_.initial_)) + sizeof(_impl_.history_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotWhenTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference base_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference trigger_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool initial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool incremental = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.incremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool history = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stamp_columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stamp_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest.stamp_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotWhenTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference base_id = 2;
  if (this->_internal_has_base_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::base_id(this),
        _Internal::base_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference trigger_id = 3;
  if (this->_internal_has_trigger_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trigger_id(this),
        _Internal::trigger_id(this).GetCachedSize(), target, stream);
  }

  // bool initial = 4;
  if (this->_internal_initial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_initial(), target);
  }

  // bool incremental = 5;
  if (this->_internal_incremental() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_incremental(), target);
  }

  // bool history = 6;
  if (this->_internal_history() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_history(), target);
  }

  // repeated string stamp_columns = 7;
  for (int i = 0, n = this->_internal_stamp_columns_size(); i < n; i++) {
    const auto& s = this->_internal_stamp_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest.stamp_columns");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  return target;
}

size_t SnapshotWhenTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stamp_columns = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stamp_columns_.size());
  for (int i = 0, n = _impl_.stamp_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stamp_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference base_id = 2;
  if (this->_internal_has_base_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference trigger_id = 3;
  if (this->_internal_has_trigger_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trigger_id_);
  }

  // bool initial = 4;
  if (this->_internal_initial() != 0) {
    total_size += 1 + 1;
  }

  // bool incremental = 5;
  if (this->_internal_incremental() != 0) {
    total_size += 1 + 1;
  }

  // bool history = 6;
  if (this->_internal_history() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotWhenTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotWhenTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotWhenTableRequest::GetClassData() const { return &_class_data_; }


void SnapshotWhenTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotWhenTableRequest*>(&to_msg);
  auto& from = static_cast<const SnapshotWhenTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stamp_columns_.MergeFrom(from._impl_.stamp_columns_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_base_id()) {
    _this->_internal_mutable_base_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_base_id());
  }
  if (from._internal_has_trigger_id()) {
    _this->_internal_mutable_trigger_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_trigger_id());
  }
  if (from._internal_initial() != 0) {
    _this->_internal_set_initial(from._internal_initial());
  }
  if (from._internal_incremental() != 0) {
    _this->_internal_set_incremental(from._internal_incremental());
  }
  if (from._internal_history() != 0) {
    _this->_internal_set_history(from._internal_history());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotWhenTableRequest::CopyFrom(const SnapshotWhenTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotWhenTableRequest::IsInitialized() const {
  return true;
}

void SnapshotWhenTableRequest::InternalSwap(SnapshotWhenTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stamp_columns_.InternalSwap(&other->_impl_.stamp_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.history_)
      + sizeof(SnapshotWhenTableRequest::_impl_.history_)
      - PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotWhenTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[49]);
}

// ===================================================================

class CrossJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const CrossJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const CrossJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const CrossJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CrossJoinTablesRequest::_Internal::result_id(const CrossJoinTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
CrossJoinTablesRequest::_Internal::left_id(const CrossJoinTablesRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
CrossJoinTablesRequest::_Internal::right_id(const CrossJoinTablesRequest* msg) {
  return *msg->_impl_.right_id_;
}
void CrossJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
CrossJoinTablesRequest::CrossJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
}
CrossJoinTablesRequest::CrossJoinTablesRequest(const CrossJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CrossJoinTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){from._impl_.columns_to_match_}
    , decltype(_impl_.columns_to_add_){from._impl_.columns_to_add_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.reserve_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  _this->_impl_.reserve_bits_ = from._impl_.reserve_bits_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
}

inline void CrossJoinTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){arena}
    , decltype(_impl_.columns_to_add_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.reserve_bits_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CrossJoinTablesRequest::~CrossJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_to_match_.~RepeatedPtrField();
  _impl_.columns_to_add_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void CrossJoinTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrossJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  _impl_.reserve_bits_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossJoinTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_match"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_add"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 reserve_bits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.reserve_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossJoinTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  // int32 reserve_bits = 6;
  if (this->_internal_reserve_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_reserve_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  return target;
}

size_t CrossJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_match_.size());
  for (int i = 0, n = _impl_.columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_add_.size());
  for (int i = 0, n = _impl_.columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  // int32 reserve_bits = 6;
  if (this->_internal_reserve_bits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reserve_bits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CrossJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossJoinTablesRequest::GetClassData() const { return &_class_data_; }


void CrossJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CrossJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const CrossJoinTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_to_match_.MergeFrom(from._impl_.columns_to_match_);
  _this->_impl_.columns_to_add_.MergeFrom(from._impl_.columns_to_add_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  if (from._internal_reserve_bits() != 0) {
    _this->_internal_set_reserve_bits(from._internal_reserve_bits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossJoinTablesRequest::CopyFrom(const CrossJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossJoinTablesRequest::IsInitialized() const {
  return true;
}

void CrossJoinTablesRequest::InternalSwap(CrossJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.reserve_bits_)
      + sizeof(CrossJoinTablesRequest::_impl_.reserve_bits_)
      - PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossJoinTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[50]);
}

// ===================================================================

class NaturalJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const NaturalJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const NaturalJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const NaturalJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
NaturalJoinTablesRequest::_Internal::result_id(const NaturalJoinTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
NaturalJoinTablesRequest::_Internal::left_id(const NaturalJoinTablesRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
NaturalJoinTablesRequest::_Internal::right_id(const NaturalJoinTablesRequest* msg) {
  return *msg->_impl_.right_id_;
}
void NaturalJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
NaturalJoinTablesRequest::NaturalJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
}
NaturalJoinTablesRequest::NaturalJoinTablesRequest(const NaturalJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NaturalJoinTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){from._impl_.columns_to_match_}
    , decltype(_impl_.columns_to_add_){from._impl_.columns_to_add_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
}

inline void NaturalJoinTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){arena}
    , decltype(_impl_.columns_to_add_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NaturalJoinTablesRequest::~NaturalJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NaturalJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_to_match_.~RepeatedPtrField();
  _impl_.columns_to_add_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void NaturalJoinTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NaturalJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaturalJoinTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_match"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_add"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NaturalJoinTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  return target;
}

size_t NaturalJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_match_.size());
  for (int i = 0, n = _impl_.columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_add_.size());
  for (int i = 0, n = _impl_.columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaturalJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NaturalJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaturalJoinTablesRequest::GetClassData() const { return &_class_data_; }


void NaturalJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NaturalJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const NaturalJoinTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_to_match_.MergeFrom(from._impl_.columns_to_match_);
  _this->_impl_.columns_to_add_.MergeFrom(from._impl_.columns_to_add_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaturalJoinTablesRequest::CopyFrom(const NaturalJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaturalJoinTablesRequest::IsInitialized() const {
  return true;
}

void NaturalJoinTablesRequest::InternalSwap(NaturalJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.right_id_)
      + sizeof(NaturalJoinTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NaturalJoinTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[51]);
}

// ===================================================================

class ExactJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const ExactJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const ExactJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const ExactJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ExactJoinTablesRequest::_Internal::result_id(const ExactJoinTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ExactJoinTablesRequest::_Internal::left_id(const ExactJoinTablesRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ExactJoinTablesRequest::_Internal::right_id(const ExactJoinTablesRequest* msg) {
  return *msg->_impl_.right_id_;
}
void ExactJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
ExactJoinTablesRequest::ExactJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
}
ExactJoinTablesRequest::ExactJoinTablesRequest(const ExactJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExactJoinTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){from._impl_.columns_to_match_}
    , decltype(_impl_.columns_to_add_){from._impl_.columns_to_add_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
}

inline void ExactJoinTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){arena}
    , decltype(_impl_.columns_to_add_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExactJoinTablesRequest::~ExactJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExactJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_to_match_.~RepeatedPtrField();
  _impl_.columns_to_add_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void ExactJoinTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExactJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExactJoinTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_match"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_add"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExactJoinTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  return target;
}

size_t ExactJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_match_.size());
  for (int i = 0, n = _impl_.columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_add_.size());
  for (int i = 0, n = _impl_.columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExactJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExactJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExactJoinTablesRequest::GetClassData() const { return &_class_data_; }


void ExactJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExactJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const ExactJoinTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_to_match_.MergeFrom(from._impl_.columns_to_match_);
  _this->_impl_.columns_to_add_.MergeFrom(from._impl_.columns_to_add_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExactJoinTablesRequest::CopyFrom(const ExactJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactJoinTablesRequest::IsInitialized() const {
  return true;
}

void ExactJoinTablesRequest::InternalSwap(ExactJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.right_id_)
      + sizeof(ExactJoinTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExactJoinTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[52]);
}

// ===================================================================

class LeftJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const LeftJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const LeftJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const LeftJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
LeftJoinTablesRequest::_Internal::result_id(const LeftJoinTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
LeftJoinTablesRequest::_Internal::left_id(const LeftJoinTablesRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
LeftJoinTablesRequest::_Internal::right_id(const LeftJoinTablesRequest* msg) {
  return *msg->_impl_.right_id_;
}
void LeftJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
LeftJoinTablesRequest::LeftJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
}
LeftJoinTablesRequest::LeftJoinTablesRequest(const LeftJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeftJoinTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){from._impl_.columns_to_match_}
    , decltype(_impl_.columns_to_add_){from._impl_.columns_to_add_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
}

inline void LeftJoinTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){arena}
    , decltype(_impl_.columns_to_add_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeftJoinTablesRequest::~LeftJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeftJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_to_match_.~RepeatedPtrField();
  _impl_.columns_to_add_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void LeftJoinTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeftJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeftJoinTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_match"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_add"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeftJoinTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  return target;
}

size_t LeftJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_match_.size());
  for (int i = 0, n = _impl_.columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_add_.size());
  for (int i = 0, n = _impl_.columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeftJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeftJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeftJoinTablesRequest::GetClassData() const { return &_class_data_; }


void LeftJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeftJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const LeftJoinTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_to_match_.MergeFrom(from._impl_.columns_to_match_);
  _this->_impl_.columns_to_add_.MergeFrom(from._impl_.columns_to_add_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeftJoinTablesRequest::CopyFrom(const LeftJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeftJoinTablesRequest::IsInitialized() const {
  return true;
}

void LeftJoinTablesRequest::InternalSwap(LeftJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.right_id_)
      + sizeof(LeftJoinTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeftJoinTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[53]);
}

// ===================================================================

class AsOfJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const AsOfJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const AsOfJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const AsOfJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
AsOfJoinTablesRequest::_Internal::result_id(const AsOfJoinTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AsOfJoinTablesRequest::_Internal::left_id(const AsOfJoinTablesRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AsOfJoinTablesRequest::_Internal::right_id(const AsOfJoinTablesRequest* msg) {
  return *msg->_impl_.right_id_;
}
void AsOfJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
AsOfJoinTablesRequest::AsOfJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
}
AsOfJoinTablesRequest::AsOfJoinTablesRequest(const AsOfJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AsOfJoinTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){from._impl_.columns_to_match_}
    , decltype(_impl_.columns_to_add_){from._impl_.columns_to_add_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.as_of_match_rule_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  _this->_impl_.as_of_match_rule_ = from._impl_.as_of_match_rule_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
}

inline void AsOfJoinTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){arena}
    , decltype(_impl_.columns_to_add_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.as_of_match_rule_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AsOfJoinTablesRequest::~AsOfJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AsOfJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_to_match_.~RepeatedPtrField();
  _impl_.columns_to_add_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void AsOfJoinTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AsOfJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  _impl_.as_of_match_rule_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsOfJoinTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_match"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_add"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_as_of_match_rule(static_cast<::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest_MatchRule>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AsOfJoinTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // repeated string columns_to_match = 4;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_match");
    target = stream->WriteString(4, s, target);
  }

  // repeated string columns_to_add = 5;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_add");
    target = stream->WriteString(5, s, target);
  }

  // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
  if (this->_internal_as_of_match_rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_as_of_match_rule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  return target;
}

size_t AsOfJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_match_.size());
  for (int i = 0, n = _impl_.columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_match_.Get(i));
  }

  // repeated string columns_to_add = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_add_.size());
  for (int i = 0, n = _impl_.columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_add_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
  if (this->_internal_as_of_match_rule() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_as_of_match_rule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AsOfJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AsOfJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AsOfJoinTablesRequest::GetClassData() const { return &_class_data_; }


void AsOfJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AsOfJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const AsOfJoinTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_to_match_.MergeFrom(from._impl_.columns_to_match_);
  _this->_impl_.columns_to_add_.MergeFrom(from._impl_.columns_to_add_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  if (from._internal_as_of_match_rule() != 0) {
    _this->_internal_set_as_of_match_rule(from._internal_as_of_match_rule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AsOfJoinTablesRequest::CopyFrom(const AsOfJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsOfJoinTablesRequest::IsInitialized() const {
  return true;
}

void AsOfJoinTablesRequest::InternalSwap(AsOfJoinTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.as_of_match_rule_)
      + sizeof(AsOfJoinTablesRequest::_impl_.as_of_match_rule_)
      - PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsOfJoinTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[54]);
}

// ===================================================================

class AjRajTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const AjRajTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const AjRajTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const AjRajTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
AjRajTablesRequest::_Internal::result_id(const AjRajTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AjRajTablesRequest::_Internal::left_id(const AjRajTablesRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AjRajTablesRequest::_Internal::right_id(const AjRajTablesRequest* msg) {
  return *msg->_impl_.right_id_;
}
void AjRajTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
AjRajTablesRequest::AjRajTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
}
AjRajTablesRequest::AjRajTablesRequest(const AjRajTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AjRajTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exact_match_columns_){from._impl_.exact_match_columns_}
    , decltype(_impl_.columns_to_add_){from._impl_.columns_to_add_}
    , decltype(_impl_.as_of_column_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.as_of_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.as_of_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_as_of_column().empty()) {
    _this->_impl_.as_of_column_.Set(from._internal_as_of_column(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
}

inline void AjRajTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exact_match_columns_){arena}
    , decltype(_impl_.columns_to_add_){arena}
    , decltype(_impl_.as_of_column_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.as_of_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.as_of_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AjRajTablesRequest::~AjRajTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AjRajTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exact_match_columns_.~RepeatedPtrField();
  _impl_.columns_to_add_.~RepeatedPtrField();
  _impl_.as_of_column_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void AjRajTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AjRajTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exact_match_columns_.Clear();
  _impl_.columns_to_add_.Clear();
  _impl_.as_of_column_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AjRajTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string exact_match_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exact_match_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.exact_match_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string as_of_column = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_as_of_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.as_of_column"));
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_add = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_add();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.columns_to_add"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AjRajTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // repeated string exact_match_columns = 4;
  for (int i = 0, n = this->_internal_exact_match_columns_size(); i < n; i++) {
    const auto& s = this->_internal_exact_match_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.exact_match_columns");
    target = stream->WriteString(4, s, target);
  }

  // string as_of_column = 5;
  if (!this->_internal_as_of_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_as_of_column().data(), static_cast<int>(this->_internal_as_of_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.as_of_column");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_as_of_column(), target);
  }

  // repeated string columns_to_add = 6;
  for (int i = 0, n = this->_internal_columns_to_add_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_add(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.columns_to_add");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  return target;
}

size_t AjRajTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exact_match_columns = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exact_match_columns_.size());
  for (int i = 0, n = _impl_.exact_match_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exact_match_columns_.Get(i));
  }

  // repeated string columns_to_add = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_add_.size());
  for (int i = 0, n = _impl_.columns_to_add_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_add_.Get(i));
  }

  // string as_of_column = 5;
  if (!this->_internal_as_of_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_as_of_column());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AjRajTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AjRajTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AjRajTablesRequest::GetClassData() const { return &_class_data_; }


void AjRajTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AjRajTablesRequest*>(&to_msg);
  auto& from = static_cast<const AjRajTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exact_match_columns_.MergeFrom(from._impl_.exact_match_columns_);
  _this->_impl_.columns_to_add_.MergeFrom(from._impl_.columns_to_add_);
  if (!from._internal_as_of_column().empty()) {
    _this->_internal_set_as_of_column(from._internal_as_of_column());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AjRajTablesRequest::CopyFrom(const AjRajTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AjRajTablesRequest::IsInitialized() const {
  return true;
}

void AjRajTablesRequest::InternalSwap(AjRajTablesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exact_match_columns_.InternalSwap(&other->_impl_.exact_match_columns_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.as_of_column_, lhs_arena,
      &other->_impl_.as_of_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.right_id_)
      + sizeof(AjRajTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AjRajTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[55]);
}

// ===================================================================

class RangeJoinTablesRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const RangeJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const RangeJoinTablesRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const RangeJoinTablesRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
RangeJoinTablesRequest::_Internal::result_id(const RangeJoinTablesRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
RangeJoinTablesRequest::_Internal::left_id(const RangeJoinTablesRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
RangeJoinTablesRequest::_Internal::right_id(const RangeJoinTablesRequest* msg) {
  return *msg->_impl_.right_id_;
}
void RangeJoinTablesRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
RangeJoinTablesRequest::RangeJoinTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
}
RangeJoinTablesRequest::RangeJoinTablesRequest(const RangeJoinTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeJoinTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exact_match_columns_){from._impl_.exact_match_columns_}
    , decltype(_impl_.aggregations_){from._impl_.aggregations_}
    , decltype(_impl_.left_start_column_){}
    , decltype(_impl_.right_range_column_){}
    , decltype(_impl_.left_end_column_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.range_start_rule_){}
    , decltype(_impl_.range_end_rule_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.left_start_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.left_start_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_left_start_column().empty()) {
    _this->_impl_.left_start_column_.Set(from._internal_left_start_column(), 
      _this->GetArenaForAllocation());
  }
  _impl_.right_range_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.right_range_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_right_range_column().empty()) {
    _this->_impl_.right_range_column_.Set(from._internal_right_range_column(), 
      _this->GetArenaForAllocation());
  }
  _impl_.left_end_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.left_end_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_left_end_column().empty()) {
    _this->_impl_.left_end_column_.Set(from._internal_left_end_column(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  ::memcpy(&_impl_.range_start_rule_, &from._impl_.range_start_rule_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_end_rule_) -
    reinterpret_cast<char*>(&_impl_.range_start_rule_)) + sizeof(_impl_.range_end_rule_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
}

inline void RangeJoinTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exact_match_columns_){arena}
    , decltype(_impl_.aggregations_){arena}
    , decltype(_impl_.left_start_column_){}
    , decltype(_impl_.right_range_column_){}
    , decltype(_impl_.left_end_column_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.range_start_rule_){0}
    , decltype(_impl_.range_end_rule_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.left_start_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.left_start_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.right_range_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.right_range_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_end_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.left_end_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RangeJoinTablesRequest::~RangeJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeJoinTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exact_match_columns_.~RepeatedPtrField();
  _impl_.aggregations_.~RepeatedPtrField();
  _impl_.left_start_column_.Destroy();
  _impl_.right_range_column_.Destroy();
  _impl_.left_end_column_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void RangeJoinTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exact_match_columns_.Clear();
  _impl_.aggregations_.Clear();
  _impl_.left_start_column_.ClearToEmpty();
  _impl_.right_range_column_.ClearToEmpty();
  _impl_.left_end_column_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  ::memset(&_impl_.range_start_rule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.range_end_rule_) -
      reinterpret_cast<char*>(&_impl_.range_start_rule_)) + sizeof(_impl_.range_end_rule_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeJoinTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string exact_match_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exact_match_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.exact_match_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string left_start_column = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_left_start_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.left_start_column"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeStartRule range_start_rule = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_range_start_rule(static_cast<::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest_RangeStartRule>(val));
        } else
          goto handle_unusual;
        continue;
      // string right_range_column = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_right_range_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.right_range_column"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeEndRule range_end_rule = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_range_end_rule(static_cast<::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest_RangeEndRule>(val));
        } else
          goto handle_unusual;
        continue;
      // string left_end_column = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_left_end_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.left_end_column"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeJoinTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // repeated string exact_match_columns = 4;
  for (int i = 0, n = this->_internal_exact_match_columns_size(); i < n; i++) {
    const auto& s = this->_internal_exact_match_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.exact_match_columns");
    target = stream->WriteString(4, s, target);
  }

  // string left_start_column = 5;
  if (!this->_internal_left_start_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_left_start_column().data(), static_cast<int>(this->_internal_left_start_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.left_start_column");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_left_start_column(), target);
  }

  // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeStartRule range_start_rule = 6;
  if (this->_internal_range_start_rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_range_start_rule(), target);
  }

  // string right_range_column = 7;
  if (!this->_internal_right_range_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_right_range_column().data(), static_cast<int>(this->_internal_right_range_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.right_range_column");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_right_range_column(), target);
  }

  // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeEndRule range_end_rule = 8;
  if (this->_internal_range_end_rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_range_end_rule(), target);
  }

  // string left_end_column = 9;
  if (!this->_internal_left_end_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_left_end_column().data(), static_cast<int>(this->_internal_left_end_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.left_end_column");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_left_end_column(), target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregations_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  return target;
}

size_t RangeJoinTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exact_match_columns = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exact_match_columns_.size());
  for (int i = 0, n = _impl_.exact_match_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exact_match_columns_.Get(i));
  }

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 10;
  total_size += 1UL * this->_internal_aggregations_size();
  for (const auto& msg : this->_impl_.aggregations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string left_start_column = 5;
  if (!this->_internal_left_start_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left_start_column());
  }

  // string right_range_column = 7;
  if (!this->_internal_right_range_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_right_range_column());
  }

  // string left_end_column = 9;
  if (!this->_internal_left_end_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left_end_column());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeStartRule range_start_rule = 6;
  if (this->_internal_range_start_rule() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_start_rule());
  }

  // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeEndRule range_end_rule = 8;
  if (this->_internal_range_end_rule() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_end_rule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeJoinTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeJoinTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeJoinTablesRequest::GetClassData() const { return &_class_data_; }


void RangeJoinTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const RangeJoinTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exact_match_columns_.MergeFrom(from._impl_.exact_match_columns_);
  _this->_impl_.aggregations_.MergeFrom(from._impl_.aggregations_);
  if (!from._internal_left_start_column().empty()) {
    _this->_internal_set_left_start_column(from._internal_left_start_column());
  }
  if (!from._internal_right_range_column().empty()) {
    _this->_internal_set_right_range_column(from._internal_right_range_column());
  }
  if (!from._internal_left_end_column().empty()) {
    _this->_internal_set_left_end_column(from._internal_left_end_column());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  if (from._internal_range_start_rule() != 0) {
    _this->_internal_set_range_start_rule(from._internal_range_start_rule());
  }
  if (from._internal_range_end_rule() != 0) {
    _this->_internal_set_range_end_rule(from._internal_range_end_rule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeJoinTablesRequest::CopyFrom(const RangeJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeJoinTablesRequest::IsInitialized() const {
  return true;
}

void RangeJoinTablesRequest::InternalSwap(RangeJoinTablesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exact_match_columns_.InternalSwap(&other->_impl_.exact_match_columns_);
  _impl_.aggregations_.InternalSwap(&other->_impl_.aggregations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.left_start_column_, lhs_arena,
      &other->_impl_.left_start_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.right_range_column_, lhs_arena,
      &other->_impl_.right_range_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.left_end_column_, lhs_arena,
      &other->_impl_.left_end_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_end_rule_)
      + sizeof(RangeJoinTablesRequest::_impl_.range_end_rule_)
      - PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeJoinTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[56]);
}

// ===================================================================

class ComboAggregateRequest_Aggregate::_Internal {
 public:
};

ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}
ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(const ComboAggregateRequest_Aggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComboAggregateRequest_Aggregate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_pairs_){from._impl_.match_pairs_}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.avg_median_){}
    , decltype(_impl_.percentile_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.percentile_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.percentile_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}

inline void ComboAggregateRequest_Aggregate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_pairs_){arena}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.avg_median_){false}
    , decltype(_impl_.percentile_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComboAggregateRequest_Aggregate::~ComboAggregateRequest_Aggregate() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComboAggregateRequest_Aggregate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_pairs_.~RepeatedPtrField();
  _impl_.column_name_.Destroy();
}

void ComboAggregateRequest_Aggregate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComboAggregateRequest_Aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_pairs_.Clear();
  _impl_.column_name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.percentile_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.percentile_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboAggregateRequest_Aggregate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string match_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_pairs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string column_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name"));
        } else
          goto handle_unusual;
        continue;
      // double percentile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool avg_median = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.avg_median_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComboAggregateRequest_Aggregate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string match_pairs = 2;
  for (int i = 0, n = this->_internal_match_pairs_size(); i < n; i++) {
    const auto& s = this->_internal_match_pairs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs");
    target = stream->WriteString(2, s, target);
  }

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_column_name(), target);
  }

  // double percentile = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = this->_internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_percentile(), target);
  }

  // bool avg_median = 5;
  if (this->_internal_avg_median() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_avg_median(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  return target;
}

size_t ComboAggregateRequest_Aggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_pairs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.match_pairs_.size());
  for (int i = 0, n = _impl_.match_pairs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.match_pairs_.Get(i));
  }

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool avg_median = 5;
  if (this->_internal_avg_median() != 0) {
    total_size += 1 + 1;
  }

  // double percentile = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = this->_internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComboAggregateRequest_Aggregate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComboAggregateRequest_Aggregate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComboAggregateRequest_Aggregate::GetClassData() const { return &_class_data_; }


void ComboAggregateRequest_Aggregate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComboAggregateRequest_Aggregate*>(&to_msg);
  auto& from = static_cast<const ComboAggregateRequest_Aggregate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_pairs_.MergeFrom(from._impl_.match_pairs_);
  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_avg_median() != 0) {
    _this->_internal_set_avg_median(from._internal_avg_median());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = from._internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    _this->_internal_set_percentile(from._internal_percentile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComboAggregateRequest_Aggregate::CopyFrom(const ComboAggregateRequest_Aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboAggregateRequest_Aggregate::IsInitialized() const {
  return true;
}

void ComboAggregateRequest_Aggregate::InternalSwap(ComboAggregateRequest_Aggregate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.match_pairs_.InternalSwap(&other->_impl_.match_pairs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.percentile_)
      + sizeof(ComboAggregateRequest_Aggregate::_impl_.percentile_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboAggregateRequest_Aggregate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[57]);
}

// ===================================================================

class ComboAggregateRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const ComboAggregateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const ComboAggregateRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ComboAggregateRequest::_Internal::result_id(const ComboAggregateRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ComboAggregateRequest::_Internal::source_id(const ComboAggregateRequest* msg) {
  return *msg->_impl_.source_id_;
}
void ComboAggregateRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
ComboAggregateRequest::ComboAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}
ComboAggregateRequest::ComboAggregateRequest(const ComboAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComboAggregateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregates_){from._impl_.aggregates_}
    , decltype(_impl_.group_by_columns_){from._impl_.group_by_columns_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.force_combo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  _this->_impl_.force_combo_ = from._impl_.force_combo_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}

inline void ComboAggregateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregates_){arena}
    , decltype(_impl_.group_by_columns_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.force_combo_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComboAggregateRequest::~ComboAggregateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComboAggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aggregates_.~RepeatedPtrField();
  _impl_.group_by_columns_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void ComboAggregateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComboAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aggregates_.Clear();
  _impl_.group_by_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _impl_.force_combo_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboAggregateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool force_combo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.force_combo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComboAggregateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregates_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string group_by_columns = 4;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns");
    target = stream->WriteString(4, s, target);
  }

  // bool force_combo = 5;
  if (this->_internal_force_combo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_force_combo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  return target;
}

size_t ComboAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
  total_size += 1UL * this->_internal_aggregates_size();
  for (const auto& msg : this->_impl_.aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string group_by_columns = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.group_by_columns_.size());
  for (int i = 0, n = _impl_.group_by_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.group_by_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // bool force_combo = 5;
  if (this->_internal_force_combo() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComboAggregateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComboAggregateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComboAggregateRequest::GetClassData() const { return &_class_data_; }


void ComboAggregateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComboAggregateRequest*>(&to_msg);
  auto& from = static_cast<const ComboAggregateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aggregates_.MergeFrom(from._impl_.aggregates_);
  _this->_impl_.group_by_columns_.MergeFrom(from._impl_.group_by_columns_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_force_combo() != 0) {
    _this->_internal_set_force_combo(from._internal_force_combo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComboAggregateRequest::CopyFrom(const ComboAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboAggregateRequest::IsInitialized() const {
  return true;
}

void ComboAggregateRequest::InternalSwap(ComboAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aggregates_.InternalSwap(&other->_impl_.aggregates_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.force_combo_)
      + sizeof(ComboAggregateRequest::_impl_.force_combo_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboAggregateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[58]);
}

// ===================================================================

class AggregateAllRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const AggregateAllRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const AggregateAllRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec& spec(const AggregateAllRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
AggregateAllRequest::_Internal::result_id(const AggregateAllRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AggregateAllRequest::_Internal::source_id(const AggregateAllRequest* msg) {
  return *msg->_impl_.source_id_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec&
AggregateAllRequest::_Internal::spec(const AggregateAllRequest* msg) {
  return *msg->_impl_.spec_;
}
void AggregateAllRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
AggregateAllRequest::AggregateAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
}
AggregateAllRequest::AggregateAllRequest(const AggregateAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateAllRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_by_columns_){from._impl_.group_by_columns_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::io::deephaven::proto::backplane::grpc::AggSpec(*from._impl_.spec_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
}

inline void AggregateAllRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_by_columns_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggregateAllRequest::~AggregateAllRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_by_columns_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.spec_;
}

void AggregateAllRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_by_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateAllRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AggregateAllRequest.group_by_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateAllRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec spec = 3;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // repeated string group_by_columns = 4;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AggregateAllRequest.group_by_columns");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  return target;
}

size_t AggregateAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string group_by_columns = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.group_by_columns_.size());
  for (int i = 0, n = _impl_.group_by_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.group_by_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateAllRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateAllRequest::GetClassData() const { return &_class_data_; }


void AggregateAllRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateAllRequest*>(&to_msg);
  auto& from = static_cast<const AggregateAllRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_by_columns_.MergeFrom(from._impl_.group_by_columns_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::io::deephaven::proto::backplane::grpc::AggSpec::MergeFrom(
        from._internal_spec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateAllRequest::CopyFrom(const AggregateAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateAllRequest::IsInitialized() const {
  return true;
}

void AggregateAllRequest::InternalSwap(AggregateAllRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.spec_)
      + sizeof(AggregateAllRequest::_impl_.spec_)
      - PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateAllRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[59]);
}

// ===================================================================

class AggSpec_AggSpecApproximatePercentile::_Internal {
 public:
  using HasBits = decltype(std::declval<AggSpec_AggSpecApproximatePercentile>()._impl_._has_bits_);
  static void set_has_compression(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AggSpec_AggSpecApproximatePercentile::AggSpec_AggSpecApproximatePercentile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
}
AggSpec_AggSpecApproximatePercentile::AggSpec_AggSpecApproximatePercentile(const AggSpec_AggSpecApproximatePercentile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecApproximatePercentile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.percentile_){}
    , decltype(_impl_.compression_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.percentile_, &from._impl_.percentile_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compression_) -
    reinterpret_cast<char*>(&_impl_.percentile_)) + sizeof(_impl_.compression_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
}

inline void AggSpec_AggSpecApproximatePercentile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.percentile_){0}
    , decltype(_impl_.compression_){0}
  };
}

AggSpec_AggSpecApproximatePercentile::~AggSpec_AggSpecApproximatePercentile() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecApproximatePercentile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggSpec_AggSpecApproximatePercentile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecApproximatePercentile::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.percentile_ = 0;
  _impl_.compression_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecApproximatePercentile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double percentile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double compression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_compression(&has_bits);
          _impl_.compression_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecApproximatePercentile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double percentile = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = this->_internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_percentile(), target);
  }

  // optional double compression = 2;
  if (_internal_has_compression()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_compression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  return target;
}

size_t AggSpec_AggSpecApproximatePercentile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double percentile = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = this->_internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    total_size += 1 + 8;
  }

  // optional double compression = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecApproximatePercentile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecApproximatePercentile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecApproximatePercentile::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecApproximatePercentile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecApproximatePercentile*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecApproximatePercentile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = from._internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    _this->_internal_set_percentile(from._internal_percentile());
  }
  if (from._internal_has_compression()) {
    _this->_internal_set_compression(from._internal_compression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecApproximatePercentile::CopyFrom(const AggSpec_AggSpecApproximatePercentile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecApproximatePercentile::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecApproximatePercentile::InternalSwap(AggSpec_AggSpecApproximatePercentile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.compression_)
      + sizeof(AggSpec_AggSpecApproximatePercentile::_impl_.compression_)
      - PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.percentile_)>(
          reinterpret_cast<char*>(&_impl_.percentile_),
          reinterpret_cast<char*>(&other->_impl_.percentile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecApproximatePercentile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[60]);
}

// ===================================================================

class AggSpec_AggSpecCountDistinct::_Internal {
 public:
};

AggSpec_AggSpecCountDistinct::AggSpec_AggSpecCountDistinct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
}
AggSpec_AggSpecCountDistinct::AggSpec_AggSpecCountDistinct(const AggSpec_AggSpecCountDistinct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecCountDistinct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_nulls_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_nulls_ = from._impl_.count_nulls_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
}

inline void AggSpec_AggSpecCountDistinct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_nulls_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggSpec_AggSpecCountDistinct::~AggSpec_AggSpecCountDistinct() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecCountDistinct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggSpec_AggSpecCountDistinct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecCountDistinct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_nulls_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecCountDistinct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool count_nulls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_nulls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecCountDistinct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool count_nulls = 1;
  if (this->_internal_count_nulls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_count_nulls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  return target;
}

size_t AggSpec_AggSpecCountDistinct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool count_nulls = 1;
  if (this->_internal_count_nulls() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecCountDistinct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecCountDistinct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecCountDistinct::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecCountDistinct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecCountDistinct*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecCountDistinct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count_nulls() != 0) {
    _this->_internal_set_count_nulls(from._internal_count_nulls());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecCountDistinct::CopyFrom(const AggSpec_AggSpecCountDistinct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecCountDistinct::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecCountDistinct::InternalSwap(AggSpec_AggSpecCountDistinct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_nulls_, other->_impl_.count_nulls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecCountDistinct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[61]);
}

// ===================================================================

class AggSpec_AggSpecDistinct::_Internal {
 public:
};

AggSpec_AggSpecDistinct::AggSpec_AggSpecDistinct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
}
AggSpec_AggSpecDistinct::AggSpec_AggSpecDistinct(const AggSpec_AggSpecDistinct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecDistinct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.include_nulls_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.include_nulls_ = from._impl_.include_nulls_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
}

inline void AggSpec_AggSpecDistinct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.include_nulls_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggSpec_AggSpecDistinct::~AggSpec_AggSpecDistinct() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecDistinct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggSpec_AggSpecDistinct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecDistinct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_nulls_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecDistinct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool include_nulls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.include_nulls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecDistinct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_nulls = 1;
  if (this->_internal_include_nulls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_include_nulls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  return target;
}

size_t AggSpec_AggSpecDistinct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_nulls = 1;
  if (this->_internal_include_nulls() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecDistinct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecDistinct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecDistinct::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecDistinct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecDistinct*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecDistinct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_include_nulls() != 0) {
    _this->_internal_set_include_nulls(from._internal_include_nulls());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecDistinct::CopyFrom(const AggSpec_AggSpecDistinct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecDistinct::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecDistinct::InternalSwap(AggSpec_AggSpecDistinct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.include_nulls_, other->_impl_.include_nulls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecDistinct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[62]);
}

// ===================================================================

class AggSpec_AggSpecFormula::_Internal {
 public:
};

AggSpec_AggSpecFormula::AggSpec_AggSpecFormula(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
}
AggSpec_AggSpecFormula::AggSpec_AggSpecFormula(const AggSpec_AggSpecFormula& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecFormula* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.formula_){}
    , decltype(_impl_.param_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.formula_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formula_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_formula().empty()) {
    _this->_impl_.formula_.Set(from._internal_formula(), 
      _this->GetArenaForAllocation());
  }
  _impl_.param_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_param_token().empty()) {
    _this->_impl_.param_token_.Set(from._internal_param_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
}

inline void AggSpec_AggSpecFormula::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.formula_){}
    , decltype(_impl_.param_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.formula_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formula_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.param_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AggSpec_AggSpecFormula::~AggSpec_AggSpecFormula() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecFormula::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formula_.Destroy();
  _impl_.param_token_.Destroy();
}

void AggSpec_AggSpecFormula::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecFormula::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_.ClearToEmpty();
  _impl_.param_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecFormula::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string formula = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_formula();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula.formula"));
        } else
          goto handle_unusual;
        continue;
      // string param_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_param_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula.param_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecFormula::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string formula = 1;
  if (!this->_internal_formula().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formula().data(), static_cast<int>(this->_internal_formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula.formula");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_formula(), target);
  }

  // string param_token = 2;
  if (!this->_internal_param_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param_token().data(), static_cast<int>(this->_internal_param_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula.param_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_param_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  return target;
}

size_t AggSpec_AggSpecFormula::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string formula = 1;
  if (!this->_internal_formula().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formula());
  }

  // string param_token = 2;
  if (!this->_internal_param_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecFormula::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecFormula::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecFormula::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecFormula::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecFormula*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecFormula&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_formula().empty()) {
    _this->_internal_set_formula(from._internal_formula());
  }
  if (!from._internal_param_token().empty()) {
    _this->_internal_set_param_token(from._internal_param_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecFormula::CopyFrom(const AggSpec_AggSpecFormula& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecFormula::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecFormula::InternalSwap(AggSpec_AggSpecFormula* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.formula_, lhs_arena,
      &other->_impl_.formula_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.param_token_, lhs_arena,
      &other->_impl_.param_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecFormula::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[63]);
}

// ===================================================================

class AggSpec_AggSpecMedian::_Internal {
 public:
};

AggSpec_AggSpecMedian::AggSpec_AggSpecMedian(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
}
AggSpec_AggSpecMedian::AggSpec_AggSpecMedian(const AggSpec_AggSpecMedian& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecMedian* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.average_evenly_divided_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.average_evenly_divided_ = from._impl_.average_evenly_divided_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
}

inline void AggSpec_AggSpecMedian::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.average_evenly_divided_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggSpec_AggSpecMedian::~AggSpec_AggSpecMedian() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecMedian::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggSpec_AggSpecMedian::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecMedian::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.average_evenly_divided_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecMedian::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool average_evenly_divided = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.average_evenly_divided_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecMedian::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool average_evenly_divided = 1;
  if (this->_internal_average_evenly_divided() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_average_evenly_divided(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  return target;
}

size_t AggSpec_AggSpecMedian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool average_evenly_divided = 1;
  if (this->_internal_average_evenly_divided() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecMedian::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecMedian::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecMedian::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecMedian::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecMedian*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecMedian&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_average_evenly_divided() != 0) {
    _this->_internal_set_average_evenly_divided(from._internal_average_evenly_divided());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecMedian::CopyFrom(const AggSpec_AggSpecMedian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecMedian::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecMedian::InternalSwap(AggSpec_AggSpecMedian* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.average_evenly_divided_, other->_impl_.average_evenly_divided_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecMedian::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[64]);
}

// ===================================================================

class AggSpec_AggSpecPercentile::_Internal {
 public:
};

AggSpec_AggSpecPercentile::AggSpec_AggSpecPercentile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
}
AggSpec_AggSpecPercentile::AggSpec_AggSpecPercentile(const AggSpec_AggSpecPercentile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecPercentile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.percentile_){}
    , decltype(_impl_.average_evenly_divided_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.percentile_, &from._impl_.percentile_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.average_evenly_divided_) -
    reinterpret_cast<char*>(&_impl_.percentile_)) + sizeof(_impl_.average_evenly_divided_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
}

inline void AggSpec_AggSpecPercentile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.percentile_){0}
    , decltype(_impl_.average_evenly_divided_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggSpec_AggSpecPercentile::~AggSpec_AggSpecPercentile() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecPercentile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggSpec_AggSpecPercentile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecPercentile::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.percentile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.average_evenly_divided_) -
      reinterpret_cast<char*>(&_impl_.percentile_)) + sizeof(_impl_.average_evenly_divided_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecPercentile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double percentile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool average_evenly_divided = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.average_evenly_divided_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecPercentile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double percentile = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = this->_internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_percentile(), target);
  }

  // bool average_evenly_divided = 2;
  if (this->_internal_average_evenly_divided() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_average_evenly_divided(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  return target;
}

size_t AggSpec_AggSpecPercentile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double percentile = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = this->_internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    total_size += 1 + 8;
  }

  // bool average_evenly_divided = 2;
  if (this->_internal_average_evenly_divided() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecPercentile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecPercentile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecPercentile::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecPercentile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecPercentile*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecPercentile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentile = from._internal_percentile();
  uint64_t raw_percentile;
  memcpy(&raw_percentile, &tmp_percentile, sizeof(tmp_percentile));
  if (raw_percentile != 0) {
    _this->_internal_set_percentile(from._internal_percentile());
  }
  if (from._internal_average_evenly_divided() != 0) {
    _this->_internal_set_average_evenly_divided(from._internal_average_evenly_divided());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecPercentile::CopyFrom(const AggSpec_AggSpecPercentile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecPercentile::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecPercentile::InternalSwap(AggSpec_AggSpecPercentile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.average_evenly_divided_)
      + sizeof(AggSpec_AggSpecPercentile::_impl_.average_evenly_divided_)
      - PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.percentile_)>(
          reinterpret_cast<char*>(&_impl_.percentile_),
          reinterpret_cast<char*>(&other->_impl_.percentile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecPercentile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[65]);
}

// ===================================================================

class AggSpec_AggSpecSorted::_Internal {
 public:
};

AggSpec_AggSpecSorted::AggSpec_AggSpecSorted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
}
AggSpec_AggSpecSorted::AggSpec_AggSpecSorted(const AggSpec_AggSpecSorted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecSorted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){from._impl_.columns_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
}

inline void AggSpec_AggSpecSorted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggSpec_AggSpecSorted::~AggSpec_AggSpecSorted() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecSorted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_.~RepeatedPtrField();
}

void AggSpec_AggSpecSorted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecSorted::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecSorted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecSorted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn columns = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_columns_size()); i < n; i++) {
    const auto& repfield = this->_internal_columns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  return target;
}

size_t AggSpec_AggSpecSorted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn columns = 1;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->_impl_.columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecSorted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecSorted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecSorted::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecSorted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecSorted*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecSorted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_.MergeFrom(from._impl_.columns_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecSorted::CopyFrom(const AggSpec_AggSpecSorted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecSorted::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecSorted::InternalSwap(AggSpec_AggSpecSorted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_.InternalSwap(&other->_impl_.columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecSorted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[66]);
}

// ===================================================================

class AggSpec_AggSpecSortedColumn::_Internal {
 public:
};

AggSpec_AggSpecSortedColumn::AggSpec_AggSpecSortedColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
}
AggSpec_AggSpecSortedColumn::AggSpec_AggSpecSortedColumn(const AggSpec_AggSpecSortedColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecSortedColumn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
}

inline void AggSpec_AggSpecSortedColumn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AggSpec_AggSpecSortedColumn::~AggSpec_AggSpecSortedColumn() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecSortedColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
}

void AggSpec_AggSpecSortedColumn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecSortedColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecSortedColumn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn.column_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecSortedColumn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  return target;
}

size_t AggSpec_AggSpecSortedColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecSortedColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecSortedColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecSortedColumn::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecSortedColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecSortedColumn*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecSortedColumn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecSortedColumn::CopyFrom(const AggSpec_AggSpecSortedColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecSortedColumn::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecSortedColumn::InternalSwap(AggSpec_AggSpecSortedColumn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecSortedColumn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[67]);
}

// ===================================================================

class AggSpec_AggSpecTDigest::_Internal {
 public:
  using HasBits = decltype(std::declval<AggSpec_AggSpecTDigest>()._impl_._has_bits_);
  static void set_has_compression(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AggSpec_AggSpecTDigest::AggSpec_AggSpecTDigest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
}
AggSpec_AggSpecTDigest::AggSpec_AggSpecTDigest(const AggSpec_AggSpecTDigest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecTDigest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.compression_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.compression_ = from._impl_.compression_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
}

inline void AggSpec_AggSpecTDigest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.compression_){0}
  };
}

AggSpec_AggSpecTDigest::~AggSpec_AggSpecTDigest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecTDigest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggSpec_AggSpecTDigest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecTDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compression_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecTDigest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double compression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_compression(&has_bits);
          _impl_.compression_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecTDigest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional double compression = 1;
  if (_internal_has_compression()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_compression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  return target;
}

size_t AggSpec_AggSpecTDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double compression = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecTDigest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecTDigest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecTDigest::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecTDigest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecTDigest*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecTDigest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_compression()) {
    _this->_internal_set_compression(from._internal_compression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecTDigest::CopyFrom(const AggSpec_AggSpecTDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecTDigest::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecTDigest::InternalSwap(AggSpec_AggSpecTDigest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.compression_, other->_impl_.compression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecTDigest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[68]);
}

// ===================================================================

class AggSpec_AggSpecUnique::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel& non_unique_sentinel(const AggSpec_AggSpecUnique* msg);
};

const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel&
AggSpec_AggSpecUnique::_Internal::non_unique_sentinel(const AggSpec_AggSpecUnique* msg) {
  return *msg->_impl_.non_unique_sentinel_;
}
AggSpec_AggSpecUnique::AggSpec_AggSpecUnique(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
}
AggSpec_AggSpecUnique::AggSpec_AggSpecUnique(const AggSpec_AggSpecUnique& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecUnique* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.non_unique_sentinel_){nullptr}
    , decltype(_impl_.include_nulls_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_non_unique_sentinel()) {
    _this->_impl_.non_unique_sentinel_ = new ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel(*from._impl_.non_unique_sentinel_);
  }
  _this->_impl_.include_nulls_ = from._impl_.include_nulls_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
}

inline void AggSpec_AggSpecUnique::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.non_unique_sentinel_){nullptr}
    , decltype(_impl_.include_nulls_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggSpec_AggSpecUnique::~AggSpec_AggSpecUnique() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecUnique::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.non_unique_sentinel_;
}

void AggSpec_AggSpecUnique::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.non_unique_sentinel_ != nullptr) {
    delete _impl_.non_unique_sentinel_;
  }
  _impl_.non_unique_sentinel_ = nullptr;
  _impl_.include_nulls_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecUnique::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool include_nulls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.include_nulls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel non_unique_sentinel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_unique_sentinel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecUnique::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_nulls = 1;
  if (this->_internal_include_nulls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_include_nulls(), target);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel non_unique_sentinel = 2;
  if (this->_internal_has_non_unique_sentinel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::non_unique_sentinel(this),
        _Internal::non_unique_sentinel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  return target;
}

size_t AggSpec_AggSpecUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel non_unique_sentinel = 2;
  if (this->_internal_has_non_unique_sentinel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.non_unique_sentinel_);
  }

  // bool include_nulls = 1;
  if (this->_internal_include_nulls() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecUnique::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecUnique::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecUnique::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecUnique::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecUnique*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecUnique&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_non_unique_sentinel()) {
    _this->_internal_mutable_non_unique_sentinel()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel::MergeFrom(
        from._internal_non_unique_sentinel());
  }
  if (from._internal_include_nulls() != 0) {
    _this->_internal_set_include_nulls(from._internal_include_nulls());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecUnique::CopyFrom(const AggSpec_AggSpecUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecUnique::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecUnique::InternalSwap(AggSpec_AggSpecUnique* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.include_nulls_)
      + sizeof(AggSpec_AggSpecUnique::_impl_.include_nulls_)
      - PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.non_unique_sentinel_)>(
          reinterpret_cast<char*>(&_impl_.non_unique_sentinel_),
          reinterpret_cast<char*>(&other->_impl_.non_unique_sentinel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecUnique::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[69]);
}

// ===================================================================

class AggSpec_AggSpecNonUniqueSentinel::_Internal {
 public:
};

AggSpec_AggSpecNonUniqueSentinel::AggSpec_AggSpecNonUniqueSentinel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
}
AggSpec_AggSpecNonUniqueSentinel::AggSpec_AggSpecNonUniqueSentinel(const AggSpec_AggSpecNonUniqueSentinel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecNonUniqueSentinel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kNullValue: {
      _this->_internal_set_null_value(from._internal_null_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _this->_internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kByteValue: {
      _this->_internal_set_byte_value(from._internal_byte_value());
      break;
    }
    case kShortValue: {
      _this->_internal_set_short_value(from._internal_short_value());
      break;
    }
    case kCharValue: {
      _this->_internal_set_char_value(from._internal_char_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
}

inline void AggSpec_AggSpecNonUniqueSentinel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

AggSpec_AggSpecNonUniqueSentinel::~AggSpec_AggSpecNonUniqueSentinel() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecNonUniqueSentinel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void AggSpec_AggSpecNonUniqueSentinel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecNonUniqueSentinel::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  switch (type_case()) {
    case kNullValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.type_.string_value_.Destroy();
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kByteValue: {
      // No need to clear
      break;
    }
    case kShortValue: {
      // No need to clear
      break;
    }
    case kCharValue: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void AggSpec_AggSpecNonUniqueSentinel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecNonUniqueSentinel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.NullValue null_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_null_value(static_cast<::io::deephaven::proto::backplane::grpc::NullValue>(val));
        } else
          goto handle_unusual;
        continue;
      // string string_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel.string_value"));
        } else
          goto handle_unusual;
        continue;
      // sint32 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 long_value = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 byte_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_byte_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 short_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_short_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 char_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _internal_set_char_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecNonUniqueSentinel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.NullValue null_value = 1;
  if (_internal_has_null_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_null_value(), target);
  }

  // string string_value = 2;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel.string_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string_value(), target);
  }

  // sint32 int_value = 3;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_int_value(), target);
  }

  // sint64 long_value = 4 [jstype = JS_STRING];
  if (_internal_has_long_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(4, this->_internal_long_value(), target);
  }

  // float float_value = 5;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_float_value(), target);
  }

  // double double_value = 6;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_double_value(), target);
  }

  // bool bool_value = 7;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_bool_value(), target);
  }

  // sint32 byte_value = 8;
  if (_internal_has_byte_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_byte_value(), target);
  }

  // sint32 short_value = 9;
  if (_internal_has_short_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(9, this->_internal_short_value(), target);
  }

  // sint32 char_value = 10;
  if (_internal_has_char_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(10, this->_internal_char_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  return target;
}

size_t AggSpec_AggSpecNonUniqueSentinel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.deephaven.proto.backplane.grpc.NullValue null_value = 1;
    case kNullValue: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_null_value());
      break;
    }
    // string string_value = 2;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // sint32 int_value = 3;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_int_value());
      break;
    }
    // sint64 long_value = 4 [jstype = JS_STRING];
    case kLongValue: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_long_value());
      break;
    }
    // float float_value = 5;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 6;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 7;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // sint32 byte_value = 8;
    case kByteValue: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_byte_value());
      break;
    }
    // sint32 short_value = 9;
    case kShortValue: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_short_value());
      break;
    }
    // sint32 char_value = 10;
    case kCharValue: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_char_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecNonUniqueSentinel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecNonUniqueSentinel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecNonUniqueSentinel::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecNonUniqueSentinel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecNonUniqueSentinel*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecNonUniqueSentinel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kNullValue: {
      _this->_internal_set_null_value(from._internal_null_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kLongValue: {
      _this->_internal_set_long_value(from._internal_long_value());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kByteValue: {
      _this->_internal_set_byte_value(from._internal_byte_value());
      break;
    }
    case kShortValue: {
      _this->_internal_set_short_value(from._internal_short_value());
      break;
    }
    case kCharValue: {
      _this->_internal_set_char_value(from._internal_char_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecNonUniqueSentinel::CopyFrom(const AggSpec_AggSpecNonUniqueSentinel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecNonUniqueSentinel::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecNonUniqueSentinel::InternalSwap(AggSpec_AggSpecNonUniqueSentinel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecNonUniqueSentinel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[70]);
}

// ===================================================================

class AggSpec_AggSpecWeighted::_Internal {
 public:
};

AggSpec_AggSpecWeighted::AggSpec_AggSpecWeighted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
}
AggSpec_AggSpecWeighted::AggSpec_AggSpecWeighted(const AggSpec_AggSpecWeighted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec_AggSpecWeighted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_column_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.weight_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weight_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weight_column().empty()) {
    _this->_impl_.weight_column_.Set(from._internal_weight_column(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
}

inline void AggSpec_AggSpecWeighted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_column_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.weight_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.weight_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AggSpec_AggSpecWeighted::~AggSpec_AggSpecWeighted() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec_AggSpecWeighted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weight_column_.Destroy();
}

void AggSpec_AggSpecWeighted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec_AggSpecWeighted::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weight_column_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec_AggSpecWeighted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string weight_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_weight_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted.weight_column"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec_AggSpecWeighted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string weight_column = 1;
  if (!this->_internal_weight_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weight_column().data(), static_cast<int>(this->_internal_weight_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted.weight_column");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_weight_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  return target;
}

size_t AggSpec_AggSpecWeighted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string weight_column = 1;
  if (!this->_internal_weight_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weight_column());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecWeighted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec_AggSpecWeighted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecWeighted::GetClassData() const { return &_class_data_; }


void AggSpec_AggSpecWeighted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecWeighted*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecWeighted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_weight_column().empty()) {
    _this->_internal_set_weight_column(from._internal_weight_column());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecWeighted::CopyFrom(const AggSpec_AggSpecWeighted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec_AggSpecWeighted::IsInitialized() const {
  return true;
}

void AggSpec_AggSpecWeighted::InternalSwap(AggSpec_AggSpecWeighted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.weight_column_, lhs_arena,
      &other->_impl_.weight_column_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecWeighted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[71]);
}

// ===================================================================

class AggSpec_AggSpecAbsSum::_Internal {
 public:
};

AggSpec_AggSpecAbsSum::AggSpec_AggSpecAbsSum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum)
}
AggSpec_AggSpecAbsSum::AggSpec_AggSpecAbsSum(const AggSpec_AggSpecAbsSum& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecAbsSum* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecAbsSum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecAbsSum::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecAbsSum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[72]);
}

// ===================================================================

class AggSpec_AggSpecAvg::_Internal {
 public:
};

AggSpec_AggSpecAvg::AggSpec_AggSpecAvg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg)
}
AggSpec_AggSpecAvg::AggSpec_AggSpecAvg(const AggSpec_AggSpecAvg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecAvg* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecAvg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecAvg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecAvg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[73]);
}

// ===================================================================

class AggSpec_AggSpecFirst::_Internal {
 public:
};

AggSpec_AggSpecFirst::AggSpec_AggSpecFirst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst)
}
AggSpec_AggSpecFirst::AggSpec_AggSpecFirst(const AggSpec_AggSpecFirst& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecFirst* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecFirst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecFirst::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecFirst::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[74]);
}

// ===================================================================

class AggSpec_AggSpecFreeze::_Internal {
 public:
};

AggSpec_AggSpecFreeze::AggSpec_AggSpecFreeze(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze)
}
AggSpec_AggSpecFreeze::AggSpec_AggSpecFreeze(const AggSpec_AggSpecFreeze& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecFreeze* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecFreeze::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecFreeze::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecFreeze::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[75]);
}

// ===================================================================

class AggSpec_AggSpecGroup::_Internal {
 public:
};

AggSpec_AggSpecGroup::AggSpec_AggSpecGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup)
}
AggSpec_AggSpecGroup::AggSpec_AggSpecGroup(const AggSpec_AggSpecGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecGroup* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecGroup::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[76]);
}

// ===================================================================

class AggSpec_AggSpecLast::_Internal {
 public:
};

AggSpec_AggSpecLast::AggSpec_AggSpecLast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast)
}
AggSpec_AggSpecLast::AggSpec_AggSpecLast(const AggSpec_AggSpecLast& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecLast* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecLast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecLast::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecLast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[77]);
}

// ===================================================================

class AggSpec_AggSpecMax::_Internal {
 public:
};

AggSpec_AggSpecMax::AggSpec_AggSpecMax(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax)
}
AggSpec_AggSpecMax::AggSpec_AggSpecMax(const AggSpec_AggSpecMax& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecMax* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecMax::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecMax::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecMax::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[78]);
}

// ===================================================================

class AggSpec_AggSpecMin::_Internal {
 public:
};

AggSpec_AggSpecMin::AggSpec_AggSpecMin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin)
}
AggSpec_AggSpecMin::AggSpec_AggSpecMin(const AggSpec_AggSpecMin& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecMin* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecMin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecMin::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecMin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[79]);
}

// ===================================================================

class AggSpec_AggSpecStd::_Internal {
 public:
};

AggSpec_AggSpecStd::AggSpec_AggSpecStd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd)
}
AggSpec_AggSpecStd::AggSpec_AggSpecStd(const AggSpec_AggSpecStd& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecStd* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecStd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecStd::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecStd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[80]);
}

// ===================================================================

class AggSpec_AggSpecSum::_Internal {
 public:
};

AggSpec_AggSpecSum::AggSpec_AggSpecSum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum)
}
AggSpec_AggSpecSum::AggSpec_AggSpecSum(const AggSpec_AggSpecSum& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecSum* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecSum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecSum::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecSum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[81]);
}

// ===================================================================

class AggSpec_AggSpecVar::_Internal {
 public:
};

AggSpec_AggSpecVar::AggSpec_AggSpecVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar)
}
AggSpec_AggSpecVar::AggSpec_AggSpecVar(const AggSpec_AggSpecVar& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AggSpec_AggSpecVar* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec_AggSpecVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec_AggSpecVar::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AggSpec_AggSpecVar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[82]);
}

// ===================================================================

class AggSpec::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum& abs_sum(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile& approximate_percentile(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg& avg(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct& count_distinct(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct& distinct(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst& first(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula& formula(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze& freeze(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup& group(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast& last(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax& max(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian& median(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin& min(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile& percentile(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted& sorted_first(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted& sorted_last(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd& std(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum& sum(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest& t_digest(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique& unique(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted& weighted_avg(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted& weighted_sum(const AggSpec* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar& var(const AggSpec* msg);
};

const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum&
AggSpec::_Internal::abs_sum(const AggSpec* msg) {
  return *msg->_impl_.type_.abs_sum_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile&
AggSpec::_Internal::approximate_percentile(const AggSpec* msg) {
  return *msg->_impl_.type_.approximate_percentile_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg&
AggSpec::_Internal::avg(const AggSpec* msg) {
  return *msg->_impl_.type_.avg_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct&
AggSpec::_Internal::count_distinct(const AggSpec* msg) {
  return *msg->_impl_.type_.count_distinct_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct&
AggSpec::_Internal::distinct(const AggSpec* msg) {
  return *msg->_impl_.type_.distinct_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst&
AggSpec::_Internal::first(const AggSpec* msg) {
  return *msg->_impl_.type_.first_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula&
AggSpec::_Internal::formula(const AggSpec* msg) {
  return *msg->_impl_.type_.formula_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze&
AggSpec::_Internal::freeze(const AggSpec* msg) {
  return *msg->_impl_.type_.freeze_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup&
AggSpec::_Internal::group(const AggSpec* msg) {
  return *msg->_impl_.type_.group_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast&
AggSpec::_Internal::last(const AggSpec* msg) {
  return *msg->_impl_.type_.last_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax&
AggSpec::_Internal::max(const AggSpec* msg) {
  return *msg->_impl_.type_.max_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian&
AggSpec::_Internal::median(const AggSpec* msg) {
  return *msg->_impl_.type_.median_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin&
AggSpec::_Internal::min(const AggSpec* msg) {
  return *msg->_impl_.type_.min_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile&
AggSpec::_Internal::percentile(const AggSpec* msg) {
  return *msg->_impl_.type_.percentile_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted&
AggSpec::_Internal::sorted_first(const AggSpec* msg) {
  return *msg->_impl_.type_.sorted_first_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted&
AggSpec::_Internal::sorted_last(const AggSpec* msg) {
  return *msg->_impl_.type_.sorted_last_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd&
AggSpec::_Internal::std(const AggSpec* msg) {
  return *msg->_impl_.type_.std_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum&
AggSpec::_Internal::sum(const AggSpec* msg) {
  return *msg->_impl_.type_.sum_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest&
AggSpec::_Internal::t_digest(const AggSpec* msg) {
  return *msg->_impl_.type_.t_digest_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique&
AggSpec::_Internal::unique(const AggSpec* msg) {
  return *msg->_impl_.type_.unique_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted&
AggSpec::_Internal::weighted_avg(const AggSpec* msg) {
  return *msg->_impl_.type_.weighted_avg_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted&
AggSpec::_Internal::weighted_sum(const AggSpec* msg) {
  return *msg->_impl_.type_.weighted_sum_;
}
const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar&
AggSpec::_Internal::var(const AggSpec* msg) {
  return *msg->_impl_.type_.var_;
}
void AggSpec::set_allocated_abs_sum(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum* abs_sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (abs_sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(abs_sum);
    if (message_arena != submessage_arena) {
      abs_sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abs_sum, submessage_arena);
    }
    set_has_abs_sum();
    _impl_.type_.abs_sum_ = abs_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.abs_sum)
}
void AggSpec::set_allocated_approximate_percentile(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile* approximate_percentile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (approximate_percentile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(approximate_percentile);
    if (message_arena != submessage_arena) {
      approximate_percentile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, approximate_percentile, submessage_arena);
    }
    set_has_approximate_percentile();
    _impl_.type_.approximate_percentile_ = approximate_percentile;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.approximate_percentile)
}
void AggSpec::set_allocated_avg(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg* avg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (avg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(avg);
    if (message_arena != submessage_arena) {
      avg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avg, submessage_arena);
    }
    set_has_avg();
    _impl_.type_.avg_ = avg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.avg)
}
void AggSpec::set_allocated_count_distinct(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct* count_distinct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (count_distinct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(count_distinct);
    if (message_arena != submessage_arena) {
      count_distinct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_distinct, submessage_arena);
    }
    set_has_count_distinct();
    _impl_.type_.count_distinct_ = count_distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.count_distinct)
}
void AggSpec::set_allocated_distinct(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct* distinct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (distinct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distinct);
    if (message_arena != submessage_arena) {
      distinct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distinct, submessage_arena);
    }
    set_has_distinct();
    _impl_.type_.distinct_ = distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.distinct)
}
void AggSpec::set_allocated_first(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst* first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(first);
    if (message_arena != submessage_arena) {
      first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first, submessage_arena);
    }
    set_has_first();
    _impl_.type_.first_ = first;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.first)
}
void AggSpec::set_allocated_formula(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(formula);
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    set_has_formula();
    _impl_.type_.formula_ = formula;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.formula)
}
void AggSpec::set_allocated_freeze(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze* freeze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (freeze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(freeze);
    if (message_arena != submessage_arena) {
      freeze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeze, submessage_arena);
    }
    set_has_freeze();
    _impl_.type_.freeze_ = freeze;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.freeze)
}
void AggSpec::set_allocated_group(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    set_has_group();
    _impl_.type_.group_ = group;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.group)
}
void AggSpec::set_allocated_last(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast* last) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (last) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last);
    if (message_arena != submessage_arena) {
      last = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last, submessage_arena);
    }
    set_has_last();
    _impl_.type_.last_ = last;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.last)
}
void AggSpec::set_allocated_max(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    set_has_max();
    _impl_.type_.max_ = max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.max)
}
void AggSpec::set_allocated_median(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian* median) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (median) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(median);
    if (message_arena != submessage_arena) {
      median = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, median, submessage_arena);
    }
    set_has_median();
    _impl_.type_.median_ = median;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.median)
}
void AggSpec::set_allocated_min(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    set_has_min();
    _impl_.type_.min_ = min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.min)
}
void AggSpec::set_allocated_percentile(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile* percentile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (percentile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(percentile);
    if (message_arena != submessage_arena) {
      percentile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, percentile, submessage_arena);
    }
    set_has_percentile();
    _impl_.type_.percentile_ = percentile;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.percentile)
}
void AggSpec::set_allocated_sorted_first(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted* sorted_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (sorted_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sorted_first);
    if (message_arena != submessage_arena) {
      sorted_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sorted_first, submessage_arena);
    }
    set_has_sorted_first();
    _impl_.type_.sorted_first_ = sorted_first;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.sorted_first)
}
void AggSpec::set_allocated_sorted_last(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted* sorted_last) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (sorted_last) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sorted_last);
    if (message_arena != submessage_arena) {
      sorted_last = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sorted_last, submessage_arena);
    }
    set_has_sorted_last();
    _impl_.type_.sorted_last_ = sorted_last;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.sorted_last)
}
void AggSpec::set_allocated_std(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd* std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(std);
    if (message_arena != submessage_arena) {
      std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, std, submessage_arena);
    }
    set_has_std();
    _impl_.type_.std_ = std;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.std)
}
void AggSpec::set_allocated_sum(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum* sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sum);
    if (message_arena != submessage_arena) {
      sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sum, submessage_arena);
    }
    set_has_sum();
    _impl_.type_.sum_ = sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.sum)
}
void AggSpec::set_allocated_t_digest(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest* t_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (t_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t_digest);
    if (message_arena != submessage_arena) {
      t_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_digest, submessage_arena);
    }
    set_has_t_digest();
    _impl_.type_.t_digest_ = t_digest;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.t_digest)
}
void AggSpec::set_allocated_unique(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique* unique) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (unique) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unique);
    if (message_arena != submessage_arena) {
      unique = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unique, submessage_arena);
    }
    set_has_unique();
    _impl_.type_.unique_ = unique;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.unique)
}
void AggSpec::set_allocated_weighted_avg(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted* weighted_avg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (weighted_avg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weighted_avg);
    if (message_arena != submessage_arena) {
      weighted_avg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_avg, submessage_arena);
    }
    set_has_weighted_avg();
    _impl_.type_.weighted_avg_ = weighted_avg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.weighted_avg)
}
void AggSpec::set_allocated_weighted_sum(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted* weighted_sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (weighted_sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weighted_sum);
    if (message_arena != submessage_arena) {
      weighted_sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weighted_sum, submessage_arena);
    }
    set_has_weighted_sum();
    _impl_.type_.weighted_sum_ = weighted_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.weighted_sum)
}
void AggSpec::set_allocated_var(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar* var) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (var) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(var);
    if (message_arena != submessage_arena) {
      var = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var, submessage_arena);
    }
    set_has_var();
    _impl_.type_.var_ = var;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.var)
}
AggSpec::AggSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec)
}
AggSpec::AggSpec(const AggSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kAbsSum: {
      _this->_internal_mutable_abs_sum()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum::MergeFrom(
          from._internal_abs_sum());
      break;
    }
    case kApproximatePercentile: {
      _this->_internal_mutable_approximate_percentile()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile::MergeFrom(
          from._internal_approximate_percentile());
      break;
    }
    case kAvg: {
      _this->_internal_mutable_avg()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg::MergeFrom(
          from._internal_avg());
      break;
    }
    case kCountDistinct: {
      _this->_internal_mutable_count_distinct()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct::MergeFrom(
          from._internal_count_distinct());
      break;
    }
    case kDistinct: {
      _this->_internal_mutable_distinct()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct::MergeFrom(
          from._internal_distinct());
      break;
    }
    case kFirst: {
      _this->_internal_mutable_first()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst::MergeFrom(
          from._internal_first());
      break;
    }
    case kFormula: {
      _this->_internal_mutable_formula()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula::MergeFrom(
          from._internal_formula());
      break;
    }
    case kFreeze: {
      _this->_internal_mutable_freeze()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze::MergeFrom(
          from._internal_freeze());
      break;
    }
    case kGroup: {
      _this->_internal_mutable_group()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup::MergeFrom(
          from._internal_group());
      break;
    }
    case kLast: {
      _this->_internal_mutable_last()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast::MergeFrom(
          from._internal_last());
      break;
    }
    case kMax: {
      _this->_internal_mutable_max()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax::MergeFrom(
          from._internal_max());
      break;
    }
    case kMedian: {
      _this->_internal_mutable_median()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian::MergeFrom(
          from._internal_median());
      break;
    }
    case kMin: {
      _this->_internal_mutable_min()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin::MergeFrom(
          from._internal_min());
      break;
    }
    case kPercentile: {
      _this->_internal_mutable_percentile()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile::MergeFrom(
          from._internal_percentile());
      break;
    }
    case kSortedFirst: {
      _this->_internal_mutable_sorted_first()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted::MergeFrom(
          from._internal_sorted_first());
      break;
    }
    case kSortedLast: {
      _this->_internal_mutable_sorted_last()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted::MergeFrom(
          from._internal_sorted_last());
      break;
    }
    case kStd: {
      _this->_internal_mutable_std()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd::MergeFrom(
          from._internal_std());
      break;
    }
    case kSum: {
      _this->_internal_mutable_sum()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum::MergeFrom(
          from._internal_sum());
      break;
    }
    case kTDigest: {
      _this->_internal_mutable_t_digest()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest::MergeFrom(
          from._internal_t_digest());
      break;
    }
    case kUnique: {
      _this->_internal_mutable_unique()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique::MergeFrom(
          from._internal_unique());
      break;
    }
    case kWeightedAvg: {
      _this->_internal_mutable_weighted_avg()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted::MergeFrom(
          from._internal_weighted_avg());
      break;
    }
    case kWeightedSum: {
      _this->_internal_mutable_weighted_sum()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted::MergeFrom(
          from._internal_weighted_sum());
      break;
    }
    case kVar: {
      _this->_internal_mutable_var()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar::MergeFrom(
          from._internal_var());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec)
}

inline void AggSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

AggSpec::~AggSpec() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void AggSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggSpec::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.AggSpec)
  switch (type_case()) {
    case kAbsSum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.abs_sum_;
      }
      break;
    }
    case kApproximatePercentile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.approximate_percentile_;
      }
      break;
    }
    case kAvg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.avg_;
      }
      break;
    }
    case kCountDistinct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.count_distinct_;
      }
      break;
    }
    case kDistinct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.distinct_;
      }
      break;
    }
    case kFirst: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.first_;
      }
      break;
    }
    case kFormula: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.formula_;
      }
      break;
    }
    case kFreeze: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.freeze_;
      }
      break;
    }
    case kGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.group_;
      }
      break;
    }
    case kLast: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.last_;
      }
      break;
    }
    case kMax: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.max_;
      }
      break;
    }
    case kMedian: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.median_;
      }
      break;
    }
    case kMin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.min_;
      }
      break;
    }
    case kPercentile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.percentile_;
      }
      break;
    }
    case kSortedFirst: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.sorted_first_;
      }
      break;
    }
    case kSortedLast: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.sorted_last_;
      }
      break;
    }
    case kStd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.std_;
      }
      break;
    }
    case kSum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.sum_;
      }
      break;
    }
    case kTDigest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.t_digest_;
      }
      break;
    }
    case kUnique: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.unique_;
      }
      break;
    }
    case kWeightedAvg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.weighted_avg_;
      }
      break;
    }
    case kWeightedSum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.weighted_sum_;
      }
      break;
    }
    case kVar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.var_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void AggSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum abs_sum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_abs_sum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile approximate_percentile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_approximate_percentile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg avg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_avg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct count_distinct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_count_distinct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct distinct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_distinct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst first = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula formula = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze freeze = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeze(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup group = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast last = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian median = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_median(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin min = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile percentile = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_percentile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_first = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_sorted_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_last = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sorted_last(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd std = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_std(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum sum = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest t_digest = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_digest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique unique = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_unique(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_avg = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_weighted_avg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_sum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_weighted_sum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar var = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_var(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum abs_sum = 1;
  if (_internal_has_abs_sum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::abs_sum(this),
        _Internal::abs_sum(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile approximate_percentile = 2;
  if (_internal_has_approximate_percentile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::approximate_percentile(this),
        _Internal::approximate_percentile(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg avg = 3;
  if (_internal_has_avg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::avg(this),
        _Internal::avg(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct count_distinct = 4;
  if (_internal_has_count_distinct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::count_distinct(this),
        _Internal::count_distinct(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct distinct = 5;
  if (_internal_has_distinct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::distinct(this),
        _Internal::distinct(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst first = 6;
  if (_internal_has_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::first(this),
        _Internal::first(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula formula = 7;
  if (_internal_has_formula()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze freeze = 8;
  if (_internal_has_freeze()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::freeze(this),
        _Internal::freeze(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup group = 9;
  if (_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast last = 10;
  if (_internal_has_last()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::last(this),
        _Internal::last(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax max = 11;
  if (_internal_has_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian median = 12;
  if (_internal_has_median()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::median(this),
        _Internal::median(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin min = 13;
  if (_internal_has_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::min(this),
        _Internal::min(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile percentile = 14;
  if (_internal_has_percentile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::percentile(this),
        _Internal::percentile(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_first = 15;
  if (_internal_has_sorted_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::sorted_first(this),
        _Internal::sorted_first(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_last = 16;
  if (_internal_has_sorted_last()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::sorted_last(this),
        _Internal::sorted_last(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd std = 17;
  if (_internal_has_std()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::std(this),
        _Internal::std(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum sum = 18;
  if (_internal_has_sum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::sum(this),
        _Internal::sum(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest t_digest = 19;
  if (_internal_has_t_digest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::t_digest(this),
        _Internal::t_digest(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique unique = 20;
  if (_internal_has_unique()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::unique(this),
        _Internal::unique(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_avg = 21;
  if (_internal_has_weighted_avg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::weighted_avg(this),
        _Internal::weighted_avg(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_sum = 22;
  if (_internal_has_weighted_sum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::weighted_sum(this),
        _Internal::weighted_sum(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar var = 23;
  if (_internal_has_var()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::var(this),
        _Internal::var(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec)
  return target;
}

size_t AggSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum abs_sum = 1;
    case kAbsSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.abs_sum_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile approximate_percentile = 2;
    case kApproximatePercentile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.approximate_percentile_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg avg = 3;
    case kAvg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.avg_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct count_distinct = 4;
    case kCountDistinct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.count_distinct_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct distinct = 5;
    case kDistinct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.distinct_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst first = 6;
    case kFirst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.first_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula formula = 7;
    case kFormula: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.formula_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze freeze = 8;
    case kFreeze: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.freeze_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup group = 9;
    case kGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.group_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast last = 10;
    case kLast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.last_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax max = 11;
    case kMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.max_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian median = 12;
    case kMedian: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.median_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin min = 13;
    case kMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.min_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile percentile = 14;
    case kPercentile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.percentile_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_first = 15;
    case kSortedFirst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.sorted_first_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_last = 16;
    case kSortedLast: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.sorted_last_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd std = 17;
    case kStd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.std_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum sum = 18;
    case kSum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.sum_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest t_digest = 19;
    case kTDigest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.t_digest_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique unique = 20;
    case kUnique: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.unique_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_avg = 21;
    case kWeightedAvg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.weighted_avg_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_sum = 22;
    case kWeightedSum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.weighted_sum_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar var = 23;
    case kVar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.var_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggSpec::GetClassData() const { return &_class_data_; }


void AggSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggSpec*>(&to_msg);
  auto& from = static_cast<const AggSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kAbsSum: {
      _this->_internal_mutable_abs_sum()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum::MergeFrom(
          from._internal_abs_sum());
      break;
    }
    case kApproximatePercentile: {
      _this->_internal_mutable_approximate_percentile()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile::MergeFrom(
          from._internal_approximate_percentile());
      break;
    }
    case kAvg: {
      _this->_internal_mutable_avg()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg::MergeFrom(
          from._internal_avg());
      break;
    }
    case kCountDistinct: {
      _this->_internal_mutable_count_distinct()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct::MergeFrom(
          from._internal_count_distinct());
      break;
    }
    case kDistinct: {
      _this->_internal_mutable_distinct()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct::MergeFrom(
          from._internal_distinct());
      break;
    }
    case kFirst: {
      _this->_internal_mutable_first()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst::MergeFrom(
          from._internal_first());
      break;
    }
    case kFormula: {
      _this->_internal_mutable_formula()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula::MergeFrom(
          from._internal_formula());
      break;
    }
    case kFreeze: {
      _this->_internal_mutable_freeze()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze::MergeFrom(
          from._internal_freeze());
      break;
    }
    case kGroup: {
      _this->_internal_mutable_group()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup::MergeFrom(
          from._internal_group());
      break;
    }
    case kLast: {
      _this->_internal_mutable_last()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast::MergeFrom(
          from._internal_last());
      break;
    }
    case kMax: {
      _this->_internal_mutable_max()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax::MergeFrom(
          from._internal_max());
      break;
    }
    case kMedian: {
      _this->_internal_mutable_median()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian::MergeFrom(
          from._internal_median());
      break;
    }
    case kMin: {
      _this->_internal_mutable_min()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin::MergeFrom(
          from._internal_min());
      break;
    }
    case kPercentile: {
      _this->_internal_mutable_percentile()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile::MergeFrom(
          from._internal_percentile());
      break;
    }
    case kSortedFirst: {
      _this->_internal_mutable_sorted_first()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted::MergeFrom(
          from._internal_sorted_first());
      break;
    }
    case kSortedLast: {
      _this->_internal_mutable_sorted_last()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted::MergeFrom(
          from._internal_sorted_last());
      break;
    }
    case kStd: {
      _this->_internal_mutable_std()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd::MergeFrom(
          from._internal_std());
      break;
    }
    case kSum: {
      _this->_internal_mutable_sum()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum::MergeFrom(
          from._internal_sum());
      break;
    }
    case kTDigest: {
      _this->_internal_mutable_t_digest()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest::MergeFrom(
          from._internal_t_digest());
      break;
    }
    case kUnique: {
      _this->_internal_mutable_unique()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique::MergeFrom(
          from._internal_unique());
      break;
    }
    case kWeightedAvg: {
      _this->_internal_mutable_weighted_avg()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted::MergeFrom(
          from._internal_weighted_avg());
      break;
    }
    case kWeightedSum: {
      _this->_internal_mutable_weighted_sum()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted::MergeFrom(
          from._internal_weighted_sum());
      break;
    }
    case kVar: {
      _this->_internal_mutable_var()->::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar::MergeFrom(
          from._internal_var());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec::CopyFrom(const AggSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggSpec::IsInitialized() const {
  return true;
}

void AggSpec::InternalSwap(AggSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[83]);
}

// ===================================================================

class AggregateRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const AggregateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const AggregateRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& initial_groups_id(const AggregateRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
AggregateRequest::_Internal::result_id(const AggregateRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AggregateRequest::_Internal::source_id(const AggregateRequest* msg) {
  return *msg->_impl_.source_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
AggregateRequest::_Internal::initial_groups_id(const AggregateRequest* msg) {
  return *msg->_impl_.initial_groups_id_;
}
void AggregateRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
AggregateRequest::AggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggregateRequest)
}
AggregateRequest::AggregateRequest(const AggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregations_){from._impl_.aggregations_}
    , decltype(_impl_.group_by_columns_){from._impl_.group_by_columns_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.initial_groups_id_){nullptr}
    , decltype(_impl_.preserve_empty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  if (from._internal_has_initial_groups_id()) {
    _this->_impl_.initial_groups_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.initial_groups_id_);
  }
  _this->_impl_.preserve_empty_ = from._impl_.preserve_empty_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggregateRequest)
}

inline void AggregateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregations_){arena}
    , decltype(_impl_.group_by_columns_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.initial_groups_id_){nullptr}
    , decltype(_impl_.preserve_empty_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggregateRequest::~AggregateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggregateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aggregations_.~RepeatedPtrField();
  _impl_.group_by_columns_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.initial_groups_id_;
}

void AggregateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aggregations_.Clear();
  _impl_.group_by_columns_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.initial_groups_id_ != nullptr) {
    delete _impl_.initial_groups_id_;
  }
  _impl_.initial_groups_id_ = nullptr;
  _impl_.preserve_empty_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference initial_groups_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_groups_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool preserve_empty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.preserve_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_columns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.AggregateRequest.group_by_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference initial_groups_id = 3;
  if (this->_internal_has_initial_groups_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::initial_groups_id(this),
        _Internal::initial_groups_id(this).GetCachedSize(), target, stream);
  }

  // bool preserve_empty = 4;
  if (this->_internal_preserve_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_preserve_empty(), target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregations_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string group_by_columns = 6;
  for (int i = 0, n = this->_internal_group_by_columns_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.AggregateRequest.group_by_columns");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggregateRequest)
  return target;
}

size_t AggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 5;
  total_size += 1UL * this->_internal_aggregations_size();
  for (const auto& msg : this->_impl_.aggregations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string group_by_columns = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.group_by_columns_.size());
  for (int i = 0, n = _impl_.group_by_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.group_by_columns_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference initial_groups_id = 3;
  if (this->_internal_has_initial_groups_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_groups_id_);
  }

  // bool preserve_empty = 4;
  if (this->_internal_preserve_empty() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRequest::GetClassData() const { return &_class_data_; }


void AggregateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateRequest*>(&to_msg);
  auto& from = static_cast<const AggregateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aggregations_.MergeFrom(from._impl_.aggregations_);
  _this->_impl_.group_by_columns_.MergeFrom(from._impl_.group_by_columns_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_initial_groups_id()) {
    _this->_internal_mutable_initial_groups_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_initial_groups_id());
  }
  if (from._internal_preserve_empty() != 0) {
    _this->_internal_set_preserve_empty(from._internal_preserve_empty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRequest::CopyFrom(const AggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRequest::IsInitialized() const {
  return true;
}

void AggregateRequest::InternalSwap(AggregateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aggregations_.InternalSwap(&other->_impl_.aggregations_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.preserve_empty_)
      + sizeof(AggregateRequest::_impl_.preserve_empty_)
      - PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[84]);
}

// ===================================================================

class Aggregation_AggregationColumns::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::AggSpec& spec(const Aggregation_AggregationColumns* msg);
};

const ::io::deephaven::proto::backplane::grpc::AggSpec&
Aggregation_AggregationColumns::_Internal::spec(const Aggregation_AggregationColumns* msg) {
  return *msg->_impl_.spec_;
}
Aggregation_AggregationColumns::Aggregation_AggregationColumns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
}
Aggregation_AggregationColumns::Aggregation_AggregationColumns(const Aggregation_AggregationColumns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Aggregation_AggregationColumns* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_pairs_){from._impl_.match_pairs_}
    , decltype(_impl_.spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::io::deephaven::proto::backplane::grpc::AggSpec(*from._impl_.spec_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
}

inline void Aggregation_AggregationColumns::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_pairs_){arena}
    , decltype(_impl_.spec_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Aggregation_AggregationColumns::~Aggregation_AggregationColumns() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Aggregation_AggregationColumns::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_pairs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.spec_;
}

void Aggregation_AggregationColumns::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Aggregation_AggregationColumns::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_pairs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aggregation_AggregationColumns::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.AggSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string match_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_pairs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns.match_pairs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Aggregation_AggregationColumns::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.AggSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // repeated string match_pairs = 2;
  for (int i = 0, n = this->_internal_match_pairs_size(); i < n; i++) {
    const auto& s = this->_internal_match_pairs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns.match_pairs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  return target;
}

size_t Aggregation_AggregationColumns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_pairs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.match_pairs_.size());
  for (int i = 0, n = _impl_.match_pairs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.match_pairs_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.AggSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aggregation_AggregationColumns::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Aggregation_AggregationColumns::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aggregation_AggregationColumns::GetClassData() const { return &_class_data_; }


void Aggregation_AggregationColumns::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationColumns*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationColumns&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_pairs_.MergeFrom(from._impl_.match_pairs_);
  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::io::deephaven::proto::backplane::grpc::AggSpec::MergeFrom(
        from._internal_spec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationColumns::CopyFrom(const Aggregation_AggregationColumns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation_AggregationColumns::IsInitialized() const {
  return true;
}

void Aggregation_AggregationColumns::InternalSwap(Aggregation_AggregationColumns* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.match_pairs_.InternalSwap(&other->_impl_.match_pairs_);
  swap(_impl_.spec_, other->_impl_.spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Aggregation_AggregationColumns::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[85]);
}

// ===================================================================

class Aggregation_AggregationCount::_Internal {
 public:
};

Aggregation_AggregationCount::Aggregation_AggregationCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
}
Aggregation_AggregationCount::Aggregation_AggregationCount(const Aggregation_AggregationCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Aggregation_AggregationCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
}

inline void Aggregation_AggregationCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Aggregation_AggregationCount::~Aggregation_AggregationCount() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Aggregation_AggregationCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
}

void Aggregation_AggregationCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Aggregation_AggregationCount::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aggregation_AggregationCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount.column_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Aggregation_AggregationCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  return target;
}

size_t Aggregation_AggregationCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aggregation_AggregationCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Aggregation_AggregationCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aggregation_AggregationCount::GetClassData() const { return &_class_data_; }


void Aggregation_AggregationCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationCount*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationCount::CopyFrom(const Aggregation_AggregationCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation_AggregationCount::IsInitialized() const {
  return true;
}

void Aggregation_AggregationCount::InternalSwap(Aggregation_AggregationCount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Aggregation_AggregationCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[86]);
}

// ===================================================================

class Aggregation_AggregationRowKey::_Internal {
 public:
};

Aggregation_AggregationRowKey::Aggregation_AggregationRowKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
}
Aggregation_AggregationRowKey::Aggregation_AggregationRowKey(const Aggregation_AggregationRowKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Aggregation_AggregationRowKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
}

inline void Aggregation_AggregationRowKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Aggregation_AggregationRowKey::~Aggregation_AggregationRowKey() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Aggregation_AggregationRowKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
}

void Aggregation_AggregationRowKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Aggregation_AggregationRowKey::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aggregation_AggregationRowKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey.column_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Aggregation_AggregationRowKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  return target;
}

size_t Aggregation_AggregationRowKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aggregation_AggregationRowKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Aggregation_AggregationRowKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aggregation_AggregationRowKey::GetClassData() const { return &_class_data_; }


void Aggregation_AggregationRowKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationRowKey*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationRowKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationRowKey::CopyFrom(const Aggregation_AggregationRowKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation_AggregationRowKey::IsInitialized() const {
  return true;
}

void Aggregation_AggregationRowKey::InternalSwap(Aggregation_AggregationRowKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Aggregation_AggregationRowKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[87]);
}

// ===================================================================

class Aggregation_AggregationPartition::_Internal {
 public:
};

Aggregation_AggregationPartition::Aggregation_AggregationPartition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
}
Aggregation_AggregationPartition::Aggregation_AggregationPartition(const Aggregation_AggregationPartition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Aggregation_AggregationPartition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , decltype(_impl_.include_group_by_columns_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.include_group_by_columns_ = from._impl_.include_group_by_columns_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
}

inline void Aggregation_AggregationPartition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , decltype(_impl_.include_group_by_columns_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Aggregation_AggregationPartition::~Aggregation_AggregationPartition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Aggregation_AggregationPartition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
}

void Aggregation_AggregationPartition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Aggregation_AggregationPartition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _impl_.include_group_by_columns_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aggregation_AggregationPartition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition.column_name"));
        } else
          goto handle_unusual;
        continue;
      // bool include_group_by_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.include_group_by_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Aggregation_AggregationPartition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  // bool include_group_by_columns = 2;
  if (this->_internal_include_group_by_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_group_by_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  return target;
}

size_t Aggregation_AggregationPartition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // bool include_group_by_columns = 2;
  if (this->_internal_include_group_by_columns() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aggregation_AggregationPartition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Aggregation_AggregationPartition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aggregation_AggregationPartition::GetClassData() const { return &_class_data_; }


void Aggregation_AggregationPartition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationPartition*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationPartition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_include_group_by_columns() != 0) {
    _this->_internal_set_include_group_by_columns(from._internal_include_group_by_columns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationPartition::CopyFrom(const Aggregation_AggregationPartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation_AggregationPartition::IsInitialized() const {
  return true;
}

void Aggregation_AggregationPartition::InternalSwap(Aggregation_AggregationPartition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
  swap(_impl_.include_group_by_columns_, other->_impl_.include_group_by_columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Aggregation_AggregationPartition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[88]);
}

// ===================================================================

class Aggregation::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns& columns(const Aggregation* msg);
  static const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount& count(const Aggregation* msg);
  static const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey& first_row_key(const Aggregation* msg);
  static const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey& last_row_key(const Aggregation* msg);
  static const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition& partition(const Aggregation* msg);
};

const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns&
Aggregation::_Internal::columns(const Aggregation* msg) {
  return *msg->_impl_.type_.columns_;
}
const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount&
Aggregation::_Internal::count(const Aggregation* msg) {
  return *msg->_impl_.type_.count_;
}
const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey&
Aggregation::_Internal::first_row_key(const Aggregation* msg) {
  return *msg->_impl_.type_.first_row_key_;
}
const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey&
Aggregation::_Internal::last_row_key(const Aggregation* msg) {
  return *msg->_impl_.type_.last_row_key_;
}
const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition&
Aggregation::_Internal::partition(const Aggregation* msg) {
  return *msg->_impl_.type_.partition_;
}
void Aggregation::set_allocated_columns(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns* columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(columns);
    if (message_arena != submessage_arena) {
      columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columns, submessage_arena);
    }
    set_has_columns();
    _impl_.type_.columns_ = columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.columns)
}
void Aggregation::set_allocated_count(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(count);
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    set_has_count();
    _impl_.type_.count_ = count;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.count)
}
void Aggregation::set_allocated_first_row_key(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey* first_row_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (first_row_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(first_row_key);
    if (message_arena != submessage_arena) {
      first_row_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_row_key, submessage_arena);
    }
    set_has_first_row_key();
    _impl_.type_.first_row_key_ = first_row_key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.first_row_key)
}
void Aggregation::set_allocated_last_row_key(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey* last_row_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (last_row_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_row_key);
    if (message_arena != submessage_arena) {
      last_row_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_row_key, submessage_arena);
    }
    set_has_last_row_key();
    _impl_.type_.last_row_key_ = last_row_key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.last_row_key)
}
void Aggregation::set_allocated_partition(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition* partition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (partition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partition);
    if (message_arena != submessage_arena) {
      partition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition, submessage_arena);
    }
    set_has_partition();
    _impl_.type_.partition_ = partition;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.partition)
}
Aggregation::Aggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation)
}
Aggregation::Aggregation(const Aggregation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Aggregation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kColumns: {
      _this->_internal_mutable_columns()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns::MergeFrom(
          from._internal_columns());
      break;
    }
    case kCount: {
      _this->_internal_mutable_count()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount::MergeFrom(
          from._internal_count());
      break;
    }
    case kFirstRowKey: {
      _this->_internal_mutable_first_row_key()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey::MergeFrom(
          from._internal_first_row_key());
      break;
    }
    case kLastRowKey: {
      _this->_internal_mutable_last_row_key()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey::MergeFrom(
          from._internal_last_row_key());
      break;
    }
    case kPartition: {
      _this->_internal_mutable_partition()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition::MergeFrom(
          from._internal_partition());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation)
}

inline void Aggregation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

Aggregation::~Aggregation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Aggregation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Aggregation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Aggregation::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Aggregation)
  switch (type_case()) {
    case kColumns: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.columns_;
      }
      break;
    }
    case kCount: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.count_;
      }
      break;
    }
    case kFirstRowKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.first_row_key_;
      }
      break;
    }
    case kLastRowKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.last_row_key_;
      }
      break;
    }
    case kPartition: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.partition_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void Aggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aggregation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey first_row_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_row_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey last_row_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_row_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition partition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Aggregation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns columns = 1;
  if (_internal_has_columns()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::columns(this),
        _Internal::columns(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount count = 2;
  if (_internal_has_count()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::count(this),
        _Internal::count(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey first_row_key = 3;
  if (_internal_has_first_row_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::first_row_key(this),
        _Internal::first_row_key(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey last_row_key = 4;
  if (_internal_has_last_row_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_row_key(this),
        _Internal::last_row_key(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition partition = 5;
  if (_internal_has_partition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::partition(this),
        _Internal::partition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation)
  return target;
}

size_t Aggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns columns = 1;
    case kColumns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.columns_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount count = 2;
    case kCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.count_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey first_row_key = 3;
    case kFirstRowKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.first_row_key_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey last_row_key = 4;
    case kLastRowKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.last_row_key_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition partition = 5;
    case kPartition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.partition_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aggregation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Aggregation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aggregation::GetClassData() const { return &_class_data_; }


void Aggregation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Aggregation*>(&to_msg);
  auto& from = static_cast<const Aggregation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kColumns: {
      _this->_internal_mutable_columns()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns::MergeFrom(
          from._internal_columns());
      break;
    }
    case kCount: {
      _this->_internal_mutable_count()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount::MergeFrom(
          from._internal_count());
      break;
    }
    case kFirstRowKey: {
      _this->_internal_mutable_first_row_key()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey::MergeFrom(
          from._internal_first_row_key());
      break;
    }
    case kLastRowKey: {
      _this->_internal_mutable_last_row_key()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey::MergeFrom(
          from._internal_last_row_key());
      break;
    }
    case kPartition: {
      _this->_internal_mutable_partition()->::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition::MergeFrom(
          from._internal_partition());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation::CopyFrom(const Aggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation::IsInitialized() const {
  return true;
}

void Aggregation::InternalSwap(Aggregation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Aggregation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[89]);
}

// ===================================================================

class SortDescriptor::_Internal {
 public:
};

SortDescriptor::SortDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}
SortDescriptor::SortDescriptor(const SortDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SortDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , decltype(_impl_.is_absolute_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_absolute_, &from._impl_.is_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.is_absolute_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}

inline void SortDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , decltype(_impl_.is_absolute_){false}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SortDescriptor::~SortDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SortDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
}

void SortDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SortDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  ::memset(&_impl_.is_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.is_absolute_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SortDescriptor.column_name"));
        } else
          goto handle_unusual;
        continue;
      // bool is_absolute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SortDescriptor.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  // bool is_absolute = 2;
  if (this->_internal_is_absolute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_absolute(), target);
  }

  // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortDescriptor)
  return target;
}

size_t SortDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // bool is_absolute = 2;
  if (this->_internal_is_absolute() != 0) {
    total_size += 1 + 1;
  }

  // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SortDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortDescriptor::GetClassData() const { return &_class_data_; }


void SortDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SortDescriptor*>(&to_msg);
  auto& from = static_cast<const SortDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_is_absolute() != 0) {
    _this->_internal_set_is_absolute(from._internal_is_absolute());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortDescriptor::CopyFrom(const SortDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortDescriptor::IsInitialized() const {
  return true;
}

void SortDescriptor::InternalSwap(SortDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.direction_)
      + sizeof(SortDescriptor::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.is_absolute_)>(
          reinterpret_cast<char*>(&_impl_.is_absolute_),
          reinterpret_cast<char*>(&other->_impl_.is_absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[90]);
}

// ===================================================================

class SortTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const SortTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const SortTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SortTableRequest::_Internal::result_id(const SortTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
SortTableRequest::_Internal::source_id(const SortTableRequest* msg) {
  return *msg->_impl_.source_id_;
}
void SortTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
SortTableRequest::SortTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}
SortTableRequest::SortTableRequest(const SortTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SortTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sorts_){from._impl_.sorts_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}

inline void SortTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sorts_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SortTableRequest::~SortTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SortTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sorts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void SortTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SortTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sorts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorts_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortTableRequest)
  return target;
}

size_t SortTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->_impl_.sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SortTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortTableRequest::GetClassData() const { return &_class_data_; }


void SortTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SortTableRequest*>(&to_msg);
  auto& from = static_cast<const SortTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sorts_.MergeFrom(from._impl_.sorts_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortTableRequest::CopyFrom(const SortTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortTableRequest::IsInitialized() const {
  return true;
}

void SortTableRequest::InternalSwap(SortTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sorts_.InternalSwap(&other->_impl_.sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.source_id_)
      + sizeof(SortTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[91]);
}

// ===================================================================

class FilterTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FilterTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FilterTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
FilterTableRequest::_Internal::result_id(const FilterTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
FilterTableRequest::_Internal::source_id(const FilterTableRequest* msg) {
  return *msg->_impl_.source_id_;
}
void FilterTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
FilterTableRequest::FilterTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}
FilterTableRequest::FilterTableRequest(const FilterTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilterTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}

inline void FilterTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FilterTableRequest::~FilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void FilterTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  return target;
}

size_t FilterTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilterTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterTableRequest::GetClassData() const { return &_class_data_; }


void FilterTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilterTableRequest*>(&to_msg);
  auto& from = static_cast<const FilterTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterTableRequest::CopyFrom(const FilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterTableRequest::IsInitialized() const {
  return true;
}

void FilterTableRequest::InternalSwap(FilterTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.source_id_)
      + sizeof(FilterTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[92]);
}

// ===================================================================

class SeekRowRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& source_id(const SeekRowRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::Literal& seek_value(const SeekRowRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
SeekRowRequest::_Internal::source_id(const SeekRowRequest* msg) {
  return *msg->_impl_.source_id_;
}
const ::io::deephaven::proto::backplane::grpc::Literal&
SeekRowRequest::_Internal::seek_value(const SeekRowRequest* msg) {
  return *msg->_impl_.seek_value_;
}
void SeekRowRequest::clear_source_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
}
SeekRowRequest::SeekRowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SeekRowRequest)
}
SeekRowRequest::SeekRowRequest(const SeekRowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeekRowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.seek_value_){nullptr}
    , decltype(_impl_.starting_row_){}
    , decltype(_impl_.insensitive_){}
    , decltype(_impl_.contains_){}
    , decltype(_impl_.is_backward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.source_id_);
  }
  if (from._internal_has_seek_value()) {
    _this->_impl_.seek_value_ = new ::io::deephaven::proto::backplane::grpc::Literal(*from._impl_.seek_value_);
  }
  ::memcpy(&_impl_.starting_row_, &from._impl_.starting_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_backward_) -
    reinterpret_cast<char*>(&_impl_.starting_row_)) + sizeof(_impl_.is_backward_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SeekRowRequest)
}

inline void SeekRowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.seek_value_){nullptr}
    , decltype(_impl_.starting_row_){int64_t{0}}
    , decltype(_impl_.insensitive_){false}
    , decltype(_impl_.contains_){false}
    , decltype(_impl_.is_backward_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SeekRowRequest::~SeekRowRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeekRowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.seek_value_;
}

void SeekRowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeekRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.seek_value_ != nullptr) {
    delete _impl_.seek_value_;
  }
  _impl_.seek_value_ = nullptr;
  ::memset(&_impl_.starting_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_backward_) -
      reinterpret_cast<char*>(&_impl_.starting_row_)) + sizeof(_impl_.is_backward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeekRowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 starting_row = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.starting_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string column_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SeekRowRequest.column_name"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Literal seek_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_seek_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool insensitive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.insensitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool contains = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.contains_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_backward = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_backward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeekRowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // sint64 starting_row = 2 [jstype = JS_STRING];
  if (this->_internal_starting_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_starting_row(), target);
  }

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SeekRowRequest.column_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_column_name(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Literal seek_value = 4;
  if (this->_internal_has_seek_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::seek_value(this),
        _Internal::seek_value(this).GetCachedSize(), target, stream);
  }

  // bool insensitive = 5;
  if (this->_internal_insensitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_insensitive(), target);
  }

  // bool contains = 6;
  if (this->_internal_contains() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_contains(), target);
  }

  // bool is_backward = 7;
  if (this->_internal_is_backward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_backward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  return target;
}

size_t SeekRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.Literal seek_value = 4;
  if (this->_internal_has_seek_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.seek_value_);
  }

  // sint64 starting_row = 2 [jstype = JS_STRING];
  if (this->_internal_starting_row() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_starting_row());
  }

  // bool insensitive = 5;
  if (this->_internal_insensitive() != 0) {
    total_size += 1 + 1;
  }

  // bool contains = 6;
  if (this->_internal_contains() != 0) {
    total_size += 1 + 1;
  }

  // bool is_backward = 7;
  if (this->_internal_is_backward() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeekRowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeekRowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeekRowRequest::GetClassData() const { return &_class_data_; }


void SeekRowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeekRowRequest*>(&to_msg);
  auto& from = static_cast<const SeekRowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_seek_value()) {
    _this->_internal_mutable_seek_value()->::io::deephaven::proto::backplane::grpc::Literal::MergeFrom(
        from._internal_seek_value());
  }
  if (from._internal_starting_row() != 0) {
    _this->_internal_set_starting_row(from._internal_starting_row());
  }
  if (from._internal_insensitive() != 0) {
    _this->_internal_set_insensitive(from._internal_insensitive());
  }
  if (from._internal_contains() != 0) {
    _this->_internal_set_contains(from._internal_contains());
  }
  if (from._internal_is_backward() != 0) {
    _this->_internal_set_is_backward(from._internal_is_backward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeekRowRequest::CopyFrom(const SeekRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekRowRequest::IsInitialized() const {
  return true;
}

void SeekRowRequest::InternalSwap(SeekRowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.is_backward_)
      + sizeof(SeekRowRequest::_impl_.is_backward_)
      - PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekRowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[93]);
}

// ===================================================================

class SeekRowResponse::_Internal {
 public:
};

SeekRowResponse::SeekRowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SeekRowResponse)
}
SeekRowResponse::SeekRowResponse(const SeekRowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeekRowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_row_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_row_ = from._impl_.result_row_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SeekRowResponse)
}

inline void SeekRowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_row_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SeekRowResponse::~SeekRowResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeekRowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SeekRowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeekRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_row_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeekRowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 result_row = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeekRowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 result_row = 1 [jstype = JS_STRING];
  if (this->_internal_result_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_result_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  return target;
}

size_t SeekRowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 result_row = 1 [jstype = JS_STRING];
  if (this->_internal_result_row() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_result_row());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeekRowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeekRowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeekRowResponse::GetClassData() const { return &_class_data_; }


void SeekRowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeekRowResponse*>(&to_msg);
  auto& from = static_cast<const SeekRowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result_row() != 0) {
    _this->_internal_set_result_row(from._internal_result_row());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeekRowResponse::CopyFrom(const SeekRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekRowResponse::IsInitialized() const {
  return true;
}

void SeekRowResponse::InternalSwap(SeekRowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_row_, other->_impl_.result_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekRowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[94]);
}

// ===================================================================

class Reference::_Internal {
 public:
};

Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Reference)
}

inline void Reference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Reference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
}

void Reference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Reference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Reference.column_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Reference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Reference.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Reference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 1;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reference::GetClassData() const { return &_class_data_; }


void Reference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reference*>(&to_msg);
  auto& from = static_cast<const Reference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Reference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[95]);
}

// ===================================================================

class Literal::_Internal {
 public:
};

Literal::Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Literal)
}
Literal::Literal(const Literal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Literal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kLongValue: {
      _this->_internal_set_long_value(from._internal_long_value());
      break;
    }
    case kNanoTimeValue: {
      _this->_internal_set_nano_time_value(from._internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Literal)
}

inline void Literal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Literal::~Literal() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Literal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Literal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Literal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Literal::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Literal)
  switch (value_case()) {
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kNanoTimeValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Literal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Literal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.Literal.string_value"));
        } else
          goto handle_unusual;
        continue;
      // double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 long_value = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 nano_time_value = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_nano_time_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Literal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Literal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.Literal.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // double double_value = 2;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // bool bool_value = 3;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  // sint64 long_value = 4 [jstype = JS_STRING];
  if (_internal_has_long_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(4, this->_internal_long_value(), target);
  }

  // sint64 nano_time_value = 5 [jstype = JS_STRING];
  if (_internal_has_nano_time_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(5, this->_internal_nano_time_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Literal)
  return target;
}

size_t Literal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Literal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // sint64 long_value = 4 [jstype = JS_STRING];
    case kLongValue: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_long_value());
      break;
    }
    // sint64 nano_time_value = 5 [jstype = JS_STRING];
    case kNanoTimeValue: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Literal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Literal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Literal::GetClassData() const { return &_class_data_; }


void Literal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Literal*>(&to_msg);
  auto& from = static_cast<const Literal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Literal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kLongValue: {
      _this->_internal_set_long_value(from._internal_long_value());
      break;
    }
    case kNanoTimeValue: {
      _this->_internal_set_nano_time_value(from._internal_nano_time_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Literal::CopyFrom(const Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Literal::IsInitialized() const {
  return true;
}

void Literal::InternalSwap(Literal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Literal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[96]);
}

// ===================================================================

class Value::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const Value* msg);
  static const ::io::deephaven::proto::backplane::grpc::Literal& literal(const Value* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
Value::_Internal::reference(const Value* msg) {
  return *msg->_impl_.data_.reference_;
}
const ::io::deephaven::proto::backplane::grpc::Literal&
Value::_Internal::literal(const Value* msg) {
  return *msg->_impl_.data_.literal_;
}
void Value::set_allocated_reference(::io::deephaven::proto::backplane::grpc::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    _impl_.data_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Value.reference)
}
void Value::set_allocated_literal(::io::deephaven::proto::backplane::grpc::Literal* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(literal);
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    set_has_literal();
    _impl_.data_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Value.literal)
}
Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kReference: {
      _this->_internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(
          from._internal_reference());
      break;
    }
    case kLiteral: {
      _this->_internal_mutable_literal()->::io::deephaven::proto::backplane::grpc::Literal::MergeFrom(
          from._internal_literal());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Value)
}

inline void Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Value::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Value)
  switch (data_case()) {
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.reference_;
      }
      break;
    }
    case kLiteral: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.literal_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_literal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (_internal_has_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
  if (_internal_has_literal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::literal(this),
        _Internal::literal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.reference_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
    case kLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.literal_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }


void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Value*>(&to_msg);
  auto& from = static_cast<const Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kReference: {
      _this->_internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(
          from._internal_reference());
      break;
    }
    case kLiteral: {
      _this->_internal_mutable_literal()->::io::deephaven::proto::backplane::grpc::Literal::MergeFrom(
          from._internal_literal());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[97]);
}

// ===================================================================

class Condition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::AndCondition& and_(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::OrCondition& or_(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::NotCondition& not_(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::CompareCondition& compare(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::InCondition& in(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::InvokeCondition& invoke(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::IsNullCondition& is_null(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::MatchesCondition& matches(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::ContainsCondition& contains(const Condition* msg);
  static const ::io::deephaven::proto::backplane::grpc::SearchCondition& search(const Condition* msg);
};

const ::io::deephaven::proto::backplane::grpc::AndCondition&
Condition::_Internal::and_(const Condition* msg) {
  return *msg->_impl_.data_.and__;
}
const ::io::deephaven::proto::backplane::grpc::OrCondition&
Condition::_Internal::or_(const Condition* msg) {
  return *msg->_impl_.data_.or__;
}
const ::io::deephaven::proto::backplane::grpc::NotCondition&
Condition::_Internal::not_(const Condition* msg) {
  return *msg->_impl_.data_.not__;
}
const ::io::deephaven::proto::backplane::grpc::CompareCondition&
Condition::_Internal::compare(const Condition* msg) {
  return *msg->_impl_.data_.compare_;
}
const ::io::deephaven::proto::backplane::grpc::InCondition&
Condition::_Internal::in(const Condition* msg) {
  return *msg->_impl_.data_.in_;
}
const ::io::deephaven::proto::backplane::grpc::InvokeCondition&
Condition::_Internal::invoke(const Condition* msg) {
  return *msg->_impl_.data_.invoke_;
}
const ::io::deephaven::proto::backplane::grpc::IsNullCondition&
Condition::_Internal::is_null(const Condition* msg) {
  return *msg->_impl_.data_.is_null_;
}
const ::io::deephaven::proto::backplane::grpc::MatchesCondition&
Condition::_Internal::matches(const Condition* msg) {
  return *msg->_impl_.data_.matches_;
}
const ::io::deephaven::proto::backplane::grpc::ContainsCondition&
Condition::_Internal::contains(const Condition* msg) {
  return *msg->_impl_.data_.contains_;
}
const ::io::deephaven::proto::backplane::grpc::SearchCondition&
Condition::_Internal::search(const Condition* msg) {
  return *msg->_impl_.data_.search_;
}
void Condition::set_allocated_and_(::io::deephaven::proto::backplane::grpc::AndCondition* and_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (and_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(and_);
    if (message_arena != submessage_arena) {
      and_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, and_, submessage_arena);
    }
    set_has_and_();
    _impl_.data_.and__ = and_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.and)
}
void Condition::set_allocated_or_(::io::deephaven::proto::backplane::grpc::OrCondition* or_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (or_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(or_);
    if (message_arena != submessage_arena) {
      or_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, or_, submessage_arena);
    }
    set_has_or_();
    _impl_.data_.or__ = or_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.or)
}
void Condition::set_allocated_not_(::io::deephaven::proto::backplane::grpc::NotCondition* not_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (not_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(not_);
    if (message_arena != submessage_arena) {
      not_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_, submessage_arena);
    }
    set_has_not_();
    _impl_.data_.not__ = not_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.not)
}
void Condition::set_allocated_compare(::io::deephaven::proto::backplane::grpc::CompareCondition* compare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (compare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compare);
    if (message_arena != submessage_arena) {
      compare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compare, submessage_arena);
    }
    set_has_compare();
    _impl_.data_.compare_ = compare;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.compare)
}
void Condition::set_allocated_in(::io::deephaven::proto::backplane::grpc::InCondition* in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(in);
    if (message_arena != submessage_arena) {
      in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in, submessage_arena);
    }
    set_has_in();
    _impl_.data_.in_ = in;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.in)
}
void Condition::set_allocated_invoke(::io::deephaven::proto::backplane::grpc::InvokeCondition* invoke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (invoke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(invoke);
    if (message_arena != submessage_arena) {
      invoke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoke, submessage_arena);
    }
    set_has_invoke();
    _impl_.data_.invoke_ = invoke;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.invoke)
}
void Condition::set_allocated_is_null(::io::deephaven::proto::backplane::grpc::IsNullCondition* is_null) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (is_null) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(is_null);
    if (message_arena != submessage_arena) {
      is_null = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_null, submessage_arena);
    }
    set_has_is_null();
    _impl_.data_.is_null_ = is_null;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.is_null)
}
void Condition::set_allocated_matches(::io::deephaven::proto::backplane::grpc::MatchesCondition* matches) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (matches) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(matches);
    if (message_arena != submessage_arena) {
      matches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matches, submessage_arena);
    }
    set_has_matches();
    _impl_.data_.matches_ = matches;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.matches)
}
void Condition::set_allocated_contains(::io::deephaven::proto::backplane::grpc::ContainsCondition* contains) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (contains) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contains);
    if (message_arena != submessage_arena) {
      contains = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contains, submessage_arena);
    }
    set_has_contains();
    _impl_.data_.contains_ = contains;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.contains)
}
void Condition::set_allocated_search(::io::deephaven::proto::backplane::grpc::SearchCondition* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search);
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    set_has_search();
    _impl_.data_.search_ = search;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.search)
}
Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Condition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kAnd: {
      _this->_internal_mutable_and_()->::io::deephaven::proto::backplane::grpc::AndCondition::MergeFrom(
          from._internal_and_());
      break;
    }
    case kOr: {
      _this->_internal_mutable_or_()->::io::deephaven::proto::backplane::grpc::OrCondition::MergeFrom(
          from._internal_or_());
      break;
    }
    case kNot: {
      _this->_internal_mutable_not_()->::io::deephaven::proto::backplane::grpc::NotCondition::MergeFrom(
          from._internal_not_());
      break;
    }
    case kCompare: {
      _this->_internal_mutable_compare()->::io::deephaven::proto::backplane::grpc::CompareCondition::MergeFrom(
          from._internal_compare());
      break;
    }
    case kIn: {
      _this->_internal_mutable_in()->::io::deephaven::proto::backplane::grpc::InCondition::MergeFrom(
          from._internal_in());
      break;
    }
    case kInvoke: {
      _this->_internal_mutable_invoke()->::io::deephaven::proto::backplane::grpc::InvokeCondition::MergeFrom(
          from._internal_invoke());
      break;
    }
    case kIsNull: {
      _this->_internal_mutable_is_null()->::io::deephaven::proto::backplane::grpc::IsNullCondition::MergeFrom(
          from._internal_is_null());
      break;
    }
    case kMatches: {
      _this->_internal_mutable_matches()->::io::deephaven::proto::backplane::grpc::MatchesCondition::MergeFrom(
          from._internal_matches());
      break;
    }
    case kContains: {
      _this->_internal_mutable_contains()->::io::deephaven::proto::backplane::grpc::ContainsCondition::MergeFrom(
          from._internal_contains());
      break;
    }
    case kSearch: {
      _this->_internal_mutable_search()->::io::deephaven::proto::backplane::grpc::SearchCondition::MergeFrom(
          from._internal_search());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Condition)
}

inline void Condition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Condition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Condition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Condition::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Condition)
  switch (data_case()) {
    case kAnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.and__;
      }
      break;
    }
    case kOr: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.or__;
      }
      break;
    }
    case kNot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.not__;
      }
      break;
    }
    case kCompare: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.compare_;
      }
      break;
    }
    case kIn: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.in_;
      }
      break;
    }
    case kInvoke: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.invoke_;
      }
      break;
    }
    case kIsNull: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.is_null_;
      }
      break;
    }
    case kMatches: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.matches_;
      }
      break;
    }
    case kContains: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.contains_;
      }
      break;
    }
    case kSearch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.search_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Condition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_and_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_or_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_in(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_null(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_matches(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_contains(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Condition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Condition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
  if (_internal_has_and_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::and_(this),
        _Internal::and_(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
  if (_internal_has_or_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::or_(this),
        _Internal::or_(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
  if (_internal_has_not_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::not_(this),
        _Internal::not_(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
  if (_internal_has_compare()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::compare(this),
        _Internal::compare(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
  if (_internal_has_in()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::in(this),
        _Internal::in(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
  if (_internal_has_invoke()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::invoke(this),
        _Internal::invoke(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
  if (_internal_has_is_null()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::is_null(this),
        _Internal::is_null(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
  if (_internal_has_matches()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::matches(this),
        _Internal::matches(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
  if (_internal_has_contains()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::contains(this),
        _Internal::contains(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
  if (_internal_has_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::search(this),
        _Internal::search(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Condition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
    case kAnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.and__);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
    case kOr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.or__);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
    case kNot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.not__);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
    case kCompare: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.compare_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
    case kIn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.in_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
    case kInvoke: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.invoke_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
    case kIsNull: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.is_null_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
    case kMatches: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.matches_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
    case kContains: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.contains_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
    case kSearch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.search_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Condition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Condition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Condition::GetClassData() const { return &_class_data_; }


void Condition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Condition*>(&to_msg);
  auto& from = static_cast<const Condition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Condition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kAnd: {
      _this->_internal_mutable_and_()->::io::deephaven::proto::backplane::grpc::AndCondition::MergeFrom(
          from._internal_and_());
      break;
    }
    case kOr: {
      _this->_internal_mutable_or_()->::io::deephaven::proto::backplane::grpc::OrCondition::MergeFrom(
          from._internal_or_());
      break;
    }
    case kNot: {
      _this->_internal_mutable_not_()->::io::deephaven::proto::backplane::grpc::NotCondition::MergeFrom(
          from._internal_not_());
      break;
    }
    case kCompare: {
      _this->_internal_mutable_compare()->::io::deephaven::proto::backplane::grpc::CompareCondition::MergeFrom(
          from._internal_compare());
      break;
    }
    case kIn: {
      _this->_internal_mutable_in()->::io::deephaven::proto::backplane::grpc::InCondition::MergeFrom(
          from._internal_in());
      break;
    }
    case kInvoke: {
      _this->_internal_mutable_invoke()->::io::deephaven::proto::backplane::grpc::InvokeCondition::MergeFrom(
          from._internal_invoke());
      break;
    }
    case kIsNull: {
      _this->_internal_mutable_is_null()->::io::deephaven::proto::backplane::grpc::IsNullCondition::MergeFrom(
          from._internal_is_null());
      break;
    }
    case kMatches: {
      _this->_internal_mutable_matches()->::io::deephaven::proto::backplane::grpc::MatchesCondition::MergeFrom(
          from._internal_matches());
      break;
    }
    case kContains: {
      _this->_internal_mutable_contains()->::io::deephaven::proto::backplane::grpc::ContainsCondition::MergeFrom(
          from._internal_contains());
      break;
    }
    case kSearch: {
      _this->_internal_mutable_search()->::io::deephaven::proto::backplane::grpc::SearchCondition::MergeFrom(
          from._internal_search());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[98]);
}

// ===================================================================

class AndCondition::_Internal {
 public:
};

AndCondition::AndCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AndCondition)
}
AndCondition::AndCondition(const AndCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AndCondition)
}

inline void AndCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AndCondition::~AndCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AndCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
}

void AndCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AndCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AndCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AndCondition)
  return target;
}

size_t AndCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AndCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndCondition::GetClassData() const { return &_class_data_; }


void AndCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndCondition*>(&to_msg);
  auto& from = static_cast<const AndCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AndCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndCondition::CopyFrom(const AndCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AndCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndCondition::IsInitialized() const {
  return true;
}

void AndCondition::InternalSwap(AndCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[99]);
}

// ===================================================================

class OrCondition::_Internal {
 public:
};

OrCondition::OrCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.OrCondition)
}
OrCondition::OrCondition(const OrCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){from._impl_.filters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.OrCondition)
}

inline void OrCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrCondition::~OrCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.OrCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filters_.~RepeatedPtrField();
}

void OrCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.OrCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.OrCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.OrCondition)
  return target;
}

size_t OrCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.OrCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->_impl_.filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrCondition::GetClassData() const { return &_class_data_; }


void OrCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrCondition*>(&to_msg);
  auto& from = static_cast<const OrCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.OrCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filters_.MergeFrom(from._impl_.filters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrCondition::CopyFrom(const OrCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.OrCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrCondition::IsInitialized() const {
  return true;
}

void OrCondition::InternalSwap(OrCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[100]);
}

// ===================================================================

class NotCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Condition& filter(const NotCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Condition&
NotCondition::_Internal::filter(const NotCondition* msg) {
  return *msg->_impl_.filter_;
}
NotCondition::NotCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.NotCondition)
}
NotCondition::NotCondition(const NotCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::io::deephaven::proto::backplane::grpc::Condition(*from._impl_.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.NotCondition)
}

inline void NotCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotCondition::~NotCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.NotCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void NotCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.NotCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.NotCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.NotCondition)
  return target;
}

size_t NotCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.NotCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotCondition::GetClassData() const { return &_class_data_; }


void NotCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotCondition*>(&to_msg);
  auto& from = static_cast<const NotCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.NotCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::Condition::MergeFrom(
        from._internal_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotCondition::CopyFrom(const NotCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.NotCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotCondition::IsInitialized() const {
  return true;
}

void NotCondition::InternalSwap(NotCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.filter_, other->_impl_.filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[101]);
}

// ===================================================================

class CompareCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Value& lhs(const CompareCondition* msg);
  static const ::io::deephaven::proto::backplane::grpc::Value& rhs(const CompareCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Value&
CompareCondition::_Internal::lhs(const CompareCondition* msg) {
  return *msg->_impl_.lhs_;
}
const ::io::deephaven::proto::backplane::grpc::Value&
CompareCondition::_Internal::rhs(const CompareCondition* msg) {
  return *msg->_impl_.rhs_;
}
CompareCondition::CompareCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CompareCondition)
}
CompareCondition::CompareCondition(const CompareCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompareCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lhs_){nullptr}
    , decltype(_impl_.rhs_){nullptr}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.case_sensitivity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lhs()) {
    _this->_impl_.lhs_ = new ::io::deephaven::proto::backplane::grpc::Value(*from._impl_.lhs_);
  }
  if (from._internal_has_rhs()) {
    _this->_impl_.rhs_ = new ::io::deephaven::proto::backplane::grpc::Value(*from._impl_.rhs_);
  }
  ::memcpy(&_impl_.operation_, &from._impl_.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.case_sensitivity_) -
    reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.case_sensitivity_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CompareCondition)
}

inline void CompareCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lhs_){nullptr}
    , decltype(_impl_.rhs_){nullptr}
    , decltype(_impl_.operation_){0}
    , decltype(_impl_.case_sensitivity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompareCondition::~CompareCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CompareCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompareCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lhs_;
  if (this != internal_default_instance()) delete _impl_.rhs_;
}

void CompareCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompareCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.lhs_ != nullptr) {
    delete _impl_.lhs_;
  }
  _impl_.lhs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rhs_ != nullptr) {
    delete _impl_.rhs_;
  }
  _impl_.rhs_ = nullptr;
  ::memset(&_impl_.operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.case_sensitivity_) -
      reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.case_sensitivity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompareCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::io::deephaven::proto::backplane::grpc::CompareCondition_CompareOperation>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lhs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rhs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompareCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
  if (this->_internal_has_lhs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::lhs(this),
        _Internal::lhs(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
  if (this->_internal_has_rhs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rhs(this),
        _Internal::rhs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CompareCondition)
  return target;
}

size_t CompareCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
  if (this->_internal_has_lhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lhs_);
  }

  // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
  if (this->_internal_has_rhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rhs_);
  }

  // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompareCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompareCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompareCondition::GetClassData() const { return &_class_data_; }


void CompareCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompareCondition*>(&to_msg);
  auto& from = static_cast<const CompareCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lhs()) {
    _this->_internal_mutable_lhs()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(
        from._internal_lhs());
  }
  if (from._internal_has_rhs()) {
    _this->_internal_mutable_rhs()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(
        from._internal_rhs());
  }
  if (from._internal_operation() != 0) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompareCondition::CopyFrom(const CompareCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareCondition::IsInitialized() const {
  return true;
}

void CompareCondition::InternalSwap(CompareCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.case_sensitivity_)
      + sizeof(CompareCondition::_impl_.case_sensitivity_)
      - PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.lhs_)>(
          reinterpret_cast<char*>(&_impl_.lhs_),
          reinterpret_cast<char*>(&other->_impl_.lhs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[102]);
}

// ===================================================================

class InCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Value& target(const InCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Value&
InCondition::_Internal::target(const InCondition* msg) {
  return *msg->_impl_.target_;
}
InCondition::InCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.InCondition)
}
InCondition::InCondition(const InCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candidates_){from._impl_.candidates_}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.case_sensitivity_){}
    , decltype(_impl_.match_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::io::deephaven::proto::backplane::grpc::Value(*from._impl_.target_);
  }
  ::memcpy(&_impl_.case_sensitivity_, &from._impl_.case_sensitivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_type_) -
    reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.InCondition)
}

inline void InCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candidates_){arena}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.case_sensitivity_){0}
    , decltype(_impl_.match_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InCondition::~InCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.InCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candidates_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void InCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.InCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidates_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  ::memset(&_impl_.case_sensitivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.match_type_) -
      reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Value target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::io::deephaven::proto::backplane::grpc::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.InCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Value target = 1;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candidates_size()); i < n; i++) {
    const auto& repfield = this->_internal_candidates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.InCondition)
  return target;
}

size_t InCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.InCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->_impl_.candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.deephaven.proto.backplane.grpc.Value target = 1;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InCondition::GetClassData() const { return &_class_data_; }


void InCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InCondition*>(&to_msg);
  auto& from = static_cast<const InCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.InCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candidates_.MergeFrom(from._impl_.candidates_);
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(
        from._internal_target());
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  if (from._internal_match_type() != 0) {
    _this->_internal_set_match_type(from._internal_match_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InCondition::CopyFrom(const InCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.InCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InCondition::IsInitialized() const {
  return true;
}

void InCondition::InternalSwap(InCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candidates_.InternalSwap(&other->_impl_.candidates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InCondition, _impl_.match_type_)
      + sizeof(InCondition::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(InCondition, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[103]);
}

// ===================================================================

class InvokeCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Value& target(const InvokeCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Value&
InvokeCondition::_Internal::target(const InvokeCondition* msg) {
  return *msg->_impl_.target_;
}
InvokeCondition::InvokeCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
}
InvokeCondition::InvokeCondition(const InvokeCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvokeCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.method_){}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::io::deephaven::proto::backplane::grpc::Value(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
}

inline void InvokeCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){arena}
    , decltype(_impl_.method_){}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvokeCondition::~InvokeCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvokeCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.~RepeatedPtrField();
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void InvokeCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvokeCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvokeCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.InvokeCondition.method"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.Value target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvokeCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.InvokeCondition.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // .io.deephaven.proto.backplane.grpc.Value target = 2;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.InvokeCondition)
  return target;
}

size_t InvokeCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string method = 1;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .io.deephaven.proto.backplane.grpc.Value target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvokeCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvokeCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvokeCondition::GetClassData() const { return &_class_data_; }


void InvokeCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvokeCondition*>(&to_msg);
  auto& from = static_cast<const InvokeCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::io::deephaven::proto::backplane::grpc::Value::MergeFrom(
        from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeCondition::CopyFrom(const InvokeCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeCondition::IsInitialized() const {
  return true;
}

void InvokeCondition::InternalSwap(InvokeCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  swap(_impl_.target_, other->_impl_.target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[104]);
}

// ===================================================================

class IsNullCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const IsNullCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
IsNullCondition::_Internal::reference(const IsNullCondition* msg) {
  return *msg->_impl_.reference_;
}
IsNullCondition::IsNullCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
}
IsNullCondition::IsNullCondition(const IsNullCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsNullCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference()) {
    _this->_impl_.reference_ = new ::io::deephaven::proto::backplane::grpc::Reference(*from._impl_.reference_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
}

inline void IsNullCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IsNullCondition::~IsNullCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsNullCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reference_;
}

void IsNullCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsNullCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reference_ != nullptr) {
    delete _impl_.reference_;
  }
  _impl_.reference_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsNullCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsNullCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.IsNullCondition)
  return target;
}

size_t IsNullCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsNullCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsNullCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsNullCondition::GetClassData() const { return &_class_data_; }


void IsNullCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsNullCondition*>(&to_msg);
  auto& from = static_cast<const IsNullCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reference()) {
    _this->_internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(
        from._internal_reference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsNullCondition::CopyFrom(const IsNullCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsNullCondition::IsInitialized() const {
  return true;
}

void IsNullCondition::InternalSwap(IsNullCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reference_, other->_impl_.reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsNullCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[105]);
}

// ===================================================================

class MatchesCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const MatchesCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
MatchesCondition::_Internal::reference(const MatchesCondition* msg) {
  return *msg->_impl_.reference_;
}
MatchesCondition::MatchesCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
}
MatchesCondition::MatchesCondition(const MatchesCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchesCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.regex_){}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.case_sensitivity_){}
    , decltype(_impl_.match_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_regex().empty()) {
    _this->_impl_.regex_.Set(from._internal_regex(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reference()) {
    _this->_impl_.reference_ = new ::io::deephaven::proto::backplane::grpc::Reference(*from._impl_.reference_);
  }
  ::memcpy(&_impl_.case_sensitivity_, &from._impl_.case_sensitivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_type_) -
    reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
}

inline void MatchesCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.regex_){}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.case_sensitivity_){0}
    , decltype(_impl_.match_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MatchesCondition::~MatchesCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchesCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regex_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reference_;
}

void MatchesCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchesCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regex_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.reference_ != nullptr) {
    delete _impl_.reference_;
  }
  _impl_.reference_ = nullptr;
  ::memset(&_impl_.case_sensitivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.match_type_) -
      reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchesCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.MatchesCondition.regex"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::io::deephaven::proto::backplane::grpc::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchesCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  // string regex = 2;
  if (!this->_internal_regex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.MatchesCondition.regex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_regex(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MatchesCondition)
  return target;
}

size_t MatchesCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string regex = 2;
  if (!this->_internal_regex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchesCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchesCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchesCondition::GetClassData() const { return &_class_data_; }


void MatchesCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchesCondition*>(&to_msg);
  auto& from = static_cast<const MatchesCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_regex().empty()) {
    _this->_internal_set_regex(from._internal_regex());
  }
  if (from._internal_has_reference()) {
    _this->_internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(
        from._internal_reference());
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  if (from._internal_match_type() != 0) {
    _this->_internal_set_match_type(from._internal_match_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchesCondition::CopyFrom(const MatchesCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchesCondition::IsInitialized() const {
  return true;
}

void MatchesCondition::InternalSwap(MatchesCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.regex_, lhs_arena,
      &other->_impl_.regex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.match_type_)
      + sizeof(MatchesCondition::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.reference_)>(
          reinterpret_cast<char*>(&_impl_.reference_),
          reinterpret_cast<char*>(&other->_impl_.reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchesCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[106]);
}

// ===================================================================

class ContainsCondition::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Reference& reference(const ContainsCondition* msg);
};

const ::io::deephaven::proto::backplane::grpc::Reference&
ContainsCondition::_Internal::reference(const ContainsCondition* msg) {
  return *msg->_impl_.reference_;
}
ContainsCondition::ContainsCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
}
ContainsCondition::ContainsCondition(const ContainsCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainsCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.search_string_){}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.case_sensitivity_){}
    , decltype(_impl_.match_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_string().empty()) {
    _this->_impl_.search_string_.Set(from._internal_search_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reference()) {
    _this->_impl_.reference_ = new ::io::deephaven::proto::backplane::grpc::Reference(*from._impl_.reference_);
  }
  ::memcpy(&_impl_.case_sensitivity_, &from._impl_.case_sensitivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_type_) -
    reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
}

inline void ContainsCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.search_string_){}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.case_sensitivity_){0}
    , decltype(_impl_.match_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.search_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContainsCondition::~ContainsCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainsCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reference_;
}

void ContainsCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainsCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.search_string_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.reference_ != nullptr) {
    delete _impl_.reference_;
  }
  _impl_.reference_ = nullptr;
  ::memset(&_impl_.case_sensitivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.match_type_) -
      reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainsCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string search_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_search_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ContainsCondition.search_string"));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_case_sensitivity(static_cast<::io::deephaven::proto::backplane::grpc::CaseSensitivity>(val));
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::io::deephaven::proto::backplane::grpc::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainsCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  // string search_string = 2;
  if (!this->_internal_search_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_string().data(), static_cast<int>(this->_internal_search_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ContainsCondition.search_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_search_string(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_case_sensitivity(), target);
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ContainsCondition)
  return target;
}

size_t ContainsCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search_string = 2;
  if (!this->_internal_search_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_string());
  }

  // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
  if (this->_internal_has_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_);
  }

  // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
  if (this->_internal_case_sensitivity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_case_sensitivity());
  }

  // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainsCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainsCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainsCondition::GetClassData() const { return &_class_data_; }


void ContainsCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainsCondition*>(&to_msg);
  auto& from = static_cast<const ContainsCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_search_string().empty()) {
    _this->_internal_set_search_string(from._internal_search_string());
  }
  if (from._internal_has_reference()) {
    _this->_internal_mutable_reference()->::io::deephaven::proto::backplane::grpc::Reference::MergeFrom(
        from._internal_reference());
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_internal_set_case_sensitivity(from._internal_case_sensitivity());
  }
  if (from._internal_match_type() != 0) {
    _this->_internal_set_match_type(from._internal_match_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainsCondition::CopyFrom(const ContainsCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainsCondition::IsInitialized() const {
  return true;
}

void ContainsCondition::InternalSwap(ContainsCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_string_, lhs_arena,
      &other->_impl_.search_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.match_type_)
      + sizeof(ContainsCondition::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.reference_)>(
          reinterpret_cast<char*>(&_impl_.reference_),
          reinterpret_cast<char*>(&other->_impl_.reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainsCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[107]);
}

// ===================================================================

class SearchCondition::_Internal {
 public:
};

SearchCondition::SearchCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SearchCondition)
}
SearchCondition::SearchCondition(const SearchCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchCondition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_references_){from._impl_.optional_references_}
    , decltype(_impl_.search_string_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_string().empty()) {
    _this->_impl_.search_string_.Set(from._internal_search_string(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SearchCondition)
}

inline void SearchCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_references_){arena}
    , decltype(_impl_.search_string_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.search_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchCondition::~SearchCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SearchCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.optional_references_.~RepeatedPtrField();
  _impl_.search_string_.Destroy();
}

void SearchCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.optional_references_.Clear();
  _impl_.search_string_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string search_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_search_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.SearchCondition.search_string"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optional_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_string = 1;
  if (!this->_internal_search_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_string().data(), static_cast<int>(this->_internal_search_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.SearchCondition.search_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_string(), target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_optional_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_optional_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SearchCondition)
  return target;
}

size_t SearchCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
  total_size += 1UL * this->_internal_optional_references_size();
  for (const auto& msg : this->_impl_.optional_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string search_string = 1;
  if (!this->_internal_search_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchCondition::GetClassData() const { return &_class_data_; }


void SearchCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchCondition*>(&to_msg);
  auto& from = static_cast<const SearchCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.optional_references_.MergeFrom(from._impl_.optional_references_);
  if (!from._internal_search_string().empty()) {
    _this->_internal_set_search_string(from._internal_search_string());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchCondition::CopyFrom(const SearchCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchCondition::IsInitialized() const {
  return true;
}

void SearchCondition::InternalSwap(SearchCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.optional_references_.InternalSwap(&other->_impl_.optional_references_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_string_, lhs_arena,
      &other->_impl_.search_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[108]);
}

// ===================================================================

class FlattenRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const FlattenRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const FlattenRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
FlattenRequest::_Internal::result_id(const FlattenRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
FlattenRequest::_Internal::source_id(const FlattenRequest* msg) {
  return *msg->_impl_.source_id_;
}
void FlattenRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
FlattenRequest::FlattenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}
FlattenRequest::FlattenRequest(const FlattenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlattenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}

inline void FlattenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlattenRequest::~FlattenRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlattenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void FlattenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlattenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlattenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlattenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FlattenRequest)
  return target;
}

size_t FlattenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlattenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlattenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlattenRequest::GetClassData() const { return &_class_data_; }


void FlattenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlattenRequest*>(&to_msg);
  auto& from = static_cast<const FlattenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlattenRequest::CopyFrom(const FlattenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenRequest::IsInitialized() const {
  return true;
}

void FlattenRequest::InternalSwap(FlattenRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.source_id_)
      + sizeof(FlattenRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlattenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[109]);
}

// ===================================================================

class MetaTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const MetaTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const MetaTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
MetaTableRequest::_Internal::result_id(const MetaTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
MetaTableRequest::_Internal::source_id(const MetaTableRequest* msg) {
  return *msg->_impl_.source_id_;
}
void MetaTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
MetaTableRequest::MetaTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MetaTableRequest)
}
MetaTableRequest::MetaTableRequest(const MetaTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetaTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MetaTableRequest)
}

inline void MetaTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetaTableRequest::~MetaTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetaTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void MetaTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetaTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  return target;
}

size_t MetaTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetaTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaTableRequest::GetClassData() const { return &_class_data_; }


void MetaTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetaTableRequest*>(&to_msg);
  auto& from = static_cast<const MetaTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaTableRequest::CopyFrom(const MetaTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaTableRequest::IsInitialized() const {
  return true;
}

void MetaTableRequest::InternalSwap(MetaTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.source_id_)
      + sizeof(MetaTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[110]);
}

// ===================================================================

class RunChartDownsampleRequest_ZoomRange::_Internal {
 public:
  using HasBits = decltype(std::declval<RunChartDownsampleRequest_ZoomRange>()._impl_._has_bits_);
  static void set_has_min_date_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_date_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
}
RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(const RunChartDownsampleRequest_ZoomRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunChartDownsampleRequest_ZoomRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_date_nanos_){}
    , decltype(_impl_.max_date_nanos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_date_nanos_, &from._impl_.min_date_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_date_nanos_) -
    reinterpret_cast<char*>(&_impl_.min_date_nanos_)) + sizeof(_impl_.max_date_nanos_));
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
}

inline void RunChartDownsampleRequest_ZoomRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_date_nanos_){int64_t{0}}
    , decltype(_impl_.max_date_nanos_){int64_t{0}}
  };
}

RunChartDownsampleRequest_ZoomRange::~RunChartDownsampleRequest_ZoomRange() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunChartDownsampleRequest_ZoomRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RunChartDownsampleRequest_ZoomRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunChartDownsampleRequest_ZoomRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_date_nanos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_date_nanos_) -
        reinterpret_cast<char*>(&_impl_.min_date_nanos_)) + sizeof(_impl_.max_date_nanos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunChartDownsampleRequest_ZoomRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_date_nanos(&has_bits);
          _impl_.min_date_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_date_nanos(&has_bits);
          _impl_.max_date_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunChartDownsampleRequest_ZoomRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
  if (_internal_has_min_date_nanos()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_min_date_nanos(), target);
  }

  // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
  if (_internal_has_max_date_nanos()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_date_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  return target;
}

size_t RunChartDownsampleRequest_ZoomRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min_date_nanos());
    }

    // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_date_nanos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunChartDownsampleRequest_ZoomRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunChartDownsampleRequest_ZoomRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunChartDownsampleRequest_ZoomRange::GetClassData() const { return &_class_data_; }


void RunChartDownsampleRequest_ZoomRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunChartDownsampleRequest_ZoomRange*>(&to_msg);
  auto& from = static_cast<const RunChartDownsampleRequest_ZoomRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_date_nanos_ = from._impl_.min_date_nanos_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_date_nanos_ = from._impl_.max_date_nanos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunChartDownsampleRequest_ZoomRange::CopyFrom(const RunChartDownsampleRequest_ZoomRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunChartDownsampleRequest_ZoomRange::IsInitialized() const {
  return true;
}

void RunChartDownsampleRequest_ZoomRange::InternalSwap(RunChartDownsampleRequest_ZoomRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.max_date_nanos_)
      + sizeof(RunChartDownsampleRequest_ZoomRange::_impl_.max_date_nanos_)
      - PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.min_date_nanos_)>(
          reinterpret_cast<char*>(&_impl_.min_date_nanos_),
          reinterpret_cast<char*>(&other->_impl_.min_date_nanos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunChartDownsampleRequest_ZoomRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[111]);
}

// ===================================================================

class RunChartDownsampleRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const RunChartDownsampleRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const RunChartDownsampleRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange& zoom_range(const RunChartDownsampleRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
RunChartDownsampleRequest::_Internal::result_id(const RunChartDownsampleRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
RunChartDownsampleRequest::_Internal::source_id(const RunChartDownsampleRequest* msg) {
  return *msg->_impl_.source_id_;
}
const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange&
RunChartDownsampleRequest::_Internal::zoom_range(const RunChartDownsampleRequest* msg) {
  return *msg->_impl_.zoom_range_;
}
void RunChartDownsampleRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
RunChartDownsampleRequest::RunChartDownsampleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
}
RunChartDownsampleRequest::RunChartDownsampleRequest(const RunChartDownsampleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunChartDownsampleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.y_column_names_){from._impl_.y_column_names_}
    , decltype(_impl_.x_column_name_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.zoom_range_){nullptr}
    , decltype(_impl_.pixel_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.x_column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x_column_name().empty()) {
    _this->_impl_.x_column_name_.Set(from._internal_x_column_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  if (from._internal_has_zoom_range()) {
    _this->_impl_.zoom_range_ = new ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange(*from._impl_.zoom_range_);
  }
  _this->_impl_.pixel_count_ = from._impl_.pixel_count_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
}

inline void RunChartDownsampleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.y_column_names_){arena}
    , decltype(_impl_.x_column_name_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.zoom_range_){nullptr}
    , decltype(_impl_.pixel_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.x_column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunChartDownsampleRequest::~RunChartDownsampleRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunChartDownsampleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.y_column_names_.~RepeatedPtrField();
  _impl_.x_column_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.zoom_range_;
}

void RunChartDownsampleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunChartDownsampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.y_column_names_.Clear();
  _impl_.x_column_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.zoom_range_ != nullptr) {
    delete _impl_.zoom_range_;
  }
  _impl_.zoom_range_ = nullptr;
  _impl_.pixel_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunChartDownsampleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pixel_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pixel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string x_column_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_x_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.x_column_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string y_column_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_y_column_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.y_column_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunChartDownsampleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // int32 pixel_count = 3;
  if (this->_internal_pixel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pixel_count(), target);
  }

  // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
  if (this->_internal_has_zoom_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::zoom_range(this),
        _Internal::zoom_range(this).GetCachedSize(), target, stream);
  }

  // string x_column_name = 5;
  if (!this->_internal_x_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_column_name().data(), static_cast<int>(this->_internal_x_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.x_column_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_x_column_name(), target);
  }

  // repeated string y_column_names = 6;
  for (int i = 0, n = this->_internal_y_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_y_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.y_column_names");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  return target;
}

size_t RunChartDownsampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string y_column_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.y_column_names_.size());
  for (int i = 0, n = _impl_.y_column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.y_column_names_.Get(i));
  }

  // string x_column_name = 5;
  if (!this->_internal_x_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_column_name());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
  if (this->_internal_has_zoom_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zoom_range_);
  }

  // int32 pixel_count = 3;
  if (this->_internal_pixel_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pixel_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunChartDownsampleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunChartDownsampleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunChartDownsampleRequest::GetClassData() const { return &_class_data_; }


void RunChartDownsampleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunChartDownsampleRequest*>(&to_msg);
  auto& from = static_cast<const RunChartDownsampleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.y_column_names_.MergeFrom(from._impl_.y_column_names_);
  if (!from._internal_x_column_name().empty()) {
    _this->_internal_set_x_column_name(from._internal_x_column_name());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_zoom_range()) {
    _this->_internal_mutable_zoom_range()->::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange::MergeFrom(
        from._internal_zoom_range());
  }
  if (from._internal_pixel_count() != 0) {
    _this->_internal_set_pixel_count(from._internal_pixel_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunChartDownsampleRequest::CopyFrom(const RunChartDownsampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunChartDownsampleRequest::IsInitialized() const {
  return true;
}

void RunChartDownsampleRequest::InternalSwap(RunChartDownsampleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.y_column_names_.InternalSwap(&other->_impl_.y_column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x_column_name_, lhs_arena,
      &other->_impl_.x_column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.pixel_count_)
      + sizeof(RunChartDownsampleRequest::_impl_.pixel_count_)
      - PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunChartDownsampleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[112]);
}

// ===================================================================

class CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly)
}
CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(const CreateInputTableRequest_InputTableKind_InMemoryAppendOnly& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CreateInputTableRequest_InputTableKind_InMemoryAppendOnly* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[113]);
}

// ===================================================================

class CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
}
CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_columns_){from._impl_.key_columns_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
}

inline void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_columns_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::~CreateInputTableRequest_InputTableKind_InMemoryKeyBacked() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_columns_.~RepeatedPtrField();
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_columns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string key_columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_key_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked.key_columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string key_columns = 1;
  for (int i = 0, n = this->_internal_key_columns_size(); i < n; i++) {
    const auto& s = this->_internal_key_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked.key_columns");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  return target;
}

size_t CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string key_columns = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.key_columns_.size());
  for (int i = 0, n = _impl_.key_columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.key_columns_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::GetClassData() const { return &_class_data_; }


void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateInputTableRequest_InputTableKind_InMemoryKeyBacked*>(&to_msg);
  auto& from = static_cast<const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_columns_.MergeFrom(from._impl_.key_columns_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CopyFrom(const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::IsInitialized() const {
  return true;
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::InternalSwap(CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_columns_.InternalSwap(&other->_impl_.key_columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[114]);
}

// ===================================================================

class CreateInputTableRequest_InputTableKind_Blink::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_Blink::CreateInputTableRequest_InputTableKind_Blink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink)
}
CreateInputTableRequest_InputTableKind_Blink::CreateInputTableRequest_InputTableKind_Blink(const CreateInputTableRequest_InputTableKind_Blink& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CreateInputTableRequest_InputTableKind_Blink* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest_InputTableKind_Blink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest_InputTableKind_Blink::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest_InputTableKind_Blink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[115]);
}

// ===================================================================

class CreateInputTableRequest_InputTableKind::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly& in_memory_append_only(const CreateInputTableRequest_InputTableKind* msg);
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& in_memory_key_backed(const CreateInputTableRequest_InputTableKind* msg);
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink& blink(const CreateInputTableRequest_InputTableKind* msg);
};

const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly&
CreateInputTableRequest_InputTableKind::_Internal::in_memory_append_only(const CreateInputTableRequest_InputTableKind* msg) {
  return *msg->_impl_.kind_.in_memory_append_only_;
}
const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked&
CreateInputTableRequest_InputTableKind::_Internal::in_memory_key_backed(const CreateInputTableRequest_InputTableKind* msg) {
  return *msg->_impl_.kind_.in_memory_key_backed_;
}
const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink&
CreateInputTableRequest_InputTableKind::_Internal::blink(const CreateInputTableRequest_InputTableKind* msg) {
  return *msg->_impl_.kind_.blink_;
}
void CreateInputTableRequest_InputTableKind::set_allocated_in_memory_append_only(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly* in_memory_append_only) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (in_memory_append_only) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(in_memory_append_only);
    if (message_arena != submessage_arena) {
      in_memory_append_only = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_memory_append_only, submessage_arena);
    }
    set_has_in_memory_append_only();
    _impl_.kind_.in_memory_append_only_ = in_memory_append_only;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.in_memory_append_only)
}
void CreateInputTableRequest_InputTableKind::set_allocated_in_memory_key_backed(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* in_memory_key_backed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (in_memory_key_backed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(in_memory_key_backed);
    if (message_arena != submessage_arena) {
      in_memory_key_backed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_memory_key_backed, submessage_arena);
    }
    set_has_in_memory_key_backed();
    _impl_.kind_.in_memory_key_backed_ = in_memory_key_backed;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.in_memory_key_backed)
}
void CreateInputTableRequest_InputTableKind::set_allocated_blink(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink* blink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (blink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blink);
    if (message_arena != submessage_arena) {
      blink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blink, submessage_arena);
    }
    set_has_blink();
    _impl_.kind_.blink_ = blink;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.blink)
}
CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
}
CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(const CreateInputTableRequest_InputTableKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateInputTableRequest_InputTableKind* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kInMemoryAppendOnly: {
      _this->_internal_mutable_in_memory_append_only()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::MergeFrom(
          from._internal_in_memory_append_only());
      break;
    }
    case kInMemoryKeyBacked: {
      _this->_internal_mutable_in_memory_key_backed()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeFrom(
          from._internal_in_memory_key_backed());
      break;
    }
    case kBlink: {
      _this->_internal_mutable_blink()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink::MergeFrom(
          from._internal_blink());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
}

inline void CreateInputTableRequest_InputTableKind::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

CreateInputTableRequest_InputTableKind::~CreateInputTableRequest_InputTableKind() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateInputTableRequest_InputTableKind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void CreateInputTableRequest_InputTableKind::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateInputTableRequest_InputTableKind::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  switch (kind_case()) {
    case kInMemoryAppendOnly: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.in_memory_append_only_;
      }
      break;
    }
    case kInMemoryKeyBacked: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.in_memory_key_backed_;
      }
      break;
    }
    case kBlink: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.blink_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void CreateInputTableRequest_InputTableKind::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInputTableRequest_InputTableKind::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_memory_append_only(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_memory_key_backed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink blink = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateInputTableRequest_InputTableKind::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
  if (_internal_has_in_memory_append_only()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::in_memory_append_only(this),
        _Internal::in_memory_append_only(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
  if (_internal_has_in_memory_key_backed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::in_memory_key_backed(this),
        _Internal::in_memory_key_backed(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink blink = 3;
  if (_internal_has_blink()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::blink(this),
        _Internal::blink(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  return target;
}

size_t CreateInputTableRequest_InputTableKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
    case kInMemoryAppendOnly: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.in_memory_append_only_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
    case kInMemoryKeyBacked: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.in_memory_key_backed_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink blink = 3;
    case kBlink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.blink_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest_InputTableKind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateInputTableRequest_InputTableKind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest_InputTableKind::GetClassData() const { return &_class_data_; }


void CreateInputTableRequest_InputTableKind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateInputTableRequest_InputTableKind*>(&to_msg);
  auto& from = static_cast<const CreateInputTableRequest_InputTableKind&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kInMemoryAppendOnly: {
      _this->_internal_mutable_in_memory_append_only()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::MergeFrom(
          from._internal_in_memory_append_only());
      break;
    }
    case kInMemoryKeyBacked: {
      _this->_internal_mutable_in_memory_key_backed()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeFrom(
          from._internal_in_memory_key_backed());
      break;
    }
    case kBlink: {
      _this->_internal_mutable_blink()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink::MergeFrom(
          from._internal_blink());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest_InputTableKind::CopyFrom(const CreateInputTableRequest_InputTableKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInputTableRequest_InputTableKind::IsInitialized() const {
  return true;
}

void CreateInputTableRequest_InputTableKind::InternalSwap(CreateInputTableRequest_InputTableKind* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest_InputTableKind::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[116]);
}

// ===================================================================

class CreateInputTableRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const CreateInputTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_table_id(const CreateInputTableRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind& kind(const CreateInputTableRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
CreateInputTableRequest::_Internal::result_id(const CreateInputTableRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
CreateInputTableRequest::_Internal::source_table_id(const CreateInputTableRequest* msg) {
  return *msg->_impl_.definition_.source_table_id_;
}
const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind&
CreateInputTableRequest::_Internal::kind(const CreateInputTableRequest* msg) {
  return *msg->_impl_.kind_;
}
void CreateInputTableRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
void CreateInputTableRequest::set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::TableReference* source_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_definition();
  if (source_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_table_id);
    if (message_arena != submessage_arena) {
      source_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_table_id, submessage_arena);
    }
    set_has_source_table_id();
    _impl_.definition_.source_table_id_ = source_table_id;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.source_table_id)
}
CreateInputTableRequest::CreateInputTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
}
CreateInputTableRequest::CreateInputTableRequest(const CreateInputTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateInputTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.kind_){nullptr}
    , decltype(_impl_.definition_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_kind()) {
    _this->_impl_.kind_ = new ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind(*from._impl_.kind_);
  }
  clear_has_definition();
  switch (from.definition_case()) {
    case kSourceTableId: {
      _this->_internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
          from._internal_source_table_id());
      break;
    }
    case kSchema: {
      _this->_internal_set_schema(from._internal_schema());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
}

inline void CreateInputTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.kind_){nullptr}
    , decltype(_impl_.definition_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_definition();
}

CreateInputTableRequest::~CreateInputTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateInputTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.kind_;
  if (has_definition()) {
    clear_definition();
  }
}

void CreateInputTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateInputTableRequest::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  switch (definition_case()) {
    case kSourceTableId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.definition_.source_table_id_;
      }
      break;
    }
    case kSchema: {
      _impl_.definition_.schema_.Destroy();
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DEFINITION_NOT_SET;
}


void CreateInputTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kind_ != nullptr) {
    delete _impl_.kind_;
  }
  _impl_.kind_ = nullptr;
  clear_definition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateInputTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kind(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateInputTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
  if (_internal_has_source_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_table_id(this),
        _Internal::source_table_id(this).GetCachedSize(), target, stream);
  }

  // bytes schema = 3;
  if (_internal_has_schema()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_schema(), target);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
  if (this->_internal_has_kind()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::kind(this),
        _Internal::kind(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  return target;
}

size_t CreateInputTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
  if (this->_internal_has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kind_);
  }

  switch (definition_case()) {
    // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
    case kSourceTableId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.definition_.source_table_id_);
      break;
    }
    // bytes schema = 3;
    case kSchema: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schema());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateInputTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateInputTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateInputTableRequest::GetClassData() const { return &_class_data_; }


void CreateInputTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateInputTableRequest*>(&to_msg);
  auto& from = static_cast<const CreateInputTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_kind()) {
    _this->_internal_mutable_kind()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind::MergeFrom(
        from._internal_kind());
  }
  switch (from.definition_case()) {
    case kSourceTableId: {
      _this->_internal_mutable_source_table_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
          from._internal_source_table_id());
      break;
    }
    case kSchema: {
      _this->_internal_set_schema(from._internal_schema());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest::CopyFrom(const CreateInputTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInputTableRequest::IsInitialized() const {
  return true;
}

void CreateInputTableRequest::InternalSwap(CreateInputTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.kind_)
      + sizeof(CreateInputTableRequest::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
  swap(_impl_.definition_, other->_impl_.definition_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateInputTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[117]);
}

// ===================================================================

class WhereInRequest::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const WhereInRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& left_id(const WhereInRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& right_id(const WhereInRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
WhereInRequest::_Internal::result_id(const WhereInRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
WhereInRequest::_Internal::left_id(const WhereInRequest* msg) {
  return *msg->_impl_.left_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
WhereInRequest::_Internal::right_id(const WhereInRequest* msg) {
  return *msg->_impl_.right_id_;
}
void WhereInRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
WhereInRequest::WhereInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.WhereInRequest)
}
WhereInRequest::WhereInRequest(const WhereInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WhereInRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){from._impl_.columns_to_match_}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.inverted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_left_id()) {
    _this->_impl_.left_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.left_id_);
  }
  if (from._internal_has_right_id()) {
    _this->_impl_.right_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.right_id_);
  }
  _this->_impl_.inverted_ = from._impl_.inverted_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.WhereInRequest)
}

inline void WhereInRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_to_match_){arena}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.left_id_){nullptr}
    , decltype(_impl_.right_id_){nullptr}
    , decltype(_impl_.inverted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WhereInRequest::~WhereInRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.WhereInRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WhereInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_to_match_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.left_id_;
  if (this != internal_default_instance()) delete _impl_.right_id_;
}

void WhereInRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WhereInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_id_ != nullptr) {
    delete _impl_.left_id_;
  }
  _impl_.left_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_id_ != nullptr) {
    delete _impl_.right_id_;
  }
  _impl_.right_id_ = nullptr;
  _impl_.inverted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhereInRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inverted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string columns_to_match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns_to_match();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.WhereInRequest.columns_to_match"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WhereInRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left_id(this),
        _Internal::left_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_id(this),
        _Internal::right_id(this).GetCachedSize(), target, stream);
  }

  // bool inverted = 4;
  if (this->_internal_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_inverted(), target);
  }

  // repeated string columns_to_match = 5;
  for (int i = 0, n = this->_internal_columns_to_match_size(); i < n; i++) {
    const auto& s = this->_internal_columns_to_match(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.WhereInRequest.columns_to_match");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.WhereInRequest)
  return target;
}

size_t WhereInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns_to_match = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_to_match_.size());
  for (int i = 0, n = _impl_.columns_to_match_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_to_match_.Get(i));
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
  if (this->_internal_has_left_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
  if (this->_internal_has_right_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_id_);
  }

  // bool inverted = 4;
  if (this->_internal_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WhereInRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WhereInRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WhereInRequest::GetClassData() const { return &_class_data_; }


void WhereInRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WhereInRequest*>(&to_msg);
  auto& from = static_cast<const WhereInRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_to_match_.MergeFrom(from._impl_.columns_to_match_);
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_left_id()) {
    _this->_internal_mutable_left_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_left_id());
  }
  if (from._internal_has_right_id()) {
    _this->_internal_mutable_right_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_right_id());
  }
  if (from._internal_inverted() != 0) {
    _this->_internal_set_inverted(from._internal_inverted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WhereInRequest::CopyFrom(const WhereInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhereInRequest::IsInitialized() const {
  return true;
}

void WhereInRequest::InternalSwap(WhereInRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.inverted_)
      + sizeof(WhereInRequest::_impl_.inverted_)
      - PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WhereInRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[118]);
}

// ===================================================================

class ColumnStatisticsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnStatisticsRequest>()._impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::Ticket& result_id(const ColumnStatisticsRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::TableReference& source_id(const ColumnStatisticsRequest* msg);
  static void set_has_unique_value_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::Ticket&
ColumnStatisticsRequest::_Internal::result_id(const ColumnStatisticsRequest* msg) {
  return *msg->_impl_.result_id_;
}
const ::io::deephaven::proto::backplane::grpc::TableReference&
ColumnStatisticsRequest::_Internal::source_id(const ColumnStatisticsRequest* msg) {
  return *msg->_impl_.source_id_;
}
void ColumnStatisticsRequest::clear_result_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
}
ColumnStatisticsRequest::ColumnStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
}
ColumnStatisticsRequest::ColumnStatisticsRequest(const ColumnStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnStatisticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.unique_value_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    _this->_impl_.column_name_.Set(from._internal_column_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_id()) {
    _this->_impl_.result_id_ = new ::io::deephaven::proto::backplane::grpc::Ticket(*from._impl_.result_id_);
  }
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::io::deephaven::proto::backplane::grpc::TableReference(*from._impl_.source_id_);
  }
  _this->_impl_.unique_value_limit_ = from._impl_.unique_value_limit_;
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
}

inline void ColumnStatisticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_name_){}
    , decltype(_impl_.result_id_){nullptr}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.unique_value_limit_){0}
  };
  _impl_.column_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ColumnStatisticsRequest::~ColumnStatisticsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_id_;
  if (this != internal_default_instance()) delete _impl_.source_id_;
}

void ColumnStatisticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_id_ != nullptr) {
    delete _impl_.result_id_;
  }
  _impl_.result_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_id_ != nullptr) {
    delete _impl_.source_id_;
  }
  _impl_.source_id_ = nullptr;
  _impl_.unique_value_limit_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnStatisticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string column_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_column_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest.column_name"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 unique_value_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_unique_value_limit(&has_bits);
          _impl_.unique_value_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnStatisticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_id(this),
        _Internal::result_id(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest.column_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_column_name(), target);
  }

  // optional int32 unique_value_limit = 4;
  if (_internal_has_unique_value_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_unique_value_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  return target;
}

size_t ColumnStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column_name = 3;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
  if (this->_internal_has_result_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_id_);
  }

  // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
  if (this->_internal_has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_id_);
  }

  // optional int32 unique_value_limit = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unique_value_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnStatisticsRequest::GetClassData() const { return &_class_data_; }


void ColumnStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const ColumnStatisticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_has_result_id()) {
    _this->_internal_mutable_result_id()->::io::deephaven::proto::backplane::grpc::Ticket::MergeFrom(
        from._internal_result_id());
  }
  if (from._internal_has_source_id()) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TableReference::MergeFrom(
        from._internal_source_id());
  }
  if (from._internal_has_unique_value_limit()) {
    _this->_internal_set_unique_value_limit(from._internal_unique_value_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnStatisticsRequest::CopyFrom(const ColumnStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStatisticsRequest::IsInitialized() const {
  return true;
}

void ColumnStatisticsRequest::InternalSwap(ColumnStatisticsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_name_, lhs_arena,
      &other->_impl_.column_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.unique_value_limit_)
      + sizeof(ColumnStatisticsRequest::_impl_.unique_value_limit_)
      - PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[119]);
}

// ===================================================================

class BatchTableRequest_Operation::_Internal {
 public:
  static const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& empty_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& time_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& drop_columns(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& lazy_update(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& view(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& update_view(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& select(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& select_distinct(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& filter(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& unstructured_filter(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SortTableRequest& sort(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& head(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& tail(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& head_by(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& tail_by(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::UngroupRequest& ungroup(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& merge(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& combo_aggregate(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FlattenRequest& flatten(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest& run_chart_downsample(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest& cross_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest& natural_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest& exact_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest& left_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest& as_of_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::FetchTableRequest& fetch_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest& apply_preview_columns(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest& create_input_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::UpdateByRequest& update_by(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::WhereInRequest& where_in(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggregateAllRequest& aggregate_all(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::AggregateRequest& aggregate(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& snapshot(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest& snapshot_when(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::MetaTableRequest& meta_table(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest& range_join(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest& aj(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest& raj(const BatchTableRequest_Operation* msg);
  static const ::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest& column_statistics(const BatchTableRequest_Operation* msg);
};

const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest&
BatchTableRequest_Operation::_Internal::empty_table(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.empty_table_;
}
const ::io::deephaven::proto::backplane::grpc::TimeTableRequest&
BatchTableRequest_Operation::_Internal::time_table(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.time_table_;
}
const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest&
BatchTableRequest_Operation::_Internal::drop_columns(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.drop_columns_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::update(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.update_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::lazy_update(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.lazy_update_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::view(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.view_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::update_view(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.update_view_;
}
const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest&
BatchTableRequest_Operation::_Internal::select(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.select_;
}
const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest&
BatchTableRequest_Operation::_Internal::select_distinct(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.select_distinct_;
}
const ::io::deephaven::proto::backplane::grpc::FilterTableRequest&
BatchTableRequest_Operation::_Internal::filter(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.filter_;
}
const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest&
BatchTableRequest_Operation::_Internal::unstructured_filter(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.unstructured_filter_;
}
const ::io::deephaven::proto::backplane::grpc::SortTableRequest&
BatchTableRequest_Operation::_Internal::sort(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.sort_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&
BatchTableRequest_Operation::_Internal::head(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.head_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest&
BatchTableRequest_Operation::_Internal::tail(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.tail_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&
BatchTableRequest_Operation::_Internal::head_by(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.head_by_;
}
const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest&
BatchTableRequest_Operation::_Internal::tail_by(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.tail_by_;
}
const ::io::deephaven::proto::backplane::grpc::UngroupRequest&
BatchTableRequest_Operation::_Internal::ungroup(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.ungroup_;
}
const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest&
BatchTableRequest_Operation::_Internal::merge(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.merge_;
}
const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest&
BatchTableRequest_Operation::_Internal::combo_aggregate(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.combo_aggregate_;
}
const ::io::deephaven::proto::backplane::grpc::FlattenRequest&
BatchTableRequest_Operation::_Internal::flatten(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.flatten_;
}
const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest&
BatchTableRequest_Operation::_Internal::run_chart_downsample(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.run_chart_downsample_;
}
const ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest&
BatchTableRequest_Operation::_Internal::cross_join(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.cross_join_;
}
const ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest&
BatchTableRequest_Operation::_Internal::natural_join(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.natural_join_;
}
const ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest&
BatchTableRequest_Operation::_Internal::exact_join(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.exact_join_;
}
const ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest&
BatchTableRequest_Operation::_Internal::left_join(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.left_join_;
}
const ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest&
BatchTableRequest_Operation::_Internal::as_of_join(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.as_of_join_;
}
const ::io::deephaven::proto::backplane::grpc::FetchTableRequest&
BatchTableRequest_Operation::_Internal::fetch_table(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.fetch_table_;
}
const ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest&
BatchTableRequest_Operation::_Internal::apply_preview_columns(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.apply_preview_columns_;
}
const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest&
BatchTableRequest_Operation::_Internal::create_input_table(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.create_input_table_;
}
const ::io::deephaven::proto::backplane::grpc::UpdateByRequest&
BatchTableRequest_Operation::_Internal::update_by(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.update_by_;
}
const ::io::deephaven::proto::backplane::grpc::WhereInRequest&
BatchTableRequest_Operation::_Internal::where_in(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.where_in_;
}
const ::io::deephaven::proto::backplane::grpc::AggregateAllRequest&
BatchTableRequest_Operation::_Internal::aggregate_all(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.aggregate_all_;
}
const ::io::deephaven::proto::backplane::grpc::AggregateRequest&
BatchTableRequest_Operation::_Internal::aggregate(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.aggregate_;
}
const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest&
BatchTableRequest_Operation::_Internal::snapshot(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.snapshot_;
}
const ::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest&
BatchTableRequest_Operation::_Internal::snapshot_when(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.snapshot_when_;
}
const ::io::deephaven::proto::backplane::grpc::MetaTableRequest&
BatchTableRequest_Operation::_Internal::meta_table(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.meta_table_;
}
const ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest&
BatchTableRequest_Operation::_Internal::range_join(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.range_join_;
}
const ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest&
BatchTableRequest_Operation::_Internal::aj(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.aj_;
}
const ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest&
BatchTableRequest_Operation::_Internal::raj(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.raj_;
}
const ::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest&
BatchTableRequest_Operation::_Internal::column_statistics(const BatchTableRequest_Operation* msg) {
  return *msg->_impl_.op_.column_statistics_;
}
void BatchTableRequest_Operation::set_allocated_empty_table(::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (empty_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_table);
    if (message_arena != submessage_arena) {
      empty_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_table, submessage_arena);
    }
    set_has_empty_table();
    _impl_.op_.empty_table_ = empty_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
}
void BatchTableRequest_Operation::set_allocated_time_table(::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (time_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_table);
    if (message_arena != submessage_arena) {
      time_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_table, submessage_arena);
    }
    set_has_time_table();
    _impl_.op_.time_table_ = time_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
}
void BatchTableRequest_Operation::set_allocated_drop_columns(::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (drop_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_columns);
    if (message_arena != submessage_arena) {
      drop_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_columns, submessage_arena);
    }
    set_has_drop_columns();
    _impl_.op_.drop_columns_ = drop_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
}
void BatchTableRequest_Operation::set_allocated_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.op_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
}
void BatchTableRequest_Operation::set_allocated_lazy_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (lazy_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lazy_update);
    if (message_arena != submessage_arena) {
      lazy_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lazy_update, submessage_arena);
    }
    set_has_lazy_update();
    _impl_.op_.lazy_update_ = lazy_update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
}
void BatchTableRequest_Operation::set_allocated_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(view);
    if (message_arena != submessage_arena) {
      view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    set_has_view();
    _impl_.op_.view_ = view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
}
void BatchTableRequest_Operation::set_allocated_update_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (update_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_view);
    if (message_arena != submessage_arena) {
      update_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_view, submessage_arena);
    }
    set_has_update_view();
    _impl_.op_.update_view_ = update_view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
}
void BatchTableRequest_Operation::set_allocated_select(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(select);
    if (message_arena != submessage_arena) {
      select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    _impl_.op_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
}
void BatchTableRequest_Operation::set_allocated_select_distinct(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (select_distinct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(select_distinct);
    if (message_arena != submessage_arena) {
      select_distinct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_distinct, submessage_arena);
    }
    set_has_select_distinct();
    _impl_.op_.select_distinct_ = select_distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
}
void BatchTableRequest_Operation::set_allocated_filter(::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    _impl_.op_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
}
void BatchTableRequest_Operation::set_allocated_unstructured_filter(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (unstructured_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unstructured_filter);
    if (message_arena != submessage_arena) {
      unstructured_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unstructured_filter, submessage_arena);
    }
    set_has_unstructured_filter();
    _impl_.op_.unstructured_filter_ = unstructured_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
}
void BatchTableRequest_Operation::set_allocated_sort(::io::deephaven::proto::backplane::grpc::SortTableRequest* sort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (sort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sort);
    if (message_arena != submessage_arena) {
      sort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort, submessage_arena);
    }
    set_has_sort();
    _impl_.op_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
}
void BatchTableRequest_Operation::set_allocated_head(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    set_has_head();
    _impl_.op_.head_ = head;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
}
void BatchTableRequest_Operation::set_allocated_tail(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tail);
    if (message_arena != submessage_arena) {
      tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail, submessage_arena);
    }
    set_has_tail();
    _impl_.op_.tail_ = tail;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
}
void BatchTableRequest_Operation::set_allocated_head_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (head_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head_by);
    if (message_arena != submessage_arena) {
      head_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_by, submessage_arena);
    }
    set_has_head_by();
    _impl_.op_.head_by_ = head_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
}
void BatchTableRequest_Operation::set_allocated_tail_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (tail_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tail_by);
    if (message_arena != submessage_arena) {
      tail_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail_by, submessage_arena);
    }
    set_has_tail_by();
    _impl_.op_.tail_by_ = tail_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
}
void BatchTableRequest_Operation::set_allocated_ungroup(::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (ungroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ungroup);
    if (message_arena != submessage_arena) {
      ungroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ungroup, submessage_arena);
    }
    set_has_ungroup();
    _impl_.op_.ungroup_ = ungroup;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
}
void BatchTableRequest_Operation::set_allocated_merge(::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (merge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(merge);
    if (message_arena != submessage_arena) {
      merge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge, submessage_arena);
    }
    set_has_merge();
    _impl_.op_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
}
void BatchTableRequest_Operation::set_allocated_combo_aggregate(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (combo_aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(combo_aggregate);
    if (message_arena != submessage_arena) {
      combo_aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combo_aggregate, submessage_arena);
    }
    set_has_combo_aggregate();
    _impl_.op_.combo_aggregate_ = combo_aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
}
void BatchTableRequest_Operation::set_allocated_flatten(::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (flatten) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flatten);
    if (message_arena != submessage_arena) {
      flatten = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatten, submessage_arena);
    }
    set_has_flatten();
    _impl_.op_.flatten_ = flatten;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
}
void BatchTableRequest_Operation::set_allocated_run_chart_downsample(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest* run_chart_downsample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (run_chart_downsample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(run_chart_downsample);
    if (message_arena != submessage_arena) {
      run_chart_downsample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_chart_downsample, submessage_arena);
    }
    set_has_run_chart_downsample();
    _impl_.op_.run_chart_downsample_ = run_chart_downsample;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.run_chart_downsample)
}
void BatchTableRequest_Operation::set_allocated_cross_join(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest* cross_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (cross_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cross_join);
    if (message_arena != submessage_arena) {
      cross_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross_join, submessage_arena);
    }
    set_has_cross_join();
    _impl_.op_.cross_join_ = cross_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.cross_join)
}
void BatchTableRequest_Operation::set_allocated_natural_join(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest* natural_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (natural_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(natural_join);
    if (message_arena != submessage_arena) {
      natural_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, natural_join, submessage_arena);
    }
    set_has_natural_join();
    _impl_.op_.natural_join_ = natural_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.natural_join)
}
void BatchTableRequest_Operation::set_allocated_exact_join(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest* exact_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (exact_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exact_join);
    if (message_arena != submessage_arena) {
      exact_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exact_join, submessage_arena);
    }
    set_has_exact_join();
    _impl_.op_.exact_join_ = exact_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.exact_join)
}
void BatchTableRequest_Operation::set_allocated_left_join(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest* left_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (left_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left_join);
    if (message_arena != submessage_arena) {
      left_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_join, submessage_arena);
    }
    set_has_left_join();
    _impl_.op_.left_join_ = left_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.left_join)
}
void BatchTableRequest_Operation::set_allocated_as_of_join(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest* as_of_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (as_of_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(as_of_join);
    if (message_arena != submessage_arena) {
      as_of_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_of_join, submessage_arena);
    }
    set_has_as_of_join();
    _impl_.op_.as_of_join_ = as_of_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.as_of_join)
}
void BatchTableRequest_Operation::set_allocated_fetch_table(::io::deephaven::proto::backplane::grpc::FetchTableRequest* fetch_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (fetch_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fetch_table);
    if (message_arena != submessage_arena) {
      fetch_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch_table, submessage_arena);
    }
    set_has_fetch_table();
    _impl_.op_.fetch_table_ = fetch_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.fetch_table)
}
void BatchTableRequest_Operation::set_allocated_apply_preview_columns(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest* apply_preview_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (apply_preview_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(apply_preview_columns);
    if (message_arena != submessage_arena) {
      apply_preview_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_preview_columns, submessage_arena);
    }
    set_has_apply_preview_columns();
    _impl_.op_.apply_preview_columns_ = apply_preview_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.apply_preview_columns)
}
void BatchTableRequest_Operation::set_allocated_create_input_table(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest* create_input_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (create_input_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_input_table);
    if (message_arena != submessage_arena) {
      create_input_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_input_table, submessage_arena);
    }
    set_has_create_input_table();
    _impl_.op_.create_input_table_ = create_input_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.create_input_table)
}
void BatchTableRequest_Operation::set_allocated_update_by(::io::deephaven::proto::backplane::grpc::UpdateByRequest* update_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (update_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_by);
    if (message_arena != submessage_arena) {
      update_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_by, submessage_arena);
    }
    set_has_update_by();
    _impl_.op_.update_by_ = update_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_by)
}
void BatchTableRequest_Operation::set_allocated_where_in(::io::deephaven::proto::backplane::grpc::WhereInRequest* where_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (where_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(where_in);
    if (message_arena != submessage_arena) {
      where_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, where_in, submessage_arena);
    }
    set_has_where_in();
    _impl_.op_.where_in_ = where_in;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.where_in)
}
void BatchTableRequest_Operation::set_allocated_aggregate_all(::io::deephaven::proto::backplane::grpc::AggregateAllRequest* aggregate_all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (aggregate_all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aggregate_all);
    if (message_arena != submessage_arena) {
      aggregate_all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate_all, submessage_arena);
    }
    set_has_aggregate_all();
    _impl_.op_.aggregate_all_ = aggregate_all;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.aggregate_all)
}
void BatchTableRequest_Operation::set_allocated_aggregate(::io::deephaven::proto::backplane::grpc::AggregateRequest* aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aggregate);
    if (message_arena != submessage_arena) {
      aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate, submessage_arena);
    }
    set_has_aggregate();
    _impl_.op_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.aggregate)
}
void BatchTableRequest_Operation::set_allocated_snapshot(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    _impl_.op_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
}
void BatchTableRequest_Operation::set_allocated_snapshot_when(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest* snapshot_when) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (snapshot_when) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot_when);
    if (message_arena != submessage_arena) {
      snapshot_when = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot_when, submessage_arena);
    }
    set_has_snapshot_when();
    _impl_.op_.snapshot_when_ = snapshot_when;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot_when)
}
void BatchTableRequest_Operation::set_allocated_meta_table(::io::deephaven::proto::backplane::grpc::MetaTableRequest* meta_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (meta_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta_table);
    if (message_arena != submessage_arena) {
      meta_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta_table, submessage_arena);
    }
    set_has_meta_table();
    _impl_.op_.meta_table_ = meta_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.meta_table)
}
void BatchTableRequest_Operation::set_allocated_range_join(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest* range_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (range_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range_join);
    if (message_arena != submessage_arena) {
      range_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_join, submessage_arena);
    }
    set_has_range_join();
    _impl_.op_.range_join_ = range_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.range_join)
}
void BatchTableRequest_Operation::set_allocated_aj(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest* aj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (aj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aj);
    if (message_arena != submessage_arena) {
      aj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aj, submessage_arena);
    }
    set_has_aj();
    _impl_.op_.aj_ = aj;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.aj)
}
void BatchTableRequest_Operation::set_allocated_raj(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest* raj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (raj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raj);
    if (message_arena != submessage_arena) {
      raj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raj, submessage_arena);
    }
    set_has_raj();
    _impl_.op_.raj_ = raj;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.raj)
}
void BatchTableRequest_Operation::set_allocated_column_statistics(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest* column_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (column_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(column_statistics);
    if (message_arena != submessage_arena) {
      column_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_statistics, submessage_arena);
    }
    set_has_column_statistics();
    _impl_.op_.column_statistics_ = column_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.column_statistics)
}
BatchTableRequest_Operation::BatchTableRequest_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}
BatchTableRequest_Operation::BatchTableRequest_Operation(const BatchTableRequest_Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchTableRequest_Operation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_op();
  switch (from.op_case()) {
    case kEmptyTable: {
      _this->_internal_mutable_empty_table()->::io::deephaven::proto::backplane::grpc::EmptyTableRequest::MergeFrom(
          from._internal_empty_table());
      break;
    }
    case kTimeTable: {
      _this->_internal_mutable_time_table()->::io::deephaven::proto::backplane::grpc::TimeTableRequest::MergeFrom(
          from._internal_time_table());
      break;
    }
    case kDropColumns: {
      _this->_internal_mutable_drop_columns()->::io::deephaven::proto::backplane::grpc::DropColumnsRequest::MergeFrom(
          from._internal_drop_columns());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_update());
      break;
    }
    case kLazyUpdate: {
      _this->_internal_mutable_lazy_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_lazy_update());
      break;
    }
    case kView: {
      _this->_internal_mutable_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_view());
      break;
    }
    case kUpdateView: {
      _this->_internal_mutable_update_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_update_view());
      break;
    }
    case kSelect: {
      _this->_internal_mutable_select()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_select());
      break;
    }
    case kSelectDistinct: {
      _this->_internal_mutable_select_distinct()->::io::deephaven::proto::backplane::grpc::SelectDistinctRequest::MergeFrom(
          from._internal_select_distinct());
      break;
    }
    case kFilter: {
      _this->_internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::FilterTableRequest::MergeFrom(
          from._internal_filter());
      break;
    }
    case kUnstructuredFilter: {
      _this->_internal_mutable_unstructured_filter()->::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest::MergeFrom(
          from._internal_unstructured_filter());
      break;
    }
    case kSort: {
      _this->_internal_mutable_sort()->::io::deephaven::proto::backplane::grpc::SortTableRequest::MergeFrom(
          from._internal_sort());
      break;
    }
    case kHead: {
      _this->_internal_mutable_head()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(
          from._internal_head());
      break;
    }
    case kTail: {
      _this->_internal_mutable_tail()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(
          from._internal_tail());
      break;
    }
    case kHeadBy: {
      _this->_internal_mutable_head_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(
          from._internal_head_by());
      break;
    }
    case kTailBy: {
      _this->_internal_mutable_tail_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(
          from._internal_tail_by());
      break;
    }
    case kUngroup: {
      _this->_internal_mutable_ungroup()->::io::deephaven::proto::backplane::grpc::UngroupRequest::MergeFrom(
          from._internal_ungroup());
      break;
    }
    case kMerge: {
      _this->_internal_mutable_merge()->::io::deephaven::proto::backplane::grpc::MergeTablesRequest::MergeFrom(
          from._internal_merge());
      break;
    }
    case kComboAggregate: {
      _this->_internal_mutable_combo_aggregate()->::io::deephaven::proto::backplane::grpc::ComboAggregateRequest::MergeFrom(
          from._internal_combo_aggregate());
      break;
    }
    case kFlatten: {
      _this->_internal_mutable_flatten()->::io::deephaven::proto::backplane::grpc::FlattenRequest::MergeFrom(
          from._internal_flatten());
      break;
    }
    case kRunChartDownsample: {
      _this->_internal_mutable_run_chart_downsample()->::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest::MergeFrom(
          from._internal_run_chart_downsample());
      break;
    }
    case kCrossJoin: {
      _this->_internal_mutable_cross_join()->::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest::MergeFrom(
          from._internal_cross_join());
      break;
    }
    case kNaturalJoin: {
      _this->_internal_mutable_natural_join()->::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest::MergeFrom(
          from._internal_natural_join());
      break;
    }
    case kExactJoin: {
      _this->_internal_mutable_exact_join()->::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest::MergeFrom(
          from._internal_exact_join());
      break;
    }
    case kLeftJoin: {
      _this->_internal_mutable_left_join()->::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest::MergeFrom(
          from._internal_left_join());
      break;
    }
    case kAsOfJoin: {
      _this->_internal_mutable_as_of_join()->::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest::MergeFrom(
          from._internal_as_of_join());
      break;
    }
    case kFetchTable: {
      _this->_internal_mutable_fetch_table()->::io::deephaven::proto::backplane::grpc::FetchTableRequest::MergeFrom(
          from._internal_fetch_table());
      break;
    }
    case kApplyPreviewColumns: {
      _this->_internal_mutable_apply_preview_columns()->::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest::MergeFrom(
          from._internal_apply_preview_columns());
      break;
    }
    case kCreateInputTable: {
      _this->_internal_mutable_create_input_table()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest::MergeFrom(
          from._internal_create_input_table());
      break;
    }
    case kUpdateBy: {
      _this->_internal_mutable_update_by()->::io::deephaven::proto::backplane::grpc::UpdateByRequest::MergeFrom(
          from._internal_update_by());
      break;
    }
    case kWhereIn: {
      _this->_internal_mutable_where_in()->::io::deephaven::proto::backplane::grpc::WhereInRequest::MergeFrom(
          from._internal_where_in());
      break;
    }
    case kAggregateAll: {
      _this->_internal_mutable_aggregate_all()->::io::deephaven::proto::backplane::grpc::AggregateAllRequest::MergeFrom(
          from._internal_aggregate_all());
      break;
    }
    case kAggregate: {
      _this->_internal_mutable_aggregate()->::io::deephaven::proto::backplane::grpc::AggregateRequest::MergeFrom(
          from._internal_aggregate());
      break;
    }
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::io::deephaven::proto::backplane::grpc::SnapshotTableRequest::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kSnapshotWhen: {
      _this->_internal_mutable_snapshot_when()->::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest::MergeFrom(
          from._internal_snapshot_when());
      break;
    }
    case kMetaTable: {
      _this->_internal_mutable_meta_table()->::io::deephaven::proto::backplane::grpc::MetaTableRequest::MergeFrom(
          from._internal_meta_table());
      break;
    }
    case kRangeJoin: {
      _this->_internal_mutable_range_join()->::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest::MergeFrom(
          from._internal_range_join());
      break;
    }
    case kAj: {
      _this->_internal_mutable_aj()->::io::deephaven::proto::backplane::grpc::AjRajTablesRequest::MergeFrom(
          from._internal_aj());
      break;
    }
    case kRaj: {
      _this->_internal_mutable_raj()->::io::deephaven::proto::backplane::grpc::AjRajTablesRequest::MergeFrom(
          from._internal_raj());
      break;
    }
    case kColumnStatistics: {
      _this->_internal_mutable_column_statistics()->::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest::MergeFrom(
          from._internal_column_statistics());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}

inline void BatchTableRequest_Operation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_op();
}

BatchTableRequest_Operation::~BatchTableRequest_Operation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchTableRequest_Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_op()) {
    clear_op();
  }
}

void BatchTableRequest_Operation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchTableRequest_Operation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  switch (op_case()) {
    case kEmptyTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.empty_table_;
      }
      break;
    }
    case kTimeTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.time_table_;
      }
      break;
    }
    case kDropColumns: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.drop_columns_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.update_;
      }
      break;
    }
    case kLazyUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.lazy_update_;
      }
      break;
    }
    case kView: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.view_;
      }
      break;
    }
    case kUpdateView: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.update_view_;
      }
      break;
    }
    case kSelect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.select_;
      }
      break;
    }
    case kSelectDistinct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.select_distinct_;
      }
      break;
    }
    case kFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.filter_;
      }
      break;
    }
    case kUnstructuredFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.unstructured_filter_;
      }
      break;
    }
    case kSort: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.sort_;
      }
      break;
    }
    case kHead: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.head_;
      }
      break;
    }
    case kTail: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.tail_;
      }
      break;
    }
    case kHeadBy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.head_by_;
      }
      break;
    }
    case kTailBy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.tail_by_;
      }
      break;
    }
    case kUngroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.ungroup_;
      }
      break;
    }
    case kMerge: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.merge_;
      }
      break;
    }
    case kComboAggregate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.combo_aggregate_;
      }
      break;
    }
    case kFlatten: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.flatten_;
      }
      break;
    }
    case kRunChartDownsample: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.run_chart_downsample_;
      }
      break;
    }
    case kCrossJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.cross_join_;
      }
      break;
    }
    case kNaturalJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.natural_join_;
      }
      break;
    }
    case kExactJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.exact_join_;
      }
      break;
    }
    case kLeftJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.left_join_;
      }
      break;
    }
    case kAsOfJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.as_of_join_;
      }
      break;
    }
    case kFetchTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.fetch_table_;
      }
      break;
    }
    case kApplyPreviewColumns: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.apply_preview_columns_;
      }
      break;
    }
    case kCreateInputTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.create_input_table_;
      }
      break;
    }
    case kUpdateBy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.update_by_;
      }
      break;
    }
    case kWhereIn: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.where_in_;
      }
      break;
    }
    case kAggregateAll: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.aggregate_all_;
      }
      break;
    }
    case kAggregate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.aggregate_;
      }
      break;
    }
    case kSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.snapshot_;
      }
      break;
    }
    case kSnapshotWhen: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.snapshot_when_;
      }
      break;
    }
    case kMetaTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.meta_table_;
      }
      break;
    }
    case kRangeJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.range_join_;
      }
      break;
    }
    case kAj: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.aj_;
      }
      break;
    }
    case kRaj: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.raj_;
      }
      break;
    }
    case kColumnStatistics: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.op_.column_statistics_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OP_NOT_SET;
}


void BatchTableRequest_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTableRequest_Operation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lazy_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_distinct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_unstructured_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ungroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_combo_aggregate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatten(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_chart_downsample(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_exact_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27 [deprecated = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_of_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_preview_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_input_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.UpdateByRequest update_by = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.WhereInRequest where_in = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_where_in(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggregateAllRequest aggregate_all = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_all(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AggregateRequest aggregate = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest snapshot_when = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot_when(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.MetaTableRequest meta_table = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest range_join = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest aj = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_aj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest raj = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_raj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest column_statistics = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchTableRequest_Operation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
  if (_internal_has_empty_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::empty_table(this),
        _Internal::empty_table(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
  if (_internal_has_time_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_table(this),
        _Internal::time_table(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
  if (_internal_has_drop_columns()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::drop_columns(this),
        _Internal::drop_columns(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
  if (_internal_has_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::update(this),
        _Internal::update(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
  if (_internal_has_lazy_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::lazy_update(this),
        _Internal::lazy_update(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
  if (_internal_has_view()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::view(this),
        _Internal::view(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
  if (_internal_has_update_view()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::update_view(this),
        _Internal::update_view(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
  if (_internal_has_select()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::select(this),
        _Internal::select(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
  if (_internal_has_select_distinct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::select_distinct(this),
        _Internal::select_distinct(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
  if (_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
  if (_internal_has_unstructured_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::unstructured_filter(this),
        _Internal::unstructured_filter(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
  if (_internal_has_sort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::sort(this),
        _Internal::sort(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
  if (_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
  if (_internal_has_tail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tail(this),
        _Internal::tail(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
  if (_internal_has_head_by()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::head_by(this),
        _Internal::head_by(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
  if (_internal_has_tail_by()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::tail_by(this),
        _Internal::tail_by(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
  if (_internal_has_ungroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::ungroup(this),
        _Internal::ungroup(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
  if (_internal_has_merge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::merge(this),
        _Internal::merge(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
  if (_internal_has_combo_aggregate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::combo_aggregate(this),
        _Internal::combo_aggregate(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
  if (_internal_has_flatten()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::flatten(this),
        _Internal::flatten(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
  if (_internal_has_run_chart_downsample()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::run_chart_downsample(this),
        _Internal::run_chart_downsample(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
  if (_internal_has_cross_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::cross_join(this),
        _Internal::cross_join(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
  if (_internal_has_natural_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::natural_join(this),
        _Internal::natural_join(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
  if (_internal_has_exact_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::exact_join(this),
        _Internal::exact_join(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
  if (_internal_has_left_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::left_join(this),
        _Internal::left_join(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27 [deprecated = true];
  if (_internal_has_as_of_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::as_of_join(this),
        _Internal::as_of_join(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
  if (_internal_has_fetch_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::fetch_table(this),
        _Internal::fetch_table(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
  if (_internal_has_apply_preview_columns()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::apply_preview_columns(this),
        _Internal::apply_preview_columns(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
  if (_internal_has_create_input_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::create_input_table(this),
        _Internal::create_input_table(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.UpdateByRequest update_by = 32;
  if (_internal_has_update_by()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::update_by(this),
        _Internal::update_by(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.WhereInRequest where_in = 33;
  if (_internal_has_where_in()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::where_in(this),
        _Internal::where_in(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggregateAllRequest aggregate_all = 34;
  if (_internal_has_aggregate_all()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::aggregate_all(this),
        _Internal::aggregate_all(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AggregateRequest aggregate = 35;
  if (_internal_has_aggregate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::aggregate(this),
        _Internal::aggregate(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 36;
  if (_internal_has_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::snapshot(this),
        _Internal::snapshot(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest snapshot_when = 37;
  if (_internal_has_snapshot_when()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::snapshot_when(this),
        _Internal::snapshot_when(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.MetaTableRequest meta_table = 38;
  if (_internal_has_meta_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::meta_table(this),
        _Internal::meta_table(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest range_join = 39;
  if (_internal_has_range_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::range_join(this),
        _Internal::range_join(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest aj = 40;
  if (_internal_has_aj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::aj(this),
        _Internal::aj(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest raj = 41;
  if (_internal_has_raj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::raj(this),
        _Internal::raj(this).GetCachedSize(), target, stream);
  }

  // .io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest column_statistics = 42;
  if (_internal_has_column_statistics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::column_statistics(this),
        _Internal::column_statistics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  return target;
}

size_t BatchTableRequest_Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (op_case()) {
    // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
    case kEmptyTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.empty_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
    case kTimeTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.time_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
    case kDropColumns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.drop_columns_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.update_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
    case kLazyUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.lazy_update_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
    case kView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.view_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
    case kUpdateView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.update_view_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
    case kSelect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.select_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
    case kSelectDistinct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.select_distinct_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.filter_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
    case kUnstructuredFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.unstructured_filter_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
    case kSort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.sort_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
    case kHead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.head_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
    case kTail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.tail_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
    case kHeadBy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.head_by_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
    case kTailBy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.tail_by_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
    case kUngroup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.ungroup_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
    case kMerge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.merge_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
    case kComboAggregate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.combo_aggregate_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
    case kFlatten: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.flatten_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
    case kRunChartDownsample: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.run_chart_downsample_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
    case kCrossJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.cross_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
    case kNaturalJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.natural_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
    case kExactJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.exact_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
    case kLeftJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.left_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27 [deprecated = true];
    case kAsOfJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.as_of_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
    case kFetchTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.fetch_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
    case kApplyPreviewColumns: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.apply_preview_columns_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
    case kCreateInputTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.create_input_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest update_by = 32;
    case kUpdateBy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.update_by_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.WhereInRequest where_in = 33;
    case kWhereIn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.where_in_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggregateAllRequest aggregate_all = 34;
    case kAggregateAll: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.aggregate_all_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AggregateRequest aggregate = 35;
    case kAggregate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.aggregate_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 36;
    case kSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.snapshot_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest snapshot_when = 37;
    case kSnapshotWhen: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.snapshot_when_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.MetaTableRequest meta_table = 38;
    case kMetaTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.meta_table_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest range_join = 39;
    case kRangeJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.range_join_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest aj = 40;
    case kAj: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.aj_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest raj = 41;
    case kRaj: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.raj_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest column_statistics = 42;
    case kColumnStatistics: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.op_.column_statistics_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchTableRequest_Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchTableRequest_Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchTableRequest_Operation::GetClassData() const { return &_class_data_; }


void BatchTableRequest_Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchTableRequest_Operation*>(&to_msg);
  auto& from = static_cast<const BatchTableRequest_Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_case()) {
    case kEmptyTable: {
      _this->_internal_mutable_empty_table()->::io::deephaven::proto::backplane::grpc::EmptyTableRequest::MergeFrom(
          from._internal_empty_table());
      break;
    }
    case kTimeTable: {
      _this->_internal_mutable_time_table()->::io::deephaven::proto::backplane::grpc::TimeTableRequest::MergeFrom(
          from._internal_time_table());
      break;
    }
    case kDropColumns: {
      _this->_internal_mutable_drop_columns()->::io::deephaven::proto::backplane::grpc::DropColumnsRequest::MergeFrom(
          from._internal_drop_columns());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_update());
      break;
    }
    case kLazyUpdate: {
      _this->_internal_mutable_lazy_update()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_lazy_update());
      break;
    }
    case kView: {
      _this->_internal_mutable_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_view());
      break;
    }
    case kUpdateView: {
      _this->_internal_mutable_update_view()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_update_view());
      break;
    }
    case kSelect: {
      _this->_internal_mutable_select()->::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest::MergeFrom(
          from._internal_select());
      break;
    }
    case kSelectDistinct: {
      _this->_internal_mutable_select_distinct()->::io::deephaven::proto::backplane::grpc::SelectDistinctRequest::MergeFrom(
          from._internal_select_distinct());
      break;
    }
    case kFilter: {
      _this->_internal_mutable_filter()->::io::deephaven::proto::backplane::grpc::FilterTableRequest::MergeFrom(
          from._internal_filter());
      break;
    }
    case kUnstructuredFilter: {
      _this->_internal_mutable_unstructured_filter()->::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest::MergeFrom(
          from._internal_unstructured_filter());
      break;
    }
    case kSort: {
      _this->_internal_mutable_sort()->::io::deephaven::proto::backplane::grpc::SortTableRequest::MergeFrom(
          from._internal_sort());
      break;
    }
    case kHead: {
      _this->_internal_mutable_head()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(
          from._internal_head());
      break;
    }
    case kTail: {
      _this->_internal_mutable_tail()->::io::deephaven::proto::backplane::grpc::HeadOrTailRequest::MergeFrom(
          from._internal_tail());
      break;
    }
    case kHeadBy: {
      _this->_internal_mutable_head_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(
          from._internal_head_by());
      break;
    }
    case kTailBy: {
      _this->_internal_mutable_tail_by()->::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest::MergeFrom(
          from._internal_tail_by());
      break;
    }
    case kUngroup: {
      _this->_internal_mutable_ungroup()->::io::deephaven::proto::backplane::grpc::UngroupRequest::MergeFrom(
          from._internal_ungroup());
      break;
    }
    case kMerge: {
      _this->_internal_mutable_merge()->::io::deephaven::proto::backplane::grpc::MergeTablesRequest::MergeFrom(
          from._internal_merge());
      break;
    }
    case kComboAggregate: {
      _this->_internal_mutable_combo_aggregate()->::io::deephaven::proto::backplane::grpc::ComboAggregateRequest::MergeFrom(
          from._internal_combo_aggregate());
      break;
    }
    case kFlatten: {
      _this->_internal_mutable_flatten()->::io::deephaven::proto::backplane::grpc::FlattenRequest::MergeFrom(
          from._internal_flatten());
      break;
    }
    case kRunChartDownsample: {
      _this->_internal_mutable_run_chart_downsample()->::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest::MergeFrom(
          from._internal_run_chart_downsample());
      break;
    }
    case kCrossJoin: {
      _this->_internal_mutable_cross_join()->::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest::MergeFrom(
          from._internal_cross_join());
      break;
    }
    case kNaturalJoin: {
      _this->_internal_mutable_natural_join()->::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest::MergeFrom(
          from._internal_natural_join());
      break;
    }
    case kExactJoin: {
      _this->_internal_mutable_exact_join()->::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest::MergeFrom(
          from._internal_exact_join());
      break;
    }
    case kLeftJoin: {
      _this->_internal_mutable_left_join()->::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest::MergeFrom(
          from._internal_left_join());
      break;
    }
    case kAsOfJoin: {
      _this->_internal_mutable_as_of_join()->::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest::MergeFrom(
          from._internal_as_of_join());
      break;
    }
    case kFetchTable: {
      _this->_internal_mutable_fetch_table()->::io::deephaven::proto::backplane::grpc::FetchTableRequest::MergeFrom(
          from._internal_fetch_table());
      break;
    }
    case kApplyPreviewColumns: {
      _this->_internal_mutable_apply_preview_columns()->::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest::MergeFrom(
          from._internal_apply_preview_columns());
      break;
    }
    case kCreateInputTable: {
      _this->_internal_mutable_create_input_table()->::io::deephaven::proto::backplane::grpc::CreateInputTableRequest::MergeFrom(
          from._internal_create_input_table());
      break;
    }
    case kUpdateBy: {
      _this->_internal_mutable_update_by()->::io::deephaven::proto::backplane::grpc::UpdateByRequest::MergeFrom(
          from._internal_update_by());
      break;
    }
    case kWhereIn: {
      _this->_internal_mutable_where_in()->::io::deephaven::proto::backplane::grpc::WhereInRequest::MergeFrom(
          from._internal_where_in());
      break;
    }
    case kAggregateAll: {
      _this->_internal_mutable_aggregate_all()->::io::deephaven::proto::backplane::grpc::AggregateAllRequest::MergeFrom(
          from._internal_aggregate_all());
      break;
    }
    case kAggregate: {
      _this->_internal_mutable_aggregate()->::io::deephaven::proto::backplane::grpc::AggregateRequest::MergeFrom(
          from._internal_aggregate());
      break;
    }
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::io::deephaven::proto::backplane::grpc::SnapshotTableRequest::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kSnapshotWhen: {
      _this->_internal_mutable_snapshot_when()->::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest::MergeFrom(
          from._internal_snapshot_when());
      break;
    }
    case kMetaTable: {
      _this->_internal_mutable_meta_table()->::io::deephaven::proto::backplane::grpc::MetaTableRequest::MergeFrom(
          from._internal_meta_table());
      break;
    }
    case kRangeJoin: {
      _this->_internal_mutable_range_join()->::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest::MergeFrom(
          from._internal_range_join());
      break;
    }
    case kAj: {
      _this->_internal_mutable_aj()->::io::deephaven::proto::backplane::grpc::AjRajTablesRequest::MergeFrom(
          from._internal_aj());
      break;
    }
    case kRaj: {
      _this->_internal_mutable_raj()->::io::deephaven::proto::backplane::grpc::AjRajTablesRequest::MergeFrom(
          from._internal_raj());
      break;
    }
    case kColumnStatistics: {
      _this->_internal_mutable_column_statistics()->::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest::MergeFrom(
          from._internal_column_statistics());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTableRequest_Operation::CopyFrom(const BatchTableRequest_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTableRequest_Operation::IsInitialized() const {
  return true;
}

void BatchTableRequest_Operation::InternalSwap(BatchTableRequest_Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.op_, other->_impl_.op_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTableRequest_Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[120]);
}

// ===================================================================

class BatchTableRequest::_Internal {
 public:
};

BatchTableRequest::BatchTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}
BatchTableRequest::BatchTableRequest(const BatchTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ops_){from._impl_.ops_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}

inline void BatchTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ops_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchTableRequest::~BatchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ops_.~RepeatedPtrField();
}

void BatchTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ops_size()); i < n; i++) {
    const auto& repfield = this->_internal_ops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  return target;
}

size_t BatchTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->_impl_.ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchTableRequest::GetClassData() const { return &_class_data_; }


void BatchTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchTableRequest*>(&to_msg);
  auto& from = static_cast<const BatchTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ops_.MergeFrom(from._impl_.ops_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTableRequest::CopyFrom(const BatchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTableRequest::IsInitialized() const {
  return true;
}

void BatchTableRequest::InternalSwap(BatchTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ops_.InternalSwap(&other->_impl_.ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2ftable_2eproto_getter, &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
      file_level_metadata_deephaven_2fproto_2ftable_2eproto[121]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TableReference*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TableReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TableReference >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FetchTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FetchTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FetchTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::EmptyTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::EmptyTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::TimeTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::TimeTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::TimeTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::MathContext*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MathContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::MathContext >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UpdateByRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UpdateByRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UpdateByRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::DropColumnsRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::DropColumnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::UngroupRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::UngroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::UngroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::MergeTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::MergeTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggregateAllRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggregateAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggregateAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggSpec*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AggregateRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Aggregation*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Aggregation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Aggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SortDescriptor*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SortDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SortDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SortTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SortTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SortTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FilterTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FilterTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FilterTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SeekRowRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SeekRowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SeekRowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SeekRowResponse*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SeekRowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SeekRowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Reference*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Literal*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Literal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Literal >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Value*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::Condition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::AndCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::AndCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::AndCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::OrCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::OrCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::OrCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::NotCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::NotCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::NotCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CompareCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CompareCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CompareCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::InCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::InCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::InCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::InvokeCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::InvokeCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::InvokeCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::IsNullCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::IsNullCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::IsNullCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::MatchesCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MatchesCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::MatchesCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ContainsCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ContainsCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ContainsCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::SearchCondition*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::SearchCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::SearchCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::FlattenRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::FlattenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::FlattenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::MetaTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::MetaTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::MetaTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::WhereInRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::WhereInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::WhereInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::io::deephaven::proto::backplane::grpc::BatchTableRequest*
Arena::CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::BatchTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::deephaven::proto::backplane::grpc::BatchTableRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
